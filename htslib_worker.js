// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');

    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}







//========================================
// Runtime essentials
//========================================

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }
  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();



function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}



function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}


var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate






// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}


// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}


function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}


// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}


// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
      return func;
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}


// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  buffer = new ArrayBuffer(TOTAL_MEMORY);
}
updateGlobalBufferViews();


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
if (HEAPU8[0] !== 255 || HEAPU8[3] !== 0) throw 'Typed arrays 2 must be run on a little-endian system';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}


function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}


function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}


function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}


function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}


// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}


function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}


function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}


function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}


function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}


function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}


Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;

// === Body ===

var ASM_CONSTS = [function($0) { { return allocate(intArrayFromString(htsfiles[$0].fileobj.name), 'i8', ALLOC_NORMAL); } },
 function($0, $1, $2) { { return js_read($0, $1, $2); } },
 function($0, $1, $2) { { return js_seek($0, $1, $2); } },
 function($0) { { js_close($0); } }];

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
 return ASM_CONSTS[code](a0, a1, a2);
}

function _emscripten_asm_const_ii(code, a0) {
 return ASM_CONSTS[code](a0);
}



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 28736;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_interface_cpp() } });
  

/* memory initializer */ allocate([168,39,0,0,37,105,0,0,208,39,0,0,3,105,0,0,48,0,0,0,0,0,0,0,208,39,0,0,176,104,0,0,16,0,0,0,0,0,0,0,208,39,0,0,213,104,0,0,64,0,0,0,0,0,0,0,168,39,0,0,246,104,0,0,208,39,0,0,50,105,0,0,8,0,0,0,0,0,0,0,208,39,0,0,114,105,0,0,48,0,0,0,0,0,0,0,208,39,0,0,78,105,0,0,88,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,22,60,0,0,80,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,13,0,0,0,14,0,0,0,10,0,0,0,22,60,0,0,80,0,0,0,15,0,0,0,10,0,0,0,22,60,0,0,0,0,0,0,16,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,65,60,0,0,0,0,0,0,15,0,0,0,17,0,0,0,28,0,0,0,25,0,0,0,29,0,0,0,24,0,0,0,30,0,0,0,12,0,0,0,27,0,0,0,26,0,0,0,31,0,0,0,13,0,0,0,18,0,0,0,19,0,0,0,32,0,0,0,11,0,0,0,20,0,0,0,23,0,0,0,22,0,0,0,21,0,0,0,16,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,14,0,0,0,37,0,0,0,38,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,127,0,0,0,127,0,0,0,127,0,0,0,127,0,0,0,127,0,0,0,127,0,0,0,127,0,0,0,127,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,31,0,0,0,31,0,0,0,15,0,0,0,15,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,150,48,7,119,44,97,14,238,186,81,9,153,25,196,109,7,143,244,106,112,53,165,99,233,163,149,100,158,50,136,219,14,164,184,220,121,30,233,213,224,136,217,210,151,43,76,182,9,189,124,177,126,7,45,184,231,145,29,191,144,100,16,183,29,242,32,176,106,72,113,185,243,222,65,190,132,125,212,218,26,235,228,221,109,81,181,212,244,199,133,211,131,86,152,108,19,192,168,107,100,122,249,98,253,236,201,101,138,79,92,1,20,217,108,6,99,99,61,15,250,245,13,8,141,200,32,110,59,94,16,105,76,228,65,96,213,114,113,103,162,209,228,3,60,71,212,4,75,253,133,13,210,107,181,10,165,250,168,181,53,108,152,178,66,214,201,187,219,64,249,188,172,227,108,216,50,117,92,223,69,207,13,214,220,89,61,209,171,172,48,217,38,58,0,222,81,128,81,215,200,22,97,208,191,181,244,180,33,35,196,179,86,153,149,186,207,15,165,189,184,158,184,2,40,8,136,5,95,178,217,12,198,36,233,11,177,135,124,111,47,17,76,104,88,171,29,97,193,61,45,102,182,144,65,220,118,6,113,219,1,188,32,210,152,42,16,213,239,137,133,177,113,31,181,182,6,165,228,191,159,51,212,184,232,162,201,7,120,52,249,0,15,142,168,9,150,24,152,14,225,187,13,106,127,45,61,109,8,151,108,100,145,1,92,99,230,244,81,107,107,98,97,108,28,216,48,101,133,78,0,98,242,237,149,6,108,123,165,1,27,193,244,8,130,87,196,15,245,198,217,176,101,80,233,183,18,234,184,190,139,124,136,185,252,223,29,221,98,73,45,218,21,243,124,211,140,101,76,212,251,88,97,178,77,206,81,181,58,116,0,188,163,226,48,187,212,65,165,223,74,215,149,216,61,109,196,209,164,251,244,214,211,106,233,105,67,252,217,110,52,70,136,103,173,208,184,96,218,115,45,4,68,229,29,3,51,95,76,10,170,201,124,13,221,60,113,5,80,170,65,2,39,16,16,11,190,134,32,12,201,37,181,104,87,179,133,111,32,9,212,102,185,159,228,97,206,14,249,222,94,152,201,217,41,34,152,208,176,180,168,215,199,23,61,179,89,129,13,180,46,59,92,189,183,173,108,186,192,32,131,184,237,182,179,191,154,12,226,182,3,154,210,177,116,57,71,213,234,175,119,210,157,21,38,219,4,131,22,220,115,18,11,99,227,132,59,100,148,62,106,109,13,168,90,106,122,11,207,14,228,157,255,9,147,39,174,0,10,177,158,7,125,68,147,15,240,210,163,8,135,104,242,1,30,254,194,6,105,93,87,98,247,203,103,101,128,113,54,108,25,231,6,107,110,118,27,212,254,224,43,211,137,90,122,218,16,204,74,221,103,111,223,185,249,249,239,190,142,67,190,183,23,213,142,176,96,232,163,214,214,126,147,209,161,196,194,216,56,82,242,223,79,241,103,187,209,103,87,188,166,221,6,181,63,75,54,178,72,218,43,13,216,76,27,10,175,246,74,3,54,96,122,4,65,195,239,96,223,85,223,103,168,239,142,110,49,121,190,105,70,140,179,97,203,26,131,102,188,160,210,111,37,54,226,104,82,149,119,12,204,3,71,11,187,185,22,2,34,47,38,5,85,190,59,186,197,40,11,189,178,146,90,180,43,4,106,179,92,167,255,215,194,49,207,208,181,139,158,217,44,29,174,222,91,176,194,100,155,38,242,99,236,156,163,106,117,10,147,109,2,169,6,9,156,63,54,14,235,133,103,7,114,19,87,0,5,130,74,191,149,20,122,184,226,174,43,177,123,56,27,182,12,155,142,210,146,13,190,213,229,183,239,220,124,33,223,219,11,212,210,211,134,66,226,212,241,248,179,221,104,110,131,218,31,205,22,190,129,91,38,185,246,225,119,176,111,119,71,183,24,230,90,8,136,112,106,15,255,202,59,6,102,92,11,1,17,255,158,101,143,105,174,98,248,211,255,107,97,69,207,108,22,120,226,10,160,238,210,13,215,84,131,4,78,194,179,3,57,97,38,103,167,247,22,96,208,77,71,105,73,219,119,110,62,74,106,209,174,220,90,214,217,102,11,223,64,240,59,216,55,83,174,188,169,197,158,187,222,127,207,178,71,233,255,181,48,28,242,189,189,138,194,186,202,48,147,179,83,166,163,180,36,5,54,208,186,147,6,215,205,41,87,222,84,191,103,217,35,46,122,102,179,184,74,97,196,2,27,104,93,148,43,111,42,55,190,11,180,161,142,12,195,27,223,5,90,141,239,2,45,0,0,0,0,65,49,27,25,130,98,54,50,195,83,45,43,4,197,108,100,69,244,119,125,134,167,90,86,199,150,65,79,8,138,217,200,73,187,194,209,138,232,239,250,203,217,244,227,12,79,181,172,77,126,174,181,142,45,131,158,207,28,152,135,81,18,194,74,16,35,217,83,211,112,244,120,146,65,239,97,85,215,174,46,20,230,181,55,215,181,152,28,150,132,131,5,89,152,27,130,24,169,0,155,219,250,45,176,154,203,54,169,93,93,119,230,28,108,108,255,223,63,65,212,158,14,90,205,162,36,132,149,227,21,159,140,32,70,178,167,97,119,169,190,166,225,232,241,231,208,243,232,36,131,222,195,101,178,197,218,170,174,93,93,235,159,70,68,40,204,107,111,105,253,112,118,174,107,49,57,239,90,42,32,44,9,7,11,109,56,28,18,243,54,70,223,178,7,93,198,113,84,112,237,48,101,107,244,247,243,42,187,182,194,49,162,117,145,28,137,52,160,7,144,251,188,159,23,186,141,132,14,121,222,169,37,56,239,178,60,255,121,243,115,190,72,232,106,125,27,197,65,60,42,222,88,5,79,121,240,68,126,98,233,135,45,79,194,198,28,84,219,1,138,21,148,64,187,14,141,131,232,35,166,194,217,56,191,13,197,160,56,76,244,187,33,143,167,150,10,206,150,141,19,9,0,204,92,72,49,215,69,139,98,250,110,202,83,225,119,84,93,187,186,21,108,160,163,214,63,141,136,151,14,150,145,80,152,215,222,17,169,204,199,210,250,225,236,147,203,250,245,92,215,98,114,29,230,121,107,222,181,84,64,159,132,79,89,88,18,14,22,25,35,21,15,218,112,56,36,155,65,35,61,167,107,253,101,230,90,230,124,37,9,203,87,100,56,208,78,163,174,145,1,226,159,138,24,33,204,167,51,96,253,188,42,175,225,36,173,238,208,63,180,45,131,18,159,108,178,9,134,171,36,72,201,234,21,83,208,41,70,126,251,104,119,101,226,246,121,63,47,183,72,36,54,116,27,9,29,53,42,18,4,242,188,83,75,179,141,72,82,112,222,101,121,49,239,126,96,254,243,230,231,191,194,253,254,124,145,208,213,61,160,203,204,250,54,138,131,187,7,145,154,120,84,188,177,57,101,167,168,75,152,131,59,10,169,152,34,201,250,181,9,136,203,174,16,79,93,239,95,14,108,244,70,205,63,217,109,140,14,194,116,67,18,90,243,2,35,65,234,193,112,108,193,128,65,119,216,71,215,54,151,6,230,45,142,197,181,0,165,132,132,27,188,26,138,65,113,91,187,90,104,152,232,119,67,217,217,108,90,30,79,45,21,95,126,54,12,156,45,27,39,221,28,0,62,18,0,152,185,83,49,131,160,144,98,174,139,209,83,181,146,22,197,244,221,87,244,239,196,148,167,194,239,213,150,217,246,233,188,7,174,168,141,28,183,107,222,49,156,42,239,42,133,237,121,107,202,172,72,112,211,111,27,93,248,46,42,70,225,225,54,222,102,160,7,197,127,99,84,232,84,34,101,243,77,229,243,178,2,164,194,169,27,103,145,132,48,38,160,159,41,184,174,197,228,249,159,222,253,58,204,243,214,123,253,232,207,188,107,169,128,253,90,178,153,62,9,159,178,127,56,132,171,176,36,28,44,241,21,7,53,50,70,42,30,115,119,49,7,180,225,112,72,245,208,107,81,54,131,70,122,119,178,93,99,78,215,250,203,15,230,225,210,204,181,204,249,141,132,215,224,74,18,150,175,11,35,141,182,200,112,160,157,137,65,187,132,70,93,35,3,7,108,56,26,196,63,21,49,133,14,14,40,66,152,79,103,3,169,84,126,192,250,121,85,129,203,98,76,31,197,56,129,94,244,35,152,157,167,14,179,220,150,21,170,27,0,84,229,90,49,79,252,153,98,98,215,216,83,121,206,23,79,225,73,86,126,250,80,149,45,215,123,212,28,204,98,19,138,141,45,82,187,150,52,145,232,187,31,208,217,160,6,236,243,126,94,173,194,101,71,110,145,72,108,47,160,83,117,232,54,18,58,169,7,9,35,106,84,36,8,43,101,63,17,228,121,167,150,165,72,188,143,102,27,145,164,39,42,138,189,224,188,203,242,161,141,208,235,98,222,253,192,35,239,230,217,189,225,188,20,252,208,167,13,63,131,138,38,126,178,145,63,185,36,208,112,248,21,203,105,59,70,230,66,122,119,253,91,181,107,101,220,244,90,126,197,55,9,83,238,118,56,72,247,177,174,9,184,240,159,18,161,51,204,63,138,114,253,36,147,0,0,0,0,55,106,194,1,110,212,132,3,89,190,70,2,220,168,9,7,235,194,203,6,178,124,141,4,133,22,79,5,184,81,19,14,143,59,209,15,214,133,151,13,225,239,85,12,100,249,26,9,83,147,216,8,10,45,158,10,61,71,92,11,112,163,38,28,71,201,228,29,30,119,162,31,41,29,96,30,172,11,47,27,155,97,237,26,194,223,171,24,245,181,105,25,200,242,53,18,255,152,247,19,166,38,177,17,145,76,115,16,20,90,60,21,35,48,254,20,122,142,184,22,77,228,122,23,224,70,77,56,215,44,143,57,142,146,201,59,185,248,11,58,60,238,68,63,11,132,134,62,82,58,192,60,101,80,2,61,88,23,94,54,111,125,156,55,54,195,218,53,1,169,24,52,132,191,87,49,179,213,149,48,234,107,211,50,221,1,17,51,144,229,107,36,167,143,169,37,254,49,239,39,201,91,45,38,76,77,98,35,123,39,160,34,34,153,230,32,21,243,36,33,40,180,120,42,31,222,186,43,70,96,252,41,113,10,62,40,244,28,113,45,195,118,179,44,154,200,245,46,173,162,55,47,192,141,154,112,247,231,88,113,174,89,30,115,153,51,220,114,28,37,147,119,43,79,81,118,114,241,23,116,69,155,213,117,120,220,137,126,79,182,75,127,22,8,13,125,33,98,207,124,164,116,128,121,147,30,66,120,202,160,4,122,253,202,198,123,176,46,188,108,135,68,126,109,222,250,56,111,233,144,250,110,108,134,181,107,91,236,119,106,2,82,49,104,53,56,243,105,8,127,175,98,63,21,109,99,102,171,43,97,81,193,233,96,212,215,166,101,227,189,100,100,186,3,34,102,141,105,224,103,32,203,215,72,23,161,21,73,78,31,83,75,121,117,145,74,252,99,222,79,203,9,28,78,146,183,90,76,165,221,152,77,152,154,196,70,175,240,6,71,246,78,64,69,193,36,130,68,68,50,205,65,115,88,15,64,42,230,73,66,29,140,139,67,80,104,241,84,103,2,51,85,62,188,117,87,9,214,183,86,140,192,248,83,187,170,58,82,226,20,124,80,213,126,190,81,232,57,226,90,223,83,32,91,134,237,102,89,177,135,164,88,52,145,235,93,3,251,41,92,90,69,111,94,109,47,173,95,128,27,53,225,183,113,247,224,238,207,177,226,217,165,115,227,92,179,60,230,107,217,254,231,50,103,184,229,5,13,122,228,56,74,38,239,15,32,228,238,86,158,162,236,97,244,96,237,228,226,47,232,211,136,237,233,138,54,171,235,189,92,105,234,240,184,19,253,199,210,209,252,158,108,151,254,169,6,85,255,44,16,26,250,27,122,216,251,66,196,158,249,117,174,92,248,72,233,0,243,127,131,194,242,38,61,132,240,17,87,70,241,148,65,9,244,163,43,203,245,250,149,141,247,205,255,79,246,96,93,120,217,87,55,186,216,14,137,252,218,57,227,62,219,188,245,113,222,139,159,179,223,210,33,245,221,229,75,55,220,216,12,107,215,239,102,169,214,182,216,239,212,129,178,45,213,4,164,98,208,51,206,160,209,106,112,230,211,93,26,36,210,16,254,94,197,39,148,156,196,126,42,218,198,73,64,24,199,204,86,87,194,251,60,149,195,162,130,211,193,149,232,17,192,168,175,77,203,159,197,143,202,198,123,201,200,241,17,11,201,116,7,68,204,67,109,134,205,26,211,192,207,45,185,2,206,64,150,175,145,119,252,109,144,46,66,43,146,25,40,233,147,156,62,166,150,171,84,100,151,242,234,34,149,197,128,224,148,248,199,188,159,207,173,126,158,150,19,56,156,161,121,250,157,36,111,181,152,19,5,119,153,74,187,49,155,125,209,243,154,48,53,137,141,7,95,75,140,94,225,13,142,105,139,207,143,236,157,128,138,219,247,66,139,130,73,4,137,181,35,198,136,136,100,154,131,191,14,88,130,230,176,30,128,209,218,220,129,84,204,147,132,99,166,81,133,58,24,23,135,13,114,213,134,160,208,226,169,151,186,32,168,206,4,102,170,249,110,164,171,124,120,235,174,75,18,41,175,18,172,111,173,37,198,173,172,24,129,241,167,47,235,51,166,118,85,117,164,65,63,183,165,196,41,248,160,243,67,58,161,170,253,124,163,157,151,190,162,208,115,196,181,231,25,6,180,190,167,64,182,137,205,130,183,12,219,205,178,59,177,15,179,98,15,73,177,85,101,139,176,104,34,215,187,95,72,21,186,6,246,83,184,49,156,145,185,180,138,222,188,131,224,28,189,218,94,90,191,237,52,152,190,0,0,0,0,101,103,188,184,139,200,9,170,238,175,181,18,87,151,98,143,50,240,222,55,220,95,107,37,185,56,215,157,239,40,180,197,138,79,8,125,100,224,189,111,1,135,1,215,184,191,214,74,221,216,106,242,51,119,223,224,86,16,99,88,159,87,25,80,250,48,165,232,20,159,16,250,113,248,172,66,200,192,123,223,173,167,199,103,67,8,114,117,38,111,206,205,112,127,173,149,21,24,17,45,251,183,164,63,158,208,24,135,39,232,207,26,66,143,115,162,172,32,198,176,201,71,122,8,62,175,50,160,91,200,142,24,181,103,59,10,208,0,135,178,105,56,80,47,12,95,236,151,226,240,89,133,135,151,229,61,209,135,134,101,180,224,58,221,90,79,143,207,63,40,51,119,134,16,228,234,227,119,88,82,13,216,237,64,104,191,81,248,161,248,43,240,196,159,151,72,42,48,34,90,79,87,158,226,246,111,73,127,147,8,245,199,125,167,64,213,24,192,252,109,78,208,159,53,43,183,35,141,197,24,150,159,160,127,42,39,25,71,253,186,124,32,65,2,146,143,244,16,247,232,72,168,61,88,20,155,88,63,168,35,182,144,29,49,211,247,161,137,106,207,118,20,15,168,202,172,225,7,127,190,132,96,195,6,210,112,160,94,183,23,28,230,89,184,169,244,60,223,21,76,133,231,194,209,224,128,126,105,14,47,203,123,107,72,119,195,162,15,13,203,199,104,177,115,41,199,4,97,76,160,184,217,245,152,111,68,144,255,211,252,126,80,102,238,27,55,218,86,77,39,185,14,40,64,5,182,198,239,176,164,163,136,12,28,26,176,219,129,127,215,103,57,145,120,210,43,244,31,110,147,3,247,38,59,102,144,154,131,136,63,47,145,237,88,147,41,84,96,68,180,49,7,248,12,223,168,77,30,186,207,241,166,236,223,146,254,137,184,46,70,103,23,155,84,2,112,39,236,187,72,240,113,222,47,76,201,48,128,249,219,85,231,69,99,156,160,63,107,249,199,131,211,23,104,54,193,114,15,138,121,203,55,93,228,174,80,225,92,64,255,84,78,37,152,232,246,115,136,139,174,22,239,55,22,248,64,130,4,157,39,62,188,36,31,233,33,65,120,85,153,175,215,224,139,202,176,92,51,59,182,89,237,94,209,229,85,176,126,80,71,213,25,236,255,108,33,59,98,9,70,135,218,231,233,50,200,130,142,142,112,212,158,237,40,177,249,81,144,95,86,228,130,58,49,88,58,131,9,143,167,230,110,51,31,8,193,134,13,109,166,58,181,164,225,64,189,193,134,252,5,47,41,73,23,74,78,245,175,243,118,34,50,150,17,158,138,120,190,43,152,29,217,151,32,75,201,244,120,46,174,72,192,192,1,253,210,165,102,65,106,28,94,150,247,121,57,42,79,151,150,159,93,242,241,35,229,5,25,107,77,96,126,215,245,142,209,98,231,235,182,222,95,82,142,9,194,55,233,181,122,217,70,0,104,188,33,188,208,234,49,223,136,143,86,99,48,97,249,214,34,4,158,106,154,189,166,189,7,216,193,1,191,54,110,180,173,83,9,8,21,154,78,114,29,255,41,206,165,17,134,123,183,116,225,199,15,205,217,16,146,168,190,172,42,70,17,25,56,35,118,165,128,117,102,198,216,16,1,122,96,254,174,207,114,155,201,115,202,34,241,164,87,71,150,24,239,169,57,173,253,204,94,17,69,6,238,77,118,99,137,241,206,141,38,68,220,232,65,248,100,81,121,47,249,52,30,147,65,218,177,38,83,191,214,154,235,233,198,249,179,140,161,69,11,98,14,240,25,7,105,76,161,190,81,155,60,219,54,39,132,53,153,146,150,80,254,46,46,153,185,84,38,252,222,232,158,18,113,93,140,119,22,225,52,206,46,54,169,171,73,138,17,69,230,63,3,32,129,131,187,118,145,224,227,19,246,92,91,253,89,233,73,152,62,85,241,33,6,130,108,68,97,62,212,170,206,139,198,207,169,55,126,56,65,127,214,93,38,195,110,179,137,118,124,214,238,202,196,111,214,29,89,10,177,161,225,228,30,20,243,129,121,168,75,215,105,203,19,178,14,119,171,92,161,194,185,57,198,126,1,128,254,169,156,229,153,21,36,11,54,160,54,110,81,28,142,167,22,102,134,194,113,218,62,44,222,111,44,73,185,211,148,240,129,4,9,149,230,184,177,123,73,13,163,30,46,177,27,72,62,210,67,45,89,110,251,195,246,219,233,166,145,103,81,31,169,176,204,122,206,12,116,148,97,185,102,241,6,5,222,0,0,0,0,119,7,48,150,238,14,97,44,153,9,81,186,7,109,196,25,112,106,244,143,233,99,165,53,158,100,149,163,14,219,136,50,121,220,184,164,224,213,233,30,151,210,217,136,9,182,76,43,126,177,124,189,231,184,45,7,144,191,29,145,29,183,16,100,106,176,32,242,243,185,113,72,132,190,65,222,26,218,212,125,109,221,228,235,244,212,181,81,131,211,133,199,19,108,152,86,100,107,168,192,253,98,249,122,138,101,201,236,20,1,92,79,99,6,108,217,250,15,61,99,141,8,13,245,59,110,32,200,76,105,16,94,213,96,65,228,162,103,113,114,60,3,228,209,75,4,212,71,210,13,133,253,165,10,181,107,53,181,168,250,66,178,152,108,219,187,201,214,172,188,249,64,50,216,108,227,69,223,92,117,220,214,13,207,171,209,61,89,38,217,48,172,81,222,0,58,200,215,81,128,191,208,97,22,33,180,244,181,86,179,196,35,207,186,149,153,184,189,165,15,40,2,184,158,95,5,136,8,198,12,217,178,177,11,233,36,47,111,124,135,88,104,76,17,193,97,29,171,182,102,45,61,118,220,65,144,1,219,113,6,152,210,32,188,239,213,16,42,113,177,133,137,6,182,181,31,159,191,228,165,232,184,212,51,120,7,201,162,15,0,249,52,150,9,168,142,225,14,152,24,127,106,13,187,8,109,61,45,145,100,108,151,230,99,92,1,107,107,81,244,28,108,97,98,133,101,48,216,242,98,0,78,108,6,149,237,27,1,165,123,130,8,244,193,245,15,196,87,101,176,217,198,18,183,233,80,139,190,184,234,252,185,136,124,98,221,29,223,21,218,45,73,140,211,124,243,251,212,76,101,77,178,97,88,58,181,81,206,163,188,0,116,212,187,48,226,74,223,165,65,61,216,149,215,164,209,196,109,211,214,244,251,67,105,233,106,52,110,217,252,173,103,136,70,218,96,184,208,68,4,45,115,51,3,29,229,170,10,76,95,221,13,124,201,80,5,113,60,39,2,65,170,190,11,16,16,201,12,32,134,87,104,181,37,32,111,133,179,185,102,212,9,206,97,228,159,94,222,249,14,41,217,201,152,176,208,152,34,199,215,168,180,89,179,61,23,46,180,13,129,183,189,92,59,192,186,108,173,237,184,131,32,154,191,179,182,3,182,226,12,116,177,210,154,234,213,71,57,157,210,119,175,4,219,38,21,115,220,22,131,227,99,11,18,148,100,59,132,13,109,106,62,122,106,90,168,228,14,207,11,147,9,255,157,10,0,174,39,125,7,158,177,240,15,147,68,135,8,163,210,30,1,242,104,105,6,194,254,247,98,87,93,128,101,103,203,25,108,54,113,110,107,6,231,254,212,27,118,137,211,43,224,16,218,122,90,103,221,74,204,249,185,223,111,142,190,239,249,23,183,190,67,96,176,142,213,214,214,163,232,161,209,147,126,56,216,194,196,79,223,242,82,209,187,103,241,166,188,87,103,63,181,6,221,72,178,54,75,216,13,43,218,175,10,27,76,54,3,74,246,65,4,122,96,223,96,239,195,168,103,223,85,49,110,142,239,70,105,190,121,203,97,179,140,188,102,131,26,37,111,210,160,82,104,226,54,204,12,119,149,187,11,71,3,34,2,22,185,85,5,38,47,197,186,59,190,178,189,11,40,43,180,90,146,92,179,106,4,194,215,255,167,181,208,207,49,44,217,158,139,91,222,174,29,155,100,194,176,236,99,242,38,117,106,163,156,2,109,147,10,156,9,6,169,235,14,54,63,114,7,103,133,5,0,87,19,149,191,74,130,226,184,122,20,123,177,43,174,12,182,27,56,146,210,142,155,229,213,190,13,124,220,239,183,11,219,223,33,134,211,210,212,241,212,226,66,104,221,179,248,31,218,131,110,129,190,22,205,246,185,38,91,111,176,119,225,24,183,71,119,136,8,90,230,255,15,106,112,102,6,59,202,17,1,11,92,143,101,158,255,248,98,174,105,97,107,255,211,22,108,207,69,160,10,226,120,215,13,210,238,78,4,131,84,57,3,179,194,167,103,38,97,208,96,22,247,73,105,71,77,62,110,119,219,174,209,106,74,217,214,90,220,64,223,11,102,55,216,59,240,169,188,174,83,222,187,158,197,71,178,207,127,48,181,255,233,189,189,242,28,202,186,194,138,83,179,147,48,36,180,163,166,186,208,54,5,205,215,6,147,84,222,87,41,35,217,103,191,179,102,122,46,196,97,74,184,93,104,27,2,42,111,43,148,180,11,190,55,195,12,142,161,90,5,223,27,45,2,239,141,0,0,0,0,25,27,49,65,50,54,98,130,43,45,83,195,100,108,197,4,125,119,244,69,86,90,167,134,79,65,150,199,200,217,138,8,209,194,187,73,250,239,232,138,227,244,217,203,172,181,79,12,181,174,126,77,158,131,45,142,135,152,28,207,74,194,18,81,83,217,35,16,120,244,112,211,97,239,65,146,46,174,215,85,55,181,230,20,28,152,181,215,5,131,132,150,130,27,152,89,155,0,169,24,176,45,250,219,169,54,203,154,230,119,93,93,255,108,108,28,212,65,63,223,205,90,14,158,149,132,36,162,140,159,21,227,167,178,70,32,190,169,119,97,241,232,225,166,232,243,208,231,195,222,131,36,218,197,178,101,93,93,174,170,68,70,159,235,111,107,204,40,118,112,253,105,57,49,107,174,32,42,90,239,11,7,9,44,18,28,56,109,223,70,54,243,198,93,7,178,237,112,84,113,244,107,101,48,187,42,243,247,162,49,194,182,137,28,145,117,144,7,160,52,23,159,188,251,14,132,141,186,37,169,222,121,60,178,239,56,115,243,121,255,106,232,72,190,65,197,27,125,88,222,42,60,240,121,79,5,233,98,126,68,194,79,45,135,219,84,28,198,148,21,138,1,141,14,187,64,166,35,232,131,191,56,217,194,56,160,197,13,33,187,244,76,10,150,167,143,19,141,150,206,92,204,0,9,69,215,49,72,110,250,98,139,119,225,83,202,186,187,93,84,163,160,108,21,136,141,63,214,145,150,14,151,222,215,152,80,199,204,169,17,236,225,250,210,245,250,203,147,114,98,215,92,107,121,230,29,64,84,181,222,89,79,132,159,22,14,18,88,15,21,35,25,36,56,112,218,61,35,65,155,101,253,107,167,124,230,90,230,87,203,9,37,78,208,56,100,1,145,174,163,24,138,159,226,51,167,204,33,42,188,253,96,173,36,225,175,180,63,208,238,159,18,131,45,134,9,178,108,201,72,36,171,208,83,21,234,251,126,70,41,226,101,119,104,47,63,121,246,54,36,72,183,29,9,27,116,4,18,42,53,75,83,188,242,82,72,141,179,121,101,222,112,96,126,239,49,231,230,243,254,254,253,194,191,213,208,145,124,204,203,160,61,131,138,54,250,154,145,7,187,177,188,84,120,168,167,101,57,59,131,152,75,34,152,169,10,9,181,250,201,16,174,203,136,95,239,93,79,70,244,108,14,109,217,63,205,116,194,14,140,243,90,18,67,234,65,35,2,193,108,112,193,216,119,65,128,151,54,215,71,142,45,230,6,165,0,181,197,188,27,132,132,113,65,138,26,104,90,187,91,67,119,232,152,90,108,217,217,21,45,79,30,12,54,126,95,39,27,45,156,62,0,28,221,185,152,0,18,160,131,49,83,139,174,98,144,146,181,83,209,221,244,197,22,196,239,244,87,239,194,167,148,246,217,150,213,174,7,188,233,183,28,141,168,156,49,222,107,133,42,239,42,202,107,121,237,211,112,72,172,248,93,27,111,225,70,42,46,102,222,54,225,127,197,7,160,84,232,84,99,77,243,101,34,2,178,243,229,27,169,194,164,48,132,145,103,41,159,160,38,228,197,174,184,253,222,159,249,214,243,204,58,207,232,253,123,128,169,107,188,153,178,90,253,178,159,9,62,171,132,56,127,44,28,36,176,53,7,21,241,30,42,70,50,7,49,119,115,72,112,225,180,81,107,208,245,122,70,131,54,99,93,178,119,203,250,215,78,210,225,230,15,249,204,181,204,224,215,132,141,175,150,18,74,182,141,35,11,157,160,112,200,132,187,65,137,3,35,93,70,26,56,108,7,49,21,63,196,40,14,14,133,103,79,152,66,126,84,169,3,85,121,250,192,76,98,203,129,129,56,197,31,152,35,244,94,179,14,167,157,170,21,150,220,229,84,0,27,252,79,49,90,215,98,98,153,206,121,83,216,73,225,79,23,80,250,126,86,123,215,45,149,98,204,28,212,45,141,138,19,52,150,187,82,31,187,232,145,6,160,217,208,94,126,243,236,71,101,194,173,108,72,145,110,117,83,160,47,58,18,54,232,35,9,7,169,8,36,84,106,17,63,101,43,150,167,121,228,143,188,72,165,164,145,27,102,189,138,42,39,242,203,188,224,235,208,141,161,192,253,222,98,217,230,239,35,20,188,225,189,13,167,208,252,38,138,131,63,63,145,178,126,112,208,36,185,105,203,21,248,66,230,70,59,91,253,119,122,220,101,107,181,197,126,90,244,238,83,9,55,247,72,56,118,184,9,174,177,161,18,159,240,138,63,204,51,147,36,253,114,0,0,0,0,1,194,106,55,3,132,212,110,2,70,190,89,7,9,168,220,6,203,194,235,4,141,124,178,5,79,22,133,14,19,81,184,15,209,59,143,13,151,133,214,12,85,239,225,9,26,249,100,8,216,147,83,10,158,45,10,11,92,71,61,28,38,163,112,29,228,201,71,31,162,119,30,30,96,29,41,27,47,11,172,26,237,97,155,24,171,223,194,25,105,181,245,18,53,242,200,19,247,152,255,17,177,38,166,16,115,76,145,21,60,90,20,20,254,48,35,22,184,142,122,23,122,228,77,56,77,70,224,57,143,44,215,59,201,146,142,58,11,248,185,63,68,238,60,62,134,132,11,60,192,58,82,61,2,80,101,54,94,23,88,55,156,125,111,53,218,195,54,52,24,169,1,49,87,191,132,48,149,213,179,50,211,107,234,51,17,1,221,36,107,229,144,37,169,143,167,39,239,49,254,38,45,91,201,35,98,77,76,34,160,39,123,32,230,153,34,33,36,243,21,42,120,180,40,43,186,222,31,41,252,96,70,40,62,10,113,45,113,28,244,44,179,118,195,46,245,200,154,47,55,162,173,112,154,141,192,113,88,231,247,115,30,89,174,114,220,51,153,119,147,37,28,118,81,79,43,116,23,241,114,117,213,155,69,126,137,220,120,127,75,182,79,125,13,8,22,124,207,98,33,121,128,116,164,120,66,30,147,122,4,160,202,123,198,202,253,108,188,46,176,109,126,68,135,111,56,250,222,110,250,144,233,107,181,134,108,106,119,236,91,104,49,82,2,105,243,56,53,98,175,127,8,99,109,21,63,97,43,171,102,96,233,193,81,101,166,215,212,100,100,189,227,102,34,3,186,103,224,105,141,72,215,203,32,73,21,161,23,75,83,31,78,74,145,117,121,79,222,99,252,78,28,9,203,76,90,183,146,77,152,221,165,70,196,154,152,71,6,240,175,69,64,78,246,68,130,36,193,65,205,50,68,64,15,88,115,66,73,230,42,67,139,140,29,84,241,104,80,85,51,2,103,87,117,188,62,86,183,214,9,83,248,192,140,82,58,170,187,80,124,20,226,81,190,126,213,90,226,57,232,91,32,83,223,89,102,237,134,88,164,135,177,93,235,145,52,92,41,251,3,94,111,69,90,95,173,47,109,225,53,27,128,224,247,113,183,226,177,207,238,227,115,165,217,230,60,179,92,231,254,217,107,229,184,103,50,228,122,13,5,239,38,74,56,238,228,32,15,236,162,158,86,237,96,244,97,232,47,226,228,233,237,136,211,235,171,54,138,234,105,92,189,253,19,184,240,252,209,210,199,254,151,108,158,255,85,6,169,250,26,16,44,251,216,122,27,249,158,196,66,248,92,174,117,243,0,233,72,242,194,131,127,240,132,61,38,241,70,87,17,244,9,65,148,245,203,43,163,247,141,149,250,246,79,255,205,217,120,93,96,216,186,55,87,218,252,137,14,219,62,227,57,222,113,245,188,223,179,159,139,221,245,33,210,220,55,75,229,215,107,12,216,214,169,102,239,212,239,216,182,213,45,178,129,208,98,164,4,209,160,206,51,211,230,112,106,210,36,26,93,197,94,254,16,196,156,148,39,198,218,42,126,199,24,64,73,194,87,86,204,195,149,60,251,193,211,130,162,192,17,232,149,203,77,175,168,202,143,197,159,200,201,123,198,201,11,17,241,204,68,7,116,205,134,109,67,207,192,211,26,206,2,185,45,145,175,150,64,144,109,252,119,146,43,66,46,147,233,40,25,150,166,62,156,151,100,84,171,149,34,234,242,148,224,128,197,159,188,199,248,158,126,173,207,156,56,19,150,157,250,121,161,152,181,111,36,153,119,5,19,155,49,187,74,154,243,209,125,141,137,53,48,140,75,95,7,142,13,225,94,143,207,139,105,138,128,157,236,139,66,247,219,137,4,73,130,136,198,35,181,131,154,100,136,130,88,14,191,128,30,176,230,129,220,218,209,132,147,204,84,133,81,166,99,135,23,24,58,134,213,114,13,169,226,208,160,168,32,186,151,170,102,4,206,171,164,110,249,174,235,120,124,175,41,18,75,173,111,172,18,172,173,198,37,167,241,129,24,166,51,235,47,164,117,85,118,165,183,63,65,160,248,41,196,161,58,67,243,163,124,253,170,162,190,151,157,181,196,115,208,180,6,25,231,182,64,167,190,183,130,205,137,178,205,219,12,179,15,177,59,177,73,15,98,176,139,101,85,187,215,34,104,186,21,72,95,184,83,246,6,185,145,156,49,188,222,138,180,189,28,224,131,191,90,94,218,190,152,52,237,0,0,0,0,184,188,103,101,170,9,200,139,18,181,175,238,143,98,151,87,55,222,240,50,37,107,95,220,157,215,56,185,197,180,40,239,125,8,79,138,111,189,224,100,215,1,135,1,74,214,191,184,242,106,216,221,224,223,119,51,88,99,16,86,80,25,87,159,232,165,48,250,250,16,159,20,66,172,248,113,223,123,192,200,103,199,167,173,117,114,8,67,205,206,111,38,149,173,127,112,45,17,24,21,63,164,183,251,135,24,208,158,26,207,232,39,162,115,143,66,176,198,32,172,8,122,71,201,160,50,175,62,24,142,200,91,10,59,103,181,178,135,0,208,47,80,56,105,151,236,95,12,133,89,240,226,61,229,151,135,101,134,135,209,221,58,224,180,207,143,79,90,119,51,40,63,234,228,16,134,82,88,119,227,64,237,216,13,248,81,191,104,240,43,248,161,72,151,159,196,90,34,48,42,226,158,87,79,127,73,111,246,199,245,8,147,213,64,167,125,109,252,192,24,53,159,208,78,141,35,183,43,159,150,24,197,39,42,127,160,186,253,71,25,2,65,32,124,16,244,143,146,168,72,232,247,155,20,88,61,35,168,63,88,49,29,144,182,137,161,247,211,20,118,207,106,172,202,168,15,190,127,7,225,6,195,96,132,94,160,112,210,230,28,23,183,244,169,184,89,76,21,223,60,209,194,231,133,105,126,128,224,123,203,47,14,195,119,72,107,203,13,15,162,115,177,104,199,97,4,199,41,217,184,160,76,68,111,152,245,252,211,255,144,238,102,80,126,86,218,55,27,14,185,39,77,182,5,64,40,164,176,239,198,28,12,136,163,129,219,176,26,57,103,215,127,43,210,120,145,147,110,31,244,59,38,247,3,131,154,144,102,145,47,63,136,41,147,88,237,180,68,96,84,12,248,7,49,30,77,168,223,166,241,207,186,254,146,223,236,70,46,184,137,84,155,23,103,236,39,112,2,113,240,72,187,201,76,47,222,219,249,128,48,99,69,231,85,107,63,160,156,211,131,199,249,193,54,104,23,121,138,15,114,228,93,55,203,92,225,80,174,78,84,255,64,246,232,152,37,174,139,136,115,22,55,239,22,4,130,64,248,188,62,39,157,33,233,31,36,153,85,120,65,139,224,215,175,51,92,176,202,237,89,182,59,85,229,209,94,71,80,126,176,255,236,25,213,98,59,33,108,218,135,70,9,200,50,233,231,112,142,142,130,40,237,158,212,144,81,249,177,130,228,86,95,58,88,49,58,167,143,9,131,31,51,110,230,13,134,193,8,181,58,166,109,189,64,225,164,5,252,134,193,23,73,41,47,175,245,78,74,50,34,118,243,138,158,17,150,152,43,190,120,32,151,217,29,120,244,201,75,192,72,174,46,210,253,1,192,106,65,102,165,247,150,94,28,79,42,57,121,93,159,150,151,229,35,241,242,77,107,25,5,245,215,126,96,231,98,209,142,95,222,182,235,194,9,142,82,122,181,233,55,104,0,70,217,208,188,33,188,136,223,49,234,48,99,86,143,34,214,249,97,154,106,158,4,7,189,166,189,191,1,193,216,173,180,110,54,21,8,9,83,29,114,78,154,165,206,41,255,183,123,134,17,15,199,225,116,146,16,217,205,42,172,190,168,56,25,17,70,128,165,118,35,216,198,102,117,96,122,1,16,114,207,174,254,202,115,201,155,87,164,241,34,239,24,150,71,253,173,57,169,69,17,94,204,118,77,238,6,206,241,137,99,220,68,38,141,100,248,65,232,249,47,121,81,65,147,30,52,83,38,177,218,235,154,214,191,179,249,198,233,11,69,161,140,25,240,14,98,161,76,105,7,60,155,81,190,132,39,54,219,150,146,153,53,46,46,254,80,38,84,185,153,158,232,222,252,140,93,113,18,52,225,22,119,169,54,46,206,17,138,73,171,3,63,230,69,187,131,129,32,227,224,145,118,91,92,246,19,73,233,89,253,241,85,62,152,108,130,6,33,212,62,97,68,198,139,206,170,126,55,169,207,214,127,65,56,110,195,38,93,124,118,137,179,196,202,238,214,89,29,214,111,225,161,177,10,243,20,30,228,75,168,121,129,19,203,105,215,171,119,14,178,185,194,161,92,1,126,198,57,156,169,254,128,36,21,153,229,54,160,54,11,142,28,81,110,134,102,22,167,62,218,113,194,44,111,222,44,148,211,185,73,9,4,129,240,177,184,230,149,163,13,73,123,27,177,46,30,67,210,62,72,251,110,89,45,233,219,246,195,81,103,145,166,204,176,169,31,116,12,206,122,102,185,97,148,222,5,6,241,0,0,0,0,0,0,0,0,33,0,0,0,4,0,4,0,8,0,4,0,34,0,0,0,4,0,5,0,16,0,8,0,34,0,0,0,4,0,6,0,32,0,32,0,34,0,0,0,4,0,4,0,16,0,16,0,35,0,0,0,8,0,16,0,32,0,32,0,35,0,0,0,8,0,16,0,128,0,128,0,35,0,0,0,8,0,32,0,128,0,0,1,35,0,0,0,32,0,128,0,2,1,0,4,35,0,0,0,32,0,2,1,2,1,0,16,35,0,0,0,166,49,0,0,20,35,0,0,1,1,0,0,30,1,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,38,54,0,0,156,35,0,0,0,0,0,0,30,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,40,36,0,0,0,0,0,0,19,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,7,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,28,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,192,0,0,0,0,1,0,0,128,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,5,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,38,0,0,0,54,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,38,0,0,0,62,108,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,16,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,0,0,0,0,32,0,0,0,41,0,0,0,49,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,0,0,0,0,72,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,96,7], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([8,80,0,0,8,16,0,20,8,115,0,18,7,31,0,0,8,112,0,0,8,48,0,0,9,192,0,16,7,10,0,0,8,96,0,0,8,32,0,0,9,160,0,0,8,0,0,0,8,128,0,0,8,64,0,0,9,224,0,16,7,6,0,0,8,88,0,0,8,24,0,0,9,144,0,19,7,59,0,0,8,120,0,0,8,56,0,0,9,208,0,17,7,17,0,0,8,104,0,0,8,40,0,0,9,176,0,0,8,8,0,0,8,136,0,0,8,72,0,0,9,240,0,16,7,4,0,0,8,84,0,0,8,20,0,21,8,227,0,19,7,43,0,0,8,116,0,0,8,52,0,0,9,200,0,17,7,13,0,0,8,100,0,0,8,36,0,0,9,168,0,0,8,4,0,0,8,132,0,0,8,68,0,0,9,232,0,16,7,8,0,0,8,92,0,0,8,28,0,0,9,152,0,20,7,83,0,0,8,124,0,0,8,60,0,0,9,216,0,18,7,23,0,0,8,108,0,0,8,44,0,0,9,184,0,0,8,12,0,0,8,140,0,0,8,76,0,0,9,248,0,16,7,3,0,0,8,82,0,0,8,18,0,21,8,163,0,19,7,35,0,0,8,114,0,0,8,50,0,0,9,196,0,17,7,11,0,0,8,98,0,0,8,34,0,0,9,164,0,0,8,2,0,0,8,130,0,0,8,66,0,0,9,228,0,16,7,7,0,0,8,90,0,0,8,26,0,0,9,148,0,20,7,67,0,0,8,122,0,0,8,58,0,0,9,212,0,18,7,19,0,0,8,106,0,0,8,42,0,0,9,180,0,0,8,10,0,0,8,138,0,0,8,74,0,0,9,244,0,16,7,5,0,0,8,86,0,0,8,22,0,64,8,0,0,19,7,51,0,0,8,118,0,0,8,54,0,0,9,204,0,17,7,15,0,0,8,102,0,0,8,38,0,0,9,172,0,0,8,6,0,0,8,134,0,0,8,70,0,0,9,236,0,16,7,9,0,0,8,94,0,0,8,30,0,0,9,156,0,20,7,99,0,0,8,126,0,0,8,62,0,0,9,220,0,18,7,27,0,0,8,110,0,0,8,46,0,0,9,188,0,0,8,14,0,0,8,142,0,0,8,78,0,0,9,252,0,96,7,0,0,0,8,81,0,0,8,17,0,21,8,131,0,18,7,31,0,0,8,113,0,0,8,49,0,0,9,194,0,16,7,10,0,0,8,97,0,0,8,33,0,0,9,162,0,0,8,1,0,0,8,129,0,0,8,65,0,0,9,226,0,16,7,6,0,0,8,89,0,0,8,25,0,0,9,146,0,19,7,59,0,0,8,121,0,0,8,57,0,0,9,210,0,17,7,17,0,0,8,105,0,0,8,41,0,0,9,178,0,0,8,9,0,0,8,137,0,0,8,73,0,0,9,242,0,16,7,4,0,0,8,85,0,0,8,21,0,16,8,2,1,19,7,43,0,0,8,117,0,0,8,53,0,0,9,202,0,17,7,13,0,0,8,101,0,0,8,37,0,0,9,170,0,0,8,5,0,0,8,133,0,0,8,69,0,0,9,234,0,16,7,8,0,0,8,93,0,0,8,29,0,0,9,154,0,20,7,83,0,0,8,125,0,0,8,61,0,0,9,218,0,18,7,23,0,0,8,109,0,0,8,45,0,0,9,186,0,0,8,13,0,0,8,141,0,0,8,77,0,0,9,250,0,16,7,3,0,0,8,83,0,0,8,19,0,21,8,195,0,19,7,35,0,0,8,115,0,0,8,51,0,0,9,198,0,17,7,11,0,0,8,99,0,0,8,35,0,0,9,166,0,0,8,3,0,0,8,131,0,0,8,67,0,0,9,230,0,16,7,7,0,0,8,91,0,0,8,27,0,0,9,150,0,20,7,67,0,0,8,123,0,0,8,59,0,0,9,214,0,18,7,19,0,0,8,107,0,0,8,43,0,0,9,182,0,0,8,11,0,0,8,139,0,0,8,75,0,0,9,246,0,16,7,5,0,0,8,87,0,0,8,23,0,64,8,0,0,19,7,51,0,0,8,119,0,0,8,55,0,0,9,206,0,17,7,15,0,0,8,103,0,0,8,39,0,0,9,174,0,0,8,7,0,0,8,135,0,0,8,71,0,0,9,238,0,16,7,9,0,0,8,95,0,0,8,31,0,0,9,158,0,20,7,99,0,0,8,127,0,0,8,63,0,0,9,222,0,18,7,27,0,0,8,111,0,0,8,47,0,0,9,190,0,0,8,15,0,0,8,143,0,0,8,79,0,0,9,254,0,96,7,0,0,0,8,80,0,0,8,16,0,20,8,115,0,18,7,31,0,0,8,112,0,0,8,48,0,0,9,193,0,16,7,10,0,0,8,96,0,0,8,32,0,0,9,161,0,0,8,0,0,0,8,128,0,0,8,64,0,0,9,225,0,16,7,6,0,0,8,88,0,0,8,24,0,0,9,145,0,19,7,59,0,0,8,120,0,0,8,56,0,0,9,209,0,17,7,17,0,0,8,104,0,0,8,40,0,0,9,177,0,0,8,8,0,0,8,136,0,0,8,72,0,0,9,241,0,16,7,4,0,0,8,84,0,0,8,20,0,21,8,227,0,19,7,43,0,0,8,116,0,0,8,52,0,0,9,201,0,17,7,13,0,0,8,100,0,0,8,36,0,0,9,169,0,0,8,4,0,0,8,132,0,0,8,68,0,0,9,233,0,16,7,8,0,0,8,92,0,0,8,28,0,0,9,153,0,20,7,83,0,0,8,124,0,0,8,60,0,0,9,217,0,18,7,23,0,0,8,108,0,0,8,44,0,0,9,185,0,0,8,12,0,0,8,140,0,0,8,76,0,0,9,249,0,16,7,3,0,0,8,82,0,0,8,18,0,21,8,163,0,19,7,35,0,0,8,114,0,0,8,50,0,0,9,197,0,17,7,11,0,0,8,98,0,0,8,34,0,0,9,165,0,0,8,2,0,0,8,130,0,0,8,66,0,0,9,229,0,16,7,7,0,0,8,90,0,0,8,26,0,0,9,149,0,20,7,67,0,0,8,122,0,0,8,58,0,0,9,213,0,18,7,19,0,0,8,106,0,0,8,42,0,0,9,181,0,0,8,10,0,0,8,138,0,0,8,74,0,0,9,245,0,16,7,5,0,0,8,86,0,0,8,22,0,64,8,0,0,19,7,51,0,0,8,118,0,0,8,54,0,0,9,205,0,17,7,15,0,0,8,102,0,0,8,38,0,0,9,173,0,0,8,6,0,0,8,134,0,0,8,70,0,0,9,237,0,16,7,9,0,0,8,94,0,0,8,30,0,0,9,157,0,20,7,99,0,0,8,126,0,0,8,62,0,0,9,221,0,18,7,27,0,0,8,110,0,0,8,46,0,0,9,189,0,0,8,14,0,0,8,142,0,0,8,78,0,0,9,253,0,96,7,0,0,0,8,81,0,0,8,17,0,21,8,131,0,18,7,31,0,0,8,113,0,0,8,49,0,0,9,195,0,16,7,10,0,0,8,97,0,0,8,33,0,0,9,163,0,0,8,1,0,0,8,129,0,0,8,65,0,0,9,227,0,16,7,6,0,0,8,89,0,0,8,25,0,0,9,147,0,19,7,59,0,0,8,121,0,0,8,57,0,0,9,211,0,17,7,17,0,0,8,105,0,0,8,41,0,0,9,179,0,0,8,9,0,0,8,137,0,0,8,73,0,0,9,243,0,16,7,4,0,0,8,85,0,0,8,21,0,16,8,2,1,19,7,43,0,0,8,117,0,0,8,53,0,0,9,203,0,17,7,13,0,0,8,101,0,0,8,37,0,0,9,171,0,0,8,5,0,0,8,133,0,0,8,69,0,0,9,235,0,16,7,8,0,0,8,93,0,0,8,29,0,0,9,155,0,20,7,83,0,0,8,125,0,0,8,61,0,0,9,219,0,18,7,23,0,0,8,109,0,0,8,45,0,0,9,187,0,0,8,13,0,0,8,141,0,0,8,77,0,0,9,251,0,16,7,3,0,0,8,83,0,0,8,19,0,21,8,195,0,19,7,35,0,0,8,115,0,0,8,51,0,0,9,199,0,17,7,11,0,0,8,99,0,0,8,35,0,0,9,167,0,0,8,3,0,0,8,131,0,0,8,67,0,0,9,231,0,16,7,7,0,0,8,91,0,0,8,27,0,0,9,151,0,20,7,67,0,0,8,123,0,0,8,59,0,0,9,215,0,18,7,19,0,0,8,107,0,0,8,43,0,0,9,183,0,0,8,11,0,0,8,139,0,0,8,75,0,0,9,247,0,16,7,5,0,0,8,87,0,0,8,23,0,64,8,0,0,19,7,51,0,0,8,119,0,0,8,55,0,0,9,207,0,17,7,15,0,0,8,103,0,0,8,39,0,0,9,175,0,0,8,7,0,0,8,135,0,0,8,71,0,0,9,239,0,16,7,9,0,0,8,95,0,0,8,31,0,0,9,159,0,20,7,99,0,0,8,127,0,0,8,63,0,0,9,223,0,18,7,27,0,0,8,111,0,0,8,47,0,0,9,191,0,0,8,15,0,0,8,143,0,0,8,79,0,0,9,255,0,16,5,1,0,23,5,1,1,19,5,17,0,27,5,1,16,17,5,5,0,25,5,1,4,21,5,65,0,29,5,1,64,16,5,3,0,24,5,1,2,20,5,33,0,28,5,1,32,18,5,9,0,26,5,1,8,22,5,129,0,64,5,0,0,16,5,2,0,23,5,129,1,19,5,25,0,27,5,1,24,17,5,7,0,25,5,1,6,21,5,97,0,29,5,1,96,16,5,4,0,24,5,1,3,20,5,49,0,28,5,1,48,18,5,13,0,26,5,1,12,22,5,193,0,64,5,0,0,16,0,17,0,18,0,0,0,8,0,7,0,9,0,6,0,10,0,5,0,11,0,4,0,12,0,3,0,13,0,2,0,14,0,1,0,15,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,13,0,15,0,17,0,19,0,23,0,27,0,31,0,35,0,43,0,51,0,59,0,67,0,83,0,99,0,115,0,131,0,163,0,195,0,227,0,2,1,0,0,0,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,17,0,17,0,17,0,17,0,18,0,18,0,18,0,18,0,19,0,19,0,19,0,19,0,20,0,20,0,20,0,20,0,21,0,21,0,21,0,21,0,16,0,72,0,78,0,1,0,2,0,3,0,4,0,5,0,7,0,9,0,13,0,17,0,25,0,33,0,49,0,65,0,97,0,129,0,193,0,1,1,129,1,1,2,1,3,1,4,1,6,1,8,1,12,1,16,1,24,1,32,1,48,1,64,1,96,0,0,0,0,16,0,16,0,16,0,16,0,17,0,17,0,18,0,18,0,19,0,19,0,20,0,20,0,21,0,21,0,22,0,22,0,23,0,23,0,24,0,24,0,25,0,25,0,26,0,26,0,27,0,27,0,28,0,28,0,29,0,29,0,64,0,64,0,12,0,8,0,140,0,8,0,76,0,8,0,204,0,8,0,44,0,8,0,172,0,8,0,108,0,8,0,236,0,8,0,28,0,8,0,156,0,8,0,92,0,8,0,220,0,8,0,60,0,8,0,188,0,8,0,124,0,8,0,252,0,8,0,2,0,8,0,130,0,8,0,66,0,8,0,194,0,8,0,34,0,8,0,162,0,8,0,98,0,8,0,226,0,8,0,18,0,8,0,146,0,8,0,82,0,8,0,210,0,8,0,50,0,8,0,178,0,8,0,114,0,8,0,242,0,8,0,10,0,8,0,138,0,8,0,74,0,8,0,202,0,8,0,42,0,8,0,170,0,8,0,106,0,8,0,234,0,8,0,26,0,8,0,154,0,8,0,90,0,8,0,218,0,8,0,58,0,8,0,186,0,8,0,122,0,8,0,250,0,8,0,6,0,8,0,134,0,8,0,70,0,8,0,198,0,8,0,38,0,8,0,166,0,8,0,102,0,8,0,230,0,8,0,22,0,8,0,150,0,8,0,86,0,8,0,214,0,8,0,54,0,8,0,182,0,8,0,118,0,8,0,246,0,8,0,14,0,8,0,142,0,8,0,78,0,8,0,206,0,8,0,46,0,8,0,174,0,8,0,110,0,8,0,238,0,8,0,30,0,8,0,158,0,8,0,94,0,8,0,222,0,8,0,62,0,8,0,190,0,8,0,126,0,8,0,254,0,8,0,1,0,8,0,129,0,8,0,65,0,8,0,193,0,8,0,33,0,8,0,161,0,8,0,97,0,8,0,225,0,8,0,17,0,8,0,145,0,8,0,81,0,8,0,209,0,8,0,49,0,8,0,177,0,8,0,113,0,8,0,241,0,8,0,9,0,8,0,137,0,8,0,73,0,8,0,201,0,8,0,41,0,8,0,169,0,8,0,105,0,8,0,233,0,8,0,25,0,8,0,153,0,8,0,89,0,8,0,217,0,8,0,57,0,8,0,185,0,8,0,121,0,8,0,249,0,8,0,5,0,8,0,133,0,8,0,69,0,8,0,197,0,8,0,37,0,8,0,165,0,8,0,101,0,8,0,229,0,8,0,21,0,8,0,149,0,8,0,85,0,8,0,213,0,8,0,53,0,8,0,181,0,8,0,117,0,8,0,245,0,8,0,13,0,8,0,141,0,8,0,77,0,8,0,205,0,8,0,45,0,8,0,173,0,8,0,109,0,8,0,237,0,8,0,29,0,8,0,157,0,8,0,93,0,8,0,221,0,8,0,61,0,8,0,189,0,8,0,125,0,8,0,253,0,8,0,19,0,9,0,19,1,9,0,147,0,9,0,147,1,9,0,83,0,9,0,83,1,9,0,211,0,9,0,211,1,9,0,51,0,9,0,51,1,9,0,179,0,9,0,179,1,9,0,115,0,9,0,115,1,9,0,243,0,9,0,243,1,9,0,11,0,9,0,11,1,9,0,139,0,9,0,139,1,9,0,75,0,9,0,75,1,9,0,203,0,9,0,203,1,9,0,43,0,9,0,43,1,9,0,171,0,9,0,171,1,9,0,107,0,9,0,107,1,9,0,235,0,9,0,235,1,9,0,27,0,9,0,27,1,9,0,155,0,9,0,155,1,9,0,91,0,9,0,91,1,9,0,219,0,9,0,219,1,9,0,59,0,9,0,59,1,9,0,187,0,9,0,187,1,9,0,123,0,9,0,123,1,9,0,251,0,9,0,251,1,9,0,7,0,9,0,7,1,9,0,135,0,9,0,135,1,9,0,71,0,9,0,71,1,9,0,199,0,9,0,199,1,9,0,39,0,9,0,39,1,9,0,167,0,9,0,167,1,9,0,103,0,9,0,103,1,9,0,231,0,9,0,231,1,9,0,23,0,9,0,23,1,9,0,151,0,9,0,151,1,9,0,87,0,9,0,87,1,9,0,215,0,9,0,215,1,9,0,55,0,9,0,55,1,9,0,183,0,9,0,183,1,9,0,119,0,9,0,119,1,9,0,247,0,9,0,247,1,9,0,15,0,9,0,15,1,9,0,143,0,9,0,143,1,9,0,79,0,9,0,79,1,9,0,207,0,9,0,207,1,9,0,47,0,9,0,47,1,9,0,175,0,9,0,175,1,9,0,111,0,9,0,111,1,9,0,239,0,9,0,239,1,9,0,31,0,9,0,31,1,9,0,159,0,9,0,159,1,9,0,95,0,9,0,95,1,9,0,223,0,9,0,223,1,9,0,63,0,9,0,63,1,9,0,191,0,9,0,191,1,9,0,127,0,9,0,127,1,9,0,255,0,9,0,255,1,9,0,0,0,7,0,64,0,7,0,32,0,7,0,96,0,7,0,16,0,7,0,80,0,7,0,48,0,7,0,112,0,7,0,8,0,7,0,72,0,7,0,40,0,7,0,104,0,7,0,24,0,7,0,88,0,7,0,56,0,7,0,120,0,7,0,4,0,7,0,68,0,7,0,36,0,7,0,100,0,7,0,20,0,7,0,84,0,7,0,52,0,7,0,116,0,7,0,3,0,8,0,131,0,8,0,67,0,8,0,195,0,8,0,35,0,8,0,163,0,8,0,99,0,8,0,227,0,8,0,0,0,5,0,16,0,5,0,8,0,5,0,24,0,5,0,4,0,5,0,20,0,5,0,12,0,5,0,28,0,5,0,2,0,5,0,18,0,5,0,10,0,5,0,26,0,5,0,6,0,5,0,22,0,5,0,14,0,5,0,30,0,5,0,1,0,5,0,17,0,5,0,9,0,5,0,25,0,5,0,5,0,5,0,21,0,5,0,13,0,5,0,29,0,5,0,3,0,5,0,19,0,5,0,11,0,5,0,27,0,5,0,7,0,5,0,23,0,5,0,123,32,114,101,116,117,114,110,32,97,108,108,111,99,97,116,101,40,105,110,116,65,114,114,97,121,70,114,111,109,83,116,114,105,110,103,40,104,116,115,102,105,108,101,115,91,36,48,93,46,102,105,108,101,111,98,106,46,110,97,109,101,41,44,32,39,105,56,39,44,32,65,76,76,79,67,95,78,79,82,77,65,76,41,59,32,125,0,37,115,44,32,37,115,10,0,123,32,114,101,116,117,114,110,32,106,115,95,114,101,97,100,40,36,48,44,32,36,49,44,32,36,50,41,59,32,125,0,123,32,114,101,116,117,114,110,32,106,115,95,115,101,101,107,40,36,48,44,32,36,49,44,32,36,50,41,59,32,125,0,123,32,106,115,95,99,108,111,115,101,40,36,48,41,59,32,125,0,91,69,58,58,37,115,93,32,102,97,105,108,32,116,111,32,111,112,101,110,32,102,105,108,101,32,39,37,115,39,10,0,104,116,115,95,104,111,112,101,110,95,106,115,0,98,103,122,102,46,99,0,105,110,118,97,108,105,100,32,112,97,114,97,109,101,116,101,114,47,99,111,109,112,114,101,115,115,105,111,110,32,108,101,118,101,108,44,32,111,114,32,105,110,99,111,110,115,105,115,116,101,110,116,32,115,116,114,101,97,109,32,115,116,97,116,101,0,105,110,118,97,108,105,100,32,111,114,32,105,110,99,111,109,112,108,101,116,101,32,73,79,0,111,117,116,32,111,102,32,109,101,109,111,114,121,0,112,114,111,103,114,101,115,115,32,116,101,109,112,111,114,97,114,105,108,121,32,110,111,116,32,112,111,115,115,105,98,108,101,44,32,111,114,32,105,110,40,41,32,47,32,111,117,116,40,41,32,114,101,116,117,114,110,101,100,32,97,110,32,101,114,114,111,114,0,122,108,105,98,32,118,101,114,115,105,111,110,32,109,105,115,109,97,116,99,104,0,91,37,100,93,32,117,110,107,110,111,119,110,0,91,69,58,58,37,115,93,32,100,101,102,108,97,116,101,73,110,105,116,50,32,102,97,105,108,101,100,58,32,37,115,10,0,98,103,122,102,95,119,114,105,116,101,95,105,110,105,116,0,91,69,58,58,37,115,93,32,37,115,10,0,98,103,122,102,95,99,111,109,112,114,101,115,115,0,91,69,58,58,37,115,93,32,100,101,102,108,97,116,101,32,102,97,105,108,101,100,58,32,37,115,10,0,91,69,58,58,37,115,93,32,100,101,102,108,97,116,101,69,110,100,32,102,97,105,108,101,100,58,32,37,115,10,0,31,139,8,4,0,0,0,0,0,255,6,0,66,67,2,0,0,0,0,106,0,98,103,122,102,95,114,101,97,100,95,98,108,111,99,107,0,91,69,58,58,37,115,93,32,105,110,102,108,97,116,101,32,102,97,105,108,101,100,58,32,37,115,10,0,105,110,102,108,97,116,101,95,103,122,105,112,95,98,108,111,99,107,0,67,111,117,108,100,32,110,111,116,32,104,115,101,101,107,32,116,111,32,37,108,108,100,10,0,91,69,58,58,37,115,93,32,105,110,102,108,97,116,101,73,110,105,116,50,32,102,97,105,108,101,100,58,32,37,115,0,91,69,58,58,37,115,93,32,105,110,102,108,97,116,101,73,110,105,116,50,32,102,97,105,108,101,100,58,32,37,115,10,0,98,103,122,102,95,117,110,99,111,109,112,114,101,115,115,0,91,69,58,58,37,115,93,32,105,110,102,108,97,116,101,69,110,100,32,102,97,105,108,101,100,58,32,37,115,10,0,91,69,58,58,37,115,93,32,105,110,102,108,97,116,101,95,98,108,111,99,107,32,101,114,114,111,114,32,37,100,10,0,102,112,45,62,105,115,95,119,114,105,116,101,32,61,61,32,48,0,98,103,122,102,95,114,101,97,100,0,91,69,58,58,37,115,93,32,98,103,122,102,95,114,101,97,100,95,98,108,111,99,107,32,101,114,114,111,114,32,37,100,32,97,102,116,101,114,32,37,122,100,32,111,102,32,37,122,117,32,98,121,116,101,115,10,0,31,139,8,4,0,0,0,0,0,255,6,0,66,67,2,0,27,0,3,0,0,0,0,0,0,0,0,0,0,98,103,122,102,95,103,122,105,112,95,99,111,109,112,114,101,115,115,0,91,69,58,58,37,115,93,32,99,111,109,112,114,101,115,115,105,111,110,32,101,114,114,111,114,32,37,100,10,0,100,101,102,108,97,116,101,95,98,108,111,99,107,0,91,69,58,58,37,115,93,32,100,101,102,108,97,116,101,95,98,108,111,99,107,32,101,114,114,111,114,32,37,100,10,0,98,103,122,102,95,102,108,117,115,104,0,91,69,58,58,37,115,93,32,104,119,114,105,116,101,32,101,114,114,111,114,32,40,119,114,111,110,103,32,115,105,122,101,41,10,0,98,103,122,102,95,99,108,111,115,101,0,91,69,58,58,37,115,93,32,102,105,108,101,32,119,114,105,116,101,32,101,114,114,111,114,10,0,91,69,58,58,37,115,93,32,105,110,102,108,97,116,101,69,110,100,47,100,101,102,108,97,116,101,69,110,100,32,102,97,105,108,101,100,58,32,37,115,10,0,102,112,45,62,105,100,120,0,98,103,122,102,95,105,110,100,101,120,95,100,117,109,112,0,91,69,58,58,37,115,93,32,69,114,114,111,114,32,111,112,101,110,105,110,103,32,37,115,37,115,32,58,32,37,115,10,0,91,69,58,58,37,115,93,32,69,114,114,111,114,32,111,110,32,99,108,111,115,105,110,103,32,37,115,37,115,32,58,32,37,115,10,0,91,69,58,58,37,115,93,32,69,114,114,111,114,32,119,114,105,116,105,110,103,32,116,111,32,37,115,37,115,32,58,32,37,115,10,0,114,98,0,98,103,122,102,95,105,110,100,101,120,95,108,111,97,100,0,91,69,58,58,37,115,93,32,69,114,114,111,114,32,114,101,97,100,105,110,103,32,37,115,37,115,32,58,32,37,115,10,0,102,112,45,62,98,108,111,99,107,95,111,102,102,115,101,116,32,60,61,32,102,112,45,62,98,108,111,99,107,95,108,101,110,103,116,104,0,98,103,122,102,95,117,115,101,101,107,0,100,97,116,97,0,100,97,116,97,58,0,98,117,105,108,116,45,105,110,0,102,105,108,101,0,102,105,108,101,58,47,47,108,111,99,97,108,104,111,115,116,47,0,102,105,108,101,58,47,47,47,0,45,0,107,110,101,116,102,105,108,101,0,104,116,116,112,0,102,116,112,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,1,2,4,8,15,15,15,15,15,15,15,15,15,0,15,15,15,1,14,2,13,15,15,4,11,15,15,12,15,3,15,15,15,15,5,6,8,15,7,9,15,10,15,15,15,15,15,15,15,1,14,2,13,15,15,4,11,15,15,12,15,3,15,15,15,15,5,6,8,15,7,9,15,10,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,61,65,67,77,71,82,83,86,84,87,89,72,75,68,66,78,0,66,67,2,0,0,67,82,65,77,0,66,65,73,1,0,66,67,70,4,0,66,67,70,2,0,67,83,73,1,0,84,66,73,1,0,35,35,102,105,108,101,102,111,114,109,97,116,61,86,67,70,0,64,72,68,9,0,64,82,71,9,0,64,80,71,9,0,64,72,68,9,86,78,58,0,104,116,115,95,99,108,111,115,101,0,91,87,58,58,98,97,109,95,104,100,114,95,114,101,97,100,93,32,98,103,122,102,95,99,104,101,99,107,95,69,79,70,0,91,87,58,58,37,115,93,32,69,79,70,32,109,97,114,107,101,114,32,105,115,32,97,98,115,101,110,116,46,32,84,104,101,32,105,110,112,117,116,32,105,115,32,112,114,111,98,97,98,108,121,32,116,114,117,110,99,97,116,101,100,46,10,0,98,97,109,95,104,100,114,95,114,101,97,100,0,66,65,77,1,0,91,69,58,58,37,115,93,32,105,110,118,97,108,105,100,32,66,65,77,32,98,105,110,97,114,121,32,104,101,97,100,101,114,10,0,91,69,58,58,37,115,93,32,111,117,116,32,111,102,32,109,101,109,111,114,121,10,0,91,69,58,58,37,115,93,32,101,114,114,111,114,32,114,101,97,100,105,110,103,32,66,71,90,70,32,115,116,114,101,97,109,10,0,91,69,58,58,37,115,93,32,116,114,117,110,99,97,116,101,100,32,98,97,109,32,104,101,97,100,101,114,10,0,64,83,81,9,0,83,78,58,0,76,78,58,0,91,87,58,58,37,115,93,32,100,117,112,108,105,99,97,116,101,100,32,115,101,113,117,101,110,99,101,32,39,37,115,39,10,0,115,97,109,95,104,100,114,95,112,97,114,115,101,0,64,83,81,0,64,83,81,9,83,78,58,37,115,9,76,78,58,37,115,10,0,77,73,68,78,83,72,80,61,88,66,0,91,87,58,58,37,115,93,32,101,109,112,116,121,32,113,117,101,114,121,32,110,97,109,101,10,0,115,97,109,95,112,97,114,115,101,49,0,91,69,58,58,37,115,93,32,113,117,101,114,121,32,110,97,109,101,32,116,111,111,32,108,111,110,103,10,0,91,69,58,58,37,115,93,32,109,105,115,115,105,110,103,32,83,65,77,32,104,101,97,100,101,114,10,0,91,87,58,58,37,115,93,32,117,114,101,99,111,103,110,105,122,101,100,32,114,101,102,101,114,101,110,99,101,32,110,97,109,101,59,32,116,114,101,97,116,101,100,32,97,115,32,117,110,109,97,112,112,101,100,10,0,91,87,58,58,37,115,93,32,109,97,112,112,101,100,32,113,117,101,114,121,32,99,97,110,110,111,116,32,104,97,118,101,32,122,101,114,111,32,99,111,111,114,100,105,110,97,116,101,59,32,116,114,101,97,116,101,100,32,97,115,32,117,110,109,97,112,112,101,100,10,0,91,69,58,58,37,115,93,32,110,111,32,67,73,71,65,82,32,111,112,101,114,97,116,105,111,110,115,10,0,91,69,58,58,37,115,93,32,116,111,111,32,109,97,110,121,32,67,73,71,65,82,32,111,112,101,114,97,116,105,111,110,115,10,0,91,69,58,58,37,115,93,32,117,110,114,101,99,111,103,110,105,122,101,100,32,67,73,71,65,82,32,111,112,101,114,97,116,111,114,10,0,91,87,58,58,37,115,93,32,109,97,112,112,101,100,32,113,117,101,114,121,32,109,117,115,116,32,104,97,118,101,32,97,32,67,73,71,65,82,59,32,116,114,101,97,116,101,100,32,97,115,32,117,110,109,97,112,112,101,100,10,0,61,0,91,87,58,58,37,115,93,32,117,114,101,99,111,103,110,105,122,101,100,32,109,97,116,101,32,114,101,102,101,114,101,110,99,101,32,110,97,109,101,59,32,116,114,101,97,116,101,100,32,97,115,32,117,110,109,97,112,112,101,100,10,0,91,87,58,58,37,115,93,32,109,97,112,112,101,100,32,109,97,116,101,32,99,97,110,110,111,116,32,104,97,118,101,32,122,101,114,111,32,99,111,111,114,100,105,110,97,116,101,59,32,116,114,101,97,116,101,100,32,97,115,32,117,110,109,97,112,112,101,100,10,0,91,69,58,58,37,115,93,32,67,73,71,65,82,32,97,110,100,32,113,117,101,114,121,32,115,101,113,117,101,110,99,101,32,97,114,101,32,111,102,32,100,105,102,102,101,114,101,110,116,32,108,101,110,103,116,104,10,0,91,69,58,58,37,115,93,32,83,69,81,32,97,110,100,32,81,85,65,76,32,97,114,101,32,111,102,32,100,105,102,102,101,114,101,110,116,32,108,101,110,103,116,104,10,0,91,69,58,58,37,115,93,32,105,110,99,111,109,112,108,101,116,101,32,97,117,120,32,102,105,101,108,100,10,0,91,69,58,58,37,115,93,32,104,101,120,32,102,105,101,108,100,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,97,110,32,101,118,101,110,32,110,117,109,98,101,114,32,111,102,32,100,105,103,105,116,115,10,0,91,69,58,58,37,115,93,32,105,110,99,111,109,112,108,101,116,101,32,66,45,116,121,112,101,100,32,97,117,120,32,102,105,101,108,100,10,0,91,69,58,58,37,115,93,32,117,110,114,101,99,111,103,110,105,122,101,100,32,116,121,112,101,10,0,91,87,58,58,37,115,93,32,112,97,114,115,101,32,101,114,114,111,114,32,97,116,32,108,105,110,101,32,37,108,108,100,10,0,115,97,109,95,114,101,97,100,49,0,113,45,62,112,114,101,118,32,38,38,32,113,45,62,110,101,120,116,0,116,104,114,101,97,100,95,112,111,111,108,46,99,0,119,97,107,101,95,110,101,120,116,95,119,111,114,107,101,114,0,112,45,62,110,106,111,98,115,32,62,61,32,113,45,62,110,95,105,110,112,117,116,0,85,110,114,101,99,111,103,110,105,115,101,100,32,112,114,101,115,101,114,118,97,116,105,111,110,32,109,97,112,32,107,101,121,32,37,99,37,99,10,0,85,110,114,101,99,111,103,110,105,115,101,100,32,107,101,121,58,32,37,46,50,115,10,0,78,111,32,114,101,102,101,114,101,110,99,101,32,115,112,101,99,105,102,105,101,100,32,97,110,100,32,110,111,32,101,109,98,101,100,100,101,100,32,114,101,102,101,114,101,110,99,101,32,105,115,32,97,118,97,105,108,97,98,108,101,46,10,0,83,108,105,99,101,32,115,116,97,114,116,115,32,98,101,102,111,114,101,32,98,97,115,101,32,49,46,10,0,85,110,97,98,108,101,32,116,111,32,102,101,116,99,104,32,114,101,102,101,114,101,110,99,101,32,35,37,100,32,37,100,46,46,37,100,10,0,83,108,105,99,101,32,101,110,100,115,32,98,101,121,111,110,100,32,114,101,102,101,114,101,110,99,101,32,101,110,100,46,10,0,69,82,82,79,82,58,32,109,100,53,115,117,109,32,114,101,102,101,114,101,110,99,101,32,109,105,115,109,97,116,99,104,32,102,111,114,32,114,101,102,32,37,100,32,112,111,115,32,37,100,46,46,37,100,10,0,67,82,65,77,58,32,37,115,10,0,82,101,102,32,58,32,37,115,10,0,82,101,113,117,101,115,116,101,100,32,117,110,107,110,111,119,110,32,114,101,102,101,114,101,110,99,101,32,73,68,32,37,100,10,0,82,101,97,100,32,104,97,115,32,110,101,103,97,116,105,118,101,32,108,101,110,103,116,104,10,0,82,101,97,100,32,104,97,115,32,97,108,105,103,110,109,101,110,116,32,112,111,115,105,116,105,111,110,32,37,100,32,98,117,116,32,110,111,32,117,110,109,97,112,112,101,100,32,102,108,97,103,10,0,77,68,90,0,69,114,114,111,114,58,32,102,101,97,116,117,114,101,32,112,111,115,105,116,105,111,110,32,37,100,32,98,101,102,111,114,101,32,115,116,97,114,116,32,111,102,32,114,101,97,100,46,10,0,82,101,102,32,112,111,115,32,111,117,116,115,105,100,101,32,111,102,32,114,101,102,32,115,101,113,117,101,110,99,101,32,98,111,117,110,100,97,114,121,10,0,69,114,114,111,114,58,32,85,110,107,110,111,119,110,32,102,101,97,116,117,114,101,32,99,111,100,101,32,39,37,99,39,10,0,77,97,116,101,32,108,105,110,101,32,111,117,116,32,111,102,32,98,111,117,110,100,115,58,32,37,100,32,118,115,32,91,48,44,32,37,100,93,10,0,70,97,105,108,117,114,101,32,116,111,32,100,101,99,111,100,101,32,115,108,105,99,101,10,0,104,116,115,95,116,112,111,111,108,95,110,101,120,116,95,114,101,115,117,108,116,32,102,97,105,108,117,114,101,10,0,42,0,82,78,0,80,73,0,85,73,0,77,73,0,83,77,0,84,68,0,65,80,0,82,82,0,67,71,84,78,0,65,71,84,78,0,65,67,84,78,0,65,67,71,78,0,65,67,71,84,0,85,110,107,110,111,119,110,32,112,114,101,115,101,114,118,97,116,105,111,110,32,107,101,121,32,39,37,46,50,115,39,10,0,66,70,0,67,70,0,82,76,0,82,71,0,77,70,0,78,83,0,78,80,0,84,83,0,78,70,0,84,67,0,84,78,0,84,76,0,70,78,0,70,67,0,70,80,0,66,83,0,73,78,0,68,76,0,66,65,0,66,66,0,77,81,0,81,83,0,81,81,0,82,73,0,83,67,0,82,83,0,80,68,0,72,67,0,84,77,0,84,86,0,5,5,9,1,0,0,0,0,4,9,3,4,1,1,1,0,1,1,1,0,4,9,3,4,1,2,1,0,1,1,1,0,4,9,3,4,1,4,1,0,1,1,1,0,85,110,115,117,112,112,111,114,116,101,100,32,83,65,77,32,97,117,120,32,116,121,112,101,32,39,37,99,39,10,0,87,114,111,116,101,32,99,111,109,112,114,101,115,115,105,111,110,32,98,108,111,99,107,32,104,101,97,100,101,114,32,105,110,32,37,100,32,98,121,116,101,115,10,0,99,112,45,98,117,102,32,60,61,32,49,54,43,53,42,40,56,43,115,45,62,104,100,114,45,62,110,117,109,95,98,108,111,99,107,115,41,0,99,114,97,109,47,99,114,97,109,95,101,110,99,111,100,101,46,99,0,99,114,97,109,95,101,110,99,111,100,101,95,115,108,105,99,101,95,104,101,97,100,101,114,0,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,114,101,102,101,114,101,110,99,101,32,35,37,100,10,0,115,110,32,60,32,99,45,62,99,117,114,114,95,115,108,105,99,101,0,99,114,97,109,95,101,110,99,111,100,101,95,99,111,110,116,97,105,110,101,114,0,102,100,45,62,114,101,102,115,45,62,114,101,102,95,105,100,91,99,45,62,114,101,102,95,115,101,113,95,105,100,93,45,62,115,101,113,0,85,110,104,97,110,100,108,101,100,32,116,121,112,101,32,99,111,100,101,32,102,111,114,32,78,77,32,116,97,103,10,0,85,110,107,110,111,119,110,32,115,117,98,45,116,121,112,101,32,39,37,99,39,32,102,111,114,32,97,117,120,32,116,121,112,101,32,39,66,39,10,0,85,110,107,110,111,119,110,32,97,117,120,32,116,121,112,101,32,39,37,99,39,10,0,115,45,62,97,117,120,95,98,108,107,45,62,98,121,116,101,32,60,61,32,115,45,62,97,117,120,95,98,108,107,45,62,97,108,108,111,99,0,99,114,97,109,95,101,110,99,111,100,101,95,97,117,120,95,49,95,48,0,99,114,97,109,95,101,110,99,111,100,101,95,97,117,120,0,85,78,75,78,79,87,78,0,98,114,103,0,112,114,111,99,101,115,115,95,111,110,101,95,114,101,97,100,0,67,73,71,65,82,32,97,110,100,32,113,117,101,114,121,32,115,101,113,117,101,110,99,101,32,97,114,101,32,111,102,32,100,105,102,102,101,114,101,110,116,32,108,101,110,103,116,104,10,0,77,117,108,116,105,45,114,101,102,32,99,111,110,116,97,105,110,101,114,10,0,69,110,99,111,100,101,32,115,108,105,99,101,32,37,100,10,0,117,110,104,97,110,100,108,101,100,32,102,101,97,116,117,114,101,32,99,111,100,101,32,37,99,10,0,67,71,84,78,65,71,84,78,65,67,84,78,65,67,71,78,65,67,71,84,0,49,46,50,46,56,0,122,108,105,98,32,105,110,102,108,97,116,101,73,110,105,116,32,101,114,114,111,114,58,32,37,115,10,0,122,108,105,98,32,105,110,102,108,97,116,101,32,101,114,114,111,114,58,32,37,115,10,0,66,108,111,99,107,32,67,82,67,51,50,32,102,97,105,108,117,114,101,10,0,98,45,62,109,101,116,104,111,100,32,33,61,32,82,65,87,32,124,124,32,40,98,45,62,99,111,109,112,95,115,105,122,101,32,61,61,32,98,45,62,117,110,99,111,109,112,95,115,105,122,101,41,0,99,114,97,109,47,99,114,97,109,95,105,111,46,99,0,99,114,97,109,95,119,114,105,116,101,95,98,108,111,99,107,0,66,122,105,112,50,32,99,111,109,112,114,101,115,115,105,111,110,32,105,115,32,110,111,116,32,99,111,109,112,105,108,101,100,32,105,110,116,111,32,116,104,105,115,32,118,101,114,115,105,111,110,46,10,80,108,101,97,115,101,32,114,101,98,117,105,108,100,32,97,110,100,32,116,114,121,32,97,103,97,105,110,46,10,0,76,122,109,97,32,99,111,109,112,114,101,115,115,105,111,110,32,105,115,32,110,111,116,32,99,111,109,112,105,108,101,100,32,105,110,116,111,32,116,104,105,115,32,118,101,114,115,105,111,110,46,10,80,108,101,97,115,101,32,114,101,98,117,105,108,100,32,97,110,100,32,116,114,121,32,97,103,97,105,110,46,10,0,122,108,105,98,32,100,101,102,108,97,116,101,73,110,105,116,50,32,101,114,114,111,114,58,32,37,115,10,0,68,101,102,108,97,116,101,32,112,114,111,100,117,99,101,100,32,108,97,114,103,101,114,32,111,117,116,112,117,116,32,116,104,97,110,32,101,120,112,101,99,116,101,100,46,32,65,98,111,114,116,10,0,122,108,105,98,32,100,101,102,108,97,116,101,32,101,114,114,111,114,58,32,37,115,10,0,67,111,109,112,114,101,115,115,105,111,110,32,102,97,105,108,101,100,33,10,0,82,65,87,0,71,90,73,80,0,66,90,73,80,50,0,76,90,77,65,0,82,65,78,83,48,0,82,65,78,83,49,0,71,90,73,80,95,82,76,69,0,67,111,109,112,114,101,115,115,101,100,32,98,108,111,99,107,32,73,68,32,37,100,32,102,114,111,109,32,37,100,32,116,111,32,37,100,32,98,121,32,109,101,116,104,111,100,32,37,115,10,0,70,73,76,69,95,72,69,65,68,69,82,0,67,79,77,80,82,69,83,83,73,79,78,95,72,69,65,68,69,82,0,77,65,80,80,69,68,95,83,76,73,67,69,0,85,78,77,65,80,80,69,68,95,83,76,73,67,69,0,67,79,82,69,0,85,110,97,98,108,101,32,116,111,32,102,105,110,100,32,114,101,102,32,110,97,109,101,32,39,37,115,39,10,0,114,45,62,114,101,102,95,105,100,91,105,100,93,45,62,99,111,117,110,116,32,62,61,32,48,0,99,114,97,109,95,114,101,102,95,100,101,99,114,95,108,111,99,107,101,100,0,114,45,62,114,101,102,95,105,100,91,105,100,93,45,62,99,111,117,110,116,32,61,61,32,48,0,101,45,62,99,111,117,110,116,32,61,61,32,48,0,99,114,97,109,95,114,101,102,95,108,111,97,100,0,114,45,62,108,97,115,116,45,62,99,111,117,110,116,32,62,32,48,0,85,110,97,98,108,101,32,116,111,32,108,111,97,100,32,46,103,122,105,32,105,110,100,101,120,32,39,37,115,46,103,122,105,39,10,0,98,103,122,102,95,117,115,101,101,107,40,41,32,111,110,32,114,101,102,101,114,101,110,99,101,32,102,105,108,101,0,98,103,122,102,95,114,101,97,100,40,41,32,111,110,32,114,101,102,101,114,101,110,99,101,32,102,105,108,101,0,77,97,108,102,111,114,109,101,100,32,114,101,102,101,114,101,110,99,101,32,102,105,108,101,63,10,0,78,111,32,114,101,102,101,114,101,110,99,101,32,102,111,117,110,100,32,102,111,114,32,105,100,32,37,100,10,0,82,69,70,95,80,65,84,72,0,82,69,70,95,67,65,67,72,69,0,99,114,97,109,95,112,111,112,117,108,97,116,101,95,114,101,102,32,111,110,32,102,100,32,37,112,44,32,105,100,32,37,100,10,0,104,116,116,112,58,47,47,119,119,119,46,101,98,105,46,97,99,46,117,107,58,56,48,47,101,110,97,47,99,114,97,109,47,109,100,53,47,37,115,0,88,68,71,95,67,65,67,72,69,95,72,79,77,69,0,72,79,77,69,0,47,46,99,97,99,104,101,0,84,77,80,68,73,82,0,84,69,77,80,0,47,116,109,112,0,37,115,37,115,47,104,116,115,45,114,101,102,0,37,115,37,115,47,104,116,115,45,114,101,102,47,37,37,50,115,47,37,37,50,115,47,37,37,115,0,80,111,112,117,108,97,116,105,110,103,32,108,111,99,97,108,32,99,97,99,104,101,58,32,37,115,10,0,81,117,101,114,121,105,110,103,32,114,101,102,32,37,115,10,0,102,105,108,101,58,0,46,102,97,105,0,37,46,42,115,46,102,97,105,0,115,116,114,99,109,112,40,114,45,62,110,97,109,101,44,32,102,100,45,62,104,101,97,100,101,114,45,62,114,101,102,91,105,93,46,110,97,109,101,41,32,61,61,32,48,0,115,97,110,105,116,105,115,101,95,83,81,95,108,105,110,101,115,0,87,65,82,78,73,78,71,58,32,72,101,97,100,101,114,32,64,83,81,32,108,101,110,103,116,104,32,109,105,115,109,97,116,99,104,32,102,111,114,32,114,101,102,32,37,115,44,32,37,100,32,118,115,32,37,100,10,0,67,114,101,97,116,105,110,103,32,114,101,102,101,114,101,110,99,101,32,99,97,99,104,101,32,100,105,114,101,99,116,111,114,121,32,37,115,10,84,104,105,115,32,109,97,121,32,98,101,99,111,109,101,32,108,97,114,103,101,59,32,115,101,101,32,116,104,101,32,115,97,109,116,111,111,108,115,40,49,41,32,109,97,110,117,97,108,32,112,97,103,101,32,82,69,70,95,67,65,67,72,69,32,100,105,115,99,117,115,115,105,111,110,10,0,87,114,105,116,105,110,103,32,99,97,99,104,101,32,102,105,108,101,32,39,37,115,39,10,0,37,115,46,116,109,112,95,37,100,95,37,117,95,37,117,0,119,120,0,91,69,58,58,37,115,93,32,109,105,115,109,97,116,99,104,105,110,103,32,109,100,53,115,117,109,32,102,111,114,32,100,111,119,110,108,111,97,100,101,100,32,114,101,102,101,114,101,110,99,101,46,10,0,99,114,97,109,95,112,111,112,117,108,97,116,101,95,114,101,102,0,70,97,105,108,101,100,32,116,111,32,112,111,112,117,108,97,116,101,32,114,101,102,101,114,101,110,99,101,32,102,111,114,32,105,100,32,37,100,10,0,115,116,97,114,116,32,62,61,32,49,0,99,114,97,109,95,103,101,116,95,114,101,102,0,67,111,110,116,97,105,110,101,114,32,104,101,97,100,101,114,32,67,82,67,51,50,32,102,97,105,108,117,114,101,10,0,99,114,97,109,95,101,110,99,111,100,101,95,99,111,110,116,97,105,110,101,114,32,102,97,105,108,101,100,10,0,85,110,101,120,112,101,99,116,101,100,32,98,108,111,99,107,32,111,102,32,116,121,112,101,32,37,115,10,0,83,108,105,99,101,32,100,111,101,115,32,110,111,116,32,105,110,99,108,117,100,101,32,97,110,121,32,100,97,116,97,32,98,108,111,99,107,115,46,10,0,15,0,0,0,255,255,255,255,15,224,69,79,70,0,0,0,0,1,0,5,189,217,79,0,1,0,6,6,1,0,1,0,1,0,238,99,1,75,0,11,0,0,0,255,255,255,255,15,224,69,79,70,0,0,0,0,1,0,0,1,0,6,6,1,0,1,0,1,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,15,15,15,1,14,2,13,15,15,4,11,15,15,12,15,3,15,15,15,15,5,6,8,15,7,9,15,10,15,15,15,15,15,15,15,1,14,2,13,15,15,4,11,15,15,12,15,3,15,15,15,15,5,6,8,15,7,9,15,10,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10241);
/* memory initializer */ allocate([15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,115,116,45,62,102,114,101,113,115,91,118,97,108,93,32,62,61,32,48,0,99,114,97,109,47,99,114,97,109,95,115,116,97,116,115,46,99,0,99,114,97,109,95,115,116,97,116,115,95,100,101,108,0,70,97,105,108,101,100,32,116,111,32,114,101,109,111,118,101,32,118,97,108,32,37,100,32,102,114,111,109,32,99,114,97,109,95,115,116,97,116,115,10,0,110,116,111,116,32,61,61,32,115,116,45,62,110,115,97,109,112,0,99,114,97,109,95,115,116,97,116,115,95,101,110,99,111,100,105,110,103,0,104,116,116,112,58,0,102,116,112,58,0,124,104,116,116,112,58,0,124,102,116,112,58,0,85,82,76,61,104,116,116,112,58,0,85,82,76,61,102,116,112,58,0,82,65,87,68,65,84,65,0,85,82,76,61,0,114,98,109,0,70,91,77,93,62,48,0,99,114,97,109,47,114,65,78,83,95,115,116,97,116,105,99,46,99,0,114,97,110,115,95,99,111,109,112,114,101,115,115,95,79,48,0,46,47,99,114,97,109,47,114,65,78,83,95,98,121,116,101,46,104,0,82,97,110,115,69,110,99,83,121,109,98,111,108,73,110,105,116,0,115,116,97,114,116,32,60,61,32,40,49,117,32,60,60,32,115,99,97,108,101,95,98,105,116,115,41,0,102,114,101,113,32,60,61,32,40,49,117,32,60,60,32,115,99,97,108,101,95,98,105,116,115,41,32,45,32,115,116,97,114,116,0,115,121,109,45,62,120,95,109,97,120,32,33,61,32,48,0,82,97,110,115,69,110,99,80,117,116,83,121,109,98,111,108,0,115,116,97,114,116,32,60,61,32,40,49,32,60,60,32,49,54,41,0,82,97,110,115,68,101,99,83,121,109,98,111,108,73,110,105,116,0,102,114,101,113,32,60,61,32,40,49,32,60,60,32,49,54,41,32,45,32,115,116,97,114,116,0,120,32,60,32,84,79,84,70,82,69,81,0,114,97,110,115,95,117,110,99,111,109,112,114,101,115,115,95,79,48,0,116,97,98,95,115,105,122,101,32,60,32,50,53,55,42,50,53,55,42,51,0,114,97,110,115,95,99,111,109,112,114,101,115,115,95,79,49,0,120,32,60,61,32,84,79,84,70,82,69,81,0,114,97,110,115,95,117,110,99,111,109,112,114,101,115,115,95,79,49,0,99,97,110,39,116,32,114,101,115,111,108,118,101,32,37,115,58,37,115,58,32,37,115,10,0,115,111,99,107,101,116,0,115,101,116,115,111,99,107,111,112,116,0,99,111,110,110,101,99,116,0,115,101,108,101,99,116,0,85,83,69,82,32,97,110,111,110,121,109,111,117,115,13,10,0,80,65,83,83,32,107,102,116,112,64,13,10,0,84,89,80,69,32,73,13,10,0,102,116,112,58,47,47,0,50,49,0,82,69,84,82,32,37,115,13,10,0,83,73,90,69,32,37,115,13,10,0,80,65,83,86,13,10,0,37,100,44,37,100,44,37,100,44,37,100,44,37,100,44,37,100,0,37,42,100,32,37,108,108,100,0,82,69,83,84,32,37,108,108,100,13,10,0,91,107,102,116,112,95,112,97,115,118,95,99,111,110,110,101,99,116,93,32,107,102,116,112,95,112,97,115,118,95,112,114,101,112,40,41,32,105,115,32,110,111,116,32,99,97,108,108,101,100,32,98,101,102,111,114,101,32,104,97,110,100,46,10,0,37,100,46,37,100,46,37,100,46,37,100,0,37,100,0,91,107,102,116,112,95,99,111,110,110,101,99,116,95,102,105,108,101,93,32,37,115,10,0,104,116,116,112,58,47,47,0,104,116,116,112,95,112,114,111,120,121,0,56,48,0,47,0,71,69,84,32,37,115,32,72,84,84,80,47,49,46,48,13,10,72,111,115,116,58,32,37,115,13,10,0,82,97,110,103,101,58,32,98,121,116,101,115,61,37,108,108,100,45,13,10,0,13,10,0,13,10,13,10,0,91,107,102,116,112,95,111,112,101,110,93,32,111,110,108,121,32,109,111,100,101,32,34,114,34,32,105,115,32,115,117,112,112,111,114,116,101,100,46,10,0,111,112,101,110,0,91,107,110,101,116,95,115,101,101,107,93,32,83,69,69,75,95,69,78,68,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,102,111,114,32,72,84,84,80,46,32,79,102,102,115,101,116,32,105,115,32,117,110,99,104,97,110,103,101,100,46,10,0,91,107,110,101,116,95,115,101,101,107,93,32,37,115,10,0,91,102,97,105,95,98,117,105,108,100,95,99,111,114,101,93,32,109,97,108,102,111,114,109,101,100,32,108,105,110,101,10,0,91,102,97,105,95,98,117,105,108,100,95,99,111,114,101,93,32,105,103,110,111,114,105,110,103,32,100,117,112,108,105,99,97,116,101,32,115,101,113,117,101,110,99,101,32,34,37,115,34,32,97,116,32,98,121,116,101,32,111,102,102,115,101,116,32,37,108,108,117,10,0,91,102,97,105,95,98,117,105,108,100,95,99,111,114,101,93,32,111,117,116,32,111,102,32,109,101,109,111,114,121,10,0,91,102,97,105,95,98,117,105,108,100,95,99,111,114,101,93,32,116,104,101,32,108,97,115,116,32,101,110,116,114,121,32,104,97,115,32,110,111,32,115,101,113,117,101,110,99,101,10,0,91,102,97,105,95,98,117,105,108,100,95,99,111,114,101,93,32,105,110,108,105,110,101,100,32,101,109,112,116,121,32,108,105,110,101,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,115,101,113,117,101,110,99,101,32,39,37,115,39,46,10,0,91,102,97,105,95,98,117,105,108,100,95,99,111,114,101,93,32,100,105,102,102,101,114,101,110,116,32,108,105,110,101,32,108,101,110,103,116,104,32,105,110,32,115,101,113,117,101,110,99,101,32,39,37,115,39,46,10,0,37,115,9,37,108,108,100,9,37,108,108,117,9,37,100,9,37,100,10,0,37,115,46,102,97,105,0,114,0,91,102,97,105,95,98,117,105,108,100,93,32,102,97,105,108,32,116,111,32,111,112,101,110,32,116,104,101,32,70,65,83,84,65,32,102,105,108,101,32,37,115,10,0,67,97,110,110,111,116,32,105,110,100,101,120,32,102,105,108,101,115,32,99,111,109,112,114,101,115,115,101,100,32,119,105,116,104,32,103,122,105,112,44,32,112,108,101,97,115,101,32,117,115,101,32,98,103,122,105,112,10,0,46,103,122,105,0,91,102,97,105,95,98,117,105,108,100,93,32,102,97,105,108,32,116,111,32,109,97,107,101,32,98,103,122,102,32,105,110,100,101,120,32,37,115,46,103,122,105,10,0,91,102,97,105,95,98,117,105,108,100,93,32,69,114,114,111,114,32,111,110,32,99,108,111,115,105,110,103,32,37,115,10,0,119,98,0,91,102,97,105,95,98,117,105,108,100,93,32,102,97,105,108,32,116,111,32,119,114,105,116,101,32,70,65,83,84,65,32,105,110,100,101,120,32,37,115,10,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,0,77,97,108,102,111,114,109,101,100,32,101,120,116,101,114,110,97,108,32,104,101,97,100,101,114,32,115,116,114,101,97,109,10,0,77,97,108,102,111,114,109,101,100,32,98,101,116,97,32,104,101,97,100,101,114,32,115,116,114,101,97,109,10,0,109,97,120,95,118,97,108,32,62,61,32,109,105,110,95,118,97,108,0,99,114,97,109,47,99,114,97,109,95,99,111,100,101,99,115,46,99,0,99,114,97,109,95,98,101,116,97,95,101,110,99,111,100,101,95,105,110,105,116,0,77,97,108,102,111,114,109,101,100,32,115,117,98,101,120,112,32,104,101,97,100,101,114,32,115,116,114,101,97,109,10,0,77,97,108,102,111,114,109,101,100,32,103,97,109,109,97,32,104,101,97,100,101,114,32,115,116,114,101,97,109,10,0,77,97,108,102,111,114,109,101,100,32,104,117,102,102,109,97,110,32,104,101,97,100,101,114,32,115,116,114,101,97,109,10,0,99,45,62,101,95,104,117,102,102,109,97,110,46,99,111,100,101,115,91,105,93,46,115,121,109,98,111,108,32,61,61,32,115,121,109,0,99,114,97,109,95,104,117,102,102,109,97,110,95,101,110,99,111,100,101,95,99,104,97,114,0,99,114,97,109,95,104,117,102,102,109,97,110,95,101,110,99,111,100,101,95,105,110,116,0,115,116,45,62,102,114,101,113,115,91,105,93,32,62,32,48,0,99,114,97,109,95,104,117,102,102,109,97,110,95,101,110,99,111,100,101,95,105,110,105,116,0,102,114,101,113,115,91,110,118,97,108,115,93,32,62,32,48,0,110,118,97,108,115,32,62,32,48,0,98,121,116,101,95,97,114,114,97,121,95,115,116,111,112,32,99,111,100,101,99,32,111,110,108,121,32,115,117,112,112,111,114,116,115,32,66,89,84,69,95,65,82,82,65,89,115,46,10,0,77,97,108,102,111,114,109,101,100,32,98,121,116,101,95,97,114,114,97,121,95,115,116,111,112,32,104,101,97,100,101,114,32,115,116,114,101,97,109,10,0,78,85,76,76,0,69,88,84,69,82,78,65,76,0,71,79,76,79,77,66,0,72,85,70,70,77,65,78,0,66,89,84,69,95,65,82,82,65,89,95,76,69,78,0,66,89,84,69,95,65,82,82,65,89,95,83,84,79,80,0,66,69,84,65,0,83,85,66,69,88,80,0,71,79,76,79,77,66,95,82,73,67,69,0,71,65,77,77,65,0,63,0,85,110,105,109,112,108,101,109,101,110,116,101,100,32,99,111,100,101,99,32,111,102,32,116,121,112,101,32,37,115,10,0,77,97,108,102,111,114,109,101,100,32,98,121,116,101,95,97,114,114,97,121,95,108,101,110,32,104,101,97,100,101,114,32,115,116,114,101,97,109,10,0,85,110,107,110,111,119,110,32,99,111,100,101,99,32,116,121,112,101,32,37,100,10,0,105,110,99,111,114,114,101,99,116,32,104,101,97,100,101,114,32,99,104,101,99,107,0,117,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,0,105,110,118,97,108,105,100,32,119,105,110,100,111,119,32,115,105,122,101,0,117,110,107,110,111,119,110,32,104,101,97,100,101,114,32,102,108,97,103,115,32,115,101,116,0,104,101,97,100,101,114,32,99,114,99,32,109,105,115,109,97,116,99,104,0,105,110,118,97,108,105,100,32,98,108,111,99,107,32,116,121,112,101,0,105,110,118,97,108,105,100,32,115,116,111,114,101,100,32,98,108,111,99,107,32,108,101,110,103,116,104,115,0,116,111,111,32,109,97,110,121,32,108,101,110,103,116,104,32,111,114,32,100,105,115,116,97,110,99,101,32,115,121,109,98,111,108,115,0,105,110,118,97,108,105,100,32,99,111,100,101,32,108,101,110,103,116,104,115,32,115,101,116,0,105,110,118,97,108,105,100,32,98,105,116,32,108,101,110,103,116,104,32,114,101,112,101,97,116,0,105,110,118,97,108,105,100,32,99,111,100,101,32,45,45,32,109,105,115,115,105,110,103,32,101,110,100,45,111,102,45,98,108,111,99,107,0,105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,115,32,115,101,116,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,115,32,115,101,116,0,105,110,99,111,114,114,101,99,116,32,100,97,116,97,32,99,104,101,99,107,0,105,110,99,111,114,114,101,99,116,32,108,101,110,103,116,104,32,99,104,101,99,107,0,0,1,2,3,4,4,5,5,6,6,6,6,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,16,17,18,18,19,19,20,20,20,20,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,1,2,3,4,5,6,7,8,8,9,9,10,10,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15,115,116,114,101,97,109,32,101,114,114,111,114,0,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,0,98,117,102,102,101,114,32,101,114,114,111,114,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,116,111,111,32,102,97,114,32,98,97,99,107,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,99,111,100,101,0,105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,32,99,111,100,101,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,114,119,97,0,105,110,102,105,110,105,116,121,0,110,97,110,0,47,112,114,111,99,47,115,101,108,102,47,102,100,47,0,46,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,101,120,99,101,112,116,105,111,110,0,83,116,57,98,97,100,95,97,108,108,111,99,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20481);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

  
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};var Sockets={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};
  
  
  function __inet_pton4_raw(str) {
      var b = str.split('.');
      for (var i = 0; i < 4; i++) {
        var tmp = Number(b[i]);
        if (isNaN(tmp)) return null;
        b[i] = tmp;
      }
      return (b[0] | (b[1] << 8) | (b[2] << 16) | (b[3] << 24)) >>> 0;
    }
  
  
  var _htons=undefined;
  Module["_htons"] = _htons;function __inet_pton6_raw(str) {
      var words;
      var w, offset, z, i;
      /* http://home.deds.nl/~aeron/regex/ */
      var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i
      var parts = [];
      if (!valid6regx.test(str)) {
        return null;
      }
      if (str === "::") {
        return [0, 0, 0, 0, 0, 0, 0, 0];
      }
      // Z placeholder to keep track of zeros when splitting the string on ":"
      if (str.indexOf("::") === 0) {
        str = str.replace("::", "Z:"); // leading zeros case
      } else {
        str = str.replace("::", ":Z:");
      }
  
      if (str.indexOf(".") > 0) {
        // parse IPv4 embedded stress
        str = str.replace(new RegExp('[.]', 'g'), ":");
        words = str.split(":");
        words[words.length-4] = parseInt(words[words.length-4]) + parseInt(words[words.length-3])*256;
        words[words.length-3] = parseInt(words[words.length-2]) + parseInt(words[words.length-1])*256;
        words = words.slice(0, words.length-2);
      } else {
        words = str.split(":");
      }
  
      offset = 0; z = 0;
      for (w=0; w < words.length; w++) {
        if (typeof words[w] === 'string') {
          if (words[w] === 'Z') {
            // compressed zeros - write appropriate number of zero words
            for (z = 0; z < (8 - words.length+1); z++) {
              parts[w+z] = 0;
            }
            offset = z-1;
          } else {
            // parse hex to field to 16-bit value and write it in network byte-order
            parts[w+offset] = _htons(parseInt(words[w],16));
          }
        } else {
          // parsed IPv4 words
          parts[w+offset] = words[w];
        }
      }
      return [
        (parts[1] << 16) | parts[0],
        (parts[3] << 16) | parts[2],
        (parts[5] << 16) | parts[4],
        (parts[7] << 16) | parts[6]
      ];
    }var DNS={address_map:{id:1,addrs:{},names:{}},lookup_name:function (name) {
        // If the name is already a valid ipv4 / ipv6 address, don't generate a fake one.
        var res = __inet_pton4_raw(name);
        if (res !== null) {
          return name;
        }
        res = __inet_pton6_raw(name);
        if (res !== null) {
          return name;
        }
  
        // See if this name is already mapped.
        var addr;
  
        if (DNS.address_map.addrs[name]) {
          addr = DNS.address_map.addrs[name];
        } else {
          var id = DNS.address_map.id++;
          assert(id < 65535, 'exceeded max address mappings of 65535');
  
          addr = '172.29.' + (id & 0xff) + '.' + (id & 0xff00);
  
          DNS.address_map.names[addr] = name;
          DNS.address_map.addrs[name] = addr;
        }
  
        return addr;
      },lookup_addr:function (addr) {
        if (DNS.address_map.names[addr]) {
          return DNS.address_map.names[addr];
        }
  
        return null;
      }};
  
  function __inet_ntop4_raw(addr) {
      return (addr & 0xff) + '.' + ((addr >> 8) & 0xff) + '.' + ((addr >> 16) & 0xff) + '.' + ((addr >> 24) & 0xff)
    }
  
  
  var _ntohs=undefined;
  Module["_ntohs"] = _ntohs;function __inet_ntop6_raw(ints) {
      //  ref:  http://www.ietf.org/rfc/rfc2373.txt - section 2.5.4
      //  Format for IPv4 compatible and mapped  128-bit IPv6 Addresses
      //  128-bits are split into eight 16-bit words
      //  stored in network byte order (big-endian)
      //  |                80 bits               | 16 |      32 bits        |
      //  +-----------------------------------------------------------------+
      //  |               10 bytes               |  2 |      4 bytes        |
      //  +--------------------------------------+--------------------------+
      //  +               5 words                |  1 |      2 words        |
      //  +--------------------------------------+--------------------------+
      //  |0000..............................0000|0000|    IPv4 ADDRESS     | (compatible)
      //  +--------------------------------------+----+---------------------+
      //  |0000..............................0000|FFFF|    IPv4 ADDRESS     | (mapped)
      //  +--------------------------------------+----+---------------------+
      var str = "";
      var word = 0;
      var longest = 0;
      var lastzero = 0;
      var zstart = 0;
      var len = 0;
      var i = 0;
      var parts = [
        ints[0] & 0xffff,
        (ints[0] >> 16),
        ints[1] & 0xffff,
        (ints[1] >> 16),
        ints[2] & 0xffff,
        (ints[2] >> 16),
        ints[3] & 0xffff,
        (ints[3] >> 16)
      ];
  
      // Handle IPv4-compatible, IPv4-mapped, loopback and any/unspecified addresses
  
      var hasipv4 = true;
      var v4part = "";
      // check if the 10 high-order bytes are all zeros (first 5 words)
      for (i = 0; i < 5; i++) {
        if (parts[i] !== 0) { hasipv4 = false; break; }
      }
  
      if (hasipv4) {
        // low-order 32-bits store an IPv4 address (bytes 13 to 16) (last 2 words)
        v4part = __inet_ntop4_raw(parts[6] | (parts[7] << 16));
        // IPv4-mapped IPv6 address if 16-bit value (bytes 11 and 12) == 0xFFFF (6th word)
        if (parts[5] === -1) {
          str = "::ffff:";
          str += v4part;
          return str;
        }
        // IPv4-compatible IPv6 address if 16-bit value (bytes 11 and 12) == 0x0000 (6th word)
        if (parts[5] === 0) {
          str = "::";
          //special case IPv6 addresses
          if(v4part === "0.0.0.0") v4part = ""; // any/unspecified address
          if(v4part === "0.0.0.1") v4part = "1";// loopback address
          str += v4part;
          return str;
        }
      }
  
      // Handle all other IPv6 addresses
  
      // first run to find the longest contiguous zero words
      for (word = 0; word < 8; word++) {
        if (parts[word] === 0) {
          if (word - lastzero > 1) {
            len = 0;
          }
          lastzero = word;
          len++;
        }
        if (len > longest) {
          longest = len;
          zstart = word - longest + 1;
        }
      }
  
      for (word = 0; word < 8; word++) {
        if (longest > 1) {
          // compress contiguous zeros - to produce "::"
          if (parts[word] === 0 && word >= zstart && word < (zstart + longest) ) {
            if (word === zstart) {
              str += ":";
              if (zstart === 0) str += ":"; //leading zeros case
            }
            continue;
          }
        }
        // converts 16-bit words from big-endian to little-endian before converting to hex string
        str += Number(_ntohs(parts[word] & 0xffff)).toString(16);
        str += word < 7 ? ":" : "";
      }
      return str;
    }
  
  function __write_sockaddr(sa, family, addr, port) {
      switch (family) {
        case 2:
          addr = __inet_pton4_raw(addr);
          HEAP16[((sa)>>1)]=family;
          HEAP32[(((sa)+(4))>>2)]=addr;
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          break;
        case 10:
          addr = __inet_pton6_raw(addr);
          HEAP32[((sa)>>2)]=family;
          HEAP32[(((sa)+(8))>>2)]=addr[0];
          HEAP32[(((sa)+(12))>>2)]=addr[1];
          HEAP32[(((sa)+(16))>>2)]=addr[2];
          HEAP32[(((sa)+(20))>>2)]=addr[3];
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          HEAP32[(((sa)+(4))>>2)]=0;
          HEAP32[(((sa)+(24))>>2)]=0;
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
      // kind of lame, but let's match _read_sockaddr's interface
      return {};
    }function _getaddrinfo(node, service, hint, out) {
      // Note getaddrinfo currently only returns a single addrinfo with ai_next defaulting to NULL. When NULL
      // hints are specified or ai_family set to AF_UNSPEC or ai_socktype or ai_protocol set to 0 then we
      // really should provide a linked list of suitable addrinfo values.
      var addrs = [];
      var canon = null;
      var addr = 0;
      var port = 0;
      var flags = 0;
      var family = 0;
      var type = 0;
      var proto = 0;
      var ai, last;
  
      function allocaddrinfo(family, type, proto, canon, addr, port) {
        var sa, salen, ai;
        var res;
  
        salen = family === 10 ?
          28 :
          16;
        addr = family === 10 ?
          __inet_ntop6_raw(addr) :
          __inet_ntop4_raw(addr);
        sa = _malloc(salen);
        res = __write_sockaddr(sa, family, addr, port);
        assert(!res.errno);
  
        ai = _malloc(32);
        HEAP32[(((ai)+(4))>>2)]=family;
        HEAP32[(((ai)+(8))>>2)]=type;
        HEAP32[(((ai)+(12))>>2)]=proto;
        if (canon) {
          HEAP32[(((ai)+(24))>>2)]=canon;
        }
        HEAP32[(((ai)+(20))>>2)]=sa;
        if (family === 10) {
          HEAP32[(((ai)+(16))>>2)]=28;
        } else {
          HEAP32[(((ai)+(16))>>2)]=16;
        }
        HEAP32[(((ai)+(28))>>2)]=0;
  
        return ai;
      }
  
      if (hint) {
        flags = HEAP32[((hint)>>2)];
        family = HEAP32[(((hint)+(4))>>2)];
        type = HEAP32[(((hint)+(8))>>2)];
        proto = HEAP32[(((hint)+(12))>>2)];
      }
      if (type && !proto) {
        proto = type === 2 ? 17 : 6;
      }
      if (!type && proto) {
        type = proto === 17 ? 2 : 1;
      }
  
      // If type or proto are set to zero in hints we should really be returning multiple addrinfo values, but for
      // now default to a TCP STREAM socket so we can at least return a sensible addrinfo given NULL hints.
      if (proto === 0) {
        proto = 6;
      }
      if (type === 0) {
        type = 1;
      }
  
      if (!node && !service) {
        return -2;
      }
      if (flags & ~(1|2|4|
          1024|8|16|32)) {
        return -1;
      }
      if (hint !== 0 && (HEAP32[((hint)>>2)] & 2) && !node) {
        return -1;
      }
      if (flags & 32) {
        // TODO
        return -2;
      }
      if (type !== 0 && type !== 1 && type !== 2) {
        return -7;
      }
      if (family !== 0 && family !== 2 && family !== 10) {
        return -6;
      }
  
      if (service) {
        service = Pointer_stringify(service);
        port = parseInt(service, 10);
  
        if (isNaN(port)) {
          if (flags & 1024) {
            return -2;
          }
          // TODO support resolving well-known service names from:
          // http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
          return -8;
        }
      }
  
      if (!node) {
        if (family === 0) {
          family = 2;
        }
        if ((flags & 1) === 0) {
          if (family === 2) {
            addr = _htonl(2130706433);
          } else {
            addr = [0, 0, 0, 1];
          }
        }
        ai = allocaddrinfo(family, type, proto, null, addr, port);
        HEAP32[((out)>>2)]=ai;
        return 0;
      }
  
      //
      // try as a numeric address
      //
      node = Pointer_stringify(node);
      addr = __inet_pton4_raw(node);
      if (addr !== null) {
        // incoming node is a valid ipv4 address
        if (family === 0 || family === 2) {
          family = 2;
        }
        else if (family === 10 && (flags & 8)) {
          addr = [0, 0, _htonl(0xffff), addr];
          family = 10;
        } else {
          return -2;
        }
      } else {
        addr = __inet_pton6_raw(node);
        if (addr !== null) {
          // incoming node is a valid ipv6 address
          if (family === 0 || family === 10) {
            family = 10;
          } else {
            return -2;
          }
        }
      }
      if (addr != null) {
        ai = allocaddrinfo(family, type, proto, node, addr, port);
        HEAP32[((out)>>2)]=ai;
        return 0;
      }
      if (flags & 4) {
        return -2;
      }
  
      //
      // try as a hostname
      //
      // resolve the hostname to a temporary fake address
      node = DNS.lookup_name(node);
      addr = __inet_pton4_raw(node);
      if (family === 0) {
        family = 2;
      } else if (family === 10) {
        addr = [0, 0, _htonl(0xffff), addr];
      }
      ai = allocaddrinfo(family, type, proto, null, addr, port);
      HEAP32[((out)>>2)]=ai;
      return 0;
    }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function _pthread_mutex_lock() {}

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall194(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ftruncate64
      var fd = SYSCALLS.get(), zero = SYSCALLS.getZero(), length = SYSCALLS.get64();
      FS.ftruncate(fd, length);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall197(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_fstat64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, stream.path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _pthread_mutex_init() {}

  function _pthread_cond_timedwait() {
      return 0;
    }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Ashr"] = _bitshift64Ashr;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function ___syscall38(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rename
      var old_path = SYSCALLS.getStr(), new_path = SYSCALLS.getStr();
      FS.rename(old_path, new_path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall33(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // access
      var path = SYSCALLS.getStr(), amode = SYSCALLS.get();
      return SYSCALLS.doAccess(path, amode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var GAI_ERRNO_MESSAGES={};function _gai_strerror(val) {
      var buflen = 256;
  
      // On first call to gai_strerror we initialise the buffer and populate the error messages.
      if (!_gai_strerror.buffer) {
          _gai_strerror.buffer = _malloc(buflen);
  
          GAI_ERRNO_MESSAGES['0'] = 'Success';
          GAI_ERRNO_MESSAGES['' + -1] = 'Invalid value for \'ai_flags\' field';
          GAI_ERRNO_MESSAGES['' + -2] = 'NAME or SERVICE is unknown';
          GAI_ERRNO_MESSAGES['' + -3] = 'Temporary failure in name resolution';
          GAI_ERRNO_MESSAGES['' + -4] = 'Non-recoverable failure in name res';
          GAI_ERRNO_MESSAGES['' + -6] = '\'ai_family\' not supported';
          GAI_ERRNO_MESSAGES['' + -7] = '\'ai_socktype\' not supported';
          GAI_ERRNO_MESSAGES['' + -8] = 'SERVICE not supported for \'ai_socktype\'';
          GAI_ERRNO_MESSAGES['' + -10] = 'Memory allocation failure';
          GAI_ERRNO_MESSAGES['' + -11] = 'System error returned in \'errno\'';
          GAI_ERRNO_MESSAGES['' + -12] = 'Argument buffer overflow';
      }
  
      var msg = 'Unknown error';
  
      if (val in GAI_ERRNO_MESSAGES) {
        if (GAI_ERRNO_MESSAGES[val].length > buflen - 1) {
          msg = 'Message too long'; // EMSGSIZE message. This should never occur given the GAI_ERRNO_MESSAGES above. 
        } else {
          msg = GAI_ERRNO_MESSAGES[val];
        }
      }
  
      writeAsciiToMemory(msg, _gai_strerror.buffer);
      return _gai_strerror.buffer;
    }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_cond_broadcast() {
      return 0;
    }

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_mutex_unlock() {}

  function _pthread_cond_signal() {}

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

   
  Module["_memmove"] = _memmove;

  function ___gxx_personality_v0() {
    }

  function _pthread_mutex_destroy() {}

  function _pthread_cond_wait() {
      return 0;
    }

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  var PROCINFO={ppid:1,pid:42,sid:42,pgid:42};function ___syscall20(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpid
      return PROCINFO.pid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_memset"] = _memset;

  function ___syscall39(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mkdir
      var path = SYSCALLS.getStr(), mode = SYSCALLS.get();
      return SYSCALLS.doMkdir(path, mode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }


  function _abort() {
      Module['abort']();
    }

  function _pthread_cond_destroy() {}

  function ___lock() {}

  function ___unlock() {}

  var _llvm_fabs_f64=Math_abs;

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return ((Date.now() - _clock.start) * (1000000 / 1000))|0;
    }

  function _llvm_bswap_i64(l, h) {
      var retl = _llvm_bswap_i32(h)>>>0;
      var reth = _llvm_bswap_i32(l)>>>0;
      return ((asm["setTempRet0"](reth),retl)|0);
    }

  var _emscripten_asm_const_int=true;

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function ___syscall15(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // chmod
      var path = SYSCALLS.getStr(), mode = SYSCALLS.get();
      FS.chmod(path, mode);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlink
      var path = SYSCALLS.getStr();
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _pthread_join() {}

  function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall4(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // write
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var SOCKFS=undefined;
  
  function __read_sockaddr(sa, salen) {
      // family / port offsets are common to both sockaddr_in and sockaddr_in6
      var family = HEAP16[((sa)>>1)];
      var port = _ntohs(HEAP16[(((sa)+(2))>>1)]);
      var addr;
  
      switch (family) {
        case 2:
          if (salen !== 16) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = HEAP32[(((sa)+(4))>>2)];
          addr = __inet_ntop4_raw(addr);
          break;
        case 10:
          if (salen !== 28) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = [
            HEAP32[(((sa)+(8))>>2)],
            HEAP32[(((sa)+(12))>>2)],
            HEAP32[(((sa)+(16))>>2)],
            HEAP32[(((sa)+(20))>>2)]
          ];
          addr = __inet_ntop6_raw(addr);
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
  
      return { family: family, addr: addr, port: port };
    }function ___syscall102(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // socketcall
      var call = SYSCALLS.get(), socketvararg = SYSCALLS.get();
      // socketcalls pass the rest of the arguments in a struct
      SYSCALLS.varargs = socketvararg;
      switch (call) {
        case 1: { // socket
          var domain = SYSCALLS.get(), type = SYSCALLS.get(), protocol = SYSCALLS.get();
          var sock = SOCKFS.createSocket(domain, type, protocol);
          assert(sock.stream.fd < 64); // XXX ? select() assumes socket fd values are in 0..63
          return sock.stream.fd;
        }
        case 2: { // bind
          var sock = SYSCALLS.getSocketFromFD(), info = SYSCALLS.getSocketAddress();
          sock.sock_ops.bind(sock, info.addr, info.port);
          return 0;
        }
        case 3: { // connect
          var sock = SYSCALLS.getSocketFromFD(), info = SYSCALLS.getSocketAddress();
          sock.sock_ops.connect(sock, info.addr, info.port);
          return 0;
        }
        case 4: { // listen
          var sock = SYSCALLS.getSocketFromFD(), backlog = SYSCALLS.get();
          sock.sock_ops.listen(sock, backlog);
          return 0;
        }
        case 5: { // accept
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var newsock = sock.sock_ops.accept(sock);
          if (addr) {
            var res = __write_sockaddr(addr, newsock.family, DNS.lookup_name(newsock.daddr), newsock.dport);
            assert(!res.errno);
          }
          return newsock.stream.fd;
        }
        case 6: { // getsockname
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          // TODO: sock.saddr should never be undefined, see TODO in websocket_sock_ops.getname
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.saddr || '0.0.0.0'), sock.sport);
          assert(!res.errno);
          return 0;
        }
        case 7: { // getpeername
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          if (!sock.daddr) {
            return -ERRNO_CODES.ENOTCONN; // The socket is not connected.
          }
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.daddr), sock.dport);
          assert(!res.errno);
          return 0;
        }
        case 11: { // sendto
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), length = SYSCALLS.get(), flags = SYSCALLS.get(), dest = SYSCALLS.getSocketAddress(true);
          if (!dest) {
            // send, no address provided
            return FS.write(sock.stream, HEAP8,message, length);
          } else {
            // sendto an address
            return sock.sock_ops.sendmsg(sock, HEAP8,message, length, dest.addr, dest.port);
          }
        }
        case 12: { // recvfrom
          var sock = SYSCALLS.getSocketFromFD(), buf = SYSCALLS.get(), len = SYSCALLS.get(), flags = SYSCALLS.get(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var msg = sock.sock_ops.recvmsg(sock, len);
          if (!msg) return 0; // socket is closed
          if (addr) {
            var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          HEAPU8.set(msg.buffer, buf);
          return msg.buffer.byteLength;
        }
        case 14: { // setsockopt
          return -ERRNO_CODES.ENOPROTOOPT; // The option is unknown at the level indicated.
        }
        case 15: { // getsockopt
          var sock = SYSCALLS.getSocketFromFD(), level = SYSCALLS.get(), optname = SYSCALLS.get(), optval = SYSCALLS.get(), optlen = SYSCALLS.get();
          // Minimal getsockopt aimed at resolving https://github.com/kripken/emscripten/issues/2211
          // so only supports SOL_SOCKET with SO_ERROR.
          if (level === 1) {
            if (optname === 4) {
              HEAP32[((optval)>>2)]=sock.error;
              HEAP32[((optlen)>>2)]=4;
              sock.error = null; // Clear the error (The SO_ERROR option obtains and then clears this field).
              return 0;
            }
          }
          return -ERRNO_CODES.ENOPROTOOPT; // The option is unknown at the level indicated.
        }
        case 16: { // sendmsg
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // read the address and port to send to
          var addr, port;
          var name = HEAP32[((message)>>2)];
          var namelen = HEAP32[(((message)+(4))>>2)];
          if (name) {
            var info = __read_sockaddr(name, namelen);
            if (info.errno) return -info.errno;
            port = info.port;
            addr = DNS.lookup_addr(info.addr) || info.addr;
          }
          // concatenate scatter-gather arrays into one message buffer
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          var view = new Uint8Array(total);
          var offset = 0;
          for (var i = 0; i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            for (var j = 0; j < iovlen; j++) {  
              view[offset++] = HEAP8[(((iovbase)+(j))>>0)];
            }
          }
          // write the buffer
          return sock.sock_ops.sendmsg(sock, view, 0, total, addr, port);
        }
        case 17: { // recvmsg
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // get the total amount of data we can read across all arrays
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          // try to read total data
          var msg = sock.sock_ops.recvmsg(sock, total);
          if (!msg) return 0; // socket is closed
  
          // TODO honor flags:
          // MSG_OOB
          // Requests out-of-band data. The significance and semantics of out-of-band data are protocol-specific.
          // MSG_PEEK
          // Peeks at the incoming message.
          // MSG_WAITALL
          // Requests that the function block until the full amount of data requested can be returned. The function may return a smaller amount of data if a signal is caught, if the connection is terminated, if MSG_PEEK was specified, or if an error is pending for the socket.
  
          // write the source address out
          var name = HEAP32[((message)>>2)];
          if (name) {
            var res = __write_sockaddr(name, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          // write the buffer out to the scatter-gather arrays
          var bytesRead = 0;
          var bytesRemaining = msg.buffer.byteLength;
          for (var i = 0; bytesRemaining > 0 && i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            if (!iovlen) {
              continue;
            }
            var length = Math.min(iovlen, bytesRemaining);
            var buf = msg.buffer.subarray(bytesRead, bytesRead + length);
            HEAPU8.set(buf, iovbase + bytesRead);
            bytesRead += length;
            bytesRemaining -= length;
          }
  
          // TODO set msghdr.msg_flags
          // MSG_EOR
          // End of record was received (if supported by the protocol).
          // MSG_OOB
          // Out-of-band data was received.
          // MSG_TRUNC
          // Normal data was truncated.
          // MSG_CTRUNC
  
          return bytesRead;
        }
        default: abort('unsupported socketcall syscall ' + call);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }

  function ___syscall148(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fdatasync
      var stream = SYSCALLS.getStreamFromFD();
      return 0; // we can't do anything synchronously; the in-memory FS is already synced to
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function ___syscall142(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // newselect
      // readfds are supported,
      // writefds checks socket open status
      // exceptfds not supported
      // timeout is always 0 - fully async
      var nfds = SYSCALLS.get(), readfds = SYSCALLS.get(), writefds = SYSCALLS.get(), exceptfds = SYSCALLS.get(), timeout = SYSCALLS.get();
  
      assert(nfds <= 64, 'nfds must be less than or equal to 64');  // fd sets have 64 bits // TODO: this could be 1024 based on current musl headers
      assert(!exceptfds, 'exceptfds not supported');
  
      var total = 0;
      
      var srcReadLow = (readfds ? HEAP32[((readfds)>>2)] : 0),
          srcReadHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0);
      var srcWriteLow = (writefds ? HEAP32[((writefds)>>2)] : 0),
          srcWriteHigh = (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0);
      var srcExceptLow = (exceptfds ? HEAP32[((exceptfds)>>2)] : 0),
          srcExceptHigh = (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      var dstReadLow = 0,
          dstReadHigh = 0;
      var dstWriteLow = 0,
          dstWriteHigh = 0;
      var dstExceptLow = 0,
          dstExceptHigh = 0;
  
      var allLow = (readfds ? HEAP32[((readfds)>>2)] : 0) |
                   (writefds ? HEAP32[((writefds)>>2)] : 0) |
                   (exceptfds ? HEAP32[((exceptfds)>>2)] : 0);
      var allHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0) |
                    (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0) |
                    (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      function check(fd, low, high, val) {
        return (fd < 32 ? (low & val) : (high & val));
      }
  
      for (var fd = 0; fd < nfds; fd++) {
        var mask = 1 << (fd % 32);
        if (!(check(fd, allLow, allHigh, mask))) {
          continue;  // index isn't in the set
        }
  
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  
        var flags = SYSCALLS.DEFAULT_POLLMASK;
  
        if (stream.stream_ops.poll) {
          flags = stream.stream_ops.poll(stream);
        }
  
        if ((flags & 1) && check(fd, srcReadLow, srcReadHigh, mask)) {
          fd < 32 ? (dstReadLow = dstReadLow | mask) : (dstReadHigh = dstReadHigh | mask);
          total++;
        }
        if ((flags & 4) && check(fd, srcWriteLow, srcWriteHigh, mask)) {
          fd < 32 ? (dstWriteLow = dstWriteLow | mask) : (dstWriteHigh = dstWriteHigh | mask);
          total++;
        }
        if ((flags & 2) && check(fd, srcExceptLow, srcExceptHigh, mask)) {
          fd < 32 ? (dstExceptLow = dstExceptLow | mask) : (dstExceptHigh = dstExceptHigh | mask);
          total++;
        }
      }
  
      if (readfds) {
        HEAP32[((readfds)>>2)]=dstReadLow;
        HEAP32[(((readfds)+(4))>>2)]=dstReadHigh;
      }
      if (writefds) {
        HEAP32[((writefds)>>2)]=dstWriteLow;
        HEAP32[(((writefds)+(4))>>2)]=dstWriteHigh;
      }
      if (exceptfds) {
        HEAP32[((exceptfds)>>2)]=dstExceptLow;
        HEAP32[(((exceptfds)+(4))>>2)]=dstExceptHigh;
      }
      
      return total;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffer) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var ___dso_handle=STATICTOP; STATICTOP += 16;;
___buildEnvironment(ENV);;
/* flush anything remaining in the buffer during shutdown */ __ATEXIT__.push(function() { var fflush = Module["_fflush"]; if (fflush) fflush(0); var printChar = ___syscall146.printChar; if (!printChar) return; var buffers = ___syscall146.buffers; if (buffers[1].length) printChar(1, 10); if (buffers[2].length) printChar(2, 10); });;
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall221": ___syscall221, "_pthread_cond_wait": _pthread_cond_wait, "__inet_pton4_raw": __inet_pton4_raw, "_pthread_join": _pthread_join, "___syscall102": ___syscall102, "_llvm_bswap_i64": _llvm_bswap_i64, "__inet_ntop4_raw": __inet_ntop4_raw, "_llvm_fabs_f64": _llvm_fabs_f64, "_pthread_cleanup_push": _pthread_cleanup_push, "___gxx_personality_v0": ___gxx_personality_v0, "__inet_pton6_raw": __inet_pton6_raw, "___syscall20": ___syscall20, "__read_sockaddr": __read_sockaddr, "___assert_fail": ___assert_fail, "_usleep": _usleep, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___buildEnvironment": ___buildEnvironment, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_gai_strerror": _gai_strerror, "_pthread_cond_destroy": _pthread_cond_destroy, "___setErrNo": ___setErrNo, "_sbrk": _sbrk, "___syscall197": ___syscall197, "___cxa_allocate_exception": ___cxa_allocate_exception, "___syscall195": ___syscall195, "___syscall194": ___syscall194, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_sysconf": _sysconf, "_clock": _clock, "_pthread_mutex_init": _pthread_mutex_init, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_pthread_cond_signal": _pthread_cond_signal, "_exit": _exit, "_pthread_self": _pthread_self, "_pthread_mutex_destroy": _pthread_mutex_destroy, "_pthread_mutex_unlock": _pthread_mutex_unlock, "__inet_ntop6_raw": __inet_ntop6_raw, "_getenv": _getenv, "___syscall33": ___syscall33, "___syscall54": ___syscall54, "___unlock": ___unlock, "_getaddrinfo": _getaddrinfo, "___syscall15": ___syscall15, "__write_sockaddr": __write_sockaddr, "___syscall39": ___syscall39, "___syscall38": ___syscall38, "___syscall10": ___syscall10, "___cxa_atexit": ___cxa_atexit, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "___syscall3": ___syscall3, "__exit": __exit, "_pthread_cond_broadcast": _pthread_cond_broadcast, "___lock": ___lock, "_pthread_cond_timedwait": _pthread_cond_timedwait, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "___syscall4": ___syscall4, "___syscall148": ___syscall148, "_time": _time, "_pthread_mutex_lock": _pthread_mutex_lock, "_gettimeofday": _gettimeofday, "_atexit": _atexit, "___syscall140": ___syscall140, "_abort": _abort, "___syscall142": ___syscall142, "___cxa_throw": ___cxa_throw, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall221=env.___syscall221;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var __inet_pton4_raw=env.__inet_pton4_raw;
  var _pthread_join=env._pthread_join;
  var ___syscall102=env.___syscall102;
  var _llvm_bswap_i64=env._llvm_bswap_i64;
  var __inet_ntop4_raw=env.__inet_ntop4_raw;
  var _llvm_fabs_f64=env._llvm_fabs_f64;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var __inet_pton6_raw=env.__inet_pton6_raw;
  var ___syscall20=env.___syscall20;
  var __read_sockaddr=env.__read_sockaddr;
  var ___assert_fail=env.___assert_fail;
  var _usleep=env._usleep;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___buildEnvironment=env.___buildEnvironment;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _gai_strerror=env._gai_strerror;
  var _pthread_cond_destroy=env._pthread_cond_destroy;
  var ___setErrNo=env.___setErrNo;
  var _sbrk=env._sbrk;
  var ___syscall197=env.___syscall197;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___syscall195=env.___syscall195;
  var ___syscall194=env.___syscall194;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _sysconf=env._sysconf;
  var _clock=env._clock;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _exit=env._exit;
  var _pthread_self=env._pthread_self;
  var _pthread_mutex_destroy=env._pthread_mutex_destroy;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var __inet_ntop6_raw=env.__inet_ntop6_raw;
  var _getenv=env._getenv;
  var ___syscall33=env.___syscall33;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _getaddrinfo=env._getaddrinfo;
  var ___syscall15=env.___syscall15;
  var __write_sockaddr=env.__write_sockaddr;
  var ___syscall39=env.___syscall39;
  var ___syscall38=env.___syscall38;
  var ___syscall10=env.___syscall10;
  var ___cxa_atexit=env.___cxa_atexit;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var ___syscall3=env.___syscall3;
  var __exit=env.__exit;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var ___lock=env.___lock;
  var _pthread_cond_timedwait=env._pthread_cond_timedwait;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var ___syscall4=env.___syscall4;
  var ___syscall148=env.___syscall148;
  var _time=env._time;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _gettimeofday=env._gettimeofday;
  var _atexit=env._atexit;
  var ___syscall140=env.___syscall140;
  var _abort=env._abort;
  var ___syscall142=env.___syscall142;
  var ___cxa_throw=env.___cxa_throw;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZNSt3__13mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($this,$1);
 return;
}
function _bgzf_open_js($fid) {
 $fid = $fid|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$0$i$i$i = 0, $$0$i$i$ph = 0, $$0$i$i2 = 0, $$0$i1$i = 0, $$0$i1$i$i = 0, $$0$i19$i$i = 0, $$0$i38$i$i = 0, $$0$i6$i = 0, $$0$i70$i = 0, $$0$lcssa$i$i$i = 0, $$0$lcssa42$i$i23$i = 0, $$01$i$i = 0, $$01$i$i$in = 0, $$01$i$i$in$ph = 0, $$01$lcssa$i$i = 0, $$014$i$i = 0, $$02$lcssa$i$i = 0;
 var $$02$lcssa$i$i$i = 0, $$02$lcssa$i25$i$i = 0, $$02$lcssa$i57$i = 0, $$02$lcssa$i6$i$i = 0, $$0211$i$i = 0, $$0211$i$i$i = 0, $$0211$i22$i$i = 0, $$0211$i3$i$i = 0, $$0211$i54$i = 0, $$03$i$i$i = 0, $$03$i10$i$i = 0, $$03$i17$i$i = 0, $$03$i24$i$i = 0, $$03$i3$i$i = 0, $$03$i31$i$i = 0, $$03$i44$i$i = 0, $$03$i51$i$i = 0, $$03$i58$i$i = 0, $$03$i65$i$i = 0, $$03$i72$i$i = 0;
 var $$03$i79$i$i = 0, $$03$i86$i$i = 0, $$03$i93$i$i = 0, $$031$i$i$i = 0, $$031$i$i9$i = 0, $$04$lcssa$i$i$i = 0, $$04$lcssa43$i$i22$i = 0, $$0430$i$i$i = 0, $$0430$i$i10$i = 0, $$06$lcssa$i$i$i = 0, $$06$lcssa44$i$i21$i = 0, $$0629$i$i$i = 0, $$0629$i$i11$i = 0, $$1$i$i$i = 0, $$1$i$i3 = 0, $$1$i15$i$i = 0, $$1$i34$i$i = 0, $$1$i66$i = 0, $$1$lcssa$i$i = 0, $$1$lcssa$i$i$i = 0;
 var $$1$lcssa$i$i36$i = 0, $$117$i$i$i = 0, $$117$i$i28$i = 0, $$15$ph$i$i$i = 0, $$1511$i$i$i = 0, $$1511$i$i44$i = 0, $$17$ph$i$i$i = 0, $$1710$i$i$i = 0, $$1710$i$i45$i = 0, $$2$ph$i$i$i = 0, $$212$i$i$i = 0, $$212$i$i43$i = 0, $$28$i$i$i = 0, $$28$i$i50$i = 0, $$3$i$i$i = 0, $$3$i$i51$i = 0, $$lcssa$i$i$i = 0, $$n$0$i$i$i = 0, $$n$0$i$i$i$i = 0, $$n$0$i98$i$i = 0;
 var $$off = 0, $$pn$i$i = 0, $$pn15$i$i = 0, $$pre = 0, $$pre$i$i = 0, $$pre$phi150Z2D = 0, $$pre$phiZ2D = 0, $$pre142 = 0, $$pre143 = 0, $$pre144 = 0, $$pre145 = 0, $$pre146 = 0, $$pre147 = 0, $$pre148 = 0, $$pre152 = 0, $$sroa$0$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer$i$i$i = 0, $fp$0$i$i = 0, $l$04$i$i$i = 0, $l$04$i16$i$i = 0, $l$04$i2$i$i = 0, $l$04$i23$i$i = 0, $l$04$i30$i$i = 0, $l$04$i43$i$i = 0, $l$04$i50$i$i = 0, $l$04$i57$i$i = 0, $l$04$i64$i$i = 0, $l$04$i71$i$i = 0, $l$04$i78$i$i = 0, $l$04$i85$i$i = 0, $l$04$i9$i$i = 0;
 var $l$04$i92$i$i = 0, $len$0$i$i19 = 0, $n$0$i$i$i = 0, $n$0$i$i$i$i = 0, $n$0$i98$i$i = 0, $n$1$i$i$i$i = 0, $n$1$i$i$i13 = 0, $n$1$i99$i$i = 0, $not$ = 0, $not$4 = 0, $not$5 = 0, $not$6 = 0, $not$7 = 0, $or$cond$i$i$i = 0, $or$cond28$i$i$i = 0, $phitmp$i$i = 0, $phitmp$i$i$ = 0, $r$05$i$i$i = 0, $r$05$i1$i$i = 0, $r$05$i15$i$i = 0;
 var $r$05$i22$i$i = 0, $r$05$i29$i$i = 0, $r$05$i42$i$i = 0, $r$05$i49$i$i = 0, $r$05$i56$i$i = 0, $r$05$i63$i$i = 0, $r$05$i70$i$i = 0, $r$05$i77$i$i = 0, $r$05$i8$i$i = 0, $r$05$i84$i$i = 0, $r$05$i91$i$i = 0, $s$0$i$i$i = 0, $s$0$i36$i$i = 0, $s$0$pn$i$i$i = 0, $s$0$pn$i38$i$i = 0, $s$1$i$i$i = 0, $s$1$i40$i$i = 0, $s$i$i = 0, $simple_mode$i = 0, $v$0$i$i$i = 0;
 var $v$0$i37$i$i = 0, $v$1$i$i$i = 0, $v$1$i39$i$i = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $w$0$i$i = 0, $w$0$lcssa$i$i = 0, $w$0$lcssa$i$i$i = 0, $w$0$lcssa$i13$i$i = 0, $w$0$lcssa$i32$i$i = 0, $w$0$lcssa$i64$i = 0, $w$08$i$i = 0, $w$08$i$i$i = 0, $w$08$i28$i$i = 0, $w$08$i60$i = 0, $w$08$i9$i$i = 0;
 var $wd$0$lcssa$i$i$i = 0, $wd$0$lcssa$i$i35$i = 0, $wd$018$i$i$i = 0, $wd$018$i$i27$i = 0, $ws$0$lcssa$i$i$i = 0, $ws$0$lcssa$i$i34$i = 0, $ws$019$i$i$i = 0, $ws$019$i$i26$i = 0, $zs$i$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 736|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $buffer$i$i$i = sp + 216|0;
 $zs$i$i$i = sp + 32|0;
 $s$i$i = sp + 189|0;
 $simple_mode$i = sp + 88|0;
 $0 = sp + 24|0;
 HEAP32[$0>>2] = $fid;
 $$0$i$i$ph = (27036);$$01$i$i$in$ph = (27036);
 L1: while(1) {
  $$01$i$i$in = $$01$i$i$in$ph;
  while(1) {
   $$01$i$i = HEAP32[$$01$i$i$in>>2]|0;
   $1 = ($$01$i$i|0)==(0|0);
   if ($1) {
    break L1;
   }
   $2 = ((($$01$i$i)) + 16|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)<($fid|0);
   if (!($4)) {
    break;
   }
   $5 = ((($$01$i$i)) + 4|0);
   $$01$i$i$in = $5;
  }
  $$0$i$i$ph = $$01$i$i;$$01$i$i$in$ph = $$01$i$i;
 }
 $6 = ($$0$i$i$ph|0)==((27036)|0);
 if ($6) {
  label = 9;
 } else {
  $7 = $$0$i$i$ph;
  $8 = ((($$0$i$i$ph)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)>($fid|0);
  if ($10) {
   label = 9;
  } else {
   $$sroa$0$0 = $7;
  }
 }
 if ((label|0) == 9) {
  $$sroa$0$0 = ((27036));
 }
 $11 = $$sroa$0$0;
 $12 = ($11|0)==((27036)|0);
 if (!($12)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (_hfile_init(36,21885,32768)|0);
 $14 = ((($13)) + 16|0);
 HEAP32[$14>>2] = 120;
 $15 = ((($13)) + 32|0);
 HEAP32[$15>>2] = $fid;
 $16 = _emscripten_asm_const_ii(0, ($fid|0))|0;
 $17 = $16;
 $18 = (_malloc(64)|0);
 $19 = ($18|0)==(0|0);
 L17: do {
  if ($19) {
   $24 = ((($simple_mode$i)) + 100|0);
   HEAP8[$24>>0] = 0;
   HEAP32[$vararg_buffer>>2] = 14192;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $17;
   _printf(14160,$vararg_buffer);
   $$0$i = 0;
  } else {
   $20 = ((($18)) + -4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $21 & 3;
   $23 = ($22|0)==(0);
   if (!($23)) {
    dest=$18; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   }
   $25 = ((($simple_mode$i)) + 100|0);
   HEAP8[$25>>0] = 0;
   $26 = $16 & 3;
   $27 = ($26|0)==(0);
   L23: do {
    if ($27) {
     $$01$lcssa$i$i = $17;
     label = 18;
    } else {
     $$014$i$i = $17;$608 = $16;
     while(1) {
      $28 = HEAP8[$$014$i$i>>0]|0;
      $29 = ($28<<24>>24)==(0);
      if ($29) {
       $$pn$i$i = $608;
       break L23;
      }
      $30 = ((($$014$i$i)) + 1|0);
      $31 = $30;
      $32 = $31 & 3;
      $33 = ($32|0)==(0);
      if ($33) {
       $$01$lcssa$i$i = $30;
       label = 18;
       break;
      } else {
       $$014$i$i = $30;$608 = $31;
      }
     }
    }
   } while(0);
   if ((label|0) == 18) {
    $w$0$i$i = $$01$lcssa$i$i;
    while(1) {
     $34 = HEAP32[$w$0$i$i>>2]|0;
     $35 = (($34) + -16843009)|0;
     $36 = $34 & -2139062144;
     $37 = $36 ^ -2139062144;
     $38 = $37 & $35;
     $39 = ($38|0)==(0);
     $40 = ((($w$0$i$i)) + 4|0);
     if ($39) {
      $w$0$i$i = $40;
     } else {
      break;
     }
    }
    $41 = $34&255;
    $42 = ($41<<24>>24)==(0);
    if ($42) {
     $$1$lcssa$i$i = $w$0$i$i;
    } else {
     $$pn15$i$i = $w$0$i$i;
     while(1) {
      $43 = ((($$pn15$i$i)) + 1|0);
      $$pre$i$i = HEAP8[$43>>0]|0;
      $44 = ($$pre$i$i<<24>>24)==(0);
      if ($44) {
       $$1$lcssa$i$i = $43;
       break;
      } else {
       $$pn15$i$i = $43;
      }
     }
    }
    $45 = $$1$lcssa$i$i;
    $$pn$i$i = $45;
   }
   $$0$i1$i = (($$pn$i$i) - ($16))|0;
   $46 = (($$0$i1$i) + 1)|0;
   $47 = (_malloc($46)|0);
   $48 = ($47|0)==(0|0);
   if ($48) {
    $$0$i$i2 = 0;
   } else {
    _memcpy(($47|0),($17|0),($46|0))|0;
    $$0$i$i2 = $47;
   }
   $49 = ((($18)) + 28|0);
   HEAP32[$49>>2] = $$0$i$i2;
   $50 = HEAP32[$18>>2]|0;
   $51 = $50 & -5;
   HEAP32[$18>>2] = $51;
   L40: do {
    if (((((15271) & 3)|0)==(0))) {
     $$02$lcssa$i$i = 15271;
     label = 28;
    } else {
     $$0211$i$i = 15271;
     while(1) {
      $52 = HEAP8[$$0211$i$i>>0]|0;
      switch ($52<<24>>24) {
      case 0: case 44:  {
       $$0$i6$i = $$0211$i$i;$80 = $52;
       break L40;
       break;
      }
      default: {
      }
      }
      $53 = ((($$0211$i$i)) + 1|0);
      $54 = $53;
      $55 = $54 & 3;
      $56 = ($55|0)==(0);
      if ($56) {
       $$02$lcssa$i$i = $53;
       label = 28;
       break L40;
      } else {
       $$0211$i$i = $53;
      }
     }
    }
   } while(0);
   L44: do {
    if ((label|0) == 28) {
     $57 = HEAP32[$$02$lcssa$i$i>>2]|0;
     $58 = (($57) + -16843009)|0;
     $59 = $57 & -2139062144;
     $60 = $59 ^ -2139062144;
     $61 = $60 & $58;
     $62 = ($61|0)==(0);
     L46: do {
      if ($62) {
       $64 = $57;$w$08$i$i = $$02$lcssa$i$i;
       while(1) {
        $63 = $64 ^ 741092396;
        $65 = (($63) + -16843009)|0;
        $66 = $64 & -2139062144;
        $67 = $66 ^ -2139062144;
        $68 = $67 & $65;
        $69 = ($68|0)==(0);
        if (!($69)) {
         $w$0$lcssa$i$i = $w$08$i$i;
         break L46;
        }
        $70 = ((($w$08$i$i)) + 4|0);
        $71 = HEAP32[$70>>2]|0;
        $72 = (($71) + -16843009)|0;
        $73 = $71 & -2139062144;
        $74 = $73 ^ -2139062144;
        $75 = $74 & $72;
        $76 = ($75|0)==(0);
        if ($76) {
         $64 = $71;$w$08$i$i = $70;
        } else {
         $w$0$lcssa$i$i = $70;
         break;
        }
       }
      } else {
       $w$0$lcssa$i$i = $$02$lcssa$i$i;
      }
     } while(0);
     $$1$i$i3 = $w$0$lcssa$i$i;
     while(1) {
      $77 = HEAP8[$$1$i$i3>>0]|0;
      $78 = ((($$1$i$i3)) + 1|0);
      switch ($77<<24>>24) {
      case 0: case 44:  {
       $$0$i6$i = $$1$i$i3;$80 = $77;
       break L44;
       break;
      }
      default: {
       $$1$i$i3 = $78;
      }
      }
     }
    }
   } while(0);
   $79 = ($$0$i6$i|0)==(0|0);
   $not$ = ($80<<24>>24)!=(44);
   $81 = $79 | $not$;
   if ($81) {
    $119 = $simple_mode$i;
    $120 = $119 ^ (15271);
    $121 = $120 & 3;
    $122 = ($121|0)==(0);
    L56: do {
     if ($122) {
      L58: do {
       if (((((15271) & 3)|0)!=(0))) {
        $$031$i$i9$i = 100;$$0430$i$i10$i = 15271;$$0629$i$i11$i = $simple_mode$i;
        while(1) {
         $123 = HEAP8[$$0430$i$i10$i>>0]|0;
         HEAP8[$$0629$i$i11$i>>0] = $123;
         $124 = ($123<<24>>24)==(0);
         if ($124) {
          $$0$lcssa42$i$i23$i = $$031$i$i9$i;$$04$lcssa43$i$i22$i = $$0430$i$i10$i;$$06$lcssa44$i$i21$i = $$0629$i$i11$i;
          break L58;
         }
         $125 = (($$031$i$i9$i) + -1)|0;
         $126 = ((($$0430$i$i10$i)) + 1|0);
         $127 = ((($$0629$i$i11$i)) + 1|0);
         $128 = $126;
         $129 = $128 & 3;
         $130 = ($129|0)==(0);
         if ($130) {
          $$0$lcssa42$i$i23$i = $125;$$04$lcssa43$i$i22$i = $126;$$06$lcssa44$i$i21$i = $127;
          break;
         } else {
          $$031$i$i9$i = $125;$$0430$i$i10$i = $126;$$0629$i$i11$i = $127;
         }
        }
       } else {
        $$0$lcssa42$i$i23$i = 100;$$04$lcssa43$i$i22$i = 15271;$$06$lcssa44$i$i21$i = $simple_mode$i;
       }
      } while(0);
      $131 = HEAP8[$$04$lcssa43$i$i22$i>>0]|0;
      $132 = ($131<<24>>24)==(0);
      if ($132) {
       $$28$i$i50$i = $$06$lcssa44$i$i21$i;$$3$i$i51$i = $$0$lcssa42$i$i23$i;
      } else {
       $133 = ($$0$lcssa42$i$i23$i>>>0)>(3);
       L64: do {
        if ($133) {
         $$117$i$i28$i = $$0$lcssa42$i$i23$i;$wd$018$i$i27$i = $$06$lcssa44$i$i21$i;$ws$019$i$i26$i = $$04$lcssa43$i$i22$i;
         while(1) {
          $134 = HEAP32[$ws$019$i$i26$i>>2]|0;
          $135 = (($134) + -16843009)|0;
          $136 = $134 & -2139062144;
          $137 = $136 ^ -2139062144;
          $138 = $137 & $135;
          $139 = ($138|0)==(0);
          if (!($139)) {
           break;
          }
          HEAP32[$wd$018$i$i27$i>>2] = $134;
          $140 = (($$117$i$i28$i) + -4)|0;
          $141 = ((($ws$019$i$i26$i)) + 4|0);
          $142 = ((($wd$018$i$i27$i)) + 4|0);
          $143 = ($140>>>0)>(3);
          if ($143) {
           $$117$i$i28$i = $140;$wd$018$i$i27$i = $142;$ws$019$i$i26$i = $141;
          } else {
           $$1$lcssa$i$i36$i = $140;$wd$0$lcssa$i$i35$i = $142;$ws$0$lcssa$i$i34$i = $141;
           break L64;
          }
         }
         $$1511$i$i44$i = $ws$019$i$i26$i;$$1710$i$i45$i = $wd$018$i$i27$i;$$212$i$i43$i = $$117$i$i28$i;
         label = 58;
         break L56;
        } else {
         $$1$lcssa$i$i36$i = $$0$lcssa42$i$i23$i;$wd$0$lcssa$i$i35$i = $$06$lcssa44$i$i21$i;$ws$0$lcssa$i$i34$i = $$04$lcssa43$i$i22$i;
        }
       } while(0);
       $144 = ($$1$lcssa$i$i36$i|0)==(0);
       if ($144) {
        $$28$i$i50$i = $wd$0$lcssa$i$i35$i;$$3$i$i51$i = 0;
       } else {
        $$1511$i$i44$i = $ws$0$lcssa$i$i34$i;$$1710$i$i45$i = $wd$0$lcssa$i$i35$i;$$212$i$i43$i = $$1$lcssa$i$i36$i;
        label = 58;
       }
      }
     } else {
      $$1511$i$i44$i = 15271;$$1710$i$i45$i = $simple_mode$i;$$212$i$i43$i = 100;
      label = 58;
     }
    } while(0);
    L70: do {
     if ((label|0) == 58) {
      while(1) {
       label = 0;
       $145 = HEAP8[$$1511$i$i44$i>>0]|0;
       HEAP8[$$1710$i$i45$i>>0] = $145;
       $146 = ($145<<24>>24)==(0);
       if ($146) {
        $$28$i$i50$i = $$1710$i$i45$i;$$3$i$i51$i = $$212$i$i43$i;
        break L70;
       }
       $147 = (($$212$i$i43$i) + -1)|0;
       $148 = ((($$1511$i$i44$i)) + 1|0);
       $149 = ((($$1710$i$i45$i)) + 1|0);
       $150 = ($147|0)==(0);
       if ($150) {
        $$28$i$i50$i = $149;$$3$i$i51$i = 0;
        break;
       } else {
        $$1511$i$i44$i = $148;$$1710$i$i45$i = $149;$$212$i$i43$i = $147;
        label = 58;
       }
      }
     }
    } while(0);
    _memset(($$28$i$i50$i|0),0,($$3$i$i51$i|0))|0;
    $$pre$phiZ2D = $119;
   } else {
    $82 = $$0$i6$i;
    $83 = (($82) - (15271))|0;
    $84 = ($83|0)>(100);
    $$ = $84 ? 100 : $83;
    $85 = $simple_mode$i;
    $86 = $85 ^ (15271);
    $87 = $86 & 3;
    $88 = ($87|0)==(0);
    L76: do {
     if ($88) {
      $89 = ($$|0)!=(0);
      $or$cond28$i$i$i = $89 & ((((15271) & 3)|0)!=(0));
      if ($or$cond28$i$i$i) {
       $$031$i$i$i = $$;$$0430$i$i$i = 15271;$$0629$i$i$i = $simple_mode$i;
       while(1) {
        $90 = HEAP8[$$0430$i$i$i>>0]|0;
        HEAP8[$$0629$i$i$i>>0] = $90;
        $91 = ($90<<24>>24)==(0);
        if ($91) {
         $$28$i$i$i = $$0629$i$i$i;$$3$i$i$i = $$031$i$i$i;
         break L76;
        }
        $92 = (($$031$i$i$i) + -1)|0;
        $93 = ((($$0430$i$i$i)) + 1|0);
        $94 = ((($$0629$i$i$i)) + 1|0);
        $95 = $93;
        $96 = $95 & 3;
        $97 = ($96|0)!=(0);
        $98 = ($92|0)!=(0);
        $or$cond$i$i$i = $98 & $97;
        if ($or$cond$i$i$i) {
         $$031$i$i$i = $92;$$0430$i$i$i = $93;$$0629$i$i$i = $94;
        } else {
         $$0$lcssa$i$i$i = $92;$$04$lcssa$i$i$i = $93;$$06$lcssa$i$i$i = $94;$$lcssa$i$i$i = $98;
         break;
        }
       }
      } else {
       $$0$lcssa$i$i$i = $$;$$04$lcssa$i$i$i = 15271;$$06$lcssa$i$i$i = $simple_mode$i;$$lcssa$i$i$i = $89;
      }
      if ($$lcssa$i$i$i) {
       $$pre = HEAP8[$$04$lcssa$i$i$i>>0]|0;
       $99 = ($$pre<<24>>24)==(0);
       if ($99) {
        $$28$i$i$i = $$06$lcssa$i$i$i;$$3$i$i$i = $$0$lcssa$i$i$i;
       } else {
        $100 = ($$0$lcssa$i$i$i>>>0)>(3);
        L85: do {
         if ($100) {
          $$117$i$i$i = $$0$lcssa$i$i$i;$wd$018$i$i$i = $$06$lcssa$i$i$i;$ws$019$i$i$i = $$04$lcssa$i$i$i;
          while(1) {
           $101 = HEAP32[$ws$019$i$i$i>>2]|0;
           $102 = (($101) + -16843009)|0;
           $103 = $101 & -2139062144;
           $104 = $103 ^ -2139062144;
           $105 = $104 & $102;
           $106 = ($105|0)==(0);
           if (!($106)) {
            $$1$lcssa$i$i$i = $$117$i$i$i;$wd$0$lcssa$i$i$i = $wd$018$i$i$i;$ws$0$lcssa$i$i$i = $ws$019$i$i$i;
            break L85;
           }
           HEAP32[$wd$018$i$i$i>>2] = $101;
           $107 = (($$117$i$i$i) + -4)|0;
           $108 = ((($ws$019$i$i$i)) + 4|0);
           $109 = ((($wd$018$i$i$i)) + 4|0);
           $110 = ($107>>>0)>(3);
           if ($110) {
            $$117$i$i$i = $107;$wd$018$i$i$i = $109;$ws$019$i$i$i = $108;
           } else {
            $$1$lcssa$i$i$i = $107;$wd$0$lcssa$i$i$i = $109;$ws$0$lcssa$i$i$i = $108;
            break;
           }
          }
         } else {
          $$1$lcssa$i$i$i = $$0$lcssa$i$i$i;$wd$0$lcssa$i$i$i = $$06$lcssa$i$i$i;$ws$0$lcssa$i$i$i = $$04$lcssa$i$i$i;
         }
        } while(0);
        $$15$ph$i$i$i = $ws$0$lcssa$i$i$i;$$17$ph$i$i$i = $wd$0$lcssa$i$i$i;$$2$ph$i$i$i = $$1$lcssa$i$i$i;
        label = 44;
       }
      } else {
       $$28$i$i$i = $$06$lcssa$i$i$i;$$3$i$i$i = 0;
      }
     } else {
      $$15$ph$i$i$i = 15271;$$17$ph$i$i$i = $simple_mode$i;$$2$ph$i$i$i = $$;
      label = 44;
     }
    } while(0);
    L90: do {
     if ((label|0) == 44) {
      $111 = ($$2$ph$i$i$i|0)==(0);
      if ($111) {
       $$28$i$i$i = $$17$ph$i$i$i;$$3$i$i$i = 0;
      } else {
       $$1511$i$i$i = $$15$ph$i$i$i;$$1710$i$i$i = $$17$ph$i$i$i;$$212$i$i$i = $$2$ph$i$i$i;
       while(1) {
        $112 = HEAP8[$$1511$i$i$i>>0]|0;
        HEAP8[$$1710$i$i$i>>0] = $112;
        $113 = ($112<<24>>24)==(0);
        if ($113) {
         $$28$i$i$i = $$1710$i$i$i;$$3$i$i$i = $$212$i$i$i;
         break L90;
        }
        $114 = (($$212$i$i$i) + -1)|0;
        $115 = ((($$1511$i$i$i)) + 1|0);
        $116 = ((($$1710$i$i$i)) + 1|0);
        $117 = ($114|0)==(0);
        if ($117) {
         $$28$i$i$i = $116;$$3$i$i$i = 0;
         break;
        } else {
         $$1511$i$i$i = $115;$$1710$i$i$i = $116;$$212$i$i$i = $114;
        }
       }
      }
     }
    } while(0);
    _memset(($$28$i$i$i|0),0,($$3$i$i$i|0))|0;
    $118 = (($simple_mode$i) + ($83)|0);
    HEAP8[$118>>0] = 0;
    $$pre$phiZ2D = $85;
   }
   $151 = $$pre$phiZ2D & 3;
   $152 = ($151|0)==(0);
   L97: do {
    if ($152) {
     $$02$lcssa$i57$i = $simple_mode$i;
     label = 64;
    } else {
     $$0211$i54$i = $simple_mode$i;
     while(1) {
      $153 = HEAP8[$$0211$i54$i>>0]|0;
      switch ($153<<24>>24) {
      case 0: case 114:  {
       $$0$i70$i = $$0211$i54$i;$181 = $153;
       break L97;
       break;
      }
      default: {
      }
      }
      $154 = ((($$0211$i54$i)) + 1|0);
      $155 = $154;
      $156 = $155 & 3;
      $157 = ($156|0)==(0);
      if ($157) {
       $$02$lcssa$i57$i = $154;
       label = 64;
       break L97;
      } else {
       $$0211$i54$i = $154;
      }
     }
    }
   } while(0);
   L101: do {
    if ((label|0) == 64) {
     $158 = HEAP32[$$02$lcssa$i57$i>>2]|0;
     $159 = (($158) + -16843009)|0;
     $160 = $158 & -2139062144;
     $161 = $160 ^ -2139062144;
     $162 = $161 & $159;
     $163 = ($162|0)==(0);
     L103: do {
      if ($163) {
       $165 = $158;$w$08$i60$i = $$02$lcssa$i57$i;
       while(1) {
        $164 = $165 ^ 1920103026;
        $166 = (($164) + -16843009)|0;
        $167 = $165 & -2139062144;
        $168 = $167 ^ -2139062144;
        $169 = $168 & $166;
        $170 = ($169|0)==(0);
        if (!($170)) {
         $w$0$lcssa$i64$i = $w$08$i60$i;
         break L103;
        }
        $171 = ((($w$08$i60$i)) + 4|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = (($172) + -16843009)|0;
        $174 = $172 & -2139062144;
        $175 = $174 ^ -2139062144;
        $176 = $175 & $173;
        $177 = ($176|0)==(0);
        if ($177) {
         $165 = $172;$w$08$i60$i = $171;
        } else {
         $w$0$lcssa$i64$i = $171;
         break;
        }
       }
      } else {
       $w$0$lcssa$i64$i = $$02$lcssa$i57$i;
      }
     } while(0);
     $$1$i66$i = $w$0$lcssa$i64$i;
     while(1) {
      $178 = HEAP8[$$1$i66$i>>0]|0;
      $179 = ((($$1$i66$i)) + 1|0);
      switch ($178<<24>>24) {
      case 0: case 114:  {
       $$0$i70$i = $$1$i66$i;$181 = $178;
       break L101;
       break;
      }
      default: {
       $$1$i66$i = $179;
      }
      }
     }
    }
   } while(0);
   $180 = ($$0$i70$i|0)==(0|0);
   $not$4 = ($181<<24>>24)!=(114);
   $182 = $180 | $not$4;
   do {
    if ($182) {
     label = 234;
    } else {
     $183 = ((($18)) + 40|0);
     $184 = ((($13)) + 8|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ((($13)) + 4|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = (($185) - ($187))|0;
     $n$0$i$i$i = $188;
     while(1) {
      $189 = ($n$0$i$i$i>>>0)<(18);
      if (!($189)) {
       label = 75;
       break;
      }
      $190 = (_refill_buffer($13)|0);
      $191 = ($190|0)<(0);
      if ($191) {
       label = 197;
       break;
      }
      $192 = ($190|0)==(0);
      if ($192) {
       label = 76;
       break;
      }
      $193 = (($n$0$i$i$i) + ($190))|0;
      $n$0$i$i$i = $193;
     }
     if ((label|0) == 75) {
      $194 = ($n$0$i$i$i>>>0)>(18);
      $$n$0$i$i$i = $194 ? 18 : $n$0$i$i$i;
      $195 = HEAP32[$186>>2]|0;
      _memcpy(($s$i$i|0),($195|0),($$n$0$i$i$i|0))|0;
      $n$1$i$i$i13 = $$n$0$i$i$i;
      label = 77;
     }
     else if ((label|0) == 76) {
      $196 = HEAP32[$186>>2]|0;
      _memcpy(($s$i$i|0),($196|0),($n$0$i$i$i|0))|0;
      $197 = ($n$0$i$i$i|0)>(1);
      if ($197) {
       $n$1$i$i$i13 = $n$0$i$i$i;
       label = 77;
      } else {
       label = 102;
      }
     }
     do {
      if ((label|0) == 77) {
       $198 = HEAP8[$s$i$i>>0]|0;
       $199 = ($198<<24>>24)==(31);
       if ($199) {
        $200 = ((($s$i$i)) + 1|0);
        $201 = HEAP8[$200>>0]|0;
        $202 = ($201<<24>>24)==(-117);
        if ($202) {
         $203 = ($n$1$i$i$i13|0)>(17);
         do {
          if ($203) {
           $204 = ((($s$i$i)) + 3|0);
           $205 = HEAP8[$204>>0]|0;
           $206 = $205 & 4;
           $207 = ($206<<24>>24)==(0);
           if ($207) {
            $218 = 1;
           } else {
            $208 = ((($s$i$i)) + 12|0);
            $$03$i$i$i = 4;$l$04$i$i$i = $208;$r$05$i$i$i = 15716;
            while(1) {
             $209 = HEAP8[$l$04$i$i$i>>0]|0;
             $210 = HEAP8[$r$05$i$i$i>>0]|0;
             $211 = ($209<<24>>24)==($210<<24>>24);
             if (!($211)) {
              label = 84;
              break;
             }
             $212 = (($$03$i$i$i) + -1)|0;
             $213 = ((($l$04$i$i$i)) + 1|0);
             $214 = ((($r$05$i$i$i)) + 1|0);
             $215 = ($212|0)==(0);
             if ($215) {
              break;
             } else {
              $$03$i$i$i = $212;$l$04$i$i$i = $213;$r$05$i$i$i = $214;
             }
            }
            if ((label|0) == 84) {
             $216 = ($209<<24>>24)==($210<<24>>24);
             if (!($216)) {
              $218 = 1;
              break;
             }
            }
            $218 = 2;
           }
          } else {
           $218 = 1;
          }
         } while(0);
         $217 = ((($18)) + 52|0);
         HEAP32[$217>>2] = $218;
         $219 = HEAP32[$184>>2]|0;
         $220 = HEAP32[$186>>2]|0;
         $221 = (($219) - ($220))|0;
         $n$0$i$i$i$i = $221;
         while(1) {
          $222 = ($n$0$i$i$i$i>>>0)<(512);
          if (!($222)) {
           label = 91;
           break;
          }
          $223 = (_refill_buffer($13)|0);
          $224 = ($223|0)<(0);
          if ($224) {
           break;
          }
          $225 = ($223|0)==(0);
          if ($225) {
           $n$1$i$i$i$i = $n$0$i$i$i$i;
           label = 92;
           break;
          }
          $226 = (($n$0$i$i$i$i) + ($223))|0;
          $n$0$i$i$i$i = $226;
         }
         if ((label|0) == 91) {
          $227 = ($n$0$i$i$i$i>>>0)>(512);
          $$n$0$i$i$i$i = $227 ? 512 : $n$0$i$i$i$i;
          $n$1$i$i$i$i = $$n$0$i$i$i$i;
          label = 92;
         }
         if ((label|0) == 92) {
          $228 = HEAP32[$186>>2]|0;
          _memcpy(($buffer$i$i$i|0),($228|0),($n$1$i$i$i$i|0))|0;
          $229 = ((($zs$i$i$i)) + 32|0);
          HEAP32[$229>>2] = 0;
          $230 = ((($zs$i$i$i)) + 36|0);
          HEAP32[$230>>2] = 0;
          HEAP32[$zs$i$i$i>>2] = $buffer$i$i$i;
          $231 = ((($zs$i$i$i)) + 4|0);
          HEAP32[$231>>2] = $n$1$i$i$i$i;
          $232 = ((($zs$i$i$i)) + 12|0);
          HEAP32[$232>>2] = $s$i$i;
          $233 = ((($zs$i$i$i)) + 16|0);
          HEAP32[$233>>2] = 21;
          $234 = (_inflateInit2_($zs$i$i$i,31,18486)|0);
          $235 = ($234|0)==(0);
          if ($235) {
           $236 = ((($zs$i$i$i)) + 20|0);
           while(1) {
            $237 = HEAP32[$236>>2]|0;
            $238 = ($237>>>0)<(21);
            if (!($238)) {
             $267 = $237;
             break;
            }
            $239 = (_inflate($zs$i$i$i,2)|0);
            $240 = ($239|0)==(0);
            if (!($240)) {
             label = 96;
             break;
            }
           }
           if ((label|0) == 96) {
            $$pre142 = HEAP32[$236>>2]|0;
            $267 = $$pre142;
           }
           $241 = ((($zs$i$i$i)) + 28|0);
           $242 = HEAP32[$241>>2]|0;
           $243 = ($242|0)==(0|0);
           do {
            if (!($243)) {
             $244 = HEAP32[$230>>2]|0;
             $245 = ($244|0)==(0|0);
             if ($245) {
              break;
             }
             $246 = ((($242)) + 52|0);
             $247 = HEAP32[$246>>2]|0;
             $248 = ($247|0)==(0|0);
             $$pre152 = ((($zs$i$i$i)) + 40|0);
             if ($248) {
              $251 = $244;$252 = $242;
             } else {
              $249 = HEAP32[$$pre152>>2]|0;
              FUNCTION_TABLE_vii[$244 & 127]($249,$247);
              $$pre143 = HEAP32[$230>>2]|0;
              $$pre144 = HEAP32[$241>>2]|0;
              $251 = $$pre143;$252 = $$pre144;
             }
             $250 = HEAP32[$$pre152>>2]|0;
             FUNCTION_TABLE_vii[$251 & 127]($250,$252);
             HEAP32[$241>>2] = 0;
            }
           } while(0);
           $266 = ($267|0)<(0);
           if ($266) {
            label = 197;
            break;
           } else {
            $len$0$i$i19 = $267;
            label = 111;
            break;
           }
          }
         }
         $264 = ((($18)) + 56|0);
         HEAP16[$264>>1] = -1;
         $265 = ((($18)) + 60|0);
         HEAP32[$265>>2] = 0;
         label = 196;
        } else {
         label = 102;
        }
       } else {
        label = 102;
       }
      }
     } while(0);
     L159: do {
      if ((label|0) == 102) {
       $253 = ((($18)) + 52|0);
       HEAP32[$253>>2] = 0;
       $254 = HEAP32[$184>>2]|0;
       $255 = HEAP32[$186>>2]|0;
       $256 = (($254) - ($255))|0;
       $n$0$i98$i$i = $256;
       while(1) {
        $257 = ($n$0$i98$i$i>>>0)<(21);
        if (!($257)) {
         label = 107;
         break;
        }
        $258 = (_refill_buffer($13)|0);
        $259 = ($258|0)<(0);
        if ($259) {
         label = 197;
         break L159;
        }
        $260 = ($258|0)==(0);
        if ($260) {
         $n$1$i99$i$i = $n$0$i98$i$i;
         break;
        }
        $261 = (($n$0$i98$i$i) + ($258))|0;
        $n$0$i98$i$i = $261;
       }
       if ((label|0) == 107) {
        $262 = ($n$0$i98$i$i>>>0)>(21);
        $$n$0$i98$i$i = $262 ? 21 : $n$0$i98$i$i;
        $n$1$i99$i$i = $$n$0$i98$i$i;
       }
       $263 = HEAP32[$186>>2]|0;
       _memcpy(($s$i$i|0),($263|0),($n$1$i99$i$i|0))|0;
       $len$0$i$i19 = $n$1$i99$i$i;
       label = 111;
      }
     } while(0);
     if ((label|0) == 197) {
      label = 234;
      break;
     }
     L171: do {
      if ((label|0) == 111) {
       $268 = ((($18)) + 56|0);
       HEAP16[$268>>1] = -1;
       $269 = ((($18)) + 60|0);
       HEAP32[$269>>2] = 0;
       $270 = ($len$0$i$i19|0)>(5);
       do {
        if ($270) {
         $$03$i93$i$i = 4;$l$04$i92$i$i = $s$i$i;$r$05$i91$i$i = 15721;
         while(1) {
          $271 = HEAP8[$l$04$i92$i$i>>0]|0;
          $272 = HEAP8[$r$05$i91$i$i>>0]|0;
          $273 = ($271<<24>>24)==($272<<24>>24);
          if (!($273)) {
           label = 114;
           break;
          }
          $274 = (($$03$i93$i$i) + -1)|0;
          $275 = ((($l$04$i92$i$i)) + 1|0);
          $276 = ((($r$05$i91$i$i)) + 1|0);
          $277 = ($274|0)==(0);
          if ($277) {
           break;
          } else {
           $$03$i93$i$i = $274;$l$04$i92$i$i = $275;$r$05$i91$i$i = $276;
          }
         }
         if ((label|0) == 114) {
          $278 = ($271<<24>>24)==($272<<24>>24);
          if (!($278)) {
           break;
          }
         }
         $279 = ((($s$i$i)) + 4|0);
         $280 = HEAP8[$279>>0]|0;
         $$off = (($280) + -1)<<24>>24;
         $281 = ($$off&255)<(3);
         if ($281) {
          $282 = ((($s$i$i)) + 5|0);
          $283 = HEAP8[$282>>0]|0;
          $284 = ($283&255)<(2);
          if ($284) {
           HEAP32[$183>>2] = 1;
           $285 = ((($18)) + 44|0);
           HEAP32[$285>>2] = 6;
           $286 = HEAP8[$279>>0]|0;
           $287 = $286&255;
           $288 = ((($18)) + 48|0);
           HEAP16[$288>>1] = $287;
           $289 = HEAP8[$282>>0]|0;
           $290 = $289&255;
           $291 = ((($18)) + 50|0);
           HEAP16[$291>>1] = $290;
           $292 = ((($18)) + 52|0);
           HEAP32[$292>>2] = 3;
           $$pre$phi150Z2D = $285;
           break L171;
          }
         }
        }
       } while(0);
       $293 = ($len$0$i$i19|0)>(3);
       if ($293) {
        $294 = ((($s$i$i)) + 3|0);
        $295 = HEAP8[$294>>0]|0;
        $296 = ($295&255)<(5);
        if ($296) {
         $$03$i86$i$i = 4;$l$04$i85$i$i = $s$i$i;$r$05$i84$i$i = 15911;
         while(1) {
          $297 = HEAP8[$l$04$i85$i$i>>0]|0;
          $298 = HEAP8[$r$05$i84$i$i>>0]|0;
          $299 = ($297<<24>>24)==($298<<24>>24);
          if (!($299)) {
           label = 122;
           break;
          }
          $300 = (($$03$i86$i$i) + -1)|0;
          $301 = ((($l$04$i85$i$i)) + 1|0);
          $302 = ((($r$05$i84$i$i)) + 1|0);
          $303 = ($300|0)==(0);
          if ($303) {
           break;
          } else {
           $$03$i86$i$i = $300;$l$04$i85$i$i = $301;$r$05$i84$i$i = $302;
          }
         }
         if ((label|0) == 122) {
          $304 = ($297<<24>>24)==($298<<24>>24);
          if (!($304)) {
           $$03$i79$i$i = 4;$l$04$i78$i$i = $s$i$i;$r$05$i77$i$i = 15726;
           while(1) {
            $308 = HEAP8[$l$04$i78$i$i>>0]|0;
            $309 = HEAP8[$r$05$i77$i$i>>0]|0;
            $310 = ($308<<24>>24)==($309<<24>>24);
            if (!($310)) {
             label = 126;
             break;
            }
            $311 = (($$03$i79$i$i) + -1)|0;
            $312 = ((($l$04$i78$i$i)) + 1|0);
            $313 = ((($r$05$i77$i$i)) + 1|0);
            $314 = ($311|0)==(0);
            if ($314) {
             break;
            } else {
             $$03$i79$i$i = $311;$l$04$i78$i$i = $312;$r$05$i77$i$i = $313;
            }
           }
           do {
            if ((label|0) == 126) {
             $315 = ($308<<24>>24)==($309<<24>>24);
             if ($315) {
              break;
             } else {
              $$03$i72$i$i = 4;$l$04$i71$i$i = $s$i$i;$r$05$i70$i$i = 15731;
             }
             while(1) {
              $319 = HEAP8[$l$04$i71$i$i>>0]|0;
              $320 = HEAP8[$r$05$i70$i$i>>0]|0;
              $321 = ($319<<24>>24)==($320<<24>>24);
              if (!($321)) {
               label = 130;
               break;
              }
              $322 = (($$03$i72$i$i) + -1)|0;
              $323 = ((($l$04$i71$i$i)) + 1|0);
              $324 = ((($r$05$i70$i$i)) + 1|0);
              $325 = ($322|0)==(0);
              if ($325) {
               break;
              } else {
               $$03$i72$i$i = $322;$l$04$i71$i$i = $323;$r$05$i70$i$i = $324;
              }
             }
             do {
              if ((label|0) == 130) {
               $326 = ($319<<24>>24)==($320<<24>>24);
               if ($326) {
                break;
               } else {
                $$03$i65$i$i = 4;$l$04$i64$i$i = $s$i$i;$r$05$i63$i$i = 15736;
               }
               while(1) {
                $330 = HEAP8[$l$04$i64$i$i>>0]|0;
                $331 = HEAP8[$r$05$i63$i$i>>0]|0;
                $332 = ($330<<24>>24)==($331<<24>>24);
                if (!($332)) {
                 label = 134;
                 break;
                }
                $333 = (($$03$i65$i$i) + -1)|0;
                $334 = ((($l$04$i64$i$i)) + 1|0);
                $335 = ((($r$05$i63$i$i)) + 1|0);
                $336 = ($333|0)==(0);
                if ($336) {
                 break;
                } else {
                 $$03$i65$i$i = $333;$l$04$i64$i$i = $334;$r$05$i63$i$i = $335;
                }
               }
               do {
                if ((label|0) == 134) {
                 $337 = ($330<<24>>24)==($331<<24>>24);
                 if ($337) {
                  break;
                 } else {
                  $$03$i58$i$i = 4;$l$04$i57$i$i = $s$i$i;$r$05$i56$i$i = 15741;
                 }
                 while(1) {
                  $348 = HEAP8[$l$04$i57$i$i>>0]|0;
                  $349 = HEAP8[$r$05$i56$i$i>>0]|0;
                  $350 = ($348<<24>>24)==($349<<24>>24);
                  if (!($350)) {
                   label = 140;
                   break;
                  }
                  $351 = (($$03$i58$i$i) + -1)|0;
                  $352 = ((($l$04$i57$i$i)) + 1|0);
                  $353 = ((($r$05$i56$i$i)) + 1|0);
                  $354 = ($351|0)==(0);
                  if ($354) {
                   break;
                  } else {
                   $$03$i58$i$i = $351;$l$04$i57$i$i = $352;$r$05$i56$i$i = $353;
                  }
                 }
                 do {
                  if ((label|0) == 140) {
                   $355 = ($348<<24>>24)==($349<<24>>24);
                   if ($355) {
                    break;
                   } else {
                    $$03$i51$i$i = 4;$l$04$i50$i$i = $s$i$i;$r$05$i49$i$i = 15746;
                   }
                   while(1) {
                    $359 = HEAP8[$l$04$i50$i$i>>0]|0;
                    $360 = HEAP8[$r$05$i49$i$i>>0]|0;
                    $361 = ($359<<24>>24)==($360<<24>>24);
                    if (!($361)) {
                     label = 144;
                     break;
                    }
                    $362 = (($$03$i51$i$i) + -1)|0;
                    $363 = ((($l$04$i50$i$i)) + 1|0);
                    $364 = ((($r$05$i49$i$i)) + 1|0);
                    $365 = ($362|0)==(0);
                    if ($365) {
                     break;
                    } else {
                     $$03$i51$i$i = $362;$l$04$i50$i$i = $363;$r$05$i49$i$i = $364;
                    }
                   }
                   do {
                    if ((label|0) == 144) {
                     $366 = ($359<<24>>24)==($360<<24>>24);
                     if ($366) {
                      break;
                     }
                     HEAP32[$183>>2] = 0;
                     $370 = ((($18)) + 44|0);
                     HEAP32[$370>>2] = 0;
                     $371 = ((($18)) + 50|0);
                     HEAP16[$371>>1] = -1;
                     $372 = ((($18)) + 48|0);
                     HEAP16[$372>>1] = -1;
                     $373 = ((($18)) + 52|0);
                     HEAP32[$373>>2] = 0;
                     $$pre$phi150Z2D = $370;
                     break L171;
                    }
                   } while(0);
                   HEAP32[$183>>2] = 3;
                   $367 = ((($18)) + 44|0);
                   HEAP32[$367>>2] = 12;
                   $368 = ((($18)) + 48|0);
                   HEAP16[$368>>1] = -1;
                   $369 = ((($18)) + 50|0);
                   HEAP16[$369>>1] = -1;
                   $$pre$phi150Z2D = $367;
                   break L171;
                  }
                 } while(0);
                 HEAP32[$183>>2] = 3;
                 $356 = ((($18)) + 44|0);
                 HEAP32[$356>>2] = 10;
                 $357 = ((($18)) + 48|0);
                 HEAP16[$357>>1] = 1;
                 $358 = ((($18)) + 50|0);
                 HEAP16[$358>>1] = -1;
                 $$pre$phi150Z2D = $356;
                 break L171;
                }
               } while(0);
               HEAP32[$183>>2] = 2;
               $338 = ((($18)) + 44|0);
               HEAP32[$338>>2] = 9;
               $339 = HEAP8[$294>>0]|0;
               $340 = $339&255;
               $341 = ((($18)) + 48|0);
               HEAP16[$341>>1] = $340;
               $342 = ($len$0$i$i19|0)>(4);
               if ($342) {
                $343 = ((($s$i$i)) + 4|0);
                $344 = HEAP8[$343>>0]|0;
                $345 = ($344&255)<(3);
                $phitmp$i$i = $344&255;
                $phitmp$i$i$ = $345 ? $phitmp$i$i : 0;
                $347 = $phitmp$i$i$;
               } else {
                $347 = 0;
               }
               $346 = ((($18)) + 50|0);
               HEAP16[$346>>1] = $347;
               $$pre$phi150Z2D = $338;
               break L171;
              }
             } while(0);
             HEAP32[$183>>2] = 2;
             $327 = ((($18)) + 44|0);
             HEAP32[$327>>2] = 9;
             $328 = ((($18)) + 48|0);
             HEAP16[$328>>1] = 1;
             $329 = ((($18)) + 50|0);
             HEAP16[$329>>1] = -1;
             $$pre$phi150Z2D = $327;
             break L171;
            }
           } while(0);
           HEAP32[$183>>2] = 3;
           $316 = ((($18)) + 44|0);
           HEAP32[$316>>2] = 5;
           $317 = ((($18)) + 48|0);
           HEAP16[$317>>1] = -1;
           $318 = ((($18)) + 50|0);
           HEAP16[$318>>1] = -1;
           $$pre$phi150Z2D = $316;
           break;
          }
         }
         HEAP32[$183>>2] = 1;
         $305 = ((($18)) + 44|0);
         HEAP32[$305>>2] = 4;
         $306 = ((($18)) + 48|0);
         HEAP16[$306>>1] = 1;
         $307 = ((($18)) + 50|0);
         HEAP16[$307>>1] = -1;
         $$pre$phi150Z2D = $305;
         break;
        }
        $374 = ($len$0$i$i19|0)>(15);
        do {
         if ($374) {
          $$03$i44$i$i = 16;$l$04$i43$i$i = $s$i$i;$r$05$i42$i$i = 15751;
          while(1) {
           $375 = HEAP8[$l$04$i43$i$i>>0]|0;
           $376 = HEAP8[$r$05$i42$i$i>>0]|0;
           $377 = ($375<<24>>24)==($376<<24>>24);
           if (!($377)) {
            label = 150;
            break;
           }
           $378 = (($$03$i44$i$i) + -1)|0;
           $379 = ((($l$04$i43$i$i)) + 1|0);
           $380 = ((($r$05$i42$i$i)) + 1|0);
           $381 = ($378|0)==(0);
           if ($381) {
            break;
           } else {
            $$03$i44$i$i = $378;$l$04$i43$i$i = $379;$r$05$i42$i$i = $380;
           }
          }
          if ((label|0) == 150) {
           $382 = ($375<<24>>24)==($376<<24>>24);
           if (!($382)) {
            break;
           }
          }
          HEAP32[$183>>2] = 2;
          $383 = ((($18)) + 44|0);
          HEAP32[$383>>2] = 8;
          $384 = ($len$0$i$i19|0)>(20);
          do {
           if ($384) {
            $385 = ((($s$i$i)) + 16|0);
            $386 = HEAP8[$385>>0]|0;
            $387 = ($386<<24>>24)==(118);
            if (!($387)) {
             break;
            }
            $388 = ((($s$i$i)) + 17|0);
            $389 = (($s$i$i) + ($len$0$i$i19)|0);
            $390 = ((($18)) + 50|0);
            HEAP16[$390>>1] = -1;
            $391 = ((($18)) + 48|0);
            HEAP16[$391>>1] = -1;
            $s$0$i36$i$i = $388;$v$0$i37$i$i = 0;
            while(1) {
             $392 = ($s$0$i36$i$i>>>0)<($389>>>0);
             if (!($392)) {
              $$pre$phi150Z2D = $383;
              break L171;
             }
             $393 = HEAP8[$s$0$i36$i$i>>0]|0;
             $394 = $393&255;
             $395 = (($394) + -48)|0;
             $396 = ($395>>>0)<(10);
             if (!($396)) {
              break;
             }
             $397 = $v$0$i37$i$i << 16 >> 16;
             $398 = ($397*10)|0;
             $399 = $393 << 24 >> 24;
             $400 = (($398) + ($399))|0;
             $401 = (($400) + 65488)|0;
             $402 = $401&65535;
             $403 = ((($s$0$i36$i$i)) + 1|0);
             $s$0$i36$i$i = $403;$v$0$i37$i$i = $402;
            }
            HEAP16[$391>>1] = $v$0$i37$i$i;
            $404 = HEAP8[$s$0$i36$i$i>>0]|0;
            $405 = ($404<<24>>24)==(46);
            if ($405) {
             $s$0$pn$i38$i$i = $s$0$i36$i$i;$v$1$i39$i$i = 0;
            } else {
             HEAP16[$390>>1] = 0;
             $$pre$phi150Z2D = $383;
             break L171;
            }
            while(1) {
             $s$1$i40$i$i = ((($s$0$pn$i38$i$i)) + 1|0);
             $406 = ($s$1$i40$i$i>>>0)<($389>>>0);
             if (!($406)) {
              $$pre$phi150Z2D = $383;
              break L171;
             }
             $407 = HEAP8[$s$1$i40$i$i>>0]|0;
             $408 = $407&255;
             $409 = (($408) + -48)|0;
             $410 = ($409>>>0)<(10);
             if (!($410)) {
              break;
             }
             $411 = $v$1$i39$i$i << 16 >> 16;
             $412 = ($411*10)|0;
             $413 = $407 << 24 >> 24;
             $414 = (($412) + ($413))|0;
             $415 = (($414) + 65488)|0;
             $416 = $415&65535;
             $s$0$pn$i38$i$i = $s$1$i40$i$i;$v$1$i39$i$i = $416;
            }
            HEAP16[$390>>1] = $v$1$i39$i$i;
            $$pre$phi150Z2D = $383;
            break L171;
           }
          } while(0);
          $417 = ((($18)) + 50|0);
          HEAP16[$417>>1] = -1;
          $418 = ((($18)) + 48|0);
          HEAP16[$418>>1] = -1;
          $$pre$phi150Z2D = $383;
          break L171;
         }
        } while(0);
        $419 = HEAP8[$s$i$i>>0]|0;
        $420 = ($419<<24>>24)==(64);
        if ($420) {
         $$03$i31$i$i = 4;$423 = 64;$l$04$i30$i$i = $s$i$i;$r$05$i29$i$i = 15768;
         while(1) {
          $421 = HEAP8[$r$05$i29$i$i>>0]|0;
          $422 = ($423<<24>>24)==($421<<24>>24);
          if (!($422)) {
           label = 168;
           break;
          }
          $424 = (($$03$i31$i$i) + -1)|0;
          $425 = ((($l$04$i30$i$i)) + 1|0);
          $426 = ($424|0)==(0);
          if ($426) {
           break;
          }
          $427 = ((($r$05$i29$i$i)) + 1|0);
          $$pre145 = HEAP8[$425>>0]|0;
          $$03$i31$i$i = $424;$423 = $$pre145;$l$04$i30$i$i = $425;$r$05$i29$i$i = $427;
         }
         L254: do {
          if ((label|0) == 168) {
           $428 = ($423<<24>>24)==($421<<24>>24);
           if (!($428)) {
            $$03$i24$i$i = 4;$431 = 64;$l$04$i23$i$i = $s$i$i;$r$05$i22$i$i = 16039;
            while(1) {
             $429 = HEAP8[$r$05$i22$i$i>>0]|0;
             $430 = ($431<<24>>24)==($429<<24>>24);
             if (!($430)) {
              break;
             }
             $432 = (($$03$i24$i$i) + -1)|0;
             $433 = ((($l$04$i23$i$i)) + 1|0);
             $434 = ($432|0)==(0);
             if ($434) {
              break L254;
             }
             $435 = ((($r$05$i22$i$i)) + 1|0);
             $$pre146 = HEAP8[$433>>0]|0;
             $$03$i24$i$i = $432;$431 = $$pre146;$l$04$i23$i$i = $433;$r$05$i22$i$i = $435;
            }
            $436 = ($431<<24>>24)==($429<<24>>24);
            if ($436) {
             break;
            } else {
             $$03$i17$i$i = 4;$439 = 64;$l$04$i16$i$i = $s$i$i;$r$05$i15$i$i = 15773;
            }
            while(1) {
             $437 = HEAP8[$r$05$i15$i$i>>0]|0;
             $438 = ($439<<24>>24)==($437<<24>>24);
             if (!($438)) {
              break;
             }
             $440 = (($$03$i17$i$i) + -1)|0;
             $441 = ((($l$04$i16$i$i)) + 1|0);
             $442 = ($440|0)==(0);
             if ($442) {
              break L254;
             }
             $443 = ((($r$05$i15$i$i)) + 1|0);
             $$pre147 = HEAP8[$441>>0]|0;
             $$03$i17$i$i = $440;$439 = $$pre147;$l$04$i16$i$i = $441;$r$05$i15$i$i = $443;
            }
            $444 = ($439<<24>>24)==($437<<24>>24);
            if ($444) {
             break;
            } else {
             $$03$i10$i$i = 4;$447 = 64;$l$04$i9$i$i = $s$i$i;$r$05$i8$i$i = 15778;
            }
            while(1) {
             $445 = HEAP8[$r$05$i8$i$i>>0]|0;
             $446 = ($447<<24>>24)==($445<<24>>24);
             if (!($446)) {
              break;
             }
             $448 = (($$03$i10$i$i) + -1)|0;
             $449 = ((($l$04$i9$i$i)) + 1|0);
             $450 = ($448|0)==(0);
             if ($450) {
              break L254;
             }
             $451 = ((($r$05$i8$i$i)) + 1|0);
             $$pre148 = HEAP8[$449>>0]|0;
             $$03$i10$i$i = $448;$447 = $$pre148;$l$04$i9$i$i = $449;$r$05$i8$i$i = $451;
            }
            $452 = ($447<<24>>24)==($445<<24>>24);
            if (!($452)) {
             label = 196;
             break L171;
            }
           }
          }
         } while(0);
         HEAP32[$183>>2] = 1;
         $453 = ((($18)) + 44|0);
         HEAP32[$453>>2] = 3;
         $454 = ($len$0$i$i19|0)>(8);
         do {
          if ($454) {
           $$03$i3$i$i = 7;$l$04$i2$i$i = $s$i$i;$r$05$i1$i$i = 15783;
           while(1) {
            $455 = HEAP8[$l$04$i2$i$i>>0]|0;
            $456 = HEAP8[$r$05$i1$i$i>>0]|0;
            $457 = ($455<<24>>24)==($456<<24>>24);
            if (!($457)) {
             label = 184;
             break;
            }
            $458 = (($$03$i3$i$i) + -1)|0;
            $459 = ((($l$04$i2$i$i)) + 1|0);
            $460 = ((($r$05$i1$i$i)) + 1|0);
            $461 = ($458|0)==(0);
            if ($461) {
             break;
            } else {
             $$03$i3$i$i = $458;$l$04$i2$i$i = $459;$r$05$i1$i$i = $460;
            }
           }
           if ((label|0) == 184) {
            $462 = ($455<<24>>24)==($456<<24>>24);
            if (!($462)) {
             break;
            }
           }
           $463 = ((($s$i$i)) + 7|0);
           $464 = (($s$i$i) + ($len$0$i$i19)|0);
           $465 = ((($18)) + 50|0);
           HEAP16[$465>>1] = -1;
           $466 = ((($18)) + 48|0);
           HEAP16[$466>>1] = -1;
           $s$0$i$i$i = $463;$v$0$i$i$i = 0;
           while(1) {
            $467 = ($s$0$i$i$i>>>0)<($464>>>0);
            if (!($467)) {
             $$pre$phi150Z2D = $453;
             break L171;
            }
            $468 = HEAP8[$s$0$i$i$i>>0]|0;
            $469 = $468&255;
            $470 = (($469) + -48)|0;
            $471 = ($470>>>0)<(10);
            if (!($471)) {
             break;
            }
            $472 = $v$0$i$i$i << 16 >> 16;
            $473 = ($472*10)|0;
            $474 = $468 << 24 >> 24;
            $475 = (($473) + ($474))|0;
            $476 = (($475) + 65488)|0;
            $477 = $476&65535;
            $478 = ((($s$0$i$i$i)) + 1|0);
            $s$0$i$i$i = $478;$v$0$i$i$i = $477;
           }
           HEAP16[$466>>1] = $v$0$i$i$i;
           $479 = HEAP8[$s$0$i$i$i>>0]|0;
           $480 = ($479<<24>>24)==(46);
           if ($480) {
            $s$0$pn$i$i$i = $s$0$i$i$i;$v$1$i$i$i = 0;
           } else {
            HEAP16[$465>>1] = 0;
            $$pre$phi150Z2D = $453;
            break L171;
           }
           while(1) {
            $s$1$i$i$i = ((($s$0$pn$i$i$i)) + 1|0);
            $481 = ($s$1$i$i$i>>>0)<($464>>>0);
            if (!($481)) {
             $$pre$phi150Z2D = $453;
             break L171;
            }
            $482 = HEAP8[$s$1$i$i$i>>0]|0;
            $483 = $482&255;
            $484 = (($483) + -48)|0;
            $485 = ($484>>>0)<(10);
            if (!($485)) {
             break;
            }
            $486 = $v$1$i$i$i << 16 >> 16;
            $487 = ($486*10)|0;
            $488 = $482 << 24 >> 24;
            $489 = (($487) + ($488))|0;
            $490 = (($489) + 65488)|0;
            $491 = $490&65535;
            $s$0$pn$i$i$i = $s$1$i$i$i;$v$1$i$i$i = $491;
           }
           HEAP16[$465>>1] = $v$1$i$i$i;
           $$pre$phi150Z2D = $453;
           break L171;
          }
         } while(0);
         $492 = ((($18)) + 48|0);
         HEAP16[$492>>1] = 1;
         $493 = ((($18)) + 50|0);
         HEAP16[$493>>1] = -1;
         $$pre$phi150Z2D = $453;
        } else {
         label = 196;
        }
       } else {
        label = 196;
       }
      }
     } while(0);
     if ((label|0) == 196) {
      HEAP32[$183>>2] = 1;
      $494 = ((($18)) + 44|0);
      HEAP32[$494>>2] = 3;
      $495 = ((($18)) + 48|0);
      HEAP16[$495>>1] = 1;
      $496 = ((($18)) + 50|0);
      HEAP16[$496>>1] = -1;
      $$pre$phi150Z2D = $494;
     }
     $497 = HEAP32[$$pre$phi150Z2D>>2]|0;
     L295: do {
      switch ($497|0) {
      case 9: case 4: case 1:  {
       L297: do {
        if ($152) {
         $$02$lcssa$i$i$i = $simple_mode$i;
         label = 202;
        } else {
         $$0211$i$i$i = $simple_mode$i;
         while(1) {
          $498 = HEAP8[$$0211$i$i$i>>0]|0;
          switch ($498<<24>>24) {
          case 0: case 114:  {
           $$0$i1$i$i = $$0211$i$i$i;$526 = $498;
           break L297;
           break;
          }
          default: {
          }
          }
          $499 = ((($$0211$i$i$i)) + 1|0);
          $500 = $499;
          $501 = $500 & 3;
          $502 = ($501|0)==(0);
          if ($502) {
           $$02$lcssa$i$i$i = $499;
           label = 202;
           break L297;
          } else {
           $$0211$i$i$i = $499;
          }
         }
        }
       } while(0);
       L301: do {
        if ((label|0) == 202) {
         $503 = HEAP32[$$02$lcssa$i$i$i>>2]|0;
         $504 = (($503) + -16843009)|0;
         $505 = $503 & -2139062144;
         $506 = $505 ^ -2139062144;
         $507 = $506 & $504;
         $508 = ($507|0)==(0);
         L303: do {
          if ($508) {
           $510 = $503;$w$08$i$i$i = $$02$lcssa$i$i$i;
           while(1) {
            $509 = $510 ^ 1920103026;
            $511 = (($509) + -16843009)|0;
            $512 = $510 & -2139062144;
            $513 = $512 ^ -2139062144;
            $514 = $513 & $511;
            $515 = ($514|0)==(0);
            if (!($515)) {
             $w$0$lcssa$i$i$i = $w$08$i$i$i;
             break L303;
            }
            $516 = ((($w$08$i$i$i)) + 4|0);
            $517 = HEAP32[$516>>2]|0;
            $518 = (($517) + -16843009)|0;
            $519 = $517 & -2139062144;
            $520 = $519 ^ -2139062144;
            $521 = $520 & $518;
            $522 = ($521|0)==(0);
            if ($522) {
             $510 = $517;$w$08$i$i$i = $516;
            } else {
             $w$0$lcssa$i$i$i = $516;
             break;
            }
           }
          } else {
           $w$0$lcssa$i$i$i = $$02$lcssa$i$i$i;
          }
         } while(0);
         $$1$i$i$i = $w$0$lcssa$i$i$i;
         while(1) {
          $523 = HEAP8[$$1$i$i$i>>0]|0;
          $524 = ((($$1$i$i$i)) + 1|0);
          switch ($523<<24>>24) {
          case 0: case 114:  {
           $$0$i1$i$i = $$1$i$i$i;$526 = $523;
           break L301;
           break;
          }
          default: {
           $$1$i$i$i = $524;
          }
          }
         }
        }
       } while(0);
       $525 = ($$0$i1$i$i|0)==(0|0);
       $not$5 = ($526<<24>>24)!=(114);
       $527 = $525 | $not$5;
       L311: do {
        if ($527) {
         L313: do {
          if ($152) {
           $$02$lcssa$i6$i$i = $simple_mode$i;
           label = 212;
          } else {
           $$0211$i3$i$i = $simple_mode$i;
           while(1) {
            $530 = HEAP8[$$0211$i3$i$i>>0]|0;
            switch ($530<<24>>24) {
            case 0: case 119:  {
             $$0$i19$i$i = $$0211$i3$i$i;$558 = $530;
             break L313;
             break;
            }
            default: {
            }
            }
            $531 = ((($$0211$i3$i$i)) + 1|0);
            $532 = $531;
            $533 = $532 & 3;
            $534 = ($533|0)==(0);
            if ($534) {
             $$02$lcssa$i6$i$i = $531;
             label = 212;
             break L313;
            } else {
             $$0211$i3$i$i = $531;
            }
           }
          }
         } while(0);
         L317: do {
          if ((label|0) == 212) {
           $535 = HEAP32[$$02$lcssa$i6$i$i>>2]|0;
           $536 = (($535) + -16843009)|0;
           $537 = $535 & -2139062144;
           $538 = $537 ^ -2139062144;
           $539 = $538 & $536;
           $540 = ($539|0)==(0);
           L319: do {
            if ($540) {
             $542 = $535;$w$08$i9$i$i = $$02$lcssa$i6$i$i;
             while(1) {
              $541 = $542 ^ 2004318071;
              $543 = (($541) + -16843009)|0;
              $544 = $542 & -2139062144;
              $545 = $544 ^ -2139062144;
              $546 = $545 & $543;
              $547 = ($546|0)==(0);
              if (!($547)) {
               $w$0$lcssa$i13$i$i = $w$08$i9$i$i;
               break L319;
              }
              $548 = ((($w$08$i9$i$i)) + 4|0);
              $549 = HEAP32[$548>>2]|0;
              $550 = (($549) + -16843009)|0;
              $551 = $549 & -2139062144;
              $552 = $551 ^ -2139062144;
              $553 = $552 & $550;
              $554 = ($553|0)==(0);
              if ($554) {
               $542 = $549;$w$08$i9$i$i = $548;
              } else {
               $w$0$lcssa$i13$i$i = $548;
               break;
              }
             }
            } else {
             $w$0$lcssa$i13$i$i = $$02$lcssa$i6$i$i;
            }
           } while(0);
           $$1$i15$i$i = $w$0$lcssa$i13$i$i;
           while(1) {
            $555 = HEAP8[$$1$i15$i$i>>0]|0;
            $556 = ((($$1$i15$i$i)) + 1|0);
            switch ($555<<24>>24) {
            case 0: case 119:  {
             $$0$i19$i$i = $$1$i15$i$i;$558 = $555;
             break L317;
             break;
            }
            default: {
             $$1$i15$i$i = $556;
            }
            }
           }
          }
         } while(0);
         $557 = ($$0$i19$i$i|0)==(0|0);
         $not$6 = ($558<<24>>24)!=(119);
         $559 = $557 | $not$6;
         do {
          if ($559) {
           L329: do {
            if ($152) {
             $$02$lcssa$i25$i$i = $simple_mode$i;
             label = 221;
            } else {
             $$0211$i22$i$i = $simple_mode$i;
             while(1) {
              $560 = HEAP8[$$0211$i22$i$i>>0]|0;
              switch ($560<<24>>24) {
              case 0: case 97:  {
               $$0$i38$i$i = $$0211$i22$i$i;$588 = $560;
               break L329;
               break;
              }
              default: {
              }
              }
              $561 = ((($$0211$i22$i$i)) + 1|0);
              $562 = $561;
              $563 = $562 & 3;
              $564 = ($563|0)==(0);
              if ($564) {
               $$02$lcssa$i25$i$i = $561;
               label = 221;
               break L329;
              } else {
               $$0211$i22$i$i = $561;
              }
             }
            }
           } while(0);
           L333: do {
            if ((label|0) == 221) {
             $565 = HEAP32[$$02$lcssa$i25$i$i>>2]|0;
             $566 = (($565) + -16843009)|0;
             $567 = $565 & -2139062144;
             $568 = $567 ^ -2139062144;
             $569 = $568 & $566;
             $570 = ($569|0)==(0);
             L335: do {
              if ($570) {
               $572 = $565;$w$08$i28$i$i = $$02$lcssa$i25$i$i;
               while(1) {
                $571 = $572 ^ 1633771873;
                $573 = (($571) + -16843009)|0;
                $574 = $572 & -2139062144;
                $575 = $574 ^ -2139062144;
                $576 = $575 & $573;
                $577 = ($576|0)==(0);
                if (!($577)) {
                 $w$0$lcssa$i32$i$i = $w$08$i28$i$i;
                 break L335;
                }
                $578 = ((($w$08$i28$i$i)) + 4|0);
                $579 = HEAP32[$578>>2]|0;
                $580 = (($579) + -16843009)|0;
                $581 = $579 & -2139062144;
                $582 = $581 ^ -2139062144;
                $583 = $582 & $580;
                $584 = ($583|0)==(0);
                if ($584) {
                 $572 = $579;$w$08$i28$i$i = $578;
                } else {
                 $w$0$lcssa$i32$i$i = $578;
                 break;
                }
               }
              } else {
               $w$0$lcssa$i32$i$i = $$02$lcssa$i25$i$i;
              }
             } while(0);
             $$1$i34$i$i = $w$0$lcssa$i32$i$i;
             while(1) {
              $585 = HEAP8[$$1$i34$i$i>>0]|0;
              $586 = ((($$1$i34$i$i)) + 1|0);
              switch ($585<<24>>24) {
              case 0: case 97:  {
               $$0$i38$i$i = $$1$i34$i$i;$588 = $585;
               break L333;
               break;
              }
              default: {
               $$1$i34$i$i = $586;
              }
              }
             }
            }
           } while(0);
           $587 = ($$0$i38$i$i|0)==(0|0);
           $not$7 = ($588<<24>>24)!=(97);
           $589 = $587 | $not$7;
           if (!($589)) {
            break;
           }
           $592 = HEAP32[6773]|0;
           $593 = ($592|0)==(0|0);
           if ($593) {
            $$0$i$i$i = 27136;
           } else {
            $594 = (_pthread_self()|0);
            $595 = ((($594)) + 64|0);
            $596 = HEAP32[$595>>2]|0;
            $$0$i$i$i = $596;
           }
           HEAP32[$$0$i$i$i>>2] = 22;
           label = 231;
           break L311;
          }
         } while(0);
         $590 = (_bgzf_write_init($simple_mode$i)|0);
         $591 = ($590|0)==(0|0);
         if ($591) {
          label = 231;
         } else {
          $fp$0$i$i = $590;
          label = 232;
         }
        } else {
         $528 = (_bgzf_read_init($13)|0);
         $529 = ($528|0)==(0|0);
         if ($529) {
          label = 231;
         } else {
          $fp$0$i$i = $528;
          label = 232;
         }
        }
       } while(0);
       if ((label|0) == 231) {
        $597 = ((($18)) + 36|0);
        HEAP32[$597>>2] = 0;
        break L295;
       }
       else if ((label|0) == 232) {
        $598 = ((($fp$0$i$i)) + 52|0);
        HEAP32[$598>>2] = $13;
        $599 = HEAP32[$fp$0$i$i>>2]|0;
        $600 = $599 & -786433;
        HEAP32[$fp$0$i$i>>2] = $600;
        $601 = ((($18)) + 36|0);
        HEAP32[$601>>2] = $fp$0$i$i;
        $602 = HEAP32[$18>>2]|0;
        $603 = $602 | 1;
        HEAP32[$18>>2] = $603;
        $$0$i = $18;
        break L17;
       }
       break;
      }
      default: {
      }
      }
     } while(0);
     HEAP32[$vararg_buffer2>>2] = 14192;
     $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
     HEAP32[$vararg_ptr5>>2] = $17;
     _printf(14160,$vararg_buffer2);
    }
   } while(0);
   if ((label|0) == 234) {
    HEAP32[$vararg_buffer6>>2] = 14192;
    $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
    HEAP32[$vararg_ptr9>>2] = $17;
    _printf(14160,$vararg_buffer6);
   }
   $604 = HEAP32[$49>>2]|0;
   _free($604);
   $605 = ((($18)) + 32|0);
   $606 = HEAP32[$605>>2]|0;
   _free($606);
   _free($18);
   $$0$i = 0;
  }
 } while(0);
 _free($17);
 $607 = (__ZNSt3__13mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEEixERS7_($0)|0);
 HEAP32[$607>>2] = $$0$i;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__13mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEEixERS7_($__k) {
 $__k = $__k|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre16 = 0, $$pre18 = 0, $$pre19 = 0, $$pre21 = 0, $$pre22 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__nd$0$i = 0, $__nd$1$i$in = 0, $__parent$sroa$0 = 0, $__r$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__parent$sroa$0 = sp;
 $0 = HEAP32[(27036)>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   HEAP32[$__parent$sroa$0>>2] = ((27036));
   $$0$i = (27036);
  } else {
   $2 = HEAP32[$__k>>2]|0;
   $__nd$0$i = $0;
   while(1) {
    $3 = ((($__nd$0$i)) + 16|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = ($2|0)<($4|0);
    if ($5) {
     $6 = HEAP32[$__nd$0$i>>2]|0;
     $7 = ($6|0)==(0|0);
     if ($7) {
      label = 5;
      break;
     } else {
      $__nd$1$i$in = $6;
     }
    } else {
     $9 = ($4|0)<($2|0);
     if (!($9)) {
      label = 9;
      break;
     }
     $10 = ((($__nd$0$i)) + 4|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ($11|0)==(0|0);
     if ($12) {
      label = 8;
      break;
     } else {
      $__nd$1$i$in = $11;
     }
    }
    $__nd$0$i = $__nd$1$i$in;
   }
   if ((label|0) == 5) {
    $8 = $__nd$0$i;
    HEAP32[$__parent$sroa$0>>2] = $8;
    $$0$i = $__nd$0$i;
    break;
   }
   else if ((label|0) == 8) {
    $13 = $__nd$0$i;
    HEAP32[$__parent$sroa$0>>2] = $13;
    $$0$i = $10;
    break;
   }
   else if ((label|0) == 9) {
    $14 = $__nd$0$i;
    HEAP32[$__parent$sroa$0>>2] = $14;
    $$0$i = $__parent$sroa$0;
    break;
   }
  }
 } while(0);
 $15 = HEAP32[$$0$i>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $__r$0 = $15;
  $132 = ((($__r$0)) + 20|0);
  STACKTOP = sp;return ($132|0);
 }
 while(1) {
  $17 = (_malloc(24)|0);
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   break;
  }
  $19 = HEAP32[6910]|0;HEAP32[6910] = (($19+0)|0);
  $20 = ($19|0)==(0);
  if ($20) {
   label = 16;
   break;
  }
  $21 = $19;
  FUNCTION_TABLE_v[$21 & 63]();
 }
 if ((label|0) == 16) {
  $22 = (___cxa_allocate_exception(4)|0);
  HEAP32[$22>>2] = (10232);
  ___cxa_throw(($22|0),(72|0),(53|0));
  // unreachable;
 }
 $23 = ((($17)) + 16|0);
 $24 = HEAP32[$__k>>2]|0;
 HEAP32[$23>>2] = $24;
 $25 = ((($17)) + 20|0);
 HEAP32[$25>>2] = 0;
 $26 = HEAP32[$__parent$sroa$0>>2]|0;
 HEAP32[$17>>2] = 0;
 $27 = ((($17)) + 4|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($17)) + 8|0);
 HEAP32[$28>>2] = $26;
 HEAP32[$$0$i>>2] = $17;
 $29 = HEAP32[6758]|0;
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if ($31) {
  $35 = $17;
 } else {
  $32 = HEAP32[$29>>2]|0;
  HEAP32[6758] = $32;
  $$pre16 = HEAP32[$$0$i>>2]|0;
  $35 = $$pre16;
 }
 $33 = HEAP32[(27036)>>2]|0;
 $34 = ($35|0)==($33|0);
 $36 = ((($35)) + 12|0);
 $37 = $34&1;
 HEAP8[$36>>0] = $37;
 $$0$i$i = $35;
 while(1) {
  $38 = ($$0$i$i|0)==($33|0);
  if ($38) {
   break;
  }
  $39 = ((($$0$i$i)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($40)) + 12|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42 & 1;
  $44 = ($43<<24>>24)==(0);
  if (!($44)) {
   break;
  }
  $45 = ((($40)) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[$46>>2]|0;
  $48 = ($40|0)==($47|0);
  $49 = $46;
  if ($48) {
   $50 = ((($46)) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(0|0);
   if ($52) {
    label = 26;
    break;
   }
   $53 = ((($51)) + 12|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if (!($56)) {
    label = 26;
    break;
   }
   HEAP8[$41>>0] = 1;
   $57 = ($46|0)==($33|0);
   $58 = ((($46)) + 12|0);
   $59 = $57&1;
   HEAP8[$58>>0] = $59;
   HEAP8[$53>>0] = 1;
   $$0$i$i = $46;
   continue;
  } else {
   $91 = ($47|0)==(0|0);
   if ($91) {
    label = 42;
    break;
   }
   $92 = ((($47)) + 12|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $93 & 1;
   $95 = ($94<<24>>24)==(0);
   if (!($95)) {
    label = 42;
    break;
   }
   HEAP8[$41>>0] = 1;
   $96 = ($46|0)==($33|0);
   $97 = ((($46)) + 12|0);
   $98 = $96&1;
   HEAP8[$97>>0] = $98;
   HEAP8[$92>>0] = 1;
   $$0$i$i = $46;
   continue;
  }
 }
 if ((label|0) == 26) {
  $60 = HEAP32[$40>>2]|0;
  $61 = ($$0$i$i|0)==($60|0);
  if ($61) {
   $75 = $40;$77 = $46;
  } else {
   $62 = ((($40)) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = HEAP32[$63>>2]|0;
   HEAP32[$62>>2] = $64;
   $65 = ($64|0)==(0);
   if ($65) {
    $69 = $49;
   } else {
    $66 = $64;
    $67 = ((($66)) + 8|0);
    HEAP32[$67>>2] = $40;
    $$pre21 = HEAP32[$45>>2]|0;
    $69 = $$pre21;
   }
   $68 = ((($63)) + 8|0);
   HEAP32[$68>>2] = $69;
   $70 = HEAP32[$45>>2]|0;
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71|0)==($40|0);
   if ($72) {
    HEAP32[$70>>2] = $63;
   } else {
    $73 = ((($70)) + 4|0);
    HEAP32[$73>>2] = $63;
   }
   HEAP32[$63>>2] = $40;
   HEAP32[$45>>2] = $63;
   $$pre22 = HEAP32[$68>>2]|0;
   $75 = $63;$77 = $$pre22;
  }
  $74 = ((($75)) + 12|0);
  HEAP8[$74>>0] = 1;
  $76 = ((($77)) + 12|0);
  HEAP8[$76>>0] = 0;
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($78)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  HEAP32[$77>>2] = $80;
  $81 = ($80|0)==(0);
  if (!($81)) {
   $82 = $80;
   $83 = ((($82)) + 8|0);
   HEAP32[$83>>2] = $77;
  }
  $84 = ((($77)) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ((($78)) + 8|0);
  HEAP32[$86>>2] = $85;
  $87 = HEAP32[$84>>2]|0;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($88|0)==($77|0);
  if ($89) {
   HEAP32[$87>>2] = $78;
  } else {
   $90 = ((($87)) + 4|0);
   HEAP32[$90>>2] = $78;
  }
  HEAP32[$79>>2] = $77;
  HEAP32[$84>>2] = $78;
 }
 else if ((label|0) == 42) {
  $99 = HEAP32[$40>>2]|0;
  $100 = ($$0$i$i|0)==($99|0);
  if ($100) {
   $101 = HEAP32[$40>>2]|0;
   $102 = ((($101)) + 4|0);
   $103 = HEAP32[$102>>2]|0;
   HEAP32[$40>>2] = $103;
   $104 = ($103|0)==(0);
   if ($104) {
    $108 = $49;
   } else {
    $105 = $103;
    $106 = ((($105)) + 8|0);
    HEAP32[$106>>2] = $40;
    $$pre18 = HEAP32[$45>>2]|0;
    $108 = $$pre18;
   }
   $107 = ((($101)) + 8|0);
   HEAP32[$107>>2] = $108;
   $109 = HEAP32[$45>>2]|0;
   $110 = HEAP32[$109>>2]|0;
   $111 = ($110|0)==($40|0);
   if ($111) {
    HEAP32[$109>>2] = $101;
   } else {
    $112 = ((($109)) + 4|0);
    HEAP32[$112>>2] = $101;
   }
   HEAP32[$102>>2] = $40;
   HEAP32[$45>>2] = $101;
   $$pre19 = HEAP32[$107>>2]|0;
   $114 = $101;$116 = $$pre19;
  } else {
   $114 = $40;$116 = $46;
  }
  $113 = ((($114)) + 12|0);
  HEAP8[$113>>0] = 1;
  $115 = ((($116)) + 12|0);
  HEAP8[$115>>0] = 0;
  $117 = ((($116)) + 4|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = HEAP32[$118>>2]|0;
  HEAP32[$117>>2] = $119;
  $120 = ($119|0)==(0);
  if (!($120)) {
   $121 = $119;
   $122 = ((($121)) + 8|0);
   HEAP32[$122>>2] = $116;
  }
  $123 = ((($116)) + 8|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ((($118)) + 8|0);
  HEAP32[$125>>2] = $124;
  $126 = HEAP32[$123>>2]|0;
  $127 = HEAP32[$126>>2]|0;
  $128 = ($127|0)==($116|0);
  if ($128) {
   HEAP32[$126>>2] = $118;
  } else {
   $129 = ((($126)) + 4|0);
   HEAP32[$129>>2] = $118;
  }
  HEAP32[$118>>2] = $116;
  HEAP32[$123>>2] = $118;
 }
 $130 = HEAP32[(27040)>>2]|0;
 $131 = (($130) + 1)|0;
 HEAP32[(27040)>>2] = $131;
 $__r$0 = $17;
 $132 = ((($__r$0)) + 20|0);
 STACKTOP = sp;return ($132|0);
}
function _bgzf_close_js($fd) {
 $fd = $fd|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i5$i$i = 0, $$0$i$i11$i$i = 0, $$0$i$i15$i$i = 0, $$0$i$i19$i$i = 0, $$0$i$i3$i = 0, $$0$i1$i$i = 0, $$0$i1$i$i$i = 0, $$0$i1$i13$i$i = 0, $$0$i12$i = 0, $$0$i2$i$i$i = 0, $$0$i23$i$i = 0, $$0$i27$i$i = 0, $$0$i5$i = 0, $$0$i7$i = 0, $$36 = 0, $$37 = 0, $$cast = 0;
 var $$cast1 = 0, $$in = 0, $$in32 = 0, $$in34 = 0, $$in35 = 0, $$mask$i$i = 0, $$pr = 0, $$pre = 0, $$pre$phi25Z2D = 0, $$pre$phi27Z2D = 0, $$pre$phiZ2D = 0, $$pre14 = 0, $$pre15 = 0, $$pre16 = 0, $$pre17 = 0, $$pre24 = 0, $$pre26 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bl$0$i$i = 0, $buffer$0$i$i = 0, $buffer$0$i$i$i = 0, $buffer$0$i18$i$i = 0, $buffer$0$i29$i$i = 0, $cond = 0, $err$0$i$i = 0, $err$0$i$i$i = 0, $err$1$i$i = 0, $err$1$i$i$i = 0;
 var $exitcond = 0, $i$0$i$i = 0, $i$0$i$i$i = 0, $i$0$i$i$i$i = 0, $i$0$i14$i$i = 0, $i$0$i3$i$i$i = 0, $i$0$i5$i$i$i = 0, $i1$0$i$i = 0, $i1$0$i$i$i = 0, $i2$0$i$i$i = 0, $remaining$0$i$i$i$i = 0, $remaining$0$i$i4$i$i = 0, $src$0$i$i$i$i = 0, $src$0$i$i3$i$i = 0, $storemerge = 0, $storemerge$in = 0, $storemerge33 = 0, $storemerge33$in = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 4|0;
 HEAP32[$0>>2] = $fd;
 $1 = (__ZNSt3__13mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEEixERS7_($0)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 L1: do {
  switch ($4|0) {
  case 9: case 4: case 1:  {
   $5 = ((($2)) + 36|0);
   $6 = HEAP32[$5>>2]|0;
   (_bgzf_close($6)|0);
   break;
  }
  case 6:  {
   $7 = HEAP32[$2>>2]|0;
   $8 = $7 & 2;
   $9 = ($8|0)==(0);
   $10 = ((($2)) + 36|0);
   if ($9) {
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($11)) + 34644|0);
    $13 = HEAP32[$12>>2]|0;
    $cond = ($13|0)==(2);
    if ($cond) {
     HEAP32[$vararg_buffer>>2] = 15791;
     _fprintf(9772,15834,$vararg_buffer);
     label = 6;
    } else {
     $15 = $11;
    }
   } else {
    label = 6;
   }
   if ((label|0) == 6) {
    $$pr = HEAP32[$10>>2]|0;
    $15 = $$pr;
   }
   $14 = ($15|0)==(0|0);
   if (!($14)) {
    $16 = ((($15)) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(119);
    L11: do {
     if ($18) {
      $19 = ((($15)) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($20|0)==(0|0);
      if (!($21)) {
       $22 = ((($20)) + 100|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = ($23|0)==(0|0);
       if ($24) {
        $70 = $20;
       } else {
        $25 = ((($20)) + 116|0);
        $26 = HEAP32[$25>>2]|0;
        $27 = ($26|0)==(0);
        if ($27) {
         $34 = ((($20)) + 88|0);
         $35 = HEAP32[$34>>2]|0;
         $36 = HEAP32[$23>>2]|0;
         $37 = ((($36)) + 4|0);
         HEAP32[$37>>2] = $35;
         $38 = ((($20)) + 128|0);
         $39 = HEAP32[$38>>2]|0;
         $40 = HEAP32[$23>>2]|0;
         $41 = ((($40)) + 8|0);
         HEAP32[$41>>2] = $39;
         $42 = ((($20)) + 132|0);
         $43 = HEAP32[$42>>2]|0;
         $44 = HEAP32[$38>>2]|0;
         $45 = (($43) - ($44))|0;
         $46 = ($45|0)<(-1);
         $47 = (($45) + 1)|0;
         $$ = $46 ? 0 : $47;
         $48 = HEAP32[$23>>2]|0;
         $49 = ((($48)) + 12|0);
         HEAP32[$49>>2] = $$;
         $$pre$phiZ2D = $23;
        } else {
         $28 = HEAP32[$23>>2]|0;
         $29 = ((($28)) + 4|0);
         HEAP32[$29>>2] = -2;
         $30 = HEAP32[$23>>2]|0;
         $31 = ((($30)) + 8|0);
         HEAP32[$31>>2] = 0;
         $32 = HEAP32[$23>>2]|0;
         $33 = ((($32)) + 12|0);
         HEAP32[$33>>2] = 0;
         $$pre$phiZ2D = $23;
        }
        $50 = ((($20)) + 72|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = HEAP32[$$pre$phiZ2D>>2]|0;
        $53 = ((($52)) + 16|0);
        HEAP32[$53>>2] = $51;
        $54 = ((($20)) + 64|0);
        $55 = HEAP32[$54>>2]|0;
        $56 = ($55|0)==(0);
        if ($56) {
         $57 = ((($20)) + 4|0);
         $58 = HEAP32[$57>>2]|0;
         $59 = HEAP32[$$pre$phiZ2D>>2]|0;
         $60 = ((($59)) + 4|0);
         $61 = HEAP32[$60>>2]|0;
         $62 = ($58|0)==($61|0);
         if (!($62)) {
          HEAP32[$57>>2] = $61;
         }
         $63 = ((($20)) + 128|0);
         $64 = HEAP32[$63>>2]|0;
         $65 = ((($20)) + 8|0);
         HEAP32[$65>>2] = $64;
        }
        $66 = (($55) + 1)|0;
        HEAP32[$54>>2] = $66;
        $$pre14 = HEAP32[$19>>2]|0;
        $70 = $$pre14;
       }
       $67 = ((($15)) + 34668|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = ($68|0)==(0|0);
       if ($69) {
        $71 = (_cram_encode_container($15,$70)|0);
        $72 = ($71|0)==(0);
        if (!($72)) {
         break L1;
        }
        $93 = (_cram_flush_container2($15,$70)|0);
        $94 = ($93|0)==(-1);
        if ($94) {
         break L1;
        } else {
         break;
        }
       }
       $73 = (_malloc(8)|0);
       $74 = ($73|0)==(0|0);
       if ($74) {
        break L1;
       }
       HEAP32[$73>>2] = $15;
       $75 = ((($73)) + 4|0);
       HEAP32[$75>>2] = $70;
       $76 = ((($15)) + 34672|0);
       while(1) {
        $77 = HEAP32[6773]|0;
        $78 = ($77|0)==(0|0);
        if ($78) {
         $$0$i1$i$i$i = 27136;
        } else {
         $79 = (_pthread_self()|0);
         $80 = ((($79)) + 64|0);
         $81 = HEAP32[$80>>2]|0;
         $$0$i1$i$i$i = $81;
        }
        HEAP32[$$0$i1$i$i$i>>2] = 0;
        $82 = HEAP32[$67>>2]|0;
        $83 = HEAP32[$76>>2]|0;
        (_hts_tpool_dispatch2($82,$83,56,$73,1)|0);
        $84 = HEAP32[6773]|0;
        $85 = ($84|0)==(0|0);
        if ($85) {
         $$0$i2$i$i$i = 27136;
        } else {
         $86 = (_pthread_self()|0);
         $87 = ((($86)) + 64|0);
         $88 = HEAP32[$87>>2]|0;
         $$0$i2$i$i$i = $88;
        }
        $89 = HEAP32[$$0$i2$i$i$i>>2]|0;
        $90 = (_cram_flush_result($15)|0);
        $91 = ($90|0)==(0);
        if (!($91)) {
         break L1;
        }
        $92 = ($89|0)==(11);
        if (!($92)) {
         break L11;
        }
        (_usleep(1000)|0);
       }
      }
     }
    } while(0);
    $95 = ((($15)) + 34668|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)==(0|0);
    if (!($97)) {
     $98 = ((($15)) + 34644|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = ($99|0)>(-1);
     if ($100) {
      $101 = ((($15)) + 34672|0);
      $102 = HEAP32[$101>>2]|0;
      _hts_tpool_process_flush($102);
      $103 = (_cram_flush_result($15)|0);
      $104 = ($103|0)==(0);
      if (!($104)) {
       break L1;
      }
      $105 = ((($15)) + 34676|0);
      (_pthread_mutex_destroy(($105|0))|0);
      $106 = ((($15)) + 34704|0);
      (_pthread_mutex_destroy(($106|0))|0);
      $107 = ((($15)) + 34736|0);
      (_pthread_mutex_destroy(($107|0))|0);
      $108 = ((($15)) + 36|0);
      HEAP32[$108>>2] = 0;
      $109 = HEAP32[$101>>2]|0;
      _hts_tpool_process_destroy($109);
     }
    }
    $110 = HEAP32[$16>>2]|0;
    $111 = ($110|0)==(119);
    do {
     if ($111) {
      $112 = ((($15)) + 8|0);
      $113 = HEAP32[$112>>2]|0;
      $$mask$i$i = $113 & -256;
      $114 = ($$mask$i$i|0)==(768);
      $115 = HEAP32[$15>>2]|0;
      $116 = ((($115)) + 12|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = ((($115)) + 4|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = (($117) - ($119))|0;
      if ($114) {
       $121 = ($120>>>0)>(38);
       $122 = $119;
       $$36 = $121 ? 38 : $120;
       _memcpy(($122|0),(20197|0),($$36|0))|0;
       $123 = HEAP32[$118>>2]|0;
       $124 = (($123) + ($$36)|0);
       HEAP32[$118>>2] = $124;
       $125 = ($$36|0)==(38);
       if ($125) {
        break;
       }
       $126 = HEAP32[$116>>2]|0;
       $127 = HEAP32[$115>>2]|0;
       $128 = (($126) - ($127))|0;
       $$cast1 = $127;
       $129 = ((($115)) + 16|0);
       $130 = ((($115)) + 20|0);
       $$in35 = $124;$buffer$0$i$i$i = $$cast1;
       while(1) {
        $131 = ($buffer$0$i$i$i>>>0)<($$in35>>>0);
        if (!($131)) {
         break;
        }
        $132 = $$in35;
        $133 = HEAP32[$129>>2]|0;
        $134 = ((($133)) + 4|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = $buffer$0$i$i$i;
        $137 = (($132) - ($136))|0;
        $138 = (FUNCTION_TABLE_iiii[$135 & 127]($115,$buffer$0$i$i$i,$137)|0);
        $139 = ($138|0)<(0);
        if ($139) {
         label = 41;
         break;
        }
        $145 = (($buffer$0$i$i$i) + ($138)|0);
        $146 = HEAP32[$130>>2]|0;
        $147 = (($146) + ($138))|0;
        HEAP32[$130>>2] = $147;
        $$pre16 = HEAP32[$118>>2]|0;
        $$in35 = $$pre16;$buffer$0$i$i$i = $145;
       }
       if ((label|0) == 41) {
        $140 = HEAP32[6773]|0;
        $141 = ($140|0)==(0|0);
        if ($141) {
         $$0$i$i15$i$i = 27136;
        } else {
         $142 = (_pthread_self()|0);
         $143 = ((($142)) + 64|0);
         $144 = HEAP32[$143>>2]|0;
         $$0$i$i15$i$i = $144;
        }
        $148 = HEAP32[$$0$i$i15$i$i>>2]|0;
        $149 = ((($115)) + 28|0);
        HEAP32[$149>>2] = $148;
        break L1;
       }
       $150 = HEAP32[$115>>2]|0;
       HEAP32[$118>>2] = $150;
       $151 = (20197 + ($$36)|0);
       $152 = (38 - ($$36))|0;
       $remaining$0$i$i$i$i = $152;$src$0$i$i$i$i = $151;
       while(1) {
        $153 = $remaining$0$i$i$i$i << 1;
        $154 = ($153>>>0)<($128>>>0);
        if ($154) {
         label = 52;
         break;
        }
        $155 = HEAP32[$129>>2]|0;
        $156 = ((($155)) + 4|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = (FUNCTION_TABLE_iiii[$157 & 127]($115,$src$0$i$i$i$i,$remaining$0$i$i$i$i)|0);
        $159 = ($158|0)<(0);
        if ($159) {
         break;
        }
        $167 = HEAP32[$130>>2]|0;
        $168 = (($167) + ($158))|0;
        HEAP32[$130>>2] = $168;
        $169 = (($src$0$i$i$i$i) + ($158)|0);
        $170 = (($remaining$0$i$i$i$i) - ($158))|0;
        $remaining$0$i$i$i$i = $170;$src$0$i$i$i$i = $169;
       }
       if ((label|0) == 52) {
        $171 = HEAP32[$118>>2]|0;
        _memcpy(($171|0),($src$0$i$i$i$i|0),($remaining$0$i$i$i$i|0))|0;
        $172 = HEAP32[$118>>2]|0;
        $173 = (($172) + ($remaining$0$i$i$i$i)|0);
        HEAP32[$118>>2] = $173;
        break;
       }
       $160 = HEAP32[6773]|0;
       $161 = ($160|0)==(0|0);
       if ($161) {
        $$0$i$i$i$i$i = 27136;
       } else {
        $162 = (_pthread_self()|0);
        $163 = ((($162)) + 64|0);
        $164 = HEAP32[$163>>2]|0;
        $$0$i$i$i$i$i = $164;
       }
       $165 = HEAP32[$$0$i$i$i$i$i>>2]|0;
       $166 = ((($115)) + 28|0);
       HEAP32[$166>>2] = $165;
       break L1;
      } else {
       $174 = ($120>>>0)>(30);
       $175 = $119;
       $$37 = $174 ? 30 : $120;
       _memcpy(($175|0),(20236|0),($$37|0))|0;
       $176 = HEAP32[$118>>2]|0;
       $177 = (($176) + ($$37)|0);
       HEAP32[$118>>2] = $177;
       $178 = ($$37|0)==(30);
       if ($178) {
        break;
       }
       $179 = HEAP32[$116>>2]|0;
       $180 = HEAP32[$115>>2]|0;
       $181 = (($179) - ($180))|0;
       $$cast = $180;
       $182 = ((($115)) + 16|0);
       $183 = ((($115)) + 20|0);
       $$in34 = $177;$buffer$0$i18$i$i = $$cast;
       while(1) {
        $184 = ($buffer$0$i18$i$i>>>0)<($$in34>>>0);
        if (!($184)) {
         break;
        }
        $185 = $$in34;
        $186 = HEAP32[$182>>2]|0;
        $187 = ((($186)) + 4|0);
        $188 = HEAP32[$187>>2]|0;
        $189 = $buffer$0$i18$i$i;
        $190 = (($185) - ($189))|0;
        $191 = (FUNCTION_TABLE_iiii[$188 & 127]($115,$buffer$0$i18$i$i,$190)|0);
        $192 = ($191|0)<(0);
        if ($192) {
         label = 57;
         break;
        }
        $198 = (($buffer$0$i18$i$i) + ($191)|0);
        $199 = HEAP32[$183>>2]|0;
        $200 = (($199) + ($191))|0;
        HEAP32[$183>>2] = $200;
        $$pre15 = HEAP32[$118>>2]|0;
        $$in34 = $$pre15;$buffer$0$i18$i$i = $198;
       }
       if ((label|0) == 57) {
        $193 = HEAP32[6773]|0;
        $194 = ($193|0)==(0|0);
        if ($194) {
         $$0$i$i19$i$i = 27136;
        } else {
         $195 = (_pthread_self()|0);
         $196 = ((($195)) + 64|0);
         $197 = HEAP32[$196>>2]|0;
         $$0$i$i19$i$i = $197;
        }
        $201 = HEAP32[$$0$i$i19$i$i>>2]|0;
        $202 = ((($115)) + 28|0);
        HEAP32[$202>>2] = $201;
        break L1;
       }
       $203 = HEAP32[$115>>2]|0;
       HEAP32[$118>>2] = $203;
       $204 = (20236 + ($$37)|0);
       $205 = (30 - ($$37))|0;
       $remaining$0$i$i4$i$i = $205;$src$0$i$i3$i$i = $204;
       while(1) {
        $206 = $remaining$0$i$i4$i$i << 1;
        $207 = ($206>>>0)<($181>>>0);
        if ($207) {
         label = 68;
         break;
        }
        $208 = HEAP32[$182>>2]|0;
        $209 = ((($208)) + 4|0);
        $210 = HEAP32[$209>>2]|0;
        $211 = (FUNCTION_TABLE_iiii[$210 & 127]($115,$src$0$i$i3$i$i,$remaining$0$i$i4$i$i)|0);
        $212 = ($211|0)<(0);
        if ($212) {
         break;
        }
        $220 = HEAP32[$183>>2]|0;
        $221 = (($220) + ($211))|0;
        HEAP32[$183>>2] = $221;
        $222 = (($src$0$i$i3$i$i) + ($211)|0);
        $223 = (($remaining$0$i$i4$i$i) - ($211))|0;
        $remaining$0$i$i4$i$i = $223;$src$0$i$i3$i$i = $222;
       }
       if ((label|0) == 68) {
        $224 = HEAP32[$118>>2]|0;
        _memcpy(($224|0),($src$0$i$i3$i$i|0),($remaining$0$i$i4$i$i|0))|0;
        $225 = HEAP32[$118>>2]|0;
        $226 = (($225) + ($remaining$0$i$i4$i$i)|0);
        HEAP32[$118>>2] = $226;
        break;
       }
       $213 = HEAP32[6773]|0;
       $214 = ($213|0)==(0|0);
       if ($214) {
        $$0$i$i$i5$i$i = 27136;
       } else {
        $215 = (_pthread_self()|0);
        $216 = ((($215)) + 64|0);
        $217 = HEAP32[$216>>2]|0;
        $$0$i$i$i5$i$i = $217;
       }
       $218 = HEAP32[$$0$i$i$i5$i$i>>2]|0;
       $219 = ((($115)) + 28|0);
       HEAP32[$219>>2] = $218;
       break L1;
      }
     }
    } while(0);
    $227 = ((($15)) + 34732|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = ((($15)) + 276|0);
    $230 = ((($15)) + 280|0);
    $bl$0$i$i = $228;
    while(1) {
     $231 = ($bl$0$i$i|0)==(0|0);
     if ($231) {
      break;
     }
     $232 = HEAP32[$229>>2]|0;
     $233 = HEAP32[$230>>2]|0;
     $234 = Math_imul($232, $233)|0;
     $235 = ((($bl$0$i$i)) + 4|0);
     $236 = HEAP32[$235>>2]|0;
     $i1$0$i$i = 0;
     while(1) {
      $237 = ($i1$0$i$i|0)<($234|0);
      if (!($237)) {
       break;
      }
      $238 = HEAP32[$bl$0$i$i>>2]|0;
      $239 = (($238) + ($i1$0$i$i<<2)|0);
      $240 = HEAP32[$239>>2]|0;
      $241 = ($240|0)==(0|0);
      if (!($241)) {
       $242 = ((($240)) + 40|0);
       $243 = HEAP32[$242>>2]|0;
       _free($243);
       _free($240);
      }
      $244 = (($i1$0$i$i) + 1)|0;
      $i1$0$i$i = $244;
     }
     $245 = HEAP32[$bl$0$i$i>>2]|0;
     _free($245);
     _free($bl$0$i$i);
     $bl$0$i$i = $236;
    }
    $246 = HEAP32[$15>>2]|0;
    $247 = ((($246)) + 28|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = ((($246)) + 4|0);
    $250 = HEAP32[$249>>2]|0;
    $251 = ((($246)) + 8|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = ($250>>>0)>($252>>>0);
    do {
     if ($253) {
      $254 = HEAP32[$246>>2]|0;
      $255 = ((($246)) + 16|0);
      $256 = ((($246)) + 20|0);
      $$in32 = $250;$buffer$0$i29$i$i = $254;
      while(1) {
       $257 = ($buffer$0$i29$i$i>>>0)<($$in32>>>0);
       if (!($257)) {
        label = 85;
        break;
       }
       $258 = $$in32;
       $259 = HEAP32[$255>>2]|0;
       $260 = ((($259)) + 4|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = $buffer$0$i29$i$i;
       $263 = (($258) - ($262))|0;
       $264 = (FUNCTION_TABLE_iiii[$261 & 127]($246,$buffer$0$i29$i$i,$263)|0);
       $265 = ($264|0)<(0);
       if ($265) {
        label = 82;
        break;
       }
       $271 = (($buffer$0$i29$i$i) + ($264)|0);
       $272 = HEAP32[$256>>2]|0;
       $273 = (($272) + ($264))|0;
       HEAP32[$256>>2] = $273;
       $$pre17 = HEAP32[$249>>2]|0;
       $$in32 = $$pre17;$buffer$0$i29$i$i = $271;
      }
      if ((label|0) == 82) {
       $266 = HEAP32[6773]|0;
       $267 = ($266|0)==(0|0);
       if ($267) {
        $storemerge33$in = 27136;
       } else {
        $268 = (_pthread_self()|0);
        $269 = ((($268)) + 64|0);
        $270 = HEAP32[$269>>2]|0;
        $storemerge33$in = $270;
       }
      }
      else if ((label|0) == 85) {
       $274 = HEAP32[$246>>2]|0;
       HEAP32[$249>>2] = $274;
       $275 = HEAP32[$255>>2]|0;
       $276 = ((($275)) + 12|0);
       $277 = HEAP32[$276>>2]|0;
       $278 = ($277|0)==(0|0);
       if ($278) {
        $$pre$phi25Z2D = $255;$err$0$i$i$i = $248;
        break;
       }
       $279 = (FUNCTION_TABLE_ii[$277 & 63]($246)|0);
       $280 = ($279|0)<(0);
       if (!($280)) {
        $$pre$phi25Z2D = $255;$err$0$i$i$i = $248;
        break;
       }
       $281 = HEAP32[6773]|0;
       $282 = ($281|0)==(0|0);
       if ($282) {
        $storemerge33$in = 27136;
       } else {
        $283 = (_pthread_self()|0);
        $284 = ((($283)) + 64|0);
        $285 = HEAP32[$284>>2]|0;
        $storemerge33$in = $285;
       }
      }
      $storemerge33 = HEAP32[$storemerge33$in>>2]|0;
      HEAP32[$247>>2] = $storemerge33;
      $$pre$phi25Z2D = $255;$err$0$i$i$i = $storemerge33;
     } else {
      $$pre24 = ((($246)) + 16|0);
      $$pre$phi25Z2D = $$pre24;$err$0$i$i$i = $248;
     }
    } while(0);
    $286 = HEAP32[$$pre$phi25Z2D>>2]|0;
    $287 = ((($286)) + 16|0);
    $288 = HEAP32[$287>>2]|0;
    $289 = (FUNCTION_TABLE_ii[$288 & 63]($246)|0);
    $290 = ($289|0)<(0);
    $291 = HEAP32[6773]|0;
    if ($290) {
     $292 = ($291|0)==(0|0);
     if ($292) {
      $$0$i27$i$i = 27136;
     } else {
      $293 = (_pthread_self()|0);
      $294 = ((($293)) + 64|0);
      $295 = HEAP32[$294>>2]|0;
      $$0$i27$i$i = $295;
     }
     $296 = HEAP32[$$0$i27$i$i>>2]|0;
     $err$1$i$i$i = $296;
    } else {
     $err$1$i$i$i = $err$0$i$i$i;
    }
    $297 = ($291|0)==(0|0);
    if ($297) {
     $$0$i$i11$i$i = 27136;
    } else {
     $298 = (_pthread_self()|0);
     $299 = ((($298)) + 64|0);
     $300 = HEAP32[$299>>2]|0;
     $$0$i$i11$i$i = $300;
    }
    $301 = HEAP32[$$0$i$i11$i$i>>2]|0;
    $302 = HEAP32[$246>>2]|0;
    _free($302);
    _free($246);
    $303 = HEAP32[6773]|0;
    $304 = ($303|0)==(0|0);
    if ($304) {
     $$0$i1$i13$i$i = 27136;
    } else {
     $305 = (_pthread_self()|0);
     $306 = ((($305)) + 64|0);
     $307 = HEAP32[$306>>2]|0;
     $$0$i1$i13$i$i = $307;
    }
    HEAP32[$$0$i1$i13$i$i>>2] = $301;
    $308 = ($err$1$i$i$i|0)==(0);
    if (!($308)) {
     $309 = HEAP32[6773]|0;
     $310 = ($309|0)==(0|0);
     if ($310) {
      $$0$i23$i$i = 27136;
     } else {
      $311 = (_pthread_self()|0);
      $312 = ((($311)) + 64|0);
      $313 = HEAP32[$312>>2]|0;
      $$0$i23$i$i = $313;
     }
     HEAP32[$$0$i23$i$i>>2] = $err$1$i$i$i;
     break L1;
    }
    $314 = ((($15)) + 12|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = ($315|0)==(0|0);
    if (!($316)) {
     _free($315);
    }
    $317 = ((($15)) + 16|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = ($318|0)==(0|0);
    if (!($319)) {
     $320 = ((($318)) + 1108|0);
     $321 = HEAP32[$320>>2]|0;
     $322 = (($321) + -1)|0;
     HEAP32[$320>>2] = $322;
     $323 = ($321|0)>(1);
     if (!($323)) {
      $324 = ((($318)) + 8|0);
      $325 = HEAP32[$324>>2]|0;
      $326 = ($325|0)==(0|0);
      if (!($326)) {
       _free($325);
      }
      $327 = ((($318)) + 12|0);
      $328 = HEAP32[$327>>2]|0;
      $329 = ($328|0)==(0|0);
      if (!($329)) {
       $330 = ((($328)) + 20|0);
       $331 = HEAP32[$330>>2]|0;
       _free($331);
       $332 = ((($328)) + 16|0);
       $333 = HEAP32[$332>>2]|0;
       _free($333);
       $334 = ((($328)) + 24|0);
       $335 = HEAP32[$334>>2]|0;
       _free($335);
       _free($328);
      }
      $336 = ((($318)) + 36|0);
      $337 = HEAP32[$336>>2]|0;
      $338 = ($337|0)==(0|0);
      if (!($338)) {
       $339 = ((($337)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       _free($340);
       $341 = ((($337)) + 16|0);
       $342 = HEAP32[$341>>2]|0;
       _free($342);
       $343 = ((($337)) + 24|0);
       $344 = HEAP32[$343>>2]|0;
       _free($344);
       _free($337);
      }
      $345 = ((($318)) + 32|0);
      $346 = HEAP32[$345>>2]|0;
      $347 = ($346|0)==(0|0);
      if (!($347)) {
       $348 = ((($318)) + 28|0);
       $i$0$i$i$i = 0;
       while(1) {
        $349 = HEAP32[$348>>2]|0;
        $350 = ($i$0$i$i$i|0)<($349|0);
        if (!($350)) {
         break;
        }
        $351 = HEAP32[$345>>2]|0;
        $352 = (($351) + ($i$0$i$i$i<<4)|0);
        $353 = HEAP32[$352>>2]|0;
        $354 = ($353|0)==(0|0);
        if (!($354)) {
         _free($353);
        }
        $355 = (($i$0$i$i$i) + 1)|0;
        $i$0$i$i$i = $355;
       }
       $356 = HEAP32[$345>>2]|0;
       _free($356);
      }
      $357 = ((($318)) + 48|0);
      $358 = HEAP32[$357>>2]|0;
      $359 = ($358|0)==(0|0);
      if (!($359)) {
       $360 = ((($358)) + 20|0);
       $361 = HEAP32[$360>>2]|0;
       _free($361);
       $362 = ((($358)) + 16|0);
       $363 = HEAP32[$362>>2]|0;
       _free($363);
       $364 = ((($358)) + 24|0);
       $365 = HEAP32[$364>>2]|0;
       _free($365);
       _free($358);
      }
      $366 = ((($318)) + 44|0);
      $367 = HEAP32[$366>>2]|0;
      $368 = ($367|0)==(0|0);
      if (!($368)) {
       $369 = ((($318)) + 40|0);
       $i1$0$i$i$i = 0;
       while(1) {
        $370 = HEAP32[$369>>2]|0;
        $371 = ($i1$0$i$i$i|0)<($370|0);
        if (!($371)) {
         break;
        }
        $372 = HEAP32[$366>>2]|0;
        $373 = (($372) + (($i1$0$i$i$i*20)|0)|0);
        $374 = HEAP32[$373>>2]|0;
        $375 = ($374|0)==(0|0);
        if (!($375)) {
         _free($374);
        }
        $376 = (($i1$0$i$i$i) + 1)|0;
        $i1$0$i$i$i = $376;
       }
       $377 = HEAP32[$366>>2]|0;
       _free($377);
      }
      $378 = ((($318)) + 68|0);
      $379 = HEAP32[$378>>2]|0;
      $380 = ($379|0)==(0|0);
      if (!($380)) {
       $381 = ((($379)) + 20|0);
       $382 = HEAP32[$381>>2]|0;
       _free($382);
       $383 = ((($379)) + 16|0);
       $384 = HEAP32[$383>>2]|0;
       _free($384);
       $385 = ((($379)) + 24|0);
       $386 = HEAP32[$385>>2]|0;
       _free($386);
       _free($379);
      }
      $387 = ((($318)) + 64|0);
      $388 = HEAP32[$387>>2]|0;
      $389 = ($388|0)==(0|0);
      if (!($389)) {
       $390 = ((($318)) + 52|0);
       $i2$0$i$i$i = 0;
       while(1) {
        $391 = HEAP32[$390>>2]|0;
        $392 = ($i2$0$i$i$i|0)<($391|0);
        if (!($392)) {
         break;
        }
        $393 = HEAP32[$387>>2]|0;
        $394 = (($393) + (($i2$0$i$i$i*24)|0)|0);
        $395 = HEAP32[$394>>2]|0;
        $396 = ($395|0)==(0|0);
        if (!($396)) {
         _free($395);
        }
        $397 = (($i2$0$i$i$i) + 1)|0;
        $i2$0$i$i$i = $397;
       }
       $398 = HEAP32[$387>>2]|0;
       _free($398);
      }
      $399 = ((($318)) + 72|0);
      $400 = HEAP32[$399>>2]|0;
      $401 = ($400|0)==(0|0);
      if (!($401)) {
       _free($400);
      }
      $402 = ((($318)) + 20|0);
      $403 = HEAP32[$402>>2]|0;
      $404 = ($403|0)==(0|0);
      if (!($404)) {
       $405 = ((($403)) + 8|0);
       $406 = ((($403)) + 12|0);
       $i$0$i$i$i$i = 0;
       while(1) {
        $407 = HEAP32[$405>>2]|0;
        $408 = ($i$0$i$i$i$i>>>0)<($407>>>0);
        if (!($408)) {
         break;
        }
        $409 = HEAP32[$406>>2]|0;
        $410 = (($409) + ($i$0$i$i$i$i<<3)|0);
        $411 = HEAP32[$410>>2]|0;
        _free($411);
        $412 = (($i$0$i$i$i$i) + 1)|0;
        $i$0$i$i$i$i = $412;
       }
       $413 = HEAP32[$406>>2]|0;
       _free($413);
       _free($403);
      }
      $414 = ((($318)) + 24|0);
      $415 = HEAP32[$414>>2]|0;
      $416 = ($415|0)==(0|0);
      if (!($416)) {
       $417 = ((($415)) + 8|0);
       $418 = ((($415)) + 12|0);
       $i$0$i3$i$i$i = 0;
       while(1) {
        $419 = HEAP32[$417>>2]|0;
        $420 = ($i$0$i3$i$i$i>>>0)<($419>>>0);
        if (!($420)) {
         break;
        }
        $421 = HEAP32[$418>>2]|0;
        $422 = (($421) + ($i$0$i3$i$i$i<<3)|0);
        $423 = HEAP32[$422>>2]|0;
        _free($423);
        $424 = (($i$0$i3$i$i$i) + 1)|0;
        $i$0$i3$i$i$i = $424;
       }
       $425 = HEAP32[$418>>2]|0;
       _free($425);
       _free($415);
      }
      $426 = ((($318)) + 16|0);
      $427 = HEAP32[$426>>2]|0;
      $428 = ($427|0)==(0|0);
      if (!($428)) {
       $429 = ((($427)) + 4|0);
       $430 = ((($427)) + 8|0);
       $i$0$i5$i$i$i = 0;
       while(1) {
        $431 = HEAP32[$429>>2]|0;
        $432 = ($i$0$i5$i$i$i>>>0)<($431>>>0);
        if (!($432)) {
         break;
        }
        $433 = HEAP32[$430>>2]|0;
        $434 = (($433) + ($i$0$i5$i$i$i<<3)|0);
        $435 = HEAP32[$434>>2]|0;
        _free($435);
        $436 = (($i$0$i5$i$i$i) + 1)|0;
        $i$0$i5$i$i$i = $436;
       }
       $437 = HEAP32[$430>>2]|0;
       _free($437);
       _free($427);
      }
      _free($318);
     }
    }
    $438 = ((($15)) + 20|0);
    $439 = HEAP32[$438>>2]|0;
    _free($439);
    $440 = ((($15)) + 36|0);
    $441 = HEAP32[$440>>2]|0;
    $442 = ($441|0)==(0|0);
    if (!($442)) {
     _cram_free_container($441);
    }
    $443 = ((($15)) + 48|0);
    $444 = HEAP32[$443>>2]|0;
    $445 = ($444|0)==(0|0);
    if (!($445)) {
     _refs_free($444);
    }
    $446 = ((($15)) + 56|0);
    $447 = HEAP32[$446>>2]|0;
    $448 = ($447|0)==(0|0);
    if ($448) {
     $i$0$i$i = 0;
    } else {
     _free($447);
     $i$0$i$i = 0;
    }
    while(1) {
     $exitcond = ($i$0$i$i|0)==(47);
     if ($exitcond) {
      break;
     }
     $449 = (((($15)) + 80|0) + ($i$0$i$i<<2)|0);
     $450 = HEAP32[$449>>2]|0;
     $451 = ($450|0)==(0|0);
     if (!($451)) {
      _free($450);
     }
     $452 = (($i$0$i$i) + 1)|0;
     $i$0$i$i = $452;
    }
    $453 = ((($15)) + 34636|0);
    $454 = HEAP32[$453>>2]|0;
    $455 = ($454|0)==(0|0);
    if (!($455)) {
     $456 = ((($15)) + 34632|0);
     $i$0$i14$i$i = 0;
     while(1) {
      $457 = HEAP32[$456>>2]|0;
      $458 = ($i$0$i14$i$i|0)<($457|0);
      if (!($458)) {
       break;
      }
      $459 = HEAP32[$453>>2]|0;
      $460 = (($459) + (($i$0$i14$i$i*48)|0)|0);
      _cram_index_free_recurse($460);
      $461 = (($i$0$i14$i$i) + 1)|0;
      $i$0$i14$i$i = $461;
     }
     $462 = HEAP32[$453>>2]|0;
     _free($462);
     HEAP32[$453>>2] = 0;
    }
    $463 = ((($15)) + 34664|0);
    $464 = HEAP32[$463>>2]|0;
    $465 = ($464|0)==(0);
    if (!($465)) {
     $466 = HEAP32[$95>>2]|0;
     $467 = ($466|0)==(0|0);
     if (!($467)) {
      _hts_tpool_destroy($466);
     }
    }
    _free($15);
   }
   break;
  }
  case 8: case 3: case 2:  {
   $468 = HEAP32[$2>>2]|0;
   $469 = $468 & 2;
   $470 = ($469|0)==(0);
   if ($470) {
    $471 = ((($2)) + 36|0);
    $472 = HEAP32[$471>>2]|0;
    $473 = ((($472)) + 24|0);
    $474 = HEAP32[$473>>2]|0;
    (_bgzf_close($474)|0);
    $475 = HEAP32[$471>>2]|0;
    $476 = ($475|0)==(0|0);
    if ($476) {
     break L1;
    }
    $477 = ((($475)) + 28|0);
    $478 = HEAP32[$477>>2]|0;
    _free($478);
    _free($475);
    break L1;
   }
   $479 = ((($2)) + 52|0);
   $480 = HEAP32[$479>>2]|0;
   $481 = ($480|0)==(0);
   if (!($481)) {
    $482 = ((($2)) + 36|0);
    $483 = HEAP32[$482>>2]|0;
    (_bgzf_close($483)|0);
    break L1;
   }
   $484 = ((($2)) + 36|0);
   $485 = HEAP32[$484>>2]|0;
   $486 = ((($485)) + 28|0);
   $487 = HEAP32[$486>>2]|0;
   $488 = ((($485)) + 4|0);
   $489 = HEAP32[$488>>2]|0;
   $490 = ((($485)) + 8|0);
   $491 = HEAP32[$490>>2]|0;
   $492 = ($489>>>0)>($491>>>0);
   do {
    if ($492) {
     $493 = HEAP32[$485>>2]|0;
     $494 = ((($485)) + 16|0);
     $495 = ((($485)) + 20|0);
     $$in = $489;$buffer$0$i$i = $493;
     while(1) {
      $496 = ($buffer$0$i$i>>>0)<($$in>>>0);
      if (!($496)) {
       label = 187;
       break;
      }
      $497 = $$in;
      $498 = HEAP32[$494>>2]|0;
      $499 = ((($498)) + 4|0);
      $500 = HEAP32[$499>>2]|0;
      $501 = $buffer$0$i$i;
      $502 = (($497) - ($501))|0;
      $503 = (FUNCTION_TABLE_iiii[$500 & 127]($485,$buffer$0$i$i,$502)|0);
      $504 = ($503|0)<(0);
      if ($504) {
       label = 184;
       break;
      }
      $510 = (($buffer$0$i$i) + ($503)|0);
      $511 = HEAP32[$495>>2]|0;
      $512 = (($511) + ($503))|0;
      HEAP32[$495>>2] = $512;
      $$pre = HEAP32[$488>>2]|0;
      $$in = $$pre;$buffer$0$i$i = $510;
     }
     if ((label|0) == 184) {
      $505 = HEAP32[6773]|0;
      $506 = ($505|0)==(0|0);
      if ($506) {
       $storemerge$in = 27136;
      } else {
       $507 = (_pthread_self()|0);
       $508 = ((($507)) + 64|0);
       $509 = HEAP32[$508>>2]|0;
       $storemerge$in = $509;
      }
     }
     else if ((label|0) == 187) {
      $513 = HEAP32[$485>>2]|0;
      HEAP32[$488>>2] = $513;
      $514 = HEAP32[$494>>2]|0;
      $515 = ((($514)) + 12|0);
      $516 = HEAP32[$515>>2]|0;
      $517 = ($516|0)==(0|0);
      if ($517) {
       $$pre$phi27Z2D = $494;$err$0$i$i = $487;
       break;
      }
      $518 = (FUNCTION_TABLE_ii[$516 & 63]($485)|0);
      $519 = ($518|0)<(0);
      if (!($519)) {
       $$pre$phi27Z2D = $494;$err$0$i$i = $487;
       break;
      }
      $520 = HEAP32[6773]|0;
      $521 = ($520|0)==(0|0);
      if ($521) {
       $storemerge$in = 27136;
      } else {
       $522 = (_pthread_self()|0);
       $523 = ((($522)) + 64|0);
       $524 = HEAP32[$523>>2]|0;
       $storemerge$in = $524;
      }
     }
     $storemerge = HEAP32[$storemerge$in>>2]|0;
     HEAP32[$486>>2] = $storemerge;
     $$pre$phi27Z2D = $494;$err$0$i$i = $storemerge;
    } else {
     $$pre26 = ((($485)) + 16|0);
     $$pre$phi27Z2D = $$pre26;$err$0$i$i = $487;
    }
   } while(0);
   $525 = HEAP32[$$pre$phi27Z2D>>2]|0;
   $526 = ((($525)) + 16|0);
   $527 = HEAP32[$526>>2]|0;
   $528 = (FUNCTION_TABLE_ii[$527 & 63]($485)|0);
   $529 = ($528|0)<(0);
   $530 = HEAP32[6773]|0;
   if ($529) {
    $531 = ($530|0)==(0|0);
    if ($531) {
     $$0$i12$i = 27136;
    } else {
     $532 = (_pthread_self()|0);
     $533 = ((($532)) + 64|0);
     $534 = HEAP32[$533>>2]|0;
     $$0$i12$i = $534;
    }
    $535 = HEAP32[$$0$i12$i>>2]|0;
    $err$1$i$i = $535;
   } else {
    $err$1$i$i = $err$0$i$i;
   }
   $536 = ($530|0)==(0|0);
   if ($536) {
    $$0$i$i3$i = 27136;
   } else {
    $537 = (_pthread_self()|0);
    $538 = ((($537)) + 64|0);
    $539 = HEAP32[$538>>2]|0;
    $$0$i$i3$i = $539;
   }
   $540 = HEAP32[$$0$i$i3$i>>2]|0;
   $541 = HEAP32[$485>>2]|0;
   _free($541);
   _free($485);
   $542 = HEAP32[6773]|0;
   $543 = ($542|0)==(0|0);
   if ($543) {
    $$0$i1$i$i = 27136;
   } else {
    $544 = (_pthread_self()|0);
    $545 = ((($544)) + 64|0);
    $546 = HEAP32[$545>>2]|0;
    $$0$i1$i$i = $546;
   }
   HEAP32[$$0$i1$i$i>>2] = $540;
   $547 = ($err$1$i$i|0)==(0);
   if (!($547)) {
    $548 = HEAP32[6773]|0;
    $549 = ($548|0)==(0|0);
    if ($549) {
     $$0$i7$i = 27136;
    } else {
     $550 = (_pthread_self()|0);
     $551 = ((($550)) + 64|0);
     $552 = HEAP32[$551>>2]|0;
     $$0$i7$i = $552;
    }
    HEAP32[$$0$i7$i>>2] = $err$1$i$i;
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $553 = HEAP32[6773]|0;
 $554 = ($553|0)==(0|0);
 if ($554) {
  $$0$i5$i = 27136;
 } else {
  $555 = (_pthread_self()|0);
  $556 = ((($555)) + 64|0);
  $557 = HEAP32[$556>>2]|0;
  $$0$i5$i = $557;
 }
 $558 = HEAP32[$$0$i5$i>>2]|0;
 $559 = ((($2)) + 28|0);
 $560 = HEAP32[$559>>2]|0;
 _free($560);
 $561 = ((($2)) + 32|0);
 $562 = HEAP32[$561>>2]|0;
 _free($562);
 $563 = ((($2)) + 24|0);
 $564 = HEAP32[$563>>2]|0;
 _free($564);
 _free($2);
 $565 = HEAP32[6773]|0;
 $566 = ($565|0)==(0|0);
 if ($566) {
  $$0$i$i = 27136;
 } else {
  $567 = (_pthread_self()|0);
  $568 = ((($567)) + 64|0);
  $569 = HEAP32[$568>>2]|0;
  $$0$i$i = $569;
 }
 HEAP32[$$0$i$i>>2] = $558;
 $570 = (__ZNSt3__13mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEEixERS7_($0)|0);
 $571 = HEAP32[$570>>2]|0;
 $572 = ($571|0)==(0|0);
 if ($572) {
  STACKTOP = sp;return;
 }
 _free($571);
 STACKTOP = sp;return;
}
function _test($fd) {
 $fd = $fd|0;
 var $$ = 0, $$$i$i$i = 0, $$$i$i2$i = 0, $$$i1$i$i = 0, $$$i2$i$i = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i1$i$i = 0, $$0$i11$i6 = 0, $$0$i16$i = 0, $$0$i20$i = 0, $$0$i39$i = 0, $$0$lcssa$i$i$i$i = 0, $$01$lcssa$i$i$i = 0, $$014$i$i$i = 0, $$02$lcssa$i$i = 0, $$02$lcssa$i26$i = 0;
 var $$0211$i$i = 0, $$0211$i23$i = 0, $$03$i$i$i = 0, $$03$i$i$i$i$i = 0, $$03$i$i17$i = 0, $$031$i$i$i$i = 0, $$04$lcssa$i$i$i$i = 0, $$0430$i$i$i$i = 0, $$06$lcssa$i$i$i$i = 0, $$0629$i$i$i$i = 0, $$08$i$i = 0, $$08$i$i$i = 0, $$08$i$i48$i = 0, $$08$i18$i$i = 0, $$08$i5$i$i = 0, $$08$in$i$i = 0, $$08$in$i$i$i = 0, $$08$in$i$i45$i = 0, $$08$in$i15$i$i = 0, $$08$in$i2$i$i = 0;
 var $$1$i$i = 0, $$1$i35$i = 0, $$1$lcssa$i$i$i = 0, $$1$lcssa$i$i$i$i = 0, $$117$i$i$i$i = 0, $$15$ph$i$i$i$i = 0, $$1511$i$i$i$i = 0, $$17$ph$i$i$i$i = 0, $$1710$i$i$i$i = 0, $$2$ph$i$i$i$i = 0, $$212$i$i$i$i = 0, $$28$i$i$i$i = 0, $$3$i$i$i$i = 0, $$cast$i$i = 0, $$has_SQ$0$i = 0, $$lcssa$i$i$i$i = 0, $$ph16 = 0, $$ph20 = 0, $$pn$i$i$i = 0, $$pn15$i$i$i = 0;
 var $$pr = 0, $$pr5 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$phi54Z2D = 0, $$pre$phi57Z2D = 0, $$pre40 = 0, $$pre41 = 0, $$pre43 = 0, $$pre44 = 0, $$pre45 = 0, $$pre47 = 0, $$pre50 = 0, $$sink$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $absent$i$i = 0, $buf$0 = 0, $buf$1 = 0, $buf$i$i = 0, $buf$i$i$i$i = 0, $bytes$0$i$i = 0, $exitcond = 0, $f$i$i$i = 0, $has_SQ$0$i = 0, $has_SQ$1$i = 0, $has_eof$0$i$i$i = 0, $i$0 = 0, $i$0$i$i = 0;
 var $i$0$i5$i = 0, $k$0$i$i$i = 0, $l$04$i$i$i$i$i = 0, $l$06$i$i = 0, $l$06$i$i$i = 0, $l$06$i$i47$i = 0, $l$06$i17$i$i = 0, $l$06$i4$i$i = 0, $line$i = 0, $ln$0$i$i = 0, $ln$2$i$i = 0, $loop_var1$0 = 0, $max_buf$0 = 0, $max_buf$1 = 0, $name_len$i$i = 0, $num_names$1$i$i$ph = 0, $num_names$2$i$i = 0, $num_names$3$i$i = 0, $num_names$4$i$i2 = 0, $or$cond = 0;
 var $or$cond$i$i = 0, $or$cond$i$i$i = 0, $or$cond$i$i$i$i = 0, $or$cond$i$i49$i = 0, $or$cond$i19$i$i = 0, $or$cond$i6$i$i = 0, $or$cond28$i$i$i$i = 0, $or$cond4$i$i = 0, $or$cond4$i$i$i = 0, $or$cond4$i$i50$i = 0, $or$cond4$i20$i$i = 0, $or$cond4$i7$i$i = 0, $p$0$i$i = 0, $p$2$i$i = 0, $q$i$i$sroa$0$0 = 0, $q$i$i$sroa$0$1 = 0, $r$0$i$i = 0, $r$0$lcssa$i$i$i = 0, $r$0$lcssa$i$i$ph = 0, $r$0$lcssa$i$i55$i$ph = 0;
 var $r$0$lcssa$i12$i$i = 0, $r$0$lcssa$i25$i$i = 0, $r$05$i$i$i$i$i = 0, $r$07$i$i = 0, $r$07$i$i$i = 0, $r$07$i$i46$i = 0, $r$07$i16$i$i = 0, $r$07$i3$i$i = 0, $req$0$i$i$i = 0, $req$0$i$i3$i = 0, $req$0$i2$i$i = 0, $req$0$i3$i$i = 0, $rtn$0 = 0, $sn$0$i$i = 0, $sn$1$i$i = 0, $storemerge$i$i = 0, $str$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0;
 var $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer27 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $w$0$i$i$i = 0, $w$0$lcssa$i$i = 0, $w$0$lcssa$i33$i = 0, $w$08$i$i = 0, $w$08$i29$i = 0, $wd$0$lcssa$i$i$i$i = 0, $wd$018$i$i$i$i = 0, $ws$0$lcssa$i$i$i$i = 0, $ws$019$i$i$i$i = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer27 = sp + 72|0;
 $vararg_buffer23 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $f$i$i$i = sp + 104|0;
 $absent$i$i = sp + 100|0;
 $buf$i$i$i$i = sp + 2268|0;
 $buf$i$i = sp + 2264|0;
 $name_len$i$i = sp + 96|0;
 $str$i = sp + 84|0;
 $line$i = sp + 216|0;
 $0 = sp + 80|0;
 HEAP32[$0>>2] = $fd;
 $1 = (__ZNSt3__13mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEEixERS7_($0)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 L1: do {
  switch ($4|0) {
  case 4:  {
   $5 = ((($2)) + 36|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($6)) + 56|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $31 = ((($6)) + 52|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ((($32)) + 20|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($32)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = HEAP32[$32>>2]|0;
    $38 = (($36) - ($37))|0;
    $39 = (($34) + ($38))|0;
    $40 = (_hseek($32,-28,2)|0);
    $41 = ($40|0)<(0);
    do {
     if ($41) {
      $42 = HEAP32[6773]|0;
      $43 = ($42|0)==(0|0);
      if ($43) {
       $$0$i$i$i$i$i = 27136;
      } else {
       $44 = (_pthread_self()|0);
       $45 = ((($44)) + 64|0);
       $46 = HEAP32[$45>>2]|0;
       $$0$i$i$i$i$i = $46;
      }
      $47 = HEAP32[$$0$i$i$i$i$i>>2]|0;
      $48 = ($47|0)==(29);
      if ($48) {
       $49 = HEAP32[$31>>2]|0;
       $50 = ((($49)) + 28|0);
       HEAP32[$50>>2] = 0;
       $$0$i$i$i$i = 2;
      } else {
       $$0$i$i$i$i = -1;
      }
     } else {
      $51 = HEAP32[$31>>2]|0;
      $52 = ((($51)) + 8|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = ((($51)) + 4|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = (($53) - ($55))|0;
      $57 = ($56>>>0)>(28);
      $58 = $55;
      $$ = $57 ? 28 : $56;
      _memcpy(($buf$i$i$i$i|0),($58|0),($$|0))|0;
      $59 = HEAP32[$54>>2]|0;
      $60 = (($59) + ($$)|0);
      HEAP32[$54>>2] = $60;
      $61 = ($$|0)==(28);
      if (!($61)) {
       $62 = (_hread2($51,$buf$i$i$i$i,28,$$)|0);
       $63 = ($62|0)==(28);
       if (!($63)) {
        $$0$i$i$i$i = -1;
        break;
       }
      }
      $64 = HEAP32[$31>>2]|0;
      $65 = (_hseek($64,$39,0)|0);
      $66 = ($65|0)<(0);
      if ($66) {
       $$0$i$i$i$i = -1;
      } else {
       $$03$i$i$i$i$i = 28;$l$04$i$i$i$i$i = 14893;$r$05$i$i$i$i$i = $buf$i$i$i$i;
       while(1) {
        $67 = HEAP8[$l$04$i$i$i$i$i>>0]|0;
        $68 = HEAP8[$r$05$i$i$i$i$i>>0]|0;
        $69 = ($67<<24>>24)==($68<<24>>24);
        if (!($69)) {
         label = 14;
         break;
        }
        $70 = (($$03$i$i$i$i$i) + -1)|0;
        $71 = ((($l$04$i$i$i$i$i)) + 1|0);
        $72 = ((($r$05$i$i$i$i$i)) + 1|0);
        $73 = ($70|0)==(0);
        if ($73) {
         $78 = 0;
         break;
        } else {
         $$03$i$i$i$i$i = $70;$l$04$i$i$i$i$i = $71;$r$05$i$i$i$i$i = $72;
        }
       }
       if ((label|0) == 14) {
        $74 = $67&255;
        $75 = $68&255;
        $76 = (($74) - ($75))|0;
        $78 = $76;
       }
       $77 = ($78|0)==(0);
       $79 = $77&1;
       $$0$i$i$i$i = $79;
      }
     }
    } while(0);
    $has_eof$0$i$i$i = $$0$i$i$i$i;
   } else {
    $10 = ((($8)) + 84|0);
    (_pthread_mutex_lock(($10|0))|0);
    $11 = HEAP32[$7>>2]|0;
    $12 = ((($11)) + 160|0);
    HEAP32[$12>>2] = 2;
    $13 = HEAP32[$7>>2]|0;
    $14 = ((($13)) + 112|0);
    (_pthread_cond_signal(($14|0))|0);
    $15 = HEAP32[$7>>2]|0;
    $16 = ((($15)) + 20|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 32|0);
    (_pthread_mutex_lock(($19|0))|0);
    $20 = ((($17)) + 60|0);
    HEAP32[$20>>2] = 1;
    $21 = ((($17)) + 116|0);
    (_pthread_cond_signal(($21|0))|0);
    $22 = HEAP32[$17>>2]|0;
    $23 = ((($22)) + 32|0);
    (_pthread_mutex_unlock(($23|0))|0);
    $24 = HEAP32[$7>>2]|0;
    $25 = ((($24)) + 112|0);
    $26 = ((($24)) + 84|0);
    (_pthread_cond_wait(($25|0),($26|0))|0);
    $27 = HEAP32[$7>>2]|0;
    $28 = ((($27)) + 80|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($27)) + 84|0);
    (_pthread_mutex_unlock(($30|0))|0);
    $has_eof$0$i$i$i = $29;
   }
   $80 = ($has_eof$0$i$i$i|0)<(0);
   if ($80) {
    _perror(15801);
   } else {
    $81 = ($has_eof$0$i$i$i|0)==(0);
    if ($81) {
     HEAP32[$vararg_buffer>>2] = 15898;
     _fprintf(9772,15834,$vararg_buffer);
    }
   }
   $82 = (_bgzf_read($6,$buf$i$i,4)|0);
   $83 = ($82|0)==(4);
   L30: do {
    if ($83) {
     $84 = HEAP8[$buf$i$i>>0]|0;
     $85 = ($84<<24>>24)==(0);
     L32: do {
      if ($85) {
       $97 = 0;$r$0$lcssa$i$i$i = 15911;
      } else {
       $$08$in$i$i$i = 4;$90 = $84;$l$06$i$i$i = $buf$i$i;$r$07$i$i$i = 15911;
       while(1) {
        $$08$i$i$i = (($$08$in$i$i$i) + -1)|0;
        $86 = HEAP8[$r$07$i$i$i>>0]|0;
        $87 = ($86<<24>>24)!=(0);
        $88 = ($$08$i$i$i|0)!=(0);
        $or$cond$i$i$i = $88 & $87;
        $89 = ($90<<24>>24)==($86<<24>>24);
        $or$cond4$i$i$i = $89 & $or$cond$i$i$i;
        if (!($or$cond4$i$i$i)) {
         $97 = $90;$r$0$lcssa$i$i$i = $r$07$i$i$i;
         break L32;
        }
        $91 = ((($l$06$i$i$i)) + 1|0);
        $92 = ((($r$07$i$i$i)) + 1|0);
        $93 = HEAP8[$91>>0]|0;
        $94 = ($93<<24>>24)==(0);
        if ($94) {
         $97 = 0;$r$0$lcssa$i$i$i = $92;
         break;
        } else {
         $$08$in$i$i$i = $$08$i$i$i;$90 = $93;$l$06$i$i$i = $91;$r$07$i$i$i = $92;
        }
       }
      }
     } while(0);
     $95 = HEAP8[$r$0$lcssa$i$i$i>>0]|0;
     $96 = ($97<<24>>24)==($95<<24>>24);
     if ($96) {
      $98 = (_malloc(32)|0);
      $99 = ($98|0)==(0|0);
      if ($99) {
       HEAP32[$vararg_buffer16>>2] = 15898;
       _fprintf(9772,15951,$vararg_buffer16);
       $$0$i$i = 0;
       break;
      }
      $100 = ((($98)) + -4|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = $101 & 3;
      $103 = ($102|0)==(0);
      if (!($103)) {
       dest=$98; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      }
      $104 = ((($98)) + 8|0);
      $105 = (_bgzf_read($6,$104,4)|0);
      $106 = ($105|0)==(4);
      L44: do {
       if ($106) {
        $107 = HEAP32[$6>>2]|0;
        $108 = $107 & 786432;
        $109 = ($108|0)==(0);
        $$pre47 = HEAP32[$104>>2]|0;
        if ($109) {
         $112 = $$pre47;
        } else {
         $110 = (_llvm_bswap_i32(($$pre47|0))|0);
         HEAP32[$104>>2] = $110;
         $112 = $110;
        }
        $111 = ($112|0)==(-1);
        L49: do {
         if ($111) {
          $num_names$1$i$i$ph = 0;
         } else {
          $113 = (($112) + 1)|0;
          $114 = (_malloc($113)|0);
          $115 = ((($98)) + 24|0);
          HEAP32[$115>>2] = $114;
          $116 = ($114|0)==(0|0);
          if ($116) {
           $num_names$1$i$i$ph = 0;
          } else {
           $117 = HEAP32[$104>>2]|0;
           $118 = (($114) + ($117)|0);
           HEAP8[$118>>0] = 0;
           $119 = HEAP32[$115>>2]|0;
           $120 = HEAP32[$104>>2]|0;
           $121 = (_bgzf_read($6,$119,$120)|0);
           $122 = HEAP32[$104>>2]|0;
           $123 = ($121|0)==($122|0);
           if (!($123)) {
            $bytes$0$i$i = $121;$num_names$2$i$i = 0;
            label = 71;
            break L44;
           }
           $124 = (_bgzf_read($6,$98,4)|0);
           $125 = ($124|0)==(4);
           if (!($125)) {
            $bytes$0$i$i = $124;$num_names$2$i$i = 0;
            label = 71;
            break L44;
           }
           $126 = HEAP32[$6>>2]|0;
           $127 = $126 & 786432;
           $128 = ($127|0)==(0);
           $$pre50 = HEAP32[$98>>2]|0;
           if ($128) {
            $131 = $$pre50;
           } else {
            $129 = (_llvm_bswap_i32(($$pre50|0))|0);
            HEAP32[$98>>2] = $129;
            $131 = $129;
           }
           $130 = ($131|0)<(0);
           L57: do {
            if ($130) {
             $num_names$3$i$i = 0;
            } else {
             $132 = ($131|0)>(0);
             if ($132) {
              $133 = $131 << 2;
              $134 = ($131>>>0)>(65535);
              if ($134) {
               $135 = (($133>>>0) / ($131>>>0))&-1;
               $136 = ($135|0)==(4);
               $$$i$i$i = $136 ? $133 : -1;
               $req$0$i$i$i = $$$i$i$i;
              } else {
               $req$0$i$i$i = $133;
              }
              $137 = (_malloc($req$0$i$i$i)|0);
              $138 = ($137|0)==(0|0);
              if ($138) {
               $143 = ((($98)) + 20|0);
               HEAP32[$143>>2] = 0;
               $num_names$1$i$i$ph = 0;
               break L49;
              }
              $139 = ((($137)) + -4|0);
              $140 = HEAP32[$139>>2]|0;
              $141 = $140 & 3;
              $142 = ($141|0)==(0);
              if (!($142)) {
               _memset(($137|0),0,($req$0$i$i$i|0))|0;
              }
              $144 = ((($98)) + 20|0);
              HEAP32[$144>>2] = $137;
              $145 = HEAP32[$98>>2]|0;
              $146 = ($145|0)==(0);
              do {
               if ($146) {
                $req$0$i2$i$i = 0;
               } else {
                $147 = $145 << 2;
                $148 = ($145>>>0)>(65535);
                if (!($148)) {
                 $req$0$i2$i$i = $147;
                 break;
                }
                $149 = (($147>>>0) / ($145>>>0))&-1;
                $150 = ($149|0)==(4);
                $$$i1$i$i = $150 ? $147 : -1;
                $req$0$i2$i$i = $$$i1$i$i;
               }
              } while(0);
              $151 = (_malloc($req$0$i2$i$i)|0);
              $152 = ($151|0)==(0|0);
              if ($152) {
               $157 = ((($98)) + 12|0);
               HEAP32[$157>>2] = 0;
               $num_names$1$i$i$ph = 0;
               break L49;
              }
              $153 = ((($151)) + -4|0);
              $154 = HEAP32[$153>>2]|0;
              $155 = $154 & 3;
              $156 = ($155|0)==(0);
              if (!($156)) {
               _memset(($151|0),0,($req$0$i2$i$i|0))|0;
              }
              $158 = ((($98)) + 12|0);
              HEAP32[$158>>2] = $151;
              $$pre$phi54Z2D = $144;$$pre$phi57Z2D = $158;
             } else {
              $159 = ((($98)) + 20|0);
              HEAP32[$159>>2] = 0;
              $160 = ((($98)) + 12|0);
              HEAP32[$160>>2] = 0;
              $$pre$phi54Z2D = $159;$$pre$phi57Z2D = $160;
             }
             $i$0$i$i = 0;
             while(1) {
              $161 = HEAP32[$98>>2]|0;
              $162 = ($i$0$i$i|0)==($161|0);
              if ($162) {
               $$0$i$i = $98;
               break L30;
              }
              $163 = (_bgzf_read($6,$name_len$i$i,4)|0);
              $164 = ($163|0)==(4);
              if (!($164)) {
               $bytes$0$i$i = $163;$num_names$2$i$i = $i$0$i$i;
               label = 71;
               break L44;
              }
              $165 = HEAP32[$6>>2]|0;
              $166 = $165 & 786432;
              $167 = ($166|0)==(0);
              $$pr = HEAP32[$name_len$i$i>>2]|0;
              if ($167) {
               $170 = $$pr;
              } else {
               $168 = (_llvm_bswap_i32(($$pr|0))|0);
               HEAP32[$name_len$i$i>>2] = $168;
               $170 = $168;
              }
              $169 = ($170|0)<(1);
              if ($169) {
               $num_names$3$i$i = $i$0$i$i;
               break L57;
              }
              $171 = (_malloc($170)|0);
              $172 = HEAP32[$$pre$phi54Z2D>>2]|0;
              $173 = (($172) + ($i$0$i$i<<2)|0);
              HEAP32[$173>>2] = $171;
              $174 = HEAP32[$$pre$phi54Z2D>>2]|0;
              $175 = (($174) + ($i$0$i$i<<2)|0);
              $176 = HEAP32[$175>>2]|0;
              $177 = ($176|0)==(0|0);
              if ($177) {
               $num_names$1$i$i$ph = $i$0$i$i;
               break L49;
              }
              $178 = (($i$0$i$i) + 1)|0;
              $179 = (_bgzf_read($6,$176,$170)|0);
              $180 = ($179|0)==($170|0);
              if (!($180)) {
               $bytes$0$i$i = $179;$num_names$2$i$i = $178;
               label = 71;
               break L44;
              }
              $181 = (($170) + -1)|0;
              $182 = HEAP32[$$pre$phi54Z2D>>2]|0;
              $183 = (($182) + ($i$0$i$i<<2)|0);
              $184 = HEAP32[$183>>2]|0;
              $185 = (($184) + ($181)|0);
              $186 = HEAP8[$185>>0]|0;
              $187 = ($186<<24>>24)==(0);
              if (!($187)) {
               $188 = ($170|0)==(2147483647);
               if ($188) {
                $num_names$3$i$i = $178;
                break L57;
               }
               $189 = (($170) + 1)|0;
               $190 = (_realloc($184,$189)|0);
               $191 = ($190|0)==(0|0);
               if ($191) {
                $num_names$1$i$i$ph = $178;
                break L49;
               }
               $192 = HEAP32[$$pre$phi54Z2D>>2]|0;
               $193 = (($192) + ($i$0$i$i<<2)|0);
               HEAP32[$193>>2] = $190;
               $194 = HEAP32[$$pre$phi54Z2D>>2]|0;
               $195 = (($194) + ($i$0$i$i<<2)|0);
               $196 = HEAP32[$195>>2]|0;
               $197 = (($196) + ($170)|0);
               HEAP8[$197>>0] = 0;
              }
              $198 = HEAP32[$$pre$phi57Z2D>>2]|0;
              $199 = (($198) + ($i$0$i$i<<2)|0);
              $200 = (_bgzf_read($6,$199,4)|0);
              $201 = ($200|0)==(4);
              if (!($201)) {
               $bytes$0$i$i = $200;$num_names$2$i$i = $178;
               label = 71;
               break L44;
              }
              $202 = HEAP32[$6>>2]|0;
              $203 = $202 & 786432;
              $204 = ($203|0)==(0);
              if ($204) {
               $i$0$i$i = $178;
               continue;
              }
              $205 = HEAP32[$$pre$phi57Z2D>>2]|0;
              $206 = (($205) + ($i$0$i$i<<2)|0);
              $207 = HEAP32[$206>>2]|0;
              $208 = (_llvm_bswap_i32(($207|0))|0);
              HEAP32[$206>>2] = $208;
              $i$0$i$i = $178;
             }
            }
           } while(0);
           HEAP32[$vararg_buffer10>>2] = 15898;
           _fprintf(9772,15916,$vararg_buffer10);
           $num_names$4$i$i2 = $num_names$3$i$i;
           break L44;
          }
         }
        } while(0);
        HEAP32[$vararg_buffer13>>2] = 15898;
        _fprintf(9772,15951,$vararg_buffer13);
        $num_names$4$i$i2 = $num_names$1$i$i$ph;
       } else {
        $bytes$0$i$i = $105;$num_names$2$i$i = 0;
        label = 71;
       }
      } while(0);
      do {
       if ((label|0) == 71) {
        $209 = ($bytes$0$i$i|0)<(0);
        if ($209) {
         HEAP32[$vararg_buffer4>>2] = 15898;
         _fprintf(9772,15974,$vararg_buffer4);
         $num_names$4$i$i2 = $num_names$2$i$i;
         break;
        } else {
         HEAP32[$vararg_buffer7>>2] = 15898;
         _fprintf(9772,16009,$vararg_buffer7);
         $num_names$4$i$i2 = $num_names$2$i$i;
         break;
        }
       }
      } while(0);
      HEAP32[$98>>2] = $num_names$4$i$i2;
      _bam_hdr_destroy($98);
      $$0$i$i = 0;
     } else {
      label = 26;
     }
    } else {
     label = 26;
    }
   } while(0);
   if ((label|0) == 26) {
    HEAP32[$vararg_buffer1>>2] = 15898;
    _fprintf(9772,15916,$vararg_buffer1);
    $$0$i$i = 0;
   }
   $$0$i = $$0$i$i;
   break;
  }
  case 6:  {
   $210 = ((($2)) + 36|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = ((($211)) + 16|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = (_malloc(32)|0);
   $215 = ($214|0)==(0|0);
   if (!($215)) {
    $216 = ((($214)) + -4|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = $217 & 3;
    $219 = ($218|0)==(0);
    if (!($219)) {
     dest=$214; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    }
   }
   $220 = HEAP32[$213>>2]|0;
   $221 = ((($214)) + 8|0);
   HEAP32[$221>>2] = $220;
   $222 = (($220) + 1)|0;
   $223 = (_malloc($222)|0);
   $224 = ((($214)) + 24|0);
   HEAP32[$224>>2] = $223;
   $225 = ((($213)) + 8|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = HEAP32[$221>>2]|0;
   _memcpy(($223|0),($226|0),($227|0))|0;
   $228 = HEAP32[$221>>2]|0;
   $229 = HEAP32[$224>>2]|0;
   $230 = (($229) + ($228)|0);
   HEAP8[$230>>0] = 0;
   $231 = ((($213)) + 28|0);
   $232 = HEAP32[$231>>2]|0;
   HEAP32[$214>>2] = $232;
   $233 = ($232|0)==(0);
   if ($233) {
    $req$0$i3$i$i = 0;
   } else {
    $234 = $232 << 2;
    $235 = ($232>>>0)>(65535);
    if ($235) {
     $236 = (($234>>>0) / ($232>>>0))&-1;
     $237 = ($236|0)==(4);
     $$$i2$i$i = $237 ? $234 : -1;
     $req$0$i3$i$i = $$$i2$i$i;
    } else {
     $req$0$i3$i$i = $234;
    }
   }
   $238 = (_malloc($req$0$i3$i$i)|0);
   $239 = ($238|0)==(0|0);
   if (!($239)) {
    $240 = ((($238)) + -4|0);
    $241 = HEAP32[$240>>2]|0;
    $242 = $241 & 3;
    $243 = ($242|0)==(0);
    if (!($243)) {
     _memset(($238|0),0,($req$0$i3$i$i|0))|0;
    }
   }
   $244 = ((($214)) + 20|0);
   HEAP32[$244>>2] = $238;
   $245 = HEAP32[$214>>2]|0;
   $246 = ($245|0)==(0);
   if ($246) {
    $req$0$i$i3$i = 0;
   } else {
    $247 = $245 << 2;
    $248 = ($245>>>0)>(65535);
    if ($248) {
     $249 = (($247>>>0) / ($245>>>0))&-1;
     $250 = ($249|0)==(4);
     $$$i$i2$i = $250 ? $247 : -1;
     $req$0$i$i3$i = $$$i$i2$i;
    } else {
     $req$0$i$i3$i = $247;
    }
   }
   $251 = (_malloc($req$0$i$i3$i)|0);
   $252 = ($251|0)==(0|0);
   if (!($252)) {
    $253 = ((($251)) + -4|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = $254 & 3;
    $256 = ($255|0)==(0);
    if (!($256)) {
     _memset(($251|0),0,($req$0$i$i3$i|0))|0;
    }
   }
   $257 = ((($214)) + 12|0);
   HEAP32[$257>>2] = $251;
   $258 = ((($213)) + 32|0);
   $i$0$i5$i = 0;
   while(1) {
    $259 = HEAP32[$231>>2]|0;
    $260 = ($i$0$i5$i|0)<($259|0);
    if (!($260)) {
     $$0$i = $214;
     break L1;
    }
    $261 = HEAP32[$258>>2]|0;
    $262 = (($261) + ($i$0$i5$i<<4)|0);
    $263 = HEAP32[$262>>2]|0;
    $264 = $263;
    $265 = $264 & 3;
    $266 = ($265|0)==(0);
    L134: do {
     if ($266) {
      $$01$lcssa$i$i$i = $263;
      label = 99;
     } else {
      $$014$i$i$i = $263;$730 = $264;
      while(1) {
       $267 = HEAP8[$$014$i$i$i>>0]|0;
       $268 = ($267<<24>>24)==(0);
       if ($268) {
        $$pn$i$i$i = $730;
        break L134;
       }
       $269 = ((($$014$i$i$i)) + 1|0);
       $270 = $269;
       $271 = $270 & 3;
       $272 = ($271|0)==(0);
       if ($272) {
        $$01$lcssa$i$i$i = $269;
        label = 99;
        break;
       } else {
        $$014$i$i$i = $269;$730 = $270;
       }
      }
     }
    } while(0);
    if ((label|0) == 99) {
     label = 0;
     $w$0$i$i$i = $$01$lcssa$i$i$i;
     while(1) {
      $273 = HEAP32[$w$0$i$i$i>>2]|0;
      $274 = (($273) + -16843009)|0;
      $275 = $273 & -2139062144;
      $276 = $275 ^ -2139062144;
      $277 = $276 & $274;
      $278 = ($277|0)==(0);
      $279 = ((($w$0$i$i$i)) + 4|0);
      if ($278) {
       $w$0$i$i$i = $279;
      } else {
       break;
      }
     }
     $280 = $273&255;
     $281 = ($280<<24>>24)==(0);
     if ($281) {
      $$1$lcssa$i$i$i = $w$0$i$i$i;
     } else {
      $$pn15$i$i$i = $w$0$i$i$i;
      while(1) {
       $282 = ((($$pn15$i$i$i)) + 1|0);
       $$pre$i$i$i = HEAP8[$282>>0]|0;
       $283 = ($$pre$i$i$i<<24>>24)==(0);
       if ($283) {
        $$1$lcssa$i$i$i = $282;
        break;
       } else {
        $$pn15$i$i$i = $282;
       }
      }
     }
     $284 = $$1$lcssa$i$i$i;
     $$pn$i$i$i = $284;
    }
    $$0$i1$i$i = (($$pn$i$i$i) - ($264))|0;
    $285 = (($$0$i1$i$i) + 1)|0;
    $286 = (_malloc($285)|0);
    $287 = ($286|0)==(0|0);
    if ($287) {
     $$0$i$i$i = 0;
    } else {
     _memcpy(($286|0),($263|0),($285|0))|0;
     $$0$i$i$i = $286;
    }
    $288 = HEAP32[$244>>2]|0;
    $289 = (($288) + ($i$0$i5$i<<2)|0);
    HEAP32[$289>>2] = $$0$i$i$i;
    $290 = HEAP32[$258>>2]|0;
    $291 = (((($290) + ($i$0$i5$i<<4)|0)) + 4|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = HEAP32[$257>>2]|0;
    $294 = (($293) + ($i$0$i5$i<<2)|0);
    HEAP32[$294>>2] = $292;
    $295 = (($i$0$i5$i) + 1)|0;
    $i$0$i5$i = $295;
   }
   break;
  }
  case 3:  {
   $296 = ((($str$i)) + 4|0);
   HEAP32[$296>>2] = 0;
   HEAP32[$str$i>>2] = 0;
   $297 = ((($str$i)) + 8|0);
   HEAP32[$297>>2] = 0;
   $298 = ((($2)) + 24|0);
   $299 = ((($2)) + 16|0);
   $300 = ((($2)) + 16|0);
   $320 = 0;$323 = 0;$336 = 0;$has_SQ$0$i = 0;
   while(1) {
    $301 = (_hts_getline($2,$299)|0);
    $302 = ($301|0)>(-1);
    if (!($302)) {
     break;
    }
    $303 = HEAP32[$298>>2]|0;
    $304 = HEAP8[$303>>0]|0;
    $305 = ($304<<24>>24)==(64);
    if (!($305)) {
     break;
    }
    $306 = HEAP32[$300>>2]|0;
    $307 = ($306>>>0)>(3);
    if ($307) {
     $$08$in$i$i = 3;$312 = 64;$l$06$i$i = $303;$r$07$i$i = 16100;
     while(1) {
      $$08$i$i = (($$08$in$i$i) + -1)|0;
      $308 = HEAP8[$r$07$i$i>>0]|0;
      $309 = ($308<<24>>24)!=(0);
      $310 = ($$08$i$i|0)!=(0);
      $or$cond$i$i = $310 & $309;
      $311 = ($312<<24>>24)==($308<<24>>24);
      $or$cond4$i$i = $311 & $or$cond$i$i;
      if (!($or$cond4$i$i)) {
       $$ph20 = $312;$r$0$lcssa$i$i$ph = $r$07$i$i;
       break;
      }
      $313 = ((($l$06$i$i)) + 1|0);
      $314 = ((($r$07$i$i)) + 1|0);
      $315 = HEAP8[$313>>0]|0;
      $316 = ($315<<24>>24)==(0);
      if ($316) {
       $$ph20 = 0;$r$0$lcssa$i$i$ph = $314;
       break;
      } else {
       $$08$in$i$i = $$08$i$i;$312 = $315;$l$06$i$i = $313;$r$07$i$i = $314;
      }
     }
     $317 = HEAP8[$r$0$lcssa$i$i$ph>>0]|0;
     $318 = ($$ph20<<24>>24)==($317<<24>>24);
     $$has_SQ$0$i = $318 ? 1 : $has_SQ$0$i;
     $has_SQ$1$i = $$has_SQ$0$i;
    } else {
     $has_SQ$1$i = $has_SQ$0$i;
    }
    $319 = (($320) + ($306))|0;
    $321 = (($319) + 2)|0;
    $322 = ($323>>>0)<($321>>>0);
    if ($322) {
     $324 = (($319) + 1)|0;
     $325 = $324 >>> 1;
     $326 = $324 | $325;
     $327 = $326 >>> 2;
     $328 = $326 | $327;
     $329 = $328 >>> 4;
     $330 = $328 | $329;
     $331 = $330 >>> 8;
     $332 = $330 | $331;
     $333 = $332 >>> 16;
     $334 = $332 | $333;
     $335 = (($334) + 1)|0;
     $337 = (_realloc($336,$335)|0);
     $338 = ($337|0)==(0|0);
     if ($338) {
      $346 = $320;$348 = $323;$361 = $336;
     } else {
      HEAP32[$297>>2] = $337;
      HEAP32[$296>>2] = $335;
      $340 = $337;
      label = 117;
     }
    } else {
     $340 = $336;
     label = 117;
    }
    if ((label|0) == 117) {
     label = 0;
     $339 = (($340) + ($320)|0);
     _memcpy(($339|0),($303|0),($306|0))|0;
     $341 = HEAP32[$str$i>>2]|0;
     $342 = (($341) + ($306))|0;
     HEAP32[$str$i>>2] = $342;
     $343 = HEAP32[$297>>2]|0;
     $344 = (($343) + ($342)|0);
     HEAP8[$344>>0] = 0;
     $$pre45 = HEAP32[$296>>2]|0;
     $346 = $342;$348 = $$pre45;$361 = $343;
    }
    $345 = (($346) + 2)|0;
    $347 = ($348>>>0)<($345>>>0);
    $349 = (($346) + 1)|0;
    if ($347) {
     $350 = $349 >>> 1;
     $351 = $349 | $350;
     $352 = $351 >>> 2;
     $353 = $351 | $352;
     $354 = $353 >>> 4;
     $355 = $353 | $354;
     $356 = $355 >>> 8;
     $357 = $355 | $356;
     $358 = $357 >>> 16;
     $359 = $357 | $358;
     $360 = (($359) + 1)|0;
     $362 = (_realloc($361,$360)|0);
     $363 = ($362|0)==(0|0);
     if ($363) {
      $320 = $346;$323 = $348;$336 = $361;$has_SQ$0$i = $has_SQ$1$i;
      continue;
     }
     HEAP32[$297>>2] = $362;
     HEAP32[$296>>2] = $360;
     $365 = $362;$731 = $360;
    } else {
     $365 = $361;$731 = $348;
    }
    HEAP32[$str$i>>2] = $349;
    $364 = (($365) + ($346)|0);
    HEAP8[$364>>0] = 10;
    $366 = HEAP32[$str$i>>2]|0;
    $367 = HEAP32[$297>>2]|0;
    $368 = (($367) + ($366)|0);
    HEAP8[$368>>0] = 0;
    $320 = $366;$323 = $731;$336 = $367;$has_SQ$0$i = $has_SQ$1$i;
   }
   $369 = ($has_SQ$0$i|0)==(0);
   if ($369) {
    $370 = ((($2)) + 32|0);
    $371 = HEAP32[$370>>2]|0;
    $372 = ($371|0)==(0|0);
    if ($372) {
     $449 = $320;
    } else {
     $373 = (_fopen($371,21885)|0);
     $374 = ($373|0)==(0|0);
     if ($374) {
      $$0$i = 0;
      break L1;
     }
     while(1) {
      $375 = (_fgets($line$i,2048,$373)|0);
      $376 = ($375|0)==(0|0);
      if ($376) {
       break;
      } else {
       $$03$i$i$i = $line$i;
      }
      L178: while(1) {
       $377 = HEAP8[$$03$i$i$i>>0]|0;
       $378 = ((($$03$i$i$i)) + 1|0);
       switch ($377<<24>>24) {
       case 9:  {
        $$03$i$i$i = $378;
        break;
       }
       case 0:  {
        label = 127;
        break L178;
        break;
       }
       default: {
        label = 128;
        break L178;
       }
       }
      }
      do {
       if ((label|0) == 127) {
        label = 0;
        HEAP32[6785] = 0;
        $$0$i11$i6 = 0;$$0$i20$i = 0;
       }
       else if ((label|0) == 128) {
        label = 0;
        $379 = $$03$i$i$i;
        $380 = $379 & 3;
        $381 = ($380|0)==(0);
        L182: do {
         if ($381) {
          $$02$lcssa$i$i = $$03$i$i$i;
          label = 132;
         } else {
          $$0211$i$i = $$03$i$i$i;$382 = $377;
          while(1) {
           switch ($382<<24>>24) {
           case 0: case 9:  {
            $$0$i16$i = $$0211$i$i;
            break L182;
            break;
           }
           default: {
           }
           }
           $383 = ((($$0211$i$i)) + 1|0);
           $384 = $383;
           $385 = $384 & 3;
           $386 = ($385|0)==(0);
           if ($386) {
            $$02$lcssa$i$i = $383;
            label = 132;
            break L182;
           }
           $$pre = HEAP8[$383>>0]|0;
           $$0211$i$i = $383;$382 = $$pre;
          }
         }
        } while(0);
        L187: do {
         if ((label|0) == 132) {
          label = 0;
          $387 = HEAP32[$$02$lcssa$i$i>>2]|0;
          $388 = (($387) + -16843009)|0;
          $389 = $387 & -2139062144;
          $390 = $389 ^ -2139062144;
          $391 = $390 & $388;
          $392 = ($391|0)==(0);
          L189: do {
           if ($392) {
            $394 = $387;$w$08$i$i = $$02$lcssa$i$i;
            while(1) {
             $393 = $394 ^ 151587081;
             $395 = (($393) + -16843009)|0;
             $396 = $394 & -2139062144;
             $397 = $396 ^ -2139062144;
             $398 = $397 & $395;
             $399 = ($398|0)==(0);
             if (!($399)) {
              $w$0$lcssa$i$i = $w$08$i$i;
              break L189;
             }
             $400 = ((($w$08$i$i)) + 4|0);
             $401 = HEAP32[$400>>2]|0;
             $402 = (($401) + -16843009)|0;
             $403 = $401 & -2139062144;
             $404 = $403 ^ -2139062144;
             $405 = $404 & $402;
             $406 = ($405|0)==(0);
             if ($406) {
              $394 = $401;$w$08$i$i = $400;
             } else {
              $w$0$lcssa$i$i = $400;
              break;
             }
            }
           } else {
            $w$0$lcssa$i$i = $$02$lcssa$i$i;
           }
          } while(0);
          $$1$i$i = $w$0$lcssa$i$i;
          while(1) {
           $407 = HEAP8[$$1$i$i>>0]|0;
           $408 = ((($$1$i$i)) + 1|0);
           switch ($407<<24>>24) {
           case 0: case 9:  {
            $$0$i16$i = $$1$i$i;
            break L187;
            break;
           }
           default: {
            $$1$i$i = $408;
           }
           }
          }
         }
        } while(0);
        HEAP32[6785] = $$0$i16$i;
        $409 = HEAP8[$$0$i16$i>>0]|0;
        $410 = ($409<<24>>24)==(0);
        if ($410) {
         HEAP32[6785] = 0;
         $$0$i11$i6 = $$03$i$i$i;$$0$i20$i = 0;
         break;
        }
        $411 = ((($$0$i16$i)) + 1|0);
        HEAP32[6785] = $411;
        HEAP8[$$0$i16$i>>0] = 0;
        $$pr5 = HEAP32[6785]|0;
        $412 = ($$pr5|0)==(0|0);
        if ($412) {
         $$0$i11$i6 = $$03$i$i$i;$$0$i20$i = 0;
        } else {
         $$03$i$i17$i = $$pr5;
         L200: while(1) {
          $413 = HEAP8[$$03$i$i17$i>>0]|0;
          $414 = ((($$03$i$i17$i)) + 1|0);
          switch ($413<<24>>24) {
          case 9:  {
           $$03$i$i17$i = $414;
           break;
          }
          case 0:  {
           label = 141;
           break L200;
           break;
          }
          default: {
           break L200;
          }
          }
         }
         if ((label|0) == 141) {
          label = 0;
          HEAP32[6785] = 0;
          $$0$i11$i6 = $$03$i$i$i;$$0$i20$i = 0;
          break;
         }
         $415 = $$03$i$i17$i;
         $416 = $415 & 3;
         $417 = ($416|0)==(0);
         L205: do {
          if ($417) {
           $$02$lcssa$i26$i = $$03$i$i17$i;
           label = 146;
          } else {
           $$0211$i23$i = $$03$i$i17$i;$418 = $413;
           while(1) {
            switch ($418<<24>>24) {
            case 0: case 9:  {
             $$0$i39$i = $$0211$i23$i;
             break L205;
             break;
            }
            default: {
            }
            }
            $419 = ((($$0211$i23$i)) + 1|0);
            $420 = $419;
            $421 = $420 & 3;
            $422 = ($421|0)==(0);
            if ($422) {
             $$02$lcssa$i26$i = $419;
             label = 146;
             break L205;
            }
            $$pre40 = HEAP8[$419>>0]|0;
            $$0211$i23$i = $419;$418 = $$pre40;
           }
          }
         } while(0);
         L210: do {
          if ((label|0) == 146) {
           label = 0;
           $423 = HEAP32[$$02$lcssa$i26$i>>2]|0;
           $424 = (($423) + -16843009)|0;
           $425 = $423 & -2139062144;
           $426 = $425 ^ -2139062144;
           $427 = $426 & $424;
           $428 = ($427|0)==(0);
           L212: do {
            if ($428) {
             $430 = $423;$w$08$i29$i = $$02$lcssa$i26$i;
             while(1) {
              $429 = $430 ^ 151587081;
              $431 = (($429) + -16843009)|0;
              $432 = $430 & -2139062144;
              $433 = $432 ^ -2139062144;
              $434 = $433 & $431;
              $435 = ($434|0)==(0);
              if (!($435)) {
               $w$0$lcssa$i33$i = $w$08$i29$i;
               break L212;
              }
              $436 = ((($w$08$i29$i)) + 4|0);
              $437 = HEAP32[$436>>2]|0;
              $438 = (($437) + -16843009)|0;
              $439 = $437 & -2139062144;
              $440 = $439 ^ -2139062144;
              $441 = $440 & $438;
              $442 = ($441|0)==(0);
              if ($442) {
               $430 = $437;$w$08$i29$i = $436;
              } else {
               $w$0$lcssa$i33$i = $436;
               break;
              }
             }
            } else {
             $w$0$lcssa$i33$i = $$02$lcssa$i26$i;
            }
           } while(0);
           $$1$i35$i = $w$0$lcssa$i33$i;
           while(1) {
            $443 = HEAP8[$$1$i35$i>>0]|0;
            $444 = ((($$1$i35$i)) + 1|0);
            switch ($443<<24>>24) {
            case 0: case 9:  {
             $$0$i39$i = $$1$i35$i;
             break L210;
             break;
            }
            default: {
             $$1$i35$i = $444;
            }
            }
           }
          }
         } while(0);
         HEAP32[6785] = $$0$i39$i;
         $445 = HEAP8[$$0$i39$i>>0]|0;
         $446 = ($445<<24>>24)==(0);
         if ($446) {
          HEAP32[6785] = 0;
          $$0$i11$i6 = $$03$i$i$i;$$0$i20$i = $$03$i$i17$i;
          break;
         } else {
          $447 = ((($$0$i39$i)) + 1|0);
          HEAP32[6785] = $447;
          HEAP8[$$0$i39$i>>0] = 0;
          $$0$i11$i6 = $$03$i$i$i;$$0$i20$i = $$03$i$i17$i;
          break;
         }
        }
       }
      } while(0);
      HEAP32[$vararg_buffer19>>2] = $$0$i11$i6;
      $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
      HEAP32[$vararg_ptr22>>2] = $$0$i20$i;
      _ksprintf($str$i,0,$vararg_buffer19);
     }
     (_fclose($373)|0);
     $$pre41 = HEAP32[$str$i>>2]|0;
     $449 = $$pre41;
    }
   } else {
    $449 = $320;
   }
   $448 = ($449|0)==(0);
   do {
    if ($448) {
     $450 = HEAP32[$296>>2]|0;
     $451 = ($450>>>0)<(2);
     $452 = HEAP32[$297>>2]|0;
     if ($451) {
      $453 = (_realloc($452,2)|0);
      $454 = ($453|0)==(0|0);
      if ($454) {
       $732 = $452;
       break;
      }
      HEAP32[$297>>2] = $453;
      HEAP32[$296>>2] = 2;
      $455 = $453;
     } else {
      $455 = $452;
     }
     HEAP8[$455>>0] = 0;
     $732 = $455;
    } else {
     $$pre43 = HEAP32[$297>>2]|0;
     $732 = $$pre43;
    }
   } while(0);
   $456 = (_malloc(28)|0);
   $457 = ($456|0)==(0|0);
   if (!($457)) {
    $458 = ((($456)) + -4|0);
    $459 = HEAP32[$458>>2]|0;
    $460 = $459 & 3;
    $461 = ($460|0)==(0);
    if (!($461)) {
     dest=$456; stop=dest+28|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    }
   }
   $462 = ((($f$i$i$i)) + 4|0);
   $463 = ((($f$i$i$i)) + 44|0);
   $464 = ((($f$i$i$i)) + 8|0);
   $465 = ((($f$i$i$i)) + 76|0);
   $466 = ((($f$i$i$i)) + 104|0);
   $467 = ((($f$i$i$i)) + 108|0);
   $468 = ((($f$i$i$i)) + 100|0);
   $469 = ((($456)) + 4|0);
   $470 = ((($456)) + 24|0);
   $p$0$i$i = $732;
   while(1) {
    $471 = HEAP8[$p$0$i$i>>0]|0;
    $472 = ($471<<24>>24)==(0);
    if ($472) {
     break;
    } else {
     $$08$in$i$i45$i = 4;$477 = $471;$l$06$i$i47$i = $p$0$i$i;$r$07$i$i46$i = 16039;
    }
    while(1) {
     $$08$i$i48$i = (($$08$in$i$i45$i) + -1)|0;
     $473 = HEAP8[$r$07$i$i46$i>>0]|0;
     $474 = ($473<<24>>24)!=(0);
     $475 = ($$08$i$i48$i|0)!=(0);
     $or$cond$i$i49$i = $475 & $474;
     $476 = ($477<<24>>24)==($473<<24>>24);
     $or$cond4$i$i50$i = $476 & $or$cond$i$i49$i;
     if (!($or$cond4$i$i50$i)) {
      $$ph16 = $477;$r$0$lcssa$i$i55$i$ph = $r$07$i$i46$i;
      break;
     }
     $478 = ((($l$06$i$i47$i)) + 1|0);
     $479 = ((($r$07$i$i46$i)) + 1|0);
     $480 = HEAP8[$478>>0]|0;
     $481 = ($480<<24>>24)==(0);
     if ($481) {
      $$ph16 = 0;$r$0$lcssa$i$i55$i$ph = $479;
      break;
     } else {
      $$08$in$i$i45$i = $$08$i$i48$i;$477 = $480;$l$06$i$i47$i = $478;$r$07$i$i46$i = $479;
     }
    }
    $482 = HEAP8[$r$0$lcssa$i$i55$i$ph>>0]|0;
    $483 = ($$ph16<<24>>24)==($482<<24>>24);
    do {
     if ($483) {
      $484 = ((($p$0$i$i)) + 4|0);
      $ln$0$i$i = -1;$sn$0$i$i = 0;$storemerge$i$i = $484;
      L247: while(1) {
       $485 = $storemerge$i$i;
       $486 = HEAP8[$storemerge$i$i>>0]|0;
       $487 = ($486<<24>>24)==(0);
       L249: do {
        if ($487) {
         $499 = 0;$r$0$lcssa$i12$i$i = 16044;
        } else {
         $$08$in$i2$i$i = 3;$492 = $486;$l$06$i4$i$i = $storemerge$i$i;$r$07$i3$i$i = 16044;
         while(1) {
          $$08$i5$i$i = (($$08$in$i2$i$i) + -1)|0;
          $488 = HEAP8[$r$07$i3$i$i>>0]|0;
          $489 = ($488<<24>>24)!=(0);
          $490 = ($$08$i5$i$i|0)!=(0);
          $or$cond$i6$i$i = $490 & $489;
          $491 = ($492<<24>>24)==($488<<24>>24);
          $or$cond4$i7$i$i = $491 & $or$cond$i6$i$i;
          if (!($or$cond4$i7$i$i)) {
           $499 = $492;$r$0$lcssa$i12$i$i = $r$07$i3$i$i;
           break L249;
          }
          $493 = ((($l$06$i4$i$i)) + 1|0);
          $494 = ((($r$07$i3$i$i)) + 1|0);
          $495 = HEAP8[$493>>0]|0;
          $496 = ($495<<24>>24)==(0);
          if ($496) {
           $499 = 0;$r$0$lcssa$i12$i$i = $494;
           break;
          } else {
           $$08$in$i2$i$i = $$08$i5$i$i;$492 = $495;$l$06$i4$i$i = $493;$r$07$i3$i$i = $494;
          }
         }
        }
       } while(0);
       $497 = HEAP8[$r$0$lcssa$i12$i$i>>0]|0;
       $498 = ($499<<24>>24)==($497<<24>>24);
       if ($498) {
        $500 = ((($storemerge$i$i)) + 3|0);
        $r$0$i$i = $500;
        L256: while(1) {
         $501 = HEAP8[$r$0$i$i>>0]|0;
         switch ($501<<24>>24) {
         case 0: case 9: case 10:  {
          break L256;
          break;
         }
         default: {
         }
         }
         $502 = ((($r$0$i$i)) + 1|0);
         $r$0$i$i = $502;
        }
        $503 = $500;
        $504 = $r$0$i$i;
        $505 = (($504) - ($503))|0;
        $506 = (($505) + 1)|0;
        $507 = (_malloc($506)|0);
        $508 = ($507|0)==(0|0);
        if (!($508)) {
         $509 = ((($507)) + -4|0);
         $510 = HEAP32[$509>>2]|0;
         $511 = $510 & 3;
         $512 = ($511|0)==(0);
         if (!($512)) {
          _memset(($507|0),0,($506|0))|0;
         }
        }
        $$cast$i$i = $500;
        $513 = (($504) - ($$cast$i$i))|0;
        $514 = $507;
        $515 = $$cast$i$i ^ $514;
        $516 = $515 & 3;
        $517 = ($516|0)==(0);
        L264: do {
         if ($517) {
          $518 = $$cast$i$i & 3;
          $519 = ($518|0)!=(0);
          $520 = ($r$0$i$i|0)!=($500|0);
          $or$cond28$i$i$i$i = $520 & $519;
          if ($or$cond28$i$i$i$i) {
           $$031$i$i$i$i = $513;$$0430$i$i$i$i = $500;$$0629$i$i$i$i = $507;
           while(1) {
            $521 = HEAP8[$$0430$i$i$i$i>>0]|0;
            HEAP8[$$0629$i$i$i$i>>0] = $521;
            $522 = ($521<<24>>24)==(0);
            if ($522) {
             $$28$i$i$i$i = $$0629$i$i$i$i;$$3$i$i$i$i = $$031$i$i$i$i;
             break L264;
            }
            $523 = (($$031$i$i$i$i) + -1)|0;
            $524 = ((($$0430$i$i$i$i)) + 1|0);
            $525 = ((($$0629$i$i$i$i)) + 1|0);
            $526 = $524;
            $527 = $526 & 3;
            $528 = ($527|0)!=(0);
            $529 = ($523|0)!=(0);
            $or$cond$i$i$i$i = $529 & $528;
            if ($or$cond$i$i$i$i) {
             $$031$i$i$i$i = $523;$$0430$i$i$i$i = $524;$$0629$i$i$i$i = $525;
            } else {
             $$0$lcssa$i$i$i$i = $523;$$04$lcssa$i$i$i$i = $524;$$06$lcssa$i$i$i$i = $525;$$lcssa$i$i$i$i = $529;
             break;
            }
           }
          } else {
           $$0$lcssa$i$i$i$i = $513;$$04$lcssa$i$i$i$i = $500;$$06$lcssa$i$i$i$i = $507;$$lcssa$i$i$i$i = $520;
          }
          if ($$lcssa$i$i$i$i) {
           $$pre44 = HEAP8[$$04$lcssa$i$i$i$i>>0]|0;
           $530 = ($$pre44<<24>>24)==(0);
           if ($530) {
            $$28$i$i$i$i = $$06$lcssa$i$i$i$i;$$3$i$i$i$i = $$0$lcssa$i$i$i$i;
           } else {
            $531 = ($$0$lcssa$i$i$i$i>>>0)>(3);
            L273: do {
             if ($531) {
              $$117$i$i$i$i = $$0$lcssa$i$i$i$i;$wd$018$i$i$i$i = $$06$lcssa$i$i$i$i;$ws$019$i$i$i$i = $$04$lcssa$i$i$i$i;
              while(1) {
               $532 = HEAP32[$ws$019$i$i$i$i>>2]|0;
               $533 = (($532) + -16843009)|0;
               $534 = $532 & -2139062144;
               $535 = $534 ^ -2139062144;
               $536 = $535 & $533;
               $537 = ($536|0)==(0);
               if (!($537)) {
                $$1$lcssa$i$i$i$i = $$117$i$i$i$i;$wd$0$lcssa$i$i$i$i = $wd$018$i$i$i$i;$ws$0$lcssa$i$i$i$i = $ws$019$i$i$i$i;
                break L273;
               }
               HEAP32[$wd$018$i$i$i$i>>2] = $532;
               $538 = (($$117$i$i$i$i) + -4)|0;
               $539 = ((($ws$019$i$i$i$i)) + 4|0);
               $540 = ((($wd$018$i$i$i$i)) + 4|0);
               $541 = ($538>>>0)>(3);
               if ($541) {
                $$117$i$i$i$i = $538;$wd$018$i$i$i$i = $540;$ws$019$i$i$i$i = $539;
               } else {
                $$1$lcssa$i$i$i$i = $538;$wd$0$lcssa$i$i$i$i = $540;$ws$0$lcssa$i$i$i$i = $539;
                break;
               }
              }
             } else {
              $$1$lcssa$i$i$i$i = $$0$lcssa$i$i$i$i;$wd$0$lcssa$i$i$i$i = $$06$lcssa$i$i$i$i;$ws$0$lcssa$i$i$i$i = $$04$lcssa$i$i$i$i;
             }
            } while(0);
            $$15$ph$i$i$i$i = $ws$0$lcssa$i$i$i$i;$$17$ph$i$i$i$i = $wd$0$lcssa$i$i$i$i;$$2$ph$i$i$i$i = $$1$lcssa$i$i$i$i;
            label = 191;
           }
          } else {
           $$28$i$i$i$i = $$06$lcssa$i$i$i$i;$$3$i$i$i$i = 0;
          }
         } else {
          $$15$ph$i$i$i$i = $500;$$17$ph$i$i$i$i = $507;$$2$ph$i$i$i$i = $513;
          label = 191;
         }
        } while(0);
        L278: do {
         if ((label|0) == 191) {
          label = 0;
          $542 = ($$2$ph$i$i$i$i|0)==(0);
          if ($542) {
           $$28$i$i$i$i = $$17$ph$i$i$i$i;$$3$i$i$i$i = 0;
          } else {
           $$1511$i$i$i$i = $$15$ph$i$i$i$i;$$1710$i$i$i$i = $$17$ph$i$i$i$i;$$212$i$i$i$i = $$2$ph$i$i$i$i;
           while(1) {
            $543 = HEAP8[$$1511$i$i$i$i>>0]|0;
            HEAP8[$$1710$i$i$i$i>>0] = $543;
            $544 = ($543<<24>>24)==(0);
            if ($544) {
             $$28$i$i$i$i = $$1710$i$i$i$i;$$3$i$i$i$i = $$212$i$i$i$i;
             break L278;
            }
            $545 = (($$212$i$i$i$i) + -1)|0;
            $546 = ((($$1511$i$i$i$i)) + 1|0);
            $547 = ((($$1710$i$i$i$i)) + 1|0);
            $548 = ($545|0)==(0);
            if ($548) {
             $$28$i$i$i$i = $547;$$3$i$i$i$i = 0;
             break;
            } else {
             $$1511$i$i$i$i = $546;$$1710$i$i$i$i = $547;$$212$i$i$i$i = $545;
            }
           }
          }
         }
        } while(0);
        _memset(($$28$i$i$i$i|0),0,($$3$i$i$i$i|0))|0;
        $ln$2$i$i = $ln$0$i$i;$q$i$i$sroa$0$0 = $504;$sn$1$i$i = $507;
       } else {
        $549 = HEAP8[$storemerge$i$i>>0]|0;
        $550 = ($549<<24>>24)==(0);
        L285: do {
         if ($550) {
          $562 = 0;$r$0$lcssa$i25$i$i = 16048;
         } else {
          $$08$in$i15$i$i = 3;$555 = $549;$l$06$i17$i$i = $storemerge$i$i;$r$07$i16$i$i = 16048;
          while(1) {
           $$08$i18$i$i = (($$08$in$i15$i$i) + -1)|0;
           $551 = HEAP8[$r$07$i16$i$i>>0]|0;
           $552 = ($551<<24>>24)!=(0);
           $553 = ($$08$i18$i$i|0)!=(0);
           $or$cond$i19$i$i = $553 & $552;
           $554 = ($555<<24>>24)==($551<<24>>24);
           $or$cond4$i20$i$i = $554 & $or$cond$i19$i$i;
           if (!($or$cond4$i20$i$i)) {
            $562 = $555;$r$0$lcssa$i25$i$i = $r$07$i16$i$i;
            break L285;
           }
           $556 = ((($l$06$i17$i$i)) + 1|0);
           $557 = ((($r$07$i16$i$i)) + 1|0);
           $558 = HEAP8[$556>>0]|0;
           $559 = ($558<<24>>24)==(0);
           if ($559) {
            $562 = 0;$r$0$lcssa$i25$i$i = $557;
            break;
           } else {
            $$08$in$i15$i$i = $$08$i18$i$i;$555 = $558;$l$06$i17$i$i = $556;$r$07$i16$i$i = $557;
           }
          }
         }
        } while(0);
        $560 = HEAP8[$r$0$lcssa$i25$i$i>>0]|0;
        $561 = ($562<<24>>24)==($560<<24>>24);
        if ($561) {
         $563 = ((($storemerge$i$i)) + 3|0);
         HEAP32[$f$i$i$i>>2] = 0;
         HEAP32[$462>>2] = $563;
         HEAP32[$463>>2] = $563;
         $564 = ($563|0)<(0|0);
         $565 = ((($storemerge$i$i)) + -2147483646|0);
         $$sink$i$i$i = $564 ? (-1) : $565;
         HEAP32[$464>>2] = $$sink$i$i$i;
         HEAP32[$465>>2] = -1;
         HEAP32[$466>>2] = 0;
         $566 = $$sink$i$i$i;
         $567 = $563;
         $568 = (($566) - ($567))|0;
         HEAP32[$467>>2] = $568;
         HEAP32[$468>>2] = $566;
         $569 = (___intscan($f$i$i$i,10,1,-2147483648,0)|0);
         $570 = tempRet0;
         $571 = HEAP32[$467>>2]|0;
         $572 = HEAP32[$462>>2]|0;
         $573 = HEAP32[$464>>2]|0;
         $574 = (($572) + ($571))|0;
         $575 = (($574) - ($573))|0;
         $576 = (($563) + ($575)|0);
         $577 = $576;
         $ln$2$i$i = $569;$q$i$i$sroa$0$0 = $577;$sn$1$i$i = $sn$0$i$i;
        } else {
         $ln$2$i$i = $ln$0$i$i;$q$i$i$sroa$0$0 = $485;$sn$1$i$i = $sn$0$i$i;
        }
       }
       $q$i$i$sroa$0$1 = $q$i$i$sroa$0$0;
       L292: while(1) {
        $578 = $q$i$i$sroa$0$1;
        $579 = HEAP8[$578>>0]|0;
        switch ($579<<24>>24) {
        case 0: case 10:  {
         break L247;
         break;
        }
        case 9:  {
         break L292;
         break;
        }
        default: {
        }
        }
        $580 = ((($578)) + 1|0);
        $581 = $580;
        $q$i$i$sroa$0$1 = $581;
       }
       $584 = ((($578)) + 1|0);
       $ln$0$i$i = $ln$2$i$i;$sn$0$i$i = $sn$1$i$i;$storemerge$i$i = $584;
      }
      $582 = ($sn$1$i$i|0)!=(0|0);
      $583 = ($ln$2$i$i|0)>(-1);
      $or$cond = $582 & $583;
      if ($or$cond) {
       $585 = (_kh_put_s2i($456,$sn$1$i$i,$absent$i$i)|0);
       $586 = HEAP32[$absent$i$i>>2]|0;
       $587 = ($586|0)==(0);
       if ($587) {
        HEAP32[$vararg_buffer23>>2] = 16086;
        $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
        HEAP32[$vararg_ptr26>>2] = $sn$1$i$i;
        _fprintf(9772,16052,$vararg_buffer23);
        _free($sn$1$i$i);
        $p$2$i$i = $578;
        break;
       } else {
        $588 = HEAP32[$469>>2]|0;
        $589 = (($588) + -1)|0;
        $590 = ($ln$2$i$i|0)<(0);
        $591 = $590 << 31 >> 31;
        $592 = $589 | $591;
        $593 = HEAP32[$470>>2]|0;
        $594 = (($593) + ($585<<3)|0);
        $595 = $594;
        $596 = $595;
        HEAP32[$596>>2] = $ln$2$i$i;
        $597 = (($595) + 4)|0;
        $598 = $597;
        HEAP32[$598>>2] = $592;
        $p$2$i$i = $578;
        break;
       }
      } else {
       $p$2$i$i = $578;
      }
     } else {
      $p$2$i$i = $p$0$i$i;
     }
    } while(0);
    L301: while(1) {
     $599 = HEAP8[$p$2$i$i>>0]|0;
     switch ($599<<24>>24) {
     case 0: case 10:  {
      break L301;
      break;
     }
     default: {
     }
     }
     $600 = ((($p$2$i$i)) + 1|0);
     $p$2$i$i = $600;
    }
    $601 = ((($p$2$i$i)) + 1|0);
    $p$0$i$i = $601;
   }
   $602 = (_malloc(32)|0);
   $603 = ($602|0)==(0|0);
   if (!($603)) {
    $604 = ((($602)) + -4|0);
    $605 = HEAP32[$604>>2]|0;
    $606 = $605 & 3;
    $607 = ($606|0)==(0);
    if (!($607)) {
     dest=$602; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    }
   }
   $608 = ((($602)) + 28|0);
   HEAP32[$608>>2] = $456;
   $609 = HEAP32[$469>>2]|0;
   HEAP32[$602>>2] = $609;
   $610 = $609 << 2;
   $611 = (_malloc($610)|0);
   $612 = ((($602)) + 12|0);
   HEAP32[$612>>2] = $611;
   $613 = HEAP32[$602>>2]|0;
   $614 = $613 << 2;
   $615 = (_malloc($614)|0);
   $616 = ((($602)) + 20|0);
   HEAP32[$616>>2] = $615;
   $617 = ((($456)) + 16|0);
   $618 = ((($456)) + 20|0);
   $k$0$i$i$i = 0;
   while(1) {
    $619 = HEAP32[$456>>2]|0;
    $620 = ($k$0$i$i$i|0)==($619|0);
    if ($620) {
     break;
    }
    $621 = $k$0$i$i$i >>> 4;
    $622 = HEAP32[$617>>2]|0;
    $623 = (($622) + ($621<<2)|0);
    $624 = HEAP32[$623>>2]|0;
    $625 = $k$0$i$i$i << 1;
    $626 = $625 & 30;
    $627 = 3 << $626;
    $628 = $624 & $627;
    $629 = ($628|0)==(0);
    if ($629) {
     $630 = HEAP32[$618>>2]|0;
     $631 = (($630) + ($k$0$i$i$i<<2)|0);
     $632 = HEAP32[$631>>2]|0;
     $633 = HEAP32[$470>>2]|0;
     $634 = (($633) + ($k$0$i$i$i<<3)|0);
     $635 = $634;
     $636 = $635;
     $637 = HEAP32[$636>>2]|0;
     $638 = (($635) + 4)|0;
     $639 = $638;
     $640 = HEAP32[$639>>2]|0;
     $641 = HEAP32[$616>>2]|0;
     $642 = (($641) + ($640<<2)|0);
     HEAP32[$642>>2] = $632;
     $643 = HEAP32[$470>>2]|0;
     $644 = (($643) + ($k$0$i$i$i<<3)|0);
     $645 = $644;
     $646 = $645;
     $647 = HEAP32[$646>>2]|0;
     $648 = (($645) + 4)|0;
     $649 = $648;
     $650 = HEAP32[$649>>2]|0;
     $651 = HEAP32[$612>>2]|0;
     $652 = (($651) + ($650<<2)|0);
     HEAP32[$652>>2] = $647;
     $653 = HEAP32[$470>>2]|0;
     $654 = (($653) + ($k$0$i$i$i<<3)|0);
     $655 = $654;
     $656 = $655;
     $657 = HEAP32[$656>>2]|0;
     $658 = (($655) + 4)|0;
     $659 = $658;
     $660 = HEAP32[$659>>2]|0;
     $661 = (_bitshift64Ashr(($657|0),($660|0),32)|0);
     $662 = tempRet0;
     $663 = $654;
     $664 = $663;
     HEAP32[$664>>2] = $661;
     $665 = (($663) + 4)|0;
     $666 = $665;
     HEAP32[$666>>2] = $662;
    }
    $667 = (($k$0$i$i$i) + 1)|0;
    $k$0$i$i$i = $667;
   }
   $668 = HEAP32[$str$i>>2]|0;
   $669 = ((($602)) + 8|0);
   HEAP32[$669>>2] = $668;
   $670 = HEAP32[$297>>2]|0;
   $671 = ((($602)) + 24|0);
   HEAP32[$671>>2] = $670;
   $$0$i = $602;
   break;
  }
  default: {
   _abort();
   // unreachable;
  }
  }
 } while(0);
 $672 = (_malloc(56)|0);
 $673 = ($672|0)==(0|0);
 if (!($673)) {
  $674 = ((($672)) + -4|0);
  $675 = HEAP32[$674>>2]|0;
  $676 = $675 & 3;
  $677 = ($676|0)==(0);
  if (!($677)) {
   dest=$672; stop=dest+56|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  }
 }
 $678 = ((($672)) + 16|0);
 $679 = ((($672)) + 40|0);
 $680 = ((($672)) + 8|0);
 $buf$0 = 0;$loop_var1$0 = 0;$max_buf$0 = 0;$rtn$0 = 0;
 while(1) {
  $exitcond = ($loop_var1$0|0)==(100);
  if ($exitcond) {
   break;
  }
  $681 = (__ZNSt3__13mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEEixERS7_($0)|0);
  $682 = HEAP32[$681>>2]|0;
  $683 = (_sam_read1($682,$$0$i,$672)|0);
  $684 = HEAP32[$678>>2]|0;
  $685 = HEAP32[$679>>2]|0;
  $686 = $680;
  $687 = $686;
  $688 = HEAP32[$687>>2]|0;
  $689 = (($686) + 4)|0;
  $690 = $689;
  $691 = HEAP32[$690>>2]|0;
  $692 = (_bitshift64Lshr(($688|0),($691|0),46)|0);
  $693 = tempRet0;
  $694 = $692 & 262140;
  $695 = (($685) + ($694)|0);
  $696 = (_bitshift64Lshr(($688|0),($691|0),24)|0);
  $697 = tempRet0;
  $698 = $696 & 255;
  $699 = (($695) + ($698)|0);
  $700 = ($max_buf$0|0)>($684|0);
  if ($700) {
   $buf$1 = $buf$0;$max_buf$1 = $max_buf$0;
  } else {
   $701 = $684 >> 1;
   $702 = $684 | $701;
   $703 = $702 >> 2;
   $704 = $702 | $703;
   $705 = $704 >> 4;
   $706 = $704 | $705;
   $707 = $706 >> 8;
   $708 = $706 | $707;
   $709 = $708 >> 16;
   $710 = $708 | $709;
   $711 = (($710) + 1)|0;
   $712 = (_realloc($buf$0,$711)|0);
   $buf$1 = $712;$max_buf$1 = $711;
  }
  $i$0 = 0;
  while(1) {
   $713 = ($i$0|0)<($684|0);
   if (!($713)) {
    break;
   }
   $714 = $i$0 >> 1;
   $715 = (($699) + ($714)|0);
   $716 = HEAP8[$715>>0]|0;
   $717 = $716&255;
   $718 = $i$0 << 2;
   $719 = $718 & 4;
   $720 = $719 ^ 4;
   $721 = $717 >>> $720;
   $722 = $721 & 15;
   $723 = (15699 + ($722)|0);
   $724 = HEAP8[$723>>0]|0;
   $725 = (($buf$1) + ($i$0)|0);
   HEAP8[$725>>0] = $724;
   $726 = (($i$0) + 1)|0;
   $i$0 = $726;
  }
  $727 = HEAP32[$679>>2]|0;
  HEAP32[$vararg_buffer27>>2] = $727;
  $vararg_ptr30 = ((($vararg_buffer27)) + 4|0);
  HEAP32[$vararg_ptr30>>2] = $buf$1;
  _printf(14070,$vararg_buffer27);
  $728 = (($loop_var1$0) + 1)|0;
  $buf$0 = $buf$1;$loop_var1$0 = $728;$max_buf$0 = $max_buf$1;$rtn$0 = $683;
 }
 _free($buf$0);
 if ($673) {
  _bam_hdr_destroy($$0$i);
  STACKTOP = sp;return ($rtn$0|0);
 }
 $729 = HEAP32[$679>>2]|0;
 _free($729);
 _free($672);
 _bam_hdr_destroy($$0$i);
 STACKTOP = sp;return ($rtn$0|0);
}
function __ZNSt3__16__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($this,$__nd) {
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__nd|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$__nd>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($this,$1);
 $2 = ((($__nd)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeIiP7htsFileEENS_19__map_value_compareIiS4_NS_4lessIiEELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($this,$3);
 _free($__nd);
 return;
}
function __GLOBAL__sub_I_interface_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(27036)>>2] = 0;
 HEAP32[(27040)>>2] = 0;
 HEAP32[6758] = (27036);
 (___cxa_atexit((57|0),(27032|0),(___dso_handle|0))|0);
 return;
}
function __ZL7js_readP5hFILEPvj($fp,$buffer,$nbytes) {
 $fp = $fp|0;
 $buffer = $buffer|0;
 $nbytes = $nbytes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($fp)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $buffer;
 $3 = _emscripten_asm_const_iiii(1, ($1|0), ($2|0), ($nbytes|0))|0;
 return ($3|0);
}
function __ZL7js_seekP5hFILEii($fp,$offset,$whence) {
 $fp = $fp|0;
 $offset = $offset|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($fp)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = _emscripten_asm_const_iiii(2, ($1|0), ($offset|0), ($whence|0))|0;
 return ($2|0);
}
function __ZL8js_closeP5hFILE($fp) {
 $fp = $fp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($fp|0)==(0|0);
 if ($0) {
  return 0;
 }
 $1 = ((($fp)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = _emscripten_asm_const_ii(3, ($2|0))|0;
 _free($fp);
 return 0;
}
function _bgzf_open($path,$mode) {
 $path = $path|0;
 $mode = $mode|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i21 = 0, $$0$i1 = 0, $$0$i1$i = 0, $$0$i1$i23 = 0, $$0$i19 = 0, $$0$i41 = 0, $$02$lcssa$i = 0, $$02$lcssa$i28 = 0, $$02$lcssa$i6 = 0, $$0211$i = 0, $$0211$i25 = 0, $$0211$i3 = 0, $$1$i = 0, $$1$i15 = 0, $$1$i37 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fp$0 = 0, $not$ = 0, $not$43 = 0, $not$44 = 0, $w$0$lcssa$i = 0;
 var $w$0$lcssa$i13 = 0, $w$0$lcssa$i35 = 0, $w$08$i = 0, $w$08$i31 = 0, $w$08$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$02$lcssa$i = $mode;
   label = 4;
  } else {
   $$0211$i = $mode;
   while(1) {
    $3 = HEAP8[$$0211$i>>0]|0;
    switch ($3<<24>>24) {
    case 0: case 114:  {
     $$0$i1 = $$0211$i;$31 = $3;
     break L1;
     break;
    }
    default: {
    }
    }
    $4 = ((($$0211$i)) + 1|0);
    $5 = $4;
    $6 = $5 & 3;
    $7 = ($6|0)==(0);
    if ($7) {
     $$02$lcssa$i = $4;
     label = 4;
     break L1;
    } else {
     $$0211$i = $4;
    }
   }
  }
 } while(0);
 L5: do {
  if ((label|0) == 4) {
   $8 = HEAP32[$$02$lcssa$i>>2]|0;
   $9 = (($8) + -16843009)|0;
   $10 = $8 & -2139062144;
   $11 = $10 ^ -2139062144;
   $12 = $11 & $9;
   $13 = ($12|0)==(0);
   L7: do {
    if ($13) {
     $15 = $8;$w$08$i = $$02$lcssa$i;
     while(1) {
      $14 = $15 ^ 1920103026;
      $16 = (($14) + -16843009)|0;
      $17 = $15 & -2139062144;
      $18 = $17 ^ -2139062144;
      $19 = $18 & $16;
      $20 = ($19|0)==(0);
      if (!($20)) {
       $w$0$lcssa$i = $w$08$i;
       break L7;
      }
      $21 = ((($w$08$i)) + 4|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = (($22) + -16843009)|0;
      $24 = $22 & -2139062144;
      $25 = $24 ^ -2139062144;
      $26 = $25 & $23;
      $27 = ($26|0)==(0);
      if ($27) {
       $15 = $22;$w$08$i = $21;
      } else {
       $w$0$lcssa$i = $21;
       break;
      }
     }
    } else {
     $w$0$lcssa$i = $$02$lcssa$i;
    }
   } while(0);
   $$1$i = $w$0$lcssa$i;
   while(1) {
    $28 = HEAP8[$$1$i>>0]|0;
    $29 = ((($$1$i)) + 1|0);
    switch ($28<<24>>24) {
    case 0: case 114:  {
     $$0$i1 = $$1$i;$31 = $28;
     break L5;
     break;
    }
    default: {
     $$1$i = $29;
    }
    }
   }
  }
 } while(0);
 $30 = ($$0$i1|0)==(0|0);
 $not$ = ($31<<24>>24)!=(114);
 $32 = $30 | $not$;
 do {
  if ($32) {
   L17: do {
    if ($2) {
     $$02$lcssa$i6 = $mode;
     label = 25;
    } else {
     $$0211$i3 = $mode;
     while(1) {
      $65 = HEAP8[$$0211$i3>>0]|0;
      switch ($65<<24>>24) {
      case 0: case 119:  {
       $$0$i19 = $$0211$i3;$93 = $65;
       break L17;
       break;
      }
      default: {
      }
      }
      $66 = ((($$0211$i3)) + 1|0);
      $67 = $66;
      $68 = $67 & 3;
      $69 = ($68|0)==(0);
      if ($69) {
       $$02$lcssa$i6 = $66;
       label = 25;
       break L17;
      } else {
       $$0211$i3 = $66;
      }
     }
    }
   } while(0);
   L21: do {
    if ((label|0) == 25) {
     $70 = HEAP32[$$02$lcssa$i6>>2]|0;
     $71 = (($70) + -16843009)|0;
     $72 = $70 & -2139062144;
     $73 = $72 ^ -2139062144;
     $74 = $73 & $71;
     $75 = ($74|0)==(0);
     L23: do {
      if ($75) {
       $77 = $70;$w$08$i9 = $$02$lcssa$i6;
       while(1) {
        $76 = $77 ^ 2004318071;
        $78 = (($76) + -16843009)|0;
        $79 = $77 & -2139062144;
        $80 = $79 ^ -2139062144;
        $81 = $80 & $78;
        $82 = ($81|0)==(0);
        if (!($82)) {
         $w$0$lcssa$i13 = $w$08$i9;
         break L23;
        }
        $83 = ((($w$08$i9)) + 4|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = (($84) + -16843009)|0;
        $86 = $84 & -2139062144;
        $87 = $86 ^ -2139062144;
        $88 = $87 & $85;
        $89 = ($88|0)==(0);
        if ($89) {
         $77 = $84;$w$08$i9 = $83;
        } else {
         $w$0$lcssa$i13 = $83;
         break;
        }
       }
      } else {
       $w$0$lcssa$i13 = $$02$lcssa$i6;
      }
     } while(0);
     $$1$i15 = $w$0$lcssa$i13;
     while(1) {
      $90 = HEAP8[$$1$i15>>0]|0;
      $91 = ((($$1$i15)) + 1|0);
      switch ($90<<24>>24) {
      case 0: case 119:  {
       $$0$i19 = $$1$i15;$93 = $90;
       break L21;
       break;
      }
      default: {
       $$1$i15 = $91;
      }
      }
     }
    }
   } while(0);
   $92 = ($$0$i19|0)==(0|0);
   $not$43 = ($93<<24>>24)!=(119);
   $94 = $92 | $not$43;
   if ($94) {
    L33: do {
     if ($2) {
      $$02$lcssa$i28 = $mode;
      label = 34;
     } else {
      $$0211$i25 = $mode;
      while(1) {
       $95 = HEAP8[$$0211$i25>>0]|0;
       switch ($95<<24>>24) {
       case 0: case 97:  {
        $$0$i41 = $$0211$i25;$123 = $95;
        break L33;
        break;
       }
       default: {
       }
       }
       $96 = ((($$0211$i25)) + 1|0);
       $97 = $96;
       $98 = $97 & 3;
       $99 = ($98|0)==(0);
       if ($99) {
        $$02$lcssa$i28 = $96;
        label = 34;
        break L33;
       } else {
        $$0211$i25 = $96;
       }
      }
     }
    } while(0);
    L37: do {
     if ((label|0) == 34) {
      $100 = HEAP32[$$02$lcssa$i28>>2]|0;
      $101 = (($100) + -16843009)|0;
      $102 = $100 & -2139062144;
      $103 = $102 ^ -2139062144;
      $104 = $103 & $101;
      $105 = ($104|0)==(0);
      L39: do {
       if ($105) {
        $107 = $100;$w$08$i31 = $$02$lcssa$i28;
        while(1) {
         $106 = $107 ^ 1633771873;
         $108 = (($106) + -16843009)|0;
         $109 = $107 & -2139062144;
         $110 = $109 ^ -2139062144;
         $111 = $110 & $108;
         $112 = ($111|0)==(0);
         if (!($112)) {
          $w$0$lcssa$i35 = $w$08$i31;
          break L39;
         }
         $113 = ((($w$08$i31)) + 4|0);
         $114 = HEAP32[$113>>2]|0;
         $115 = (($114) + -16843009)|0;
         $116 = $114 & -2139062144;
         $117 = $116 ^ -2139062144;
         $118 = $117 & $115;
         $119 = ($118|0)==(0);
         if ($119) {
          $107 = $114;$w$08$i31 = $113;
         } else {
          $w$0$lcssa$i35 = $113;
          break;
         }
        }
       } else {
        $w$0$lcssa$i35 = $$02$lcssa$i28;
       }
      } while(0);
      $$1$i37 = $w$0$lcssa$i35;
      while(1) {
       $120 = HEAP8[$$1$i37>>0]|0;
       $121 = ((($$1$i37)) + 1|0);
       switch ($120<<24>>24) {
       case 0: case 97:  {
        $$0$i41 = $$1$i37;$123 = $120;
        break L37;
        break;
       }
       default: {
        $$1$i37 = $121;
       }
       }
      }
     }
    } while(0);
    $122 = ($$0$i41|0)==(0|0);
    $not$44 = ($123<<24>>24)!=(97);
    $124 = $122 | $not$44;
    if ($124) {
     $129 = HEAP32[6773]|0;
     $130 = ($129|0)==(0|0);
     if ($130) {
      $$0$i = 27136;
     } else {
      $131 = (_pthread_self()|0);
      $132 = ((($131)) + 64|0);
      $133 = HEAP32[$132>>2]|0;
      $$0$i = $133;
     }
     HEAP32[$$0$i>>2] = 22;
     $$0 = 0;
     return ($$0|0);
    }
   }
   $125 = (_hopen($path,$mode)|0);
   $126 = ($125|0)==(0|0);
   if ($126) {
    $$0 = 0;
    return ($$0|0);
   }
   $127 = (_bgzf_write_init($mode)|0);
   $128 = ($127|0)==(0|0);
   if ($128) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $134 = ((($127)) + 52|0);
    HEAP32[$134>>2] = $125;
    $fp$0 = $127;
    break;
   }
  } else {
   $33 = (_hopen($path,$mode)|0);
   $34 = ($33|0)==(0|0);
   if ($34) {
    $$0 = 0;
    return ($$0|0);
   }
   $35 = (_bgzf_read_init($33)|0);
   $36 = ($35|0)==(0|0);
   if (!($36)) {
    $64 = ((($35)) + 52|0);
    HEAP32[$64>>2] = $33;
    $fp$0 = $35;
    break;
   }
   $37 = HEAP32[6773]|0;
   $38 = ($37|0)==(0|0);
   if ($38) {
    $$0$i$i = 27136;
   } else {
    $39 = (_pthread_self()|0);
    $40 = ((($39)) + 64|0);
    $41 = HEAP32[$40>>2]|0;
    $$0$i$i = $41;
   }
   $42 = HEAP32[$$0$i$i>>2]|0;
   $43 = ((($33)) + 16|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($44)) + 16|0);
   $46 = HEAP32[$45>>2]|0;
   (FUNCTION_TABLE_ii[$46 & 63]($33)|0);
   $47 = HEAP32[6773]|0;
   $48 = ($47|0)==(0|0);
   if ($48) {
    $$0$i$i21 = 27136;
   } else {
    $49 = (_pthread_self()|0);
    $50 = ((($49)) + 64|0);
    $51 = HEAP32[$50>>2]|0;
    $$0$i$i21 = $51;
   }
   $52 = HEAP32[$$0$i$i21>>2]|0;
   $53 = HEAP32[$33>>2]|0;
   _free($53);
   _free($33);
   $54 = HEAP32[6773]|0;
   $55 = ($54|0)==(0|0);
   if ($55) {
    $$0$i1$i23 = 27136;
   } else {
    $56 = (_pthread_self()|0);
    $57 = ((($56)) + 64|0);
    $58 = HEAP32[$57>>2]|0;
    $$0$i1$i23 = $58;
   }
   HEAP32[$$0$i1$i23>>2] = $52;
   $59 = HEAP32[6773]|0;
   $60 = ($59|0)==(0|0);
   if ($60) {
    $$0$i1$i = 27136;
   } else {
    $61 = (_pthread_self()|0);
    $62 = ((($61)) + 64|0);
    $63 = HEAP32[$62>>2]|0;
    $$0$i1$i = $63;
   }
   HEAP32[$$0$i1$i>>2] = $42;
   $$0 = 0;
   return ($$0|0);
  }
 } while(0);
 $135 = HEAP32[$fp$0>>2]|0;
 $136 = $135 & -786433;
 HEAP32[$fp$0>>2] = $136;
 $$0 = $fp$0;
 return ($$0|0);
}
function _bgzf_read_init($hfpr) {
 $hfpr = $hfpr|0;
 var $$0 = 0, $$03$i = 0, $$n$0$i = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04$i = 0, $magic = 0, $n$0$i = 0, $n$1$i = 0, $or$cond = 0, $phitmp = 0, $r$05$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $magic = sp;
 $0 = ((($hfpr)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($hfpr)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $n$0$i = $4;
 while(1) {
  $5 = ($n$0$i>>>0)<(18);
  if (!($5)) {
   label = 6;
   break;
  }
  $6 = (_refill_buffer($hfpr)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   $$0 = 0;
   label = 24;
   break;
  }
  $8 = ($6|0)==(0);
  if ($8) {
   $n$1$i = $n$0$i;
   break;
  }
  $9 = (($n$0$i) + ($6))|0;
  $n$0$i = $9;
 }
 if ((label|0) == 6) {
  $10 = ($n$0$i>>>0)>(18);
  $$n$0$i = $10 ? 18 : $n$0$i;
  $n$1$i = $$n$0$i;
 }
 else if ((label|0) == 24) {
  STACKTOP = sp;return ($$0|0);
 }
 $11 = HEAP32[$2>>2]|0;
 _memcpy(($magic|0),($11|0),($n$1$i|0))|0;
 $12 = (_malloc(72)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = ((($12)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 3;
 $17 = ($16|0)==(0);
 if ($17) {
  $$pre = HEAP32[$12>>2]|0;
  $phitmp = $$pre & -196609;
  $$pre$phiZ2D = $12;$18 = $phitmp;
 } else {
  dest=$12; stop=dest+72|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  $$pre$phiZ2D = $12;$18 = 0;
 }
 HEAP32[$$pre$phiZ2D>>2] = $18;
 $19 = (_malloc(131072)|0);
 $20 = ((($12)) + 40|0);
 HEAP32[$20>>2] = $19;
 $21 = ($19|0)==(0|0);
 if ($21) {
  _free($12);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = ((($19)) + 65536|0);
 $23 = ((($12)) + 44|0);
 HEAP32[$23>>2] = $22;
 $24 = ($n$1$i|0)==(18);
 $25 = HEAP8[$magic>>0]|0;
 $26 = ($25<<24>>24)==(31);
 $or$cond = $24 & $26;
 L21: do {
  if ($or$cond) {
   $29 = ((($magic)) + 1|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = ($30<<24>>24)==(-117);
   $32 = $31&1;
   $33 = HEAP32[$$pre$phiZ2D>>2]|0;
   $34 = $32 << 29;
   $35 = $33 & -1610612737;
   $36 = $35 | $34;
   HEAP32[$$pre$phiZ2D>>2] = $36;
   if ($31) {
    $37 = ((($magic)) + 3|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38 & 4;
    $40 = ($39<<24>>24)==(0);
    if ($40) {
     $50 = $36;$52 = 0;
    } else {
     $41 = ((($magic)) + 12|0);
     $$03$i = 4;$l$04$i = $41;$r$05$i = 15716;
     while(1) {
      $42 = HEAP8[$l$04$i>>0]|0;
      $43 = HEAP8[$r$05$i>>0]|0;
      $44 = ($42<<24>>24)==($43<<24>>24);
      if (!($44)) {
       $50 = $36;$52 = 0;
       break L21;
      }
      $45 = (($$03$i) + -1)|0;
      $46 = ((($l$04$i)) + 1|0);
      $47 = ((($r$05$i)) + 1|0);
      $48 = ($45|0)==(0);
      if ($48) {
       $50 = $36;$52 = -2147483648;
       break;
      } else {
       $$03$i = $45;$l$04$i = $46;$r$05$i = $47;
      }
     }
    }
   } else {
    $50 = $36;$52 = -2147483648;
   }
  } else {
   $27 = HEAP32[$$pre$phiZ2D>>2]|0;
   $28 = $27 & -1610612737;
   HEAP32[$$pre$phiZ2D>>2] = $28;
   $50 = $28;$52 = -2147483648;
  }
 } while(0);
 $49 = $50 & 2147483647;
 $51 = $52 | $49;
 $53 = $51 ^ -2147483648;
 HEAP32[$$pre$phiZ2D>>2] = $53;
 $54 = (_malloc(28)|0);
 $55 = ($54|0)==(0|0);
 if (!($55)) {
  $56 = ((($54)) + -4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $57 & 3;
  $59 = ($58|0)==(0);
  if (!($59)) {
   dest=$54; stop=dest+28|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  }
 }
 $60 = ((($12)) + 48|0);
 HEAP32[$60>>2] = $54;
 $$0 = $12;
 STACKTOP = sp;return ($$0|0);
}
function _bgzf_write_init($mode) {
 $mode = $mode|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i2 = 0, $$0$i3 = 0, $$0$i4 = 0, $$02$lcssa$i = 0, $$02$lcssa$i$i = 0, $$0211$i = 0, $$0211$i$i = 0, $$1$i = 0, $$1$i$i = 0, $$not = 0, $$off = 0, $$phitmp = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $compress_level$0$i = 0, $i$0$i = 0, $i$03$i = 0, $i$03$i7 = 0, $i$12$i = 0;
 var $i$12$i11 = 0, $not$19 = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond47 = 0, $phitmp = 0, $s$0$lcssa$i = 0, $s$01$i = 0, $s$01$i12 = 0, $s$1$i = 0, $s$1$i14 = 0, $storemerge = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $w$0$lcssa$i = 0, $w$0$lcssa$i$i = 0;
 var $w$08$i = 0, $w$08$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_malloc(72)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   label = 51;
  } else {
   $2 = ((($0)) + -4|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = $3 & 3;
   $5 = ($4|0)==(0);
   if ($5) {
    $$pre = HEAP32[$0>>2]|0;
    $$pre$phiZ2D = $0;$7 = $$pre;
   } else {
    dest=$0; stop=dest+72|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    $$pre$phiZ2D = $0;$7 = 0;
   }
   $6 = $7 & -196609;
   $8 = $6 | 65536;
   HEAP32[$$pre$phiZ2D>>2] = $8;
   $i$0$i = 0;
   while(1) {
    $9 = (($mode) + ($i$0$i)|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(0);
    $$off = (($10) + -48)<<24>>24;
    $12 = ($$off&255)<(10);
    $or$cond = $11 | $12;
    if ($or$cond) {
     break;
    }
    $13 = (($i$0$i) + 1)|0;
    $i$0$i = $13;
   }
   $14 = $10 << 24 >> 24;
   $15 = (($14) + -48)|0;
   $compress_level$0$i = $11 ? -1 : $15;
   $16 = $mode;
   $17 = $16 & 3;
   $18 = ($17|0)==(0);
   L11: do {
    if ($18) {
     $$02$lcssa$i$i = $mode;
     label = 11;
    } else {
     $$0211$i$i = $mode;
     while(1) {
      $19 = HEAP8[$$0211$i$i>>0]|0;
      switch ($19<<24>>24) {
      case 0: case 117:  {
       $$0$i$i = $$0211$i$i;$46 = $19;
       break L11;
       break;
      }
      default: {
      }
      }
      $20 = ((($$0211$i$i)) + 1|0);
      $21 = $20;
      $22 = $21 & 3;
      $23 = ($22|0)==(0);
      if ($23) {
       $$02$lcssa$i$i = $20;
       label = 11;
       break L11;
      } else {
       $$0211$i$i = $20;
      }
     }
    }
   } while(0);
   L15: do {
    if ((label|0) == 11) {
     $24 = HEAP32[$$02$lcssa$i$i>>2]|0;
     $25 = (($24) + -16843009)|0;
     $26 = $24 & -2139062144;
     $27 = $26 ^ -2139062144;
     $28 = $27 & $25;
     $29 = ($28|0)==(0);
     L17: do {
      if ($29) {
       $31 = $24;$w$08$i$i = $$02$lcssa$i$i;
       while(1) {
        $30 = $31 ^ 1970632053;
        $32 = (($30) + -16843009)|0;
        $33 = $31 & -2139062144;
        $34 = $33 ^ -2139062144;
        $35 = $34 & $32;
        $36 = ($35|0)==(0);
        if (!($36)) {
         $w$0$lcssa$i$i = $w$08$i$i;
         break L17;
        }
        $37 = ((($w$08$i$i)) + 4|0);
        $38 = HEAP32[$37>>2]|0;
        $39 = (($38) + -16843009)|0;
        $40 = $38 & -2139062144;
        $41 = $40 ^ -2139062144;
        $42 = $41 & $39;
        $43 = ($42|0)==(0);
        if ($43) {
         $31 = $38;$w$08$i$i = $37;
        } else {
         $w$0$lcssa$i$i = $37;
         break;
        }
       }
      } else {
       $w$0$lcssa$i$i = $$02$lcssa$i$i;
      }
     } while(0);
     $$1$i$i = $w$0$lcssa$i$i;
     while(1) {
      $44 = HEAP8[$$1$i$i>>0]|0;
      $45 = ((($$1$i$i)) + 1|0);
      switch ($44<<24>>24) {
      case 0: case 117:  {
       $$0$i$i = $$1$i$i;$46 = $44;
       break L15;
       break;
      }
      default: {
       $$1$i$i = $45;
      }
      }
     }
    }
   } while(0);
   $notlhs = ($$0$i$i|0)!=(0|0);
   $notrhs = ($46<<24>>24)==(117);
   $$not = $notrhs & $notlhs;
   $47 = ($compress_level$0$i|0)==(-2);
   $or$cond47 = $$not | $47;
   $48 = $8 & -1610743809;
   if ($or$cond47) {
    HEAP32[$$pre$phiZ2D>>2] = $48;
    $$0 = $0;
    STACKTOP = sp;return ($$0|0);
   }
   $49 = $48 | 536870912;
   HEAP32[$$pre$phiZ2D>>2] = $49;
   $50 = (_malloc(131072)|0);
   $51 = ((($0)) + 40|0);
   HEAP32[$51>>2] = $50;
   $52 = ($50|0)==(0|0);
   if ($52) {
    label = 51;
   } else {
    $53 = ((($50)) + 65536|0);
    $54 = ((($0)) + 44|0);
    HEAP32[$54>>2] = $53;
    $55 = ($compress_level$0$i|0)<(0);
    $phitmp = $compress_level$0$i & 511;
    $$phitmp = $55 ? 511 : $phitmp;
    $56 = HEAP32[$$pre$phiZ2D>>2]|0;
    $57 = $$phitmp << 20;
    $58 = $56 & -535822337;
    $59 = $58 | $57;
    $60 = $$phitmp << 23;
    $61 = ($60|0)>(75497472);
    $62 = $56 | 535822336;
    $storemerge = $61 ? $62 : $59;
    HEAP32[$$pre$phiZ2D>>2] = $storemerge;
    L30: do {
     if ($18) {
      $$02$lcssa$i = $mode;
      label = 22;
     } else {
      $$0211$i = $mode;
      while(1) {
       $63 = HEAP8[$$0211$i>>0]|0;
       switch ($63<<24>>24) {
       case 0: case 103:  {
        $$0$i = $$0211$i;$91 = $63;
        break L30;
        break;
       }
       default: {
       }
       }
       $64 = ((($$0211$i)) + 1|0);
       $65 = $64;
       $66 = $65 & 3;
       $67 = ($66|0)==(0);
       if ($67) {
        $$02$lcssa$i = $64;
        label = 22;
        break L30;
       } else {
        $$0211$i = $64;
       }
      }
     }
    } while(0);
    L34: do {
     if ((label|0) == 22) {
      $68 = HEAP32[$$02$lcssa$i>>2]|0;
      $69 = (($68) + -16843009)|0;
      $70 = $68 & -2139062144;
      $71 = $70 ^ -2139062144;
      $72 = $71 & $69;
      $73 = ($72|0)==(0);
      L36: do {
       if ($73) {
        $75 = $68;$w$08$i = $$02$lcssa$i;
        while(1) {
         $74 = $75 ^ 1734829927;
         $76 = (($74) + -16843009)|0;
         $77 = $75 & -2139062144;
         $78 = $77 ^ -2139062144;
         $79 = $78 & $76;
         $80 = ($79|0)==(0);
         if (!($80)) {
          $w$0$lcssa$i = $w$08$i;
          break L36;
         }
         $81 = ((($w$08$i)) + 4|0);
         $82 = HEAP32[$81>>2]|0;
         $83 = (($82) + -16843009)|0;
         $84 = $82 & -2139062144;
         $85 = $84 ^ -2139062144;
         $86 = $85 & $83;
         $87 = ($86|0)==(0);
         if ($87) {
          $75 = $82;$w$08$i = $81;
         } else {
          $w$0$lcssa$i = $81;
          break;
         }
        }
       } else {
        $w$0$lcssa$i = $$02$lcssa$i;
       }
      } while(0);
      $$1$i = $w$0$lcssa$i;
      while(1) {
       $88 = HEAP8[$$1$i>>0]|0;
       $89 = ((($$1$i)) + 1|0);
       switch ($88<<24>>24) {
       case 0: case 103:  {
        $$0$i = $$1$i;$91 = $88;
        break L34;
        break;
       }
       default: {
        $$1$i = $89;
       }
       }
      }
     }
    } while(0);
    $90 = ($$0$i|0)==(0|0);
    $not$19 = ($91<<24>>24)!=(103);
    $92 = $90 | $not$19;
    if ($92) {
     $$0 = $0;
     STACKTOP = sp;return ($$0|0);
    }
    $93 = $storemerge | -2147483648;
    HEAP32[$$pre$phiZ2D>>2] = $93;
    $94 = (_malloc(56)|0);
    $95 = ($94|0)==(0|0);
    if ($95) {
     $100 = ((($0)) + 68|0);
     HEAP32[$100>>2] = 0;
     label = 51;
     break;
    }
    $96 = ((($94)) + -4|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = $97 & 3;
    $99 = ($98|0)==(0);
    if (!($99)) {
     dest=$94; stop=dest+56|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    }
    $101 = ((($0)) + 68|0);
    HEAP32[$101>>2] = $94;
    $102 = ((($94)) + 32|0);
    HEAP32[$102>>2] = 0;
    $103 = HEAP32[$101>>2]|0;
    $104 = ((($103)) + 36|0);
    HEAP32[$104>>2] = 0;
    $105 = HEAP32[$101>>2]|0;
    $106 = ((($105)) + 24|0);
    HEAP32[$106>>2] = 0;
    $107 = HEAP32[$101>>2]|0;
    $108 = HEAP32[$$pre$phiZ2D>>2]|0;
    $109 = $108 << 3;
    $110 = $109 >> 23;
    $111 = (_deflateInit2_($107,$110,8,31,8,0,18486,56)|0);
    $112 = ($111|0)==(0);
    if ($112) {
     $$0 = $0;
     STACKTOP = sp;return ($$0|0);
    }
    $113 = HEAP32[$101>>2]|0;
    $114 = ($113|0)==(0|0);
    if ($114) {
     label = 35;
    } else {
     $115 = ((($113)) + 24|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(0|0);
     if ($117) {
      label = 35;
     } else {
      $$0$i3 = $116;
     }
    }
    L58: do {
     if ((label|0) == 35) {
      switch ($111|0) {
      case -2:  {
       $$0$i3 = 14212;
       break L58;
       break;
      }
      case -1:  {
       $118 = HEAP32[6773]|0;
       $119 = ($118|0)==(0|0);
       if ($119) {
        $$0$i$i2 = 27136;
       } else {
        $120 = (_pthread_self()|0);
        $121 = ((($120)) + 64|0);
        $122 = HEAP32[$121>>2]|0;
        $$0$i$i2 = $122;
       }
       $123 = HEAP32[$$0$i$i2>>2]|0;
       $i$03$i7 = 0;
       while(1) {
        $125 = (24836 + ($i$03$i7)|0);
        $126 = HEAP8[$125>>0]|0;
        $127 = $126&255;
        $128 = ($127|0)==($123|0);
        if ($128) {
         label = 39;
         break;
        }
        $129 = (($i$03$i7) + 1)|0;
        $130 = ($129|0)==(87);
        if ($130) {
         $i$12$i11 = 87;$s$01$i12 = 24924;
         break;
        } else {
         $i$03$i7 = $129;
        }
       }
       if ((label|0) == 39) {
        $124 = ($i$03$i7|0)==(0);
        if ($124) {
         $$0$i3 = 24924;
         break L58;
        } else {
         $i$12$i11 = $i$03$i7;$s$01$i12 = 24924;
        }
       }
       while(1) {
        $s$1$i14 = $s$01$i12;
        while(1) {
         $131 = HEAP8[$s$1$i14>>0]|0;
         $132 = ($131<<24>>24)==(0);
         $133 = ((($s$1$i14)) + 1|0);
         if ($132) {
          break;
         } else {
          $s$1$i14 = $133;
         }
        }
        $134 = (($i$12$i11) + -1)|0;
        $135 = ($134|0)==(0);
        if ($135) {
         $$0$i3 = $133;
         break;
        } else {
         $i$12$i11 = $134;$s$01$i12 = $133;
        }
       }
       break;
      }
      case -3:  {
       $$0$i3 = 14278;
       break L58;
       break;
      }
      case -4:  {
       $$0$i3 = 14303;
       break L58;
       break;
      }
      case -5:  {
       $$0$i3 = 14317;
       break L58;
       break;
      }
      case -6:  {
       $$0$i3 = 14386;
       break L58;
       break;
      }
      default: {
       HEAP32[$vararg_buffer>>2] = $111;
       _snprintf(27644,32,14408,$vararg_buffer);
       $$0$i3 = 27644;
       break L58;
      }
      }
     }
    } while(0);
    HEAP32[$vararg_buffer1>>2] = 14454;
    $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = $$0$i3;
    _fprintf(9772,14421,$vararg_buffer1);
   }
  }
 } while(0);
 if ((label|0) == 51) {
  $136 = HEAP32[6773]|0;
  $137 = ($136|0)==(0|0);
  if ($137) {
   $$0$i4 = 27136;
  } else {
   $138 = (_pthread_self()|0);
   $139 = ((($138)) + 64|0);
   $140 = HEAP32[$139>>2]|0;
   $$0$i4 = $140;
  }
  $141 = HEAP32[$$0$i4>>2]|0;
  $i$03$i = 0;
  while(1) {
   $143 = (24836 + ($i$03$i)|0);
   $144 = HEAP8[$143>>0]|0;
   $145 = $144&255;
   $146 = ($145|0)==($141|0);
   if ($146) {
    label = 54;
    break;
   }
   $147 = (($i$03$i) + 1)|0;
   $148 = ($147|0)==(87);
   if ($148) {
    $i$12$i = 87;$s$01$i = 24924;
    label = 57;
    break;
   } else {
    $i$03$i = $147;
   }
  }
  if ((label|0) == 54) {
   $142 = ($i$03$i|0)==(0);
   if ($142) {
    $s$0$lcssa$i = 24924;
   } else {
    $i$12$i = $i$03$i;$s$01$i = 24924;
    label = 57;
   }
  }
  if ((label|0) == 57) {
   while(1) {
    label = 0;
    $s$1$i = $s$01$i;
    while(1) {
     $149 = HEAP8[$s$1$i>>0]|0;
     $150 = ($149<<24>>24)==(0);
     $151 = ((($s$1$i)) + 1|0);
     if ($150) {
      break;
     } else {
      $s$1$i = $151;
     }
    }
    $152 = (($i$12$i) + -1)|0;
    $153 = ($152|0)==(0);
    if ($153) {
     $s$0$lcssa$i = $151;
     break;
    } else {
     $i$12$i = $152;$s$01$i = $151;
     label = 57;
    }
   }
  }
  HEAP32[$vararg_buffer5>>2] = 14454;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $s$0$lcssa$i;
  _fprintf(9772,14470,$vararg_buffer5);
 }
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $154 = ((($0)) + 40|0);
 $155 = HEAP32[$154>>2]|0;
 _free($155);
 $156 = ((($0)) + 68|0);
 $157 = HEAP32[$156>>2]|0;
 _free($157);
 _free($0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _bgzf_compress($_dst,$dlen,$src,$slen,$level) {
 $_dst = $_dst|0;
 $dlen = $dlen|0;
 $src = $src|0;
 $slen = $slen|0;
 $level = $level|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i1 = 0, $$0$i$i5 = 0, $$0$i3 = 0, $$0$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$03$i = 0, $i$03$i11 = 0, $i$03$i24 = 0;
 var $i$12$i = 0, $i$12$i15 = 0, $i$12$i28 = 0, $s$01$i = 0, $s$01$i16 = 0, $s$01$i29 = 0, $s$1$i = 0, $s$1$i18 = 0, $s$1$i31 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr18 = 0, $vararg_ptr4 = 0, $zs = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $zs = sp + 48|0;
 $0 = ((($zs)) + 32|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($zs)) + 36|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($zs)) + 24|0);
 HEAP32[$2>>2] = 0;
 HEAP32[$zs>>2] = $src;
 $3 = ((($zs)) + 4|0);
 HEAP32[$3>>2] = $slen;
 $4 = ((($_dst)) + 18|0);
 $5 = ((($zs)) + 12|0);
 HEAP32[$5>>2] = $4;
 $6 = HEAP32[$dlen>>2]|0;
 $7 = (($6) + -26)|0;
 $8 = ((($zs)) + 16|0);
 HEAP32[$8>>2] = $7;
 $9 = (_deflateInit2_($zs,$level,8,-15,8,0,18486,56)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $11 = HEAP32[$2>>2]|0;
  $12 = ($11|0)==(0|0);
  L3: do {
   if ($12) {
    switch ($9|0) {
    case -2:  {
     $$0$i = 14212;
     break L3;
     break;
    }
    case -1:  {
     $13 = HEAP32[6773]|0;
     $14 = ($13|0)==(0|0);
     if ($14) {
      $$0$i$i = 27136;
     } else {
      $15 = (_pthread_self()|0);
      $16 = ((($15)) + 64|0);
      $17 = HEAP32[$16>>2]|0;
      $$0$i$i = $17;
     }
     $18 = HEAP32[$$0$i$i>>2]|0;
     $i$03$i24 = 0;
     while(1) {
      $20 = (24836 + ($i$03$i24)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = $21&255;
      $23 = ($22|0)==($18|0);
      if ($23) {
       label = 7;
       break;
      }
      $24 = (($i$03$i24) + 1)|0;
      $25 = ($24|0)==(87);
      if ($25) {
       $i$12$i28 = 87;$s$01$i29 = 24924;
       break;
      } else {
       $i$03$i24 = $24;
      }
     }
     if ((label|0) == 7) {
      $19 = ($i$03$i24|0)==(0);
      if ($19) {
       $$0$i = 24924;
       break L3;
      } else {
       $i$12$i28 = $i$03$i24;$s$01$i29 = 24924;
      }
     }
     while(1) {
      $s$1$i31 = $s$01$i29;
      while(1) {
       $26 = HEAP8[$s$1$i31>>0]|0;
       $27 = ($26<<24>>24)==(0);
       $28 = ((($s$1$i31)) + 1|0);
       if ($27) {
        break;
       } else {
        $s$1$i31 = $28;
       }
      }
      $29 = (($i$12$i28) + -1)|0;
      $30 = ($29|0)==(0);
      if ($30) {
       $$0$i = $28;
       break;
      } else {
       $i$12$i28 = $29;$s$01$i29 = $28;
      }
     }
     break;
    }
    case -3:  {
     $$0$i = 14278;
     break L3;
     break;
    }
    case -4:  {
     $$0$i = 14303;
     break L3;
     break;
    }
    case -5:  {
     $$0$i = 14317;
     break L3;
     break;
    }
    case -6:  {
     $$0$i = 14386;
     break L3;
     break;
    }
    default: {
     HEAP32[$vararg_buffer>>2] = $9;
     _snprintf(27644,32,14408,$vararg_buffer);
     $$0$i = 27644;
     break L3;
    }
    }
   } else {
    $$0$i = $11;
   }
  } while(0);
  HEAP32[$vararg_buffer1>>2] = 14482;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $$0$i;
  _fprintf(9772,14421,$vararg_buffer1);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = (_deflate($zs,4)|0);
 L28: do {
  switch ($31|0) {
  case 1:  {
   $52 = (_deflateEnd($zs)|0);
   L31: do {
    switch ($52|0) {
    case 0:  {
     $71 = ((($zs)) + 20|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = (($72) + 26)|0;
     HEAP32[$dlen>>2] = $73;
     dest=$_dst; src=14555; stop=dest+18|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
     $74 = ((($_dst)) + 16|0);
     $75 = HEAP32[$dlen>>2]|0;
     $76 = (($75) + 65535)|0;
     $77 = $76&65535;
     $78 = $76&255;
     HEAP8[$74>>0] = $78;
     $79 = ($77&65535) >>> 8;
     $80 = $79&255;
     $81 = ((($_dst)) + 17|0);
     HEAP8[$81>>0] = $80;
     $82 = (_crc32(0,$src,$slen)|0);
     $83 = HEAP32[$dlen>>2]|0;
     $84 = (($83) + -8)|0;
     $85 = (($_dst) + ($84)|0);
     $86 = $82&255;
     HEAP8[$85>>0] = $86;
     $87 = $82 >>> 8;
     $88 = $87&255;
     $89 = ((($85)) + 1|0);
     HEAP8[$89>>0] = $88;
     $90 = $82 >>> 16;
     $91 = $90&255;
     $92 = ((($85)) + 2|0);
     HEAP8[$92>>0] = $91;
     $93 = $82 >>> 24;
     $94 = $93&255;
     $95 = ((($85)) + 3|0);
     HEAP8[$95>>0] = $94;
     $96 = HEAP32[$dlen>>2]|0;
     $97 = (($96) + -4)|0;
     $98 = (($_dst) + ($97)|0);
     $99 = $slen&255;
     HEAP8[$98>>0] = $99;
     $100 = $slen >>> 8;
     $101 = $100&255;
     $102 = ((($98)) + 1|0);
     HEAP8[$102>>0] = $101;
     $103 = $slen >>> 16;
     $104 = $103&255;
     $105 = ((($98)) + 2|0);
     HEAP8[$105>>0] = $104;
     $106 = $slen >>> 24;
     $107 = $106&255;
     $108 = ((($98)) + 3|0);
     HEAP8[$108>>0] = $107;
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case -1:  {
     $53 = HEAP32[6773]|0;
     $54 = ($53|0)==(0|0);
     if ($54) {
      $$0$i$i5 = 27136;
     } else {
      $55 = (_pthread_self()|0);
      $56 = ((($55)) + 64|0);
      $57 = HEAP32[$56>>2]|0;
      $$0$i$i5 = $57;
     }
     $58 = HEAP32[$$0$i$i5>>2]|0;
     $i$03$i = 0;
     while(1) {
      $60 = (24836 + ($i$03$i)|0);
      $61 = HEAP8[$60>>0]|0;
      $62 = $61&255;
      $63 = ($62|0)==($58|0);
      if ($63) {
       label = 39;
       break;
      }
      $64 = (($i$03$i) + 1)|0;
      $65 = ($64|0)==(87);
      if ($65) {
       $i$12$i = 87;$s$01$i = 24924;
       break;
      } else {
       $i$03$i = $64;
      }
     }
     if ((label|0) == 39) {
      $59 = ($i$03$i|0)==(0);
      if ($59) {
       $$0$i7 = 24924;
       break L31;
      } else {
       $i$12$i = $i$03$i;$s$01$i = 24924;
      }
     }
     while(1) {
      $s$1$i = $s$01$i;
      while(1) {
       $66 = HEAP8[$s$1$i>>0]|0;
       $67 = ($66<<24>>24)==(0);
       $68 = ((($s$1$i)) + 1|0);
       if ($67) {
        break;
       } else {
        $s$1$i = $68;
       }
      }
      $69 = (($i$12$i) + -1)|0;
      $70 = ($69|0)==(0);
      if ($70) {
       $$0$i7 = $68;
       break;
      } else {
       $i$12$i = $69;$s$01$i = $68;
      }
     }
     break;
    }
    case -2:  {
     $$0$i7 = 14212;
     break;
    }
    case -3:  {
     $$0$i7 = 14278;
     break;
    }
    case -4:  {
     $$0$i7 = 14303;
     break;
    }
    case -5:  {
     $$0$i7 = 14317;
     break;
    }
    case -6:  {
     $$0$i7 = 14386;
     break;
    }
    default: {
     HEAP32[$vararg_buffer12>>2] = $52;
     _snprintf(27644,32,14408,$vararg_buffer12);
     $$0$i7 = 27644;
    }
    }
   } while(0);
   HEAP32[$vararg_buffer15>>2] = 14482;
   $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
   HEAP32[$vararg_ptr18>>2] = $$0$i7;
   _fprintf(9772,14524,$vararg_buffer15);
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case -3:  {
   $32 = HEAP32[$2>>2]|0;
   $33 = ($32|0)==(0|0);
   $$ = $33 ? 14278 : $32;
   $$0$i3 = $$;
   break;
  }
  case -1:  {
   $34 = HEAP32[6773]|0;
   $35 = ($34|0)==(0|0);
   if ($35) {
    $$0$i$i1 = 27136;
   } else {
    $36 = (_pthread_self()|0);
    $37 = ((($36)) + 64|0);
    $38 = HEAP32[$37>>2]|0;
    $$0$i$i1 = $38;
   }
   $39 = HEAP32[$$0$i$i1>>2]|0;
   $i$03$i11 = 0;
   while(1) {
    $41 = (24836 + ($i$03$i11)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $44 = ($43|0)==($39|0);
    if ($44) {
     label = 24;
     break;
    }
    $45 = (($i$03$i11) + 1)|0;
    $46 = ($45|0)==(87);
    if ($46) {
     $i$12$i15 = 87;$s$01$i16 = 24924;
     break;
    } else {
     $i$03$i11 = $45;
    }
   }
   if ((label|0) == 24) {
    $40 = ($i$03$i11|0)==(0);
    if ($40) {
     $$0$i3 = 24924;
     break L28;
    } else {
     $i$12$i15 = $i$03$i11;$s$01$i16 = 24924;
    }
   }
   while(1) {
    $s$1$i18 = $s$01$i16;
    while(1) {
     $47 = HEAP8[$s$1$i18>>0]|0;
     $48 = ($47<<24>>24)==(0);
     $49 = ((($s$1$i18)) + 1|0);
     if ($48) {
      break;
     } else {
      $s$1$i18 = $49;
     }
    }
    $50 = (($i$12$i15) + -1)|0;
    $51 = ($50|0)==(0);
    if ($51) {
     $$0$i3 = $49;
     break;
    } else {
     $i$12$i15 = $50;$s$01$i16 = $49;
    }
   }
   break;
  }
  case -2:  {
   $$0$i3 = 14212;
   break;
  }
  case -6:  {
   $$0$i3 = 14386;
   break;
  }
  case -4:  {
   $$0$i3 = 14303;
   break;
  }
  case -5:  {
   $$0$i3 = 14317;
   break;
  }
  default: {
   HEAP32[$vararg_buffer5>>2] = $31;
   _snprintf(27644,32,14408,$vararg_buffer5);
   $$0$i3 = 27644;
  }
  }
 } while(0);
 HEAP32[$vararg_buffer8>>2] = 14482;
 $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
 HEAP32[$vararg_ptr11>>2] = $$0$i3;
 _fprintf(9772,14496,$vararg_buffer8);
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _bgzf_read_block($fp) {
 $fp = $fp|0;
 var $$ = 0, $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$i$i10 = 0, $$0$i$i28 = 0, $$0$i$i3 = 0, $$0$i11 = 0, $$0$i1525 = 0, $$0$i3$i$i = 0, $$69 = 0, $$73 = 0, $$74 = 0, $$75 = 0, $$76 = 0, $$pre = 0, $$pre40 = 0, $$pre41 = 0, $$pre43 = 0;
 var $$pre44 = 0, $$pre46 = 0, $$pre48 = 0, $$pre54 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $header = 0, $i$0$i$i = 0, $i$0$i$i1 = 0, $i$0$i$i1$ = 0, $i$03$i = 0, $i$03$i$i$i = 0, $i$03$i30$i$i = 0, $i$1$i$i = 0;
 var $i$1$i$i$site$2$i$i = 0, $i$1$i$i78 = 0, $i$12$i = 0, $i$12$i$i$i = 0, $i$12$i34$i$i = 0, $k$0$i = 0, $not$ = 0, $nskip$0 = 0, $nskip$1 = 0, $nskip$2 = 0, $nskip$3 = 0, $nskip$4 = 0, $nskip$4$ = 0, $or$cond = 0, $phitmp$i = 0, $s$01$i = 0, $s$01$i$i$i = 0, $s$01$i35$i$i = 0, $s$1$i = 0, $s$1$i$i$i = 0;
 var $s$1$i37$i$i = 0, $site$0$i$i = 0, $site$0$i$i$i$0$i$i = 0, $site$2$i$i79 = 0, $step$0$i$i = 0, $step$0$i$i2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer22 = 0, $vararg_buffer26 = 0, $vararg_buffer30 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr14 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0;
 var $vararg_ptr33 = 0, $vararg_ptr7 = 0, $x$0$i$i = 0, $x$3$i$i = 0, $zs$i$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer30 = sp + 72|0;
 $vararg_buffer26 = sp + 64|0;
 $vararg_buffer22 = sp + 56|0;
 $vararg_buffer18 = sp + 48|0;
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $zs$i$i = sp + 80|0;
 $header = sp + 136|0;
 $0 = ((($fp)) + 56|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($1)) + 20|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (_hts_tpool_next_result_wait($4)|0);
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   ___assert_fail((14574|0),(14205|0),631,(14576|0));
   // unreachable;
  }
  $9 = ((($7)) + 131084|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = HEAP32[$fp>>2]|0;
   $13 = $10 & 65535;
   $14 = $12 & -65536;
   $15 = $14 | $13;
   HEAP32[$fp>>2] = $15;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $16 = ((($fp)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0);
  if (!($18)) {
   $19 = ((($fp)) + 16|0);
   HEAP32[$19>>2] = 0;
  }
  $20 = ((($7)) + 131088|0);
  $21 = $20;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($fp)) + 24|0);
  $28 = $27;
  $29 = $28;
  HEAP32[$29>>2] = $23;
  $30 = (($28) + 4)|0;
  $31 = $30;
  HEAP32[$31>>2] = $26;
  $32 = ((($7)) + 65540|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($fp)) + 12|0);
  HEAP32[$34>>2] = $33;
  $35 = ((($7)) + 131080|0);
  $36 = HEAP32[$35>>2]|0;
  HEAP32[$16>>2] = $36;
  $37 = HEAP32[$35>>2]|0;
  $38 = ($37|0)==(0);
  if (!($38)) {
   $39 = HEAP32[$7>>2]|0;
   $40 = ((($39)) + 64|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(0);
   if (!($42)) {
    _bgzf_index_add_block($39);
    $43 = HEAP32[$35>>2]|0;
    $44 = HEAP32[$7>>2]|0;
    $45 = ((($44)) + 60|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 16|0);
    $48 = $47;
    $49 = $48;
    $50 = HEAP32[$49>>2]|0;
    $51 = (($48) + 4)|0;
    $52 = $51;
    $53 = HEAP32[$52>>2]|0;
    $54 = (_i64Add(($50|0),($53|0),($43|0),0)|0);
    $55 = tempRet0;
    $56 = $47;
    $57 = $56;
    HEAP32[$57>>2] = $54;
    $58 = (($56) + 4)|0;
    $59 = $58;
    HEAP32[$59>>2] = $55;
   }
  }
  $60 = HEAP32[$0>>2]|0;
  $61 = ((($60)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($62|0)==(0|0);
  if ($63) {
   $76 = $60;
  } else {
   $64 = ((($60)) + 28|0);
   (_pthread_mutex_lock(($64|0))|0);
   $65 = HEAP32[$0>>2]|0;
   $66 = HEAP32[$65>>2]|0;
   $67 = ((($65)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ((($66)) + 16|0);
   $70 = HEAP32[$69>>2]|0;
   HEAP32[$68>>2] = $70;
   HEAP32[$69>>2] = $68;
   $71 = HEAP32[$0>>2]|0;
   $72 = ((($71)) + 28|0);
   (_pthread_mutex_unlock(($72|0))|0);
   $$pre = HEAP32[$0>>2]|0;
   $76 = $$pre;
  }
  $73 = ((($7)) + 65544|0);
  $74 = ((($fp)) + 40|0);
  HEAP32[$74>>2] = $73;
  $75 = ((($76)) + 4|0);
  HEAP32[$75>>2] = $7;
  $77 = HEAP32[$0>>2]|0;
  $78 = ((($77)) + 64|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ($79|0)==(0|0);
  if (!($80)) {
   _free($79);
   $81 = HEAP32[$0>>2]|0;
   $82 = ((($81)) + 64|0);
   HEAP32[$82>>2] = 0;
  }
  $83 = ($5|0)==(0|0);
  if ($83) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  _free($5);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $84 = HEAP32[$fp>>2]|0;
 $85 = $84 & 1610612736;
 $86 = ($85|0)==(0);
 $87 = ((($fp)) + 52|0);
 $88 = HEAP32[$87>>2]|0;
 if ($86) {
  $89 = ((($fp)) + 40|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ((($88)) + 8|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ((($88)) + 4|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($92) - ($94))|0;
  $96 = ($95>>>0)>(65536);
  $97 = $94;
  $$ = $96 ? 65536 : $95;
  _memcpy(($90|0),($97|0),($$|0))|0;
  $98 = HEAP32[$93>>2]|0;
  $99 = (($98) + ($$)|0);
  HEAP32[$93>>2] = $99;
  $100 = ($$|0)==(65536);
  if ($100) {
   $115 = 65536;
  } else {
   $101 = (_hread2($88,$90,65536,$$)|0);
   $102 = ($101|0)<(0);
   if ($102) {
    $103 = HEAP32[$fp>>2]|0;
    $104 = $103 & 65531;
    $105 = $104 | 4;
    $106 = $103 & -65536;
    $107 = $106 | $105;
    HEAP32[$fp>>2] = $107;
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $108 = ($101|0)==(0);
   if ($108) {
    $109 = ((($fp)) + 8|0);
    HEAP32[$109>>2] = 0;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $115 = $101;
   }
  }
  $110 = ((($fp)) + 8|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($111|0)==(0);
  if (!($112)) {
   $113 = ((($fp)) + 16|0);
   HEAP32[$113>>2] = 0;
  }
  $114 = ($115|0)<(0);
  $116 = $114 << 31 >> 31;
  $117 = ((($fp)) + 24|0);
  $118 = $117;
  $119 = $118;
  $120 = HEAP32[$119>>2]|0;
  $121 = (($118) + 4)|0;
  $122 = $121;
  $123 = HEAP32[$122>>2]|0;
  $124 = (_i64Add(($120|0),($123|0),($115|0),($116|0))|0);
  $125 = tempRet0;
  $126 = $117;
  $127 = $126;
  HEAP32[$127>>2] = $124;
  $128 = (($126) + 4)|0;
  $129 = $128;
  HEAP32[$129>>2] = $125;
  HEAP32[$110>>2] = $115;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $130 = ((($88)) + 20|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = ((($88)) + 4|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = HEAP32[$88>>2]|0;
 $135 = (($133) - ($134))|0;
 $136 = (($131) + ($135))|0;
 $137 = ($136|0)<(0);
 $138 = $137 << 31 >> 31;
 $139 = ($84|0)<(0);
 if ($139) {
  $140 = ((($fp)) + 68|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = ($141|0)==(0|0);
  if (!($142)) {
   $143 = (_inflate_gzip_block($fp,0)|0);
   $144 = ($143|0)<(0);
   if ($144) {
    $145 = HEAP32[$fp>>2]|0;
    $146 = $145 & 65534;
    $147 = $146 | 1;
    $148 = $145 & -65536;
    $149 = $148 | $147;
    HEAP32[$fp>>2] = $149;
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $150 = ((($fp)) + 8|0);
    HEAP32[$150>>2] = $143;
    $151 = ((($fp)) + 24|0);
    $152 = $151;
    $153 = $152;
    HEAP32[$153>>2] = $136;
    $154 = (($152) + 4)|0;
    $155 = $154;
    HEAP32[$155>>2] = $138;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $156 = ((($fp)) + 4|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = ($157|0)==(0);
 L53: do {
  if ($158) {
   $247 = $88;
  } else {
   $159 = ((($fp)) + 48|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = HEAP32[$160>>2]|0;
   $162 = ($161|0)==(0);
   if ($162) {
    $$0$i$i3 = 0;
   } else {
    $163 = (($161) + -1)|0;
    $164 = (_bitshift64Lshr(($136|0),($138|0),33)|0);
    $165 = tempRet0;
    $166 = $164 ^ $136;
    $167 = $165 ^ $138;
    $168 = (_bitshift64Shl(($136|0),($138|0),11)|0);
    $169 = tempRet0;
    $170 = $166 ^ $168;
    $167 ^ $169;
    $171 = $170 & $163;
    $172 = ((($160)) + 16|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = ((($160)) + 20|0);
    $i$0$i$i1 = $171;$step$0$i$i2 = 0;
    while(1) {
     $175 = $i$0$i$i1 >>> 4;
     $176 = (($173) + ($175<<2)|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = $i$0$i$i1 << 1;
     $179 = $178 & 30;
     $180 = 2 << $179;
     $181 = $177 & $180;
     $182 = ($181|0)==(0);
     if (!($182)) {
      break;
     }
     $183 = 1 << $179;
     $184 = $177 & $183;
     $185 = ($184|0)==(0);
     if ($185) {
      $186 = HEAP32[$174>>2]|0;
      $187 = (($186) + ($i$0$i$i1<<3)|0);
      $188 = $187;
      $189 = $188;
      $190 = HEAP32[$189>>2]|0;
      $191 = (($188) + 4)|0;
      $192 = $191;
      $193 = HEAP32[$192>>2]|0;
      $194 = ($190|0)==($136|0);
      $195 = ($193|0)==($138|0);
      $196 = $194 & $195;
      if ($196) {
       break;
      }
     }
     $197 = (($step$0$i$i2) + 1)|0;
     $198 = (($i$0$i$i1) + ($197))|0;
     $199 = $198 & $163;
     $200 = ($199|0)==($171|0);
     if ($200) {
      $247 = $88;
      break L53;
     } else {
      $i$0$i$i1 = $199;$step$0$i$i2 = $197;
     }
    }
    $201 = 3 << $179;
    $202 = $177 & $201;
    $203 = ($202|0)==(0);
    $i$0$i$i1$ = $203 ? $i$0$i$i1 : $161;
    $$0$i$i3 = $i$0$i$i1$;
   }
   $204 = ($$0$i$i3|0)==($161|0);
   if ($204) {
    $247 = $88;
   } else {
    $205 = ((($160)) + 24|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = ((($fp)) + 8|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = ($208|0)==(0);
    if (!($209)) {
     $210 = ((($fp)) + 16|0);
     HEAP32[$210>>2] = 0;
    }
    $211 = ((($fp)) + 24|0);
    $212 = $211;
    $213 = $212;
    HEAP32[$213>>2] = $136;
    $214 = (($212) + 4)|0;
    $215 = $214;
    HEAP32[$215>>2] = $138;
    $216 = (($206) + ($$0$i$i3<<4)|0);
    $217 = HEAP32[$216>>2]|0;
    HEAP32[$207>>2] = $217;
    $218 = ((($fp)) + 40|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = (((($206) + ($$0$i$i3<<4)|0)) + 4|0);
    $221 = HEAP32[$220>>2]|0;
    _memcpy(($219|0),($221|0),65536)|0;
    $222 = ((($fp)) + 52|0);
    $223 = HEAP32[$222>>2]|0;
    $224 = (((($206) + ($$0$i$i3<<4)|0)) + 8|0);
    $225 = $224;
    $226 = $225;
    $227 = HEAP32[$226>>2]|0;
    $228 = (($225) + 4)|0;
    $229 = $228;
    $230 = HEAP32[$229>>2]|0;
    $231 = (_hseek($223,$227,0)|0);
    $232 = ($231|0)<(0);
    if ($232) {
     $233 = $224;
     $234 = $233;
     $235 = HEAP32[$234>>2]|0;
     $236 = (($233) + 4)|0;
     $237 = $236;
     $238 = HEAP32[$237>>2]|0;
     $239 = $vararg_buffer;
     $240 = $239;
     HEAP32[$240>>2] = $235;
     $241 = (($239) + 4)|0;
     $242 = $241;
     HEAP32[$242>>2] = $238;
     _fprintf(9772,14639,$vararg_buffer);
     _exit(1);
     // unreachable;
    }
    $243 = HEAP32[$216>>2]|0;
    $244 = ($243|0)==(0);
    if ($244) {
     $$pre40 = HEAP32[$222>>2]|0;
     $247 = $$pre40;
     break;
    } else {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $245 = ((($fp)) + 52|0);
 $246 = ((($247)) + 8|0);
 $248 = HEAP32[$246>>2]|0;
 $249 = ((($247)) + 4|0);
 $250 = HEAP32[$249>>2]|0;
 $251 = (($248) - ($250))|0;
 $252 = ($251>>>0)>(18);
 $253 = $250;
 $$69 = $252 ? 18 : $251;
 _memcpy(($header|0),($253|0),($$69|0))|0;
 $254 = HEAP32[$249>>2]|0;
 $255 = (($254) + ($$69)|0);
 HEAP32[$249>>2] = $255;
 $256 = ($$69|0)==(18);
 L76: do {
  if ($256) {
   label = 49;
  } else {
   $257 = (_hread2($247,$header,18,$$69)|0);
   switch ($257|0) {
   case 18:  {
    label = 49;
    break L76;
    break;
   }
   case 0:  {
    break;
   }
   default: {
    break L76;
   }
   }
   $258 = ((($fp)) + 8|0);
   HEAP32[$258>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 if ((label|0) == 49) {
  $259 = HEAP8[$header>>0]|0;
  $260 = ($259<<24>>24)==(31);
  if ($260) {
   $261 = ((($header)) + 1|0);
   $262 = HEAP8[$261>>0]|0;
   $263 = ($262<<24>>24)==(-117);
   if ($263) {
    $264 = ((($header)) + 2|0);
    $265 = HEAP8[$264>>0]|0;
    $266 = ($265<<24>>24)==(8);
    if ($266) {
     $267 = ((($header)) + 3|0);
     $268 = HEAP8[$267>>0]|0;
     $269 = $268 & 4;
     $270 = ($269<<24>>24)==(0);
     if (!($270)) {
      $271 = ((($header)) + 10|0);
      $272 = HEAP8[$271>>0]|0;
      $273 = $272&255;
      $274 = ((($header)) + 11|0);
      $275 = HEAP8[$274>>0]|0;
      $276 = $275&255;
      $277 = $276 << 8;
      $278 = $273 | $277;
      $279 = ($278|0)==(6);
      if ($279) {
       $280 = ((($header)) + 12|0);
       $281 = HEAP8[$280>>0]|0;
       $282 = ($281<<24>>24)==(66);
       if ($282) {
        $283 = ((($header)) + 13|0);
        $284 = HEAP8[$283>>0]|0;
        $285 = ($284<<24>>24)==(67);
        if ($285) {
         $286 = ((($header)) + 14|0);
         $287 = HEAP8[$286>>0]|0;
         $288 = $287&255;
         $289 = ((($header)) + 15|0);
         $290 = HEAP8[$289>>0]|0;
         $291 = $290&255;
         $292 = $291 << 8;
         $293 = $288 | $292;
         $phitmp$i = ($293|0)==(2);
         if ($phitmp$i) {
          $411 = ((($header)) + 16|0);
          $412 = HEAP8[$411>>0]|0;
          $413 = $412&255;
          $414 = ((($header)) + 17|0);
          $415 = HEAP8[$414>>0]|0;
          $416 = $415&255;
          $417 = $416 << 8;
          $418 = $413 | $417;
          $419 = ((($fp)) + 44|0);
          $420 = HEAP32[$419>>2]|0;
          dest=$420; src=$header; stop=dest+18|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
          $421 = (($418) + -17)|0;
          $422 = HEAP32[$245>>2]|0;
          $423 = ((($420)) + 18|0);
          $424 = ((($422)) + 8|0);
          $425 = HEAP32[$424>>2]|0;
          $426 = ((($422)) + 4|0);
          $427 = HEAP32[$426>>2]|0;
          $428 = (($425) - ($427))|0;
          $429 = ($428>>>0)>($421>>>0);
          $430 = $427;
          $$75 = $429 ? $421 : $428;
          _memcpy(($423|0),($430|0),($$75|0))|0;
          $431 = HEAP32[$426>>2]|0;
          $432 = (($431) + ($$75)|0);
          HEAP32[$426>>2] = $432;
          $433 = ($$75|0)==($421|0);
          if (!($433)) {
           $434 = (_hread2($422,$423,$421,$$75)|0);
           $435 = ($434|0)==($421|0);
           if (!($435)) {
            $436 = HEAP32[$fp>>2]|0;
            $437 = $436 & 65531;
            $438 = $437 | 4;
            $439 = $436 & -65536;
            $440 = $439 | $438;
            HEAP32[$fp>>2] = $440;
            $$0 = -1;
            STACKTOP = sp;return ($$0|0);
           }
          }
          $441 = (($418) + 1)|0;
          $442 = ((($fp)) + 40|0);
          $443 = HEAP32[$442>>2]|0;
          $444 = HEAP32[$419>>2]|0;
          $445 = ((($444)) + 18|0);
          $446 = ((($zs$i$i)) + 32|0);
          HEAP32[$446>>2] = 0;
          $447 = ((($zs$i$i)) + 36|0);
          HEAP32[$447>>2] = 0;
          $448 = ((($zs$i$i)) + 24|0);
          HEAP32[$448>>2] = 0;
          HEAP32[$zs$i$i>>2] = $445;
          $449 = ((($zs$i$i)) + 4|0);
          HEAP32[$449>>2] = $421;
          $450 = ((($zs$i$i)) + 12|0);
          HEAP32[$450>>2] = $443;
          $451 = ((($zs$i$i)) + 16|0);
          HEAP32[$451>>2] = 65536;
          $452 = (_inflateInit2_($zs$i$i,-15,18486)|0);
          $453 = ($452|0)==(0);
          L96: do {
           if ($453) {
            $474 = (_inflate($zs$i$i,4)|0);
            L98: do {
             switch ($474|0) {
             case 1:  {
              $507 = ((($zs$i$i)) + 28|0);
              $508 = HEAP32[$507>>2]|0;
              $509 = ($508|0)==(0|0);
              do {
               if (!($509)) {
                $510 = HEAP32[$447>>2]|0;
                $511 = ($510|0)==(0|0);
                if ($511) {
                 break;
                }
                $512 = ((($508)) + 52|0);
                $513 = HEAP32[$512>>2]|0;
                $514 = ($513|0)==(0|0);
                $$pre48 = ((($zs$i$i)) + 40|0);
                if ($514) {
                 $522 = $510;$523 = $508;
                } else {
                 $515 = HEAP32[$$pre48>>2]|0;
                 FUNCTION_TABLE_vii[$510 & 127]($515,$513);
                 $$pre44 = HEAP32[$447>>2]|0;
                 $$pre46 = HEAP32[$507>>2]|0;
                 $522 = $$pre44;$523 = $$pre46;
                }
                $521 = HEAP32[$$pre48>>2]|0;
                FUNCTION_TABLE_vii[$522 & 127]($521,$523);
                HEAP32[$507>>2] = 0;
                $524 = HEAP32[$451>>2]|0;
                $525 = (65536 - ($524))|0;
                $526 = ($525|0)<(0);
                if ($526) {
                 $$0$i1525 = $525;
                 break L96;
                }
                $532 = ((($fp)) + 8|0);
                $533 = HEAP32[$532>>2]|0;
                $534 = ($533|0)==(0);
                if (!($534)) {
                 $535 = ((($fp)) + 16|0);
                 HEAP32[$535>>2] = 0;
                }
                $536 = ((($fp)) + 24|0);
                $537 = $536;
                $538 = $537;
                HEAP32[$538>>2] = $136;
                $539 = (($537) + 4)|0;
                $540 = $539;
                HEAP32[$540>>2] = $138;
                HEAP32[$532>>2] = $525;
                $541 = ((($fp)) + 64|0);
                $542 = HEAP32[$541>>2]|0;
                $543 = ($542|0)==(0);
                if (!($543)) {
                 _bgzf_index_add_block($fp);
                 $544 = ($525|0)<(0);
                 $545 = $544 << 31 >> 31;
                 $546 = ((($fp)) + 60|0);
                 $547 = HEAP32[$546>>2]|0;
                 $548 = ((($547)) + 16|0);
                 $549 = $548;
                 $550 = $549;
                 $551 = HEAP32[$550>>2]|0;
                 $552 = (($549) + 4)|0;
                 $553 = $552;
                 $554 = HEAP32[$553>>2]|0;
                 $555 = (_i64Add(($551|0),($554|0),($525|0),($545|0))|0);
                 $556 = tempRet0;
                 $557 = $548;
                 $558 = $557;
                 HEAP32[$558>>2] = $555;
                 $559 = (($557) + 4)|0;
                 $560 = $559;
                 HEAP32[$560>>2] = $556;
                }
                $561 = ((($fp)) + 48|0);
                $562 = HEAP32[$561>>2]|0;
                $563 = HEAP32[$156>>2]|0;
                $564 = ($563|0)<(65537);
                if ($564) {
                 $$0 = 0;
                 STACKTOP = sp;return ($$0|0);
                }
                $565 = ((($562)) + 4|0);
                $566 = HEAP32[$565>>2]|0;
                $567 = $566 << 16;
                $568 = (($567) + 65536)|0;
                $569 = ($568>>>0)>($563>>>0);
                L117: do {
                 if ($569) {
                  $570 = HEAP32[$562>>2]|0;
                  $571 = ((($562)) + 16|0);
                  $k$0$i = 0;
                  while(1) {
                   $572 = ($k$0$i>>>0)<($570>>>0);
                   if (!($572)) {
                    break L117;
                   }
                   $573 = $k$0$i >>> 4;
                   $574 = HEAP32[$571>>2]|0;
                   $575 = (($574) + ($573<<2)|0);
                   $576 = HEAP32[$575>>2]|0;
                   $577 = $k$0$i << 1;
                   $578 = $577 & 30;
                   $579 = 3 << $578;
                   $580 = $576 & $579;
                   $581 = ($580|0)==(0);
                   if ($581) {
                    break;
                   }
                   $582 = (($k$0$i) + 1)|0;
                   $k$0$i = $582;
                  }
                  $583 = ((($562)) + 24|0);
                  $584 = HEAP32[$583>>2]|0;
                  $585 = (((($584) + ($k$0$i<<4)|0)) + 4|0);
                  $586 = HEAP32[$585>>2]|0;
                  _free($586);
                  $587 = HEAP32[$562>>2]|0;
                  $588 = ($587|0)==($k$0$i|0);
                  if ($588) {
                   break;
                  }
                  $589 = $k$0$i >>> 4;
                  $590 = HEAP32[$571>>2]|0;
                  $591 = (($590) + ($589<<2)|0);
                  $592 = HEAP32[$591>>2]|0;
                  $593 = $k$0$i << 1;
                  $594 = $593 & 30;
                  $595 = 3 << $594;
                  $596 = $592 & $595;
                  $597 = ($596|0)==(0);
                  if (!($597)) {
                   break;
                  }
                  $598 = 1 << $594;
                  $599 = $592 | $598;
                  HEAP32[$591>>2] = $599;
                  $600 = HEAP32[$565>>2]|0;
                  $601 = (($600) + -1)|0;
                  HEAP32[$565>>2] = $601;
                 }
                } while(0);
                $602 = $536;
                $603 = $602;
                $604 = HEAP32[$603>>2]|0;
                $605 = (($602) + 4)|0;
                $606 = $605;
                $607 = HEAP32[$606>>2]|0;
                $608 = ((($562)) + 8|0);
                $609 = HEAP32[$608>>2]|0;
                $610 = ((($562)) + 12|0);
                $611 = HEAP32[$610>>2]|0;
                $612 = ($609>>>0)<($611>>>0);
                do {
                 if ($612) {
                  label = 168;
                 } else {
                  $613 = HEAP32[$562>>2]|0;
                  $614 = HEAP32[$565>>2]|0;
                  $615 = $614 << 1;
                  $616 = ($613>>>0)>($615>>>0);
                  if ($616) {
                   $617 = (($613) + -1)|0;
                   $618 = (_kh_resize_cache($562,$617)|0);
                   $619 = ($618|0)<(0);
                   if (!($619)) {
                    label = 168;
                    break;
                   }
                   $620 = HEAP32[$562>>2]|0;
                   $$0$i$i28 = $620;
                   break;
                  } else {
                   $621 = (($613) + 1)|0;
                   $622 = (_kh_resize_cache($562,$621)|0);
                   $623 = ($622|0)<(0);
                   if (!($623)) {
                    label = 168;
                    break;
                   }
                   $624 = HEAP32[$562>>2]|0;
                   $$0$i$i28 = $624;
                   break;
                  }
                 }
                } while(0);
                do {
                 if ((label|0) == 168) {
                  $625 = HEAP32[$562>>2]|0;
                  $626 = (($625) + -1)|0;
                  $627 = (_bitshift64Lshr(($604|0),($607|0),33)|0);
                  $628 = tempRet0;
                  $629 = $627 ^ $604;
                  $630 = $628 ^ $607;
                  $631 = (_bitshift64Shl(($604|0),($607|0),11)|0);
                  $632 = tempRet0;
                  $633 = $629 ^ $631;
                  $630 ^ $632;
                  $634 = $633 & $626;
                  $635 = $634 >>> 4;
                  $636 = ((($562)) + 16|0);
                  $637 = HEAP32[$636>>2]|0;
                  $638 = (($637) + ($635<<2)|0);
                  $639 = HEAP32[$638>>2]|0;
                  $640 = $634 << 1;
                  $641 = $640 & 30;
                  $642 = 2 << $641;
                  $643 = $639 & $642;
                  $644 = ($643|0)==(0);
                  do {
                   if ($644) {
                    $645 = ((($562)) + 20|0);
                    $i$0$i$i = $634;$site$0$i$i = $625;$step$0$i$i = 0;
                    while(1) {
                     $646 = $i$0$i$i >>> 4;
                     $647 = (($637) + ($646<<2)|0);
                     $648 = HEAP32[$647>>2]|0;
                     $649 = $i$0$i$i << 1;
                     $650 = $649 & 30;
                     $651 = 2 << $650;
                     $652 = $648 & $651;
                     $653 = ($652|0)==(0);
                     if (!($653)) {
                      $i$1$i$i78 = $i$0$i$i;$site$2$i$i79 = $site$0$i$i;
                      break;
                     }
                     $654 = 1 << $650;
                     $655 = $648 & $654;
                     $656 = ($655|0)==(0);
                     if ($656) {
                      $657 = HEAP32[$645>>2]|0;
                      $658 = (($657) + ($i$0$i$i<<3)|0);
                      $659 = $658;
                      $660 = $659;
                      $661 = HEAP32[$660>>2]|0;
                      $662 = (($659) + 4)|0;
                      $663 = $662;
                      $664 = HEAP32[$663>>2]|0;
                      $665 = ($661|0)==($604|0);
                      $666 = ($664|0)==($607|0);
                      $667 = $665 & $666;
                      if ($667) {
                       $i$1$i$i78 = $i$0$i$i;$site$2$i$i79 = $site$0$i$i;
                       break;
                      }
                     }
                     $site$0$i$i$i$0$i$i = $656 ? $site$0$i$i : $i$0$i$i;
                     $668 = (($step$0$i$i) + 1)|0;
                     $669 = (($i$0$i$i) + ($668))|0;
                     $670 = $669 & $626;
                     $671 = ($670|0)==($634|0);
                     if ($671) {
                      $i$1$i$i = $634;$x$0$i$i = $site$0$i$i$i$0$i$i;
                      label = 174;
                      break;
                     } else {
                      $i$0$i$i = $670;$site$0$i$i = $site$0$i$i$i$0$i$i;$step$0$i$i = $668;
                     }
                    }
                    if ((label|0) == 174) {
                     $672 = ($x$0$i$i|0)==($625|0);
                     if ($672) {
                      $i$1$i$i78 = $i$1$i$i;$site$2$i$i79 = $x$0$i$i;
                     } else {
                      $x$3$i$i = $x$0$i$i;
                      break;
                     }
                    }
                    $673 = $i$1$i$i78 >>> 4;
                    $674 = (($637) + ($673<<2)|0);
                    $675 = HEAP32[$674>>2]|0;
                    $676 = $i$1$i$i78 << 1;
                    $677 = $676 & 30;
                    $678 = 2 << $677;
                    $679 = $675 & $678;
                    $680 = ($679|0)==(0);
                    $681 = ($site$2$i$i79|0)==($625|0);
                    $or$cond = $680 | $681;
                    $i$1$i$i$site$2$i$i = $or$cond ? $i$1$i$i78 : $site$2$i$i79;
                    $x$3$i$i = $i$1$i$i$site$2$i$i;
                   } else {
                    $x$3$i$i = $634;
                   }
                  } while(0);
                  $682 = $x$3$i$i >>> 4;
                  $683 = (($637) + ($682<<2)|0);
                  $684 = HEAP32[$683>>2]|0;
                  $685 = $x$3$i$i << 1;
                  $686 = $685 & 30;
                  $687 = 2 << $686;
                  $688 = $684 & $687;
                  $689 = ($688|0)==(0);
                  if (!($689)) {
                   $690 = ((($562)) + 20|0);
                   $691 = HEAP32[$690>>2]|0;
                   $692 = (($691) + ($x$3$i$i<<3)|0);
                   $693 = $692;
                   $694 = $693;
                   HEAP32[$694>>2] = $604;
                   $695 = (($693) + 4)|0;
                   $696 = $695;
                   HEAP32[$696>>2] = $607;
                   $697 = 3 << $686;
                   $698 = $697 ^ -1;
                   $699 = HEAP32[$636>>2]|0;
                   $700 = (($699) + ($682<<2)|0);
                   $701 = HEAP32[$700>>2]|0;
                   $702 = $701 & $698;
                   HEAP32[$700>>2] = $702;
                   $703 = HEAP32[$565>>2]|0;
                   $704 = (($703) + 1)|0;
                   HEAP32[$565>>2] = $704;
                   $705 = HEAP32[$608>>2]|0;
                   $706 = (($705) + 1)|0;
                   HEAP32[$608>>2] = $706;
                   $$0$i$i28 = $x$3$i$i;
                   break;
                  }
                  $707 = 1 << $686;
                  $708 = $684 & $707;
                  $709 = ($708|0)==(0);
                  if ($709) {
                   $$0 = 0;
                   STACKTOP = sp;return ($$0|0);
                  } else {
                   $710 = ((($562)) + 20|0);
                   $711 = HEAP32[$710>>2]|0;
                   $712 = (($711) + ($x$3$i$i<<3)|0);
                   $713 = $712;
                   $714 = $713;
                   HEAP32[$714>>2] = $604;
                   $715 = (($713) + 4)|0;
                   $716 = $715;
                   HEAP32[$716>>2] = $607;
                   $717 = 3 << $686;
                   $718 = $717 ^ -1;
                   $719 = HEAP32[$636>>2]|0;
                   $720 = (($719) + ($682<<2)|0);
                   $721 = HEAP32[$720>>2]|0;
                   $722 = $721 & $718;
                   HEAP32[$720>>2] = $722;
                   $723 = HEAP32[$565>>2]|0;
                   $724 = (($723) + 1)|0;
                   HEAP32[$565>>2] = $724;
                   $$0$i$i28 = $x$3$i$i;
                   break;
                  }
                 }
                } while(0);
                $725 = ((($562)) + 24|0);
                $726 = HEAP32[$725>>2]|0;
                $727 = HEAP32[$532>>2]|0;
                $728 = (($726) + ($$0$i$i28<<4)|0);
                HEAP32[$728>>2] = $727;
                $729 = $536;
                $730 = $729;
                $731 = HEAP32[$730>>2]|0;
                $732 = (($729) + 4)|0;
                $733 = $732;
                $734 = HEAP32[$733>>2]|0;
                $735 = (_i64Add(($731|0),($734|0),($441|0),0)|0);
                $736 = tempRet0;
                $737 = (((($726) + ($$0$i$i28<<4)|0)) + 8|0);
                $738 = $737;
                $739 = $738;
                HEAP32[$739>>2] = $735;
                $740 = (($738) + 4)|0;
                $741 = $740;
                HEAP32[$741>>2] = $736;
                $742 = (_malloc(65536)|0);
                $743 = (((($726) + ($$0$i$i28<<4)|0)) + 4|0);
                HEAP32[$743>>2] = $742;
                $744 = HEAP32[$725>>2]|0;
                $745 = (((($744) + ($$0$i$i28<<4)|0)) + 4|0);
                $746 = HEAP32[$745>>2]|0;
                $747 = HEAP32[$442>>2]|0;
                _memcpy(($746|0),($747|0),65536)|0;
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
               }
              } while(0);
              HEAP32[$vararg_buffer26>>2] = 14729;
              $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
              HEAP32[$vararg_ptr29>>2] = 14212;
              _fprintf(9772,14745,$vararg_buffer26);
              label = 146;
              break L96;
              break;
             }
             case -3:  {
              $475 = HEAP32[$448>>2]|0;
              $476 = ($475|0)==(0|0);
              $$76 = $476 ? 14278 : $475;
              $$0$i3$i$i = $$76;
              break;
             }
             case -1:  {
              $477 = HEAP32[6773]|0;
              $478 = ($477|0)==(0|0);
              if ($478) {
               $$0$i$i1$i$i = 27136;
              } else {
               $479 = (_pthread_self()|0);
               $480 = ((($479)) + 64|0);
               $481 = HEAP32[$480>>2]|0;
               $$0$i$i1$i$i = $481;
              }
              $482 = HEAP32[$$0$i$i1$i$i>>2]|0;
              $i$03$i30$i$i = 0;
              while(1) {
               $484 = (24836 + ($i$03$i30$i$i)|0);
               $485 = HEAP8[$484>>0]|0;
               $486 = $485&255;
               $487 = ($486|0)==($482|0);
               if ($487) {
                label = 125;
                break;
               }
               $488 = (($i$03$i30$i$i) + 1)|0;
               $489 = ($488|0)==(87);
               if ($489) {
                $i$12$i34$i$i = 87;$s$01$i35$i$i = 24924;
                break;
               } else {
                $i$03$i30$i$i = $488;
               }
              }
              if ((label|0) == 125) {
               $483 = ($i$03$i30$i$i|0)==(0);
               if ($483) {
                $$0$i3$i$i = 24924;
                break L98;
               } else {
                $i$12$i34$i$i = $i$03$i30$i$i;$s$01$i35$i$i = 24924;
               }
              }
              while(1) {
               $s$1$i37$i$i = $s$01$i35$i$i;
               while(1) {
                $490 = HEAP8[$s$1$i37$i$i>>0]|0;
                $491 = ($490<<24>>24)==(0);
                $492 = ((($s$1$i37$i$i)) + 1|0);
                if ($491) {
                 break;
                } else {
                 $s$1$i37$i$i = $492;
                }
               }
               $493 = (($i$12$i34$i$i) + -1)|0;
               $494 = ($493|0)==(0);
               if ($494) {
                $$0$i3$i$i = $492;
                break;
               } else {
                $i$12$i34$i$i = $493;$s$01$i35$i$i = $492;
               }
              }
              break;
             }
             case -2:  {
              $$0$i3$i$i = 14212;
              break;
             }
             case -6:  {
              $$0$i3$i$i = 14386;
              break;
             }
             case -4:  {
              $$0$i3$i$i = 14303;
              break;
             }
             case -5:  {
              $$0$i3$i$i = 14317;
              break;
             }
             default: {
              HEAP32[$vararg_buffer15>>2] = $474;
              _snprintf(27644,32,14408,$vararg_buffer15);
              $$0$i3$i$i = 27644;
             }
             }
            } while(0);
            HEAP32[$vararg_buffer18>>2] = 14729;
            $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
            HEAP32[$vararg_ptr21>>2] = $$0$i3$i$i;
            _fprintf(9772,14592,$vararg_buffer18);
            $495 = ((($zs$i$i)) + 28|0);
            $496 = HEAP32[$495>>2]|0;
            $497 = ($496|0)==(0|0);
            do {
             if (!($497)) {
              $498 = HEAP32[$447>>2]|0;
              $499 = ($498|0)==(0|0);
              if ($499) {
               break;
              }
              $500 = ((($496)) + 52|0);
              $501 = HEAP32[$500>>2]|0;
              $502 = ($501|0)==(0|0);
              $$pre54 = ((($zs$i$i)) + 40|0);
              if ($502) {
               $505 = $498;$506 = $496;
              } else {
               $503 = HEAP32[$$pre54>>2]|0;
               FUNCTION_TABLE_vii[$498 & 127]($503,$501);
               $$pre41 = HEAP32[$447>>2]|0;
               $$pre43 = HEAP32[$495>>2]|0;
               $505 = $$pre41;$506 = $$pre43;
              }
              $504 = HEAP32[$$pre54>>2]|0;
              FUNCTION_TABLE_vii[$505 & 127]($504,$506);
              HEAP32[$495>>2] = 0;
              label = 146;
              break L96;
             }
            } while(0);
            HEAP32[$vararg_buffer22>>2] = 14729;
            $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
            HEAP32[$vararg_ptr25>>2] = 14212;
            _fprintf(9772,14745,$vararg_buffer22);
            label = 146;
           } else {
            $454 = HEAP32[$448>>2]|0;
            $455 = ($454|0)==(0|0);
            L184: do {
             if ($455) {
              switch ($452|0) {
              case -2:  {
               $$0$i$i$i = 14212;
               break L184;
               break;
              }
              case -1:  {
               $456 = HEAP32[6773]|0;
               $457 = ($456|0)==(0|0);
               if ($457) {
                $$0$i$i$i$i = 27136;
               } else {
                $458 = (_pthread_self()|0);
                $459 = ((($458)) + 64|0);
                $460 = HEAP32[$459>>2]|0;
                $$0$i$i$i$i = $460;
               }
               $461 = HEAP32[$$0$i$i$i$i>>2]|0;
               $i$03$i$i$i = 0;
               while(1) {
                $463 = (24836 + ($i$03$i$i$i)|0);
                $464 = HEAP8[$463>>0]|0;
                $465 = $464&255;
                $466 = ($465|0)==($461|0);
                if ($466) {
                 label = 108;
                 break;
                }
                $467 = (($i$03$i$i$i) + 1)|0;
                $468 = ($467|0)==(87);
                if ($468) {
                 $i$12$i$i$i = 87;$s$01$i$i$i = 24924;
                 break;
                } else {
                 $i$03$i$i$i = $467;
                }
               }
               if ((label|0) == 108) {
                $462 = ($i$03$i$i$i|0)==(0);
                if ($462) {
                 $$0$i$i$i = 24924;
                 break L184;
                } else {
                 $i$12$i$i$i = $i$03$i$i$i;$s$01$i$i$i = 24924;
                }
               }
               while(1) {
                $s$1$i$i$i = $s$01$i$i$i;
                while(1) {
                 $469 = HEAP8[$s$1$i$i$i>>0]|0;
                 $470 = ($469<<24>>24)==(0);
                 $471 = ((($s$1$i$i$i)) + 1|0);
                 if ($470) {
                  break;
                 } else {
                  $s$1$i$i$i = $471;
                 }
                }
                $472 = (($i$12$i$i$i) + -1)|0;
                $473 = ($472|0)==(0);
                if ($473) {
                 $$0$i$i$i = $471;
                 break;
                } else {
                 $i$12$i$i$i = $472;$s$01$i$i$i = $471;
                }
               }
               break;
              }
              case -3:  {
               $$0$i$i$i = 14278;
               break L184;
               break;
              }
              case -4:  {
               $$0$i$i$i = 14303;
               break L184;
               break;
              }
              case -5:  {
               $$0$i$i$i = 14317;
               break L184;
               break;
              }
              case -6:  {
               $$0$i$i$i = 14386;
               break L184;
               break;
              }
              default: {
               HEAP32[$vararg_buffer8>>2] = $452;
               _snprintf(27644,32,14408,$vararg_buffer8);
               $$0$i$i$i = 27644;
               break L184;
              }
              }
             } else {
              $$0$i$i$i = $454;
             }
            } while(0);
            HEAP32[$vararg_buffer11>>2] = 14729;
            $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
            HEAP32[$vararg_ptr14>>2] = $$0$i$i$i;
            _fprintf(9772,14696,$vararg_buffer11);
            label = 146;
           }
          } while(0);
          if ((label|0) == 146) {
           $516 = HEAP32[$fp>>2]|0;
           $517 = $516 & 65534;
           $518 = $517 | 1;
           $519 = $516 & -65536;
           $520 = $519 | $518;
           HEAP32[$fp>>2] = $520;
           $$0$i1525 = -1;
          }
          HEAP32[$vararg_buffer30>>2] = 14576;
          $vararg_ptr33 = ((($vararg_buffer30)) + 4|0);
          HEAP32[$vararg_ptr33>>2] = $$0$i1525;
          _fprintf(9772,14776,$vararg_buffer30);
          $527 = HEAP32[$fp>>2]|0;
          $528 = $527 & 65534;
          $529 = $528 | 1;
          $530 = $527 & -65536;
          $531 = $530 | $529;
          HEAP32[$fp>>2] = $531;
          $$0 = -1;
          STACKTOP = sp;return ($$0|0);
         }
        }
       }
      }
     }
     $299 = ((($fp)) + 44|0);
     $300 = HEAP32[$299>>2]|0;
     dest=$300; src=$header; stop=dest+18|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
     $301 = HEAP32[$245>>2]|0;
     $302 = ((($300)) + 18|0);
     $303 = ((($301)) + 8|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = ((($301)) + 4|0);
     $306 = HEAP32[$305>>2]|0;
     $307 = (($304) - ($306))|0;
     $308 = ($307>>>0)>(65262);
     $309 = $306;
     $$73 = $308 ? 65262 : $307;
     _memcpy(($302|0),($309|0),($$73|0))|0;
     $310 = HEAP32[$305>>2]|0;
     $311 = (($310) + ($$73)|0);
     HEAP32[$305>>2] = $311;
     $312 = ($$73|0)==(65262);
     if ($312) {
      $315 = 65262;
     } else {
      $313 = (_hread2($301,$302,65262,$$73)|0);
      $315 = $313;
     }
     $314 = (($315) + 18)|0;
     $316 = HEAP8[$267>>0]|0;
     $317 = $316 & 4;
     $318 = ($317<<24>>24)==(0);
     if ($318) {
      $nskip$0 = 10;
     } else {
      $319 = ((($300)) + 10|0);
      $320 = HEAP8[$319>>0]|0;
      $321 = $320&255;
      $322 = ((($300)) + 11|0);
      $323 = HEAP8[$322>>0]|0;
      $324 = $323&255;
      $325 = $324 << 8;
      $326 = $321 | $325;
      $327 = (($326) + 12)|0;
      $nskip$0 = $327;
     }
     $328 = $316 & 8;
     $329 = ($328<<24>>24)==(0);
     if ($329) {
      $nskip$2 = $nskip$0;
     } else {
      $nskip$1 = $nskip$0;
      while(1) {
       $330 = ($nskip$1|0)<($314|0);
       if (!($330)) {
        break;
       }
       $331 = (($300) + ($nskip$1)|0);
       $332 = HEAP8[$331>>0]|0;
       $333 = ($332<<24>>24)==(0);
       if ($333) {
        break;
       }
       $334 = (($nskip$1) + 1)|0;
       $nskip$1 = $334;
      }
      $335 = (($nskip$1) + 1)|0;
      $nskip$2 = $335;
     }
     $336 = $316 & 16;
     $337 = ($336<<24>>24)==(0);
     if ($337) {
      $nskip$4 = $nskip$2;
     } else {
      $nskip$3 = $nskip$2;
      while(1) {
       $338 = ($nskip$3|0)<($314|0);
       if (!($338)) {
        break;
       }
       $339 = (($300) + ($nskip$3)|0);
       $340 = HEAP8[$339>>0]|0;
       $341 = ($340<<24>>24)==(0);
       if ($341) {
        break;
       }
       $342 = (($nskip$3) + 1)|0;
       $nskip$3 = $342;
      }
      $343 = (($nskip$3) + 1)|0;
      $nskip$4 = $343;
     }
     $344 = $316 & 2;
     $345 = ($344<<24>>24)==(0);
     $346 = (($nskip$4) + 2)|0;
     $nskip$4$ = $345 ? $nskip$4 : $346;
     $347 = ($314|0)>($nskip$4$|0);
     $348 = HEAP32[$fp>>2]|0;
     if (!($347)) {
      $349 = $348 & 65533;
      $350 = $349 | 2;
      $351 = $348 & -65536;
      $352 = $351 | $350;
      HEAP32[$fp>>2] = $352;
      $$0 = -1;
      STACKTOP = sp;return ($$0|0);
     }
     $353 = $348 | -2147483648;
     HEAP32[$fp>>2] = $353;
     $354 = (_malloc(56)|0);
     $355 = ($354|0)==(0|0);
     if (!($355)) {
      $356 = ((($354)) + -4|0);
      $357 = HEAP32[$356>>2]|0;
      $358 = $357 & 3;
      $359 = ($358|0)==(0);
      if (!($359)) {
       dest=$354; stop=dest+56|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      }
     }
     $360 = ((($fp)) + 68|0);
     HEAP32[$360>>2] = $354;
     $361 = (_inflateInit2_($354,-15,18486)|0);
     $362 = ($361|0)==(0);
     if ($362) {
      $391 = (($314) - ($nskip$4$))|0;
      $392 = HEAP32[$360>>2]|0;
      $393 = ((($392)) + 4|0);
      HEAP32[$393>>2] = $391;
      $394 = (($300) + ($nskip$4$)|0);
      $395 = HEAP32[$360>>2]|0;
      HEAP32[$395>>2] = $394;
      $396 = (_inflate_gzip_block($fp,1)|0);
      $397 = ($396|0)<(0);
      if (!($397)) {
       $403 = ((($fp)) + 8|0);
       HEAP32[$403>>2] = $396;
       $404 = ((($fp)) + 24|0);
       $405 = $404;
       $406 = $405;
       HEAP32[$406>>2] = $136;
       $407 = (($405) + 4)|0;
       $408 = $407;
       HEAP32[$408>>2] = $138;
       $409 = ((($fp)) + 64|0);
       $410 = HEAP32[$409>>2]|0;
       $not$ = ($410|0)!=(0);
       $$74 = $not$ << 31 >> 31;
       STACKTOP = sp;return ($$74|0);
      }
      $398 = HEAP32[$fp>>2]|0;
      $399 = $398 & 65534;
      $400 = $399 | 1;
      $401 = $398 & -65536;
      $402 = $401 | $400;
      HEAP32[$fp>>2] = $402;
      $$0 = -1;
      STACKTOP = sp;return ($$0|0);
     }
     $363 = HEAP32[$360>>2]|0;
     $364 = ($363|0)==(0|0);
     if ($364) {
      label = 80;
     } else {
      $365 = ((($363)) + 24|0);
      $366 = HEAP32[$365>>2]|0;
      $367 = ($366|0)==(0|0);
      if ($367) {
       label = 80;
      } else {
       $$0$i11 = $366;
      }
     }
     L249: do {
      if ((label|0) == 80) {
       switch ($361|0) {
       case -2:  {
        $$0$i11 = 14212;
        break L249;
        break;
       }
       case -1:  {
        $368 = HEAP32[6773]|0;
        $369 = ($368|0)==(0|0);
        if ($369) {
         $$0$i$i10 = 27136;
        } else {
         $370 = (_pthread_self()|0);
         $371 = ((($370)) + 64|0);
         $372 = HEAP32[$371>>2]|0;
         $$0$i$i10 = $372;
        }
        $373 = HEAP32[$$0$i$i10>>2]|0;
        $i$03$i = 0;
        while(1) {
         $375 = (24836 + ($i$03$i)|0);
         $376 = HEAP8[$375>>0]|0;
         $377 = $376&255;
         $378 = ($377|0)==($373|0);
         if ($378) {
          label = 84;
          break;
         }
         $379 = (($i$03$i) + 1)|0;
         $380 = ($379|0)==(87);
         if ($380) {
          $i$12$i = 87;$s$01$i = 24924;
          break;
         } else {
          $i$03$i = $379;
         }
        }
        if ((label|0) == 84) {
         $374 = ($i$03$i|0)==(0);
         if ($374) {
          $$0$i11 = 24924;
          break L249;
         } else {
          $i$12$i = $i$03$i;$s$01$i = 24924;
         }
        }
        while(1) {
         $s$1$i = $s$01$i;
         while(1) {
          $381 = HEAP8[$s$1$i>>0]|0;
          $382 = ($381<<24>>24)==(0);
          $383 = ((($s$1$i)) + 1|0);
          if ($382) {
           break;
          } else {
           $s$1$i = $383;
          }
         }
         $384 = (($i$12$i) + -1)|0;
         $385 = ($384|0)==(0);
         if ($385) {
          $$0$i11 = $383;
          break;
         } else {
          $i$12$i = $384;$s$01$i = $383;
         }
        }
        break;
       }
       case -3:  {
        $$0$i11 = 14278;
        break L249;
        break;
       }
       case -4:  {
        $$0$i11 = 14303;
        break L249;
        break;
       }
       case -5:  {
        $$0$i11 = 14317;
        break L249;
        break;
       }
       case -6:  {
        $$0$i11 = 14386;
        break L249;
        break;
       }
       default: {
        HEAP32[$vararg_buffer1>>2] = $361;
        _snprintf(27644,32,14408,$vararg_buffer1);
        $$0$i11 = 27644;
        break L249;
       }
       }
      }
     } while(0);
     HEAP32[$vararg_buffer4>>2] = 14576;
     $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
     HEAP32[$vararg_ptr7>>2] = $$0$i11;
     _fprintf(9772,14664,$vararg_buffer4);
     $386 = HEAP32[$fp>>2]|0;
     $387 = $386 & 65534;
     $388 = $387 | 1;
     $389 = $386 & -65536;
     $390 = $389 | $388;
     HEAP32[$fp>>2] = $390;
     $$0 = -1;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 }
 $294 = HEAP32[$fp>>2]|0;
 $295 = $294 & 65533;
 $296 = $295 | 2;
 $297 = $294 & -65536;
 $298 = $297 | $296;
 HEAP32[$fp>>2] = $298;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _bgzf_index_add_block($fp) {
 $fp = $fp|0;
 var $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($fp)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[$1>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($4)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)>($7|0);
 do {
  if ($8) {
   HEAP32[$6>>2] = $5;
   $9 = HEAP32[$0>>2]|0;
   $10 = ((($9)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + -1)|0;
   HEAP32[$10>>2] = $12;
   $13 = HEAP32[$0>>2]|0;
   $14 = ((($13)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15 >> 1;
   $17 = $15 | $16;
   HEAP32[$14>>2] = $17;
   $18 = HEAP32[$0>>2]|0;
   $19 = ((($18)) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $20 >> 2;
   $22 = $20 | $21;
   HEAP32[$19>>2] = $22;
   $23 = HEAP32[$0>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 >> 4;
   $27 = $25 | $26;
   HEAP32[$24>>2] = $27;
   $28 = HEAP32[$0>>2]|0;
   $29 = ((($28)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $30 >> 8;
   $32 = $30 | $31;
   HEAP32[$29>>2] = $32;
   $33 = HEAP32[$0>>2]|0;
   $34 = ((($33)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $35 >> 16;
   $37 = $35 | $36;
   HEAP32[$34>>2] = $37;
   $38 = HEAP32[$0>>2]|0;
   $39 = ((($38)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + 1)|0;
   HEAP32[$39>>2] = $41;
   $42 = HEAP32[$0>>2]|0;
   $43 = ((($42)) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($42)) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $46 << 4;
   $48 = (_realloc($44,$47)|0);
   $49 = HEAP32[$0>>2]|0;
   $50 = ((($49)) + 8|0);
   HEAP32[$50>>2] = $48;
   $51 = HEAP32[$0>>2]|0;
   $52 = ((($51)) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(0|0);
   if ($54) {
    return;
   } else {
    $$pre = HEAP32[$51>>2]|0;
    $56 = $51;$64 = $$pre;$66 = $53;
    break;
   }
  } else {
   $$phi$trans$insert2 = ((($4)) + 8|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   $56 = $4;$64 = $5;$66 = $$pre3;
  }
 } while(0);
 $55 = ((($56)) + 16|0);
 $57 = $55;
 $58 = $57;
 $59 = HEAP32[$58>>2]|0;
 $60 = (($57) + 4)|0;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = (($64) + -1)|0;
 $65 = (($66) + ($63<<4)|0);
 $67 = $65;
 $68 = $67;
 HEAP32[$68>>2] = $59;
 $69 = (($67) + 4)|0;
 $70 = $69;
 HEAP32[$70>>2] = $62;
 $71 = ((($fp)) + 24|0);
 $72 = $71;
 $73 = $72;
 $74 = HEAP32[$73>>2]|0;
 $75 = (($72) + 4)|0;
 $76 = $75;
 $77 = HEAP32[$76>>2]|0;
 $78 = HEAP32[$0>>2]|0;
 $79 = HEAP32[$78>>2]|0;
 $80 = (($79) + -1)|0;
 $81 = ((($78)) + 8|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (((($82) + ($80<<4)|0)) + 8|0);
 $84 = $83;
 $85 = $84;
 HEAP32[$85>>2] = $74;
 $86 = (($84) + 4)|0;
 $87 = $86;
 HEAP32[$87>>2] = $77;
 return;
}
function _inflate_gzip_block($fp,$cached) {
 $fp = $fp|0;
 $cached = $cached|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$01 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre10 = 0, $$pre11 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $i$03$i = 0, $i$12$i = 0, $s$01$i = 0, $s$1$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($fp)) + 68|0);
 $1 = ((($fp)) + 52|0);
 $2 = ((($fp)) + 44|0);
 $3 = ((($fp)) + 40|0);
 $4 = ((($fp)) + 16|0);
 $$01 = $cached;
 L1: while(1) {
  $5 = ($$01|0)==(0);
  if ($5) {
   $6 = HEAP32[$0>>2]|0;
   $7 = ((($6)) + 16|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = HEAP32[$1>>2]|0;
    $11 = HEAP32[$2>>2]|0;
    $12 = ((($10)) + 8|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($10)) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (($13) - ($15))|0;
    $17 = ($16>>>0)>(65280);
    $18 = $15;
    $$ = $17 ? 65280 : $16;
    _memcpy(($11|0),($18|0),($$|0))|0;
    $19 = HEAP32[$14>>2]|0;
    $20 = (($19) + ($$)|0);
    HEAP32[$14>>2] = $20;
    $21 = ($$|0)==(65280);
    if ($21) {
     $25 = 65280;
    } else {
     $22 = (_hread2($10,$11,65280,$$)|0);
     $25 = $22;
    }
    $23 = HEAP32[$0>>2]|0;
    $24 = ((($23)) + 4|0);
    HEAP32[$24>>2] = $25;
    $26 = HEAP32[$0>>2]|0;
    $27 = ((($26)) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)==(0);
    if ($29) {
     $$0 = 0;
     label = 34;
     break;
    }
    $30 = HEAP32[$2>>2]|0;
    HEAP32[$26>>2] = $30;
   }
  }
  $$pre = HEAP32[$0>>2]|0;
  $35 = $$pre;
  while(1) {
   $31 = HEAP32[$3>>2]|0;
   $32 = HEAP32[$4>>2]|0;
   $33 = (($31) + ($32)|0);
   $34 = ((($35)) + 12|0);
   HEAP32[$34>>2] = $33;
   $36 = HEAP32[$4>>2]|0;
   $37 = (65536 - ($36))|0;
   $38 = HEAP32[$0>>2]|0;
   $39 = ((($38)) + 16|0);
   HEAP32[$39>>2] = $37;
   $40 = HEAP32[$0>>2]|0;
   $41 = ((($40)) + 24|0);
   HEAP32[$41>>2] = 0;
   $42 = HEAP32[$0>>2]|0;
   $43 = (_inflate($42,0)|0);
   $44 = ($43|0)==(-5);
   if ($44) {
    $$pre10 = HEAP32[$0>>2]|0;
    $$phi$trans$insert = ((($$pre10)) + 16|0);
    $$pre11 = HEAP32[$$phi$trans$insert>>2]|0;
    $80 = $$pre11;$83 = $$pre10;
   } else {
    $45 = ($43|0)<(0);
    if ($45) {
     label = 12;
     break L1;
    }
    $74 = HEAP32[$0>>2]|0;
    $75 = ((($74)) + 16|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (65536 - ($76))|0;
    $78 = ($77|0)==(0);
    if ($78) {
     $80 = $76;$83 = $74;
    } else {
     $$0 = $77;
     label = 34;
     break L1;
    }
   }
   $79 = ($80|0)==(0);
   if ($79) {
    $35 = $83;
   } else {
    break;
   }
  }
  $81 = ($43|0)==(1);
  if ($81) {
   label = 33;
   break;
  } else {
   $$01 = 0;
  }
 }
 if ((label|0) == 12) {
  L24: do {
   switch ($43|0) {
   case -3:  {
    $46 = HEAP32[$0>>2]|0;
    $47 = ($46|0)==(0|0);
    if (!($47)) {
     $48 = ((($46)) + 24|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49|0)==(0|0);
     if (!($50)) {
      $$0$i = $49;
      break L24;
     }
    }
    $$0$i = 14278;
    break;
   }
   case -1:  {
    $51 = HEAP32[6773]|0;
    $52 = ($51|0)==(0|0);
    if ($52) {
     $$0$i$i = 27136;
    } else {
     $53 = (_pthread_self()|0);
     $54 = ((($53)) + 64|0);
     $55 = HEAP32[$54>>2]|0;
     $$0$i$i = $55;
    }
    $56 = HEAP32[$$0$i$i>>2]|0;
    $i$03$i = 0;
    while(1) {
     $58 = (24836 + ($i$03$i)|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = $59&255;
     $61 = ($60|0)==($56|0);
     if ($61) {
      label = 18;
      break;
     }
     $62 = (($i$03$i) + 1)|0;
     $63 = ($62|0)==(87);
     if ($63) {
      $i$12$i = 87;$s$01$i = 24924;
      break;
     } else {
      $i$03$i = $62;
     }
    }
    if ((label|0) == 18) {
     $57 = ($i$03$i|0)==(0);
     if ($57) {
      $$0$i = 24924;
      break L24;
     } else {
      $i$12$i = $i$03$i;$s$01$i = 24924;
     }
    }
    while(1) {
     $s$1$i = $s$01$i;
     while(1) {
      $64 = HEAP8[$s$1$i>>0]|0;
      $65 = ($64<<24>>24)==(0);
      $66 = ((($s$1$i)) + 1|0);
      if ($65) {
       break;
      } else {
       $s$1$i = $66;
      }
     }
     $67 = (($i$12$i) + -1)|0;
     $68 = ($67|0)==(0);
     if ($68) {
      $$0$i = $66;
      break;
     } else {
      $i$12$i = $67;$s$01$i = $66;
     }
    }
    break;
   }
   case -2:  {
    $$0$i = 14212;
    break;
   }
   case -6:  {
    $$0$i = 14386;
    break;
   }
   case -4:  {
    $$0$i = 14303;
    break;
   }
   case -5:  {
    $$0$i = 14317;
    break;
   }
   default: {
    HEAP32[$vararg_buffer>>2] = $43;
    _snprintf(27644,32,14408,$vararg_buffer);
    $$0$i = 27644;
   }
   }
  } while(0);
  HEAP32[$vararg_buffer1>>2] = 14620;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $$0$i;
  _fprintf(9772,14592,$vararg_buffer1);
  $69 = HEAP32[$fp>>2]|0;
  $70 = $69 & 65534;
  $71 = $70 | 1;
  $72 = $69 & -65536;
  $73 = $72 | $71;
  HEAP32[$fp>>2] = $73;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 33) {
  $82 = (65536 - ($80))|0;
  $$0 = $82;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 34) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _kh_resize_cache($h,$new_n_buckets) {
 $h = $h|0;
 $new_n_buckets = $new_n_buckets|0;
 var $$ = 0, $$0 = 0, $$pn = 0, $$pre$phi4Z2D = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$0 = 0, $j$1 = 0, $phitmp = 0;
 var $phitmp9 = 0, $step$0 = 0, $tmp1 = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val = sp + 16|0;
 $tmp1 = sp;
 $0 = (($new_n_buckets) + -1)|0;
 $1 = $0 >>> 1;
 $2 = $0 | $1;
 $3 = $2 >>> 2;
 $4 = $2 | $3;
 $5 = $4 >>> 4;
 $6 = $4 | $5;
 $7 = $6 >>> 8;
 $8 = $6 | $7;
 $9 = $8 >>> 16;
 $10 = $8 | $9;
 $11 = (($10) + 1)|0;
 $12 = ($11>>>0)<(4);
 $$ = $12 ? 4 : $11;
 $13 = ((($h)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($$>>>0));
 $16 = $15 * 0.77000000000000001;
 $17 = $16 + 0.5;
 $18 = (~~(($17))>>>0);
 $19 = ($14>>>0)<($18>>>0);
 if (!($19)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = ($$>>>0)<(16);
 $21 = $$ >>> 4;
 $phitmp9 = $21 << 2;
 $22 = $20 ? 4 : $phitmp9;
 $23 = (_malloc($22)|0);
 $24 = ($23|0)==(0|0);
 if ($24) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = $$ >>> 4;
 $phitmp = $25 << 2;
 $26 = $20 ? 4 : $phitmp;
 _memset(($23|0),-86,($26|0))|0;
 $27 = HEAP32[$h>>2]|0;
 $28 = ($27>>>0)<($$>>>0);
 $29 = ((($h)) + 20|0);
 do {
  if ($28) {
   $30 = HEAP32[$29>>2]|0;
   $31 = $$ << 3;
   $32 = (_realloc($30,$31)|0);
   $33 = ($32|0)==(0|0);
   if ($33) {
    _free($23);
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$29>>2] = $32;
   $34 = ((($h)) + 24|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $$ << 4;
   $37 = (_realloc($35,$36)|0);
   $38 = ($37|0)==(0|0);
   if (!($38)) {
    HEAP32[$34>>2] = $37;
    $$pre$phi4Z2D = $34;
    break;
   }
   _free($23);
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$pre3 = ((($h)) + 24|0);
   $$pre$phi4Z2D = $$pre3;
  }
 } while(0);
 $39 = ((($h)) + 16|0);
 $40 = (($$) + -1)|0;
 $j$1 = 0;
 while(1) {
  $41 = HEAP32[$h>>2]|0;
  $42 = ($j$1|0)==($41|0);
  if ($42) {
   break;
  }
  $43 = $j$1 >>> 4;
  $44 = HEAP32[$39>>2]|0;
  $45 = (($44) + ($43<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $j$1 << 1;
  $48 = $47 & 30;
  $49 = 3 << $48;
  $50 = $46 & $49;
  $51 = ($50|0)==(0);
  if ($51) {
   $52 = HEAP32[$29>>2]|0;
   $53 = (($52) + ($j$1<<3)|0);
   $54 = $53;
   $55 = $54;
   $56 = HEAP32[$55>>2]|0;
   $57 = (($54) + 4)|0;
   $58 = $57;
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP32[$$pre$phi4Z2D>>2]|0;
   $61 = (($60) + ($j$1<<4)|0);
   ;HEAP32[$val>>2]=HEAP32[$61>>2]|0;HEAP32[$val+4>>2]=HEAP32[$61+4>>2]|0;HEAP32[$val+8>>2]=HEAP32[$61+8>>2]|0;HEAP32[$val+12>>2]=HEAP32[$61+12>>2]|0;
   $62 = 1 << $48;
   $63 = $46 | $62;
   HEAP32[$45>>2] = $63;
   $64 = $56;$65 = $59;
   while(1) {
    $66 = (_bitshift64Lshr(($64|0),($65|0),33)|0);
    $67 = tempRet0;
    $68 = $66 ^ $64;
    $69 = $67 ^ $65;
    $70 = (_bitshift64Shl(($64|0),($65|0),11)|0);
    $71 = tempRet0;
    $72 = $68 ^ $70;
    $69 ^ $71;
    $$pn = $72;$step$0 = 0;
    while(1) {
     $i$0 = $$pn & $40;
     $73 = $i$0 >>> 4;
     $74 = (($23) + ($73<<2)|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = $i$0 << 1;
     $77 = $76 & 30;
     $78 = 2 << $77;
     $79 = $75 & $78;
     $80 = ($79|0)==(0);
     if (!($80)) {
      break;
     }
     $81 = (($step$0) + 1)|0;
     $82 = (($i$0) + ($81))|0;
     $$pn = $82;$step$0 = $81;
    }
    $83 = $78 ^ -1;
    $84 = $75 & $83;
    HEAP32[$74>>2] = $84;
    $85 = HEAP32[$h>>2]|0;
    $86 = ($i$0>>>0)<($85>>>0);
    if (!($86)) {
     break;
    }
    $87 = HEAP32[$39>>2]|0;
    $88 = (($87) + ($73<<2)|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = 3 << $77;
    $91 = $89 & $90;
    $92 = ($91|0)==(0);
    if (!($92)) {
     break;
    }
    $93 = HEAP32[$29>>2]|0;
    $94 = (($93) + ($i$0<<3)|0);
    $95 = $94;
    $96 = $95;
    $97 = HEAP32[$96>>2]|0;
    $98 = (($95) + 4)|0;
    $99 = $98;
    $100 = HEAP32[$99>>2]|0;
    $101 = $94;
    $102 = $101;
    HEAP32[$102>>2] = $64;
    $103 = (($101) + 4)|0;
    $104 = $103;
    HEAP32[$104>>2] = $65;
    $105 = HEAP32[$$pre$phi4Z2D>>2]|0;
    $106 = (($105) + ($i$0<<4)|0);
    ;HEAP32[$tmp1>>2]=HEAP32[$106>>2]|0;HEAP32[$tmp1+4>>2]=HEAP32[$106+4>>2]|0;HEAP32[$tmp1+8>>2]=HEAP32[$106+8>>2]|0;HEAP32[$tmp1+12>>2]=HEAP32[$106+12>>2]|0;
    ;HEAP32[$106>>2]=HEAP32[$val>>2]|0;HEAP32[$106+4>>2]=HEAP32[$val+4>>2]|0;HEAP32[$106+8>>2]=HEAP32[$val+8>>2]|0;HEAP32[$106+12>>2]=HEAP32[$val+12>>2]|0;
    ;HEAP32[$val>>2]=HEAP32[$tmp1>>2]|0;HEAP32[$val+4>>2]=HEAP32[$tmp1+4>>2]|0;HEAP32[$val+8>>2]=HEAP32[$tmp1+8>>2]|0;HEAP32[$val+12>>2]=HEAP32[$tmp1+12>>2]|0;
    $107 = 1 << $77;
    $108 = HEAP32[$39>>2]|0;
    $109 = (($108) + ($73<<2)|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = $110 | $107;
    HEAP32[$109>>2] = $111;
    $64 = $97;$65 = $100;
   }
   $112 = HEAP32[$29>>2]|0;
   $113 = (($112) + ($i$0<<3)|0);
   $114 = $113;
   $115 = $114;
   HEAP32[$115>>2] = $64;
   $116 = (($114) + 4)|0;
   $117 = $116;
   HEAP32[$117>>2] = $65;
   $118 = HEAP32[$$pre$phi4Z2D>>2]|0;
   $119 = (($118) + ($i$0<<4)|0);
   ;HEAP32[$119>>2]=HEAP32[$val>>2]|0;HEAP32[$119+4>>2]=HEAP32[$val+4>>2]|0;HEAP32[$119+8>>2]=HEAP32[$val+8>>2]|0;HEAP32[$119+12>>2]=HEAP32[$val+12>>2]|0;
  }
  $120 = (($j$1) + 1)|0;
  $j$1 = $120;
 }
 $121 = ($j$1>>>0)>($$>>>0);
 if ($121) {
  $122 = HEAP32[$29>>2]|0;
  $123 = $$ << 3;
  $124 = (_realloc($122,$123)|0);
  HEAP32[$29>>2] = $124;
  $125 = HEAP32[$$pre$phi4Z2D>>2]|0;
  $126 = $$ << 4;
  $127 = (_realloc($125,$126)|0);
  HEAP32[$$pre$phi4Z2D>>2] = $127;
 }
 $128 = HEAP32[$39>>2]|0;
 _free($128);
 HEAP32[$39>>2] = $23;
 HEAP32[$h>>2] = $$;
 $129 = HEAP32[$13>>2]|0;
 $130 = ((($h)) + 8|0);
 HEAP32[$130>>2] = $129;
 $131 = ((($h)) + 12|0);
 HEAP32[$131>>2] = $18;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _bgzf_read($fp,$data,$length) {
 $fp = $fp|0;
 $data = $data|0;
 $length = $length|0;
 var $$0 = 0, $$0$i = 0, $$available$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre2 = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $available$0 = 0, $bytes_read$0 = 0, $output$0 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($length|0)==(0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP32[$fp>>2]|0;
 $2 = $1 & 196608;
 $3 = ($2|0)==(0);
 if (!($3)) {
  ___assert_fail((14808|0),(14205|0),811,(14826|0));
  // unreachable;
 }
 $4 = ((($fp)) + 8|0);
 $5 = ((($fp)) + 16|0);
 $6 = ((($fp)) + 40|0);
 $bytes_read$0 = 0;$output$0 = $data;
 while(1) {
  $7 = ($bytes_read$0>>>0)<($length>>>0);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = HEAP32[$4>>2]|0;
  $9 = HEAP32[$5>>2]|0;
  $10 = (($8) - ($9))|0;
  $11 = ($10|0)<(1);
  if ($11) {
   $12 = (_bgzf_read_block($fp)|0);
   $13 = ($12|0)==(0);
   if (!($13)) {
    label = 9;
    break;
   }
   $19 = HEAP32[$4>>2]|0;
   $20 = HEAP32[$5>>2]|0;
   $21 = (($19) - ($20))|0;
   $22 = ($21|0)<(1);
   if ($22) {
    $33 = $20;$34 = $19;
    break;
   } else {
    $27 = $20;$available$0 = $21;
   }
  } else {
   $27 = $9;$available$0 = $10;
  }
  $23 = (($length) - ($bytes_read$0))|0;
  $24 = ($23>>>0)<($available$0>>>0);
  $$available$0 = $24 ? $23 : $available$0;
  $25 = HEAP32[$6>>2]|0;
  $26 = (($25) + ($27)|0);
  _memcpy(($output$0|0),($26|0),($$available$0|0))|0;
  $28 = HEAP32[$5>>2]|0;
  $29 = (($28) + ($$available$0))|0;
  HEAP32[$5>>2] = $29;
  $30 = (($output$0) + ($$available$0)|0);
  $31 = (($bytes_read$0) + ($$available$0))|0;
  $bytes_read$0 = $31;$output$0 = $30;
 }
 if ((label|0) == 6) {
  $$pre = HEAP32[$5>>2]|0;
  $$pre2 = HEAP32[$4>>2]|0;
  $33 = $$pre;$34 = $$pre2;
 }
 else if ((label|0) == 9) {
  HEAP32[$vararg_buffer>>2] = 14826;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $12;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $bytes_read$0;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $length;
  _fprintf(9772,14836,$vararg_buffer);
  $14 = HEAP32[$fp>>2]|0;
  $15 = $14 & 65534;
  $16 = $15 | 1;
  $17 = $14 & -65536;
  $18 = $17 | $16;
  HEAP32[$fp>>2] = $18;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $32 = ($33|0)==($34|0);
 if ($32) {
  $35 = ((($fp)) + 56|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(0|0);
  if ($37) {
   $52 = ((($fp)) + 52|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ((($53)) + 20|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ((($53)) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = HEAP32[$53>>2]|0;
   $59 = (($57) - ($58))|0;
   $60 = (($55) + ($59))|0;
   $$pre3 = ((($fp)) + 24|0);
   $$0$i = $60;$$pre$phiZ2D = $$pre3;
  } else {
   $38 = ((($36)) + 28|0);
   (_pthread_mutex_lock(($38|0))|0);
   $39 = ((($fp)) + 24|0);
   $40 = $39;
   $41 = $40;
   $42 = HEAP32[$41>>2]|0;
   $43 = (($40) + 4)|0;
   $44 = $43;
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($fp)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (_i64Add(($42|0),($45|0),($47|0),0)|0);
   $49 = tempRet0;
   $50 = HEAP32[$35>>2]|0;
   $51 = ((($50)) + 28|0);
   (_pthread_mutex_unlock(($51|0))|0);
   $$0$i = $48;$$pre$phiZ2D = $39;
  }
  $61 = ($$0$i|0)<(0);
  $62 = $61 << 31 >> 31;
  $63 = $$pre$phiZ2D;
  $64 = $63;
  HEAP32[$64>>2] = $$0$i;
  $65 = (($63) + 4)|0;
  $66 = $65;
  HEAP32[$66>>2] = $62;
  HEAP32[$4>>2] = 0;
  HEAP32[$5>>2] = 0;
 }
 $67 = ($bytes_read$0|0)<(0);
 $68 = $67 << 31 >> 31;
 $69 = ((($fp)) + 32|0);
 $70 = $69;
 $71 = $70;
 $72 = HEAP32[$71>>2]|0;
 $73 = (($70) + 4)|0;
 $74 = $73;
 $75 = HEAP32[$74>>2]|0;
 $76 = (_i64Add(($72|0),($75|0),($bytes_read$0|0),($68|0))|0);
 $77 = tempRet0;
 $78 = $69;
 $79 = $78;
 HEAP32[$79>>2] = $76;
 $80 = (($78) + 4)|0;
 $81 = $80;
 HEAP32[$81>>2] = $77;
 $$0 = $bytes_read$0;
 STACKTOP = sp;return ($$0|0);
}
function _bgzf_encode_func($arg) {
 $arg = $arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($arg)) + 65540|0);
 HEAP32[$0>>2] = 65536;
 $1 = ((($arg)) + 4|0);
 $2 = ((($arg)) + 65544|0);
 $3 = ((($arg)) + 131080|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$arg>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 << 3;
 $8 = $7 >> 23;
 $9 = (_bgzf_compress($1,$0,$2,$4,$8)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  return ($arg|0);
 }
 $11 = ((($arg)) + 131084|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 | 1;
 HEAP32[$11>>2] = $13;
 return ($arg|0);
}
function _bgzf_flush($fp) {
 $fp = $fp|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i1 = 0, $$0$i$i3 = 0, $$cast = 0, $$in = 0, $$phi$trans$insert = 0, $$phi$trans$insert12 = 0, $$pre = 0, $$pre$phi18Z2D = 0, $$pre$phi22Z2D = 0, $$pre11 = 0, $$pre14 = 0, $$pre15 = 0, $$pre16 = 0, $$pre17 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $buffer$0$i = 0, $not$$i = 0, $remaining$0$i$i = 0, $src$0$i$i = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$fp>>2]|0;
 $1 = $0 & 196608;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ((($fp)) + 56|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 $6 = ((($fp)) + 16|0);
 if (!($5)) {
  $12 = HEAP32[$6>>2]|0;
  $13 = ($12|0)==(0);
  if ($13) {
   $71 = $4;
  } else {
   $14 = ((($4)) + 28|0);
   (_pthread_mutex_lock(($14|0))|0);
   $15 = HEAP32[$4>>2]|0;
   $16 = ((($15)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(0|0);
   L8: do {
    if ($18) {
     $20 = ((($15)) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(0);
     do {
      if ($22) {
       $$phi$trans$insert = ((($15)) + 4|0);
       $$pre = HEAP32[$$phi$trans$insert>>2]|0;
       $$pre11 = HEAP32[$15>>2]|0;
       $$phi$trans$insert12 = ((($15)) + 12|0);
       $$pre14 = HEAP32[$$phi$trans$insert12>>2]|0;
       $$pre$phi18Z2D = $15;$$pre$phi22Z2D = $$phi$trans$insert12;$38 = $$pre14;$42 = $$pre;$43 = $$pre11;
      } else {
       $23 = (($21) + -1)|0;
       $24 = ((($15)) + 12|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = (((($25) + ($23<<3)|0)) + 4|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = HEAP32[$15>>2]|0;
       $29 = (($27) + ($28))|0;
       $30 = ((($15)) + 4|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = ($29>>>0)<($31>>>0);
       if ($32) {
        $33 = (($25) + ($23<<3)|0);
        $34 = HEAP32[$33>>2]|0;
        $35 = (($34) + ($27)|0);
        HEAP32[$26>>2] = $29;
        $$0$i$i = $35;
        break L8;
       } else {
        $$pre$phi18Z2D = $15;$$pre$phi22Z2D = $24;$38 = $25;$42 = $31;$43 = $28;
        break;
       }
      }
     } while(0);
     $36 = $21 << 3;
     $37 = (($36) + 8)|0;
     $39 = (_realloc($38,$37)|0);
     $40 = ($39|0)==(0|0);
     if ($40) {
      $$0$i$i = 0;
     } else {
      $41 = (($42>>>0) / ($43>>>0))&-1;
      HEAP32[$$pre$phi22Z2D>>2] = $39;
      $44 = HEAP32[$20>>2]|0;
      $45 = (($39) + ($44<<3)|0);
      $46 = HEAP32[$$pre$phi18Z2D>>2]|0;
      $47 = Math_imul($41, $46)|0;
      $48 = (_malloc($47)|0);
      HEAP32[$45>>2] = $48;
      $49 = ($48|0)==(0|0);
      if ($49) {
       $$0$i$i = 0;
      } else {
       $50 = (((($39) + ($44<<3)|0)) + 4|0);
       HEAP32[$50>>2] = 0;
       $51 = HEAP32[$20>>2]|0;
       $52 = (($51) + 1)|0;
       HEAP32[$20>>2] = $52;
       $53 = ($45|0)==(0|0);
       if ($53) {
        $$0$i$i = 0;
       } else {
        $54 = HEAP32[$$pre$phi18Z2D>>2]|0;
        $55 = (((($39) + ($44<<3)|0)) + 4|0);
        HEAP32[$55>>2] = $54;
        $56 = HEAP32[$45>>2]|0;
        $$0$i$i = $56;
       }
      }
     }
    } else {
     $19 = HEAP32[$17>>2]|0;
     HEAP32[$16>>2] = $19;
     $$0$i$i = $17;
    }
   } while(0);
   $57 = ((($4)) + 56|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($58) + 1)|0;
   HEAP32[$57>>2] = $59;
   (_pthread_mutex_unlock(($14|0))|0);
   HEAP32[$$0$i$i>>2] = $fp;
   $60 = ((($$0$i$i)) + 131084|0);
   HEAP32[$60>>2] = 0;
   $61 = HEAP32[$6>>2]|0;
   $62 = ((($$0$i$i)) + 131080|0);
   HEAP32[$62>>2] = $61;
   $63 = ((($$0$i$i)) + 65544|0);
   $64 = ((($fp)) + 40|0);
   $65 = HEAP32[$64>>2]|0;
   _memcpy(($63|0),($65|0),($61|0))|0;
   $66 = ((($4)) + 16|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ((($4)) + 20|0);
   $69 = HEAP32[$68>>2]|0;
   (_hts_tpool_dispatch2($67,$69,58,$$0$i$i,0)|0);
   HEAP32[$6>>2] = 0;
   $$pre15 = HEAP32[$3>>2]|0;
   $71 = $$pre15;
  }
  $70 = ((($71)) + 28|0);
  (_pthread_mutex_lock(($70|0))|0);
  $72 = ((($71)) + 56|0);
  while(1) {
   $73 = HEAP32[$72>>2]|0;
   $74 = ($73|0)==(0);
   (_pthread_mutex_unlock(($70|0))|0);
   if ($74) {
    break;
   }
   (_usleep(10000)|0);
   (_pthread_mutex_lock(($70|0))|0);
  }
  $75 = ((($71)) + 20|0);
  $76 = HEAP32[$75>>2]|0;
  _hts_tpool_process_flush($76);
  $77 = HEAP32[$fp>>2]|0;
  $78 = $77 & 65535;
  $not$$i = ($78|0)!=(0);
  $79 = $not$$i << 31 >> 31;
  $$0 = $79;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($fp)) + 64|0);
 $8 = ((($fp)) + 52|0);
 $9 = ((($fp)) + 44|0);
 $10 = ((($fp)) + 24|0);
 $11 = ((($fp)) + 60|0);
 L29: while(1) {
  $80 = HEAP32[$6>>2]|0;
  $81 = ($80|0)>(0);
  if (!($81)) {
   $$0 = 0;
   label = 45;
   break;
  }
  $82 = HEAP32[$7>>2]|0;
  $83 = ($82|0)==(0);
  if ($83) {
   $101 = $80;
  } else {
   _bgzf_index_add_block($fp);
   $84 = HEAP32[$6>>2]|0;
   $85 = ($84|0)<(0);
   $86 = $85 << 31 >> 31;
   $87 = HEAP32[$11>>2]|0;
   $88 = ((($87)) + 16|0);
   $89 = $88;
   $90 = $89;
   $91 = HEAP32[$90>>2]|0;
   $92 = (($89) + 4)|0;
   $93 = $92;
   $94 = HEAP32[$93>>2]|0;
   $95 = (_i64Add(($91|0),($94|0),($84|0),($86|0))|0);
   $96 = tempRet0;
   $97 = $88;
   $98 = $97;
   HEAP32[$98>>2] = $95;
   $99 = (($97) + 4)|0;
   $100 = $99;
   HEAP32[$100>>2] = $96;
   $$pre16 = HEAP32[$6>>2]|0;
   $101 = $$pre16;
  }
  $102 = (_deflate_block($fp,$101)|0);
  $103 = ($102|0)<(0);
  if ($103) {
   label = 25;
   break;
  }
  $104 = HEAP32[$8>>2]|0;
  $105 = HEAP32[$9>>2]|0;
  $106 = ((($104)) + 12|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ((($104)) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (($107) - ($109))|0;
  $111 = ($110>>>0)>($102>>>0);
  $112 = $109;
  $$ = $111 ? $102 : $110;
  _memcpy(($112|0),($105|0),($$|0))|0;
  $113 = HEAP32[$108>>2]|0;
  $114 = (($113) + ($$)|0);
  HEAP32[$108>>2] = $114;
  $115 = ($102|0)==($$|0);
  do {
   if (!($115)) {
    $116 = HEAP32[$106>>2]|0;
    $117 = HEAP32[$104>>2]|0;
    $118 = (($116) - ($117))|0;
    $$cast = $117;
    $119 = ((($104)) + 16|0);
    $120 = ((($104)) + 20|0);
    $$in = $114;$buffer$0$i = $$cast;
    while(1) {
     $121 = ($buffer$0$i>>>0)<($$in>>>0);
     if (!($121)) {
      label = 34;
      break;
     }
     $122 = $$in;
     $123 = HEAP32[$119>>2]|0;
     $124 = ((($123)) + 4|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = $buffer$0$i;
     $127 = (($122) - ($126))|0;
     $128 = (FUNCTION_TABLE_iiii[$125 & 127]($104,$buffer$0$i,$127)|0);
     $129 = ($128|0)<(0);
     if ($129) {
      label = 30;
      break;
     }
     $135 = (($buffer$0$i) + ($128)|0);
     $136 = HEAP32[$120>>2]|0;
     $137 = (($136) + ($128))|0;
     HEAP32[$120>>2] = $137;
     $$pre17 = HEAP32[$108>>2]|0;
     $$in = $$pre17;$buffer$0$i = $135;
    }
    if ((label|0) == 30) {
     label = 0;
     $130 = HEAP32[6773]|0;
     $131 = ($130|0)==(0|0);
     if ($131) {
      $$0$i$i3 = 27136;
     } else {
      $132 = (_pthread_self()|0);
      $133 = ((($132)) + 64|0);
      $134 = HEAP32[$133>>2]|0;
      $$0$i$i3 = $134;
     }
     $138 = HEAP32[$$0$i$i3>>2]|0;
     $139 = ((($104)) + 28|0);
     HEAP32[$139>>2] = $138;
     $165 = $128;
    }
    else if ((label|0) == 34) {
     label = 0;
     $140 = HEAP32[$104>>2]|0;
     HEAP32[$108>>2] = $140;
     $141 = (($105) + ($$)|0);
     $142 = (($102) - ($$))|0;
     $remaining$0$i$i = $142;$src$0$i$i = $141;
     while(1) {
      $143 = $remaining$0$i$i << 1;
      $144 = ($143>>>0)<($118>>>0);
      if ($144) {
       label = 41;
       break;
      }
      $145 = HEAP32[$119>>2]|0;
      $146 = ((($145)) + 4|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (FUNCTION_TABLE_iiii[$147 & 127]($104,$src$0$i$i,$remaining$0$i$i)|0);
      $149 = ($148|0)<(0);
      if ($149) {
       break;
      }
      $157 = HEAP32[$120>>2]|0;
      $158 = (($157) + ($148))|0;
      HEAP32[$120>>2] = $158;
      $159 = (($src$0$i$i) + ($148)|0);
      $160 = (($remaining$0$i$i) - ($148))|0;
      $remaining$0$i$i = $160;$src$0$i$i = $159;
     }
     if ((label|0) == 41) {
      label = 0;
      $161 = HEAP32[$108>>2]|0;
      _memcpy(($161|0),($src$0$i$i|0),($remaining$0$i$i|0))|0;
      $162 = HEAP32[$108>>2]|0;
      $163 = (($162) + ($remaining$0$i$i)|0);
      HEAP32[$108>>2] = $163;
      break;
     }
     $150 = HEAP32[6773]|0;
     $151 = ($150|0)==(0|0);
     if ($151) {
      $$0$i$i$i1 = 27136;
     } else {
      $152 = (_pthread_self()|0);
      $153 = ((($152)) + 64|0);
      $154 = HEAP32[$153>>2]|0;
      $$0$i$i$i1 = $154;
     }
     $155 = HEAP32[$$0$i$i$i1>>2]|0;
     $156 = ((($104)) + 28|0);
     HEAP32[$156>>2] = $155;
     $165 = $148;
    }
    $164 = ($165|0)==($102|0);
    if (!($164)) {
     label = 43;
     break L29;
    }
   }
  } while(0);
  $171 = ($102|0)<(0);
  $172 = $171 << 31 >> 31;
  $173 = $10;
  $174 = $173;
  $175 = HEAP32[$174>>2]|0;
  $176 = (($173) + 4)|0;
  $177 = $176;
  $178 = HEAP32[$177>>2]|0;
  $179 = (_i64Add(($175|0),($178|0),($102|0),($172|0))|0);
  $180 = tempRet0;
  $181 = $10;
  $182 = $181;
  HEAP32[$182>>2] = $179;
  $183 = (($181) + 4)|0;
  $184 = $183;
  HEAP32[$184>>2] = $180;
 }
 if ((label|0) == 25) {
  HEAP32[$vararg_buffer>>2] = 15017;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $102;
  _fprintf(9772,14985,$vararg_buffer);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 43) {
  HEAP32[$vararg_buffer2>>2] = 15017;
  _fprintf(9772,15028,$vararg_buffer2);
  $166 = HEAP32[$fp>>2]|0;
  $167 = $166 & 65531;
  $168 = $167 | 4;
  $169 = $166 & -65536;
  $170 = $169 | $168;
  HEAP32[$fp>>2] = $170;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 45) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _deflate_block($fp,$block_length) {
 $fp = $fp|0;
 $block_length = $block_length|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $comp_size = 0, $ret$02 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $comp_size = sp + 16|0;
 HEAP32[$comp_size>>2] = 65536;
 $0 = HEAP32[$fp>>2]|0;
 $1 = ($0|0)<(0);
 $2 = ((($fp)) + 44|0);
 do {
  if ($1) {
   $3 = HEAP32[$2>>2]|0;
   $4 = ((($fp)) + 40|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ((($fp)) + 68|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($block_length|0)!=(0);
   $9 = $8 ? 0 : 4;
   HEAP32[$7>>2] = $5;
   $10 = ((($7)) + 4|0);
   HEAP32[$10>>2] = $block_length;
   $11 = ((($7)) + 12|0);
   HEAP32[$11>>2] = $3;
   $12 = ((($7)) + 16|0);
   HEAP32[$12>>2] = 65536;
   $13 = (_deflate($7,$9)|0);
   $14 = ($13|0)==(-2);
   if ($14) {
    HEAP32[$vararg_buffer>>2] = 14922;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 14212;
    _fprintf(9772,14496,$vararg_buffer);
    $ret$02 = -1;
    label = 7;
    break;
   } else {
    $15 = HEAP32[$12>>2]|0;
    $16 = (65536 - ($15))|0;
    HEAP32[$comp_size>>2] = $16;
    $30 = $16;
    label = 8;
    break;
   }
  } else {
   $17 = HEAP32[$2>>2]|0;
   $18 = ((($fp)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $0 << 3;
   $21 = $20 >> 23;
   $22 = (_bgzf_compress($17,$comp_size,$19,$block_length,$21)|0);
   $23 = ($22|0)==(0);
   if ($23) {
    $$pre = HEAP32[$comp_size>>2]|0;
    $30 = $$pre;
    label = 8;
   } else {
    $ret$02 = $22;
    label = 7;
   }
  }
 } while(0);
 if ((label|0) == 7) {
  HEAP32[$vararg_buffer2>>2] = 14971;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $ret$02;
  _fprintf(9772,14941,$vararg_buffer2);
  $24 = HEAP32[$fp>>2]|0;
  $25 = $24 & 65534;
  $26 = $25 | 1;
  $27 = $24 & -65536;
  $28 = $27 | $26;
  HEAP32[$fp>>2] = $28;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 8) {
  $29 = ((($fp)) + 16|0);
  HEAP32[$29>>2] = 0;
  $$0 = $30;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _bgzf_close($fp) {
 $fp = $fp|0;
 var $$ = 0, $$0 = 0, $$0$i$i$i = 0, $$0$i$i1 = 0, $$0$i$i11 = 0, $$0$i$i15 = 0, $$0$i$i4 = 0, $$0$i$i8 = 0, $$0$i1$i10 = 0, $$0$i19 = 0, $$0$i24 = 0, $$0$i6 = 0, $$cast = 0, $$in = 0, $$in55 = 0, $$pre = 0, $$pre$phi45Z2D = 0, $$pre37 = 0, $$pre38 = 0, $$pre39 = 0;
 var $$pre40 = 0, $$pre44 = 0, $$pre46 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer$0$i = 0, $buffer$0$i14 = 0, $buffer$0$i26 = 0, $err$0$i = 0, $err$1$i = 0;
 var $i$0$i$i = 0, $i$03$i = 0, $i$12$i = 0, $k$0$i = 0, $or$cond = 0, $remaining$0$i$i = 0, $s$01$i = 0, $s$1$i = 0, $src$0$i$i = 0, $storemerge = 0, $storemerge$in = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($fp|0)==(0|0);
 if ($0) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP32[$fp>>2]|0;
 $2 = $1 & 196608;
 $3 = ($2|0)==(0);
 $4 = $1 & 1610612736;
 $5 = ($4|0)==(0);
 $or$cond = $3 | $5;
 L4: do {
  if (!($or$cond)) {
   $6 = (_bgzf_flush($fp)|0);
   $7 = ($6|0)==(0);
   if (!($7)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $8 = HEAP32[$fp>>2]|0;
   $9 = $8 | 535822336;
   HEAP32[$fp>>2] = $9;
   $10 = (_deflate_block($fp,0)|0);
   $11 = ($10|0)<(0);
   if ($11) {
    HEAP32[$vararg_buffer>>2] = 15063;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $10;
    _fprintf(9772,14985,$vararg_buffer);
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $12 = ((($fp)) + 52|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($fp)) + 44|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($13)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($13)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($17) - ($19))|0;
   $21 = ($20>>>0)>($10>>>0);
   $22 = $19;
   $$ = $21 ? $10 : $20;
   _memcpy(($22|0),($15|0),($$|0))|0;
   $23 = HEAP32[$18>>2]|0;
   $24 = (($23) + ($$)|0);
   HEAP32[$18>>2] = $24;
   $25 = ($10|0)==($$|0);
   do {
    if ($25) {
     label = 22;
    } else {
     $26 = HEAP32[$16>>2]|0;
     $27 = HEAP32[$13>>2]|0;
     $28 = (($26) - ($27))|0;
     $$cast = $27;
     $29 = ((($13)) + 16|0);
     $30 = ((($13)) + 20|0);
     $$in = $24;$buffer$0$i = $$cast;
     while(1) {
      $31 = ($buffer$0$i>>>0)<($$in>>>0);
      if (!($31)) {
       break;
      }
      $32 = $$in;
      $33 = HEAP32[$29>>2]|0;
      $34 = ((($33)) + 4|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = $buffer$0$i;
      $37 = (($32) - ($36))|0;
      $38 = (FUNCTION_TABLE_iiii[$35 & 127]($13,$buffer$0$i,$37)|0);
      $39 = ($38|0)<(0);
      if ($39) {
       label = 10;
       break;
      }
      $45 = (($buffer$0$i) + ($38)|0);
      $46 = HEAP32[$30>>2]|0;
      $47 = (($46) + ($38))|0;
      HEAP32[$30>>2] = $47;
      $$pre = HEAP32[$18>>2]|0;
      $$in = $$pre;$buffer$0$i = $45;
     }
     if ((label|0) == 10) {
      $40 = HEAP32[6773]|0;
      $41 = ($40|0)==(0|0);
      if ($41) {
       $$0$i$i11 = 27136;
      } else {
       $42 = (_pthread_self()|0);
       $43 = ((($42)) + 64|0);
       $44 = HEAP32[$43>>2]|0;
       $$0$i$i11 = $44;
      }
      $48 = HEAP32[$$0$i$i11>>2]|0;
      $49 = ((($13)) + 28|0);
      HEAP32[$49>>2] = $48;
      break;
     }
     $50 = HEAP32[$13>>2]|0;
     HEAP32[$18>>2] = $50;
     $51 = (($15) + ($$)|0);
     $52 = (($10) - ($$))|0;
     $remaining$0$i$i = $52;$src$0$i$i = $51;
     while(1) {
      $53 = $remaining$0$i$i << 1;
      $54 = ($53>>>0)<($28>>>0);
      if ($54) {
       label = 21;
       break;
      }
      $55 = HEAP32[$29>>2]|0;
      $56 = ((($55)) + 4|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = (FUNCTION_TABLE_iiii[$57 & 127]($13,$src$0$i$i,$remaining$0$i$i)|0);
      $59 = ($58|0)<(0);
      if ($59) {
       break;
      }
      $67 = HEAP32[$30>>2]|0;
      $68 = (($67) + ($58))|0;
      HEAP32[$30>>2] = $68;
      $69 = (($src$0$i$i) + ($58)|0);
      $70 = (($remaining$0$i$i) - ($58))|0;
      $remaining$0$i$i = $70;$src$0$i$i = $69;
     }
     if ((label|0) == 21) {
      $71 = HEAP32[$18>>2]|0;
      _memcpy(($71|0),($src$0$i$i|0),($remaining$0$i$i|0))|0;
      $72 = HEAP32[$18>>2]|0;
      $73 = (($72) + ($remaining$0$i$i)|0);
      HEAP32[$18>>2] = $73;
      label = 22;
      break;
     }
     $60 = HEAP32[6773]|0;
     $61 = ($60|0)==(0|0);
     if ($61) {
      $$0$i$i$i = 27136;
     } else {
      $62 = (_pthread_self()|0);
      $63 = ((($62)) + 64|0);
      $64 = HEAP32[$63>>2]|0;
      $$0$i$i$i = $64;
     }
     $65 = HEAP32[$$0$i$i$i>>2]|0;
     $66 = ((($13)) + 28|0);
     HEAP32[$66>>2] = $65;
    }
   } while(0);
   do {
    if ((label|0) == 22) {
     $74 = HEAP32[$12>>2]|0;
     $75 = HEAP32[$74>>2]|0;
     $76 = ((($74)) + 4|0);
     $77 = ((($74)) + 16|0);
     $78 = ((($74)) + 20|0);
     $buffer$0$i14 = $75;
     while(1) {
      $79 = HEAP32[$76>>2]|0;
      $80 = ($buffer$0$i14>>>0)<($79>>>0);
      if (!($80)) {
       break;
      }
      $81 = $79;
      $82 = HEAP32[$77>>2]|0;
      $83 = ((($82)) + 4|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = $buffer$0$i14;
      $86 = (($81) - ($85))|0;
      $87 = (FUNCTION_TABLE_iiii[$84 & 127]($74,$buffer$0$i14,$86)|0);
      $88 = ($87|0)<(0);
      if ($88) {
       label = 25;
       break;
      }
      $94 = (($buffer$0$i14) + ($87)|0);
      $95 = HEAP32[$78>>2]|0;
      $96 = (($95) + ($87))|0;
      HEAP32[$78>>2] = $96;
      $buffer$0$i14 = $94;
     }
     if ((label|0) == 25) {
      $89 = HEAP32[6773]|0;
      $90 = ($89|0)==(0|0);
      if ($90) {
       $$0$i$i15 = 27136;
      } else {
       $91 = (_pthread_self()|0);
       $92 = ((($91)) + 64|0);
       $93 = HEAP32[$92>>2]|0;
       $$0$i$i15 = $93;
      }
      $97 = HEAP32[$$0$i$i15>>2]|0;
      $98 = ((($74)) + 28|0);
      HEAP32[$98>>2] = $97;
      break;
     }
     $99 = HEAP32[$74>>2]|0;
     HEAP32[$76>>2] = $99;
     $100 = HEAP32[$77>>2]|0;
     $101 = ((($100)) + 12|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = ($102|0)==(0|0);
     if ($103) {
      break L4;
     }
     $104 = (FUNCTION_TABLE_ii[$102 & 63]($74)|0);
     $105 = ($104|0)<(0);
     if (!($105)) {
      break L4;
     }
     $106 = HEAP32[6773]|0;
     $107 = ($106|0)==(0|0);
     if ($107) {
      $$0$i$i1 = 27136;
     } else {
      $108 = (_pthread_self()|0);
      $109 = ((($108)) + 64|0);
      $110 = HEAP32[$109>>2]|0;
      $$0$i$i1 = $110;
     }
     $111 = HEAP32[$$0$i$i1>>2]|0;
     $112 = ((($74)) + 28|0);
     HEAP32[$112>>2] = $111;
    }
   } while(0);
   HEAP32[$vararg_buffer2>>2] = 15063;
   _fprintf(9772,15074,$vararg_buffer2);
   $113 = HEAP32[$fp>>2]|0;
   $114 = $113 & 65531;
   $115 = $114 | 4;
   $116 = $113 & -65536;
   $117 = $116 | $115;
   HEAP32[$fp>>2] = $117;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $118 = ((($fp)) + 56|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = ($119|0)==(0|0);
 if ($120) {
  $$pre37 = HEAP32[$fp>>2]|0;
  $187 = $$pre37;
 } else {
  $121 = ((($119)) + 84|0);
  (_pthread_mutex_lock(($121|0))|0);
  $122 = ((($119)) + 160|0);
  HEAP32[$122>>2] = 3;
  $123 = ((($119)) + 112|0);
  (_pthread_cond_signal(($123|0))|0);
  $124 = ((($119)) + 20|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = HEAP32[$125>>2]|0;
  $127 = ((($126)) + 32|0);
  (_pthread_mutex_lock(($127|0))|0);
  $128 = ((($125)) + 60|0);
  HEAP32[$128>>2] = 1;
  $129 = ((($125)) + 116|0);
  (_pthread_cond_signal(($129|0))|0);
  $130 = HEAP32[$125>>2]|0;
  $131 = ((($130)) + 32|0);
  (_pthread_mutex_unlock(($131|0))|0);
  (_pthread_mutex_unlock(($121|0))|0);
  $132 = HEAP32[$124>>2]|0;
  _hts_tpool_process_destroy($132);
  $133 = ((($119)) + 24|0);
  $134 = HEAP32[$133>>2]|0;
  (_pthread_join(($134|0),(0|0))|0);
  $135 = ((($119)) + 28|0);
  (_pthread_mutex_destroy(($135|0))|0);
  (_pthread_mutex_destroy(($121|0))|0);
  (_pthread_cond_destroy(($123|0))|0);
  $136 = ((($119)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = ($137|0)==(0|0);
  if (!($138)) {
   $139 = HEAP32[$119>>2]|0;
   $140 = ((($139)) + 16|0);
   $141 = HEAP32[$140>>2]|0;
   HEAP32[$137>>2] = $141;
   HEAP32[$140>>2] = $137;
  }
  $142 = HEAP32[$119>>2]|0;
  $143 = ((($142)) + 8|0);
  $144 = ((($142)) + 12|0);
  $i$0$i$i = 0;
  while(1) {
   $145 = HEAP32[$143>>2]|0;
   $146 = ($i$0$i$i>>>0)<($145>>>0);
   if (!($146)) {
    break;
   }
   $147 = HEAP32[$144>>2]|0;
   $148 = (($147) + ($i$0$i$i<<3)|0);
   $149 = HEAP32[$148>>2]|0;
   _free($149);
   $150 = (($i$0$i$i) + 1)|0;
   $i$0$i$i = $150;
  }
  $151 = HEAP32[$144>>2]|0;
  _free($151);
  _free($142);
  $152 = ((($119)) + 12|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = ($153|0)==(0);
  if (!($154)) {
   $155 = ((($119)) + 16|0);
   $156 = HEAP32[$155>>2]|0;
   _hts_tpool_destroy($156);
  }
  _free($119);
  $157 = HEAP32[(9848)>>2]|0;
  $158 = ($157|0)>(-1);
  $159 = HEAP32[(9792)>>2]|0;
  $160 = HEAP32[(9800)>>2]|0;
  $161 = ($159>>>0)>($160>>>0);
  do {
   if ($158) {
    if ($161) {
     $172 = HEAP32[(9808)>>2]|0;
     (FUNCTION_TABLE_iiii[$172 & 127](9772,0,0)|0);
     $173 = HEAP32[(9792)>>2]|0;
     $174 = ($173|0)==(0|0);
     if ($174) {
      break;
     }
    }
    $175 = HEAP32[(9776)>>2]|0;
    $176 = HEAP32[(9780)>>2]|0;
    $177 = ($175>>>0)<($176>>>0);
    if ($177) {
     $178 = HEAP32[(9812)>>2]|0;
     $179 = $175;
     $180 = $176;
     $181 = (($179) - ($180))|0;
     (FUNCTION_TABLE_iiii[$178 & 127](9772,$181,1)|0);
    }
    HEAP32[(9788)>>2] = 0;
    HEAP32[(9800)>>2] = 0;
    HEAP32[(9792)>>2] = 0;
    HEAP32[(9780)>>2] = 0;
    HEAP32[(9776)>>2] = 0;
   } else {
    if ($161) {
     $162 = HEAP32[(9808)>>2]|0;
     (FUNCTION_TABLE_iiii[$162 & 127](9772,0,0)|0);
     $163 = HEAP32[(9792)>>2]|0;
     $164 = ($163|0)==(0|0);
     if ($164) {
      break;
     }
    }
    $165 = HEAP32[(9776)>>2]|0;
    $166 = HEAP32[(9780)>>2]|0;
    $167 = ($165>>>0)<($166>>>0);
    if ($167) {
     $168 = HEAP32[(9812)>>2]|0;
     $169 = $165;
     $170 = $166;
     $171 = (($169) - ($170))|0;
     (FUNCTION_TABLE_iiii[$168 & 127](9772,$171,1)|0);
    }
    HEAP32[(9788)>>2] = 0;
    HEAP32[(9800)>>2] = 0;
    HEAP32[(9792)>>2] = 0;
    HEAP32[(9780)>>2] = 0;
    HEAP32[(9776)>>2] = 0;
   }
  } while(0);
  $182 = HEAP32[$fp>>2]|0;
  $183 = $182 & 196608;
  $184 = ($183|0)==(0);
  if ($184) {
   $185 = ((($fp)) + 40|0);
   HEAP32[$185>>2] = 0;
   $187 = $182;
  } else {
   $187 = $182;
  }
 }
 $186 = ($187|0)<(0);
 if ($186) {
  $188 = $187 & 196608;
  $189 = ($188|0)==(0);
  $190 = ((($fp)) + 68|0);
  L88: do {
   if ($189) {
    $191 = HEAP32[$190>>2]|0;
    $192 = ($191|0)==(0|0);
    if ($192) {
     $$0$i6 = 14212;
     label = 80;
    } else {
     $193 = ((($191)) + 28|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = ($194|0)==(0|0);
     if ($195) {
      $$0$i6 = 14212;
      label = 80;
     } else {
      $196 = ((($191)) + 36|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = ($197|0)==(0|0);
      if ($198) {
       $$0$i6 = 14212;
       label = 80;
      } else {
       $199 = ((($194)) + 52|0);
       $200 = HEAP32[$199>>2]|0;
       $201 = ($200|0)==(0|0);
       $$pre46 = ((($191)) + 40|0);
       if ($201) {
        $204 = $197;$205 = $194;
       } else {
        $202 = HEAP32[$$pre46>>2]|0;
        FUNCTION_TABLE_vii[$197 & 127]($202,$200);
        $$pre38 = HEAP32[$196>>2]|0;
        $$pre39 = HEAP32[$193>>2]|0;
        $204 = $$pre38;$205 = $$pre39;
       }
       $203 = HEAP32[$$pre46>>2]|0;
       FUNCTION_TABLE_vii[$204 & 127]($203,$205);
       HEAP32[$193>>2] = 0;
      }
     }
    }
   } else {
    $206 = HEAP32[$190>>2]|0;
    $207 = (_deflateEnd($206)|0);
    switch ($207|0) {
    case 0:  {
     break L88;
     break;
    }
    case -2:  {
     $$0$i6 = 14212;
     label = 80;
     break L88;
     break;
    }
    case -1:  {
     $208 = HEAP32[6773]|0;
     $209 = ($208|0)==(0|0);
     if ($209) {
      $$0$i$i4 = 27136;
     } else {
      $210 = (_pthread_self()|0);
      $211 = ((($210)) + 64|0);
      $212 = HEAP32[$211>>2]|0;
      $$0$i$i4 = $212;
     }
     $213 = HEAP32[$$0$i$i4>>2]|0;
     $i$03$i = 0;
     while(1) {
      $215 = (24836 + ($i$03$i)|0);
      $216 = HEAP8[$215>>0]|0;
      $217 = $216&255;
      $218 = ($217|0)==($213|0);
      if ($218) {
       label = 69;
       break;
      }
      $219 = (($i$03$i) + 1)|0;
      $220 = ($219|0)==(87);
      if ($220) {
       $i$12$i = 87;$s$01$i = 24924;
       break;
      } else {
       $i$03$i = $219;
      }
     }
     if ((label|0) == 69) {
      $214 = ($i$03$i|0)==(0);
      if ($214) {
       $$0$i6 = 24924;
       label = 80;
       break L88;
      } else {
       $i$12$i = $i$03$i;$s$01$i = 24924;
      }
     }
     while(1) {
      $s$1$i = $s$01$i;
      while(1) {
       $221 = HEAP8[$s$1$i>>0]|0;
       $222 = ($221<<24>>24)==(0);
       $223 = ((($s$1$i)) + 1|0);
       if ($222) {
        break;
       } else {
        $s$1$i = $223;
       }
      }
      $224 = (($i$12$i) + -1)|0;
      $225 = ($224|0)==(0);
      if ($225) {
       $$0$i6 = $223;
       label = 80;
       break;
      } else {
       $i$12$i = $224;$s$01$i = $223;
      }
     }
     break;
    }
    case -3:  {
     $$0$i6 = 14278;
     label = 80;
     break L88;
     break;
    }
    case -4:  {
     $$0$i6 = 14303;
     label = 80;
     break L88;
     break;
    }
    case -5:  {
     $$0$i6 = 14317;
     label = 80;
     break L88;
     break;
    }
    case -6:  {
     $$0$i6 = 14386;
     label = 80;
     break L88;
     break;
    }
    default: {
     HEAP32[$vararg_buffer5>>2] = $207;
     _snprintf(27644,32,14408,$vararg_buffer5);
     $$0$i6 = 27644;
     label = 80;
     break L88;
    }
    }
   }
  } while(0);
  if ((label|0) == 80) {
   HEAP32[$vararg_buffer8>>2] = 15063;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $$0$i6;
   _fprintf(9772,15100,$vararg_buffer8);
  }
  $226 = HEAP32[$190>>2]|0;
  _free($226);
 }
 $227 = ((($fp)) + 52|0);
 $228 = HEAP32[$227>>2]|0;
 $229 = ((($228)) + 28|0);
 $230 = HEAP32[$229>>2]|0;
 $231 = ((($228)) + 4|0);
 $232 = HEAP32[$231>>2]|0;
 $233 = ((($228)) + 8|0);
 $234 = HEAP32[$233>>2]|0;
 $235 = ($232>>>0)>($234>>>0);
 do {
  if ($235) {
   $236 = HEAP32[$228>>2]|0;
   $237 = ((($228)) + 16|0);
   $238 = ((($228)) + 20|0);
   $$in55 = $232;$buffer$0$i26 = $236;
   while(1) {
    $239 = ($buffer$0$i26>>>0)<($$in55>>>0);
    if (!($239)) {
     label = 90;
     break;
    }
    $240 = $$in55;
    $241 = HEAP32[$237>>2]|0;
    $242 = ((($241)) + 4|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = $buffer$0$i26;
    $245 = (($240) - ($244))|0;
    $246 = (FUNCTION_TABLE_iiii[$243 & 127]($228,$buffer$0$i26,$245)|0);
    $247 = ($246|0)<(0);
    if ($247) {
     label = 87;
     break;
    }
    $253 = (($buffer$0$i26) + ($246)|0);
    $254 = HEAP32[$238>>2]|0;
    $255 = (($254) + ($246))|0;
    HEAP32[$238>>2] = $255;
    $$pre40 = HEAP32[$231>>2]|0;
    $$in55 = $$pre40;$buffer$0$i26 = $253;
   }
   if ((label|0) == 87) {
    $248 = HEAP32[6773]|0;
    $249 = ($248|0)==(0|0);
    if ($249) {
     $storemerge$in = 27136;
    } else {
     $250 = (_pthread_self()|0);
     $251 = ((($250)) + 64|0);
     $252 = HEAP32[$251>>2]|0;
     $storemerge$in = $252;
    }
   }
   else if ((label|0) == 90) {
    $256 = HEAP32[$228>>2]|0;
    HEAP32[$231>>2] = $256;
    $257 = HEAP32[$237>>2]|0;
    $258 = ((($257)) + 12|0);
    $259 = HEAP32[$258>>2]|0;
    $260 = ($259|0)==(0|0);
    if ($260) {
     $$pre$phi45Z2D = $237;$err$0$i = $230;
     break;
    }
    $261 = (FUNCTION_TABLE_ii[$259 & 63]($228)|0);
    $262 = ($261|0)<(0);
    if (!($262)) {
     $$pre$phi45Z2D = $237;$err$0$i = $230;
     break;
    }
    $263 = HEAP32[6773]|0;
    $264 = ($263|0)==(0|0);
    if ($264) {
     $storemerge$in = 27136;
    } else {
     $265 = (_pthread_self()|0);
     $266 = ((($265)) + 64|0);
     $267 = HEAP32[$266>>2]|0;
     $storemerge$in = $267;
    }
   }
   $storemerge = HEAP32[$storemerge$in>>2]|0;
   HEAP32[$229>>2] = $storemerge;
   $$pre$phi45Z2D = $237;$err$0$i = $storemerge;
  } else {
   $$pre44 = ((($228)) + 16|0);
   $$pre$phi45Z2D = $$pre44;$err$0$i = $230;
  }
 } while(0);
 $268 = HEAP32[$$pre$phi45Z2D>>2]|0;
 $269 = ((($268)) + 16|0);
 $270 = HEAP32[$269>>2]|0;
 $271 = (FUNCTION_TABLE_ii[$270 & 63]($228)|0);
 $272 = ($271|0)<(0);
 $273 = HEAP32[6773]|0;
 if ($272) {
  $274 = ($273|0)==(0|0);
  if ($274) {
   $$0$i24 = 27136;
  } else {
   $275 = (_pthread_self()|0);
   $276 = ((($275)) + 64|0);
   $277 = HEAP32[$276>>2]|0;
   $$0$i24 = $277;
  }
  $278 = HEAP32[$$0$i24>>2]|0;
  $err$1$i = $278;
 } else {
  $err$1$i = $err$0$i;
 }
 $279 = ($273|0)==(0|0);
 if ($279) {
  $$0$i$i8 = 27136;
 } else {
  $280 = (_pthread_self()|0);
  $281 = ((($280)) + 64|0);
  $282 = HEAP32[$281>>2]|0;
  $$0$i$i8 = $282;
 }
 $283 = HEAP32[$$0$i$i8>>2]|0;
 $284 = ($228|0)==(0|0);
 if (!($284)) {
  $285 = HEAP32[$228>>2]|0;
  _free($285);
 }
 _free($228);
 $286 = HEAP32[6773]|0;
 $287 = ($286|0)==(0|0);
 if ($287) {
  $$0$i1$i10 = 27136;
 } else {
  $288 = (_pthread_self()|0);
  $289 = ((($288)) + 64|0);
  $290 = HEAP32[$289>>2]|0;
  $$0$i1$i10 = $290;
 }
 HEAP32[$$0$i1$i10>>2] = $283;
 $291 = ($err$1$i|0)==(0);
 if (!($291)) {
  $292 = HEAP32[6773]|0;
  $293 = ($292|0)==(0|0);
  if ($293) {
   $$0$i19 = 27136;
  } else {
   $294 = (_pthread_self()|0);
   $295 = ((($294)) + 64|0);
   $296 = HEAP32[$295>>2]|0;
   $$0$i19 = $296;
  }
  HEAP32[$$0$i19>>2] = $err$1$i;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $297 = ((($fp)) + 60|0);
 $298 = HEAP32[$297>>2]|0;
 $299 = ($298|0)==(0|0);
 if (!($299)) {
  $300 = ((($298)) + 8|0);
  $301 = HEAP32[$300>>2]|0;
  _free($301);
  $302 = HEAP32[$297>>2]|0;
  _free($302);
  HEAP32[$297>>2] = 0;
  $303 = ((($fp)) + 64|0);
  HEAP32[$303>>2] = 0;
 }
 $304 = ((($fp)) + 40|0);
 $305 = HEAP32[$304>>2]|0;
 _free($305);
 $306 = ((($fp)) + 48|0);
 $307 = HEAP32[$306>>2]|0;
 $308 = HEAP32[$fp>>2]|0;
 $309 = $308 & 196608;
 $310 = ($309|0)==(0);
 if ($310) {
  $311 = ((($307)) + 16|0);
  $312 = ((($307)) + 24|0);
  $k$0$i = 0;
  while(1) {
   $313 = HEAP32[$307>>2]|0;
   $314 = ($k$0$i>>>0)<($313>>>0);
   if (!($314)) {
    break;
   }
   $315 = $k$0$i >>> 4;
   $316 = HEAP32[$311>>2]|0;
   $317 = (($316) + ($315<<2)|0);
   $318 = HEAP32[$317>>2]|0;
   $319 = $k$0$i << 1;
   $320 = $319 & 30;
   $321 = 3 << $320;
   $322 = $318 & $321;
   $323 = ($322|0)==(0);
   if ($323) {
    $324 = HEAP32[$312>>2]|0;
    $325 = (((($324) + ($k$0$i<<4)|0)) + 4|0);
    $326 = HEAP32[$325>>2]|0;
    _free($326);
   }
   $327 = (($k$0$i) + 1)|0;
   $k$0$i = $327;
  }
  $328 = ((($307)) + 20|0);
  $329 = HEAP32[$328>>2]|0;
  _free($329);
  $330 = HEAP32[$311>>2]|0;
  _free($330);
  $331 = HEAP32[$312>>2]|0;
  _free($331);
  _free($307);
 }
 _free($fp);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _bgzf_getc($fp) {
 $fp = $fp|0;
 var $$0 = 0, $$0$i = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($fp)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = ((($fp)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)<($4|0);
 if ($5) {
  $6 = ((($fp)) + 32|0);
  $7 = $6;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + 4)|0;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = (_i64Add(($9|0),($12|0),1,0)|0);
  $14 = tempRet0;
  $15 = $6;
  $16 = $15;
  HEAP32[$16>>2] = $13;
  $17 = (($15) + 4)|0;
  $18 = $17;
  HEAP32[$18>>2] = $14;
  HEAP32[$0>>2] = $2;
  $19 = ((($fp)) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($1)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $$0 = $23;
  return ($$0|0);
 }
 $24 = ($1|0)<($4|0);
 do {
  if ($24) {
   $30 = $1;$37 = $4;
  } else {
   $25 = (_bgzf_read_block($fp)|0);
   $26 = ($25|0)==(0);
   if (!($26)) {
    $$0 = -2;
    return ($$0|0);
   }
   $27 = HEAP32[$3>>2]|0;
   $28 = ($27|0)==(0);
   if ($28) {
    $$0 = -1;
    return ($$0|0);
   } else {
    $$pre = HEAP32[$0>>2]|0;
    $30 = $$pre;$37 = $27;
    break;
   }
  }
 } while(0);
 $29 = (($30) + 1)|0;
 HEAP32[$0>>2] = $29;
 $31 = ((($fp)) + 40|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + ($30)|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = ($29|0)==($37|0);
 if ($36) {
  $38 = ((($fp)) + 56|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(0|0);
  if ($40) {
   $55 = ((($fp)) + 52|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ((($56)) + 20|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ((($56)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = HEAP32[$56>>2]|0;
   $62 = (($60) - ($61))|0;
   $63 = (($58) + ($62))|0;
   $$pre1 = ((($fp)) + 24|0);
   $$0$i = $63;$$pre$phiZ2D = $$pre1;
  } else {
   $41 = ((($39)) + 28|0);
   (_pthread_mutex_lock(($41|0))|0);
   $42 = ((($fp)) + 24|0);
   $43 = $42;
   $44 = $43;
   $45 = HEAP32[$44>>2]|0;
   $46 = (($43) + 4)|0;
   $47 = $46;
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($fp)) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (_i64Add(($45|0),($48|0),($50|0),0)|0);
   $52 = tempRet0;
   $53 = HEAP32[$38>>2]|0;
   $54 = ((($53)) + 28|0);
   (_pthread_mutex_unlock(($54|0))|0);
   $$0$i = $51;$$pre$phiZ2D = $42;
  }
  $64 = ($$0$i|0)<(0);
  $65 = $64 << 31 >> 31;
  $66 = $$pre$phiZ2D;
  $67 = $66;
  HEAP32[$67>>2] = $$0$i;
  $68 = (($66) + 4)|0;
  $69 = $68;
  HEAP32[$69>>2] = $65;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
 }
 $70 = ((($fp)) + 32|0);
 $71 = $70;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = (($71) + 4)|0;
 $75 = $74;
 $76 = HEAP32[$75>>2]|0;
 $77 = (_i64Add(($73|0),($76|0),1,0)|0);
 $78 = tempRet0;
 $79 = $70;
 $80 = $79;
 HEAP32[$80>>2] = $77;
 $81 = (($79) + 4)|0;
 $82 = $81;
 HEAP32[$82>>2] = $78;
 $$0 = $35;
 return ($$0|0);
}
function _hfile_init($struct_size,$mode,$capacity) {
 $struct_size = $struct_size|0;
 $mode = $mode|0;
 $capacity = $capacity|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i1$i = 0, $$02$lcssa$i = 0, $$0211$i = 0, $$1 = 0, $$1$i = 0, $$capacity = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $w$0$lcssa$i = 0, $w$08$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc($struct_size)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = ($capacity|0)==(0);
  $$capacity = $2 ? 32768 : $capacity;
  $3 = $mode;
  $4 = $3 & 3;
  $5 = ($4|0)==(0);
  L3: do {
   if ($5) {
    $$02$lcssa$i = $mode;
    label = 5;
   } else {
    $$0211$i = $mode;
    while(1) {
     $6 = HEAP8[$$0211$i>>0]|0;
     switch ($6<<24>>24) {
     case 0: case 114:  {
      $$0$i = $$0211$i;$33 = $6;
      break L3;
      break;
     }
     default: {
     }
     }
     $7 = ((($$0211$i)) + 1|0);
     $8 = $7;
     $9 = $8 & 3;
     $10 = ($9|0)==(0);
     if ($10) {
      $$02$lcssa$i = $7;
      label = 5;
      break L3;
     } else {
      $$0211$i = $7;
     }
    }
   }
  } while(0);
  L7: do {
   if ((label|0) == 5) {
    $11 = HEAP32[$$02$lcssa$i>>2]|0;
    $12 = (($11) + -16843009)|0;
    $13 = $11 & -2139062144;
    $14 = $13 ^ -2139062144;
    $15 = $14 & $12;
    $16 = ($15|0)==(0);
    L9: do {
     if ($16) {
      $18 = $11;$w$08$i = $$02$lcssa$i;
      while(1) {
       $17 = $18 ^ 1920103026;
       $19 = (($17) + -16843009)|0;
       $20 = $18 & -2139062144;
       $21 = $20 ^ -2139062144;
       $22 = $21 & $19;
       $23 = ($22|0)==(0);
       if (!($23)) {
        $w$0$lcssa$i = $w$08$i;
        break L9;
       }
       $24 = ((($w$08$i)) + 4|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = (($25) + -16843009)|0;
       $27 = $25 & -2139062144;
       $28 = $27 ^ -2139062144;
       $29 = $28 & $26;
       $30 = ($29|0)==(0);
       if ($30) {
        $18 = $25;$w$08$i = $24;
       } else {
        $w$0$lcssa$i = $24;
        break;
       }
      }
     } else {
      $w$0$lcssa$i = $$02$lcssa$i;
     }
    } while(0);
    $$1$i = $w$0$lcssa$i;
    while(1) {
     $31 = HEAP8[$$1$i>>0]|0;
     $32 = ((($$1$i)) + 1|0);
     switch ($31<<24>>24) {
     case 0: case 114:  {
      $$0$i = $$1$i;$33 = $31;
      break L7;
      break;
     }
     default: {
      $$1$i = $32;
     }
     }
    }
   }
  } while(0);
  $notlhs = ($$0$i|0)!=(0|0);
  $notrhs = ($33<<24>>24)==(114);
  $$not = $notrhs & $notlhs;
  $34 = ($$capacity>>>0)>(32768);
  $or$cond = $$not & $34;
  $$1 = $or$cond ? 32768 : $$capacity;
  $35 = (_malloc($$1)|0);
  HEAP32[$0>>2] = $35;
  $36 = ($35|0)==(0|0);
  $37 = $35;
  if (!($36)) {
   $38 = ((($0)) + 8|0);
   HEAP32[$38>>2] = $37;
   $39 = ((($0)) + 4|0);
   HEAP32[$39>>2] = $37;
   $40 = (($35) + ($$1)|0);
   $41 = ((($0)) + 12|0);
   HEAP32[$41>>2] = $40;
   $42 = ((($0)) + 20|0);
   HEAP32[$42>>2] = 0;
   $43 = ((($0)) + 24|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44 & -2;
   HEAP8[$43>>0] = $45;
   $46 = ((($0)) + 28|0);
   HEAP32[$46>>2] = 0;
   $$0 = $0;
   return ($$0|0);
  }
 }
 $47 = HEAP32[6773]|0;
 $48 = ($47|0)==(0|0);
 if ($48) {
  $$0$i$i = 27136;
 } else {
  $49 = (_pthread_self()|0);
  $50 = ((($49)) + 64|0);
  $51 = HEAP32[$50>>2]|0;
  $$0$i$i = $51;
 }
 $52 = HEAP32[$$0$i$i>>2]|0;
 if (!($1)) {
  $53 = HEAP32[$0>>2]|0;
  _free($53);
 }
 _free($0);
 $54 = HEAP32[6773]|0;
 $55 = ($54|0)==(0|0);
 if ($55) {
  $$0$i1$i = 27136;
 } else {
  $56 = (_pthread_self()|0);
  $57 = ((($56)) + 64|0);
  $58 = HEAP32[$57>>2]|0;
  $$0$i1$i = $58;
 }
 HEAP32[$$0$i1$i>>2] = $52;
 $$0 = 0;
 return ($$0|0);
}
function _refill_buffer($fp) {
 $fp = $fp|0;
 var $$0 = 0, $$0$i = 0, $$cast = 0, $$cast2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($fp)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$fp>>2]|0;
 $3 = ($1>>>0)>($2>>>0);
 $4 = $1;
 if ($3) {
  $5 = $2;
  $6 = (($4) - ($5))|0;
  $7 = ((($fp)) + 20|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($6))|0;
  HEAP32[$7>>2] = $9;
  $10 = ((($fp)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) - ($4))|0;
  _memmove(($2|0),($1|0),($12|0))|0;
  $13 = HEAP32[$10>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = HEAP32[$fp>>2]|0;
  $17 = (($16) + ($15)|0);
  HEAP32[$10>>2] = $17;
  $$cast2 = $16;
  HEAP32[$0>>2] = $$cast2;
 }
 $18 = ((($fp)) + 24|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19 & 1;
 $21 = ($20<<24>>24)==(0);
 $22 = ((($fp)) + 8|0);
 do {
  if ($21) {
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($fp)) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23|0)==($25|0);
   if ($26) {
    $n$0 = 0;
   } else {
    $27 = $25;
    $28 = ((($fp)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = HEAP32[$29>>2]|0;
    $$cast = $23;
    $31 = (($27) - ($$cast))|0;
    $32 = (FUNCTION_TABLE_iiii[$30 & 127]($fp,$23,$31)|0);
    $33 = ($32|0)<(0);
    if (!($33)) {
     $41 = ($32|0)==(0);
     if (!($41)) {
      $n$0 = $32;
      break;
     }
     $42 = HEAP8[$18>>0]|0;
     $43 = $42 | 1;
     HEAP8[$18>>0] = $43;
     $n$0 = 0;
     break;
    }
    $34 = HEAP32[6773]|0;
    $35 = ($34|0)==(0|0);
    if ($35) {
     $$0$i = 27136;
    } else {
     $36 = (_pthread_self()|0);
     $37 = ((($36)) + 64|0);
     $38 = HEAP32[$37>>2]|0;
     $$0$i = $38;
    }
    $39 = HEAP32[$$0$i>>2]|0;
    $40 = ((($fp)) + 28|0);
    HEAP32[$40>>2] = $39;
    $$0 = $32;
    return ($$0|0);
   }
  } else {
   $n$0 = 0;
  }
 } while(0);
 $44 = HEAP32[$22>>2]|0;
 $45 = (($44) + ($n$0)|0);
 HEAP32[$22>>2] = $45;
 $$0 = $n$0;
 return ($$0|0);
}
function _hread2($fp,$destv,$nbytes,$nread) {
 $fp = $fp|0;
 $destv = $destv|0;
 $nbytes = $nbytes|0;
 $nread = $nread|0;
 var $$0 = 0, $$0$i = 0, $$01 = 0, $$02 = 0, $$1 = 0, $$1$ = 0, $$13 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dest$0 = 0, $dest$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($fp)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$fp>>2]|0;
 $3 = (($1) - ($2))|0;
 $4 = (($destv) + ($nread)|0);
 $5 = (($nbytes) - ($nread))|0;
 $6 = ((($fp)) + 24|0);
 $7 = ((($fp)) + 16|0);
 $8 = ((($fp)) + 20|0);
 $$01 = $5;$$02 = $nread;$dest$0 = $4;
 while(1) {
  $9 = $$01 << 1;
  $10 = ($9>>>0)<($3>>>0);
  if ($10) {
   break;
  }
  $13 = HEAP8[$6>>0]|0;
  $14 = $13 & 1;
  $15 = ($14<<24>>24)==(0);
  if (!($15)) {
   break;
  }
  $16 = HEAP32[$7>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_iiii[$17 & 127]($fp,$dest$0,$$01)|0);
  $19 = ($18|0)<(0);
  if ($19) {
   label = 6;
   break;
  }
  $27 = ($18|0)==(0);
  if ($27) {
   $28 = HEAP8[$6>>0]|0;
   $29 = $28 | 1;
   HEAP8[$6>>0] = $29;
  }
  $30 = HEAP32[$8>>2]|0;
  $31 = (($30) + ($18))|0;
  HEAP32[$8>>2] = $31;
  $32 = (($dest$0) + ($18)|0);
  $33 = (($$01) - ($18))|0;
  $34 = (($$02) + ($18))|0;
  $$01 = $33;$$02 = $34;$dest$0 = $32;
 }
 if ((label|0) == 6) {
  $20 = HEAP32[6773]|0;
  $21 = ($20|0)==(0|0);
  if ($21) {
   $$0$i = 27136;
  } else {
   $22 = (_pthread_self()|0);
   $23 = ((($22)) + 64|0);
   $24 = HEAP32[$23>>2]|0;
   $$0$i = $24;
  }
  $25 = HEAP32[$$0$i>>2]|0;
  $26 = ((($fp)) + 28|0);
  HEAP32[$26>>2] = $25;
  $$0 = $18;
  return ($$0|0);
 }
 $11 = ((($fp)) + 8|0);
 $12 = ((($fp)) + 4|0);
 $$1 = $$01;$$13 = $$02;$dest$1 = $dest$0;
 while(1) {
  $35 = ($$1|0)==(0);
  if ($35) {
   $$0 = $$13;
   label = 16;
   break;
  }
  $36 = HEAP8[$6>>0]|0;
  $37 = $36 & 1;
  $38 = ($37<<24>>24)==(0);
  if (!($38)) {
   $$0 = $$13;
   label = 16;
   break;
  }
  $39 = (_refill_buffer($fp)|0);
  $40 = ($39|0)<(0);
  if ($40) {
   $$0 = $39;
   label = 16;
   break;
  }
  $41 = HEAP32[$11>>2]|0;
  $42 = HEAP32[$12>>2]|0;
  $43 = (($41) - ($42))|0;
  $44 = ($43>>>0)>($$1>>>0);
  $45 = $42;
  $$1$ = $44 ? $$1 : $43;
  _memcpy(($dest$1|0),($45|0),($$1$|0))|0;
  $46 = HEAP32[$12>>2]|0;
  $47 = (($46) + ($$1$)|0);
  HEAP32[$12>>2] = $47;
  $48 = (($dest$1) + ($$1$)|0);
  $49 = (($$1) - ($$1$))|0;
  $50 = (($$13) + ($$1$))|0;
  $$1 = $49;$$13 = $50;$dest$1 = $48;
 }
 if ((label|0) == 16) {
  return ($$0|0);
 }
 return (0)|0;
}
function _hseek($fp,$offset,$whence) {
 $fp = $fp|0;
 $offset = $offset|0;
 $whence = $whence|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i4 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre$phi10Z2D = 0, $$pre$phi11Z2D = 0, $$pre$phiZ2D = 0, $$pre7 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($fp)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($fp)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 $5 = $1;
 do {
  if ($4) {
   $6 = HEAP32[$fp>>2]|0;
   $7 = ((($fp)) + 16|0);
   $8 = ((($fp)) + 20|0);
   $10 = $1;$16 = $5;$buffer$0$i = $6;
   while(1) {
    $9 = ($buffer$0$i>>>0)<($10>>>0);
    if (!($9)) {
     label = 10;
     break;
    }
    $11 = HEAP32[$7>>2]|0;
    $12 = ((($11)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $buffer$0$i;
    $15 = (($16) - ($14))|0;
    $17 = (FUNCTION_TABLE_iiii[$13 & 127]($fp,$buffer$0$i,$15)|0);
    $18 = ($17|0)<(0);
    if ($18) {
     break;
    }
    $24 = (($buffer$0$i) + ($17)|0);
    $25 = HEAP32[$8>>2]|0;
    $26 = (($25) + ($17))|0;
    HEAP32[$8>>2] = $26;
    $$pre = HEAP32[$0>>2]|0;
    $27 = $$pre;
    $10 = $$pre;$16 = $27;$buffer$0$i = $24;
   }
   if ((label|0) == 10) {
    $30 = HEAP32[$fp>>2]|0;
    HEAP32[$0>>2] = $30;
    $$pre$phi10Z2D = $0;$$pre$phi11Z2D = $fp;$$pre$phiZ2D = $8;$34 = $30;$35 = $30;
    break;
   }
   $19 = HEAP32[6773]|0;
   $20 = ($19|0)==(0|0);
   if ($20) {
    $$0$i$i = 27136;
   } else {
    $21 = (_pthread_self()|0);
    $22 = ((($21)) + 64|0);
    $23 = HEAP32[$22>>2]|0;
    $$0$i$i = $23;
   }
   $28 = HEAP32[$$0$i$i>>2]|0;
   $29 = ((($fp)) + 28|0);
   HEAP32[$29>>2] = $28;
   $$0 = $17;
   return ($$0|0);
  } else {
   $$pre7 = HEAP32[$fp>>2]|0;
   $$pre8 = ((($fp)) + 20|0);
   $$pre$phi10Z2D = $0;$$pre$phi11Z2D = $fp;$$pre$phiZ2D = $$pre8;$34 = $5;$35 = $$pre7;
  }
 } while(0);
 $31 = ($whence|0)==(1);
 if ($31) {
  $32 = HEAP32[$$pre$phiZ2D>>2]|0;
  $33 = (($34) - ($35))|0;
  $36 = (($32) + ($33))|0;
  $37 = (($36) + ($offset))|0;
  $38 = ($37|0)<(0);
  if ($38) {
   $39 = $offset >> 31;
   $40 = $39 & -53;
   $41 = (($40) + 75)|0;
   $42 = HEAP32[6773]|0;
   $43 = ($42|0)==(0|0);
   if ($43) {
    $$0$i4 = 27136;
   } else {
    $44 = (_pthread_self()|0);
    $45 = ((($44)) + 64|0);
    $46 = HEAP32[$45>>2]|0;
    $$0$i4 = $46;
   }
   HEAP32[$$0$i4>>2] = $41;
   $47 = ((($fp)) + 28|0);
   HEAP32[$47>>2] = $41;
   $$0 = -1;
   return ($$0|0);
  } else {
   $$01 = 0;$$02 = $37;
  }
 } else {
  $$01 = $whence;$$02 = $offset;
 }
 $48 = ((($fp)) + 16|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($49)) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (FUNCTION_TABLE_iiii[$51 & 127]($fp,$$02,$$01)|0);
 $53 = ($52|0)<(0);
 if (!($53)) {
  $61 = HEAP32[$$pre$phi11Z2D>>2]|0;
  HEAP32[$2>>2] = $61;
  HEAP32[$$pre$phi10Z2D>>2] = $61;
  $62 = ((($fp)) + 24|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63 & -2;
  HEAP8[$62>>0] = $64;
  HEAP32[$$pre$phiZ2D>>2] = $52;
  $$0 = $52;
  return ($$0|0);
 }
 $54 = HEAP32[6773]|0;
 $55 = ($54|0)==(0|0);
 if ($55) {
  $$0$i = 27136;
 } else {
  $56 = (_pthread_self()|0);
  $57 = ((($56)) + 64|0);
  $58 = HEAP32[$57>>2]|0;
  $$0$i = $58;
 }
 $59 = HEAP32[$$0$i>>2]|0;
 $60 = ((($fp)) + 28|0);
 HEAP32[$60>>2] = $59;
 $$0 = $52;
 return ($$0|0);
}
function _blksize($fd) {
 $fd = $fd|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i = 0, $$0$i$i1$i = 0, $$0$i3$i = 0, $$01$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $buf$i = 0, $i$13$i$i = 0, $i$22$i$i = 0, $j$04$i$i = 0, $sbuf = 0, $scevgep$i$i = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $buf$i = sp + 100|0;
 $sbuf = sp + 24|0;
 HEAP32[$vararg_buffer>>2] = $fd;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $sbuf;
 $0 = (___syscall197(197,($vararg_buffer|0))|0);
 $1 = ($0|0)==(-9);
 if ($1) {
  HEAP32[$vararg_buffer2>>2] = $fd;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 1;
  $2 = (___syscall221(221,($vararg_buffer2|0))|0);
  $3 = ($2|0)<(0);
  if ($3) {
   label = 4;
  } else {
   dest=$buf$i; src=26783; stop=dest+15|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $11 = ($fd|0)==(0);
   if ($11) {
    $scevgep$i$i = ((($buf$i)) + 14|0);
    HEAP8[$scevgep$i$i>>0] = 48;
    $12 = ((($buf$i)) + 15|0);
    HEAP8[$12>>0] = 0;
   } else {
    $i$13$i$i = 14;$j$04$i$i = $fd;
    while(1) {
     $13 = (($j$04$i$i>>>0) / 10)&-1;
     $14 = (($i$13$i$i) + 1)|0;
     $15 = ($j$04$i$i>>>0)<(10);
     if ($15) {
      break;
     } else {
      $i$13$i$i = $14;$j$04$i$i = $13;
     }
    }
    $16 = (($buf$i) + ($14)|0);
    HEAP8[$16>>0] = 0;
    $$01$i$i = $fd;$i$22$i$i = $14;
    while(1) {
     $17 = (($$01$i$i>>>0) % 10)&-1;
     $18 = $17 | 48;
     $19 = $18&255;
     $20 = (($i$22$i$i) + -1)|0;
     $21 = (($buf$i) + ($20)|0);
     HEAP8[$21>>0] = $19;
     $22 = (($$01$i$i>>>0) / 10)&-1;
     $23 = ($$01$i$i>>>0)<(10);
     if ($23) {
      break;
     } else {
      $$01$i$i = $22;$i$22$i$i = $20;
     }
    }
   }
   HEAP32[$vararg_buffer6>>2] = $buf$i;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $sbuf;
   $24 = (___syscall195(195,($vararg_buffer6|0))|0);
   $25 = ($24>>>0)>(4294963200);
   if ($25) {
    $26 = (0 - ($24))|0;
    $27 = HEAP32[6773]|0;
    $28 = ($27|0)==(0|0);
    if ($28) {
     $$0$i$i1$i = 27136;
    } else {
     $29 = (_pthread_self()|0);
     $30 = ((($29)) + 64|0);
     $31 = HEAP32[$30>>2]|0;
     $$0$i$i1$i = $31;
    }
    HEAP32[$$0$i$i1$i>>2] = $26;
    $$0$i3$i = -1;
   } else {
    $$0$i3$i = $24;
   }
   $$0$i = $$0$i3$i;
   label = 17;
  }
 } else {
  $4 = ($0>>>0)>(4294963200);
  if ($4) {
   label = 4;
  } else {
   $$0$i = $0;
   label = 17;
  }
 }
 if ((label|0) == 4) {
  $5 = (0 - ($0))|0;
  $6 = HEAP32[6773]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $$0$i$i$i = 27136;
  } else {
   $8 = (_pthread_self()|0);
   $9 = ((($8)) + 64|0);
   $10 = HEAP32[$9>>2]|0;
   $$0$i$i$i = $10;
  }
  HEAP32[$$0$i$i$i>>2] = $5;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 17) {
  $32 = ($$0$i|0)==(0);
  if (!($32)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $33 = ((($sbuf)) + 40|0);
  $34 = HEAP32[$33>>2]|0;
  $$0 = $34;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _fd_read($fpv,$buffer,$nbytes) {
 $fpv = $fpv|0;
 $buffer = $buffer|0;
 $nbytes = $nbytes|0;
 var $$0$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 24|0;
 $1 = ((($fpv)) + 36|0);
 $2 = ((($fpv)) + 32|0);
 $3 = ((($0)) + 4|0);
 $4 = $buffer;
 $5 = ((($0)) + 8|0);
 $6 = ((($0)) + 12|0);
 $7 = ((($0)) + 16|0);
 $8 = ((($0)) + 20|0);
 while(1) {
  $9 = HEAP8[$1>>0]|0;
  $10 = $9 & 1;
  $11 = ($10<<24>>24)==(0);
  $12 = HEAP32[$2>>2]|0;
  if ($11) {
   HEAP32[$vararg_buffer2>>2] = $12;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $buffer;
   $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
   HEAP32[$vararg_ptr6>>2] = $nbytes;
   $21 = (___syscall3(3,($vararg_buffer2|0))|0);
   $22 = ($21>>>0)>(4294963200);
   if ($22) {
    $23 = (0 - ($21))|0;
    $24 = HEAP32[6773]|0;
    $25 = ($24|0)==(0|0);
    if ($25) {
     $$0$i$i$i1 = 27136;
    } else {
     $26 = (_pthread_self()|0);
     $27 = ((($26)) + 64|0);
     $28 = HEAP32[$27>>2]|0;
     $$0$i$i$i1 = $28;
    }
    HEAP32[$$0$i$i$i1>>2] = $23;
    $32 = $24;$39 = -1;
   } else {
    $30 = $21;
    label = 12;
   }
  } else {
   HEAP32[$0>>2] = $12;
   HEAP32[$3>>2] = $4;
   HEAP32[$5>>2] = $nbytes;
   HEAP32[$6>>2] = 0;
   HEAP32[$7>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$vararg_buffer>>2] = 12;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $0;
   $13 = (___syscall102(102,($vararg_buffer|0))|0);
   $14 = ($13>>>0)>(4294963200);
   if ($14) {
    $15 = (0 - ($13))|0;
    $16 = HEAP32[6773]|0;
    $17 = ($16|0)==(0|0);
    if ($17) {
     $$0$i$i$i$i = 27136;
    } else {
     $18 = (_pthread_self()|0);
     $19 = ((($18)) + 64|0);
     $20 = HEAP32[$19>>2]|0;
     $$0$i$i$i$i = $20;
    }
    HEAP32[$$0$i$i$i$i>>2] = $15;
    $$0$i$i$i = -1;
   } else {
    $$0$i$i$i = $13;
   }
   $30 = $$0$i$i$i;
   label = 12;
  }
  if ((label|0) == 12) {
   label = 0;
   $29 = ($30|0)<(0);
   if (!($29)) {
    $38 = $30;
    label = 17;
    break;
   }
   $$pre = HEAP32[6773]|0;
   $32 = $$pre;$39 = $30;
  }
  $31 = ($32|0)==(0|0);
  if ($31) {
   $$0$i = 27136;
  } else {
   $33 = (_pthread_self()|0);
   $34 = ((($33)) + 64|0);
   $35 = HEAP32[$34>>2]|0;
   $$0$i = $35;
  }
  $36 = HEAP32[$$0$i>>2]|0;
  $37 = ($36|0)==(4);
  if (!($37)) {
   $38 = $39;
   label = 17;
   break;
  }
 }
 if ((label|0) == 17) {
  STACKTOP = sp;return ($38|0);
 }
 return (0)|0;
}
function _fd_write($fpv,$buffer,$nbytes) {
 $fpv = $fpv|0;
 $buffer = $buffer|0;
 $nbytes = $nbytes|0;
 var $$0$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 24|0;
 $1 = ((($fpv)) + 36|0);
 $2 = ((($fpv)) + 32|0);
 $3 = ((($0)) + 4|0);
 $4 = $buffer;
 $5 = ((($0)) + 8|0);
 $6 = ((($0)) + 12|0);
 $7 = ((($0)) + 16|0);
 $8 = ((($0)) + 20|0);
 while(1) {
  $9 = HEAP8[$1>>0]|0;
  $10 = $9 & 1;
  $11 = ($10<<24>>24)==(0);
  $12 = HEAP32[$2>>2]|0;
  if ($11) {
   HEAP32[$vararg_buffer2>>2] = $12;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $buffer;
   $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
   HEAP32[$vararg_ptr6>>2] = $nbytes;
   $21 = (___syscall4(4,($vararg_buffer2|0))|0);
   $22 = ($21>>>0)>(4294963200);
   if ($22) {
    $23 = (0 - ($21))|0;
    $24 = HEAP32[6773]|0;
    $25 = ($24|0)==(0|0);
    if ($25) {
     $$0$i$i$i1 = 27136;
    } else {
     $26 = (_pthread_self()|0);
     $27 = ((($26)) + 64|0);
     $28 = HEAP32[$27>>2]|0;
     $$0$i$i$i1 = $28;
    }
    HEAP32[$$0$i$i$i1>>2] = $23;
    $32 = $24;$39 = -1;
   } else {
    $30 = $21;
    label = 12;
   }
  } else {
   HEAP32[$0>>2] = $12;
   HEAP32[$3>>2] = $4;
   HEAP32[$5>>2] = $nbytes;
   HEAP32[$6>>2] = 0;
   HEAP32[$7>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$vararg_buffer>>2] = 11;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $0;
   $13 = (___syscall102(102,($vararg_buffer|0))|0);
   $14 = ($13>>>0)>(4294963200);
   if ($14) {
    $15 = (0 - ($13))|0;
    $16 = HEAP32[6773]|0;
    $17 = ($16|0)==(0|0);
    if ($17) {
     $$0$i$i$i$i = 27136;
    } else {
     $18 = (_pthread_self()|0);
     $19 = ((($18)) + 64|0);
     $20 = HEAP32[$19>>2]|0;
     $$0$i$i$i$i = $20;
    }
    HEAP32[$$0$i$i$i$i>>2] = $15;
    $$0$i$i$i = -1;
   } else {
    $$0$i$i$i = $13;
   }
   $30 = $$0$i$i$i;
   label = 12;
  }
  if ((label|0) == 12) {
   label = 0;
   $29 = ($30|0)<(0);
   if (!($29)) {
    $38 = $30;
    label = 17;
    break;
   }
   $$pre = HEAP32[6773]|0;
   $32 = $$pre;$39 = $30;
  }
  $31 = ($32|0)==(0|0);
  if ($31) {
   $$0$i = 27136;
  } else {
   $33 = (_pthread_self()|0);
   $34 = ((($33)) + 64|0);
   $35 = HEAP32[$34>>2]|0;
   $$0$i = $35;
  }
  $36 = HEAP32[$$0$i>>2]|0;
  $37 = ($36|0)==(4);
  if (!($37)) {
   $38 = $39;
   label = 17;
   break;
  }
 }
 if ((label|0) == 17) {
  STACKTOP = sp;return ($38|0);
 }
 return (0)|0;
}
function _fd_seek($fpv,$offset,$whence) {
 $fpv = $fpv|0;
 $offset = $offset|0;
 $whence = $whence|0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
 var $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $result$i = sp + 20|0;
 $0 = ((($fpv)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $offset;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $result$i;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = ($2>>>0)>(4294963200);
 if (!($3)) {
  $$0$i$i = $2;
  $10 = ($$0$i$i|0)!=(0);
  $11 = HEAP32[$result$i>>2]|0;
  $12 = $10 ? -1 : $11;
  STACKTOP = sp;return ($12|0);
 }
 $4 = (0 - ($2))|0;
 $5 = HEAP32[6773]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0$i$i$i = 27136;
 } else {
  $7 = (_pthread_self()|0);
  $8 = ((($7)) + 64|0);
  $9 = HEAP32[$8>>2]|0;
  $$0$i$i$i = $9;
 }
 HEAP32[$$0$i$i$i>>2] = $4;
 $$0$i$i = -1;
 $10 = ($$0$i$i|0)!=(0);
 $11 = HEAP32[$result$i>>2]|0;
 $12 = $10 ? -1 : $11;
 STACKTOP = sp;return ($12|0);
}
function _fd_flush($fpv) {
 $fpv = $fpv|0;
 var $$0$i = 0, $$0$i$i$i = 0, $$0$i$i5 = 0, $$0$i1 = 0, $$0$i3 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret$069 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($fpv)) + 32|0);
 while(1) {
  $1 = HEAP32[$0>>2]|0;
  HEAP32[$vararg_buffer>>2] = $1;
  $2 = (___syscall148(148,($vararg_buffer|0))|0);
  $3 = ($2>>>0)>(4294963200);
  if ($3) {
   $4 = (0 - ($2))|0;
   $5 = HEAP32[6773]|0;
   $6 = ($5|0)==(0|0);
   if ($6) {
    $$0$i$i$i = 27136;
   } else {
    $7 = (_pthread_self()|0);
    $8 = ((($7)) + 64|0);
    $9 = HEAP32[$8>>2]|0;
    $$0$i$i$i = $9;
   }
   HEAP32[$$0$i$i$i>>2] = $4;
   $$0$i$i5 = -1;$12 = $5;
  } else {
   $10 = ($2|0)<(0);
   if (!($10)) {
    $ret$069 = $2;
    label = 18;
    break;
   }
   $$pre = HEAP32[6773]|0;
   $$0$i$i5 = $2;$12 = $$pre;
  }
  $11 = ($12|0)==(0|0);
  if ($11) {
   $$0$i = 27136;
  } else {
   $13 = (_pthread_self()|0);
   $14 = ((($13)) + 64|0);
   $15 = HEAP32[$14>>2]|0;
   $$0$i = $15;
  }
  $16 = HEAP32[$$0$i>>2]|0;
  $17 = ($16|0)==(22);
  if ($17) {
   $ret$069 = 0;
   label = 18;
   break;
  }
  if ($11) {
   $$0$i1 = 27136;
  } else {
   $18 = (_pthread_self()|0);
   $19 = ((($18)) + 64|0);
   $20 = HEAP32[$19>>2]|0;
   $$0$i1 = $20;
  }
  $21 = HEAP32[$$0$i1>>2]|0;
  $22 = ($21|0)==(95);
  if ($22) {
   $ret$069 = 0;
   label = 18;
   break;
  }
  $23 = ($$0$i$i5|0)<(0);
  if (!($23)) {
   $ret$069 = $$0$i$i5;
   label = 18;
   break;
  }
  if ($11) {
   $$0$i3 = 27136;
  } else {
   $24 = (_pthread_self()|0);
   $25 = ((($24)) + 64|0);
   $26 = HEAP32[$25>>2]|0;
   $$0$i3 = $26;
  }
  $27 = HEAP32[$$0$i3>>2]|0;
  $28 = ($27|0)==(4);
  if (!($28)) {
   $ret$069 = $$0$i$i5;
   label = 18;
   break;
  }
 }
 if ((label|0) == 18) {
  STACKTOP = sp;return ($ret$069|0);
 }
 return (0)|0;
}
function _fd_close($fpv) {
 $fpv = $fpv|0;
 var $$$i = 0, $$0$i$i = 0, $$0$i1 = 0, $$0$i24 = 0, $$0$i3 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($fpv)) + 32|0);
 while(1) {
  $1 = HEAP32[$0>>2]|0;
  HEAP32[$vararg_buffer>>2] = $1;
  $2 = (___syscall6(6,($vararg_buffer|0))|0);
  $3 = ($2|0)==(-4);
  $$$i = $3 ? -115 : $2;
  $4 = ($$$i>>>0)>(4294963200);
  if ($4) {
   $5 = (0 - ($$$i))|0;
   $6 = HEAP32[6773]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$0$i$i = 27136;
   } else {
    $8 = (_pthread_self()|0);
    $9 = ((($8)) + 64|0);
    $10 = HEAP32[$9>>2]|0;
    $$0$i$i = $10;
   }
   HEAP32[$$0$i$i>>2] = $5;
   $$0$i3 = -1;$13 = $6;
  } else {
   $11 = ($$$i|0)<(0);
   if (!($11)) {
    $$0$i24 = $$$i;
    label = 11;
    break;
   }
   $$pre = HEAP32[6773]|0;
   $$0$i3 = $$$i;$13 = $$pre;
  }
  $12 = ($13|0)==(0|0);
  if ($12) {
   $$0$i1 = 27136;
  } else {
   $14 = (_pthread_self()|0);
   $15 = ((($14)) + 64|0);
   $16 = HEAP32[$15>>2]|0;
   $$0$i1 = $16;
  }
  $17 = HEAP32[$$0$i1>>2]|0;
  $18 = ($17|0)==(4);
  if (!($18)) {
   $$0$i24 = $$0$i3;
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return ($$0$i24|0);
 }
 return (0)|0;
}
function _hfile_add_scheme_handler($scheme,$handler) {
 $scheme = $scheme|0;
 $handler = $handler|0;
 var $$0$i$i = 0, $$0$i2 = 0, $$014$i$i = 0, $$05$i$i = 0, $$lcssa$i$i = 0, $$lcssa2$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $h$0$i$i = 0, $h$1$i$i = 0, $i$0$i = 0, $i$1$i = 0;
 var $i$1$i$site$2$i = 0, $i$1$i8 = 0, $or$cond = 0, $or$cond$i$i = 0, $or$cond3$i$i = 0, $s$pn$i$i = 0, $site$0$i = 0, $site$0$i$i$0$i = 0, $site$2$i9 = 0, $step$0$i = 0, $x$0$i = 0, $x$3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6761]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 do {
  if ($5) {
   label = 7;
  } else {
   $6 = HEAP32[$0>>2]|0;
   $7 = ((($0)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8 << 1;
   $10 = ($6>>>0)>($9>>>0);
   if ($10) {
    $11 = (($6) + -1)|0;
    $12 = (_kh_resize_scheme_string($0,$11)|0);
    $13 = ($12|0)<(0);
    if (!($13)) {
     label = 7;
     break;
    }
    $14 = HEAP32[$0>>2]|0;
    $$0$i2 = $14;
    break;
   } else {
    $15 = (($6) + 1)|0;
    $16 = (_kh_resize_scheme_string($0,$15)|0);
    $17 = ($16|0)<(0);
    if (!($17)) {
     label = 7;
     break;
    }
    $18 = HEAP32[$0>>2]|0;
    $$0$i2 = $18;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 7) {
   $19 = HEAP32[$0>>2]|0;
   $20 = (($19) + -1)|0;
   $21 = HEAP8[$scheme>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($21<<24>>24)==(0);
   L10: do {
    if ($23) {
     $h$1$i$i = $22;
    } else {
     $h$0$i$i = $22;$s$pn$i$i = $scheme;
     while(1) {
      $$0$i$i = ((($s$pn$i$i)) + 1|0);
      $24 = HEAP8[$$0$i$i>>0]|0;
      $25 = ($24<<24>>24)==(0);
      if ($25) {
       $h$1$i$i = $h$0$i$i;
       break L10;
      }
      $26 = ($h$0$i$i*31)|0;
      $27 = $24 << 24 >> 24;
      $28 = (($26) + ($27))|0;
      $h$0$i$i = $28;$s$pn$i$i = $$0$i$i;
     }
    }
   } while(0);
   $29 = $h$1$i$i & $20;
   $30 = $29 >>> 4;
   $31 = ((($0)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + ($30<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $29 << 1;
   $36 = $35 & 30;
   $37 = 2 << $36;
   $38 = $34 & $37;
   $39 = ($38|0)==(0);
   do {
    if ($39) {
     $40 = ((($0)) + 20|0);
     $i$0$i = $29;$site$0$i = $19;$step$0$i = 0;
     while(1) {
      $41 = $i$0$i >>> 4;
      $42 = (($32) + ($41<<2)|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = $i$0$i << 1;
      $45 = $44 & 30;
      $46 = 2 << $45;
      $47 = $43 & $46;
      $48 = ($47|0)==(0);
      if (!($48)) {
       $i$1$i8 = $i$0$i;$site$2$i9 = $site$0$i;
       break;
      }
      $49 = 1 << $45;
      $50 = $43 & $49;
      $51 = ($50|0)==(0);
      if ($51) {
       $52 = HEAP32[$40>>2]|0;
       $53 = (($52) + ($i$0$i<<2)|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = HEAP8[$54>>0]|0;
       $56 = ($55<<24>>24)!=($21<<24>>24);
       $57 = ($55<<24>>24)==(0);
       $or$cond3$i$i = $57 | $56;
       if ($or$cond3$i$i) {
        $$lcssa$i$i = $55;$$lcssa2$i$i = $21;
       } else {
        $$014$i$i = $54;$$05$i$i = $scheme;
        while(1) {
         $58 = ((($$014$i$i)) + 1|0);
         $59 = ((($$05$i$i)) + 1|0);
         $60 = HEAP8[$58>>0]|0;
         $61 = HEAP8[$59>>0]|0;
         $62 = ($60<<24>>24)!=($61<<24>>24);
         $63 = ($60<<24>>24)==(0);
         $or$cond$i$i = $63 | $62;
         if ($or$cond$i$i) {
          $$lcssa$i$i = $60;$$lcssa2$i$i = $61;
          break;
         } else {
          $$014$i$i = $58;$$05$i$i = $59;
         }
        }
       }
       $64 = ($$lcssa$i$i<<24>>24)==($$lcssa2$i$i<<24>>24);
       if ($64) {
        $i$1$i8 = $i$0$i;$site$2$i9 = $site$0$i;
        break;
       }
      }
      $site$0$i$i$0$i = $51 ? $site$0$i : $i$0$i;
      $65 = (($step$0$i) + 1)|0;
      $66 = (($i$0$i) + ($65))|0;
      $67 = $66 & $20;
      $68 = ($67|0)==($29|0);
      if ($68) {
       $i$1$i = $29;$x$0$i = $site$0$i$i$0$i;
       label = 18;
       break;
      } else {
       $i$0$i = $67;$site$0$i = $site$0$i$i$0$i;$step$0$i = $65;
      }
     }
     if ((label|0) == 18) {
      $69 = ($x$0$i|0)==($19|0);
      if ($69) {
       $i$1$i8 = $i$1$i;$site$2$i9 = $x$0$i;
      } else {
       $x$3$i = $x$0$i;
       break;
      }
     }
     $70 = $i$1$i8 >>> 4;
     $71 = (($32) + ($70<<2)|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = $i$1$i8 << 1;
     $74 = $73 & 30;
     $75 = 2 << $74;
     $76 = $72 & $75;
     $77 = ($76|0)==(0);
     $78 = ($site$2$i9|0)==($19|0);
     $or$cond = $77 | $78;
     $i$1$i$site$2$i = $or$cond ? $i$1$i8 : $site$2$i9;
     $x$3$i = $i$1$i$site$2$i;
    } else {
     $x$3$i = $29;
    }
   } while(0);
   $79 = $x$3$i >>> 4;
   $80 = (($32) + ($79<<2)|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $x$3$i << 1;
   $83 = $82 & 30;
   $84 = 2 << $83;
   $85 = $81 & $84;
   $86 = ($85|0)==(0);
   if (!($86)) {
    $87 = ((($0)) + 20|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = (($88) + ($x$3$i<<2)|0);
    HEAP32[$89>>2] = $scheme;
    $90 = 3 << $83;
    $91 = $90 ^ -1;
    $92 = HEAP32[$31>>2]|0;
    $93 = (($92) + ($79<<2)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = $94 & $91;
    HEAP32[$93>>2] = $95;
    $96 = ((($0)) + 4|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (($97) + 1)|0;
    HEAP32[$96>>2] = $98;
    $99 = HEAP32[$1>>2]|0;
    $100 = (($99) + 1)|0;
    HEAP32[$1>>2] = $100;
    $$0$i2 = $x$3$i;
    break;
   }
   $101 = 1 << $83;
   $102 = $81 & $101;
   $103 = ($102|0)==(0);
   if (!($103)) {
    $104 = ((($0)) + 20|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (($105) + ($x$3$i<<2)|0);
    HEAP32[$106>>2] = $scheme;
    $107 = 3 << $83;
    $108 = $107 ^ -1;
    $109 = HEAP32[$31>>2]|0;
    $110 = (($109) + ($79<<2)|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = $111 & $108;
    HEAP32[$110>>2] = $112;
    $113 = ((($0)) + 4|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (($114) + 1)|0;
    HEAP32[$113>>2] = $115;
    $$0$i2 = $x$3$i;
    break;
   }
   $116 = ((($handler)) + 12|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = HEAP32[6761]|0;
   $119 = ((($118)) + 24|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($120) + ($x$3$i<<2)|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = ((($122)) + 12|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($117|0)>($124|0);
   if ($125) {
    $$0$i2 = $x$3$i;
   } else {
    return;
   }
  }
 } while(0);
 $126 = HEAP32[6761]|0;
 $127 = ((($126)) + 24|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = (($128) + ($$0$i2<<2)|0);
 HEAP32[$129>>2] = $handler;
 return;
}
function _kh_resize_scheme_string($h,$new_n_buckets) {
 $h = $h|0;
 $new_n_buckets = $new_n_buckets|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$pn = 0, $$pre$phi5Z2D = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $h$0$i = 0;
 var $i$0 = 0, $j$1 = 0, $key$0 = 0, $phitmp = 0, $phitmp10 = 0, $s$pn$i = 0, $step$0 = 0, $val$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($new_n_buckets) + -1)|0;
 $1 = $0 >>> 1;
 $2 = $0 | $1;
 $3 = $2 >>> 2;
 $4 = $2 | $3;
 $5 = $4 >>> 4;
 $6 = $4 | $5;
 $7 = $6 >>> 8;
 $8 = $6 | $7;
 $9 = $8 >>> 16;
 $10 = $8 | $9;
 $11 = (($10) + 1)|0;
 $12 = ($11>>>0)<(4);
 $$ = $12 ? 4 : $11;
 $13 = ((($h)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($$>>>0));
 $16 = $15 * 0.77000000000000001;
 $17 = $16 + 0.5;
 $18 = (~~(($17))>>>0);
 $19 = ($14>>>0)<($18>>>0);
 if (!($19)) {
  $$0 = 0;
  return ($$0|0);
 }
 $20 = ($$>>>0)<(16);
 $21 = $$ >>> 4;
 $phitmp10 = $21 << 2;
 $22 = $20 ? 4 : $phitmp10;
 $23 = (_malloc($22)|0);
 $24 = ($23|0)==(0|0);
 if ($24) {
  $$0 = -1;
  return ($$0|0);
 }
 $25 = $$ >>> 4;
 $phitmp = $25 << 2;
 $26 = $20 ? 4 : $phitmp;
 _memset(($23|0),-86,($26|0))|0;
 $27 = HEAP32[$h>>2]|0;
 $28 = ($27>>>0)<($$>>>0);
 $29 = ((($h)) + 20|0);
 do {
  if ($28) {
   $30 = HEAP32[$29>>2]|0;
   $31 = $$ << 2;
   $32 = (_realloc($30,$31)|0);
   $33 = ($32|0)==(0|0);
   if ($33) {
    _free($23);
    $$0 = -1;
    return ($$0|0);
   }
   HEAP32[$29>>2] = $32;
   $34 = ((($h)) + 24|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (_realloc($35,$31)|0);
   $37 = ($36|0)==(0|0);
   if (!($37)) {
    HEAP32[$34>>2] = $36;
    $$pre$phi5Z2D = $34;
    break;
   }
   _free($23);
   $$0 = -1;
   return ($$0|0);
  } else {
   $$pre4 = ((($h)) + 24|0);
   $$pre$phi5Z2D = $$pre4;
  }
 } while(0);
 $38 = ((($h)) + 16|0);
 $39 = (($$) + -1)|0;
 $j$1 = 0;
 while(1) {
  $40 = HEAP32[$h>>2]|0;
  $41 = ($j$1|0)==($40|0);
  if ($41) {
   break;
  }
  $42 = $j$1 >>> 4;
  $43 = HEAP32[$38>>2]|0;
  $44 = (($43) + ($42<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $j$1 << 1;
  $47 = $46 & 30;
  $48 = 3 << $47;
  $49 = $45 & $48;
  $50 = ($49|0)==(0);
  if ($50) {
   $51 = HEAP32[$29>>2]|0;
   $52 = (($51) + ($j$1<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = HEAP32[$$pre$phi5Z2D>>2]|0;
   $55 = (($54) + ($j$1<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = 1 << $47;
   $58 = $45 | $57;
   HEAP32[$44>>2] = $58;
   $key$0 = $53;$val$0 = $56;
   while(1) {
    $59 = HEAP8[$key$0>>0]|0;
    $60 = $59 << 24 >> 24;
    $61 = ($59<<24>>24)==(0);
    L26: do {
     if ($61) {
      $$pn = $60;$step$0 = 0;
     } else {
      $h$0$i = $60;$s$pn$i = $key$0;
      while(1) {
       $$0$i = ((($s$pn$i)) + 1|0);
       $62 = HEAP8[$$0$i>>0]|0;
       $63 = ($62<<24>>24)==(0);
       if ($63) {
        $$pn = $h$0$i;$step$0 = 0;
        break L26;
       }
       $64 = ($h$0$i*31)|0;
       $65 = $62 << 24 >> 24;
       $66 = (($64) + ($65))|0;
       $h$0$i = $66;$s$pn$i = $$0$i;
      }
     }
    } while(0);
    while(1) {
     $i$0 = $$pn & $39;
     $67 = $i$0 >>> 4;
     $68 = (($23) + ($67<<2)|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $i$0 << 1;
     $71 = $70 & 30;
     $72 = 2 << $71;
     $73 = $69 & $72;
     $74 = ($73|0)==(0);
     if (!($74)) {
      break;
     }
     $75 = (($step$0) + 1)|0;
     $76 = (($i$0) + ($75))|0;
     $$pn = $76;$step$0 = $75;
    }
    $77 = $72 ^ -1;
    $78 = $69 & $77;
    HEAP32[$68>>2] = $78;
    $79 = HEAP32[$h>>2]|0;
    $80 = ($i$0>>>0)<($79>>>0);
    if (!($80)) {
     break;
    }
    $81 = HEAP32[$38>>2]|0;
    $82 = (($81) + ($67<<2)|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = 3 << $71;
    $85 = $83 & $84;
    $86 = ($85|0)==(0);
    if (!($86)) {
     break;
    }
    $87 = HEAP32[$29>>2]|0;
    $88 = (($87) + ($i$0<<2)|0);
    $89 = HEAP32[$88>>2]|0;
    HEAP32[$88>>2] = $key$0;
    $90 = HEAP32[$$pre$phi5Z2D>>2]|0;
    $91 = (($90) + ($i$0<<2)|0);
    $92 = HEAP32[$91>>2]|0;
    HEAP32[$91>>2] = $val$0;
    $93 = 1 << $71;
    $94 = HEAP32[$38>>2]|0;
    $95 = (($94) + ($67<<2)|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $96 | $93;
    HEAP32[$95>>2] = $97;
    $key$0 = $89;$val$0 = $92;
   }
   $98 = HEAP32[$29>>2]|0;
   $99 = (($98) + ($i$0<<2)|0);
   HEAP32[$99>>2] = $key$0;
   $100 = HEAP32[$$pre$phi5Z2D>>2]|0;
   $101 = (($100) + ($i$0<<2)|0);
   HEAP32[$101>>2] = $val$0;
  }
  $102 = (($j$1) + 1)|0;
  $j$1 = $102;
 }
 $103 = ($j$1>>>0)>($$>>>0);
 if ($103) {
  $104 = HEAP32[$29>>2]|0;
  $105 = $$ << 2;
  $106 = (_realloc($104,$105)|0);
  HEAP32[$29>>2] = $106;
  $107 = HEAP32[$$pre$phi5Z2D>>2]|0;
  $108 = (_realloc($107,$105)|0);
  HEAP32[$$pre$phi5Z2D>>2] = $108;
 }
 $109 = HEAP32[$38>>2]|0;
 _free($109);
 HEAP32[$38>>2] = $23;
 HEAP32[$h>>2] = $$;
 $110 = HEAP32[$13>>2]|0;
 $111 = ((($h)) + 8|0);
 HEAP32[$111>>2] = $110;
 $112 = ((($h)) + 12|0);
 HEAP32[$112>>2] = $18;
 $$0 = 0;
 return ($$0|0);
}
function _hopen($fname,$mode) {
 $fname = $fname|0;
 $mode = $mode|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i6 = 0, $$0$i$i1 = 0, $$0$i$i1$i = 0, $$0$i12 = 0, $$014$i = 0, $$014$i$i$i = 0, $$02$lcssa$i$i = 0, $$02$lcssa$i$i$i = 0, $$0211$i$i = 0, $$0211$i$i$i = 0, $$05$i = 0, $$05$i$i$i = 0, $$1$i$i = 0, $$1$i$i$i = 0, $$demorgan = 0, $$lcssa$i$i$i = 0, $$lcssa2$i$i$i = 0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $h$0$i$i$i = 0, $h$1$i$i$i = 0, $i$0$i = 0, $i$0$i$i = 0, $i$0$i$i$ = 0, $isdigit$i$i$i = 0;
 var $isdigittmp$i$i$i = 0, $not$ = 0, $not$$i = 0, $not$$i7 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i$i = 0, $or$cond3$i$i$i = 0, $s$pn$i$i$i = 0, $scheme$i = 0, $step$0$i$i = 0, $w$0$lcssa$i$i = 0, $w$0$lcssa$i$i$i = 0, $w$08$i$i = 0, $w$08$i$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $scheme$i = sp;
 $i$0$i = 0;
 while(1) {
  $0 = ($i$0$i>>>0)<(12);
  if (!($0)) {
   label = 28;
   break;
  }
  $1 = (($fname) + ($i$0$i)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = $3 | 32;
  $5 = (($4) + -97)|0;
  $6 = ($5>>>0)<(26);
  $isdigittmp$i$i$i = (($3) + -48)|0;
  $isdigit$i$i$i = ($isdigittmp$i$i$i>>>0)<(10);
  $$demorgan = $isdigit$i$i$i | $6;
  $7 = ($2<<24>>24)==(43);
  $or$cond = $$demorgan | $7;
  $$off = (($2) + -45)<<24>>24;
  $8 = ($$off&255)<(2);
  $9 = $8 | $or$cond;
  if (!($9)) {
   label = 5;
   break;
  }
  $10 = (($3) + -65)|0;
  $11 = ($10>>>0)<(26);
  $$0$i$i1$i = $11 ? $4 : $3;
  $12 = $$0$i$i1$i&255;
  $13 = (($scheme$i) + ($i$0$i)|0);
  HEAP8[$13>>0] = $12;
  $14 = (($i$0$i) + 1)|0;
  $i$0$i = $14;
 }
 do {
  if ((label|0) == 5) {
   $15 = ($2<<24>>24)!=(58);
   $16 = (($i$0$i) + -1)|0;
   $17 = ($16>>>0)>(10);
   $18 = $17 | $15;
   if ($18) {
    label = 28;
   } else {
    $19 = (($scheme$i) + ($i$0$i)|0);
    HEAP8[$19>>0] = 0;
    (_pthread_mutex_lock((27048|0))|0);
    $20 = HEAP32[6761]|0;
    $21 = ($20|0)==(0|0);
    do {
     if ($21) {
      $22 = (_malloc(28)|0);
      $23 = ($22|0)==(0|0);
      if ($23) {
       HEAP32[6761] = 0;
       _abort();
       // unreachable;
      }
      $24 = ((($22)) + -4|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = $25 & 3;
      $27 = ($26|0)==(0);
      if (!($27)) {
       dest=$22; stop=dest+28|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      }
      HEAP32[6761] = $22;
      _hfile_add_scheme_handler(15371,160);
      _hfile_add_scheme_handler(15391,196);
      $28 = (_malloc(20)|0);
      $29 = ($28|0)==(0|0);
      if ($29) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$28>>2] = 1;
       $30 = ((($28)) + 4|0);
       HEAP32[$30>>2] = 0;
       $31 = ((($28)) + 8|0);
       $32 = ((($28)) + 12|0);
       HEAP32[$32>>2] = 0;
       HEAP32[$31>>2] = 15425;
       _hfile_add_scheme_handler(15434,248);
       _hfile_add_scheme_handler(15439,248);
       $33 = HEAP32[6769]|0;
       $34 = ((($28)) + 16|0);
       HEAP32[$34>>2] = $33;
       HEAP32[6769] = $28;
       (_atexit((59|0))|0);
       break;
      }
     }
    } while(0);
    (_pthread_mutex_unlock((27048|0))|0);
    $35 = HEAP32[6761]|0;
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(0);
    L20: do {
     if ($37) {
      $$0$i$i = 0;
      label = 26;
     } else {
      $38 = (($36) + -1)|0;
      $39 = HEAP8[$scheme$i>>0]|0;
      $40 = $39 << 24 >> 24;
      $41 = ($39<<24>>24)==(0);
      L22: do {
       if ($41) {
        $h$1$i$i$i = $40;
       } else {
        $h$0$i$i$i = $40;$s$pn$i$i$i = $scheme$i;
        while(1) {
         $$0$i$i$i = ((($s$pn$i$i$i)) + 1|0);
         $42 = HEAP8[$$0$i$i$i>>0]|0;
         $43 = ($42<<24>>24)==(0);
         if ($43) {
          $h$1$i$i$i = $h$0$i$i$i;
          break L22;
         }
         $44 = ($h$0$i$i$i*31)|0;
         $45 = $42 << 24 >> 24;
         $46 = (($44) + ($45))|0;
         $h$0$i$i$i = $46;$s$pn$i$i$i = $$0$i$i$i;
        }
       }
      } while(0);
      $47 = $h$1$i$i$i & $38;
      $48 = ((($35)) + 16|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = ((($35)) + 20|0);
      $i$0$i$i = $47;$step$0$i$i = 0;
      while(1) {
       $51 = $i$0$i$i >>> 4;
       $52 = (($49) + ($51<<2)|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = $i$0$i$i << 1;
       $55 = $54 & 30;
       $56 = 2 << $55;
       $57 = $53 & $56;
       $58 = ($57|0)==(0);
       if (!($58)) {
        break;
       }
       $59 = 1 << $55;
       $60 = $53 & $59;
       $61 = ($60|0)==(0);
       if ($61) {
        $62 = HEAP32[$50>>2]|0;
        $63 = (($62) + ($i$0$i$i<<2)|0);
        $64 = HEAP32[$63>>2]|0;
        $65 = HEAP8[$64>>0]|0;
        $66 = ($65<<24>>24)!=($39<<24>>24);
        $67 = ($65<<24>>24)==(0);
        $or$cond3$i$i$i = $67 | $66;
        if ($or$cond3$i$i$i) {
         $$lcssa$i$i$i = $65;$$lcssa2$i$i$i = $39;
        } else {
         $$014$i$i$i = $64;$$05$i$i$i = $scheme$i;
         while(1) {
          $68 = ((($$014$i$i$i)) + 1|0);
          $69 = ((($$05$i$i$i)) + 1|0);
          $70 = HEAP8[$68>>0]|0;
          $71 = HEAP8[$69>>0]|0;
          $72 = ($70<<24>>24)!=($71<<24>>24);
          $73 = ($70<<24>>24)==(0);
          $or$cond$i$i$i = $73 | $72;
          if ($or$cond$i$i$i) {
           $$lcssa$i$i$i = $70;$$lcssa2$i$i$i = $71;
           break;
          } else {
           $$014$i$i$i = $68;$$05$i$i$i = $69;
          }
         }
        }
        $74 = ($$lcssa$i$i$i<<24>>24)==($$lcssa2$i$i$i<<24>>24);
        if ($74) {
         break;
        }
       }
       $75 = (($step$0$i$i) + 1)|0;
       $76 = (($i$0$i$i) + ($75))|0;
       $77 = $76 & $38;
       $78 = ($77|0)==($47|0);
       if ($78) {
        label = 27;
        break L20;
       } else {
        $i$0$i$i = $77;$step$0$i$i = $75;
       }
      }
      $79 = 3 << $55;
      $80 = $53 & $79;
      $81 = ($80|0)==(0);
      $i$0$i$i$ = $81 ? $i$0$i$i : $36;
      $$0$i$i = $i$0$i$i$;
      label = 26;
     }
    } while(0);
    if ((label|0) == 26) {
     $82 = ($$0$i$i|0)==($36|0);
     if ($82) {
      label = 27;
     } else {
      $83 = ((($35)) + 24|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = (($84) + ($$0$i$i<<2)|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = ($86|0)==(0|0);
      if ($87) {
       break;
      } else {
       $$0$i12 = $86;
      }
     }
    }
    if ((label|0) == 27) {
     $$0$i12 = 212;
    }
    $88 = HEAP32[$$0$i12>>2]|0;
    $89 = (FUNCTION_TABLE_iii[$88 & 127]($fname,$mode)|0);
    $$0 = $89;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 if ((label|0) == 28) {
 }
 $90 = HEAP8[$fname>>0]|0;
 $91 = ($90<<24>>24)==(45);
 if ($91) {
  $$014$i = $fname;$$05$i = 15423;
  while(1) {
   $92 = ((($$014$i)) + 1|0);
   $93 = ((($$05$i)) + 1|0);
   $94 = HEAP8[$92>>0]|0;
   $95 = HEAP8[$93>>0]|0;
   $96 = ($94<<24>>24)!=($95<<24>>24);
   $97 = ($94<<24>>24)==(0);
   $or$cond$i = $97 | $96;
   if ($or$cond$i) {
    break;
   } else {
    $$014$i = $92;$$05$i = $93;
   }
  }
  $98 = ($94<<24>>24)==($95<<24>>24);
  if ($98) {
   $99 = $mode;
   $100 = $99 & 3;
   $101 = ($100|0)==(0);
   L53: do {
    if ($101) {
     $$02$lcssa$i$i = $mode;
     label = 37;
    } else {
     $$0211$i$i = $mode;
     while(1) {
      $102 = HEAP8[$$0211$i$i>>0]|0;
      switch ($102<<24>>24) {
      case 0: case 114:  {
       $$0$i$i1 = $$0211$i$i;$129 = $102;
       break L53;
       break;
      }
      default: {
      }
      }
      $103 = ((($$0211$i$i)) + 1|0);
      $104 = $103;
      $105 = $104 & 3;
      $106 = ($105|0)==(0);
      if ($106) {
       $$02$lcssa$i$i = $103;
       label = 37;
       break L53;
      } else {
       $$0211$i$i = $103;
      }
     }
    }
   } while(0);
   L57: do {
    if ((label|0) == 37) {
     $107 = HEAP32[$$02$lcssa$i$i>>2]|0;
     $108 = (($107) + -16843009)|0;
     $109 = $107 & -2139062144;
     $110 = $109 ^ -2139062144;
     $111 = $110 & $108;
     $112 = ($111|0)==(0);
     L59: do {
      if ($112) {
       $114 = $107;$w$08$i$i = $$02$lcssa$i$i;
       while(1) {
        $113 = $114 ^ 1920103026;
        $115 = (($113) + -16843009)|0;
        $116 = $114 & -2139062144;
        $117 = $116 ^ -2139062144;
        $118 = $117 & $115;
        $119 = ($118|0)==(0);
        if (!($119)) {
         $w$0$lcssa$i$i = $w$08$i$i;
         break L59;
        }
        $120 = ((($w$08$i$i)) + 4|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = (($121) + -16843009)|0;
        $123 = $121 & -2139062144;
        $124 = $123 ^ -2139062144;
        $125 = $124 & $122;
        $126 = ($125|0)==(0);
        if ($126) {
         $114 = $121;$w$08$i$i = $120;
        } else {
         $w$0$lcssa$i$i = $120;
         break;
        }
       }
      } else {
       $w$0$lcssa$i$i = $$02$lcssa$i$i;
      }
     } while(0);
     $$1$i$i = $w$0$lcssa$i$i;
     while(1) {
      $127 = HEAP8[$$1$i$i>>0]|0;
      $128 = ((($$1$i$i)) + 1|0);
      switch ($127<<24>>24) {
      case 0: case 114:  {
       $$0$i$i1 = $$1$i$i;$129 = $127;
       break L57;
       break;
      }
      default: {
       $$1$i$i = $128;
      }
      }
     }
    }
   } while(0);
   $not$$i7 = ($$0$i$i1|0)==(0|0);
   $not$ = ($129<<24>>24)!=(114);
   $not$$i = $not$$i7 | $not$;
   $130 = $not$$i&1;
   $131 = (_blksize($130)|0);
   $132 = (_hfile_init(40,$mode,$131)|0);
   $133 = ($132|0)==(0|0);
   if ($133) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $134 = ((($132)) + 32|0);
   HEAP32[$134>>2] = $130;
   L70: do {
    if ($101) {
     $$02$lcssa$i$i$i = $mode;
     label = 46;
    } else {
     $$0211$i$i$i = $mode;
     while(1) {
      $135 = HEAP8[$$0211$i$i$i>>0]|0;
      switch ($135<<24>>24) {
      case 0: case 115:  {
       $$0$i$i$i6 = $$0211$i$i$i;$163 = $135;
       break L70;
       break;
      }
      default: {
      }
      }
      $136 = ((($$0211$i$i$i)) + 1|0);
      $137 = $136;
      $138 = $137 & 3;
      $139 = ($138|0)==(0);
      if ($139) {
       $$02$lcssa$i$i$i = $136;
       label = 46;
       break L70;
      } else {
       $$0211$i$i$i = $136;
      }
     }
    }
   } while(0);
   L74: do {
    if ((label|0) == 46) {
     $140 = HEAP32[$$02$lcssa$i$i$i>>2]|0;
     $141 = (($140) + -16843009)|0;
     $142 = $140 & -2139062144;
     $143 = $142 ^ -2139062144;
     $144 = $143 & $141;
     $145 = ($144|0)==(0);
     L76: do {
      if ($145) {
       $147 = $140;$w$08$i$i$i = $$02$lcssa$i$i$i;
       while(1) {
        $146 = $147 ^ 1936946035;
        $148 = (($146) + -16843009)|0;
        $149 = $147 & -2139062144;
        $150 = $149 ^ -2139062144;
        $151 = $150 & $148;
        $152 = ($151|0)==(0);
        if (!($152)) {
         $w$0$lcssa$i$i$i = $w$08$i$i$i;
         break L76;
        }
        $153 = ((($w$08$i$i$i)) + 4|0);
        $154 = HEAP32[$153>>2]|0;
        $155 = (($154) + -16843009)|0;
        $156 = $154 & -2139062144;
        $157 = $156 ^ -2139062144;
        $158 = $157 & $155;
        $159 = ($158|0)==(0);
        if ($159) {
         $147 = $154;$w$08$i$i$i = $153;
        } else {
         $w$0$lcssa$i$i$i = $153;
         break;
        }
       }
      } else {
       $w$0$lcssa$i$i$i = $$02$lcssa$i$i$i;
      }
     } while(0);
     $$1$i$i$i = $w$0$lcssa$i$i$i;
     while(1) {
      $160 = HEAP8[$$1$i$i$i>>0]|0;
      $161 = ((($$1$i$i$i)) + 1|0);
      switch ($160<<24>>24) {
      case 0: case 115:  {
       $$0$i$i$i6 = $$1$i$i$i;$163 = $160;
       break L74;
       break;
      }
      default: {
       $$1$i$i$i = $161;
      }
      }
     }
    }
   } while(0);
   $162 = ($163<<24>>24)==(115);
   $164 = ($$0$i$i$i6|0)!=(0|0);
   $165 = $162 & $164;
   $166 = ((($132)) + 36|0);
   $167 = $165&1;
   $168 = HEAP8[$166>>0]|0;
   $169 = $168 & -2;
   $170 = $169 | $167;
   HEAP8[$166>>0] = $170;
   $171 = ((($132)) + 16|0);
   HEAP32[$171>>2] = 140;
   $$0 = $132;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $172 = (_hopen_fd($fname,$mode)|0);
 $$0 = $172;
 STACKTOP = sp;return ($$0|0);
}
function _hopen_mem($data,$mode) {
 $data = $data|0;
 $mode = $mode|0;
 var $$0 = 0, $$0$i = 0, $$0$i10 = 0, $$0$i11 = 0, $$01$lcssa$i = 0, $$014$i = 0, $$02$lcssa$i = 0, $$0211$i = 0, $$08$i = 0, $$08$in$i = 0, $$1$i = 0, $$1$lcssa$i = 0, $$data = 0, $$pn$i = 0, $$pn15$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $l$06$i = 0, $not$ = 0, $or$cond$i = 0;
 var $or$cond4$i = 0, $r$0$lcssa$i = 0, $r$07$i = 0, $w$0$i = 0, $w$0$lcssa$i = 0, $w$08$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$data>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $13 = 0;$r$0$lcssa$i = 15376;
  } else {
   $$08$in$i = 5;$6 = $0;$l$06$i = $data;$r$07$i = 15376;
   while(1) {
    $$08$i = (($$08$in$i) + -1)|0;
    $2 = HEAP8[$r$07$i>>0]|0;
    $3 = ($2<<24>>24)!=(0);
    $4 = ($$08$i|0)!=(0);
    $or$cond$i = $4 & $3;
    $5 = ($6<<24>>24)==($2<<24>>24);
    $or$cond4$i = $5 & $or$cond$i;
    if (!($or$cond4$i)) {
     $13 = $6;$r$0$lcssa$i = $r$07$i;
     break L1;
    }
    $7 = ((($l$06$i)) + 1|0);
    $8 = ((($r$07$i)) + 1|0);
    $9 = HEAP8[$7>>0]|0;
    $10 = ($9<<24>>24)==(0);
    if ($10) {
     $13 = 0;$r$0$lcssa$i = $8;
     break;
    } else {
     $$08$in$i = $$08$i;$6 = $9;$l$06$i = $7;$r$07$i = $8;
    }
   }
  }
 } while(0);
 $11 = HEAP8[$r$0$lcssa$i>>0]|0;
 $12 = ($13<<24>>24)==($11<<24>>24);
 $14 = ((($data)) + 5|0);
 $$data = $12 ? $14 : $data;
 $15 = $mode;
 $16 = $15 & 3;
 $17 = ($16|0)==(0);
 L6: do {
  if ($17) {
   $$02$lcssa$i = $mode;
   label = 7;
  } else {
   $$0211$i = $mode;
   while(1) {
    $18 = HEAP8[$$0211$i>>0]|0;
    switch ($18<<24>>24) {
    case 0: case 114:  {
     $$0$i10 = $$0211$i;$46 = $18;
     break L6;
     break;
    }
    default: {
    }
    }
    $19 = ((($$0211$i)) + 1|0);
    $20 = $19;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $$02$lcssa$i = $19;
     label = 7;
     break L6;
    } else {
     $$0211$i = $19;
    }
   }
  }
 } while(0);
 L10: do {
  if ((label|0) == 7) {
   $23 = HEAP32[$$02$lcssa$i>>2]|0;
   $24 = (($23) + -16843009)|0;
   $25 = $23 & -2139062144;
   $26 = $25 ^ -2139062144;
   $27 = $26 & $24;
   $28 = ($27|0)==(0);
   L12: do {
    if ($28) {
     $30 = $23;$w$08$i = $$02$lcssa$i;
     while(1) {
      $29 = $30 ^ 1920103026;
      $31 = (($29) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if (!($35)) {
       $w$0$lcssa$i = $w$08$i;
       break L12;
      }
      $36 = ((($w$08$i)) + 4|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = (($37) + -16843009)|0;
      $39 = $37 & -2139062144;
      $40 = $39 ^ -2139062144;
      $41 = $40 & $38;
      $42 = ($41|0)==(0);
      if ($42) {
       $30 = $37;$w$08$i = $36;
      } else {
       $w$0$lcssa$i = $36;
       break;
      }
     }
    } else {
     $w$0$lcssa$i = $$02$lcssa$i;
    }
   } while(0);
   $$1$i = $w$0$lcssa$i;
   while(1) {
    $43 = HEAP8[$$1$i>>0]|0;
    $44 = ((($$1$i)) + 1|0);
    switch ($43<<24>>24) {
    case 0: case 114:  {
     $$0$i10 = $$1$i;$46 = $43;
     break L10;
     break;
    }
    default: {
     $$1$i = $44;
    }
    }
   }
  }
 } while(0);
 $45 = ($$0$i10|0)==(0|0);
 $not$ = ($46<<24>>24)!=(114);
 $47 = $45 | $not$;
 if ($47) {
  $48 = HEAP32[6773]|0;
  $49 = ($48|0)==(0|0);
  if ($49) {
   $$0$i11 = 27136;
  } else {
   $50 = (_pthread_self()|0);
   $51 = ((($50)) + 64|0);
   $52 = HEAP32[$51>>2]|0;
   $$0$i11 = $52;
  }
  HEAP32[$$0$i11>>2] = 22;
  $$0 = 0;
  return ($$0|0);
 }
 $53 = (_hfile_init(44,$mode,0)|0);
 $54 = ($53|0)==(0|0);
 if ($54) {
  $$0 = 0;
  return ($$0|0);
 }
 $55 = ((($53)) + 32|0);
 HEAP32[$55>>2] = $$data;
 $56 = $$data;
 $57 = $56 & 3;
 $58 = ($57|0)==(0);
 L30: do {
  if ($58) {
   $$01$lcssa$i = $$data;
   label = 20;
  } else {
   $$014$i = $$data;$80 = $56;
   while(1) {
    $59 = HEAP8[$$014$i>>0]|0;
    $60 = ($59<<24>>24)==(0);
    if ($60) {
     $$pn$i = $80;
     break L30;
    }
    $61 = ((($$014$i)) + 1|0);
    $62 = $61;
    $63 = $62 & 3;
    $64 = ($63|0)==(0);
    if ($64) {
     $$01$lcssa$i = $61;
     label = 20;
     break;
    } else {
     $$014$i = $61;$80 = $62;
    }
   }
  }
 } while(0);
 if ((label|0) == 20) {
  $w$0$i = $$01$lcssa$i;
  while(1) {
   $65 = HEAP32[$w$0$i>>2]|0;
   $66 = (($65) + -16843009)|0;
   $67 = $65 & -2139062144;
   $68 = $67 ^ -2139062144;
   $69 = $68 & $66;
   $70 = ($69|0)==(0);
   $71 = ((($w$0$i)) + 4|0);
   if ($70) {
    $w$0$i = $71;
   } else {
    break;
   }
  }
  $72 = $65&255;
  $73 = ($72<<24>>24)==(0);
  if ($73) {
   $$1$lcssa$i = $w$0$i;
  } else {
   $$pn15$i = $w$0$i;
   while(1) {
    $74 = ((($$pn15$i)) + 1|0);
    $$pre$i = HEAP8[$74>>0]|0;
    $75 = ($$pre$i<<24>>24)==(0);
    if ($75) {
     $$1$lcssa$i = $74;
     break;
    } else {
     $$pn15$i = $74;
    }
   }
  }
  $76 = $$1$lcssa$i;
  $$pn$i = $76;
 }
 $$0$i = (($$pn$i) - ($56))|0;
 $77 = ((($53)) + 36|0);
 HEAP32[$77>>2] = $$0$i;
 $78 = ((($53)) + 40|0);
 HEAP32[$78>>2] = 0;
 $79 = ((($53)) + 16|0);
 HEAP32[$79>>2] = 176;
 $$0 = $53;
 return ($$0|0);
}
function _mem_read($fpv,$buffer,$nbytes) {
 $fpv = $fpv|0;
 $buffer = $buffer|0;
 $nbytes = $nbytes|0;
 var $$nbytes = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($fpv)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($fpv)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = ($4>>>0)<($nbytes>>>0);
 $$nbytes = $5 ? $4 : $nbytes;
 $6 = ((($fpv)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($3)|0);
 _memcpy(($buffer|0),($8|0),($$nbytes|0))|0;
 $9 = HEAP32[$2>>2]|0;
 $10 = (($9) + ($$nbytes))|0;
 HEAP32[$2>>2] = $10;
 return ($$nbytes|0);
}
function _mem_seek($fpv,$offset,$whence) {
 $fpv = $fpv|0;
 $offset = $offset|0;
 $whence = $whence|0;
 var $$0 = 0, $$0$i = 0, $$0$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset$ = 0, $origin$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($offset|0)>(-1);
 $1 = (0 - ($offset))|0;
 $offset$ = $0 ? $offset : $1;
 switch ($whence|0) {
 case 0:  {
  $origin$0 = 0;
  break;
 }
 case 1:  {
  $2 = ((($fpv)) + 40|0);
  $3 = HEAP32[$2>>2]|0;
  $origin$0 = $3;
  break;
 }
 case 2:  {
  $4 = ((($fpv)) + 36|0);
  $5 = HEAP32[$4>>2]|0;
  $origin$0 = $5;
  break;
 }
 default: {
  $6 = HEAP32[6773]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $$0$i = 27136;
  } else {
   $8 = (_pthread_self()|0);
   $9 = ((($8)) + 64|0);
   $10 = HEAP32[$9>>2]|0;
   $$0$i = $10;
  }
  HEAP32[$$0$i>>2] = 22;
  $$0 = -1;
  return ($$0|0);
 }
 }
 $11 = ($offset|0)<(0);
 if ($11) {
  $12 = ($offset$>>>0)>($origin$0>>>0);
  if (!($12)) {
   label = 13;
  }
 } else {
  $13 = ((($fpv)) + 36|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) - ($origin$0))|0;
  $16 = ($offset$>>>0)>($15>>>0);
  if (!($16)) {
   label = 13;
  }
 }
 if ((label|0) == 13) {
  $22 = (($origin$0) + ($offset))|0;
  $23 = ((($fpv)) + 40|0);
  HEAP32[$23>>2] = $22;
  $$0 = $22;
  return ($$0|0);
 }
 $17 = HEAP32[6773]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $$0$i1 = 27136;
 } else {
  $19 = (_pthread_self()|0);
  $20 = ((($19)) + 64|0);
  $21 = HEAP32[$20>>2]|0;
  $$0$i1 = $21;
 }
 HEAP32[$$0$i1>>2] = 22;
 $$0 = -1;
 return ($$0|0);
}
function _mem_close($fpv) {
 $fpv = $fpv|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _hfile_always_local($fname) {
 $fname = $fname|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _hopen_fd_fileuri($url,$mode) {
 $url = $url|0;
 $mode = $mode|0;
 var $$0 = 0, $$0$i = 0, $$01 = 0, $$08$i = 0, $$08$i6 = 0, $$08$in$i = 0, $$08$in$i3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $l$06$i = 0, $l$06$i5 = 0, $or$cond$i = 0, $or$cond$i7 = 0, $or$cond4$i = 0, $or$cond4$i8 = 0, $r$0$lcssa$i = 0, $r$0$lcssa$i13 = 0, $r$07$i = 0, $r$07$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$url>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $13 = 0;$r$0$lcssa$i = 15396;
  } else {
   $$08$in$i = 17;$6 = $0;$l$06$i = $url;$r$07$i = 15396;
   while(1) {
    $$08$i = (($$08$in$i) + -1)|0;
    $2 = HEAP8[$r$07$i>>0]|0;
    $3 = ($2<<24>>24)!=(0);
    $4 = ($$08$i|0)!=(0);
    $or$cond$i = $4 & $3;
    $5 = ($6<<24>>24)==($2<<24>>24);
    $or$cond4$i = $5 & $or$cond$i;
    if (!($or$cond4$i)) {
     $13 = $6;$r$0$lcssa$i = $r$07$i;
     break L1;
    }
    $7 = ((($l$06$i)) + 1|0);
    $8 = ((($r$07$i)) + 1|0);
    $9 = HEAP8[$7>>0]|0;
    $10 = ($9<<24>>24)==(0);
    if ($10) {
     $13 = 0;$r$0$lcssa$i = $8;
     break;
    } else {
     $$08$in$i = $$08$i;$6 = $9;$l$06$i = $7;$r$07$i = $8;
    }
   }
  }
 } while(0);
 $11 = HEAP8[$r$0$lcssa$i>>0]|0;
 $12 = ($13<<24>>24)==($11<<24>>24);
 do {
  if ($12) {
   $14 = ((($url)) + 16|0);
   $$01 = $14;
  } else {
   L9: do {
    if ($1) {
     $26 = 0;$r$0$lcssa$i13 = 15414;
    } else {
     $$08$in$i3 = 8;$19 = $0;$l$06$i5 = $url;$r$07$i4 = 15414;
     while(1) {
      $$08$i6 = (($$08$in$i3) + -1)|0;
      $15 = HEAP8[$r$07$i4>>0]|0;
      $16 = ($15<<24>>24)!=(0);
      $17 = ($$08$i6|0)!=(0);
      $or$cond$i7 = $17 & $16;
      $18 = ($19<<24>>24)==($15<<24>>24);
      $or$cond4$i8 = $18 & $or$cond$i7;
      if (!($or$cond4$i8)) {
       $26 = $19;$r$0$lcssa$i13 = $r$07$i4;
       break L9;
      }
      $20 = ((($l$06$i5)) + 1|0);
      $21 = ((($r$07$i4)) + 1|0);
      $22 = HEAP8[$20>>0]|0;
      $23 = ($22<<24>>24)==(0);
      if ($23) {
       $26 = 0;$r$0$lcssa$i13 = $21;
       break;
      } else {
       $$08$in$i3 = $$08$i6;$19 = $22;$l$06$i5 = $20;$r$07$i4 = $21;
      }
     }
    }
   } while(0);
   $24 = HEAP8[$r$0$lcssa$i13>>0]|0;
   $25 = ($26<<24>>24)==($24<<24>>24);
   if ($25) {
    $32 = ((($url)) + 7|0);
    $$01 = $32;
    break;
   }
   $27 = HEAP32[6773]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    $$0$i = 27136;
   } else {
    $29 = (_pthread_self()|0);
    $30 = ((($29)) + 64|0);
    $31 = HEAP32[$30>>2]|0;
    $$0$i = $31;
   }
   HEAP32[$$0$i>>2] = 93;
   $$0 = 0;
   return ($$0|0);
  }
 } while(0);
 $33 = (_hopen_fd($$01,$mode)|0);
 $$0 = $33;
 return ($$0|0);
}
function _hopen_fd($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i1 = 0, $$0$i1$i = 0, $$0$i4 = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0$i = 0;
 var $flags$1$i = 0, $rdwr$0$i = 0, $rdwr$1$i = 0, $s$0$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $flags$0$i = 0;$rdwr$0$i = 0;$s$0$i = $mode;
 while(1) {
  $0 = HEAP8[$s$0$i>>0]|0;
  $1 = ($0<<24>>24)==(0);
  if ($1) {
   break;
  }
  $2 = $0 << 24 >> 24;
  switch ($2|0) {
  case 114:  {
   $flags$1$i = $flags$0$i;$rdwr$1$i = 0;
   break;
  }
  case 119:  {
   $3 = $flags$0$i | 576;
   $flags$1$i = $3;$rdwr$1$i = 1;
   break;
  }
  case 97:  {
   $4 = $flags$0$i | 1088;
   $flags$1$i = $4;$rdwr$1$i = 1;
   break;
  }
  case 43:  {
   $flags$1$i = $flags$0$i;$rdwr$1$i = 2;
   break;
  }
  case 101:  {
   $5 = $flags$0$i | 524288;
   $flags$1$i = $5;$rdwr$1$i = $rdwr$0$i;
   break;
  }
  case 120:  {
   $6 = $flags$0$i | 128;
   $flags$1$i = $6;$rdwr$1$i = $rdwr$0$i;
   break;
  }
  default: {
   $flags$1$i = $flags$0$i;$rdwr$1$i = $rdwr$0$i;
  }
  }
  $7 = ((($s$0$i)) + 1|0);
  $flags$0$i = $flags$1$i;$rdwr$0$i = $rdwr$1$i;$s$0$i = $7;
 }
 $8 = $rdwr$0$i | $flags$0$i;
 HEAP32[$vararg_buffer>>2] = 438;
 $9 = (_open($filename,$8,$vararg_buffer)|0);
 $10 = ($9|0)<(0);
 if (!($10)) {
  $11 = (_blksize($9)|0);
  $12 = (_hfile_init(40,$mode,$11)|0);
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   $14 = ((($12)) + 32|0);
   HEAP32[$14>>2] = $9;
   $15 = ((($12)) + 36|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16 & -2;
   HEAP8[$15>>0] = $17;
   $18 = ((($12)) + 16|0);
   HEAP32[$18>>2] = 140;
   $$0 = $12;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[6773]|0;
  $20 = ($19|0)==(0|0);
  if ($20) {
   $$0$i = 27136;
  } else {
   $21 = (_pthread_self()|0);
   $22 = ((($21)) + 64|0);
   $23 = HEAP32[$22>>2]|0;
   $$0$i = $23;
  }
  $24 = HEAP32[$$0$i>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $9;
  $25 = (___syscall6(6,($vararg_buffer1|0))|0);
  $26 = ($25|0)==(-4);
  $$$i = $26 ? -115 : $25;
  $27 = ($$$i>>>0)>(4294963200);
  if ($27) {
   $28 = (0 - ($$$i))|0;
   $29 = HEAP32[6773]|0;
   $30 = ($29|0)==(0|0);
   if ($30) {
    $$0$i$i1 = 27136;
   } else {
    $31 = (_pthread_self()|0);
    $32 = ((($31)) + 64|0);
    $33 = HEAP32[$32>>2]|0;
    $$0$i$i1 = $33;
   }
   HEAP32[$$0$i$i1>>2] = $28;
   $35 = $29;
  } else {
   $$pre = HEAP32[6773]|0;
   $35 = $$pre;
  }
  $34 = ($35|0)==(0|0);
  if ($34) {
   $$0$i4 = 27136;
  } else {
   $36 = (_pthread_self()|0);
   $37 = ((($36)) + 64|0);
   $38 = HEAP32[$37>>2]|0;
   $$0$i4 = $38;
  }
  HEAP32[$$0$i4>>2] = $24;
 }
 $39 = HEAP32[6773]|0;
 $40 = ($39|0)==(0|0);
 if ($40) {
  $41 = HEAP32[6784]|0;
  $$0$i1$i = 27136;$50 = $41;
 } else {
  $42 = (_pthread_self()|0);
  $43 = ((($42)) + 64|0);
  $44 = HEAP32[$43>>2]|0;
  $$pr = HEAP32[6773]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = ($$pr|0)==(0|0);
  if ($46) {
   $$0$i1$i = 27136;$50 = $45;
  } else {
   $47 = (_pthread_self()|0);
   $48 = ((($47)) + 64|0);
   $49 = HEAP32[$48>>2]|0;
   $$0$i1$i = $49;$50 = $45;
  }
 }
 HEAP32[$$0$i1$i>>2] = $50;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _hfile_exit() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((27048|0))|0);
 $0 = HEAP32[6761]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = ((($0)) + 20|0);
  $3 = HEAP32[$2>>2]|0;
  _free($3);
  $4 = ((($0)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  _free($5);
  $6 = ((($0)) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  _free($7);
  _free($0);
 }
 while(1) {
  $8 = HEAP32[6769]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   break;
  }
  $10 = ((($8)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   FUNCTION_TABLE_v[$11 & 63]();
  }
  $13 = ((($8)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[6769] = $14;
  _free($8);
 }
 (_pthread_mutex_unlock((27048|0))|0);
 (_pthread_mutex_destroy((27048|0))|0);
 return;
}
function _hopen_unknown_scheme($fname,$mode) {
 $fname = $fname|0;
 $mode = $mode|0;
 var $$0$i = 0, $$0$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_hopen_fd($fname,$mode)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  return ($0|0);
 }
 $2 = HEAP32[6773]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0$i = 27136;
 } else {
  $4 = (_pthread_self()|0);
  $5 = ((($4)) + 64|0);
  $6 = HEAP32[$5>>2]|0;
  $$0$i = $6;
 }
 $7 = HEAP32[$$0$i>>2]|0;
 $8 = ($7|0)==(2);
 if (!($8)) {
  return ($0|0);
 }
 if ($3) {
  $$0$i1 = 27136;
 } else {
  $9 = (_pthread_self()|0);
  $10 = ((($9)) + 64|0);
  $11 = HEAP32[$10>>2]|0;
  $$0$i1 = $11;
 }
 HEAP32[$$0$i1>>2] = 93;
 return ($0|0);
}
function _hfile_always_remote($fname) {
 $fname = $fname|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function _hopen_net($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i70$i = 0, $$0$i1$i = 0, $$0$i103$i$i = 0, $$0$i12$i$i = 0, $$0$i121$i$i = 0, $$0$i14$i$i = 0, $$0$i2$i$i = 0, $$0$i2$i52$i = 0, $$0$i26$i$i = 0, $$0$i31$i$i = 0, $$0$i4$i$i = 0, $$0$i44$i$i = 0, $$0$i49$i$i = 0, $$0$i6$i$i = 0, $$0$i67$i$i = 0, $$0$i7$i$i = 0, $$0$i85$i$i = 0;
 var $$0$lcssa$i$i$i$i = 0, $$0$lcssa$i$i$i15$i = 0, $$01$lcssa$i$i$i = 0, $$01$lcssa$i$i57$i = 0, $$01$lcssa$i109$i$i = 0, $$01$lcssa$i14$i$i = 0, $$01$lcssa$i19$i$i = 0, $$01$lcssa$i32$i$i = 0, $$01$lcssa$i37$i$i = 0, $$01$lcssa$i55$i$i = 0, $$01$lcssa$i73$i$i = 0, $$01$lcssa$i91$i$i = 0, $$014$i$i$i = 0, $$014$i$i54$i = 0, $$014$i106$i$i = 0, $$014$i11$i$i = 0, $$014$i16$i$i = 0, $$014$i29$i$i = 0, $$014$i34$i$i = 0, $$014$i52$i$i = 0;
 var $$014$i70$i$i = 0, $$014$i88$i$i = 0, $$02$lcssa$i$i$i = 0, $$0211$i$i$i = 0, $$031$i$i$i$i = 0, $$031$i$i$i8$i = 0, $$04$lcssa$i$i$i$i = 0, $$04$lcssa$i$i$i16$i = 0, $$0430$i$i$i$i = 0, $$0430$i$i$i9$i = 0, $$06$lcssa$i$i$i$i = 0, $$06$lcssa$i$i$i17$i = 0, $$0629$i$i$i$i = 0, $$0629$i$i$i10$i = 0, $$1$i$i$i = 0, $$1$lcssa$i$i$i = 0, $$1$lcssa$i$i$i$i = 0, $$1$lcssa$i$i$i35$i = 0, $$1$lcssa$i$i65$i = 0, $$1$lcssa$i117$i$i = 0;
 var $$1$lcssa$i22$i$i = 0, $$1$lcssa$i27$i$i = 0, $$1$lcssa$i40$i$i = 0, $$1$lcssa$i45$i$i = 0, $$1$lcssa$i63$i$i = 0, $$1$lcssa$i81$i$i = 0, $$1$lcssa$i99$i$i = 0, $$117$i$i$i$i = 0, $$117$i$i$i27$i = 0, $$15$ph$i$i$i$i = 0, $$15$ph$i$i$i38$i = 0, $$1511$i$i$i$i = 0, $$1511$i$i$i43$i = 0, $$17$ph$i$i$i$i = 0, $$17$ph$i$i$i37$i = 0, $$1710$i$i$i$i = 0, $$1710$i$i$i44$i = 0, $$2$ph$i$i$i$i = 0, $$2$ph$i$i$i39$i = 0, $$212$i$i$i$i = 0;
 var $$212$i$i$i42$i = 0, $$28$i$i$i$i = 0, $$28$i$i$i49$i = 0, $$3$i$i$i$i = 0, $$3$i$i$i50$i = 0, $$lcssa$i$i$i$i = 0, $$lcssa$i$i$i14$i = 0, $$p$0$i1$i = 0, $$pn$i$i$i = 0, $$pn$i$i68$i = 0, $$pn$i102$i$i = 0, $$pn$i120$i$i = 0, $$pn$i25$i$i = 0, $$pn$i30$i$i = 0, $$pn$i43$i$i = 0, $$pn$i48$i$i = 0, $$pn$i66$i$i = 0, $$pn$i84$i$i = 0, $$pn15$i$i$i = 0, $$pn15$i$i61$i = 0;
 var $$pn15$i113$i$i = 0, $$pn15$i18$i$i = 0, $$pn15$i23$i$i = 0, $$pn15$i36$i$i = 0, $$pn15$i41$i$i = 0, $$pn15$i59$i$i = 0, $$pn15$i77$i$i = 0, $$pn15$i95$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i62$i = 0, $$pre$i114$i$i = 0, $$pre$i19$i$i = 0, $$pre$i24$i$i = 0, $$pre$i37$i$i = 0, $$pre$i42$i$i = 0, $$pre$i60$i$i = 0, $$pre$i78$i$i = 0, $$pre$i96$i$i = 0, $$pre84 = 0;
 var $$pre86 = 0, $$q$1$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fp$1$i10 = 0, $not$ = 0, $or$cond$i$i$i$i = 0, $or$cond$i$i$i12$i = 0, $or$cond28$i$i$i$i = 0, $or$cond28$i$i$i5$i = 0, $p$0$i$i = 0, $p$0$i1$i = 0, $phitmp = 0, $phitmp164 = 0, $q$0$i$i = 0, $q$1$i$i = 0, $q$2$i$i = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $w$0$i$i$i = 0, $w$0$i$i59$i = 0, $w$0$i111$i$i = 0, $w$0$i16$i$i = 0, $w$0$i21$i$i = 0, $w$0$i34$i$i = 0, $w$0$i39$i$i = 0, $w$0$i57$i$i = 0, $w$0$i75$i$i = 0, $w$0$i93$i$i = 0, $w$0$lcssa$i$i$i = 0, $w$08$i$i$i = 0, $wd$0$lcssa$i$i$i$i = 0, $wd$0$lcssa$i$i$i34$i = 0, $wd$018$i$i$i$i = 0, $wd$018$i$i$i26$i = 0, $ws$0$lcssa$i$i$i$i = 0;
 var $ws$0$lcssa$i$i$i33$i = 0, $ws$019$i$i$i$i = 0, $ws$019$i$i$i25$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[6770]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  HEAP32[6770] = 1;
 }
 $2 = (_hfile_init(36,$mode,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP8[$mode>>0]|0;
 $5 = ($4<<24>>24)==(114);
 L7: do {
  if ($5) {
   $6 = (_strstr($filename,21152)|0);
   $7 = ($6|0)==($filename|0);
   do {
    if ($7) {
     $8 = ((($filename)) + 6|0);
     $p$0$i$i = $8;
     L11: while(1) {
      $9 = HEAP8[$p$0$i$i>>0]|0;
      switch ($9<<24>>24) {
      case 0:  {
       break L7;
       break;
      }
      case 47:  {
       break L11;
       break;
      }
      default: {
      }
      }
      $10 = ((($p$0$i$i)) + 1|0);
      $p$0$i$i = $10;
     }
     $11 = $p$0$i$i;
     $12 = $filename;
     $13 = (($11) - ($12))|0;
     $14 = (($13) + -6)|0;
     $15 = (_malloc(96)|0);
     $16 = ($15|0)==(0|0);
     if (!($16)) {
      $17 = ((($15)) + -4|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = $18 & 3;
      $20 = ($19|0)==(0);
      if (!($20)) {
       dest=$15; stop=dest+96|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      }
     }
     HEAP32[$15>>2] = 2;
     $21 = ((($15)) + 4|0);
     HEAP32[$21>>2] = -1;
     L19: do {
      if (((((21159) & 3)|0)==(0))) {
       $$01$lcssa$i$i$i = 21159;
       label = 16;
      } else {
       $$014$i$i$i = 21159;$474 = (21159);
       while(1) {
        $22 = HEAP8[$$014$i$i$i>>0]|0;
        $23 = ($22<<24>>24)==(0);
        if ($23) {
         $$pn$i$i$i = $474;
         break L19;
        }
        $24 = ((($$014$i$i$i)) + 1|0);
        $25 = $24;
        $26 = $25 & 3;
        $27 = ($26|0)==(0);
        if ($27) {
         $$01$lcssa$i$i$i = $24;
         label = 16;
         break;
        } else {
         $$014$i$i$i = $24;$474 = $25;
        }
       }
      }
     } while(0);
     if ((label|0) == 16) {
      $w$0$i$i$i = $$01$lcssa$i$i$i;
      while(1) {
       $28 = HEAP32[$w$0$i$i$i>>2]|0;
       $29 = (($28) + -16843009)|0;
       $30 = $28 & -2139062144;
       $31 = $30 ^ -2139062144;
       $32 = $31 & $29;
       $33 = ($32|0)==(0);
       $34 = ((($w$0$i$i$i)) + 4|0);
       if ($33) {
        $w$0$i$i$i = $34;
       } else {
        break;
       }
      }
      $35 = $28&255;
      $36 = ($35<<24>>24)==(0);
      if ($36) {
       $$1$lcssa$i$i$i = $w$0$i$i$i;
      } else {
       $$pn15$i$i$i = $w$0$i$i$i;
       while(1) {
        $37 = ((($$pn15$i$i$i)) + 1|0);
        $$pre$i$i$i = HEAP8[$37>>0]|0;
        $38 = ($$pre$i$i$i<<24>>24)==(0);
        if ($38) {
         $$1$lcssa$i$i$i = $37;
         break;
        } else {
         $$pn15$i$i$i = $37;
        }
       }
      }
      $39 = $$1$lcssa$i$i$i;
      $$pn$i$i$i = $39;
     }
     $$0$i7$i$i = (($$pn$i$i$i) - (21159))|0;
     $40 = (($$0$i7$i$i) + 1)|0;
     $41 = (_malloc($40)|0);
     $42 = ($41|0)==(0|0);
     if ($42) {
      $$0$i$i$i = 0;
     } else {
      _memcpy(($41|0),(21159|0),($40|0))|0;
      $$0$i$i$i = $41;
     }
     $43 = ((($15)) + 20|0);
     HEAP32[$43>>2] = $$0$i$i$i;
     $44 = (($13) + -5)|0;
     $45 = (_malloc($44)|0);
     $46 = ($45|0)==(0|0);
     if (!($46)) {
      $47 = ((($45)) + -4|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = $48 & 3;
      $50 = ($49|0)==(0);
      if (!($50)) {
       _memset(($45|0),0,($44|0))|0;
      }
     }
     $51 = ((($15)) + 16|0);
     HEAP32[$51>>2] = $45;
     $52 = $mode;
     $53 = $52 & 3;
     $54 = ($53|0)==(0);
     L40: do {
      if ($54) {
       $$02$lcssa$i$i$i = $mode;
       label = 29;
      } else {
       $$0211$i$i$i = $mode;
       while(1) {
        $55 = HEAP8[$$0211$i$i$i>>0]|0;
        switch ($55<<24>>24) {
        case 0: case 99:  {
         $$0$i2$i$i = $$0211$i$i$i;$83 = $55;
         break L40;
         break;
        }
        default: {
        }
        }
        $56 = ((($$0211$i$i$i)) + 1|0);
        $57 = $56;
        $58 = $57 & 3;
        $59 = ($58|0)==(0);
        if ($59) {
         $$02$lcssa$i$i$i = $56;
         label = 29;
         break L40;
        } else {
         $$0211$i$i$i = $56;
        }
       }
      }
     } while(0);
     L44: do {
      if ((label|0) == 29) {
       $60 = HEAP32[$$02$lcssa$i$i$i>>2]|0;
       $61 = (($60) + -16843009)|0;
       $62 = $60 & -2139062144;
       $63 = $62 ^ -2139062144;
       $64 = $63 & $61;
       $65 = ($64|0)==(0);
       L46: do {
        if ($65) {
         $67 = $60;$w$08$i$i$i = $$02$lcssa$i$i$i;
         while(1) {
          $66 = $67 ^ 1667457891;
          $68 = (($66) + -16843009)|0;
          $69 = $67 & -2139062144;
          $70 = $69 ^ -2139062144;
          $71 = $70 & $68;
          $72 = ($71|0)==(0);
          if (!($72)) {
           $w$0$lcssa$i$i$i = $w$08$i$i$i;
           break L46;
          }
          $73 = ((($w$08$i$i$i)) + 4|0);
          $74 = HEAP32[$73>>2]|0;
          $75 = (($74) + -16843009)|0;
          $76 = $74 & -2139062144;
          $77 = $76 ^ -2139062144;
          $78 = $77 & $75;
          $79 = ($78|0)==(0);
          if ($79) {
           $67 = $74;$w$08$i$i$i = $73;
          } else {
           $w$0$lcssa$i$i$i = $73;
           break;
          }
         }
        } else {
         $w$0$lcssa$i$i$i = $$02$lcssa$i$i$i;
        }
       } while(0);
       $$1$i$i$i = $w$0$lcssa$i$i$i;
       while(1) {
        $80 = HEAP8[$$1$i$i$i>>0]|0;
        $81 = ((($$1$i$i$i)) + 1|0);
        switch ($80<<24>>24) {
        case 0: case 99:  {
         $$0$i2$i$i = $$1$i$i$i;$83 = $80;
         break L44;
         break;
        }
        default: {
         $$1$i$i$i = $81;
        }
        }
       }
      }
     } while(0);
     $82 = ($$0$i2$i$i|0)==(0|0);
     $not$ = ($83<<24>>24)!=(99);
     $84 = $82 | $not$;
     if (!($84)) {
      $85 = ((($15)) + 52|0);
      HEAP32[$85>>2] = 1;
     }
     $86 = $8;
     $87 = $45;
     $88 = $86 ^ $87;
     $89 = $88 & 3;
     $90 = ($89|0)==(0);
     L57: do {
      if ($90) {
       $91 = $86 & 3;
       $92 = ($91|0)!=(0);
       $93 = ($14|0)!=(0);
       $or$cond28$i$i$i$i = $93 & $92;
       if ($or$cond28$i$i$i$i) {
        $$031$i$i$i$i = $14;$$0430$i$i$i$i = $8;$$0629$i$i$i$i = $45;
        while(1) {
         $94 = HEAP8[$$0430$i$i$i$i>>0]|0;
         HEAP8[$$0629$i$i$i$i>>0] = $94;
         $95 = ($94<<24>>24)==(0);
         if ($95) {
          $$28$i$i$i$i = $$0629$i$i$i$i;$$3$i$i$i$i = $$031$i$i$i$i;
          break L57;
         }
         $96 = (($$031$i$i$i$i) + -1)|0;
         $97 = ((($$0430$i$i$i$i)) + 1|0);
         $98 = ((($$0629$i$i$i$i)) + 1|0);
         $99 = $97;
         $100 = $99 & 3;
         $101 = ($100|0)!=(0);
         $102 = ($96|0)!=(0);
         $or$cond$i$i$i$i = $102 & $101;
         if ($or$cond$i$i$i$i) {
          $$031$i$i$i$i = $96;$$0430$i$i$i$i = $97;$$0629$i$i$i$i = $98;
         } else {
          $$0$lcssa$i$i$i$i = $96;$$04$lcssa$i$i$i$i = $97;$$06$lcssa$i$i$i$i = $98;$$lcssa$i$i$i$i = $102;
          break;
         }
        }
       } else {
        $$0$lcssa$i$i$i$i = $14;$$04$lcssa$i$i$i$i = $8;$$06$lcssa$i$i$i$i = $45;$$lcssa$i$i$i$i = $93;
       }
       if ($$lcssa$i$i$i$i) {
        $$pre86 = HEAP8[$$04$lcssa$i$i$i$i>>0]|0;
        $103 = ($$pre86<<24>>24)==(0);
        if ($103) {
         $$28$i$i$i$i = $$06$lcssa$i$i$i$i;$$3$i$i$i$i = $$0$lcssa$i$i$i$i;
        } else {
         $104 = ($$0$lcssa$i$i$i$i>>>0)>(3);
         L66: do {
          if ($104) {
           $$117$i$i$i$i = $$0$lcssa$i$i$i$i;$wd$018$i$i$i$i = $$06$lcssa$i$i$i$i;$ws$019$i$i$i$i = $$04$lcssa$i$i$i$i;
           while(1) {
            $105 = HEAP32[$ws$019$i$i$i$i>>2]|0;
            $106 = (($105) + -16843009)|0;
            $107 = $105 & -2139062144;
            $108 = $107 ^ -2139062144;
            $109 = $108 & $106;
            $110 = ($109|0)==(0);
            if (!($110)) {
             $$1$lcssa$i$i$i$i = $$117$i$i$i$i;$wd$0$lcssa$i$i$i$i = $wd$018$i$i$i$i;$ws$0$lcssa$i$i$i$i = $ws$019$i$i$i$i;
             break L66;
            }
            HEAP32[$wd$018$i$i$i$i>>2] = $105;
            $111 = (($$117$i$i$i$i) + -4)|0;
            $112 = ((($ws$019$i$i$i$i)) + 4|0);
            $113 = ((($wd$018$i$i$i$i)) + 4|0);
            $114 = ($111>>>0)>(3);
            if ($114) {
             $$117$i$i$i$i = $111;$wd$018$i$i$i$i = $113;$ws$019$i$i$i$i = $112;
            } else {
             $$1$lcssa$i$i$i$i = $111;$wd$0$lcssa$i$i$i$i = $113;$ws$0$lcssa$i$i$i$i = $112;
             break;
            }
           }
          } else {
           $$1$lcssa$i$i$i$i = $$0$lcssa$i$i$i$i;$wd$0$lcssa$i$i$i$i = $$06$lcssa$i$i$i$i;$ws$0$lcssa$i$i$i$i = $$04$lcssa$i$i$i$i;
          }
         } while(0);
         $$15$ph$i$i$i$i = $ws$0$lcssa$i$i$i$i;$$17$ph$i$i$i$i = $wd$0$lcssa$i$i$i$i;$$2$ph$i$i$i$i = $$1$lcssa$i$i$i$i;
         label = 46;
        }
       } else {
        $$28$i$i$i$i = $$06$lcssa$i$i$i$i;$$3$i$i$i$i = 0;
       }
      } else {
       $$15$ph$i$i$i$i = $8;$$17$ph$i$i$i$i = $45;$$2$ph$i$i$i$i = $14;
       label = 46;
      }
     } while(0);
     L71: do {
      if ((label|0) == 46) {
       $115 = ($$2$ph$i$i$i$i|0)==(0);
       if ($115) {
        $$28$i$i$i$i = $$17$ph$i$i$i$i;$$3$i$i$i$i = 0;
       } else {
        $$1511$i$i$i$i = $$15$ph$i$i$i$i;$$1710$i$i$i$i = $$17$ph$i$i$i$i;$$212$i$i$i$i = $$2$ph$i$i$i$i;
        while(1) {
         $116 = HEAP8[$$1511$i$i$i$i>>0]|0;
         HEAP8[$$1710$i$i$i$i>>0] = $116;
         $117 = ($116<<24>>24)==(0);
         if ($117) {
          $$28$i$i$i$i = $$1710$i$i$i$i;$$3$i$i$i$i = $$212$i$i$i$i;
          break L71;
         }
         $118 = (($$212$i$i$i$i) + -1)|0;
         $119 = ((($$1511$i$i$i$i)) + 1|0);
         $120 = ((($$1710$i$i$i$i)) + 1|0);
         $121 = ($118|0)==(0);
         if ($121) {
          $$28$i$i$i$i = $120;$$3$i$i$i$i = 0;
          break;
         } else {
          $$1511$i$i$i$i = $119;$$1710$i$i$i$i = $120;$$212$i$i$i$i = $118;
         }
        }
       }
      }
     } while(0);
     _memset(($$28$i$i$i$i|0),0,($$3$i$i$i$i|0))|0;
     $122 = $11 & 3;
     $123 = ($122|0)==(0);
     L77: do {
      if ($123) {
       $$01$lcssa$i14$i$i = $p$0$i$i;
       label = 52;
      } else {
       $$014$i11$i$i = $p$0$i$i;$475 = $11;
       while(1) {
        $124 = HEAP8[$$014$i11$i$i>>0]|0;
        $125 = ($124<<24>>24)==(0);
        if ($125) {
         $$pn$i25$i$i = $475;
         break L77;
        }
        $126 = ((($$014$i11$i$i)) + 1|0);
        $127 = $126;
        $128 = $127 & 3;
        $129 = ($128|0)==(0);
        if ($129) {
         $$01$lcssa$i14$i$i = $126;
         label = 52;
         break;
        } else {
         $$014$i11$i$i = $126;$475 = $127;
        }
       }
      }
     } while(0);
     if ((label|0) == 52) {
      $w$0$i16$i$i = $$01$lcssa$i14$i$i;
      while(1) {
       $130 = HEAP32[$w$0$i16$i$i>>2]|0;
       $131 = (($130) + -16843009)|0;
       $132 = $130 & -2139062144;
       $133 = $132 ^ -2139062144;
       $134 = $133 & $131;
       $135 = ($134|0)==(0);
       $136 = ((($w$0$i16$i$i)) + 4|0);
       if ($135) {
        $w$0$i16$i$i = $136;
       } else {
        break;
       }
      }
      $137 = $130&255;
      $138 = ($137<<24>>24)==(0);
      if ($138) {
       $$1$lcssa$i22$i$i = $w$0$i16$i$i;
      } else {
       $$pn15$i18$i$i = $w$0$i16$i$i;
       while(1) {
        $139 = ((($$pn15$i18$i$i)) + 1|0);
        $$pre$i19$i$i = HEAP8[$139>>0]|0;
        $140 = ($$pre$i19$i$i<<24>>24)==(0);
        if ($140) {
         $$1$lcssa$i22$i$i = $139;
         break;
        } else {
         $$pn15$i18$i$i = $139;
        }
       }
      }
      $141 = $$1$lcssa$i22$i$i;
      $$pn$i25$i$i = $141;
     }
     $$0$i26$i$i = (($$pn$i25$i$i) - ($11))|0;
     $142 = (($$0$i26$i$i) + 8)|0;
     $143 = (_malloc($142)|0);
     $144 = ($143|0)==(0|0);
     if (!($144)) {
      $145 = ((($143)) + -4|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = $146 & 3;
      $148 = ($147|0)==(0);
      if (!($148)) {
       _memset(($143|0),0,($142|0))|0;
      }
     }
     $149 = ((($15)) + 64|0);
     HEAP32[$149>>2] = $143;
     HEAP32[$vararg_buffer1>>2] = $p$0$i$i;
     (_sprintf($143,21162,$vararg_buffer1)|0);
     L95: do {
      if ($123) {
       $$01$lcssa$i32$i$i = $p$0$i$i;
       label = 63;
      } else {
       $$014$i29$i$i = $p$0$i$i;$476 = $11;
       while(1) {
        $150 = HEAP8[$$014$i29$i$i>>0]|0;
        $151 = ($150<<24>>24)==(0);
        if ($151) {
         $$pn$i43$i$i = $476;
         break L95;
        }
        $152 = ((($$014$i29$i$i)) + 1|0);
        $153 = $152;
        $154 = $153 & 3;
        $155 = ($154|0)==(0);
        if ($155) {
         $$01$lcssa$i32$i$i = $152;
         label = 63;
         break;
        } else {
         $$014$i29$i$i = $152;$476 = $153;
        }
       }
      }
     } while(0);
     if ((label|0) == 63) {
      $w$0$i34$i$i = $$01$lcssa$i32$i$i;
      while(1) {
       $156 = HEAP32[$w$0$i34$i$i>>2]|0;
       $157 = (($156) + -16843009)|0;
       $158 = $156 & -2139062144;
       $159 = $158 ^ -2139062144;
       $160 = $159 & $157;
       $161 = ($160|0)==(0);
       $162 = ((($w$0$i34$i$i)) + 4|0);
       if ($161) {
        $w$0$i34$i$i = $162;
       } else {
        break;
       }
      }
      $163 = $156&255;
      $164 = ($163<<24>>24)==(0);
      if ($164) {
       $$1$lcssa$i40$i$i = $w$0$i34$i$i;
      } else {
       $$pn15$i36$i$i = $w$0$i34$i$i;
       while(1) {
        $165 = ((($$pn15$i36$i$i)) + 1|0);
        $$pre$i37$i$i = HEAP8[$165>>0]|0;
        $166 = ($$pre$i37$i$i<<24>>24)==(0);
        if ($166) {
         $$1$lcssa$i40$i$i = $165;
         break;
        } else {
         $$pn15$i36$i$i = $165;
        }
       }
      }
      $167 = $$1$lcssa$i40$i$i;
      $$pn$i43$i$i = $167;
     }
     $$0$i44$i$i = (($$pn$i43$i$i) - ($11))|0;
     $168 = (($$0$i44$i$i) + 8)|0;
     $169 = (_malloc($168)|0);
     $170 = ($169|0)==(0|0);
     if (!($170)) {
      $171 = ((($169)) + -4|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = $172 & 3;
      $174 = ($173|0)==(0);
      if (!($174)) {
       _memset(($169|0),0,($168|0))|0;
      }
     }
     $175 = ((($15)) + 68|0);
     HEAP32[$175>>2] = $169;
     HEAP32[$vararg_buffer3>>2] = $p$0$i$i;
     (_sprintf($169,21172,$vararg_buffer3)|0);
     $176 = ((($15)) + 72|0);
     $177 = $176;
     $178 = $177;
     HEAP32[$178>>2] = 0;
     $179 = (($177) + 4)|0;
     $180 = $179;
     HEAP32[$180>>2] = 0;
     $181 = ($15|0)==(0|0);
     if ($181) {
      break L7;
     }
     $182 = (_kftp_connect($15)|0);
     $183 = ($182|0)==(-1);
     if ($183) {
      (_knet_close($15)|0);
      break L7;
     } else {
      _kftp_connect_file($15);
      $fp$1$i10 = $15;
      break;
     }
    } else {
     $184 = (_strstr($filename,21332)|0);
     $185 = ($184|0)==($filename|0);
     if (!($185)) {
      $444 = (_open($filename,0,$vararg_buffer6)|0);
      $445 = ($444|0)==(-1);
      if ($445) {
       _perror(21454);
       break L7;
      }
      $446 = (_malloc(96)|0);
      $447 = ($446|0)==(0|0);
      if ($447) {
       HEAP32[$446>>2] = 1;
       $454 = ((($446)) + 4|0);
       HEAP32[$454>>2] = $444;
       $455 = ((($446)) + 24|0);
       HEAP32[$455>>2] = -1;
       break L7;
      }
      $448 = ((($446)) + -4|0);
      $449 = HEAP32[$448>>2]|0;
      $450 = $449 & 3;
      $451 = ($450|0)==(0);
      if (!($451)) {
       dest=$446; stop=dest+96|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      }
      HEAP32[$446>>2] = 1;
      $452 = ((($446)) + 4|0);
      HEAP32[$452>>2] = $444;
      $453 = ((($446)) + 24|0);
      HEAP32[$453>>2] = -1;
      $fp$1$i10 = $446;
      break;
     }
     $186 = ((($filename)) + 7|0);
     $p$0$i1$i = $186;
     L130: while(1) {
      $187 = HEAP8[$p$0$i1$i>>0]|0;
      switch ($187<<24>>24) {
      case 0: case 47:  {
       break L130;
       break;
      }
      default: {
      }
      }
      $188 = ((($p$0$i1$i)) + 1|0);
      $p$0$i1$i = $188;
     }
     $189 = $p$0$i1$i;
     $190 = $filename;
     $191 = (($189) - ($190))|0;
     $192 = (($191) + -7)|0;
     $193 = (_malloc(96)|0);
     $194 = ($193|0)==(0|0);
     if (!($194)) {
      $195 = ((($193)) + -4|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = $196 & 3;
      $198 = ($197|0)==(0);
      if (!($198)) {
       dest=$193; stop=dest+96|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      }
     }
     $199 = (($191) + -6)|0;
     $200 = (_malloc($199)|0);
     $201 = ($200|0)==(0|0);
     if (!($201)) {
      $202 = ((($200)) + -4|0);
      $203 = HEAP32[$202>>2]|0;
      $204 = $203 & 3;
      $205 = ($204|0)==(0);
      if (!($205)) {
       _memset(($200|0),0,($199|0))|0;
      }
     }
     $206 = ((($193)) + 92|0);
     HEAP32[$206>>2] = $200;
     $207 = $186;
     $208 = $200;
     $209 = $207 ^ $208;
     $210 = $209 & 3;
     $211 = ($210|0)==(0);
     L142: do {
      if ($211) {
       $212 = $207 & 3;
       $213 = ($212|0)!=(0);
       $214 = ($192|0)!=(0);
       $or$cond28$i$i$i5$i = $214 & $213;
       if ($or$cond28$i$i$i5$i) {
        $$031$i$i$i8$i = $192;$$0430$i$i$i9$i = $186;$$0629$i$i$i10$i = $200;
        while(1) {
         $215 = HEAP8[$$0430$i$i$i9$i>>0]|0;
         HEAP8[$$0629$i$i$i10$i>>0] = $215;
         $216 = ($215<<24>>24)==(0);
         if ($216) {
          $$28$i$i$i49$i = $$0629$i$i$i10$i;$$3$i$i$i50$i = $$031$i$i$i8$i;
          break L142;
         }
         $217 = (($$031$i$i$i8$i) + -1)|0;
         $218 = ((($$0430$i$i$i9$i)) + 1|0);
         $219 = ((($$0629$i$i$i10$i)) + 1|0);
         $220 = $218;
         $221 = $220 & 3;
         $222 = ($221|0)!=(0);
         $223 = ($217|0)!=(0);
         $or$cond$i$i$i12$i = $223 & $222;
         if ($or$cond$i$i$i12$i) {
          $$031$i$i$i8$i = $217;$$0430$i$i$i9$i = $218;$$0629$i$i$i10$i = $219;
         } else {
          $$0$lcssa$i$i$i15$i = $217;$$04$lcssa$i$i$i16$i = $218;$$06$lcssa$i$i$i17$i = $219;$$lcssa$i$i$i14$i = $223;
          break;
         }
        }
       } else {
        $$0$lcssa$i$i$i15$i = $192;$$04$lcssa$i$i$i16$i = $186;$$06$lcssa$i$i$i17$i = $200;$$lcssa$i$i$i14$i = $214;
       }
       if ($$lcssa$i$i$i14$i) {
        $$pre = HEAP8[$$04$lcssa$i$i$i16$i>>0]|0;
        $224 = ($$pre<<24>>24)==(0);
        if ($224) {
         $$28$i$i$i49$i = $$06$lcssa$i$i$i17$i;$$3$i$i$i50$i = $$0$lcssa$i$i$i15$i;
        } else {
         $225 = ($$0$lcssa$i$i$i15$i>>>0)>(3);
         L151: do {
          if ($225) {
           $$117$i$i$i27$i = $$0$lcssa$i$i$i15$i;$wd$018$i$i$i26$i = $$06$lcssa$i$i$i17$i;$ws$019$i$i$i25$i = $$04$lcssa$i$i$i16$i;
           while(1) {
            $226 = HEAP32[$ws$019$i$i$i25$i>>2]|0;
            $227 = (($226) + -16843009)|0;
            $228 = $226 & -2139062144;
            $229 = $228 ^ -2139062144;
            $230 = $229 & $227;
            $231 = ($230|0)==(0);
            if (!($231)) {
             $$1$lcssa$i$i$i35$i = $$117$i$i$i27$i;$wd$0$lcssa$i$i$i34$i = $wd$018$i$i$i26$i;$ws$0$lcssa$i$i$i33$i = $ws$019$i$i$i25$i;
             break L151;
            }
            HEAP32[$wd$018$i$i$i26$i>>2] = $226;
            $232 = (($$117$i$i$i27$i) + -4)|0;
            $233 = ((($ws$019$i$i$i25$i)) + 4|0);
            $234 = ((($wd$018$i$i$i26$i)) + 4|0);
            $235 = ($232>>>0)>(3);
            if ($235) {
             $$117$i$i$i27$i = $232;$wd$018$i$i$i26$i = $234;$ws$019$i$i$i25$i = $233;
            } else {
             $$1$lcssa$i$i$i35$i = $232;$wd$0$lcssa$i$i$i34$i = $234;$ws$0$lcssa$i$i$i33$i = $233;
             break;
            }
           }
          } else {
           $$1$lcssa$i$i$i35$i = $$0$lcssa$i$i$i15$i;$wd$0$lcssa$i$i$i34$i = $$06$lcssa$i$i$i17$i;$ws$0$lcssa$i$i$i33$i = $$04$lcssa$i$i$i16$i;
          }
         } while(0);
         $$15$ph$i$i$i38$i = $ws$0$lcssa$i$i$i33$i;$$17$ph$i$i$i37$i = $wd$0$lcssa$i$i$i34$i;$$2$ph$i$i$i39$i = $$1$lcssa$i$i$i35$i;
         label = 95;
        }
       } else {
        $$28$i$i$i49$i = $$06$lcssa$i$i$i17$i;$$3$i$i$i50$i = 0;
       }
      } else {
       $$15$ph$i$i$i38$i = $186;$$17$ph$i$i$i37$i = $200;$$2$ph$i$i$i39$i = $192;
       label = 95;
      }
     } while(0);
     L156: do {
      if ((label|0) == 95) {
       $236 = ($$2$ph$i$i$i39$i|0)==(0);
       if ($236) {
        $$28$i$i$i49$i = $$17$ph$i$i$i37$i;$$3$i$i$i50$i = 0;
       } else {
        $$1511$i$i$i43$i = $$15$ph$i$i$i38$i;$$1710$i$i$i44$i = $$17$ph$i$i$i37$i;$$212$i$i$i42$i = $$2$ph$i$i$i39$i;
        while(1) {
         $237 = HEAP8[$$1511$i$i$i43$i>>0]|0;
         HEAP8[$$1710$i$i$i44$i>>0] = $237;
         $238 = ($237<<24>>24)==(0);
         if ($238) {
          $$28$i$i$i49$i = $$1710$i$i$i44$i;$$3$i$i$i50$i = $$212$i$i$i42$i;
          break L156;
         }
         $239 = (($$212$i$i$i42$i) + -1)|0;
         $240 = ((($$1511$i$i$i43$i)) + 1|0);
         $241 = ((($$1710$i$i$i44$i)) + 1|0);
         $242 = ($239|0)==(0);
         if ($242) {
          $$28$i$i$i49$i = $241;$$3$i$i$i50$i = 0;
          break;
         } else {
          $$1511$i$i$i43$i = $240;$$1710$i$i$i44$i = $241;$$212$i$i$i42$i = $239;
         }
        }
       }
      }
     } while(0);
     _memset(($$28$i$i$i49$i|0),0,($$3$i$i$i50$i|0))|0;
     $243 = HEAP32[$206>>2]|0;
     $244 = (($243) + ($192)|0);
     HEAP8[$244>>0] = 0;
     $245 = HEAP32[$206>>2]|0;
     $q$0$i$i = $245;
     L162: while(1) {
      $246 = HEAP8[$q$0$i$i>>0]|0;
      switch ($246<<24>>24) {
      case 0:  {
       $q$1$i$i = $q$0$i$i;
       break L162;
       break;
      }
      case 58:  {
       label = 101;
       break L162;
       break;
      }
      default: {
      }
      }
      $247 = ((($q$0$i$i)) + 1|0);
      $q$0$i$i = $247;
     }
     if ((label|0) == 101) {
      $248 = ((($q$0$i$i)) + 1|0);
      HEAP8[$q$0$i$i>>0] = 0;
      $q$1$i$i = $248;
     }
     $249 = (_getenv((21340|0))|0);
     $250 = ($249|0)==(0|0);
     if ($250) {
      $251 = HEAP32[$206>>2]|0;
      $252 = $251;
      $253 = $252 & 3;
      $254 = ($253|0)==(0);
      L170: do {
       if ($254) {
        $$01$lcssa$i109$i$i = $251;
        label = 106;
       } else {
        $$014$i106$i$i = $251;$477 = $252;
        while(1) {
         $255 = HEAP8[$$014$i106$i$i>>0]|0;
         $256 = ($255<<24>>24)==(0);
         if ($256) {
          $$pn$i120$i$i = $477;
          break L170;
         }
         $257 = ((($$014$i106$i$i)) + 1|0);
         $258 = $257;
         $259 = $258 & 3;
         $260 = ($259|0)==(0);
         if ($260) {
          $$01$lcssa$i109$i$i = $257;
          label = 106;
          break;
         } else {
          $$014$i106$i$i = $257;$477 = $258;
         }
        }
       }
      } while(0);
      if ((label|0) == 106) {
       $w$0$i111$i$i = $$01$lcssa$i109$i$i;
       while(1) {
        $261 = HEAP32[$w$0$i111$i$i>>2]|0;
        $262 = (($261) + -16843009)|0;
        $263 = $261 & -2139062144;
        $264 = $263 ^ -2139062144;
        $265 = $264 & $262;
        $266 = ($265|0)==(0);
        $267 = ((($w$0$i111$i$i)) + 4|0);
        if ($266) {
         $w$0$i111$i$i = $267;
        } else {
         break;
        }
       }
       $268 = $261&255;
       $269 = ($268<<24>>24)==(0);
       if ($269) {
        $$1$lcssa$i117$i$i = $w$0$i111$i$i;
       } else {
        $$pn15$i113$i$i = $w$0$i111$i$i;
        while(1) {
         $270 = ((($$pn15$i113$i$i)) + 1|0);
         $$pre$i114$i$i = HEAP8[$270>>0]|0;
         $271 = ($$pre$i114$i$i<<24>>24)==(0);
         if ($271) {
          $$1$lcssa$i117$i$i = $270;
          break;
         } else {
          $$pn15$i113$i$i = $270;
         }
        }
       }
       $272 = $$1$lcssa$i117$i$i;
       $$pn$i120$i$i = $272;
      }
      $$0$i121$i$i = (($$pn$i120$i$i) - ($252))|0;
      $273 = (($$0$i121$i$i) + 1)|0;
      $274 = (_malloc($273)|0);
      $275 = ($274|0)==(0|0);
      if ($275) {
       $$0$i2$i52$i = 0;
      } else {
       _memcpy(($274|0),($251|0),($273|0))|0;
       $$0$i2$i52$i = $274;
      }
      $276 = ((($193)) + 16|0);
      HEAP32[$276>>2] = $$0$i2$i52$i;
      $277 = HEAP8[$q$1$i$i>>0]|0;
      $278 = ($277<<24>>24)==(0);
      $$q$1$i$i = $278 ? 21351 : $q$1$i$i;
      $279 = $$q$1$i$i;
      $280 = $279 & 3;
      $281 = ($280|0)==(0);
      L187: do {
       if ($281) {
        $$01$lcssa$i91$i$i = $$q$1$i$i;
        label = 116;
       } else {
        $$014$i88$i$i = $$q$1$i$i;$478 = $279;
        while(1) {
         $282 = HEAP8[$$014$i88$i$i>>0]|0;
         $283 = ($282<<24>>24)==(0);
         if ($283) {
          $$pn$i102$i$i = $478;
          break L187;
         }
         $284 = ((($$014$i88$i$i)) + 1|0);
         $285 = $284;
         $286 = $285 & 3;
         $287 = ($286|0)==(0);
         if ($287) {
          $$01$lcssa$i91$i$i = $284;
          label = 116;
          break;
         } else {
          $$014$i88$i$i = $284;$478 = $285;
         }
        }
       }
      } while(0);
      if ((label|0) == 116) {
       $w$0$i93$i$i = $$01$lcssa$i91$i$i;
       while(1) {
        $288 = HEAP32[$w$0$i93$i$i>>2]|0;
        $289 = (($288) + -16843009)|0;
        $290 = $288 & -2139062144;
        $291 = $290 ^ -2139062144;
        $292 = $291 & $289;
        $293 = ($292|0)==(0);
        $294 = ((($w$0$i93$i$i)) + 4|0);
        if ($293) {
         $w$0$i93$i$i = $294;
        } else {
         break;
        }
       }
       $295 = $288&255;
       $296 = ($295<<24>>24)==(0);
       if ($296) {
        $$1$lcssa$i99$i$i = $w$0$i93$i$i;
       } else {
        $$pn15$i95$i$i = $w$0$i93$i$i;
        while(1) {
         $297 = ((($$pn15$i95$i$i)) + 1|0);
         $$pre$i96$i$i = HEAP8[$297>>0]|0;
         $298 = ($$pre$i96$i$i<<24>>24)==(0);
         if ($298) {
          $$1$lcssa$i99$i$i = $297;
          break;
         } else {
          $$pn15$i95$i$i = $297;
         }
        }
       }
       $299 = $$1$lcssa$i99$i$i;
       $$pn$i102$i$i = $299;
      }
      $$0$i103$i$i = (($$pn$i102$i$i) - ($279))|0;
      $300 = (($$0$i103$i$i) + 1)|0;
      $301 = (_malloc($300)|0);
      $302 = ($301|0)==(0|0);
      if ($302) {
       $$0$i4$i$i = 0;
      } else {
       _memcpy(($301|0),($$q$1$i$i|0),($300|0))|0;
       $$0$i4$i$i = $301;
      }
      $303 = ((($193)) + 20|0);
      HEAP32[$303>>2] = $$0$i4$i$i;
      $304 = HEAP8[$p$0$i1$i>>0]|0;
      $305 = ($304<<24>>24)==(0);
      $$p$0$i1$i = $305 ? 21354 : $p$0$i1$i;
      $306 = $$p$0$i1$i;
      $307 = $306 & 3;
      $308 = ($307|0)==(0);
      L204: do {
       if ($308) {
        $$01$lcssa$i73$i$i = $$p$0$i1$i;
        label = 126;
       } else {
        $$014$i70$i$i = $$p$0$i1$i;$479 = $306;
        while(1) {
         $309 = HEAP8[$$014$i70$i$i>>0]|0;
         $310 = ($309<<24>>24)==(0);
         if ($310) {
          $$pn$i84$i$i = $479;
          break L204;
         }
         $311 = ((($$014$i70$i$i)) + 1|0);
         $312 = $311;
         $313 = $312 & 3;
         $314 = ($313|0)==(0);
         if ($314) {
          $$01$lcssa$i73$i$i = $311;
          label = 126;
          break;
         } else {
          $$014$i70$i$i = $311;$479 = $312;
         }
        }
       }
      } while(0);
      if ((label|0) == 126) {
       $w$0$i75$i$i = $$01$lcssa$i73$i$i;
       while(1) {
        $315 = HEAP32[$w$0$i75$i$i>>2]|0;
        $316 = (($315) + -16843009)|0;
        $317 = $315 & -2139062144;
        $318 = $317 ^ -2139062144;
        $319 = $318 & $316;
        $320 = ($319|0)==(0);
        $321 = ((($w$0$i75$i$i)) + 4|0);
        if ($320) {
         $w$0$i75$i$i = $321;
        } else {
         break;
        }
       }
       $322 = $315&255;
       $323 = ($322<<24>>24)==(0);
       if ($323) {
        $$1$lcssa$i81$i$i = $w$0$i75$i$i;
       } else {
        $$pn15$i77$i$i = $w$0$i75$i$i;
        while(1) {
         $324 = ((($$pn15$i77$i$i)) + 1|0);
         $$pre$i78$i$i = HEAP8[$324>>0]|0;
         $325 = ($$pre$i78$i$i<<24>>24)==(0);
         if ($325) {
          $$1$lcssa$i81$i$i = $324;
          break;
         } else {
          $$pn15$i77$i$i = $324;
         }
        }
       }
       $326 = $$1$lcssa$i81$i$i;
       $$pn$i84$i$i = $326;
      }
      $$0$i85$i$i = (($$pn$i84$i$i) - ($306))|0;
      $327 = (($$0$i85$i$i) + 1)|0;
      $328 = (_malloc($327)|0);
      $329 = ($328|0)==(0|0);
      if ($329) {
       $$0$i6$i$i = 0;
      } else {
       _memcpy(($328|0),($$p$0$i1$i|0),($327|0))|0;
       $$0$i6$i$i = $328;
      }
      $330 = ((($193)) + 88|0);
      HEAP32[$330>>2] = $$0$i6$i$i;
     } else {
      $331 = (_strstr($249,21332)|0);
      $332 = ($331|0)==($249|0);
      if ($332) {
       $333 = ((($249)) + 7|0);
       $334 = $333;
       $335 = $334 & 3;
       $336 = ($335|0)==(0);
       L224: do {
        if ($336) {
         $$01$lcssa$i55$i$i = $333;
         label = 138;
        } else {
         $$014$i52$i$i = $333;$480 = $334;
         while(1) {
          $337 = HEAP8[$$014$i52$i$i>>0]|0;
          $338 = ($337<<24>>24)==(0);
          if ($338) {
           $$pn$i66$i$i = $480;
           break L224;
          }
          $339 = ((($$014$i52$i$i)) + 1|0);
          $340 = $339;
          $341 = $340 & 3;
          $342 = ($341|0)==(0);
          if ($342) {
           $$01$lcssa$i55$i$i = $339;
           label = 138;
           break;
          } else {
           $$014$i52$i$i = $339;$480 = $340;
          }
         }
        }
       } while(0);
       if ((label|0) == 138) {
        $w$0$i57$i$i = $$01$lcssa$i55$i$i;
        while(1) {
         $343 = HEAP32[$w$0$i57$i$i>>2]|0;
         $344 = (($343) + -16843009)|0;
         $345 = $343 & -2139062144;
         $346 = $345 ^ -2139062144;
         $347 = $346 & $344;
         $348 = ($347|0)==(0);
         $349 = ((($w$0$i57$i$i)) + 4|0);
         if ($348) {
          $w$0$i57$i$i = $349;
         } else {
          break;
         }
        }
        $350 = $343&255;
        $351 = ($350<<24>>24)==(0);
        if ($351) {
         $$1$lcssa$i63$i$i = $w$0$i57$i$i;
        } else {
         $$pn15$i59$i$i = $w$0$i57$i$i;
         while(1) {
          $352 = ((($$pn15$i59$i$i)) + 1|0);
          $$pre$i60$i$i = HEAP8[$352>>0]|0;
          $353 = ($$pre$i60$i$i<<24>>24)==(0);
          if ($353) {
           $$1$lcssa$i63$i$i = $352;
           break;
          } else {
           $$pn15$i59$i$i = $352;
          }
         }
        }
        $354 = $$1$lcssa$i63$i$i;
        $$pn$i66$i$i = $354;
       }
       $$0$i67$i$i = (($$pn$i66$i$i) - ($334))|0;
       $355 = (($$0$i67$i$i) + 1)|0;
       $356 = (_malloc($355)|0);
       $357 = ($356|0)==(0|0);
       if ($357) {
        $383 = 0;
       } else {
        _memcpy(($356|0),($333|0),($355|0))|0;
        $383 = $356;
       }
      } else {
       $358 = $249;
       $359 = $358 & 3;
       $360 = ($359|0)==(0);
       L240: do {
        if ($360) {
         $$01$lcssa$i37$i$i = $249;
         label = 148;
        } else {
         $$014$i34$i$i = $249;$481 = $358;
         while(1) {
          $361 = HEAP8[$$014$i34$i$i>>0]|0;
          $362 = ($361<<24>>24)==(0);
          if ($362) {
           $$pn$i48$i$i = $481;
           break L240;
          }
          $363 = ((($$014$i34$i$i)) + 1|0);
          $364 = $363;
          $365 = $364 & 3;
          $366 = ($365|0)==(0);
          if ($366) {
           $$01$lcssa$i37$i$i = $363;
           label = 148;
           break;
          } else {
           $$014$i34$i$i = $363;$481 = $364;
          }
         }
        }
       } while(0);
       if ((label|0) == 148) {
        $w$0$i39$i$i = $$01$lcssa$i37$i$i;
        while(1) {
         $367 = HEAP32[$w$0$i39$i$i>>2]|0;
         $368 = (($367) + -16843009)|0;
         $369 = $367 & -2139062144;
         $370 = $369 ^ -2139062144;
         $371 = $370 & $368;
         $372 = ($371|0)==(0);
         $373 = ((($w$0$i39$i$i)) + 4|0);
         if ($372) {
          $w$0$i39$i$i = $373;
         } else {
          break;
         }
        }
        $374 = $367&255;
        $375 = ($374<<24>>24)==(0);
        if ($375) {
         $$1$lcssa$i45$i$i = $w$0$i39$i$i;
        } else {
         $$pn15$i41$i$i = $w$0$i39$i$i;
         while(1) {
          $376 = ((($$pn15$i41$i$i)) + 1|0);
          $$pre$i42$i$i = HEAP8[$376>>0]|0;
          $377 = ($$pre$i42$i$i<<24>>24)==(0);
          if ($377) {
           $$1$lcssa$i45$i$i = $376;
           break;
          } else {
           $$pn15$i41$i$i = $376;
          }
         }
        }
        $378 = $$1$lcssa$i45$i$i;
        $$pn$i48$i$i = $378;
       }
       $$0$i49$i$i = (($$pn$i48$i$i) - ($358))|0;
       $379 = (($$0$i49$i$i) + 1)|0;
       $380 = (_malloc($379)|0);
       $381 = ($380|0)==(0|0);
       if ($381) {
        $383 = 0;
       } else {
        _memcpy(($380|0),($249|0),($379|0))|0;
        $383 = $380;
       }
      }
      $382 = ((($193)) + 16|0);
      HEAP32[$382>>2] = $383;
      $q$2$i$i = $383;
      L256: while(1) {
       $384 = HEAP8[$q$2$i$i>>0]|0;
       switch ($384<<24>>24) {
       case 0:  {
        $388 = 21351;
        break L256;
        break;
       }
       case 58:  {
        label = 158;
        break L256;
        break;
       }
       default: {
       }
       }
       $385 = ((($q$2$i$i)) + 1|0);
       $q$2$i$i = $385;
      }
      if ((label|0) == 158) {
       $386 = ((($q$2$i$i)) + 1|0);
       HEAP8[$q$2$i$i>>0] = 0;
       $$pre84 = HEAP8[$386>>0]|0;
       $phitmp = ($$pre84<<24>>24)==(0);
       $phitmp164 = $phitmp ? 21351 : $386;
       $388 = $phitmp164;
      }
      $387 = $388;
      $389 = $387 & 3;
      $390 = ($389|0)==(0);
      L262: do {
       if ($390) {
        $$01$lcssa$i19$i$i = $388;
        label = 162;
       } else {
        $$014$i16$i$i = $388;$482 = $387;
        while(1) {
         $391 = HEAP8[$$014$i16$i$i>>0]|0;
         $392 = ($391<<24>>24)==(0);
         if ($392) {
          $$pn$i30$i$i = $482;
          break L262;
         }
         $393 = ((($$014$i16$i$i)) + 1|0);
         $394 = $393;
         $395 = $394 & 3;
         $396 = ($395|0)==(0);
         if ($396) {
          $$01$lcssa$i19$i$i = $393;
          label = 162;
          break;
         } else {
          $$014$i16$i$i = $393;$482 = $394;
         }
        }
       }
      } while(0);
      if ((label|0) == 162) {
       $w$0$i21$i$i = $$01$lcssa$i19$i$i;
       while(1) {
        $397 = HEAP32[$w$0$i21$i$i>>2]|0;
        $398 = (($397) + -16843009)|0;
        $399 = $397 & -2139062144;
        $400 = $399 ^ -2139062144;
        $401 = $400 & $398;
        $402 = ($401|0)==(0);
        $403 = ((($w$0$i21$i$i)) + 4|0);
        if ($402) {
         $w$0$i21$i$i = $403;
        } else {
         break;
        }
       }
       $404 = $397&255;
       $405 = ($404<<24>>24)==(0);
       if ($405) {
        $$1$lcssa$i27$i$i = $w$0$i21$i$i;
       } else {
        $$pn15$i23$i$i = $w$0$i21$i$i;
        while(1) {
         $406 = ((($$pn15$i23$i$i)) + 1|0);
         $$pre$i24$i$i = HEAP8[$406>>0]|0;
         $407 = ($$pre$i24$i$i<<24>>24)==(0);
         if ($407) {
          $$1$lcssa$i27$i$i = $406;
          break;
         } else {
          $$pn15$i23$i$i = $406;
         }
        }
       }
       $408 = $$1$lcssa$i27$i$i;
       $$pn$i30$i$i = $408;
      }
      $$0$i31$i$i = (($$pn$i30$i$i) - ($387))|0;
      $409 = (($$0$i31$i$i) + 1)|0;
      $410 = (_malloc($409)|0);
      $411 = ($410|0)==(0|0);
      if ($411) {
       $$0$i12$i$i = 0;
      } else {
       _memcpy(($410|0),($388|0),($409|0))|0;
       $$0$i12$i$i = $410;
      }
      $412 = ((($193)) + 20|0);
      HEAP32[$412>>2] = $$0$i12$i$i;
      $413 = $190 & 3;
      $414 = ($413|0)==(0);
      L279: do {
       if ($414) {
        $$01$lcssa$i$i57$i = $filename;
        label = 172;
       } else {
        $$014$i$i54$i = $filename;$483 = $190;
        while(1) {
         $415 = HEAP8[$$014$i$i54$i>>0]|0;
         $416 = ($415<<24>>24)==(0);
         if ($416) {
          $$pn$i$i68$i = $483;
          break L279;
         }
         $417 = ((($$014$i$i54$i)) + 1|0);
         $418 = $417;
         $419 = $418 & 3;
         $420 = ($419|0)==(0);
         if ($420) {
          $$01$lcssa$i$i57$i = $417;
          label = 172;
          break;
         } else {
          $$014$i$i54$i = $417;$483 = $418;
         }
        }
       }
      } while(0);
      if ((label|0) == 172) {
       $w$0$i$i59$i = $$01$lcssa$i$i57$i;
       while(1) {
        $421 = HEAP32[$w$0$i$i59$i>>2]|0;
        $422 = (($421) + -16843009)|0;
        $423 = $421 & -2139062144;
        $424 = $423 ^ -2139062144;
        $425 = $424 & $422;
        $426 = ($425|0)==(0);
        $427 = ((($w$0$i$i59$i)) + 4|0);
        if ($426) {
         $w$0$i$i59$i = $427;
        } else {
         break;
        }
       }
       $428 = $421&255;
       $429 = ($428<<24>>24)==(0);
       if ($429) {
        $$1$lcssa$i$i65$i = $w$0$i$i59$i;
       } else {
        $$pn15$i$i61$i = $w$0$i$i59$i;
        while(1) {
         $430 = ((($$pn15$i$i61$i)) + 1|0);
         $$pre$i$i62$i = HEAP8[$430>>0]|0;
         $431 = ($$pre$i$i62$i<<24>>24)==(0);
         if ($431) {
          $$1$lcssa$i$i65$i = $430;
          break;
         } else {
          $$pn15$i$i61$i = $430;
         }
        }
       }
       $432 = $$1$lcssa$i$i65$i;
       $$pn$i$i68$i = $432;
      }
      $$0$i14$i$i = (($$pn$i$i68$i) - ($190))|0;
      $433 = (($$0$i14$i$i) + 1)|0;
      $434 = (_malloc($433)|0);
      $435 = ($434|0)==(0|0);
      if ($435) {
       $$0$i$i70$i = 0;
      } else {
       _memcpy(($434|0),($filename|0),($433|0))|0;
       $$0$i$i70$i = $434;
      }
      $436 = ((($193)) + 88|0);
      HEAP32[$436>>2] = $$0$i$i70$i;
     }
     HEAP32[$193>>2] = 3;
     $437 = ((($193)) + 4|0);
     HEAP32[$437>>2] = -1;
     $438 = ((($193)) + 24|0);
     HEAP32[$438>>2] = -1;
     $439 = ((($193)) + 72|0);
     $440 = $439;
     $441 = $440;
     HEAP32[$441>>2] = 0;
     $442 = (($440) + 4)|0;
     $443 = $442;
     HEAP32[$443>>2] = 0;
     _khttp_connect_file($193);
     $fp$1$i10 = $193;
    }
   } while(0);
   $456 = ((($fp$1$i10)) + 4|0);
   $457 = HEAP32[$456>>2]|0;
   $458 = ($457|0)==(-1);
   if ($458) {
    (_knet_close($fp$1$i10)|0);
    break;
   }
   $472 = ((($2)) + 32|0);
   HEAP32[$472>>2] = $fp$1$i10;
   $473 = ((($2)) + 16|0);
   HEAP32[$473>>2] = 228;
   $$0 = $2;
   STACKTOP = sp;return ($$0|0);
  } else {
   _fprintf(9772,21413,$vararg_buffer);
  }
 } while(0);
 $459 = ((($2)) + 32|0);
 HEAP32[$459>>2] = 0;
 $460 = HEAP32[6773]|0;
 $461 = ($460|0)==(0|0);
 if ($461) {
  $$0$i$i = 27136;
 } else {
  $462 = (_pthread_self()|0);
  $463 = ((($462)) + 64|0);
  $464 = HEAP32[$463>>2]|0;
  $$0$i$i = $464;
 }
 $465 = HEAP32[$$0$i$i>>2]|0;
 $466 = HEAP32[$2>>2]|0;
 _free($466);
 _free($2);
 $467 = HEAP32[6773]|0;
 $468 = ($467|0)==(0|0);
 if ($468) {
  $$0$i1$i = 27136;
 } else {
  $469 = (_pthread_self()|0);
  $470 = ((($469)) + 64|0);
  $471 = HEAP32[$470>>2]|0;
  $$0$i1$i = $471;
 }
 HEAP32[$$0$i1$i>>2] = $465;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _net_read($fpv,$buffer,$nbytes) {
 $fpv = $fpv|0;
 $buffer = $buffer|0;
 $nbytes = $nbytes|0;
 var $$$i$i$i = 0, $$$i1$i$i = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i1$i = 0, $$0$i$i$i5$i6 = 0, $$0$i$i2$i$i = 0, $$0$i$i3$i135 = 0, $$0$i$i3$i2 = 0, $$pr = 0, $$pre = 0, $$pre10 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $l$0$i = 0, $l$0$i$i = 0, $l$1$i = 0, $rest$0$i = 0, $rest$0$i$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($fpv)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0$i = 0;
  STACKTOP = sp;return ($$0$i|0);
 }
 $5 = HEAP32[$1>>2]|0;
 switch ($5|0) {
 case 2:  {
  $6 = ((($1)) + 56|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = ((($1)) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = ((($1)) + 24|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==(-1);
    if ($14) {
     $24 = $3;
    } else {
     HEAP32[$vararg_buffer>>2] = $13;
     $15 = (___syscall6(6,($vararg_buffer|0))|0);
     $16 = ($15|0)==(-4);
     $$$i$i$i = $16 ? -115 : $15;
     $17 = ($$$i$i$i>>>0)>(4294963200);
     if ($17) {
      $18 = (0 - ($$$i$i$i))|0;
      $19 = HEAP32[6773]|0;
      $20 = ($19|0)==(0|0);
      if ($20) {
       $$0$i$i$i$i = 27136;
      } else {
       $21 = (_pthread_self()|0);
       $22 = ((($21)) + 64|0);
       $23 = HEAP32[$22>>2]|0;
       $$0$i$i$i$i = $23;
      }
      HEAP32[$$0$i$i$i$i>>2] = $18;
     }
     HEAP32[$12>>2] = -1;
     $$pre = HEAP32[$2>>2]|0;
     $24 = $$pre;
    }
    HEAP32[$vararg_buffer1>>2] = $24;
    $25 = (___syscall6(6,($vararg_buffer1|0))|0);
    $26 = ($25|0)==(-4);
    $$$i1$i$i = $26 ? -115 : $25;
    $27 = ($$$i1$i$i>>>0)>(4294963200);
    if ($27) {
     $28 = (0 - ($$$i1$i$i))|0;
     $29 = HEAP32[6773]|0;
     $30 = ($29|0)==(0|0);
     if ($30) {
      $$0$i$i2$i$i = 27136;
     } else {
      $31 = (_pthread_self()|0);
      $32 = ((($31)) + 64|0);
      $33 = HEAP32[$32>>2]|0;
      $$0$i$i2$i$i = $33;
     }
     HEAP32[$$0$i$i2$i$i>>2] = $28;
    }
    HEAP32[$2>>2] = -1;
    (_kftp_connect($1)|0);
   }
   _kftp_connect_file($1);
   label = 19;
  } else {
   label = 19;
  }
  break;
 }
 case 3:  {
  $34 = ((($1)) + 56|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)==(0);
  if ($36) {
   _khttp_connect_file($1);
   label = 19;
  } else {
   label = 19;
  }
  break;
 }
 default: {
  $38 = $5;
 }
 }
 if ((label|0) == 19) {
  $$pr = HEAP32[$1>>2]|0;
  $38 = $$pr;
 }
 $37 = ($38|0)==(1);
 L30: do {
  if ($37) {
   $l$0$i = 0;$rest$0$i = $nbytes;
   while(1) {
    $39 = ($rest$0$i|0)==(0);
    if ($39) {
     $l$1$i = $l$0$i;
     break L30;
    }
    $40 = (($buffer) + ($l$0$i)|0);
    while(1) {
     $41 = HEAP32[$2>>2]|0;
     HEAP32[$vararg_buffer4>>2] = $41;
     $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
     HEAP32[$vararg_ptr7>>2] = $40;
     $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
     HEAP32[$vararg_ptr8>>2] = $rest$0$i;
     $42 = (___syscall3(3,($vararg_buffer4|0))|0);
     $43 = ($42>>>0)>(4294963200);
     if ($43) {
      $44 = (0 - ($42))|0;
      $45 = HEAP32[6773]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$0$i$i$i1$i = 27136;
      } else {
       $47 = (_pthread_self()|0);
       $48 = ((($47)) + 64|0);
       $49 = HEAP32[$48>>2]|0;
       $$0$i$i$i1$i = $49;
      }
      HEAP32[$$0$i$i$i1$i>>2] = $44;
      $$0$i$i3$i2 = -1;$52 = $45;
     } else {
      $50 = ($42|0)<(0);
      if (!($50)) {
       $$0$i$i3$i135 = $42;
       break;
      }
      $$pre10 = HEAP32[6773]|0;
      $$0$i$i3$i2 = $42;$52 = $$pre10;
     }
     $51 = ($52|0)==(0|0);
     if ($51) {
      $$0$i$i = 27136;
     } else {
      $53 = (_pthread_self()|0);
      $54 = ((($53)) + 64|0);
      $55 = HEAP32[$54>>2]|0;
      $$0$i$i = $55;
     }
     $56 = HEAP32[$$0$i$i>>2]|0;
     $57 = ($56|0)==(4);
     if (!($57)) {
      label = 32;
      break;
     }
    }
    if ((label|0) == 32) {
     label = 0;
     $58 = ($$0$i$i3$i2|0)<(0);
     if ($58) {
      $$0$i = -1;
      break;
     } else {
      $$0$i$i3$i135 = $$0$i$i3$i2;
     }
    }
    $59 = ($$0$i$i3$i135|0)==(0);
    if ($59) {
     $l$1$i = $l$0$i;
     break L30;
    }
    $60 = (($l$0$i) + ($$0$i$i3$i135))|0;
    $61 = (($rest$0$i) - ($$0$i$i3$i135))|0;
    $l$0$i = $60;$rest$0$i = $61;
   }
   STACKTOP = sp;return ($$0$i|0);
  } else {
   $62 = HEAP32[$2>>2]|0;
   $l$0$i$i = 0;$rest$0$i$i = $nbytes;
   while(1) {
    $63 = ($rest$0$i$i|0)==(0);
    if ($63) {
     $l$1$i = $l$0$i$i;
     break L30;
    }
    $64 = (_socket_wait($62,1)|0);
    $65 = ($64|0)<(1);
    if ($65) {
     $l$1$i = $l$0$i$i;
     break L30;
    }
    $66 = (($buffer) + ($l$0$i$i)|0);
    HEAP32[$vararg_buffer9>>2] = $62;
    $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
    HEAP32[$vararg_ptr12>>2] = $66;
    $vararg_ptr13 = ((($vararg_buffer9)) + 8|0);
    HEAP32[$vararg_ptr13>>2] = $rest$0$i$i;
    $67 = (___syscall3(3,($vararg_buffer9|0))|0);
    $68 = ($67>>>0)>(4294963200);
    if ($68) {
     $69 = (0 - ($67))|0;
     $70 = HEAP32[6773]|0;
     $71 = ($70|0)==(0|0);
     if ($71) {
      $$0$i$i$i$i$i = 27136;
     } else {
      $72 = (_pthread_self()|0);
      $73 = ((($72)) + 64|0);
      $74 = HEAP32[$73>>2]|0;
      $$0$i$i$i$i$i = $74;
     }
     HEAP32[$$0$i$i$i$i$i>>2] = $69;
     $$0$i$i$i5$i6 = -1;
    } else {
     $75 = ($67|0)==(0);
     if ($75) {
      $l$1$i = $l$0$i$i;
      break L30;
     } else {
      $$0$i$i$i5$i6 = $67;
     }
    }
    $76 = (($l$0$i$i) + ($$0$i$i$i5$i6))|0;
    $77 = (($rest$0$i$i) - ($$0$i$i$i5$i6))|0;
    $l$0$i$i = $76;$rest$0$i$i = $77;
   }
  }
 } while(0);
 $78 = ($l$1$i|0)<(0);
 $79 = $78 << 31 >> 31;
 $80 = ((($1)) + 8|0);
 $81 = $80;
 $82 = $81;
 $83 = HEAP32[$82>>2]|0;
 $84 = (($81) + 4)|0;
 $85 = $84;
 $86 = HEAP32[$85>>2]|0;
 $87 = (_i64Add(($83|0),($86|0),($l$1$i|0),($79|0))|0);
 $88 = tempRet0;
 $89 = $80;
 $90 = $89;
 HEAP32[$90>>2] = $87;
 $91 = (($89) + 4)|0;
 $92 = $91;
 HEAP32[$92>>2] = $88;
 $$0$i = $l$1$i;
 STACKTOP = sp;return ($$0$i|0);
}
function _net_seek($fpv,$offset,$whence) {
 $fpv = $fpv|0;
 $offset = $offset|0;
 $whence = $whence|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i1$i = 0, $$0$i3$i = 0, $$off0 = 0, $$off05 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$03$i$i = 0, $i$12$i$i = 0, $result$i$i = 0, $s$0$lcssa$i$i = 0;
 var $s$01$i$i = 0, $s$1$i$i = 0, $vararg_buffer = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $result$i$i = sp + 36|0;
 $0 = ((($fpv)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($whence|0)==(0);
 if ($2) {
  $3 = ($offset|0)<(0);
  $4 = $3 << 31 >> 31;
  $5 = ((($1)) + 8|0);
  $6 = $5;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) + 4)|0;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($offset|0)==($8|0);
  $13 = ($4|0)==($11|0);
  $14 = $12 & $13;
  if ($14) {
   $$0$i = 0;
   STACKTOP = sp;return ($$0$i|0);
  }
 }
 $15 = HEAP32[$1>>2]|0;
 switch ($15|0) {
 case 1:  {
  $16 = ((($1)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer>>2] = $17;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 0;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $offset;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $result$i$i;
  $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
  HEAP32[$vararg_ptr4>>2] = $whence;
  $18 = (___syscall140(140,($vararg_buffer|0))|0);
  $19 = ($18>>>0)>(4294963200);
  if ($19) {
   $20 = (0 - ($18))|0;
   $21 = HEAP32[6773]|0;
   $22 = ($21|0)==(0|0);
   if ($22) {
    $$0$i$i$i$i = 27136;
   } else {
    $23 = (_pthread_self()|0);
    $24 = ((($23)) + 64|0);
    $25 = HEAP32[$24>>2]|0;
    $$0$i$i$i$i = $25;
   }
   HEAP32[$$0$i$i$i$i>>2] = $20;
   $$0$i = -1;
   STACKTOP = sp;return ($$0$i|0);
  } else {
   $26 = ($18|0)!=(0);
   $27 = HEAP32[$result$i$i>>2]|0;
   $28 = $26 ? -1 : $27;
   $29 = ($28|0)==(-1);
   if ($29) {
    $$0$i = -1;
    STACKTOP = sp;return ($$0$i|0);
   }
   $30 = ($28|0)<(0);
   $31 = $30 << 31 >> 31;
   $32 = ((($1)) + 8|0);
   $33 = $32;
   $34 = $33;
   HEAP32[$34>>2] = $28;
   $35 = (($33) + 4)|0;
   $36 = $35;
   HEAP32[$36>>2] = $31;
   $$0$i = $28;
   STACKTOP = sp;return ($$0$i|0);
  }
  break;
 }
 case 2:  {
  $37 = ($whence|0)==(1);
  do {
   if ($37) {
    $38 = ($offset|0)<(0);
    $39 = $38 << 31 >> 31;
    $40 = ((($1)) + 8|0);
    $41 = $40;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = (_i64Add(($43|0),($46|0),($offset|0),($39|0))|0);
    $48 = tempRet0;
    $49 = $40;
    $50 = $49;
    HEAP32[$50>>2] = $47;
    $51 = (($49) + 4)|0;
    $52 = $51;
    HEAP32[$52>>2] = $48;
    $$off05 = $47;
   } else {
    if ($2) {
     $53 = ($offset|0)<(0);
     $54 = $53 << 31 >> 31;
     $55 = ((($1)) + 8|0);
     $56 = $55;
     $57 = $56;
     HEAP32[$57>>2] = $offset;
     $58 = (($56) + 4)|0;
     $59 = $58;
     HEAP32[$59>>2] = $54;
     $$off05 = $offset;
     break;
    }
    $60 = ($whence|0)==(2);
    if ($60) {
     $61 = ((($1)) + 80|0);
     $62 = $61;
     $63 = $62;
     $64 = HEAP32[$63>>2]|0;
     $65 = (($62) + 4)|0;
     $66 = $65;
     $67 = HEAP32[$66>>2]|0;
     $68 = ($offset|0)<(0);
     $69 = $68 << 31 >> 31;
     $70 = (_i64Add(($64|0),($67|0),($offset|0),($69|0))|0);
     $71 = tempRet0;
     $72 = ((($1)) + 8|0);
     $73 = $72;
     $74 = $73;
     HEAP32[$74>>2] = $70;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = $71;
     $$off05 = $70;
     break;
    } else {
     $$0$i = -1;
     STACKTOP = sp;return ($$0$i|0);
    }
   }
  } while(0);
  $77 = ((($1)) + 56|0);
  HEAP32[$77>>2] = 0;
  $$0$i = $$off05;
  STACKTOP = sp;return ($$0$i|0);
  break;
 }
 case 3:  {
  L51: do {
   switch ($whence|0) {
   case 2:  {
    _fprintf(9772,21459,$vararg_buffer5);
    $78 = HEAP32[6773]|0;
    $79 = ($78|0)==(0|0);
    if ($79) {
     $$0$i$i = 27136;
    } else {
     $80 = (_pthread_self()|0);
     $81 = ((($80)) + 64|0);
     $82 = HEAP32[$81>>2]|0;
     $$0$i$i = $82;
    }
    HEAP32[$$0$i$i>>2] = 29;
    $$0$i = -1;
    STACKTOP = sp;return ($$0$i|0);
    break;
   }
   case 1:  {
    $83 = ($offset|0)<(0);
    $84 = $83 << 31 >> 31;
    $85 = ((($1)) + 8|0);
    $86 = $85;
    $87 = $86;
    $88 = HEAP32[$87>>2]|0;
    $89 = (($86) + 4)|0;
    $90 = $89;
    $91 = HEAP32[$90>>2]|0;
    $92 = (_i64Add(($88|0),($91|0),($offset|0),($84|0))|0);
    $93 = tempRet0;
    $94 = $85;
    $95 = $94;
    HEAP32[$95>>2] = $92;
    $96 = (($94) + 4)|0;
    $97 = $96;
    HEAP32[$97>>2] = $93;
    $$off0 = $92;
    break;
   }
   default: {
    if ($2) {
     $98 = ($offset|0)<(0);
     $99 = $98 << 31 >> 31;
     $100 = ((($1)) + 8|0);
     $101 = $100;
     $102 = $101;
     HEAP32[$102>>2] = $offset;
     $103 = (($101) + 4)|0;
     $104 = $103;
     HEAP32[$104>>2] = $99;
     $$off0 = $offset;
     break L51;
    } else {
     $$0$i = -1;
     STACKTOP = sp;return ($$0$i|0);
    }
   }
   }
  } while(0);
  $105 = ((($1)) + 56|0);
  HEAP32[$105>>2] = 0;
  $$0$i = $$off0;
  STACKTOP = sp;return ($$0$i|0);
  break;
 }
 default: {
  $106 = HEAP32[6773]|0;
  $107 = ($106|0)==(0|0);
  if ($107) {
   $$0$i1$i = 27136;
  } else {
   $108 = (_pthread_self()|0);
   $109 = ((($108)) + 64|0);
   $110 = HEAP32[$109>>2]|0;
   $$0$i1$i = $110;
  }
  HEAP32[$$0$i1$i>>2] = 22;
  $111 = HEAP32[6773]|0;
  $112 = ($111|0)==(0|0);
  if ($112) {
   $$0$i3$i = 27136;
  } else {
   $113 = (_pthread_self()|0);
   $114 = ((($113)) + 64|0);
   $115 = HEAP32[$114>>2]|0;
   $$0$i3$i = $115;
  }
  $116 = HEAP32[$$0$i3$i>>2]|0;
  $i$03$i$i = 0;
  while(1) {
   $118 = (24836 + ($i$03$i$i)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = ($120|0)==($116|0);
   if ($121) {
    label = 30;
    break;
   }
   $122 = (($i$03$i$i) + 1)|0;
   $123 = ($122|0)==(87);
   if ($123) {
    $i$12$i$i = 87;$s$01$i$i = 24924;
    label = 33;
    break;
   } else {
    $i$03$i$i = $122;
   }
  }
  if ((label|0) == 30) {
   $117 = ($i$03$i$i|0)==(0);
   if ($117) {
    $s$0$lcssa$i$i = 24924;
   } else {
    $i$12$i$i = $i$03$i$i;$s$01$i$i = 24924;
    label = 33;
   }
  }
  if ((label|0) == 33) {
   while(1) {
    label = 0;
    $s$1$i$i = $s$01$i$i;
    while(1) {
     $124 = HEAP8[$s$1$i$i>>0]|0;
     $125 = ($124<<24>>24)==(0);
     $126 = ((($s$1$i$i)) + 1|0);
     if ($125) {
      break;
     } else {
      $s$1$i$i = $126;
     }
    }
    $127 = (($i$12$i$i) + -1)|0;
    $128 = ($127|0)==(0);
    if ($128) {
     $s$0$lcssa$i$i = $126;
     break;
    } else {
     $i$12$i$i = $127;$s$01$i$i = $126;
     label = 33;
    }
   }
  }
  HEAP32[$vararg_buffer7>>2] = $s$0$lcssa$i$i;
  _fprintf(9772,21529,$vararg_buffer7);
  $$0$i = -1;
  STACKTOP = sp;return ($$0$i|0);
 }
 }
 return (0)|0;
}
function _net_close($fpv) {
 $fpv = $fpv|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($fpv)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_knet_close($1)|0);
 return ($2|0);
}
function _kh_resize_s2i($h,$new_n_buckets) {
 $h = $h|0;
 $new_n_buckets = $new_n_buckets|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$pn = 0, $$pre$phi5Z2D = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $h$0$i = 0, $i$0 = 0, $j$1 = 0, $key$0 = 0, $phitmp = 0, $phitmp10 = 0, $s$pn$i = 0, $step$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($new_n_buckets) + -1)|0;
 $1 = $0 >>> 1;
 $2 = $0 | $1;
 $3 = $2 >>> 2;
 $4 = $2 | $3;
 $5 = $4 >>> 4;
 $6 = $4 | $5;
 $7 = $6 >>> 8;
 $8 = $6 | $7;
 $9 = $8 >>> 16;
 $10 = $8 | $9;
 $11 = (($10) + 1)|0;
 $12 = ($11>>>0)<(4);
 $$ = $12 ? 4 : $11;
 $13 = ((($h)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($$>>>0));
 $16 = $15 * 0.77000000000000001;
 $17 = $16 + 0.5;
 $18 = (~~(($17))>>>0);
 $19 = ($14>>>0)<($18>>>0);
 if (!($19)) {
  $$0 = 0;
  return ($$0|0);
 }
 $20 = ($$>>>0)<(16);
 $21 = $$ >>> 4;
 $phitmp10 = $21 << 2;
 $22 = $20 ? 4 : $phitmp10;
 $23 = (_malloc($22)|0);
 $24 = ($23|0)==(0|0);
 if ($24) {
  $$0 = -1;
  return ($$0|0);
 }
 $25 = $$ >>> 4;
 $phitmp = $25 << 2;
 $26 = $20 ? 4 : $phitmp;
 _memset(($23|0),-86,($26|0))|0;
 $27 = HEAP32[$h>>2]|0;
 $28 = ($27>>>0)<($$>>>0);
 $29 = ((($h)) + 20|0);
 do {
  if ($28) {
   $30 = HEAP32[$29>>2]|0;
   $31 = $$ << 2;
   $32 = (_realloc($30,$31)|0);
   $33 = ($32|0)==(0|0);
   if ($33) {
    _free($23);
    $$0 = -1;
    return ($$0|0);
   }
   HEAP32[$29>>2] = $32;
   $34 = ((($h)) + 24|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $$ << 3;
   $37 = (_realloc($35,$36)|0);
   $38 = ($37|0)==(0|0);
   if (!($38)) {
    HEAP32[$34>>2] = $37;
    $$pre$phi5Z2D = $34;
    break;
   }
   _free($23);
   $$0 = -1;
   return ($$0|0);
  } else {
   $$pre4 = ((($h)) + 24|0);
   $$pre$phi5Z2D = $$pre4;
  }
 } while(0);
 $39 = ((($h)) + 16|0);
 $40 = (($$) + -1)|0;
 $j$1 = 0;
 while(1) {
  $41 = HEAP32[$h>>2]|0;
  $42 = ($j$1|0)==($41|0);
  if ($42) {
   break;
  }
  $43 = $j$1 >>> 4;
  $44 = HEAP32[$39>>2]|0;
  $45 = (($44) + ($43<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $j$1 << 1;
  $48 = $47 & 30;
  $49 = 3 << $48;
  $50 = $46 & $49;
  $51 = ($50|0)==(0);
  if ($51) {
   $52 = HEAP32[$29>>2]|0;
   $53 = (($52) + ($j$1<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = HEAP32[$$pre$phi5Z2D>>2]|0;
   $56 = (($55) + ($j$1<<3)|0);
   $57 = $56;
   $58 = $57;
   $59 = HEAP32[$58>>2]|0;
   $60 = (($57) + 4)|0;
   $61 = $60;
   $62 = HEAP32[$61>>2]|0;
   $63 = 1 << $48;
   $64 = $46 | $63;
   HEAP32[$45>>2] = $64;
   $106 = $59;$109 = $62;$key$0 = $54;
   while(1) {
    $65 = HEAP8[$key$0>>0]|0;
    $66 = $65 << 24 >> 24;
    $67 = ($65<<24>>24)==(0);
    L26: do {
     if ($67) {
      $$pn = $66;$step$0 = 0;
     } else {
      $h$0$i = $66;$s$pn$i = $key$0;
      while(1) {
       $$0$i = ((($s$pn$i)) + 1|0);
       $68 = HEAP8[$$0$i>>0]|0;
       $69 = ($68<<24>>24)==(0);
       if ($69) {
        $$pn = $h$0$i;$step$0 = 0;
        break L26;
       }
       $70 = ($h$0$i*31)|0;
       $71 = $68 << 24 >> 24;
       $72 = (($70) + ($71))|0;
       $h$0$i = $72;$s$pn$i = $$0$i;
      }
     }
    } while(0);
    while(1) {
     $i$0 = $$pn & $40;
     $73 = $i$0 >>> 4;
     $74 = (($23) + ($73<<2)|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = $i$0 << 1;
     $77 = $76 & 30;
     $78 = 2 << $77;
     $79 = $75 & $78;
     $80 = ($79|0)==(0);
     if (!($80)) {
      break;
     }
     $81 = (($step$0) + 1)|0;
     $82 = (($i$0) + ($81))|0;
     $$pn = $82;$step$0 = $81;
    }
    $83 = $78 ^ -1;
    $84 = $75 & $83;
    HEAP32[$74>>2] = $84;
    $85 = HEAP32[$h>>2]|0;
    $86 = ($i$0>>>0)<($85>>>0);
    if (!($86)) {
     break;
    }
    $87 = HEAP32[$39>>2]|0;
    $88 = (($87) + ($73<<2)|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = 3 << $77;
    $91 = $89 & $90;
    $92 = ($91|0)==(0);
    if (!($92)) {
     break;
    }
    $93 = HEAP32[$29>>2]|0;
    $94 = (($93) + ($i$0<<2)|0);
    $95 = HEAP32[$94>>2]|0;
    HEAP32[$94>>2] = $key$0;
    $96 = HEAP32[$$pre$phi5Z2D>>2]|0;
    $97 = (($96) + ($i$0<<3)|0);
    $98 = $97;
    $99 = $98;
    $100 = HEAP32[$99>>2]|0;
    $101 = (($98) + 4)|0;
    $102 = $101;
    $103 = HEAP32[$102>>2]|0;
    $104 = $97;
    $105 = $104;
    HEAP32[$105>>2] = $106;
    $107 = (($104) + 4)|0;
    $108 = $107;
    HEAP32[$108>>2] = $109;
    $110 = 1 << $77;
    $111 = HEAP32[$39>>2]|0;
    $112 = (($111) + ($73<<2)|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = $113 | $110;
    HEAP32[$112>>2] = $114;
    $106 = $100;$109 = $103;$key$0 = $95;
   }
   $115 = HEAP32[$29>>2]|0;
   $116 = (($115) + ($i$0<<2)|0);
   HEAP32[$116>>2] = $key$0;
   $117 = HEAP32[$$pre$phi5Z2D>>2]|0;
   $118 = (($117) + ($i$0<<3)|0);
   $119 = $118;
   $120 = $119;
   HEAP32[$120>>2] = $106;
   $121 = (($119) + 4)|0;
   $122 = $121;
   HEAP32[$122>>2] = $109;
  }
  $123 = (($j$1) + 1)|0;
  $j$1 = $123;
 }
 $124 = ($j$1>>>0)>($$>>>0);
 if ($124) {
  $125 = HEAP32[$29>>2]|0;
  $126 = $$ << 2;
  $127 = (_realloc($125,$126)|0);
  HEAP32[$29>>2] = $127;
  $128 = HEAP32[$$pre$phi5Z2D>>2]|0;
  $129 = $$ << 3;
  $130 = (_realloc($128,$129)|0);
  HEAP32[$$pre$phi5Z2D>>2] = $130;
 }
 $131 = HEAP32[$39>>2]|0;
 _free($131);
 HEAP32[$39>>2] = $23;
 HEAP32[$h>>2] = $$;
 $132 = HEAP32[$13>>2]|0;
 $133 = ((($h)) + 8|0);
 HEAP32[$133>>2] = $132;
 $134 = ((($h)) + 12|0);
 HEAP32[$134>>2] = $18;
 $$0 = 0;
 return ($$0|0);
}
function _kh_put_s2i($h,$key,$ret) {
 $h = $h|0;
 $key = $key|0;
 $ret = $ret|0;
 var $$0 = 0, $$0$i = 0, $$014$i = 0, $$05$i = 0, $$lcssa$i = 0, $$lcssa2$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $h$0$i = 0, $h$1$i = 0, $i$0 = 0, $i$1 = 0, $i$1$site$2 = 0, $i$16 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond3$i = 0, $s$pn$i = 0, $site$0 = 0, $site$0$i$0 = 0, $site$27 = 0, $step$0 = 0, $storemerge1 = 0, $x$0 = 0, $x$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($h)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($h)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 do {
  if (!($4)) {
   $5 = HEAP32[$h>>2]|0;
   $6 = ((($h)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7 << 1;
   $9 = ($5>>>0)>($8>>>0);
   if ($9) {
    $10 = (($5) + -1)|0;
    $11 = (_kh_resize_s2i($h,$10)|0);
    $12 = ($11|0)<(0);
    if (!($12)) {
     break;
    }
    HEAP32[$ret>>2] = -1;
    $13 = HEAP32[$h>>2]|0;
    $$0 = $13;
    return ($$0|0);
   } else {
    $14 = (($5) + 1)|0;
    $15 = (_kh_resize_s2i($h,$14)|0);
    $16 = ($15|0)<(0);
    if (!($16)) {
     break;
    }
    HEAP32[$ret>>2] = -1;
    $17 = HEAP32[$h>>2]|0;
    $$0 = $17;
    return ($$0|0);
   }
  }
 } while(0);
 $18 = HEAP32[$h>>2]|0;
 $19 = (($18) + -1)|0;
 $20 = HEAP8[$key>>0]|0;
 $21 = $20 << 24 >> 24;
 $22 = ($20<<24>>24)==(0);
 L11: do {
  if ($22) {
   $h$1$i = $21;
  } else {
   $h$0$i = $21;$s$pn$i = $key;
   while(1) {
    $$0$i = ((($s$pn$i)) + 1|0);
    $23 = HEAP8[$$0$i>>0]|0;
    $24 = ($23<<24>>24)==(0);
    if ($24) {
     $h$1$i = $h$0$i;
     break L11;
    }
    $25 = ($h$0$i*31)|0;
    $26 = $23 << 24 >> 24;
    $27 = (($25) + ($26))|0;
    $h$0$i = $27;$s$pn$i = $$0$i;
   }
  }
 } while(0);
 $28 = $h$1$i & $19;
 $29 = $28 >>> 4;
 $30 = ((($h)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($29<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $28 << 1;
 $35 = $34 & 30;
 $36 = 2 << $35;
 $37 = $33 & $36;
 $38 = ($37|0)==(0);
 do {
  if ($38) {
   $39 = ((($h)) + 20|0);
   $i$0 = $28;$site$0 = $18;$step$0 = 0;
   while(1) {
    $40 = $i$0 >>> 4;
    $41 = (($31) + ($40<<2)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $i$0 << 1;
    $44 = $43 & 30;
    $45 = 2 << $44;
    $46 = $42 & $45;
    $47 = ($46|0)==(0);
    if (!($47)) {
     $i$16 = $i$0;$site$27 = $site$0;
     break;
    }
    $48 = 1 << $44;
    $49 = $42 & $48;
    $50 = ($49|0)==(0);
    if ($50) {
     $51 = HEAP32[$39>>2]|0;
     $52 = (($51) + ($i$0<<2)|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = HEAP8[$53>>0]|0;
     $55 = ($54<<24>>24)!=($20<<24>>24);
     $56 = ($54<<24>>24)==(0);
     $or$cond3$i = $56 | $55;
     if ($or$cond3$i) {
      $$lcssa$i = $54;$$lcssa2$i = $20;
     } else {
      $$014$i = $53;$$05$i = $key;
      while(1) {
       $57 = ((($$014$i)) + 1|0);
       $58 = ((($$05$i)) + 1|0);
       $59 = HEAP8[$57>>0]|0;
       $60 = HEAP8[$58>>0]|0;
       $61 = ($59<<24>>24)!=($60<<24>>24);
       $62 = ($59<<24>>24)==(0);
       $or$cond$i = $62 | $61;
       if ($or$cond$i) {
        $$lcssa$i = $59;$$lcssa2$i = $60;
        break;
       } else {
        $$014$i = $57;$$05$i = $58;
       }
      }
     }
     $63 = ($$lcssa$i<<24>>24)==($$lcssa2$i<<24>>24);
     if ($63) {
      $i$16 = $i$0;$site$27 = $site$0;
      break;
     }
    }
    $site$0$i$0 = $50 ? $site$0 : $i$0;
    $64 = (($step$0) + 1)|0;
    $65 = (($i$0) + ($64))|0;
    $66 = $65 & $19;
    $67 = ($66|0)==($28|0);
    if ($67) {
     $i$1 = $28;$x$0 = $site$0$i$0;
     label = 18;
     break;
    } else {
     $i$0 = $66;$site$0 = $site$0$i$0;$step$0 = $64;
    }
   }
   if ((label|0) == 18) {
    $68 = ($x$0|0)==($18|0);
    if ($68) {
     $i$16 = $i$1;$site$27 = $x$0;
    } else {
     $x$3 = $x$0;
     break;
    }
   }
   $69 = $i$16 >>> 4;
   $70 = (($31) + ($69<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $i$16 << 1;
   $73 = $72 & 30;
   $74 = 2 << $73;
   $75 = $71 & $74;
   $76 = ($75|0)==(0);
   $77 = ($site$27|0)==($18|0);
   $or$cond = $76 | $77;
   $i$1$site$2 = $or$cond ? $i$16 : $site$27;
   $x$3 = $i$1$site$2;
  } else {
   $x$3 = $28;
  }
 } while(0);
 $78 = $x$3 >>> 4;
 $79 = (($31) + ($78<<2)|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $x$3 << 1;
 $82 = $81 & 30;
 $83 = 2 << $82;
 $84 = $80 & $83;
 $85 = ($84|0)==(0);
 if ($85) {
  $100 = 1 << $82;
  $101 = $80 & $100;
  $102 = ($101|0)==(0);
  if ($102) {
   $storemerge1 = 0;
  } else {
   $103 = ((($h)) + 20|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (($104) + ($x$3<<2)|0);
   HEAP32[$105>>2] = $key;
   $106 = 3 << $82;
   $107 = $106 ^ -1;
   $108 = HEAP32[$30>>2]|0;
   $109 = (($108) + ($78<<2)|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $110 & $107;
   HEAP32[$109>>2] = $111;
   $112 = ((($h)) + 4|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = (($113) + 1)|0;
   HEAP32[$112>>2] = $114;
   $storemerge1 = 2;
  }
 } else {
  $86 = ((($h)) + 20|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($87) + ($x$3<<2)|0);
  HEAP32[$88>>2] = $key;
  $89 = 3 << $82;
  $90 = $89 ^ -1;
  $91 = HEAP32[$30>>2]|0;
  $92 = (($91) + ($78<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $93 & $90;
  HEAP32[$92>>2] = $94;
  $95 = ((($h)) + 4|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) + 1)|0;
  HEAP32[$95>>2] = $97;
  $98 = HEAP32[$0>>2]|0;
  $99 = (($98) + 1)|0;
  HEAP32[$0>>2] = $99;
  $storemerge1 = 1;
 }
 HEAP32[$ret>>2] = $storemerge1;
 $$0 = $x$3;
 return ($$0|0);
}
function _hts_getline($fp,$str) {
 $fp = $fp|0;
 $str = $str|0;
 var $$0$i$i = 0, $$mask$i$i = 0, $$mask1$i$i = 0, $$pre = 0, $$pre10 = 0, $$pre6 = 0, $$pre7 = 0, $$pre8 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $gotany$0$i$i = 0, $i$0$i$i = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($fp)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$str>>2] = 0;
 $2 = ((($1)) + 4|0);
 $3 = ((($1)) + 28|0);
 $4 = ((($str)) + 4|0);
 $5 = ((($str)) + 8|0);
 $6 = ((($1)) + 8|0);
 $7 = ((($1)) + 24|0);
 $$pre = HEAP32[$1>>2]|0;
 $$pre6 = HEAP32[$2>>2]|0;
 $10 = $$pre6;$53 = 0;$54 = 0;$9 = $$pre;$gotany$0$i$i = 0;
 while(1) {
  $8 = ($9|0)<($10|0);
  if ($8) {
   $22 = $10;$32 = $9;
  } else {
   $11 = HEAP32[$6>>2]|0;
   $$mask1$i$i = $11 & 3;
   $12 = ($$mask1$i$i|0)==(0);
   if (!($12)) {
    $75 = $11;$79 = $10;
    label = 14;
    break;
   }
   HEAP32[$1>>2] = 0;
   $13 = HEAP32[$7>>2]|0;
   $14 = HEAP32[$3>>2]|0;
   $15 = $11 >> 2;
   $16 = (_bgzf_read($13,$14,$15)|0);
   HEAP32[$2>>2] = $16;
   $17 = ($16|0)==(0);
   if ($17) {
    label = 6;
    break;
   }
   $$pre7 = HEAP32[$1>>2]|0;
   $22 = $16;$32 = $$pre7;
  }
  $i$0$i$i = $32;
  while(1) {
   $21 = ($i$0$i$i|0)<($22|0);
   if (!($21)) {
    break;
   }
   $23 = HEAP32[$3>>2]|0;
   $24 = (($23) + ($i$0$i$i)|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = ($25<<24>>24)==(10);
   if ($26) {
    break;
   }
   $27 = (($i$0$i$i) + 1)|0;
   $i$0$i$i = $27;
  }
  $28 = HEAP32[$4>>2]|0;
  $29 = HEAP32[$str>>2]|0;
  $30 = (($28) - ($29))|0;
  $31 = (($i$0$i$i) - ($32))|0;
  $33 = (($31) + 1)|0;
  $34 = ($30>>>0)<($33>>>0);
  if ($34) {
   $35 = (($29) + ($31))|0;
   $36 = $35 >>> 1;
   $37 = $35 | $36;
   $38 = $37 >>> 2;
   $39 = $37 | $38;
   $40 = $39 >>> 4;
   $41 = $39 | $40;
   $42 = $41 >>> 8;
   $43 = $41 | $42;
   $44 = $43 >>> 16;
   $45 = $43 | $44;
   $46 = (($45) + 1)|0;
   HEAP32[$4>>2] = $46;
   $47 = HEAP32[$5>>2]|0;
   $48 = (_realloc($47,$46)|0);
   HEAP32[$5>>2] = $48;
   $$pre8 = HEAP32[$1>>2]|0;
   $$pre9 = HEAP32[$2>>2]|0;
   $50 = $$pre8;$58 = $$pre9;
  } else {
   $50 = $32;$58 = $22;
  }
  $49 = (($i$0$i$i) - ($50))|0;
  $51 = ($49|0)<(0);
  $52 = $51 << 31 >> 31;
  $55 = (_i64Add(($53|0),($54|0),($49|0),($52|0))|0);
  $56 = tempRet0;
  $57 = ($i$0$i$i|0)<($58|0);
  $59 = $57&1;
  $60 = (_i64Add(($55|0),($56|0),($59|0),0)|0);
  $61 = tempRet0;
  $62 = HEAP32[$5>>2]|0;
  $63 = HEAP32[$str>>2]|0;
  $64 = (($62) + ($63)|0);
  $65 = HEAP32[$3>>2]|0;
  $66 = (($65) + ($50)|0);
  _memcpy(($64|0),($66|0),($49|0))|0;
  $67 = HEAP32[$str>>2]|0;
  $68 = HEAP32[$1>>2]|0;
  $69 = (($i$0$i$i) - ($68))|0;
  $70 = (($67) + ($69))|0;
  HEAP32[$str>>2] = $70;
  $71 = (($i$0$i$i) + 1)|0;
  HEAP32[$1>>2] = $71;
  $72 = HEAP32[$2>>2]|0;
  $73 = ($i$0$i$i|0)<($72|0);
  if ($73) {
   $87 = $60;$88 = $61;
   break;
  } else {
   $10 = $72;$53 = $60;$54 = $61;$9 = $71;$gotany$0$i$i = 1;
  }
 }
 if ((label|0) == 6) {
  $18 = HEAP32[$6>>2]|0;
  $19 = $18 & -4;
  $20 = $19 | 1;
  HEAP32[$6>>2] = $20;
  $75 = $20;$79 = 0;
  label = 14;
 }
 if ((label|0) == 14) {
  $74 = ($gotany$0$i$i|0)!=(0);
  $$mask$i$i = $75 & 3;
  $76 = ($$mask$i$i|0)==(0);
  $or$cond = $74 | $76;
  if ($or$cond) {
   $87 = $53;$88 = $54;
  } else {
   $77 = HEAP32[$1>>2]|0;
   $78 = ($77|0)<($79|0);
   if ($78) {
    $87 = $53;$88 = $54;
   } else {
    $$0$i$i = -1;
    $113 = ((($fp)) + 8|0);
    $114 = $113;
    $115 = $114;
    $116 = HEAP32[$115>>2]|0;
    $117 = (($114) + 4)|0;
    $118 = $117;
    $119 = HEAP32[$118>>2]|0;
    $120 = (_i64Add(($116|0),($119|0),1,0)|0);
    $121 = tempRet0;
    $122 = $113;
    $123 = $122;
    HEAP32[$123>>2] = $120;
    $124 = (($122) + 4)|0;
    $125 = $124;
    HEAP32[$125>>2] = $121;
    return ($$0$i$i|0);
   }
  }
 }
 $80 = ((($1)) + 16|0);
 $81 = $80;
 $82 = $81;
 $83 = HEAP32[$82>>2]|0;
 $84 = (($81) + 4)|0;
 $85 = $84;
 $86 = HEAP32[$85>>2]|0;
 $89 = (_i64Add(($83|0),($86|0),($87|0),($88|0))|0);
 $90 = tempRet0;
 $91 = $80;
 $92 = $91;
 HEAP32[$92>>2] = $89;
 $93 = (($91) + 4)|0;
 $94 = $93;
 HEAP32[$94>>2] = $90;
 $95 = HEAP32[$5>>2]|0;
 $96 = ($95|0)==(0|0);
 if ($96) {
  HEAP32[$4>>2] = 1;
  $97 = (_malloc(1)|0);
  $98 = ($97|0)==(0|0);
  if (!($98)) {
   $99 = ((($97)) + -4|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = $100 & 3;
   $102 = ($101|0)==(0);
   if (!($102)) {
    HEAP8[$97>>0] = 0;
   }
  }
  HEAP32[$5>>2] = $97;
  $$pre10 = HEAP32[$str>>2]|0;
  $110 = $97;$111 = $$pre10;
 } else {
  $103 = HEAP32[$str>>2]|0;
  $104 = ($103>>>0)>(1);
  if ($104) {
   $105 = (($103) + -1)|0;
   $106 = (($95) + ($105)|0);
   $107 = HEAP8[$106>>0]|0;
   $108 = ($107<<24>>24)==(13);
   if ($108) {
    HEAP32[$str>>2] = $105;
    $110 = $95;$111 = $105;
   } else {
    $110 = $95;$111 = $103;
   }
  } else {
   $110 = $95;$111 = $103;
  }
 }
 $109 = (($110) + ($111)|0);
 HEAP8[$109>>0] = 0;
 $112 = HEAP32[$str>>2]|0;
 $$0$i$i = $112;
 $113 = ((($fp)) + 8|0);
 $114 = $113;
 $115 = $114;
 $116 = HEAP32[$115>>2]|0;
 $117 = (($114) + 4)|0;
 $118 = $117;
 $119 = HEAP32[$118>>2]|0;
 $120 = (_i64Add(($116|0),($119|0),1,0)|0);
 $121 = tempRet0;
 $122 = $113;
 $123 = $122;
 HEAP32[$123>>2] = $120;
 $124 = (($122) + 4)|0;
 $125 = $124;
 HEAP32[$125>>2] = $121;
 return ($$0$i$i|0);
}
function _bam_hdr_destroy($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($h|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($h)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $i$0 = 0;
  while(1) {
   $4 = HEAP32[$h>>2]|0;
   $5 = ($i$0|0)<($4|0);
   if (!($5)) {
    break;
   }
   $6 = HEAP32[$1>>2]|0;
   $7 = (($6) + ($i$0<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   _free($8);
   $9 = (($i$0) + 1)|0;
   $i$0 = $9;
  }
  $10 = HEAP32[$1>>2]|0;
  _free($10);
  $11 = ((($h)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  _free($12);
 }
 $13 = ((($h)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 _free($14);
 $15 = ((($h)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 _free($16);
 $17 = ((($h)) + 28|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if (!($19)) {
  $20 = ((($18)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  _free($21);
  $22 = ((($18)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  _free($23);
  $24 = ((($18)) + 24|0);
  $25 = HEAP32[$24>>2]|0;
  _free($25);
  _free($18);
 }
 _free($h);
 return;
}
function _bam_name2id($h,$ref) {
 $h = $h|0;
 $ref = $ref|0;
 var $$0$i = 0, $$0$i$i = 0, $$014$i$i = 0, $$05$i$i = 0, $$lcssa$i$i = 0, $$lcssa2$i$i = 0, $$off0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $absent = 0, $d$0 = 0, $h$0$i$i = 0, $h$1$i$i = 0, $i$0 = 0, $i$0$i = 0, $i$0$i$ = 0, $or$cond$i$i = 0, $or$cond3$i$i = 0, $s$pn$i$i = 0, $step$0$i = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $absent = sp;
 $0 = ((($h)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (_malloc(28)|0);
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($3)) + -4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $6 & 3;
   $8 = ($7|0)==(0);
   if (!($8)) {
    dest=$3; stop=dest+28|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   }
  }
  $9 = ((($h)) + 20|0);
  $10 = ((($3)) + 24|0);
  $i$0 = 0;
  while(1) {
   $11 = HEAP32[$h>>2]|0;
   $12 = ($i$0|0)<($11|0);
   if (!($12)) {
    break;
   }
   $13 = HEAP32[$9>>2]|0;
   $14 = (($13) + ($i$0<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (_kh_put_s2i($3,$15,$absent)|0);
   $17 = ($i$0|0)<(0);
   $18 = $17 << 31 >> 31;
   $19 = HEAP32[$10>>2]|0;
   $20 = (($19) + ($16<<3)|0);
   $21 = $20;
   $22 = $21;
   HEAP32[$22>>2] = $i$0;
   $23 = (($21) + 4)|0;
   $24 = $23;
   HEAP32[$24>>2] = $18;
   $25 = (($i$0) + 1)|0;
   $i$0 = $25;
  }
  HEAP32[$0>>2] = $3;
  $d$0 = $3;
 } else {
  $d$0 = $1;
 }
 $26 = HEAP32[$d$0>>2]|0;
 $27 = ($26|0)==(0);
 do {
  if ($27) {
   $$0$i = 0;
  } else {
   $28 = (($26) + -1)|0;
   $29 = HEAP8[$ref>>0]|0;
   $30 = $29 << 24 >> 24;
   $31 = ($29<<24>>24)==(0);
   L14: do {
    if ($31) {
     $h$1$i$i = $30;
    } else {
     $h$0$i$i = $30;$s$pn$i$i = $ref;
     while(1) {
      $$0$i$i = ((($s$pn$i$i)) + 1|0);
      $32 = HEAP8[$$0$i$i>>0]|0;
      $33 = ($32<<24>>24)==(0);
      if ($33) {
       $h$1$i$i = $h$0$i$i;
       break L14;
      }
      $34 = ($h$0$i$i*31)|0;
      $35 = $32 << 24 >> 24;
      $36 = (($34) + ($35))|0;
      $h$0$i$i = $36;$s$pn$i$i = $$0$i$i;
     }
    }
   } while(0);
   $37 = $h$1$i$i & $28;
   $38 = ((($d$0)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($d$0)) + 20|0);
   $i$0$i = $37;$step$0$i = 0;
   while(1) {
    $41 = $i$0$i >>> 4;
    $42 = (($39) + ($41<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = $i$0$i << 1;
    $45 = $44 & 30;
    $46 = 2 << $45;
    $47 = $43 & $46;
    $48 = ($47|0)==(0);
    if (!($48)) {
     label = 20;
     break;
    }
    $49 = 1 << $45;
    $50 = $43 & $49;
    $51 = ($50|0)==(0);
    if ($51) {
     $52 = HEAP32[$40>>2]|0;
     $53 = (($52) + ($i$0$i<<2)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = HEAP8[$54>>0]|0;
     $56 = ($55<<24>>24)!=($29<<24>>24);
     $57 = ($55<<24>>24)==(0);
     $or$cond3$i$i = $57 | $56;
     if ($or$cond3$i$i) {
      $$lcssa$i$i = $55;$$lcssa2$i$i = $29;
     } else {
      $$014$i$i = $54;$$05$i$i = $ref;
      while(1) {
       $58 = ((($$014$i$i)) + 1|0);
       $59 = ((($$05$i$i)) + 1|0);
       $60 = HEAP8[$58>>0]|0;
       $61 = HEAP8[$59>>0]|0;
       $62 = ($60<<24>>24)!=($61<<24>>24);
       $63 = ($60<<24>>24)==(0);
       $or$cond$i$i = $63 | $62;
       if ($or$cond$i$i) {
        $$lcssa$i$i = $60;$$lcssa2$i$i = $61;
        break;
       } else {
        $$014$i$i = $58;$$05$i$i = $59;
       }
      }
     }
     $64 = ($$lcssa$i$i<<24>>24)==($$lcssa2$i$i<<24>>24);
     if ($64) {
      label = 20;
      break;
     }
    }
    $65 = (($step$0$i) + 1)|0;
    $66 = (($i$0$i) + ($65))|0;
    $67 = $66 & $28;
    $68 = ($67|0)==($37|0);
    if ($68) {
     $$off0 = -1;
     label = 23;
     break;
    } else {
     $i$0$i = $67;$step$0$i = $65;
    }
   }
   if ((label|0) == 20) {
    $69 = 3 << $45;
    $70 = $43 & $69;
    $71 = ($70|0)==(0);
    $i$0$i$ = $71 ? $i$0$i : $26;
    $$0$i = $i$0$i$;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$off0|0);
   }
  }
 } while(0);
 $72 = ($$0$i|0)==($26|0);
 if ($72) {
  $$off0 = -1;
  STACKTOP = sp;return ($$off0|0);
 }
 $73 = ((($d$0)) + 24|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + ($$0$i<<3)|0);
 $76 = $75;
 $77 = $76;
 $78 = HEAP32[$77>>2]|0;
 $79 = (($76) + 4)|0;
 $80 = $79;
 $81 = HEAP32[$80>>2]|0;
 $$off0 = $78;
 STACKTOP = sp;return ($$off0|0);
}
function _sam_read1($fp,$h,$b) {
 $fp = $fp|0;
 $h = $h|0;
 $b = $b|0;
 var $$$01$i$i$i$i = 0, $$$01$i2$i$i$i = 0, $$$i$i$i$i$i = 0, $$0 = 0, $$0$i$i$i$i$i$i = 0, $$0$i$i1$i = 0, $$0$i$ph = 0, $$0$i1$i$i$i$i = 0, $$0$i11 = 0, $$0$i17$i = 0, $$0$i20 = 0, $$0$lcssa$i$i$i$i$i = 0, $$01$i$i$i = 0, $$01$i$i$i$i = 0, $$01$i2$i$i$i = 0, $$01$i4$i$i = 0, $$01$lcssa$i$i$i = 0, $$014$i$i = 0, $$014$i$i$i = 0, $$014$i21$i = 0;
 var $$014$i34$i = 0, $$014$i50$i = 0, $$014$i72$i = 0, $$031$i$i$i$i$i = 0, $$04$lcssa$i$i$i$i$i = 0, $$0430$i$i$i$i$i = 0, $$05$i$i = 0, $$05$i20$i = 0, $$05$i33$i = 0, $$05$i49$i = 0, $$05$i71$i = 0, $$06$lcssa$i$i$i$i$i = 0, $$0629$i$i$i$i$i = 0, $$1$lcssa$i$i$i = 0, $$1$lcssa$i$i$i$i$i = 0, $$117$i$i$i$i$i = 0, $$15$ph$i$i$i$i$i = 0, $$1511$i$i$i$i$i = 0, $$17$ph$i$i$i$i$i = 0, $$1710$i$i$i$i$i = 0;
 var $$2$ph$i$i$i$i$i = 0, $$212$i$i$i$i$i = 0, $$28$i$i$i$i$i = 0, $$3$i$i$i$i$i = 0, $$cast2$i = 0, $$in = 0.0, $$lcssa$i$i$i$i$i = 0, $$mask$i$i$i$i$i = 0, $$mask1$i$i$i$i$i = 0, $$max_id$0$i$i$i$i = 0, $$min_id$0$i$i$i$i = 0, $$pn$i$i$i = 0, $$pn15$i$i$i = 0, $$pr = 0, $$pre$i$i$i = 0, $$pre$phi437Z2D = 0, $$pre415 = 0, $$pre418 = 0, $$pre424 = 0, $$pre425 = 0;
 var $$pre426 = 0, $$pre428 = 0, $$pre430 = 0, $$pre432 = 0, $$pre434 = 0, $$pre436 = 0, $$pre438 = 0, $$sink$i$i = 0, $$sink$i10$i = 0, $$sink$i111$i = 0, $$sink$i12$i = 0, $$sink$i160$i = 0, $$sink$i165$i = 0, $$sink$i170$i = 0, $$sink$i175$i = 0, $$sink$i42$i = 0, $$sink$i44$i = 0, $$sink$i46$i = 0, $$sink$i64$i = 0, $$sink$i8$i = 0;
 var $$sink$i91$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0;
 var $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0;
 var $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0;
 var $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0;
 var $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0;
 var $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0;
 var $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0;
 var $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0;
 var $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0;
 var $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0;
 var $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0;
 var $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0;
 var $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0;
 var $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0;
 var $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0;
 var $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0;
 var $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0;
 var $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0;
 var $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0;
 var $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0;
 var $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0;
 var $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0;
 var $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0;
 var $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0;
 var $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0;
 var $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0;
 var $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0;
 var $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0;
 var $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0;
 var $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0;
 var $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0;
 var $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0;
 var $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0;
 var $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0;
 var $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0;
 var $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0;
 var $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0;
 var $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0;
 var $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0;
 var $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0;
 var $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0;
 var $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0;
 var $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0;
 var $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0;
 var $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0;
 var $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0;
 var $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0;
 var $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0;
 var $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0;
 var $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0;
 var $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0;
 var $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0;
 var $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0;
 var $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0;
 var $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0;
 var $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0;
 var $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0;
 var $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0;
 var $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0;
 var $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0;
 var $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0;
 var $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0;
 var $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0;
 var $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0;
 var $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0;
 var $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0;
 var $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0;
 var $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0;
 var $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0;
 var $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0;
 var $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0;
 var $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0;
 var $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0;
 var $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0;
 var $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0;
 var $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0;
 var $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0;
 var $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0;
 var $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0;
 var $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0;
 var $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0;
 var $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0;
 var $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0;
 var $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0;
 var $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0;
 var $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0;
 var $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0;
 var $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0;
 var $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0;
 var $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0;
 var $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0;
 var $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0;
 var $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0.0, $2658 = 0.0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0;
 var $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0;
 var $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0.0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0;
 var $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0;
 var $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0;
 var $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0;
 var $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0;
 var $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0;
 var $2798 = 0, $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0;
 var $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0;
 var $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0;
 var $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0;
 var $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0;
 var $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0;
 var $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0;
 var $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0;
 var $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0;
 var $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0;
 var $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0;
 var $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0;
 var $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0;
 var $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0;
 var $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0;
 var $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0;
 var $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0.0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0;
 var $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0;
 var $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $aux$0$i$i = 0, $aux$1$i$i = 0, $block_len$i = 0, $buf$i$i$i$i = 0, $c$0$i$i$i = 0, $c$1$i$i$i = 0, $c$2$i$i$i = 0, $c$4$i$i$i = 0, $c$4$i$i$i$ph81 = 0, $c$5$i$i$i = 0, $c$6$i$i$i = 0, $c$8$i$i$i = 0, $c$8$i$i$i2632 = 0, $cond = 0, $cp$0$i$i$i = 0;
 var $cp$0$i$i$i$i$i = 0, $cp$1$i$i$i = 0, $cp$2$i$i$i$i$i = 0, $cp$3$i$i$i$i$i = 0, $cp$4$i$i$i$i$i = 0, $exitcond = 0, $exitcond783 = 0, $exitcond785 = 0, $exitcond786 = 0, $exitcond788 = 0, $f$i$i = 0, $f$i$i$i = 0, $f$i$i130$i = 0, $f$i$i137$i = 0, $f$i11$i = 0, $f$i110$i = 0, $f$i159$i = 0, $f$i164$i = 0, $f$i169$i = 0, $f$i174$i = 0;
 var $f$i41$i = 0, $f$i43$i = 0, $f$i45$i = 0, $f$i63$i = 0, $f$i7$i = 0, $f$i9$i = 0, $f$i90$i = 0, $i$0$i = 0, $i$0$i$i = 0, $i$0$i$i$i = 0, $i$0$i$i$i$i = 0, $i$0$i$i$i$i$i = 0, $i$0$i6 = 0, $i$1$i = 0, $i$1$i$i = 0, $i$1$i$i$i$i = 0, $i$2$i = 0, $i$2$i$i = 0, $i$3$i = 0, $i$3$i$i = 0;
 var $i$4$i = 0, $i$5$i = 0, $i32$i$i$i$i$i = 0, $k$0$i$i = 0, $k$0$i60$i = 0, $l$0$i$i = 0, $l$0$i$i$i$i = 0, $l$0$i16$i = 0, $l$0$i61$i = 0, $l$1$i$i = 0, $l$1$i62$i = 0, $max_id$0$i$i$i$i = 0, $max_id$2$i$i$i$i = 0, $min_id$0$i$i$i$i = 0, $min_id$2$i$i$i$i = 0, $n$0$i$i$i$i$i = 0, $n$0$i$i3$i$i$i = 0, $n$i$0 = 0, $n$i$1 = 0, $n$i$i$0 = 0;
 var $n$i$i$1$ph = 0, $n$i$i$2$ph = 0, $n$i$i$3$ph = 0, $n_cigar$0$i = 0, $n_cigar$0$i$ = 0, $name$0$i$i = 0, $name$2$i$i = 0, $name_a$i$i = 0, $name_len$1$i$i = 0, $not$ = 0, $or$cond$i$i = 0, $or$cond$i$i$i$i$i = 0, $or$cond$i22$i = 0, $or$cond$i35$i = 0, $or$cond$i51$i = 0, $or$cond$i73$i = 0, $or$cond28$i$i$i$i$i = 0, $or$cond797 = 0, $or$cond799 = 0, $or$cond800 = 0;
 var $or$cond801 = 0, $or$cond802 = 0, $or$cond803 = 0, $or$cond804 = 0, $or$cond807 = 0, $or$cond808 = 0, $or$cond809 = 0, $or$cond810 = 0, $p$i$sroa$0$0 = 0, $p$i$sroa$0$1$in = 0, $p$i$sroa$0$2 = 0, $p$i$sroa$0$3 = 0, $p$i$sroa$0$4 = 0, $p$i$sroa$0$5 = 0, $p$i$sroa$0$6 = 0, $p$i$sroa$0$7 = 0, $p$i$sroa$0$8 = 0, $p$i$sroa$0$9 = 0, $phitmp = 0, $q$i$sroa$0$0 = 0;
 var $q$i$sroa$0$1 = 0, $q$i$sroa$0$1$ph = 0, $q$i$sroa$0$2 = 0, $q$i$sroa$0$2$ph = 0, $q$i$sroa$0$3 = 0, $q$i$sroa$0$3$ph = 0, $q$i$sroa$0$4 = 0, $q$i$sroa$0$4$ph = 0, $q$i$sroa$0$5 = 0, $q$i$sroa$0$5$ph = 0, $q$i$sroa$0$6 = 0, $q$i$sroa$0$6$ph = 0, $q$i$sroa$0$7 = 0, $q$i$sroa$0$7$ph = 0, $qual$0$i$i = 0, $r$0$i = 0, $req$0$i$i$i$i$i = 0, $s$0$i$i = 0, $s$0$i$i$i$i = 0, $s$0$i$i10 = 0;
 var $s$1$i$i = 0, $s$1$i$i$i$ph = 0, $s$2$i$i = 0, $s$2$i$i$ph = 0, $s$3$i$i = 0, $s$3$i$i$i = 0, $s$3$i$i$i2831 = 0, $s$3$i$i$ph = 0, $s$4$i$i = 0, $s$4$i$i$i$ph = 0, $s$4$i$i$ph = 0, $s$5$i$i$i = 0, $scevgep = 0, $scevgep782 = 0, $scevgep784 = 0, $scevgep787 = 0, $seq$0$i$i = 0, $smax = 0, $storemerge = 0, $storemerge$ph = 0;
 var $storemerge789 = 0, $storemerge789$ph = 0, $storemerge796 = 0, $storemerge796$ph = 0, $str$i$sroa$0$0 = 0, $str$i$sroa$0$1 = 0, $str$i$sroa$0$10 = 0, $str$i$sroa$0$11 = 0, $str$i$sroa$0$12 = 0, $str$i$sroa$0$13 = 0, $str$i$sroa$0$14 = 0, $str$i$sroa$0$15 = 0, $str$i$sroa$0$16 = 0, $str$i$sroa$0$17 = 0, $str$i$sroa$0$18$ph = 0, $str$i$sroa$0$19$ph = 0, $str$i$sroa$0$2 = 0, $str$i$sroa$0$20$ph = 0, $str$i$sroa$0$21$ph = 0, $str$i$sroa$0$22$ph = 0;
 var $str$i$sroa$0$23$ph = 0, $str$i$sroa$0$24$ph = 0, $str$i$sroa$0$3 = 0, $str$i$sroa$0$4 = 0, $str$i$sroa$0$5 = 0, $str$i$sroa$0$6 = 0, $str$i$sroa$0$7 = 0, $str$i$sroa$0$8 = 0, $str$i$sroa$0$9 = 0, $str$i$sroa$126$0 = 0, $str$i$sroa$126$1 = 0, $str$i$sroa$126$1$ = 0, $str$i$sroa$126$10 = 0, $str$i$sroa$126$11 = 0, $str$i$sroa$126$12 = 0, $str$i$sroa$126$13 = 0, $str$i$sroa$126$14 = 0, $str$i$sroa$126$15 = 0, $str$i$sroa$126$16 = 0, $str$i$sroa$126$17 = 0;
 var $str$i$sroa$126$18 = 0, $str$i$sroa$126$19 = 0, $str$i$sroa$126$2 = 0, $str$i$sroa$126$20 = 0, $str$i$sroa$126$21 = 0, $str$i$sroa$126$22 = 0, $str$i$sroa$126$23 = 0, $str$i$sroa$126$24 = 0, $str$i$sroa$126$25 = 0, $str$i$sroa$126$26 = 0, $str$i$sroa$126$27 = 0, $str$i$sroa$126$28 = 0, $str$i$sroa$126$29 = 0, $str$i$sroa$126$3 = 0, $str$i$sroa$126$3$ = 0, $str$i$sroa$126$30 = 0, $str$i$sroa$126$31 = 0, $str$i$sroa$126$32 = 0, $str$i$sroa$126$33 = 0, $str$i$sroa$126$34 = 0;
 var $str$i$sroa$126$35 = 0, $str$i$sroa$126$36 = 0, $str$i$sroa$126$37 = 0, $str$i$sroa$126$38 = 0, $str$i$sroa$126$39 = 0, $str$i$sroa$126$4 = 0, $str$i$sroa$126$40 = 0, $str$i$sroa$126$41 = 0, $str$i$sroa$126$42 = 0, $str$i$sroa$126$43 = 0, $str$i$sroa$126$44 = 0, $str$i$sroa$126$45 = 0, $str$i$sroa$126$46$ph = 0, $str$i$sroa$126$47 = 0, $str$i$sroa$126$48$ph = 0, $str$i$sroa$126$49 = 0, $str$i$sroa$126$5 = 0, $str$i$sroa$126$5$ = 0, $str$i$sroa$126$50$ph = 0, $str$i$sroa$126$51 = 0;
 var $str$i$sroa$126$52$ph = 0, $str$i$sroa$126$53 = 0, $str$i$sroa$126$54$ph = 0, $str$i$sroa$126$55 = 0, $str$i$sroa$126$56$ph = 0, $str$i$sroa$126$57 = 0, $str$i$sroa$126$58$ph = 0, $str$i$sroa$126$59 = 0, $str$i$sroa$126$6 = 0, $str$i$sroa$126$7 = 0, $str$i$sroa$126$8 = 0, $str$i$sroa$126$9 = 0, $str$i$sroa$199$0 = 0, $str$i$sroa$199$1 = 0, $str$i$sroa$199$1$ = 0, $str$i$sroa$199$10 = 0, $str$i$sroa$199$11 = 0, $str$i$sroa$199$12 = 0, $str$i$sroa$199$13 = 0, $str$i$sroa$199$14 = 0;
 var $str$i$sroa$199$15 = 0, $str$i$sroa$199$16 = 0, $str$i$sroa$199$17 = 0, $str$i$sroa$199$18 = 0, $str$i$sroa$199$19 = 0, $str$i$sroa$199$2 = 0, $str$i$sroa$199$20 = 0, $str$i$sroa$199$21 = 0, $str$i$sroa$199$22 = 0, $str$i$sroa$199$23 = 0, $str$i$sroa$199$24 = 0, $str$i$sroa$199$25 = 0, $str$i$sroa$199$26 = 0, $str$i$sroa$199$27 = 0, $str$i$sroa$199$28 = 0, $str$i$sroa$199$29 = 0, $str$i$sroa$199$3 = 0, $str$i$sroa$199$3$ = 0, $str$i$sroa$199$30 = 0, $str$i$sroa$199$31 = 0;
 var $str$i$sroa$199$32 = 0, $str$i$sroa$199$33 = 0, $str$i$sroa$199$34 = 0, $str$i$sroa$199$35 = 0, $str$i$sroa$199$36 = 0, $str$i$sroa$199$37 = 0, $str$i$sroa$199$38 = 0, $str$i$sroa$199$39 = 0, $str$i$sroa$199$4 = 0, $str$i$sroa$199$40 = 0, $str$i$sroa$199$41 = 0, $str$i$sroa$199$42 = 0, $str$i$sroa$199$43 = 0, $str$i$sroa$199$44 = 0, $str$i$sroa$199$45 = 0, $str$i$sroa$199$46$ph = 0, $str$i$sroa$199$47 = 0, $str$i$sroa$199$48$ph = 0, $str$i$sroa$199$49 = 0, $str$i$sroa$199$5 = 0;
 var $str$i$sroa$199$5$ = 0, $str$i$sroa$199$50$ph = 0, $str$i$sroa$199$51 = 0, $str$i$sroa$199$52$ph = 0, $str$i$sroa$199$53 = 0, $str$i$sroa$199$54$ph = 0, $str$i$sroa$199$55 = 0, $str$i$sroa$199$56$ph = 0, $str$i$sroa$199$57 = 0, $str$i$sroa$199$58$ph = 0, $str$i$sroa$199$59 = 0, $str$i$sroa$199$6 = 0, $str$i$sroa$199$7 = 0, $str$i$sroa$199$8 = 0, $str$i$sroa$199$9 = 0, $switch = 0, $switch812 = 0, $t$0$i$i = 0, $t$0$i$i$i$i = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0;
 var $vararg_buffer61 = 0, $vararg_buffer64 = 0, $vararg_buffer7 = 0, $vararg_ptr67 = 0, $w$0$i$i$i = 0, $wd$0$lcssa$i$i$i$i$i = 0, $wd$018$i$i$i$i$i = 0, $ws$0$lcssa$i$i$i$i$i = 0, $ws$019$i$i$i$i$i = 0, $x$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 68704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer64 = sp + 184|0;
 $vararg_buffer61 = sp + 176|0;
 $vararg_buffer58 = sp + 168|0;
 $vararg_buffer55 = sp + 160|0;
 $vararg_buffer52 = sp + 152|0;
 $vararg_buffer49 = sp + 144|0;
 $vararg_buffer46 = sp + 136|0;
 $vararg_buffer43 = sp + 128|0;
 $vararg_buffer40 = sp + 120|0;
 $vararg_buffer37 = sp + 112|0;
 $vararg_buffer34 = sp + 104|0;
 $vararg_buffer31 = sp + 96|0;
 $vararg_buffer28 = sp + 88|0;
 $vararg_buffer25 = sp + 80|0;
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $f$i174$i = sp + 2032|0;
 $f$i169$i = sp + 1920|0;
 $f$i164$i = sp + 1808|0;
 $f$i159$i = sp + 1696|0;
 $f$i$i137$i = sp + 1584|0;
 $f$i$i130$i = sp + 1472|0;
 $f$i110$i = sp + 1360|0;
 $f$i90$i = sp + 1248|0;
 $f$i63$i = sp + 1136|0;
 $f$i45$i = sp + 1024|0;
 $f$i43$i = sp + 912|0;
 $f$i41$i = sp + 800|0;
 $f$i$i$i = sp + 688|0;
 $f$i11$i = sp + 576|0;
 $f$i9$i = sp + 464|0;
 $f$i7$i = sp + 352|0;
 $f$i$i = sp + 240|0;
 $name_a$i$i = sp + 67680|0;
 $i32$i$i$i$i$i = sp + 236|0;
 $buf$i$i$i$i = sp + 2144|0;
 $block_len$i = sp + 232|0;
 $x$i = sp + 200|0;
 $0 = ((($fp)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 switch ($1|0) {
 case 4:  {
  $136 = ((($fp)) + 36|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (_bgzf_read($137,$block_len$i,4)|0);
  L4: do {
   switch ($138|0) {
   case 4:  {
    $139 = (_bgzf_read($137,$x$i,32)|0);
    $140 = ($139|0)==(32);
    if ($140) {
     $141 = HEAP32[$137>>2]|0;
     $142 = $141 & 786432;
     $143 = ($142|0)==(0);
     $$pre430 = HEAP32[$block_len$i>>2]|0;
     L8: do {
      if ($143) {
       $190 = $$pre430;
      } else {
       $144 = (_llvm_bswap_i32(($$pre430|0))|0);
       HEAP32[$block_len$i>>2] = $144;
       $i$0$i = 0;
       while(1) {
        $exitcond786 = ($i$0$i|0)==(8);
        if ($exitcond786) {
         $190 = $144;
         break L8;
        }
        $145 = (($x$i) + ($i$0$i<<2)|0);
        $146 = HEAP32[$145>>2]|0;
        $147 = (_llvm_bswap_i32(($146|0))|0);
        HEAP32[$145>>2] = $147;
        $148 = (($i$0$i) + 1)|0;
        $i$0$i = $148;
       }
      }
     } while(0);
     $149 = HEAP32[$x$i>>2]|0;
     HEAP32[$b>>2] = $149;
     $150 = ((($x$i)) + 4|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ((($b)) + 4|0);
     HEAP32[$152>>2] = $151;
     $153 = ((($x$i)) + 8|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = $154 >>> 16;
     $156 = ((($b)) + 8|0);
     $157 = $154 >>> 8;
     $158 = (_bitshift64Shl(($157|0),0,16)|0);
     $159 = tempRet0;
     $160 = (_bitshift64Shl(($154|0),0,24)|0);
     $161 = tempRet0;
     $162 = $158 & 16711680;
     $163 = $155 | $162;
     $164 = ((($x$i)) + 12|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = $165 >>> 16;
     $167 = $160 & -16777216;
     $168 = $163 | $167;
     $169 = (_bitshift64Shl(($165|0),0,48)|0);
     $170 = tempRet0;
     $171 = $168 | $169;
     $172 = $166 | $170;
     $173 = $156;
     $174 = $173;
     HEAP32[$174>>2] = $171;
     $175 = (($173) + 4)|0;
     $176 = $175;
     HEAP32[$176>>2] = $172;
     $177 = ((($x$i)) + 16|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = ((($b)) + 16|0);
     HEAP32[$179>>2] = $178;
     $180 = ((($x$i)) + 20|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = ((($b)) + 20|0);
     HEAP32[$182>>2] = $181;
     $183 = ((($x$i)) + 24|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((($b)) + 24|0);
     HEAP32[$185>>2] = $184;
     $186 = ((($x$i)) + 28|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ((($b)) + 28|0);
     HEAP32[$188>>2] = $187;
     $189 = (($190) + -32)|0;
     $191 = ((($b)) + 32|0);
     HEAP32[$191>>2] = $189;
     $192 = ($190|0)<(32);
     $193 = ($178|0)<(0);
     $or$cond797 = $192 | $193;
     $194 = $160 & -16777216;
     $195 = ($194|0)==(0);
     $196 = (0)==(0);
     $197 = $195 & $196;
     $or$cond799 = $or$cond797 | $197;
     if ($or$cond799) {
      $$0$i$ph = -4;
      label = 54;
     } else {
      $198 = ((($b)) + 40|0);
      $199 = HEAP32[$198>>2]|0;
      $200 = (_bitshift64Lshr(($171|0),($172|0),46)|0);
      $201 = tempRet0;
      $202 = $200 & 262140;
      $203 = (($199) + ($202)|0);
      $204 = (_bitshift64Lshr(($167|0),0,24)|0);
      $205 = tempRet0;
      $206 = (($203) + ($204)|0);
      $207 = (($178) + 1)|0;
      $208 = $207 >> 1;
      $209 = (($206) + ($208)|0);
      $210 = (($209) + ($178)|0);
      $211 = $199;
      $212 = $210;
      $213 = (($212) - ($211))|0;
      $214 = ($213|0)>($189|0);
      if ($214) {
       $$0$i$ph = -4;
       label = 54;
      } else {
       $215 = ((($b)) + 36|0);
       $216 = HEAP32[$215>>2]|0;
       $217 = ($216|0)<($189|0);
       if ($217) {
        $218 = (($190) + -33)|0;
        $219 = $218 >> 1;
        $220 = $218 | $219;
        $221 = $220 >> 2;
        $222 = $220 | $221;
        $223 = $222 >> 4;
        $224 = $222 | $223;
        $225 = $224 >> 8;
        $226 = $224 | $225;
        $227 = $226 >> 16;
        $228 = $226 | $227;
        $229 = (($228) + 1)|0;
        HEAP32[$215>>2] = $229;
        $230 = (_realloc($199,$229)|0);
        HEAP32[$198>>2] = $230;
        $231 = ($230|0)==(0|0);
        if ($231) {
         $$0$i$ph = -4;
         label = 54;
         break L4;
        }
        $$pre432 = HEAP32[$191>>2]|0;
        $232 = $230;$233 = $$pre432;
       } else {
        $232 = $199;$233 = $189;
       }
       $234 = (_bgzf_read($137,$232,$233)|0);
       $235 = HEAP32[$191>>2]|0;
       $236 = ($234|0)==($235|0);
       if ($236) {
        $237 = HEAP32[$137>>2]|0;
        $238 = $237 & 786432;
        $239 = ($238|0)==(0);
        if ($239) {
         $376 = $190;
        } else {
         $240 = HEAP32[$198>>2]|0;
         $241 = $156;
         $242 = $241;
         $243 = HEAP32[$242>>2]|0;
         $244 = (($241) + 4)|0;
         $245 = $244;
         $246 = HEAP32[$245>>2]|0;
         $247 = (_bitshift64Lshr(($243|0),($246|0),24)|0);
         $248 = tempRet0;
         $249 = $247 & 255;
         $250 = (($240) + ($249)|0);
         $251 = (_bitshift64Lshr(($243|0),($246|0),46)|0);
         $252 = tempRet0;
         $253 = $251 & 262140;
         $254 = (($240) + ($253)|0);
         $255 = HEAP32[$179>>2]|0;
         $256 = (($255) + 1)|0;
         $257 = (($256|0) / 2)&-1;
         $258 = $243;$259 = $246;$i$0$i$i = 0;
         while(1) {
          $260 = (_bitshift64Lshr(($258|0),($259|0),48)|0);
          $261 = tempRet0;
          $262 = ($i$0$i$i>>>0)<($260>>>0);
          if (!($262)) {
           break;
          }
          $267 = (($250) + ($i$0$i$i<<2)|0);
          $268 = HEAP32[$267>>2]|0;
          $269 = (_llvm_bswap_i32(($268|0))|0);
          HEAP32[$267>>2] = $269;
          $270 = (($i$0$i$i) + 1)|0;
          $271 = $156;
          $272 = $271;
          $273 = HEAP32[$272>>2]|0;
          $274 = (($271) + 4)|0;
          $275 = $274;
          $276 = HEAP32[$275>>2]|0;
          $258 = $273;$259 = $276;$i$0$i$i = $270;
         }
         $263 = (($254) + ($249)|0);
         $264 = (($263) + ($255)|0);
         $265 = (($264) + ($257)|0);
         $266 = (($240) + ($234)|0);
         $s$0$i$i = $265;
         L27: while(1) {
          $283 = ($s$0$i$i>>>0)<($266>>>0);
          if (!($283)) {
           break;
          }
          $284 = ((($s$0$i$i)) + 2|0);
          $285 = HEAP8[$284>>0]|0;
          $286 = $285&255;
          L30: do {
           switch ($286|0) {
           case 67: case 99: case 65:  {
            label = 31;
            break;
           }
           case 83: case 115:  {
            $287 = ((($s$0$i$i)) + 3|0);
            $294 = $287;
            label = 32;
            break;
           }
           case 102: case 73: case 105:  {
            $288 = ((($s$0$i$i)) + 3|0);
            $302 = $288;
            label = 33;
            break;
           }
           case 100:  {
            $289 = ((($s$0$i$i)) + 3|0);
            $306 = $289;
            label = 34;
            break;
           }
           case 66: case 72: case 90:  {
            $291 = ((($s$0$i$i)) + 3|0);
            switch ($286|0) {
            case 1:  {
             label = 31;
             break L30;
             break;
            }
            case 2:  {
             $294 = $291;
             label = 32;
             break L30;
             break;
            }
            case 4:  {
             $302 = $291;
             label = 33;
             break L30;
             break;
            }
            case 8:  {
             $306 = $291;
             label = 34;
             break L30;
             break;
            }
            case 72: case 90:  {
             $s$1$i$i = $291;
             while(1) {
              $319 = HEAP8[$s$1$i$i>>0]|0;
              $320 = ($319<<24>>24)==(0);
              $321 = ((($s$1$i$i)) + 1|0);
              if ($320) {
               $s$0$i$i = $321;
               continue L27;
              } else {
               $s$1$i$i = $321;
              }
             }
             break;
            }
            case 66:  {
             break;
            }
            default: {
             $s$0$i$i = $291;
             continue L27;
            }
            }
            $322 = HEAP8[$291>>0]|0;
            $323 = $322&255;
            switch ($323|0) {
            case 67: case 99: case 65:  {
             $340 = ((($s$0$i$i)) + 4|0);
             $341 = HEAP32[$340>>2]|0;
             $342 = (_llvm_bswap_i32(($341|0))|0);
             HEAP32[$340>>2] = $342;
             $n$i$i$0 = $342;
             label = 46;
             break;
            }
            case 83: case 115:  {
             $324 = ((($s$0$i$i)) + 4|0);
             $325 = HEAP32[$324>>2]|0;
             $326 = (_llvm_bswap_i32(($325|0))|0);
             HEAP32[$324>>2] = $326;
             $327 = ((($s$0$i$i)) + 8|0);
             $n$i$i$1$ph = $326;$s$2$i$i$ph = $327;
             label = 45;
             break;
            }
            case 102: case 73: case 105:  {
             $328 = ((($s$0$i$i)) + 4|0);
             $329 = HEAP32[$328>>2]|0;
             $330 = (_llvm_bswap_i32(($329|0))|0);
             HEAP32[$328>>2] = $330;
             $331 = ((($s$0$i$i)) + 8|0);
             $n$i$i$2$ph = $330;$s$3$i$i$ph = $331;
             label = 44;
             break;
            }
            case 100:  {
             $332 = ((($s$0$i$i)) + 4|0);
             $333 = HEAP32[$332>>2]|0;
             $334 = (_llvm_bswap_i32(($333|0))|0);
             HEAP32[$332>>2] = $334;
             $335 = ((($s$0$i$i)) + 8|0);
             $n$i$i$3$ph = $334;$s$4$i$i$ph = $335;
             label = 43;
             break;
            }
            case 66: case 72: case 90:  {
             $343 = ((($s$0$i$i)) + 4|0);
             $344 = HEAP32[$343>>2]|0;
             $345 = (_llvm_bswap_i32(($344|0))|0);
             HEAP32[$343>>2] = $345;
             $346 = ((($s$0$i$i)) + 8|0);
             switch ($323|0) {
             case 1:  {
              $n$i$i$0 = $345;
              label = 46;
              break;
             }
             case 2:  {
              $n$i$i$1$ph = $345;$s$2$i$i$ph = $346;
              label = 45;
              break;
             }
             case 4:  {
              $n$i$i$2$ph = $345;$s$3$i$i$ph = $346;
              label = 44;
              break;
             }
             case 8:  {
              $n$i$i$3$ph = $345;$s$4$i$i$ph = $346;
              label = 43;
              break;
             }
             default: {
              $s$0$i$i = $346;
              continue L27;
             }
             }
             break;
            }
            default: {
             $336 = ((($s$0$i$i)) + 4|0);
             $337 = HEAP32[$336>>2]|0;
             $338 = (_llvm_bswap_i32(($337|0))|0);
             HEAP32[$336>>2] = $338;
             $339 = ((($s$0$i$i)) + 8|0);
             $s$0$i$i = $339;
             continue L27;
            }
            }
            if ((label|0) == 43) {
             label = 0;
             $282 = $n$i$i$3$ph << 3;
             $i$3$i$i = 0;$s$4$i$i = $s$4$i$i$ph;
             while(1) {
              $exitcond = ($i$3$i$i|0)==($n$i$i$3$ph|0);
              if ($exitcond) {
               break;
              }
              $361 = $s$4$i$i;
              $362 = $361;
              $363 = HEAP32[$362>>2]|0;
              $364 = (($361) + 4)|0;
              $365 = $364;
              $366 = HEAP32[$365>>2]|0;
              $367 = (_llvm_bswap_i64(($363|0),($366|0))|0);
              $368 = tempRet0;
              $369 = $s$4$i$i;
              $370 = $369;
              HEAP32[$370>>2] = $367;
              $371 = (($369) + 4)|0;
              $372 = $371;
              HEAP32[$372>>2] = $368;
              $373 = (($i$3$i$i) + 1)|0;
              $374 = ((($s$4$i$i)) + 8|0);
              $i$3$i$i = $373;$s$4$i$i = $374;
             }
             $281 = ((($s$0$i$i)) + 8|0);
             $scevgep = (($281) + ($282)|0);
             $s$0$i$i = $scevgep;
             continue L27;
            }
            else if ((label|0) == 44) {
             label = 0;
             $280 = $n$i$i$2$ph << 2;
             $i$2$i$i = 0;$s$3$i$i = $s$3$i$i$ph;
             while(1) {
              $exitcond783 = ($i$2$i$i|0)==($n$i$i$2$ph|0);
              if ($exitcond783) {
               break;
              }
              $357 = HEAP32[$s$3$i$i>>2]|0;
              $358 = (_llvm_bswap_i32(($357|0))|0);
              HEAP32[$s$3$i$i>>2] = $358;
              $359 = (($i$2$i$i) + 1)|0;
              $360 = ((($s$3$i$i)) + 4|0);
              $i$2$i$i = $359;$s$3$i$i = $360;
             }
             $279 = ((($s$0$i$i)) + 8|0);
             $scevgep782 = (($279) + ($280)|0);
             $s$0$i$i = $scevgep782;
             continue L27;
            }
            else if ((label|0) == 45) {
             label = 0;
             $278 = $n$i$i$1$ph << 1;
             $i$1$i$i = 0;$s$2$i$i = $s$2$i$i$ph;
             while(1) {
              $exitcond785 = ($i$1$i$i|0)==($n$i$i$1$ph|0);
              if ($exitcond785) {
               break;
              }
              $349 = HEAP16[$s$2$i$i>>1]|0;
              $350 = $349&65535;
              $351 = $350 << 8;
              $352 = $350 >>> 8;
              $353 = $351 | $352;
              $354 = $353&65535;
              HEAP16[$s$2$i$i>>1] = $354;
              $355 = (($i$1$i$i) + 1)|0;
              $356 = ((($s$2$i$i)) + 2|0);
              $i$1$i$i = $355;$s$2$i$i = $356;
             }
             $277 = ((($s$0$i$i)) + 8|0);
             $scevgep784 = (($277) + ($278)|0);
             $s$0$i$i = $scevgep784;
             continue L27;
            }
            else if ((label|0) == 46) {
             label = 0;
             $347 = ((($s$0$i$i)) + 8|0);
             $348 = (($347) + ($n$i$i$0)|0);
             $s$0$i$i = $348;
             continue L27;
            }
            break;
           }
           default: {
            $290 = ((($s$0$i$i)) + 3|0);
            $s$0$i$i = $290;
            continue L27;
           }
           }
          } while(0);
          if ((label|0) == 31) {
           label = 0;
           $292 = ((($s$0$i$i)) + 4|0);
           $s$0$i$i = $292;
           continue;
          }
          else if ((label|0) == 32) {
           label = 0;
           $293 = HEAP16[$294>>1]|0;
           $295 = $293&65535;
           $296 = $295 << 8;
           $297 = $295 >>> 8;
           $298 = $296 | $297;
           $299 = $298&65535;
           HEAP16[$294>>1] = $299;
           $300 = ((($s$0$i$i)) + 5|0);
           $s$0$i$i = $300;
           continue;
          }
          else if ((label|0) == 33) {
           label = 0;
           $301 = HEAP32[$302>>2]|0;
           $303 = (_llvm_bswap_i32(($301|0))|0);
           HEAP32[$302>>2] = $303;
           $304 = ((($s$0$i$i)) + 7|0);
           $s$0$i$i = $304;
           continue;
          }
          else if ((label|0) == 34) {
           label = 0;
           $305 = $306;
           $307 = $305;
           $308 = HEAP32[$307>>2]|0;
           $309 = (($305) + 4)|0;
           $310 = $309;
           $311 = HEAP32[$310>>2]|0;
           $312 = (_llvm_bswap_i64(($308|0),($311|0))|0);
           $313 = tempRet0;
           $314 = $306;
           $315 = $314;
           HEAP32[$315>>2] = $312;
           $316 = (($314) + 4)|0;
           $317 = $316;
           HEAP32[$317>>2] = $313;
           $318 = ((($s$0$i$i)) + 11|0);
           $s$0$i$i = $318;
           continue;
          }
         }
         $$pre434 = HEAP32[$block_len$i>>2]|0;
         $376 = $$pre434;
        }
        $375 = (($376) + 4)|0;
        $377 = ($375|0)>(-1);
        if ($377) {
         $378 = HEAP32[$b>>2]|0;
         $379 = HEAP32[$h>>2]|0;
         $380 = ($378|0)>=($379|0);
         $381 = ($378|0)<(-1);
         $or$cond800 = $380 | $381;
         if ($or$cond800) {
          $$0 = -3;
          STACKTOP = sp;return ($$0|0);
         }
         $382 = HEAP32[$182>>2]|0;
         $383 = ($382|0)>=($379|0);
         $384 = ($382|0)<(-1);
         $or$cond801 = $383 | $384;
         if ($or$cond801) {
          $$0 = -3;
          STACKTOP = sp;return ($$0|0);
         } else {
          $$0$i20 = $375;
         }
        } else {
         $$0$i20 = $375;
        }
       } else {
        $$0$i$ph = -4;
        label = 54;
       }
      }
     }
    } else {
     $$0$i$ph = -3;
     label = 54;
    }
    break;
   }
   case 0:  {
    $$0$i$ph = -1;
    label = 54;
    break;
   }
   default: {
    $$0$i$ph = -2;
    label = 54;
   }
   }
  } while(0);
  if ((label|0) == 54) {
   $$0$i20 = $$0$i$ph;
  }
  $$0 = $$0$i20;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 6:  {
  $385 = ((($fp)) + 36|0);
  $386 = HEAP32[$385>>2]|0;
  $387 = ((($386)) + 36|0);
  $388 = ((($386)) + 34764|0);
  $389 = ((($386)) + 34768|0);
  $390 = ((($386)) + 34668|0);
  $391 = ((($386)) + 316|0);
  $392 = ((($386)) + 16|0);
  $393 = ((($386)) + 34704|0);
  $394 = ((($386)) + 34656|0);
  $395 = ((($386)) + 312|0);
  $396 = ((($386)) + 324|0);
  $397 = ((($386)) + 320|0);
  $398 = ((($386)) + 8|0);
  $399 = ((($386)) + 34672|0);
  $400 = ((($386)) + 34644|0);
  L81: while(1) {
   $401 = HEAP32[$387>>2]|0;
   $402 = $401;
   $cond = ($401|0)==(0);
   if ($cond) {
    while(1) {
     $413 = (_cram_read_container($386)|0);
     HEAP32[$387>>2] = $413;
     $414 = ($413|0)==(0|0);
     if ($414) {
      break L81;
     }
     $415 = HEAP32[$413>>2]|0;
     $416 = ($415|0)==(0);
     if (!($416)) {
      break;
     }
    }
    $417 = HEAP32[$391>>2]|0;
    $418 = ($417|0)==(-2);
    L88: do {
     if ($418) {
      $c$1$i$i$i = $413;
     } else {
      $432 = $415;$c$0$i$i$i = $413;
      L89: while(1) {
       $419 = ((($c$0$i$i$i)) + 4|0);
       $420 = HEAP32[$419>>2]|0;
       $421 = ($420|0)==(-2);
       if ($421) {
        $c$1$i$i$i = $c$0$i$i$i;
        break L88;
       }
       $422 = HEAP32[$391>>2]|0;
       $423 = ($420|0)<($422|0);
       if (!($423)) {
        $424 = ((($c$0$i$i$i)) + 8|0);
        $425 = HEAP32[$424>>2]|0;
        $426 = ((($c$0$i$i$i)) + 12|0);
        $427 = HEAP32[$426>>2]|0;
        $428 = (($425) + ($427))|0;
        $429 = HEAP32[$397>>2]|0;
        $430 = ($428|0)>($429|0);
        if ($430) {
         break;
        }
       }
       HEAP32[$389>>2] = 0;
       $431 = HEAP32[$386>>2]|0;
       $433 = (_hseek($431,$432,1)|0);
       $434 = ($433|0)>(-1);
       L95: do {
        if (!($434)) {
         $435 = ($432|0)>(-1);
         if ($435) {
          $$01$i$i$i$i = $432;
         } else {
          label = 78;
          break L81;
         }
         while(1) {
          $436 = ($$01$i$i$i$i|0)>(0);
          if (!($436)) {
           break L95;
          }
          $437 = ($$01$i$i$i$i|0)>(65536);
          $$$01$i$i$i$i = $437 ? 65536 : $$01$i$i$i$i;
          $438 = HEAP32[$386>>2]|0;
          $439 = ((($438)) + 8|0);
          $440 = HEAP32[$439>>2]|0;
          $441 = ((($438)) + 4|0);
          $442 = HEAP32[$441>>2]|0;
          $443 = (($440) - ($442))|0;
          $444 = ($443>>>0)>($$$01$i$i$i$i>>>0);
          $445 = $442;
          $n$0$i$i$i$i$i = $444 ? $$$01$i$i$i$i : $443;
          _memcpy(($buf$i$i$i$i|0),($445|0),($n$0$i$i$i$i$i|0))|0;
          $446 = HEAP32[$441>>2]|0;
          $447 = (($446) + ($n$0$i$i$i$i$i)|0);
          HEAP32[$441>>2] = $447;
          $448 = ($n$0$i$i$i$i$i|0)==($$$01$i$i$i$i|0);
          if ($448) {
           $451 = $$$01$i$i$i$i;
          } else {
           $449 = (_hread2($438,$buf$i$i$i$i,$$$01$i$i$i$i,$n$0$i$i$i$i$i)|0);
           $451 = $449;
          }
          $450 = ($$$01$i$i$i$i|0)==($451|0);
          if (!($450)) {
           label = 78;
           break L81;
          }
          $452 = (($$01$i$i$i$i) - ($$$01$i$i$i$i))|0;
          $$01$i$i$i$i = $452;
         }
        }
       } while(0);
       $453 = HEAP32[$387>>2]|0;
       _cram_free_container($453);
       while(1) {
        $454 = (_cram_read_container($386)|0);
        HEAP32[$387>>2] = $454;
        $455 = ($454|0)==(0|0);
        if ($455) {
         break L81;
        }
        $456 = HEAP32[$454>>2]|0;
        $457 = ($456|0)==(0);
        if (!($457)) {
         $432 = $456;$c$0$i$i$i = $454;
         continue L89;
        }
       }
      }
      $458 = HEAP32[$391>>2]|0;
      $459 = ($420|0)==($458|0);
      if ($459) {
       $c$1$i$i$i = $c$0$i$i$i;
      } else {
       break L81;
      }
     }
    } while(0);
    $460 = (_cram_read_block($386)|0);
    $461 = ((($c$1$i$i$i)) + 56|0);
    HEAP32[$461>>2] = $460;
    $462 = ($460|0)==(0|0);
    if ($462) {
     break;
    }
    $463 = ((($460)) + 8|0);
    $464 = HEAP32[$463>>2]|0;
    $465 = ($464|0)==(1);
    if (!($465)) {
     break;
    }
    $466 = (_cram_decode_compression_header($386,$460)|0);
    $467 = ((($c$1$i$i$i)) + 52|0);
    HEAP32[$467>>2] = $466;
    $468 = ($466|0)==(0|0);
    if ($468) {
     break;
    }
    $469 = ((($466)) + 44|0);
    $470 = HEAP32[$469>>2]|0;
    $471 = ($470|0)==(0);
    if ($471) {
     $472 = HEAP32[$392>>2]|0;
     $473 = ((($472)) + 76|0);
     $474 = HEAP32[$473>>2]|0;
     $475 = ($474|0)==(2);
     if ($475) {
      $c$2$i$i$i = $c$1$i$i$i;
     } else {
      (_pthread_mutex_lock(($393|0))|0);
      HEAP32[$394>>2] = 1;
      (_pthread_mutex_unlock(($393|0))|0);
      $c$2$i$i$i = $c$1$i$i$i;
     }
    } else {
     $c$2$i$i$i = $c$1$i$i$i;
    }
   } else {
    $403 = ((($402)) + 100|0);
    $404 = HEAP32[$403>>2]|0;
    $405 = ($404|0)==(0|0);
    if ($405) {
     $c$2$i$i$i = $402;
    } else {
     $406 = ((($402)) + 72|0);
     $407 = HEAP32[$406>>2]|0;
     $408 = ((($402)) + 68|0);
     $409 = HEAP32[$408>>2]|0;
     $410 = ($407|0)<($409|0);
     if ($410) {
      $411 = HEAP32[$391>>2]|0;
      $412 = ($411|0)==(-2);
      if ($412) {
       label = 64;
       break;
      }
      $1184 = ($411|0)==(-1);
      $1185 = ((($404)) + 24|0);
      $1186 = HEAP32[$1185>>2]|0;
      $1187 = (((($1186) + (($407*108)|0)|0)) + 4|0);
      $1188 = HEAP32[$1187>>2]|0;
      if ($1184) {
       $1189 = ($1188|0)==(-1);
       if ($1189) {
        $1196 = -1;
       } else {
        $1190 = (($407) + 1)|0;
        HEAP32[$406>>2] = $1190;
        continue;
       }
      } else {
       $1192 = $1188;
       $1191 = ($1192|0)>=($411|0);
       $1193 = ($1192|0)==(-1);
       $or$cond807 = $1191 | $1193;
       if ($or$cond807) {
        $1196 = $1192;
       } else {
        $1194 = (($407) + 1)|0;
        HEAP32[$406>>2] = $1194;
        continue;
       }
      }
      $1195 = ($1196|0)==($411|0);
      if (!($1195)) {
       label = 271;
       break;
      }
      if ($1184) {
       $$pre$phi437Z2D = $1185;
       label = 277;
       break;
      }
      $1197 = (((($1186) + (($407*108)|0)|0)) + 20|0);
      $1198 = HEAP32[$1197>>2]|0;
      $1199 = HEAP32[$396>>2]|0;
      $1200 = ($1198|0)>($1199|0);
      if ($1200) {
       label = 274;
       break;
      }
      $1201 = (((($1186) + (($407*108)|0)|0)) + 88|0);
      $1202 = HEAP32[$1201>>2]|0;
      $1203 = HEAP32[$397>>2]|0;
      $1204 = ($1202|0)<($1203|0);
      if (!($1204)) {
       $$pre$phi437Z2D = $1185;
       label = 277;
       break;
      }
      $1205 = (($407) + 1)|0;
      HEAP32[$406>>2] = $1205;
      continue;
     } else {
      $c$2$i$i$i = $402;
     }
    }
   }
   $476 = ((($c$2$i$i$i)) + 100|0);
   $477 = HEAP32[$476>>2]|0;
   $478 = ($477|0)==(0|0);
   if (!($478)) {
    HEAP32[$476>>2] = 0;
    _cram_free_slice($477);
   }
   $479 = ((($c$2$i$i$i)) + 64|0);
   $480 = HEAP32[$479>>2]|0;
   $481 = ((($c$2$i$i$i)) + 60|0);
   $482 = HEAP32[$481>>2]|0;
   $483 = ($480|0)==($482|0);
   if ($483) {
    $484 = HEAP32[$387>>2]|0;
    $485 = ($484|0)==($c$2$i$i$i|0);
    if ($485) {
     HEAP32[$387>>2] = 0;
    }
    _cram_free_container($c$2$i$i$i);
    $c$4$i$i$i$ph81 = 0;$s$1$i$i$i$ph = 0;
   } else {
    $c$4$i$i$i$ph81 = $c$2$i$i$i;$s$1$i$i$i$ph = 0;
   }
   L138: while(1) {
    $c$4$i$i$i = $c$4$i$i$i$ph81;
    L140: while(1) {
     $486 = HEAP32[$388>>2]|0;
     $487 = ($486|0)==(0|0);
     if (!($487)) {
      label = 97;
      break;
     }
     $492 = HEAP32[$389>>2]|0;
     $493 = ($492|0)==(0);
     if ($493) {
      $c$5$i$i$i = $c$4$i$i$i;
     } else {
      $c$8$i$i$i = $c$4$i$i$i;$s$3$i$i$i = $s$1$i$i$i$ph;
      label = 239;
      break;
     }
     while(1) {
      $494 = ($c$5$i$i$i|0)==(0|0);
      if ($494) {
       label = 101;
      } else {
       $495 = ((($c$5$i$i$i)) + 64|0);
       $496 = HEAP32[$495>>2]|0;
       $497 = ((($c$5$i$i$i)) + 60|0);
       $498 = HEAP32[$497>>2]|0;
       $499 = ($496|0)==($498|0);
       if ($499) {
        label = 101;
       } else {
        $c$6$i$i$i = $c$5$i$i$i;
       }
      }
      if ((label|0) == 101) {
       while(1) {
        label = 0;
        $500 = (_cram_read_container($386)|0);
        HEAP32[$387>>2] = $500;
        $501 = ($500|0)==(0|0);
        if ($501) {
         label = 102;
         break L138;
        }
        $504 = HEAP32[$500>>2]|0;
        $505 = ($504|0)==(0);
        if ($505) {
         label = 101;
        } else {
         break;
        }
       }
       $$pre426 = HEAP32[$389>>2]|0;
       $506 = ($$pre426|0)==(0);
       if (!($506)) {
        $s$4$i$i$i$ph = $s$1$i$i$i$ph;
        break L138;
       }
       $507 = HEAP32[$391>>2]|0;
       $508 = ($507|0)==(-2);
       if (!($508)) {
        $509 = ((($500)) + 4|0);
        $510 = HEAP32[$509>>2]|0;
        $511 = ($510|0)==(-2);
        if (!($511)) {
         $512 = HEAP32[$395>>2]|0;
         $513 = $512 | 8;
         HEAP32[$395>>2] = $513;
         $514 = HEAP32[$509>>2]|0;
         $515 = ($514|0)==($507|0);
         if (!($515)) {
          label = 109;
          break L138;
         }
         $516 = ((($500)) + 8|0);
         $517 = HEAP32[$516>>2]|0;
         $518 = HEAP32[$396>>2]|0;
         $519 = ($517|0)>($518|0);
         if ($519) {
          label = 111;
          break L138;
         }
         $520 = ((($500)) + 12|0);
         $521 = HEAP32[$520>>2]|0;
         $522 = (($517) + ($521))|0;
         $523 = HEAP32[$397>>2]|0;
         $524 = ($522|0)>($523|0);
         if (!($524)) {
          break;
         }
        }
       }
       $553 = (_cram_read_block($386)|0);
       $554 = ((($500)) + 56|0);
       HEAP32[$554>>2] = $553;
       $555 = ($553|0)==(0|0);
       if ($555) {
        break L81;
       }
       $556 = ((($553)) + 8|0);
       $557 = HEAP32[$556>>2]|0;
       $558 = ($557|0)==(1);
       if (!($558)) {
        break L81;
       }
       $559 = (_cram_decode_compression_header($386,$553)|0);
       $560 = ((($500)) + 52|0);
       HEAP32[$560>>2] = $559;
       $561 = ($559|0)==(0|0);
       if ($561) {
        break L81;
       }
       $562 = ((($559)) + 44|0);
       $563 = HEAP32[$562>>2]|0;
       $564 = ($563|0)==(0);
       if ($564) {
        $565 = HEAP32[$392>>2]|0;
        $566 = ((($565)) + 76|0);
        $567 = HEAP32[$566>>2]|0;
        $568 = ($567|0)==(2);
        if ($568) {
         $c$6$i$i$i = $500;
        } else {
         (_pthread_mutex_lock(($393|0))|0);
         HEAP32[$394>>2] = 1;
         (_pthread_mutex_unlock(($393|0))|0);
         $c$6$i$i$i = $500;
        }
       } else {
        $c$6$i$i$i = $500;
       }
      }
      $569 = ((($c$6$i$i$i)) + 32|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0);
      if (!($571)) {
       label = 128;
       break L140;
      }
      _cram_free_container($c$6$i$i$i);
      $c$5$i$i$i = 0;
     }
     $525 = ((($500)) + 68|0);
     $526 = HEAP32[$525>>2]|0;
     $527 = ((($500)) + 72|0);
     HEAP32[$527>>2] = $526;
     $528 = ((($500)) + 60|0);
     $529 = HEAP32[$528>>2]|0;
     $530 = ((($500)) + 64|0);
     HEAP32[$530>>2] = $529;
     $531 = HEAP32[$500>>2]|0;
     HEAP32[$389>>2] = 0;
     $532 = HEAP32[$386>>2]|0;
     $533 = (_hseek($532,$531,1)|0);
     $534 = ($533|0)<(0);
     $535 = ($531|0)>(-1);
     $or$cond802 = $534 & $535;
     L167: do {
      if ($or$cond802) {
       $$01$i2$i$i$i = $531;
       while(1) {
        $536 = ($$01$i2$i$i$i|0)>(0);
        if (!($536)) {
         break L167;
        }
        $537 = ($$01$i2$i$i$i|0)>(65536);
        $$$01$i2$i$i$i = $537 ? 65536 : $$01$i2$i$i$i;
        $538 = HEAP32[$386>>2]|0;
        $539 = ((($538)) + 8|0);
        $540 = HEAP32[$539>>2]|0;
        $541 = ((($538)) + 4|0);
        $542 = HEAP32[$541>>2]|0;
        $543 = (($540) - ($542))|0;
        $544 = ($543>>>0)>($$$01$i2$i$i$i>>>0);
        $545 = $542;
        $n$0$i$i3$i$i$i = $544 ? $$$01$i2$i$i$i : $543;
        _memcpy(($buf$i$i$i$i|0),($545|0),($n$0$i$i3$i$i$i|0))|0;
        $546 = HEAP32[$541>>2]|0;
        $547 = (($546) + ($n$0$i$i3$i$i$i)|0);
        HEAP32[$541>>2] = $547;
        $548 = ($n$0$i$i3$i$i$i|0)==($$$01$i2$i$i$i|0);
        if ($548) {
         $551 = $$$01$i2$i$i$i;
        } else {
         $549 = (_hread2($538,$buf$i$i$i$i,$$$01$i2$i$i$i,$n$0$i$i3$i$i$i)|0);
         $551 = $549;
        }
        $550 = ($$$01$i2$i$i$i|0)==($551|0);
        if (!($550)) {
         break L167;
        }
        $552 = (($$01$i2$i$i$i) - ($$$01$i2$i$i$i))|0;
        $$01$i2$i$i$i = $552;
       }
      }
     } while(0);
     _cram_free_container($500);
     $c$4$i$i$i = 0;
    }
    do {
     if ((label|0) == 97) {
      label = 0;
      $488 = ((($486)) + 4|0);
      $489 = HEAP32[$488>>2]|0;
      $490 = ((($486)) + 8|0);
      $491 = HEAP32[$490>>2]|0;
      _free($486);
      HEAP32[$388>>2] = 0;
      $c$8$i$i$i = $489;$s$3$i$i$i = $491;
      label = 239;
     }
     else if ((label|0) == 128) {
      label = 0;
      $572 = (_cram_read_block($386)|0);
      $573 = (_malloc(148)|0);
      $574 = ($573|0)==(0|0);
      if (!($574)) {
       $575 = ((($573)) + -4|0);
       $576 = HEAP32[$575>>2]|0;
       $577 = $576 & 3;
       $578 = ($577|0)==(0);
       if (!($578)) {
        _memset(($573|0),0,148)|0;
       }
      }
      $579 = ($572|0)==(0|0);
      if ($579) {
       $1088 = $573;
       label = 229;
       break L81;
      }
      if ($574) {
       $3122 = 0;
       label = 226;
       break L81;
      }
      $580 = ((($573)) + 4|0);
      HEAP32[$580>>2] = $572;
      $581 = ((($572)) + 8|0);
      $582 = HEAP32[$581>>2]|0;
      $583 = $582 & -2;
      $switch = ($583|0)==(2);
      if (!($switch)) {
       label = 182;
       break L81;
      }
      $584 = HEAP32[$572>>2]|0;
      $585 = ($584|0)==(0);
      if ($585) {
       $594 = $582;
      } else {
       $586 = (_cram_uncompress_block($572)|0);
       $587 = ($586|0)<(0);
       if ($587) {
        label = 180;
        break L81;
       }
       $$pre428 = HEAP32[$581>>2]|0;
       $594 = $$pre428;
      }
      $588 = ((($572)) + 32|0);
      $589 = HEAP32[$588>>2]|0;
      $590 = ((($572)) + 20|0);
      $591 = HEAP32[$590>>2]|0;
      $592 = (($589) + ($591)|0);
      $593 = $594 & -2;
      $switch812 = ($593|0)==(2);
      if (!($switch812)) {
       label = 180;
       break L81;
      }
      $595 = (_malloc(64)|0);
      $596 = ($595|0)==(0|0);
      if ($596) {
       label = 180;
       break L81;
      }
      $597 = ((($595)) + -4|0);
      $598 = HEAP32[$597>>2]|0;
      $599 = $598 & 3;
      $600 = ($599|0)==(0);
      if (!($600)) {
       dest=$595; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      }
      $601 = HEAP32[$581>>2]|0;
      HEAP32[$595>>2] = $601;
      $602 = HEAP32[$581>>2]|0;
      $603 = ($602|0)==(2);
      if ($603) {
       $604 = ((($595)) + 4|0);
       $605 = (_safe_itf8_get($589,$592,$604)|0);
       $606 = (($589) + ($605)|0);
       $607 = ((($595)) + 8|0);
       $608 = (_safe_itf8_get($606,$592,$607)|0);
       $609 = (($606) + ($608)|0);
       $610 = ((($595)) + 12|0);
       $611 = (_safe_itf8_get($609,$592,$610)|0);
       $612 = (($609) + ($611)|0);
       $cp$0$i$i$i$i$i = $612;
      } else {
       $cp$0$i$i$i$i$i = $589;
      }
      $613 = ((($595)) + 16|0);
      $614 = (_safe_itf8_get($cp$0$i$i$i$i$i,$592,$613)|0);
      $615 = (($cp$0$i$i$i$i$i) + ($614)|0);
      $616 = ((($595)) + 24|0);
      $617 = $616;
      $618 = $617;
      HEAP32[$618>>2] = 0;
      $619 = (($617) + 4)|0;
      $620 = $619;
      HEAP32[$620>>2] = 0;
      $621 = HEAP32[$398>>2]|0;
      $$mask$i$i$i$i$i = $621 & -256;
      $622 = ($$mask$i$i$i$i$i|0)==(512);
      if ($622) {
       HEAP32[$i32$i$i$i$i$i>>2] = 0;
       $623 = (_safe_itf8_get($615,$592,$i32$i$i$i$i$i)|0);
       $624 = (($615) + ($623)|0);
       $625 = HEAP32[$i32$i$i$i$i$i>>2]|0;
       $626 = ($625|0)<(0);
       $627 = $626 << 31 >> 31;
       $628 = $616;
       $629 = $628;
       HEAP32[$629>>2] = $625;
       $630 = (($628) + 4)|0;
       $631 = $630;
       HEAP32[$631>>2] = $627;
       $cp$2$i$i$i$i$i = $624;
      } else {
       $632 = $621 >> 8;
       $633 = ($632|0)>(2);
       if ($633) {
        $634 = HEAP8[$615>>0]|0;
        $635 = ($634<<24>>24)>(-1);
        do {
         if ($635) {
          $636 = $634&255;
          $637 = $616;
          $638 = $637;
          HEAP32[$638>>2] = $636;
          $639 = (($637) + 4)|0;
          $640 = $639;
          HEAP32[$640>>2] = 0;
          $$0$i$i$i$i$i$i = 1;
         } else {
          $641 = ($634&255)<(192);
          if ($641) {
           $642 = $634&255;
           $643 = (_bitshift64Shl(($642|0),0,8)|0);
           $644 = tempRet0;
           $645 = ((($615)) + 1|0);
           $646 = HEAP8[$645>>0]|0;
           $647 = $646&255;
           $648 = $643 & 16128;
           $649 = $648 | $647;
           $650 = $616;
           $651 = $650;
           HEAP32[$651>>2] = $649;
           $652 = (($650) + 4)|0;
           $653 = $652;
           HEAP32[$653>>2] = 0;
           $$0$i$i$i$i$i$i = 2;
           break;
          }
          $654 = ($634&255)<(224);
          if ($654) {
           $655 = $634&255;
           $656 = (_bitshift64Shl(($655|0),0,16)|0);
           $657 = tempRet0;
           $658 = ((($615)) + 1|0);
           $659 = HEAP8[$658>>0]|0;
           $660 = $659&255;
           $661 = (_bitshift64Shl(($660|0),0,8)|0);
           $662 = tempRet0;
           $663 = ((($615)) + 2|0);
           $664 = HEAP8[$663>>0]|0;
           $665 = $664&255;
           $666 = $656 & 2031616;
           $667 = $666 | $661;
           $668 = $667 | $665;
           $669 = $616;
           $670 = $669;
           HEAP32[$670>>2] = $668;
           $671 = (($669) + 4)|0;
           $672 = $671;
           HEAP32[$672>>2] = $662;
           $$0$i$i$i$i$i$i = 3;
           break;
          }
          $673 = ($634&255)<(240);
          if ($673) {
           $674 = $634&255;
           $675 = (_bitshift64Shl(($674|0),0,24)|0);
           $676 = tempRet0;
           $677 = ((($615)) + 1|0);
           $678 = HEAP8[$677>>0]|0;
           $679 = $678&255;
           $680 = (_bitshift64Shl(($679|0),0,16)|0);
           $681 = tempRet0;
           $682 = ((($615)) + 2|0);
           $683 = HEAP8[$682>>0]|0;
           $684 = $683&255;
           $685 = (_bitshift64Shl(($684|0),0,8)|0);
           $686 = tempRet0;
           $687 = ((($615)) + 3|0);
           $688 = HEAP8[$687>>0]|0;
           $689 = $688&255;
           $690 = $675 & 251658240;
           $691 = $690 | $680;
           $692 = $691 | $685;
           $693 = $681 | $686;
           $694 = $692 | $689;
           $695 = $616;
           $696 = $695;
           HEAP32[$696>>2] = $694;
           $697 = (($695) + 4)|0;
           $698 = $697;
           HEAP32[$698>>2] = $693;
           $$0$i$i$i$i$i$i = 4;
           break;
          }
          $699 = ($634&255)<(248);
          if ($699) {
           $700 = $634&255;
           $701 = ((($615)) + 1|0);
           $702 = HEAP8[$701>>0]|0;
           $703 = $702&255;
           $704 = (_bitshift64Shl(($703|0),0,24)|0);
           $705 = tempRet0;
           $706 = ((($615)) + 2|0);
           $707 = HEAP8[$706>>0]|0;
           $708 = $707&255;
           $709 = (_bitshift64Shl(($708|0),0,16)|0);
           $710 = tempRet0;
           $711 = ((($615)) + 3|0);
           $712 = HEAP8[$711>>0]|0;
           $713 = $712&255;
           $714 = (_bitshift64Shl(($713|0),0,8)|0);
           $715 = tempRet0;
           $716 = ((($615)) + 4|0);
           $717 = HEAP8[$716>>0]|0;
           $718 = $717&255;
           $719 = $700 & 7;
           $720 = $719 | $705;
           $721 = $704 | $709;
           $722 = $720 | $710;
           $723 = $721 | $714;
           $724 = $722 | $715;
           $725 = $723 | $718;
           $726 = $616;
           $727 = $726;
           HEAP32[$727>>2] = $725;
           $728 = (($726) + 4)|0;
           $729 = $728;
           HEAP32[$729>>2] = $724;
           $$0$i$i$i$i$i$i = 5;
           break;
          }
          $730 = ($634&255)<(252);
          if ($730) {
           $731 = $634&255;
           (_bitshift64Shl(($731|0),0,40)|0);
           $732 = tempRet0;
           $733 = ((($615)) + 1|0);
           $734 = HEAP8[$733>>0]|0;
           $735 = $734&255;
           $736 = ((($615)) + 2|0);
           $737 = HEAP8[$736>>0]|0;
           $738 = $737&255;
           $739 = (_bitshift64Shl(($738|0),0,24)|0);
           $740 = tempRet0;
           $741 = ((($615)) + 3|0);
           $742 = HEAP8[$741>>0]|0;
           $743 = $742&255;
           $744 = (_bitshift64Shl(($743|0),0,16)|0);
           $745 = tempRet0;
           $746 = ((($615)) + 4|0);
           $747 = HEAP8[$746>>0]|0;
           $748 = $747&255;
           $749 = (_bitshift64Shl(($748|0),0,8)|0);
           $750 = tempRet0;
           $751 = ((($615)) + 5|0);
           $752 = HEAP8[$751>>0]|0;
           $753 = $752&255;
           $754 = $732 & 768;
           $755 = $754 | $735;
           $756 = $755 | $740;
           $757 = $739 | $744;
           $758 = $756 | $745;
           $759 = $757 | $749;
           $760 = $758 | $750;
           $761 = $759 | $753;
           $762 = $616;
           $763 = $762;
           HEAP32[$763>>2] = $761;
           $764 = (($762) + 4)|0;
           $765 = $764;
           HEAP32[$765>>2] = $760;
           $$0$i$i$i$i$i$i = 6;
           break;
          }
          $766 = ($634&255)<(254);
          if ($766) {
           $767 = $634&255;
           (_bitshift64Shl(($767|0),0,48)|0);
           $768 = tempRet0;
           $769 = ((($615)) + 1|0);
           $770 = HEAP8[$769>>0]|0;
           $771 = $770&255;
           $772 = (_bitshift64Shl(($771|0),0,40)|0);
           $773 = tempRet0;
           $774 = ((($615)) + 2|0);
           $775 = HEAP8[$774>>0]|0;
           $776 = $775&255;
           $777 = ((($615)) + 3|0);
           $778 = HEAP8[$777>>0]|0;
           $779 = $778&255;
           $780 = (_bitshift64Shl(($779|0),0,24)|0);
           $781 = tempRet0;
           $782 = ((($615)) + 4|0);
           $783 = HEAP8[$782>>0]|0;
           $784 = $783&255;
           $785 = (_bitshift64Shl(($784|0),0,16)|0);
           $786 = tempRet0;
           $787 = ((($615)) + 5|0);
           $788 = HEAP8[$787>>0]|0;
           $789 = $788&255;
           $790 = (_bitshift64Shl(($789|0),0,8)|0);
           $791 = tempRet0;
           $792 = ((($615)) + 6|0);
           $793 = HEAP8[$792>>0]|0;
           $794 = $793&255;
           $795 = $768 & 65536;
           $796 = $795 | $773;
           $797 = $796 | $776;
           $798 = $772 | $780;
           $799 = $797 | $781;
           $800 = $798 | $785;
           $801 = $799 | $786;
           $802 = $800 | $790;
           $803 = $801 | $791;
           $804 = $802 | $794;
           $805 = $616;
           $806 = $805;
           HEAP32[$806>>2] = $804;
           $807 = (($805) + 4)|0;
           $808 = $807;
           HEAP32[$808>>2] = $803;
           $$0$i$i$i$i$i$i = 7;
           break;
          }
          $809 = ($634<<24>>24)==(-1);
          $810 = ((($615)) + 1|0);
          $811 = HEAP8[$810>>0]|0;
          $812 = ((($615)) + 2|0);
          $813 = HEAP8[$812>>0]|0;
          $814 = ((($615)) + 3|0);
          $815 = HEAP8[$814>>0]|0;
          $816 = ((($615)) + 4|0);
          $817 = HEAP8[$816>>0]|0;
          $818 = ((($615)) + 5|0);
          $819 = HEAP8[$818>>0]|0;
          $820 = ((($615)) + 6|0);
          $821 = HEAP8[$820>>0]|0;
          $822 = ((($615)) + 7|0);
          $823 = HEAP8[$822>>0]|0;
          $824 = $811&255;
          if ($809) {
           $855 = (_bitshift64Shl(($824|0),0,56)|0);
           $856 = tempRet0;
           $857 = $813&255;
           $858 = (_bitshift64Shl(($857|0),0,48)|0);
           $859 = tempRet0;
           $860 = $855 | $858;
           $861 = $856 | $859;
           $862 = $815&255;
           $863 = (_bitshift64Shl(($862|0),0,40)|0);
           $864 = tempRet0;
           $865 = $860 | $863;
           $866 = $861 | $864;
           $867 = $817&255;
           $868 = $866 | $867;
           $869 = $819&255;
           $870 = (_bitshift64Shl(($869|0),0,24)|0);
           $871 = tempRet0;
           $872 = $865 | $870;
           $873 = $868 | $871;
           $874 = $821&255;
           $875 = (_bitshift64Shl(($874|0),0,16)|0);
           $876 = tempRet0;
           $877 = $872 | $875;
           $878 = $873 | $876;
           $879 = $823&255;
           $880 = (_bitshift64Shl(($879|0),0,8)|0);
           $881 = tempRet0;
           $882 = $877 | $880;
           $883 = $878 | $881;
           $884 = ((($615)) + 8|0);
           $885 = HEAP8[$884>>0]|0;
           $886 = $885&255;
           $887 = $882 | $886;
           $888 = $616;
           $889 = $888;
           HEAP32[$889>>2] = $887;
           $890 = (($888) + 4)|0;
           $891 = $890;
           HEAP32[$891>>2] = $883;
           $$0$i$i$i$i$i$i = 9;
           break;
          } else {
           $825 = (_bitshift64Shl(($824|0),0,48)|0);
           $826 = tempRet0;
           $827 = $813&255;
           $828 = (_bitshift64Shl(($827|0),0,40)|0);
           $829 = tempRet0;
           $830 = $825 | $828;
           $831 = $826 | $829;
           $832 = $815&255;
           $833 = $831 | $832;
           $834 = $817&255;
           $835 = (_bitshift64Shl(($834|0),0,24)|0);
           $836 = tempRet0;
           $837 = $830 | $835;
           $838 = $833 | $836;
           $839 = $819&255;
           $840 = (_bitshift64Shl(($839|0),0,16)|0);
           $841 = tempRet0;
           $842 = $837 | $840;
           $843 = $838 | $841;
           $844 = $821&255;
           $845 = (_bitshift64Shl(($844|0),0,8)|0);
           $846 = tempRet0;
           $847 = $823&255;
           $848 = $842 | $845;
           $849 = $843 | $846;
           $850 = $848 | $847;
           $851 = $616;
           $852 = $851;
           HEAP32[$852>>2] = $850;
           $853 = (($851) + 4)|0;
           $854 = $853;
           HEAP32[$854>>2] = $849;
           $$0$i$i$i$i$i$i = 8;
           break;
          }
         }
        } while(0);
        $892 = (($615) + ($$0$i$i$i$i$i$i)|0);
        $cp$2$i$i$i$i$i = $892;
       } else {
        $cp$2$i$i$i$i$i = $615;
       }
      }
      $893 = ((($595)) + 32|0);
      $894 = (_safe_itf8_get($cp$2$i$i$i$i$i,$592,$893)|0);
      $895 = (($cp$2$i$i$i$i$i) + ($894)|0);
      $896 = ((($595)) + 36|0);
      $897 = (_safe_itf8_get($895,$592,$896)|0);
      $898 = (($895) + ($897)|0);
      $899 = HEAP32[$896>>2]|0;
      $900 = ($899|0)<(1);
      $901 = ($899>>>0)>(1073741822);
      $or$cond803 = $900 | $901;
      if ($or$cond803) {
       label = 165;
       break L81;
      }
      $902 = $899 << 2;
      $903 = (_malloc($902)|0);
      $904 = ((($595)) + 40|0);
      HEAP32[$904>>2] = $903;
      $905 = ($903|0)==(0|0);
      if ($905) {
       label = 168;
       break L81;
      }
      $cp$3$i$i$i$i$i = $898;$i$0$i$i$i$i$i = 0;
      while(1) {
       $906 = HEAP32[$896>>2]|0;
       $907 = ($i$0$i$i$i$i$i|0)<($906|0);
       if (!($907)) {
        break;
       }
       $908 = HEAP32[$904>>2]|0;
       $909 = (($908) + ($i$0$i$i$i$i$i<<2)|0);
       $910 = (_safe_itf8_get($cp$3$i$i$i$i$i,$592,$909)|0);
       $911 = ($910|0)<(1);
       if ($911) {
        label = 171;
        break L81;
       }
       $913 = (($cp$3$i$i$i$i$i) + ($910)|0);
       $914 = (($i$0$i$i$i$i$i) + 1)|0;
       $cp$3$i$i$i$i$i = $913;$i$0$i$i$i$i$i = $914;
      }
      $915 = HEAP32[$581>>2]|0;
      $916 = ($915|0)==(2);
      if ($916) {
       $917 = ((($595)) + 44|0);
       $918 = (_safe_itf8_get($cp$3$i$i$i$i$i,$592,$917)|0);
       $919 = (($cp$3$i$i$i$i$i) + ($918)|0);
       $cp$4$i$i$i$i$i = $919;
      } else {
       $cp$4$i$i$i$i$i = $cp$3$i$i$i$i$i;
      }
      $920 = HEAP32[$398>>2]|0;
      $$mask1$i$i$i$i$i = $920 & -256;
      $921 = ($$mask1$i$i$i$i$i|0)==(256);
      if ($921) {
       $928 = ((($595)) + 48|0);
       ;HEAP32[$928>>2]=0|0;HEAP32[$928+4>>2]=0|0;HEAP32[$928+8>>2]=0|0;HEAP32[$928+12>>2]=0|0;
      } else {
       $922 = $592;
       $923 = $cp$4$i$i$i$i$i;
       $924 = (($922) - ($923))|0;
       $925 = ($924|0)<(16);
       if ($925) {
        label = 177;
        break L81;
       }
       $927 = ((($595)) + 48|0);
       dest=$927; src=$cp$4$i$i$i$i$i; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
      }
      HEAP32[$573>>2] = $595;
      $929 = ((($595)) + 32|0);
      $930 = HEAP32[$929>>2]|0;
      $931 = ($930|0)<(1);
      if ($931) {
       label = 190;
       break L81;
      }
      $932 = $930 << 2;
      $933 = ($930>>>0)>(65535);
      if ($933) {
       $934 = (($932>>>0) / ($930>>>0))&-1;
       $935 = ($934|0)==(4);
       $$$i$i$i$i$i = $935 ? $932 : -1;
       $req$0$i$i$i$i$i = $$$i$i$i$i$i;
      } else {
       $req$0$i$i$i$i$i = $932;
      }
      $936 = (_malloc($req$0$i$i$i$i$i)|0);
      $937 = ($936|0)==(0|0);
      if ($937) {
       label = 196;
       break L81;
      }
      $938 = ((($936)) + -4|0);
      $939 = HEAP32[$938>>2]|0;
      $940 = $939 & 3;
      $941 = ($940|0)==(0);
      if (!($941)) {
       _memset(($936|0),0,($req$0$i$i$i$i$i|0))|0;
      }
      $943 = ((($573)) + 8|0);
      HEAP32[$943>>2] = $936;
      $i$0$i$i$i$i = 0;$max_id$0$i$i$i$i = 0;$min_id$0$i$i$i$i = 2147483647;
      while(1) {
       $944 = ($i$0$i$i$i$i|0)<($930|0);
       if (!($944)) {
        break;
       }
       $945 = (_cram_read_block($386)|0);
       $946 = HEAP32[$943>>2]|0;
       $947 = (($946) + ($i$0$i$i$i$i<<2)|0);
       HEAP32[$947>>2] = $945;
       $948 = ($945|0)==(0|0);
       if ($948) {
        $3122 = $573;
        label = 226;
        break L81;
       }
       $949 = HEAP32[$943>>2]|0;
       $950 = (($949) + ($i$0$i$i$i$i<<2)|0);
       $951 = HEAP32[$950>>2]|0;
       $952 = ((($951)) + 8|0);
       $953 = HEAP32[$952>>2]|0;
       $954 = ($953|0)==(4);
       if ($954) {
        $955 = ((($951)) + 12|0);
        $956 = HEAP32[$955>>2]|0;
        $957 = ($max_id$0$i$i$i$i|0)<($956|0);
        $$max_id$0$i$i$i$i = $957 ? $956 : $max_id$0$i$i$i$i;
        $958 = ($min_id$0$i$i$i$i|0)>($956|0);
        $$min_id$0$i$i$i$i = $958 ? $956 : $min_id$0$i$i$i$i;
        $max_id$2$i$i$i$i = $$max_id$0$i$i$i$i;$min_id$2$i$i$i$i = $$min_id$0$i$i$i$i;
       } else {
        $max_id$2$i$i$i$i = $max_id$0$i$i$i$i;$min_id$2$i$i$i$i = $min_id$0$i$i$i$i;
       }
       $959 = (($i$0$i$i$i$i) + 1)|0;
       $i$0$i$i$i$i = $959;$max_id$0$i$i$i$i = $max_id$2$i$i$i$i;$min_id$0$i$i$i$i = $min_id$2$i$i$i$i;
      }
      $960 = ($min_id$0$i$i$i$i|0)>(-1);
      $961 = ($max_id$0$i$i$i$i|0)<(1024);
      $or$cond804 = $960 & $961;
      L259: do {
       if ($or$cond804) {
        $962 = (_malloc(4096)|0);
        $963 = ($962|0)==(0|0);
        if ($963) {
         label = 207;
         break L81;
        }
        $964 = ((($962)) + -4|0);
        $965 = HEAP32[$964>>2]|0;
        $966 = $965 & 3;
        $967 = ($966|0)==(0);
        if (!($967)) {
         _memset(($962|0),0,4096)|0;
        }
        $969 = ((($573)) + 12|0);
        HEAP32[$969>>2] = $962;
        $i$1$i$i$i$i = 0;
        while(1) {
         $970 = ($i$1$i$i$i$i|0)<($930|0);
         if (!($970)) {
          break L259;
         }
         $971 = HEAP32[$943>>2]|0;
         $972 = (($971) + ($i$1$i$i$i$i<<2)|0);
         $973 = HEAP32[$972>>2]|0;
         $974 = ((($973)) + 8|0);
         $975 = HEAP32[$974>>2]|0;
         $976 = ($975|0)==(4);
         if ($976) {
          $977 = $973;
          $978 = ((($973)) + 12|0);
          $979 = HEAP32[$978>>2]|0;
          $980 = HEAP32[$969>>2]|0;
          $981 = (($980) + ($979<<2)|0);
          HEAP32[$981>>2] = $977;
         }
         $982 = (($i$1$i$i$i$i) + 1)|0;
         $i$1$i$i$i$i = $982;
        }
       }
      } while(0);
      $983 = ((($573)) + 28|0);
      HEAP32[$983>>2] = 0;
      $984 = ((($573)) + 32|0);
      HEAP32[$984>>2] = 0;
      $985 = ((($573)) + 36|0);
      HEAP32[$985>>2] = 0;
      $986 = (_malloc(48)|0);
      $987 = ($986|0)==(0|0);
      if ($987) {
       label = 214;
       break L81;
      }
      $989 = ((($986)) + 4|0);
      HEAP32[$989>>2] = 0;
      HEAP32[$986>>2] = 0;
      $990 = ((($986)) + 8|0);
      HEAP32[$990>>2] = 4;
      $991 = ((($986)) + 12|0);
      HEAP32[$991>>2] = 0;
      $992 = ((($986)) + 16|0);
      HEAP32[$992>>2] = 0;
      $993 = ((($986)) + 20|0);
      HEAP32[$993>>2] = 0;
      $994 = ((($986)) + 32|0);
      HEAP32[$994>>2] = 0;
      $995 = ((($986)) + 36|0);
      HEAP32[$995>>2] = 0;
      $996 = ((($986)) + 40|0);
      HEAP32[$996>>2] = 0;
      $997 = ((($986)) + 44|0);
      HEAP32[$997>>2] = 7;
      $998 = ((($573)) + 68|0);
      HEAP32[$998>>2] = $986;
      $999 = (_malloc(48)|0);
      $1000 = ($999|0)==(0|0);
      if ($1000) {
       label = 216;
       break L81;
      }
      $1002 = ((($999)) + 4|0);
      HEAP32[$1002>>2] = 0;
      HEAP32[$999>>2] = 0;
      $1003 = ((($999)) + 8|0);
      HEAP32[$1003>>2] = 4;
      $1004 = ((($999)) + 12|0);
      HEAP32[$1004>>2] = 12;
      $1005 = ((($999)) + 16|0);
      HEAP32[$1005>>2] = 0;
      $1006 = ((($999)) + 20|0);
      HEAP32[$1006>>2] = 0;
      $1007 = ((($999)) + 32|0);
      HEAP32[$1007>>2] = 0;
      $1008 = ((($999)) + 36|0);
      HEAP32[$1008>>2] = 0;
      $1009 = ((($999)) + 40|0);
      HEAP32[$1009>>2] = 0;
      $1010 = ((($999)) + 44|0);
      HEAP32[$1010>>2] = 7;
      $1011 = ((($573)) + 72|0);
      HEAP32[$1011>>2] = $999;
      $1012 = (_malloc(48)|0);
      $1013 = ($1012|0)==(0|0);
      if ($1013) {
       label = 218;
       break L81;
      }
      $1015 = ((($1012)) + 4|0);
      HEAP32[$1015>>2] = 0;
      HEAP32[$1012>>2] = 0;
      $1016 = ((($1012)) + 8|0);
      HEAP32[$1016>>2] = 4;
      $1017 = ((($1012)) + 12|0);
      HEAP32[$1017>>2] = 11;
      $1018 = ((($1012)) + 16|0);
      HEAP32[$1018>>2] = 0;
      $1019 = ((($1012)) + 20|0);
      HEAP32[$1019>>2] = 0;
      $1020 = ((($1012)) + 32|0);
      HEAP32[$1020>>2] = 0;
      $1021 = ((($1012)) + 36|0);
      HEAP32[$1021>>2] = 0;
      $1022 = ((($1012)) + 40|0);
      HEAP32[$1022>>2] = 0;
      $1023 = ((($1012)) + 44|0);
      HEAP32[$1023>>2] = 7;
      $1024 = ((($573)) + 64|0);
      HEAP32[$1024>>2] = $1012;
      $1025 = (_malloc(48)|0);
      $1026 = ($1025|0)==(0|0);
      if ($1026) {
       label = 220;
       break L81;
      }
      $1028 = ((($1025)) + 4|0);
      HEAP32[$1028>>2] = 0;
      HEAP32[$1025>>2] = 0;
      $1029 = ((($1025)) + 8|0);
      HEAP32[$1029>>2] = 4;
      $1030 = ((($1025)) + 12|0);
      HEAP32[$1030>>2] = 1;
      $1031 = ((($1025)) + 16|0);
      HEAP32[$1031>>2] = 0;
      $1032 = ((($1025)) + 20|0);
      HEAP32[$1032>>2] = 0;
      $1033 = ((($1025)) + 32|0);
      HEAP32[$1033>>2] = 0;
      $1034 = ((($1025)) + 36|0);
      HEAP32[$1034>>2] = 0;
      $1035 = ((($1025)) + 40|0);
      HEAP32[$1035>>2] = 0;
      $1036 = ((($1025)) + 44|0);
      HEAP32[$1036>>2] = 7;
      $1037 = ((($573)) + 84|0);
      HEAP32[$1037>>2] = $1025;
      $1038 = (_malloc(48)|0);
      $1039 = ($1038|0)==(0|0);
      if ($1039) {
       label = 222;
       break L81;
      }
      $1041 = ((($1038)) + 4|0);
      HEAP32[$1041>>2] = 0;
      HEAP32[$1038>>2] = 0;
      $1042 = ((($1038)) + 8|0);
      HEAP32[$1042>>2] = 4;
      $1043 = ((($1038)) + 12|0);
      HEAP32[$1043>>2] = 13;
      $1044 = ((($1038)) + 16|0);
      HEAP32[$1044>>2] = 0;
      $1045 = ((($1038)) + 20|0);
      HEAP32[$1045>>2] = 0;
      $1046 = ((($1038)) + 32|0);
      HEAP32[$1046>>2] = 0;
      $1047 = ((($1038)) + 36|0);
      HEAP32[$1047>>2] = 0;
      $1048 = ((($1038)) + 40|0);
      HEAP32[$1048>>2] = 0;
      $1049 = ((($1038)) + 44|0);
      HEAP32[$1049>>2] = 7;
      $1050 = ((($573)) + 76|0);
      HEAP32[$1050>>2] = $1038;
      $1051 = (_malloc(48)|0);
      $1052 = ($1051|0)==(0|0);
      if ($1052) {
       label = 224;
       break L81;
      }
      $1054 = ((($1051)) + 4|0);
      HEAP32[$1054>>2] = 0;
      HEAP32[$1051>>2] = 0;
      $1055 = ((($1051)) + 8|0);
      HEAP32[$1055>>2] = 4;
      $1056 = ((($1051)) + 12|0);
      HEAP32[$1056>>2] = 14;
      $1057 = ((($1051)) + 16|0);
      HEAP32[$1057>>2] = 0;
      $1058 = ((($1051)) + 20|0);
      HEAP32[$1058>>2] = 0;
      $1059 = ((($1051)) + 32|0);
      HEAP32[$1059>>2] = 0;
      $1060 = ((($1051)) + 36|0);
      HEAP32[$1060>>2] = 0;
      $1061 = ((($1051)) + 40|0);
      HEAP32[$1061>>2] = 0;
      $1062 = ((($1051)) + 44|0);
      HEAP32[$1062>>2] = 7;
      $1063 = ((($573)) + 80|0);
      HEAP32[$1063>>2] = $1051;
      $1064 = ((($573)) + 24|0);
      HEAP32[$1064>>2] = 0;
      $1065 = HEAP32[$573>>2]|0;
      $1066 = ((($1065)) + 8|0);
      $1067 = HEAP32[$1066>>2]|0;
      $1068 = ((($573)) + 16|0);
      HEAP32[$1068>>2] = $1067;
      $1069 = ((($c$6$i$i$i)) + 100|0);
      HEAP32[$1069>>2] = $573;
      $1070 = ((($c$6$i$i$i)) + 64|0);
      $1071 = HEAP32[$1070>>2]|0;
      $1072 = (($1071) + 1)|0;
      HEAP32[$1070>>2] = $1072;
      $1073 = ((($c$6$i$i$i)) + 72|0);
      HEAP32[$1073>>2] = 0;
      $1074 = HEAP32[$573>>2]|0;
      $1075 = ((($1074)) + 16|0);
      $1076 = HEAP32[$1075>>2]|0;
      $1077 = ((($c$6$i$i$i)) + 68|0);
      HEAP32[$1077>>2] = $1076;
      $1078 = HEAP32[$573>>2]|0;
      $1079 = ((($1078)) + 8|0);
      $1080 = HEAP32[$1079>>2]|0;
      $1081 = ((($573)) + 16|0);
      HEAP32[$1081>>2] = $1080;
      $1082 = HEAP32[$391>>2]|0;
      $1083 = ($1082|0)==(-2);
      if ($1083) {
       $c$8$i$i$i2632 = $c$6$i$i$i;$s$3$i$i$i2831 = $573;
       break;
      }
      $1091 = ((($1078)) + 4|0);
      $1092 = HEAP32[$1091>>2]|0;
      $1093 = ($1092|0)==(-2);
      if ($1093) {
       $c$8$i$i$i2632 = $c$6$i$i$i;$s$3$i$i$i2831 = $573;
       break;
      }
      $1094 = ($1092|0)==($1082|0);
      if (!($1094)) {
       label = 234;
       break L81;
      }
      $1095 = HEAP32[$1079>>2]|0;
      $1096 = HEAP32[$396>>2]|0;
      $1097 = ($1095|0)>($1096|0);
      if ($1097) {
       label = 236;
       break L81;
      }
      $1098 = ((($1078)) + 12|0);
      $1099 = HEAP32[$1098>>2]|0;
      $1100 = (($1095) + ($1099))|0;
      $1101 = HEAP32[$397>>2]|0;
      $1102 = ($1100|0)>($1101|0);
      if ($1102) {
       $c$8$i$i$i2632 = $c$6$i$i$i;$s$3$i$i$i2831 = $573;
       break;
      }
      _cram_free_slice($573);
      HEAP32[$1069>>2] = 0;
      _cram_free_container($c$6$i$i$i);
      $c$4$i$i$i$ph81 = 0;$s$1$i$i$i$ph = $573;
      continue L138;
     }
    } while(0);
    if ((label|0) == 239) {
     label = 0;
     $1103 = ($c$8$i$i$i|0)==(0|0);
     if ($1103) {
      $s$4$i$i$i$ph = $s$3$i$i$i;
      break;
     }
     $1104 = ($s$3$i$i$i|0)==(0|0);
     if ($1104) {
      $s$4$i$i$i$ph = 0;
      break;
     } else {
      $c$8$i$i$i2632 = $c$8$i$i$i;$s$3$i$i$i2831 = $s$3$i$i$i;
     }
    }
    $1105 = HEAP32[$392>>2]|0;
    $1106 = HEAP32[$390>>2]|0;
    $1107 = ($1106|0)==(0|0);
    do {
     if ($1107) {
      $1132 = (_cram_decode_slice($386,$c$8$i$i$i2632,$s$3$i$i$i2831,$1105)|0);
      $1133 = ($1132|0)==(0);
      if (!($1133)) {
       label = 247;
       break L81;
      }
     } else {
      $1108 = (_malloc(20)|0);
      $1109 = ($1108|0)==(0|0);
      if ($1109) {
       label = 247;
       break L81;
      }
      HEAP32[$1108>>2] = $386;
      $1110 = ((($1108)) + 4|0);
      HEAP32[$1110>>2] = $c$8$i$i$i2632;
      $1111 = ((($1108)) + 8|0);
      HEAP32[$1111>>2] = $s$3$i$i$i2831;
      $1112 = ((($1108)) + 12|0);
      HEAP32[$1112>>2] = $1105;
      $1113 = HEAP32[$399>>2]|0;
      $1114 = HEAP32[$1113>>2]|0;
      $1115 = ((($1114)) + 32|0);
      (_pthread_mutex_lock(($1115|0))|0);
      $1116 = ((($1113)) + 44|0);
      $1117 = HEAP32[$1116>>2]|0;
      $1118 = ((($1113)) + 40|0);
      $1119 = HEAP32[$1118>>2]|0;
      $1120 = (($1117) + ($1119))|0;
      $1121 = ((($1113)) + 48|0);
      $1122 = HEAP32[$1121>>2]|0;
      $1123 = HEAP32[$1113>>2]|0;
      $1124 = ((($1123)) + 32|0);
      (_pthread_mutex_unlock(($1124|0))|0);
      $1125 = (0 - ($1122))|0;
      $1126 = ($1120|0)!=($1125|0);
      $1127 = $1126&1;
      $1128 = HEAP32[$390>>2]|0;
      $1129 = HEAP32[$399>>2]|0;
      $1130 = (_hts_tpool_dispatch2($1128,$1129,60,$1108,$1127)|0);
      $1131 = ($1130|0)==(-1);
      if ($1131) {
       HEAP32[$388>>2] = $1108;
       break;
      } else {
       HEAP32[$388>>2] = 0;
       break;
      }
     }
    } while(0);
    $1135 = HEAP32[$390>>2]|0;
    $1136 = ($1135|0)==(0|0);
    if ($1136) {
     continue L81;
    }
    $1137 = HEAP32[$388>>2]|0;
    $1138 = ($1137|0)==(0|0);
    if (!($1138)) {
     $s$4$i$i$i$ph = $s$3$i$i$i2831;
     break;
    }
    $1139 = HEAP32[$399>>2]|0;
    $1140 = HEAP32[$1139>>2]|0;
    $1141 = ((($1140)) + 32|0);
    (_pthread_mutex_lock(($1141|0))|0);
    $1142 = ((($1139)) + 44|0);
    $1143 = HEAP32[$1142>>2]|0;
    $1144 = HEAP32[$1139>>2]|0;
    $1145 = ((($1144)) + 32|0);
    (_pthread_mutex_unlock(($1145|0))|0);
    $1146 = HEAP32[$399>>2]|0;
    $1147 = ((($1146)) + 20|0);
    $1148 = HEAP32[$1147>>2]|0;
    $1149 = ($1143|0)>($1148|0);
    if ($1149) {
     $s$4$i$i$i$ph = $s$3$i$i$i2831;
     break;
    } else {
     $c$4$i$i$i$ph81 = $c$8$i$i$i2632;$s$1$i$i$i$ph = $s$3$i$i$i2831;
    }
   }
   if ((label|0) == 102) {
    label = 0;
    $502 = HEAP32[$390>>2]|0;
    $503 = ($502|0)==(0|0);
    if ($503) {
     break;
    }
    HEAP32[$389>>2] = 1;
    $s$4$i$i$i$ph = $s$1$i$i$i$ph;
   }
   else if ((label|0) == 109) {
    label = 0;
    _cram_free_container($500);
    HEAP32[$387>>2] = 0;
    HEAP32[$389>>2] = 1;
    HEAP32[$400>>2] = 1;
    $s$4$i$i$i$ph = $s$1$i$i$i$ph;
   }
   else if ((label|0) == 111) {
    label = 0;
    _cram_free_container($500);
    HEAP32[$387>>2] = 0;
    HEAP32[$389>>2] = 1;
    HEAP32[$400>>2] = 1;
    $s$4$i$i$i$ph = $s$1$i$i$i$ph;
   }
   $$pr = HEAP32[$390>>2]|0;
   $1150 = ($$pr|0)==(0|0);
   if ($1150) {
    $s$5$i$i$i = $s$4$i$i$i$ph;
   } else {
    $1151 = HEAP32[$389>>2]|0;
    $1152 = ($1151|0)==(0);
    do {
     if (!($1152)) {
      $1153 = HEAP32[$399>>2]|0;
      $1154 = HEAP32[$1153>>2]|0;
      $1155 = ((($1154)) + 32|0);
      (_pthread_mutex_lock(($1155|0))|0);
      $1156 = ((($1153)) + 40|0);
      $1157 = HEAP32[$1156>>2]|0;
      $1158 = ($1157|0)==(0);
      if (!($1158)) {
       $1169 = HEAP32[$1153>>2]|0;
       $1170 = ((($1169)) + 32|0);
       (_pthread_mutex_unlock(($1170|0))|0);
       break;
      }
      $1159 = ((($1153)) + 48|0);
      $1160 = HEAP32[$1159>>2]|0;
      $1161 = ($1160|0)==(0);
      if ($1161) {
       $1162 = ((($1153)) + 44|0);
       $1163 = HEAP32[$1162>>2]|0;
       $1164 = ($1163|0)==(0);
       $1165 = HEAP32[$1153>>2]|0;
       $1166 = ((($1165)) + 32|0);
       (_pthread_mutex_unlock(($1166|0))|0);
       if ($1164) {
        break L81;
       } else {
        break;
       }
      } else {
       $1167 = HEAP32[$1153>>2]|0;
       $1168 = ((($1167)) + 32|0);
       (_pthread_mutex_unlock(($1168|0))|0);
       break;
      }
     }
    } while(0);
    $1171 = HEAP32[$399>>2]|0;
    $1172 = (_hts_tpool_next_result_wait($1171)|0);
    $1173 = ($1172|0)==(0|0);
    if ($1173) {
     label = 260;
     break;
    }
    $1174 = ((($1172)) + 16|0);
    $1175 = HEAP32[$1174>>2]|0;
    $1176 = ($1175|0)==(0|0);
    if ($1176) {
     label = 260;
     break;
    }
    $1177 = ((($1175)) + 4|0);
    $1178 = HEAP32[$1177>>2]|0;
    $1179 = ((($1175)) + 8|0);
    $1180 = HEAP32[$1179>>2]|0;
    HEAP32[$387>>2] = $1178;
    $1181 = HEAP32[$1174>>2]|0;
    $1182 = ($1181|0)==(0|0);
    if (!($1182)) {
     _free($1181);
    }
    _free($1172);
    $s$5$i$i$i = $1180;
   }
   $1183 = ($s$5$i$i$i|0)==(0|0);
   if ($1183) {
    break;
   }
  }
  switch (label|0) {
   case 64: {
    $$pre436 = ((($404)) + 24|0);
    $$pre$phi437Z2D = $$pre436;
    label = 277;
    break;
   }
   case 78: {
    break;
   }
   case 165: {
    _free($595);
    label = 180;
    break;
   }
   case 168: {
    _free($595);
    label = 180;
    break;
   }
   case 171: {
    $912 = HEAP32[$904>>2]|0;
    _free($912);
    _free($595);
    label = 180;
    break;
   }
   case 177: {
    $926 = HEAP32[$904>>2]|0;
    _free($926);
    _free($595);
    label = 180;
    break;
   }
   case 182: {
    switch ($582|0) {
    case 0:  {
     $$0$i1$i$i$i$i = 19036;
     break;
    }
    case 1:  {
     $$0$i1$i$i$i$i = 19048;
     break;
    }
    case 2:  {
     $$0$i1$i$i$i$i = 19067;
     break;
    }
    case 3:  {
     $$0$i1$i$i$i$i = 19080;
     break;
    }
    case 4:  {
     $$0$i1$i$i$i$i = 22604;
     break;
    }
    case 5:  {
     $$0$i1$i$i$i$i = 19095;
     break;
    }
    default: {
     $$0$i1$i$i$i$i = 22689;
    }
    }
    HEAP32[$vararg_buffer>>2] = $$0$i1$i$i$i$i;
    _fprintf(9772,20127,$vararg_buffer);
    $3122 = $573;
    label = 226;
    break;
   }
   case 190: {
    _fprintf(9772,20156,$vararg_buffer1);
    $3122 = $573;
    label = 226;
    break;
   }
   case 196: {
    $942 = ((($573)) + 8|0);
    HEAP32[$942>>2] = 0;
    $3122 = $573;
    label = 226;
    break;
   }
   case 207: {
    $968 = ((($573)) + 12|0);
    HEAP32[$968>>2] = 0;
    $3122 = $573;
    label = 226;
    break;
   }
   case 214: {
    $988 = ((($573)) + 68|0);
    HEAP32[$988>>2] = 0;
    $3122 = $573;
    label = 226;
    break;
   }
   case 216: {
    $1001 = ((($573)) + 72|0);
    HEAP32[$1001>>2] = 0;
    $3122 = $573;
    label = 226;
    break;
   }
   case 218: {
    $1014 = ((($573)) + 64|0);
    HEAP32[$1014>>2] = 0;
    $3122 = $573;
    label = 226;
    break;
   }
   case 220: {
    $1027 = ((($573)) + 84|0);
    HEAP32[$1027>>2] = 0;
    $3122 = $573;
    label = 226;
    break;
   }
   case 222: {
    $1040 = ((($573)) + 76|0);
    HEAP32[$1040>>2] = 0;
    $3122 = $573;
    label = 226;
    break;
   }
   case 224: {
    $1053 = ((($573)) + 80|0);
    HEAP32[$1053>>2] = 0;
    $3122 = $573;
    label = 226;
    break;
   }
   case 234: {
    HEAP32[$400>>2] = 1;
    _cram_free_slice($573);
    HEAP32[$1069>>2] = 0;
    break;
   }
   case 236: {
    HEAP32[$400>>2] = 1;
    _cram_free_slice($573);
    HEAP32[$1069>>2] = 0;
    break;
   }
   case 247: {
    _fprintf(9772,17613,$vararg_buffer3);
    _cram_free_slice($s$3$i$i$i2831);
    $1134 = ((($c$8$i$i$i2632)) + 100|0);
    HEAP32[$1134>>2] = 0;
    break;
   }
   case 260: {
    _fprintf(9772,17638,$vararg_buffer5);
    break;
   }
   case 271: {
    HEAP32[$400>>2] = 1;
    _cram_free_slice($404);
    HEAP32[$403>>2] = 0;
    break;
   }
   case 274: {
    HEAP32[$400>>2] = 1;
    _cram_free_slice($404);
    HEAP32[$403>>2] = 0;
    break;
   }
  }
  L351: do {
   if ((label|0) == 180) {
    HEAP32[$573>>2] = 0;
    $3122 = $573;
    label = 226;
   }
   else if ((label|0) == 277) {
    $1206 = HEAP32[$406>>2]|0;
    $1207 = (($1206) + 1)|0;
    HEAP32[$406>>2] = $1207;
    $1208 = HEAP32[$$pre$phi437Z2D>>2]|0;
    $1209 = (($1208) + (($1206*108)|0)|0);
    $1210 = ($1209|0)==(0|0);
    if (!($1210)) {
     $1211 = HEAP32[$387>>2]|0;
     $1212 = ((($1211)) + 100|0);
     $1213 = HEAP32[$1212>>2]|0;
     $1214 = HEAP32[$392>>2]|0;
     $1215 = ((($1211)) + 72|0);
     $1216 = HEAP32[$1215>>2]|0;
     $1217 = (($1216) + -1)|0;
     $1218 = HEAP32[$395>>2]|0;
     $1219 = $1218 & 1;
     $1220 = ($1219|0)==(0);
     do {
      if ($1220) {
       $name$2$i$i = 22689;$name_len$1$i$i = 1;
      } else {
       $1221 = (((($1208) + (($1206*108)|0)|0)) + 32|0);
       $1222 = HEAP32[$1221>>2]|0;
       $1223 = ($1222|0)==(0);
       if (!($1223)) {
        $1224 = ((($1213)) + 64|0);
        $1225 = HEAP32[$1224>>2]|0;
        $1226 = ((($1225)) + 32|0);
        $1227 = HEAP32[$1226>>2]|0;
        $1228 = (((($1208) + (($1206*108)|0)|0)) + 28|0);
        $1229 = HEAP32[$1228>>2]|0;
        $1230 = (($1227) + ($1229)|0);
        $name$2$i$i = $1230;$name_len$1$i$i = $1222;
        break;
       }
       $1231 = ((($386)) + 20|0);
       $1232 = HEAP32[$1231>>2]|0;
       $1233 = $1232;
       $1234 = $1233 & 3;
       $1235 = ($1234|0)==(0);
       L359: do {
        if ($1235) {
         $$01$lcssa$i$i$i = $1232;
         label = 284;
        } else {
         $$014$i$i$i = $1232;$3123 = $1233;
         while(1) {
          $1236 = HEAP8[$$014$i$i$i>>0]|0;
          $1237 = ($1236<<24>>24)==(0);
          if ($1237) {
           $$pn$i$i$i = $3123;
           break L359;
          }
          $1238 = ((($$014$i$i$i)) + 1|0);
          $1239 = $1238;
          $1240 = $1239 & 3;
          $1241 = ($1240|0)==(0);
          if ($1241) {
           $$01$lcssa$i$i$i = $1238;
           label = 284;
           break;
          } else {
           $$014$i$i$i = $1238;$3123 = $1239;
          }
         }
        }
       } while(0);
       if ((label|0) == 284) {
        $w$0$i$i$i = $$01$lcssa$i$i$i;
        while(1) {
         $1242 = HEAP32[$w$0$i$i$i>>2]|0;
         $1243 = (($1242) + -16843009)|0;
         $1244 = $1242 & -2139062144;
         $1245 = $1244 ^ -2139062144;
         $1246 = $1245 & $1243;
         $1247 = ($1246|0)==(0);
         $1248 = ((($w$0$i$i$i)) + 4|0);
         if ($1247) {
          $w$0$i$i$i = $1248;
         } else {
          break;
         }
        }
        $1249 = $1242&255;
        $1250 = ($1249<<24>>24)==(0);
        if ($1250) {
         $$1$lcssa$i$i$i = $w$0$i$i$i;
        } else {
         $$pn15$i$i$i = $w$0$i$i$i;
         while(1) {
          $1251 = ((($$pn15$i$i$i)) + 1|0);
          $$pre$i$i$i = HEAP8[$1251>>0]|0;
          $1252 = ($$pre$i$i$i<<24>>24)==(0);
          if ($1252) {
           $$1$lcssa$i$i$i = $1251;
           break;
          } else {
           $$pn15$i$i$i = $1251;
          }
         }
        }
        $1253 = $$1$lcssa$i$i$i;
        $$pn$i$i$i = $1253;
       }
       $$0$i$i1$i = (($$pn$i$i$i) - ($1233))|0;
       _memcpy(($name_a$i$i|0),($1232|0),($$0$i$i1$i|0))|0;
       $1254 = (($name_a$i$i) + ($$0$i$i1$i)|0);
       $1255 = ((($1254)) + 1|0);
       HEAP8[$1254>>0] = 58;
       $1256 = (((($1208) + (($1206*108)|0)|0)) + 36|0);
       $1257 = HEAP32[$1256>>2]|0;
       $1258 = ($1257|0)>(-1);
       $1259 = ($1257|0)<($1217|0);
       $or$cond808 = $1258 & $1259;
       $1260 = HEAP32[$1213>>2]|0;
       $1261 = ((($1260)) + 24|0);
       $1262 = $1261;
       $1263 = $1262;
       $1264 = HEAP32[$1263>>2]|0;
       $1265 = (($1262) + 4)|0;
       $1266 = $1265;
       $1267 = HEAP32[$1266>>2]|0;
       do {
        if ($or$cond808) {
         $1268 = ($1257|0)<(0);
         $1269 = $1268 << 31 >> 31;
         $1270 = (_i64Add(($1264|0),($1267|0),($1257|0),($1269|0))|0);
         $1271 = tempRet0;
         $1272 = (_i64Add(($1270|0),($1271|0),1,0)|0);
         $1273 = tempRet0;
         $1274 = ($1273>>>0)<(1);
         $1275 = ($1272>>>0)<(0);
         $1276 = ($1273|0)==(1);
         $1277 = $1276 & $1275;
         $1278 = $1274 | $1277;
         if ($1278) {
          $1279 = (_append_uint32($1255,$1272)|0);
          $name$0$i$i = $1279;
          break;
         }
         $1280 = ($1273>>>0)>(232830643);
         $1281 = ($1272>>>0)>(3808348671);
         $1282 = ($1273|0)==(232830643);
         $1283 = $1282 & $1281;
         $1284 = $1280 | $1283;
         $1285 = (___udivdi3(($1272|0),($1273|0),1000000000,0)|0);
         $1286 = tempRet0;
         if ($1284) {
          $1287 = (___udivdi3(($1272|0),($1273|0),-1486618624,232830643)|0);
          $1288 = tempRet0;
          $1289 = (_append_uint32($1255,$1287)|0);
          $1290 = (___uremdi3(($1285|0),($1286|0),1000000000,0)|0);
          $1291 = tempRet0;
          $1292 = (($1290>>>0) / 100000000)&-1;
          $1293 = $1292 | 48;
          $1294 = $1293&255;
          $1295 = ((($1289)) + 1|0);
          HEAP8[$1289>>0] = $1294;
          $1296 = (($1290>>>0) % 100000000)&-1;
          $1297 = (($1296>>>0) / 10000000)&-1;
          $1298 = $1297 | 48;
          $1299 = $1298&255;
          $1300 = ((($1289)) + 2|0);
          HEAP8[$1295>>0] = $1299;
          $1301 = (($1296>>>0) % 10000000)&-1;
          $1302 = (($1301>>>0) / 1000000)&-1;
          $1303 = (($1302) + 48)|0;
          $1304 = $1303&255;
          $1305 = ((($1289)) + 3|0);
          HEAP8[$1300>>0] = $1304;
          $1306 = (($1301>>>0) % 1000000)&-1;
          $1307 = (($1306>>>0) / 100000)&-1;
          $1308 = $1307 | 48;
          $1309 = $1308&255;
          $1310 = ((($1289)) + 4|0);
          HEAP8[$1305>>0] = $1309;
          $1311 = (($1306>>>0) % 100000)&-1;
          $1312 = (($1311>>>0) / 10000)&-1;
          $1313 = $1312 | 48;
          $1314 = $1313&255;
          $1315 = ((($1289)) + 5|0);
          HEAP8[$1310>>0] = $1314;
          $1316 = (($1311>>>0) % 10000)&-1;
          $1317 = (($1316>>>0) / 1000)&-1;
          $1318 = (($1317) + 48)|0;
          $1319 = $1318&255;
          $1320 = ((($1289)) + 6|0);
          HEAP8[$1315>>0] = $1319;
          $1321 = (($1316>>>0) % 1000)&-1;
          $1322 = (($1321>>>0) / 100)&-1;
          $1323 = $1322 | 48;
          $1324 = $1323&255;
          $1325 = ((($1289)) + 7|0);
          HEAP8[$1320>>0] = $1324;
          $1326 = (($1321>>>0) % 100)&-1;
          $1327 = (($1326>>>0) / 10)&-1;
          $1328 = $1327 | 48;
          $1329 = $1328&255;
          $1330 = ((($1289)) + 8|0);
          HEAP8[$1325>>0] = $1329;
          $1331 = (($1326>>>0) % 10)&-1;
          $1332 = $1331 | 48;
          $1333 = $1332&255;
          $1334 = ((($1289)) + 9|0);
          HEAP8[$1330>>0] = $1333;
          $$01$i$i$i = $1334;
         } else {
          $1335 = (_append_uint32($1255,$1285)|0);
          $$01$i$i$i = $1335;
         }
         $1336 = (___uremdi3(($1272|0),($1273|0),1000000000,0)|0);
         $1337 = tempRet0;
         $1338 = (($1336>>>0) / 100000000)&-1;
         $1339 = $1338 | 48;
         $1340 = $1339&255;
         $1341 = ((($$01$i$i$i)) + 1|0);
         HEAP8[$$01$i$i$i>>0] = $1340;
         $1342 = (($1336>>>0) % 100000000)&-1;
         $1343 = (($1342>>>0) / 10000000)&-1;
         $1344 = $1343 | 48;
         $1345 = $1344&255;
         $1346 = ((($$01$i$i$i)) + 2|0);
         HEAP8[$1341>>0] = $1345;
         $1347 = (($1342>>>0) % 10000000)&-1;
         $1348 = (($1347>>>0) / 1000000)&-1;
         $1349 = (($1348) + 48)|0;
         $1350 = $1349&255;
         $1351 = ((($$01$i$i$i)) + 3|0);
         HEAP8[$1346>>0] = $1350;
         $1352 = (($1347>>>0) % 1000000)&-1;
         $1353 = (($1352>>>0) / 100000)&-1;
         $1354 = $1353 | 48;
         $1355 = $1354&255;
         $1356 = ((($$01$i$i$i)) + 4|0);
         HEAP8[$1351>>0] = $1355;
         $1357 = (($1352>>>0) % 100000)&-1;
         $1358 = (($1357>>>0) / 10000)&-1;
         $1359 = $1358 | 48;
         $1360 = $1359&255;
         $1361 = ((($$01$i$i$i)) + 5|0);
         HEAP8[$1356>>0] = $1360;
         $1362 = (($1357>>>0) % 10000)&-1;
         $1363 = (($1362>>>0) / 1000)&-1;
         $1364 = (($1363) + 48)|0;
         $1365 = $1364&255;
         $1366 = ((($$01$i$i$i)) + 6|0);
         HEAP8[$1361>>0] = $1365;
         $1367 = (($1362>>>0) % 1000)&-1;
         $1368 = (($1367>>>0) / 100)&-1;
         $1369 = $1368 | 48;
         $1370 = $1369&255;
         $1371 = ((($$01$i$i$i)) + 7|0);
         HEAP8[$1366>>0] = $1370;
         $1372 = (($1367>>>0) % 100)&-1;
         $1373 = (($1372>>>0) / 10)&-1;
         $1374 = $1373 | 48;
         $1375 = $1374&255;
         $1376 = ((($$01$i$i$i)) + 8|0);
         HEAP8[$1371>>0] = $1375;
         $1377 = (($1372>>>0) % 10)&-1;
         $1378 = $1377 | 48;
         $1379 = $1378&255;
         $1380 = ((($$01$i$i$i)) + 9|0);
         HEAP8[$1376>>0] = $1379;
         $name$0$i$i = $1380;
        } else {
         $1381 = ($1217|0)<(0);
         $1382 = $1381 << 31 >> 31;
         $1383 = (_i64Add(($1264|0),($1267|0),($1217|0),($1382|0))|0);
         $1384 = tempRet0;
         $1385 = (_i64Add(($1383|0),($1384|0),1,0)|0);
         $1386 = tempRet0;
         $1387 = ($1386>>>0)<(1);
         $1388 = ($1385>>>0)<(0);
         $1389 = ($1386|0)==(1);
         $1390 = $1389 & $1388;
         $1391 = $1387 | $1390;
         if ($1391) {
          $1392 = (_append_uint32($1255,$1385)|0);
          $name$0$i$i = $1392;
          break;
         }
         $1393 = ($1386>>>0)>(232830643);
         $1394 = ($1385>>>0)>(3808348671);
         $1395 = ($1386|0)==(232830643);
         $1396 = $1395 & $1394;
         $1397 = $1393 | $1396;
         $1398 = (___udivdi3(($1385|0),($1386|0),1000000000,0)|0);
         $1399 = tempRet0;
         if ($1397) {
          $1400 = (___udivdi3(($1385|0),($1386|0),-1486618624,232830643)|0);
          $1401 = tempRet0;
          $1402 = (_append_uint32($1255,$1400)|0);
          $1403 = (___uremdi3(($1398|0),($1399|0),1000000000,0)|0);
          $1404 = tempRet0;
          $1405 = (($1403>>>0) / 100000000)&-1;
          $1406 = $1405 | 48;
          $1407 = $1406&255;
          $1408 = ((($1402)) + 1|0);
          HEAP8[$1402>>0] = $1407;
          $1409 = (($1403>>>0) % 100000000)&-1;
          $1410 = (($1409>>>0) / 10000000)&-1;
          $1411 = $1410 | 48;
          $1412 = $1411&255;
          $1413 = ((($1402)) + 2|0);
          HEAP8[$1408>>0] = $1412;
          $1414 = (($1409>>>0) % 10000000)&-1;
          $1415 = (($1414>>>0) / 1000000)&-1;
          $1416 = (($1415) + 48)|0;
          $1417 = $1416&255;
          $1418 = ((($1402)) + 3|0);
          HEAP8[$1413>>0] = $1417;
          $1419 = (($1414>>>0) % 1000000)&-1;
          $1420 = (($1419>>>0) / 100000)&-1;
          $1421 = $1420 | 48;
          $1422 = $1421&255;
          $1423 = ((($1402)) + 4|0);
          HEAP8[$1418>>0] = $1422;
          $1424 = (($1419>>>0) % 100000)&-1;
          $1425 = (($1424>>>0) / 10000)&-1;
          $1426 = $1425 | 48;
          $1427 = $1426&255;
          $1428 = ((($1402)) + 5|0);
          HEAP8[$1423>>0] = $1427;
          $1429 = (($1424>>>0) % 10000)&-1;
          $1430 = (($1429>>>0) / 1000)&-1;
          $1431 = (($1430) + 48)|0;
          $1432 = $1431&255;
          $1433 = ((($1402)) + 6|0);
          HEAP8[$1428>>0] = $1432;
          $1434 = (($1429>>>0) % 1000)&-1;
          $1435 = (($1434>>>0) / 100)&-1;
          $1436 = $1435 | 48;
          $1437 = $1436&255;
          $1438 = ((($1402)) + 7|0);
          HEAP8[$1433>>0] = $1437;
          $1439 = (($1434>>>0) % 100)&-1;
          $1440 = (($1439>>>0) / 10)&-1;
          $1441 = $1440 | 48;
          $1442 = $1441&255;
          $1443 = ((($1402)) + 8|0);
          HEAP8[$1438>>0] = $1442;
          $1444 = (($1439>>>0) % 10)&-1;
          $1445 = $1444 | 48;
          $1446 = $1445&255;
          $1447 = ((($1402)) + 9|0);
          HEAP8[$1443>>0] = $1446;
          $$01$i4$i$i = $1447;
         } else {
          $1448 = (_append_uint32($1255,$1398)|0);
          $$01$i4$i$i = $1448;
         }
         $1449 = (___uremdi3(($1385|0),($1386|0),1000000000,0)|0);
         $1450 = tempRet0;
         $1451 = (($1449>>>0) / 100000000)&-1;
         $1452 = $1451 | 48;
         $1453 = $1452&255;
         $1454 = ((($$01$i4$i$i)) + 1|0);
         HEAP8[$$01$i4$i$i>>0] = $1453;
         $1455 = (($1449>>>0) % 100000000)&-1;
         $1456 = (($1455>>>0) / 10000000)&-1;
         $1457 = $1456 | 48;
         $1458 = $1457&255;
         $1459 = ((($$01$i4$i$i)) + 2|0);
         HEAP8[$1454>>0] = $1458;
         $1460 = (($1455>>>0) % 10000000)&-1;
         $1461 = (($1460>>>0) / 1000000)&-1;
         $1462 = (($1461) + 48)|0;
         $1463 = $1462&255;
         $1464 = ((($$01$i4$i$i)) + 3|0);
         HEAP8[$1459>>0] = $1463;
         $1465 = (($1460>>>0) % 1000000)&-1;
         $1466 = (($1465>>>0) / 100000)&-1;
         $1467 = $1466 | 48;
         $1468 = $1467&255;
         $1469 = ((($$01$i4$i$i)) + 4|0);
         HEAP8[$1464>>0] = $1468;
         $1470 = (($1465>>>0) % 100000)&-1;
         $1471 = (($1470>>>0) / 10000)&-1;
         $1472 = $1471 | 48;
         $1473 = $1472&255;
         $1474 = ((($$01$i4$i$i)) + 5|0);
         HEAP8[$1469>>0] = $1473;
         $1475 = (($1470>>>0) % 10000)&-1;
         $1476 = (($1475>>>0) / 1000)&-1;
         $1477 = (($1476) + 48)|0;
         $1478 = $1477&255;
         $1479 = ((($$01$i4$i$i)) + 6|0);
         HEAP8[$1474>>0] = $1478;
         $1480 = (($1475>>>0) % 1000)&-1;
         $1481 = (($1480>>>0) / 100)&-1;
         $1482 = $1481 | 48;
         $1483 = $1482&255;
         $1484 = ((($$01$i4$i$i)) + 7|0);
         HEAP8[$1479>>0] = $1483;
         $1485 = (($1480>>>0) % 100)&-1;
         $1486 = (($1485>>>0) / 10)&-1;
         $1487 = $1486 | 48;
         $1488 = $1487&255;
         $1489 = ((($$01$i4$i$i)) + 8|0);
         HEAP8[$1484>>0] = $1488;
         $1490 = (($1485>>>0) % 10)&-1;
         $1491 = $1490 | 48;
         $1492 = $1491&255;
         $1493 = ((($$01$i4$i$i)) + 9|0);
         HEAP8[$1489>>0] = $1492;
         $name$0$i$i = $1493;
        }
       } while(0);
       $1494 = $name$0$i$i;
       $1495 = $name_a$i$i;
       $1496 = (($1494) - ($1495))|0;
       $name$2$i$i = $name_a$i$i;$name_len$1$i$i = $1496;
      }
     } while(0);
     $1497 = (((($1208) + (($1206*108)|0)|0)) + 24|0);
     $1498 = HEAP32[$1497>>2]|0;
     $1499 = ($1498|0)<(-1);
     do {
      if (!($1499)) {
       $1500 = ((($1214)) + 40|0);
       $1501 = HEAP32[$1500>>2]|0;
       $1502 = ($1498|0)<($1501|0);
       if ($1502) {
        $1503 = ($1498|0)==(-1);
        if ($1503) {
         $1535 = 0;
        } else {
         $1504 = ((($1214)) + 44|0);
         $1505 = HEAP32[$1504>>2]|0;
         $1506 = (((($1505) + (($1498*20)|0)|0)) + 12|0);
         $1507 = HEAP32[$1506>>2]|0;
         $1508 = (($1507) + 4)|0;
         $1535 = $1508;
        }
        $1509 = HEAP32[$395>>2]|0;
        $1510 = $1509 & 1536;
        $1511 = ($1510|0)==(0);
        if ($1511) {
         $1520 = (((($1208) + (($1206*108)|0)|0)) + 16|0);
         HEAP32[$1520>>2] = 0;
         $$pre424 = HEAP32[$395>>2]|0;
         $1522 = $$pre424;$seq$0$i$i = 17669;
        } else {
         $1512 = ((($1213)) + 68|0);
         $1513 = HEAP32[$1512>>2]|0;
         $1514 = ((($1513)) + 32|0);
         $1515 = HEAP32[$1514>>2]|0;
         $1516 = ($1515|0)==(0|0);
         if ($1516) {
          break;
         }
         $1517 = (((($1208) + (($1206*108)|0)|0)) + 72|0);
         $1518 = HEAP32[$1517>>2]|0;
         $1519 = (($1515) + ($1518)|0);
         $1522 = $1509;$seq$0$i$i = $1519;
        }
        $1521 = $1522 & 1024;
        $1523 = ($1521|0)==(0);
        if ($1523) {
         $qual$0$i$i = 0;
        } else {
         $1524 = ((($1213)) + 72|0);
         $1525 = HEAP32[$1524>>2]|0;
         $1526 = ((($1525)) + 32|0);
         $1527 = HEAP32[$1526>>2]|0;
         $1528 = ($1527|0)==(0|0);
         if ($1528) {
          break;
         }
         $1529 = (((($1208) + (($1206*108)|0)|0)) + 76|0);
         $1530 = HEAP32[$1529>>2]|0;
         $1531 = (($1527) + ($1530)|0);
         $qual$0$i$i = $1531;
        }
        $1532 = (((($1208) + (($1206*108)|0)|0)) + 60|0);
        $1533 = HEAP32[$1532>>2]|0;
        $1534 = (($1533) + ($1535))|0;
        $1536 = (((($1208) + (($1206*108)|0)|0)) + 8|0);
        $1537 = HEAP32[$1536>>2]|0;
        $1538 = (((($1208) + (($1206*108)|0)|0)) + 4|0);
        $1539 = HEAP32[$1538>>2]|0;
        $1540 = (((($1208) + (($1206*108)|0)|0)) + 20|0);
        $1541 = HEAP32[$1540>>2]|0;
        $1542 = (((($1208) + (($1206*108)|0)|0)) + 88|0);
        $1543 = HEAP32[$1542>>2]|0;
        $1544 = (((($1208) + (($1206*108)|0)|0)) + 92|0);
        $1545 = HEAP32[$1544>>2]|0;
        $1546 = (((($1208) + (($1206*108)|0)|0)) + 84|0);
        $1547 = HEAP32[$1546>>2]|0;
        $1548 = (((($1208) + (($1206*108)|0)|0)) + 80|0);
        $1549 = HEAP32[$1548>>2]|0;
        $1550 = ((($1213)) + 28|0);
        $1551 = HEAP32[$1550>>2]|0;
        $1552 = (($1551) + ($1549<<2)|0);
        $1553 = (((($1208) + (($1206*108)|0)|0)) + 40|0);
        $1554 = HEAP32[$1553>>2]|0;
        $1555 = (((($1208) + (($1206*108)|0)|0)) + 44|0);
        $1556 = HEAP32[$1555>>2]|0;
        $1557 = (((($1208) + (($1206*108)|0)|0)) + 48|0);
        $1558 = HEAP32[$1557>>2]|0;
        $1559 = (((($1208) + (($1206*108)|0)|0)) + 16|0);
        $1560 = HEAP32[$1559>>2]|0;
        $1561 = (($name_len$1$i$i) + 1)|0;
        $1562 = $1547 << 2;
        $1563 = (($1561) + ($1562))|0;
        $1564 = (($1560) + 1)|0;
        $1565 = (($1564|0) / 2)&-1;
        $1566 = (($1563) + ($1565))|0;
        $1567 = (($1566) + ($1560))|0;
        $1568 = (($1567) + ($1534))|0;
        $1569 = ((($b)) + 36|0);
        $1570 = HEAP32[$1569>>2]|0;
        $1571 = ($1570|0)<($1568|0);
        if ($1571) {
         $1572 = (($1568) + -1)|0;
         $1573 = $1572 >> 1;
         $1574 = $1572 | $1573;
         $1575 = $1574 >> 2;
         $1576 = $1574 | $1575;
         $1577 = $1576 >> 4;
         $1578 = $1576 | $1577;
         $1579 = $1578 >> 8;
         $1580 = $1578 | $1579;
         $1581 = $1580 >> 16;
         $1582 = $1580 | $1581;
         $1583 = (($1582) + 1)|0;
         HEAP32[$1569>>2] = $1583;
         $1584 = ((($b)) + 40|0);
         $1585 = HEAP32[$1584>>2]|0;
         $1586 = (_realloc($1585,$1583)|0);
         HEAP32[$1584>>2] = $1586;
         $1587 = ($1586|0)==(0|0);
         if ($1587) {
          break;
         }
        }
        $1588 = ((($b)) + 32|0);
        HEAP32[$1588>>2] = $1568;
        HEAP32[$b>>2] = $1539;
        $1589 = (($1541) + -1)|0;
        $1590 = ((($b)) + 4|0);
        HEAP32[$1590>>2] = $1589;
        $1591 = ($1589|0)<(0);
        $1592 = $1591 << 31 >> 31;
        $1593 = ($1543|0)<(0);
        $1594 = $1593 << 31 >> 31;
        $1595 = (_i64Add(($1543|0),($1594|0),-1,-1)|0);
        $1596 = tempRet0;
        $l$0$i$i$i$i = 5;$s$0$i$i$i$i = 14;$t$0$i$i$i$i = 4681;
        while(1) {
         $1597 = ($l$0$i$i$i$i|0)>(0);
         if (!($1597)) {
          $1618 = 0;$1627 = 0;
          break;
         }
         $1598 = (_bitshift64Ashr(($1589|0),($1592|0),($s$0$i$i$i$i|0))|0);
         $1599 = tempRet0;
         $1600 = (_bitshift64Ashr(($1595|0),($1596|0),($s$0$i$i$i$i|0))|0);
         $1601 = tempRet0;
         $1602 = ($1598|0)==($1600|0);
         $1603 = ($1599|0)==($1601|0);
         $1604 = $1602 & $1603;
         if ($1604) {
          label = 319;
          break;
         }
         $1608 = (($l$0$i$i$i$i) + -1)|0;
         $1609 = (($s$0$i$i$i$i) + 3)|0;
         $1610 = ($1608*3)|0;
         $1611 = 1 << $1610;
         $1612 = (($t$0$i$i$i$i) - ($1611))|0;
         $l$0$i$i$i$i = $1608;$s$0$i$i$i$i = $1609;$t$0$i$i$i$i = $1612;
        }
        if ((label|0) == 319) {
         $1605 = (_i64Add(($t$0$i$i$i$i|0),0,($1598|0),($1599|0))|0);
         $1606 = tempRet0;
         $1607 = $1605 & 65535;
         $1618 = $1607;$1627 = 0;
        }
        $1613 = ((($b)) + 8|0);
        $1614 = (_bitshift64Shl(($1545|0),0,16)|0);
        $1615 = tempRet0;
        $1616 = $1614 & 16711680;
        $1617 = $1618 | $1616;
        $1619 = (_bitshift64Shl(($1561|0),0,24)|0);
        $1620 = tempRet0;
        $1621 = $1619 & -16777216;
        $1622 = $1617 | $1621;
        $1623 = (_bitshift64Shl(($1547|0),0,48)|0);
        $1624 = tempRet0;
        $1625 = $1537 & 65535;
        $1626 = $1627 | $1625;
        $1628 = $1622 | $1623;
        $1629 = $1626 | $1624;
        $1630 = $1613;
        $1631 = $1630;
        HEAP32[$1631>>2] = $1628;
        $1632 = (($1630) + 4)|0;
        $1633 = $1632;
        HEAP32[$1633>>2] = $1629;
        $1634 = ((($b)) + 16|0);
        HEAP32[$1634>>2] = $1560;
        $1635 = ((($b)) + 20|0);
        HEAP32[$1635>>2] = $1554;
        $1636 = (($1556) + -1)|0;
        $1637 = ((($b)) + 24|0);
        HEAP32[$1637>>2] = $1636;
        $1638 = ((($b)) + 28|0);
        HEAP32[$1638>>2] = $1558;
        $1639 = ((($b)) + 40|0);
        $1640 = HEAP32[$1639>>2]|0;
        $1641 = $name$2$i$i;
        $1642 = $1640;
        $1643 = $1641 ^ $1642;
        $1644 = $1643 & 3;
        $1645 = ($1644|0)==(0);
        L417: do {
         if ($1645) {
          $1646 = $1641 & 3;
          $1647 = ($1646|0)!=(0);
          $1648 = ($name_len$1$i$i|0)!=(0);
          $or$cond28$i$i$i$i$i = $1648 & $1647;
          if ($or$cond28$i$i$i$i$i) {
           $$031$i$i$i$i$i = $name_len$1$i$i;$$0430$i$i$i$i$i = $name$2$i$i;$$0629$i$i$i$i$i = $1640;
           while(1) {
            $1649 = HEAP8[$$0430$i$i$i$i$i>>0]|0;
            HEAP8[$$0629$i$i$i$i$i>>0] = $1649;
            $1650 = ($1649<<24>>24)==(0);
            if ($1650) {
             $$28$i$i$i$i$i = $$0629$i$i$i$i$i;$$3$i$i$i$i$i = $$031$i$i$i$i$i;
             break L417;
            }
            $1651 = (($$031$i$i$i$i$i) + -1)|0;
            $1652 = ((($$0430$i$i$i$i$i)) + 1|0);
            $1653 = ((($$0629$i$i$i$i$i)) + 1|0);
            $1654 = $1652;
            $1655 = $1654 & 3;
            $1656 = ($1655|0)!=(0);
            $1657 = ($1651|0)!=(0);
            $or$cond$i$i$i$i$i = $1657 & $1656;
            if ($or$cond$i$i$i$i$i) {
             $$031$i$i$i$i$i = $1651;$$0430$i$i$i$i$i = $1652;$$0629$i$i$i$i$i = $1653;
            } else {
             $$0$lcssa$i$i$i$i$i = $1651;$$04$lcssa$i$i$i$i$i = $1652;$$06$lcssa$i$i$i$i$i = $1653;$$lcssa$i$i$i$i$i = $1657;
             break;
            }
           }
          } else {
           $$0$lcssa$i$i$i$i$i = $name_len$1$i$i;$$04$lcssa$i$i$i$i$i = $name$2$i$i;$$06$lcssa$i$i$i$i$i = $1640;$$lcssa$i$i$i$i$i = $1648;
          }
          if ($$lcssa$i$i$i$i$i) {
           $$pre425 = HEAP8[$$04$lcssa$i$i$i$i$i>>0]|0;
           $phitmp = ($$pre425<<24>>24)==(0);
           if ($phitmp) {
            $$28$i$i$i$i$i = $$06$lcssa$i$i$i$i$i;$$3$i$i$i$i$i = $$0$lcssa$i$i$i$i$i;
           } else {
            $1658 = ($$0$lcssa$i$i$i$i$i>>>0)>(3);
            L426: do {
             if ($1658) {
              $$117$i$i$i$i$i = $$0$lcssa$i$i$i$i$i;$wd$018$i$i$i$i$i = $$06$lcssa$i$i$i$i$i;$ws$019$i$i$i$i$i = $$04$lcssa$i$i$i$i$i;
              while(1) {
               $1659 = HEAP32[$ws$019$i$i$i$i$i>>2]|0;
               $1660 = (($1659) + -16843009)|0;
               $1661 = $1659 & -2139062144;
               $1662 = $1661 ^ -2139062144;
               $1663 = $1662 & $1660;
               $1664 = ($1663|0)==(0);
               if (!($1664)) {
                $$1$lcssa$i$i$i$i$i = $$117$i$i$i$i$i;$wd$0$lcssa$i$i$i$i$i = $wd$018$i$i$i$i$i;$ws$0$lcssa$i$i$i$i$i = $ws$019$i$i$i$i$i;
                break L426;
               }
               HEAP32[$wd$018$i$i$i$i$i>>2] = $1659;
               $1665 = (($$117$i$i$i$i$i) + -4)|0;
               $1666 = ((($ws$019$i$i$i$i$i)) + 4|0);
               $1667 = ((($wd$018$i$i$i$i$i)) + 4|0);
               $1668 = ($1665>>>0)>(3);
               if ($1668) {
                $$117$i$i$i$i$i = $1665;$wd$018$i$i$i$i$i = $1667;$ws$019$i$i$i$i$i = $1666;
               } else {
                $$1$lcssa$i$i$i$i$i = $1665;$wd$0$lcssa$i$i$i$i$i = $1667;$ws$0$lcssa$i$i$i$i$i = $1666;
                break;
               }
              }
             } else {
              $$1$lcssa$i$i$i$i$i = $$0$lcssa$i$i$i$i$i;$wd$0$lcssa$i$i$i$i$i = $$06$lcssa$i$i$i$i$i;$ws$0$lcssa$i$i$i$i$i = $$04$lcssa$i$i$i$i$i;
             }
            } while(0);
            $$15$ph$i$i$i$i$i = $ws$0$lcssa$i$i$i$i$i;$$17$ph$i$i$i$i$i = $wd$0$lcssa$i$i$i$i$i;$$2$ph$i$i$i$i$i = $$1$lcssa$i$i$i$i$i;
            label = 331;
           }
          } else {
           $$28$i$i$i$i$i = $$06$lcssa$i$i$i$i$i;$$3$i$i$i$i$i = 0;
          }
         } else {
          $$15$ph$i$i$i$i$i = $name$2$i$i;$$17$ph$i$i$i$i$i = $1640;$$2$ph$i$i$i$i$i = $name_len$1$i$i;
          label = 331;
         }
        } while(0);
        L431: do {
         if ((label|0) == 331) {
          $1669 = ($$2$ph$i$i$i$i$i|0)==(0);
          if ($1669) {
           $$28$i$i$i$i$i = $$17$ph$i$i$i$i$i;$$3$i$i$i$i$i = 0;
          } else {
           $$1511$i$i$i$i$i = $$15$ph$i$i$i$i$i;$$1710$i$i$i$i$i = $$17$ph$i$i$i$i$i;$$212$i$i$i$i$i = $$2$ph$i$i$i$i$i;
           while(1) {
            $1670 = HEAP8[$$1511$i$i$i$i$i>>0]|0;
            HEAP8[$$1710$i$i$i$i$i>>0] = $1670;
            $1671 = ($1670<<24>>24)==(0);
            if ($1671) {
             $$28$i$i$i$i$i = $$1710$i$i$i$i$i;$$3$i$i$i$i$i = $$212$i$i$i$i$i;
             break L431;
            }
            $1672 = (($$212$i$i$i$i$i) + -1)|0;
            $1673 = ((($$1511$i$i$i$i$i)) + 1|0);
            $1674 = ((($$1710$i$i$i$i$i)) + 1|0);
            $1675 = ($1672|0)==(0);
            if ($1675) {
             $$28$i$i$i$i$i = $1674;$$3$i$i$i$i$i = 0;
             break;
            } else {
             $$1511$i$i$i$i$i = $1673;$$1710$i$i$i$i$i = $1674;$$212$i$i$i$i$i = $1672;
            }
           }
          }
         }
        } while(0);
        _memset(($$28$i$i$i$i$i|0),0,($$3$i$i$i$i$i|0))|0;
        $1676 = (($1640) + ($name_len$1$i$i)|0);
        HEAP8[$1676>>0] = 0;
        $1677 = (($1640) + ($1561)|0);
        _memcpy(($1677|0),($1552|0),($1562|0))|0;
        $1678 = (($1677) + ($1562)|0);
        $1679 = ($1560|0)>(1);
        $smax = $1679 ? $1560 : 1;
        $1680 = $smax >>> 1;
        $1681 = (($name_len$1$i$i) + ($1680))|0;
        $1682 = $1547 << 2;
        $1683 = (($1681) + ($1682))|0;
        $1684 = (($1683) + 1)|0;
        $cp$0$i$i$i = $1678;$i$0$i$i$i = 0;
        while(1) {
         $1685 = $i$0$i$i$i | 1;
         $1686 = ($1685|0)<($1560|0);
         if (!($1686)) {
          break;
         }
         $1687 = (($seq$0$i$i) + ($i$0$i$i$i)|0);
         $1688 = HEAP8[$1687>>0]|0;
         $1689 = $1688&255;
         $1690 = (20267 + ($1689)|0);
         $1691 = HEAP8[$1690>>0]|0;
         $1692 = $1691 << 24 >> 24;
         $1693 = $1692 << 4;
         $1694 = (($seq$0$i$i) + ($1685)|0);
         $1695 = HEAP8[$1694>>0]|0;
         $1696 = $1695&255;
         $1697 = (20267 + ($1696)|0);
         $1698 = HEAP8[$1697>>0]|0;
         $1699 = $1698&255;
         $1700 = (($1693) + ($1699))|0;
         $1701 = $1700&255;
         HEAP8[$cp$0$i$i$i>>0] = $1701;
         $1702 = ((($cp$0$i$i$i)) + 1|0);
         $1703 = (($i$0$i$i$i) + 2)|0;
         $cp$0$i$i$i = $1702;$i$0$i$i$i = $1703;
        }
        $1704 = $1680 << 1;
        $scevgep787 = (($1640) + ($1684)|0);
        $1705 = ($1704|0)<($1560|0);
        if ($1705) {
         $1706 = (($seq$0$i$i) + ($1704)|0);
         $1707 = HEAP8[$1706>>0]|0;
         $1708 = $1707&255;
         $1709 = (20267 + ($1708)|0);
         $1710 = HEAP8[$1709>>0]|0;
         $1711 = $1710 << 24 >> 24;
         $1712 = $1711 << 4;
         $1713 = $1712&255;
         $1714 = ((($scevgep787)) + 1|0);
         HEAP8[$scevgep787>>0] = $1713;
         $cp$1$i$i$i = $1714;
        } else {
         $cp$1$i$i$i = $scevgep787;
        }
        $1715 = ($qual$0$i$i|0)==(0|0);
        if ($1715) {
         _memset(($cp$1$i$i$i|0),-1,($1560|0))|0;
        } else {
         _memcpy(($cp$1$i$i$i|0),($qual$0$i$i|0),($1560|0))|0;
        }
        $1716 = HEAP32[$1639>>2]|0;
        $1717 = $1613;
        $1718 = $1717;
        $1719 = HEAP32[$1718>>2]|0;
        $1720 = (($1717) + 4)|0;
        $1721 = $1720;
        $1722 = HEAP32[$1721>>2]|0;
        $1723 = (_bitshift64Lshr(($1719|0),($1722|0),46)|0);
        $1724 = tempRet0;
        $1725 = $1723 & 262140;
        $1726 = (($1716) + ($1725)|0);
        $1727 = (_bitshift64Lshr(($1719|0),($1722|0),24)|0);
        $1728 = tempRet0;
        $1729 = $1727 & 255;
        $1730 = (($1726) + ($1729)|0);
        $1731 = HEAP32[$1634>>2]|0;
        $1732 = (($1731) + 1)|0;
        $1733 = $1732 >> 1;
        $1734 = (($1730) + ($1733)|0);
        $1735 = (($1734) + ($1731)|0);
        $1736 = HEAP32[$1532>>2]|0;
        $1737 = ($1736|0)==(0);
        if ($1737) {
         $aux$0$i$i = $1735;
        } else {
         $1738 = ((($1213)) + 84|0);
         $1739 = HEAP32[$1738>>2]|0;
         $1740 = ((($1739)) + 32|0);
         $1741 = HEAP32[$1740>>2]|0;
         $1742 = (((($1208) + (($1206*108)|0)|0)) + 56|0);
         $1743 = HEAP32[$1742>>2]|0;
         $1744 = (($1741) + ($1743)|0);
         _memcpy(($1735|0),($1744|0),($1736|0))|0;
         $1745 = HEAP32[$1532>>2]|0;
         $1746 = (($1735) + ($1745)|0);
         $aux$0$i$i = $1746;
        }
        $1747 = HEAP32[$1497>>2]|0;
        $1748 = ($1747|0)==(-1);
        if ($1748) {
         $aux$1$i$i = $aux$0$i$i;
        } else {
         $1749 = ((($1214)) + 44|0);
         $1750 = HEAP32[$1749>>2]|0;
         $1751 = (((($1750) + (($1747*20)|0)|0)) + 12|0);
         $1752 = HEAP32[$1751>>2]|0;
         $1753 = ((($aux$0$i$i)) + 1|0);
         HEAP8[$aux$0$i$i>>0] = 82;
         $1754 = ((($aux$0$i$i)) + 2|0);
         HEAP8[$1753>>0] = 71;
         $1755 = ((($aux$0$i$i)) + 3|0);
         HEAP8[$1754>>0] = 90;
         $1756 = HEAP32[$1497>>2]|0;
         $1757 = HEAP32[$1749>>2]|0;
         $1758 = (($1757) + (($1756*20)|0)|0);
         $1759 = HEAP32[$1758>>2]|0;
         _memcpy(($1755|0),($1759|0),($1752|0))|0;
         $1760 = (($1755) + ($1752)|0);
         $1761 = ((($1760)) + 1|0);
         HEAP8[$1760>>0] = 0;
         $aux$1$i$i = $1761;
        }
        $1762 = $aux$1$i$i;
        $1763 = $1735;
        $1764 = (($1762) - ($1763))|0;
        $1765 = ($1764|0)>(-1);
        if ($1765) {
         $$0 = $1764;
        } else {
         break L351;
        }
        STACKTOP = sp;return ($$0|0);
       }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 226) {
   $1084 = ((($572)) + 32|0);
   $1085 = HEAP32[$1084>>2]|0;
   $1086 = ($1085|0)==(0|0);
   if (!($1086)) {
    _free($1085);
   }
   _free($572);
   $1088 = $3122;
   label = 229;
  }
  if ((label|0) == 229) {
   $1087 = ($1088|0)==(0|0);
   if (!($1087)) {
    $1089 = ((($1088)) + 4|0);
    HEAP32[$1089>>2] = 0;
    _cram_free_slice($573);
   }
   $1090 = ((($c$6$i$i$i)) + 100|0);
   HEAP32[$1090>>2] = 0;
  }
  $1766 = HEAP32[$385>>2]|0;
  $1767 = ((($1766)) + 34644|0);
  $1768 = HEAP32[$1767>>2]|0;
  $1769 = ($1768|0)!=(0);
  $1770 = $1769 ? -1 : -2;
  $$0 = $1770;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 3:  {
  $2 = ((($fp)) + 16|0);
  $3 = ((($fp)) + 8|0);
  $4 = ((($fp)) + 16|0);
  $5 = ((($fp)) + 24|0);
  $6 = ((($b)) + 32|0);
  $7 = ((($b)) + 40|0);
  $8 = ((($b)) + 36|0);
  $9 = ((($h)) + 16|0);
  $10 = ((($b)) + 8|0);
  $11 = ((($f$i$i)) + 4|0);
  $12 = ((($f$i$i)) + 44|0);
  $13 = ((($f$i$i)) + 8|0);
  $14 = ((($f$i$i)) + 76|0);
  $15 = ((($f$i$i)) + 104|0);
  $16 = ((($f$i$i)) + 108|0);
  $17 = ((($f$i$i)) + 100|0);
  $18 = ((($f$i7$i)) + 4|0);
  $19 = ((($f$i7$i)) + 44|0);
  $20 = ((($f$i7$i)) + 8|0);
  $21 = ((($f$i7$i)) + 76|0);
  $22 = ((($f$i7$i)) + 104|0);
  $23 = ((($f$i7$i)) + 108|0);
  $24 = ((($f$i7$i)) + 100|0);
  $25 = ((($b)) + 4|0);
  $26 = ((($f$i9$i)) + 4|0);
  $27 = ((($f$i9$i)) + 44|0);
  $28 = ((($f$i9$i)) + 8|0);
  $29 = ((($f$i9$i)) + 76|0);
  $30 = ((($f$i9$i)) + 104|0);
  $31 = ((($f$i9$i)) + 108|0);
  $32 = ((($f$i9$i)) + 100|0);
  $33 = ((($f$i43$i)) + 4|0);
  $34 = ((($f$i43$i)) + 44|0);
  $35 = ((($f$i43$i)) + 8|0);
  $36 = ((($f$i43$i)) + 76|0);
  $37 = ((($f$i43$i)) + 104|0);
  $38 = ((($f$i43$i)) + 108|0);
  $39 = ((($f$i43$i)) + 100|0);
  $40 = ((($b)) + 24|0);
  $41 = ((($b)) + 20|0);
  $42 = ((($f$i45$i)) + 4|0);
  $43 = ((($f$i45$i)) + 44|0);
  $44 = ((($f$i45$i)) + 8|0);
  $45 = ((($f$i45$i)) + 76|0);
  $46 = ((($f$i45$i)) + 104|0);
  $47 = ((($f$i45$i)) + 108|0);
  $48 = ((($f$i45$i)) + 100|0);
  $49 = ((($b)) + 28|0);
  $50 = ((($b)) + 16|0);
  $51 = ((($f$i90$i)) + 4|0);
  $52 = ((($f$i90$i)) + 44|0);
  $53 = ((($f$i90$i)) + 8|0);
  $54 = ((($f$i90$i)) + 76|0);
  $55 = ((($f$i90$i)) + 104|0);
  $56 = ((($f$i90$i)) + 108|0);
  $57 = ((($f$i90$i)) + 100|0);
  $58 = ((($f$i110$i)) + 4|0);
  $59 = ((($f$i110$i)) + 44|0);
  $60 = ((($f$i110$i)) + 8|0);
  $61 = ((($f$i110$i)) + 76|0);
  $62 = ((($f$i110$i)) + 104|0);
  $63 = ((($f$i110$i)) + 108|0);
  $64 = ((($f$i110$i)) + 100|0);
  $65 = ((($f$i$i130$i)) + 4|0);
  $66 = ((($f$i$i130$i)) + 8|0);
  $67 = ((($f$i$i130$i)) + 44|0);
  $68 = ((($f$i$i130$i)) + 76|0);
  $69 = ((($f$i$i130$i)) + 104|0);
  $70 = ((($f$i$i130$i)) + 108|0);
  $71 = ((($f$i$i130$i)) + 100|0);
  $72 = ((($f$i$i137$i)) + 4|0);
  $73 = ((($f$i$i137$i)) + 8|0);
  $74 = ((($f$i$i137$i)) + 44|0);
  $75 = ((($f$i$i137$i)) + 76|0);
  $76 = ((($f$i$i137$i)) + 104|0);
  $77 = ((($f$i$i137$i)) + 108|0);
  $78 = ((($f$i$i137$i)) + 100|0);
  $79 = ((($f$i$i$i)) + 4|0);
  $80 = ((($f$i$i$i)) + 8|0);
  $81 = ((($f$i$i$i)) + 44|0);
  $82 = ((($f$i$i$i)) + 76|0);
  $83 = ((($f$i$i$i)) + 104|0);
  $84 = ((($f$i$i$i)) + 108|0);
  $85 = ((($f$i$i$i)) + 100|0);
  $86 = ((($f$i41$i)) + 4|0);
  $87 = ((($f$i41$i)) + 44|0);
  $88 = ((($f$i41$i)) + 8|0);
  $89 = ((($f$i41$i)) + 76|0);
  $90 = ((($f$i41$i)) + 104|0);
  $91 = ((($f$i41$i)) + 108|0);
  $92 = ((($f$i41$i)) + 100|0);
  $93 = ((($f$i63$i)) + 4|0);
  $94 = ((($f$i63$i)) + 44|0);
  $95 = ((($f$i63$i)) + 8|0);
  $96 = ((($f$i63$i)) + 76|0);
  $97 = ((($f$i63$i)) + 104|0);
  $98 = ((($f$i63$i)) + 108|0);
  $99 = ((($f$i63$i)) + 100|0);
  $100 = ((($f$i174$i)) + 4|0);
  $101 = ((($f$i174$i)) + 44|0);
  $102 = ((($f$i174$i)) + 8|0);
  $103 = ((($f$i174$i)) + 76|0);
  $104 = ((($f$i174$i)) + 104|0);
  $105 = ((($f$i174$i)) + 108|0);
  $106 = ((($f$i174$i)) + 100|0);
  $107 = ((($f$i169$i)) + 4|0);
  $108 = ((($f$i169$i)) + 44|0);
  $109 = ((($f$i169$i)) + 8|0);
  $110 = ((($f$i169$i)) + 76|0);
  $111 = ((($f$i169$i)) + 104|0);
  $112 = ((($f$i169$i)) + 108|0);
  $113 = ((($f$i169$i)) + 100|0);
  $114 = ((($f$i164$i)) + 4|0);
  $115 = ((($f$i164$i)) + 44|0);
  $116 = ((($f$i164$i)) + 8|0);
  $117 = ((($f$i164$i)) + 76|0);
  $118 = ((($f$i164$i)) + 104|0);
  $119 = ((($f$i164$i)) + 108|0);
  $120 = ((($f$i164$i)) + 100|0);
  $121 = ((($f$i159$i)) + 4|0);
  $122 = ((($f$i159$i)) + 44|0);
  $123 = ((($f$i159$i)) + 8|0);
  $124 = ((($f$i159$i)) + 76|0);
  $125 = ((($f$i159$i)) + 104|0);
  $126 = ((($f$i159$i)) + 108|0);
  $127 = ((($f$i159$i)) + 100|0);
  $128 = ((($f$i11$i)) + 4|0);
  $129 = ((($f$i11$i)) + 44|0);
  $130 = ((($f$i11$i)) + 8|0);
  $131 = ((($f$i11$i)) + 76|0);
  $132 = ((($f$i11$i)) + 104|0);
  $133 = ((($f$i11$i)) + 108|0);
  $134 = ((($f$i11$i)) + 100|0);
  $135 = ((($h)) + 4|0);
  L470: while(1) {
   $1771 = HEAP32[$4>>2]|0;
   $1772 = ($1771|0)==(0);
   if ($1772) {
    $1773 = (_hts_getline($fp,$2)|0);
    $1774 = ($1773|0)<(0);
    if ($1774) {
     $$0 = -1;
     label = 631;
     break;
    }
   }
   $1775 = HEAP32[$5>>2]|0;
   HEAP32[$6>>2] = 0;
   $1776 = HEAP32[$7>>2]|0;
   $1777 = HEAP32[$8>>2]|0;
   ;HEAP32[$b>>2]=0|0;HEAP32[$b+4>>2]=0|0;HEAP32[$b+8>>2]=0|0;HEAP32[$b+12>>2]=0|0;HEAP32[$b+16>>2]=0|0;HEAP32[$b+20>>2]=0|0;HEAP32[$b+24>>2]=0|0;HEAP32[$b+28>>2]=0|0;
   $1778 = HEAP32[$9>>2]|0;
   $1779 = ($1778|0)==(0|0);
   L475: do {
    if ($1779) {
     $1780 = (_malloc(128)|0);
     HEAP32[$9>>2] = $1780;
     $i$0$i6 = 0;
     while(1) {
      $exitcond788 = ($i$0$i6|0)==(128);
      if ($exitcond788) {
       $i$1$i = 0;
       break;
      }
      $1781 = HEAP32[$9>>2]|0;
      $1782 = (($1781) + ($i$0$i6)|0);
      HEAP8[$1782>>0] = -1;
      $1783 = (($i$0$i6) + 1)|0;
      $i$0$i6 = $1783;
     }
     while(1) {
      $1784 = ($i$1$i|0)==(10);
      if ($1784) {
       $p$i$sroa$0$0 = $1775;
       break L475;
      }
      $1785 = $i$1$i&255;
      $1786 = (16121 + ($i$1$i)|0);
      $1787 = HEAP8[$1786>>0]|0;
      $1788 = $1787 << 24 >> 24;
      $1789 = HEAP32[$9>>2]|0;
      $1790 = (($1789) + ($1788)|0);
      HEAP8[$1790>>0] = $1785;
      $1791 = (($i$1$i) + 1)|0;
      $i$1$i = $1791;
     }
    } else {
     $p$i$sroa$0$0 = $1775;
    }
   } while(0);
   L483: while(1) {
    $1792 = $p$i$sroa$0$0;
    $1793 = HEAP8[$1792>>0]|0;
    switch ($1793<<24>>24) {
    case 9:  {
     label = 359;
     break L483;
     break;
    }
    case 0:  {
     $storemerge$ph = $1777;$storemerge789$ph = 0;$storemerge796$ph = $1776;
     break L483;
     break;
    }
    default: {
    }
    }
    $1794 = ((($1792)) + 1|0);
    $1795 = $1794;
    $p$i$sroa$0$0 = $1795;
   }
   L486: do {
    if ((label|0) == 359) {
     label = 0;
     $1796 = ((($1792)) + 1|0);
     $1797 = $1796;
     HEAP8[$1792>>0] = 0;
     $1798 = (($1797) - ($1775))|0;
     $1799 = ($1798|0)<(2);
     if ($1799) {
      HEAP32[$vararg_buffer7>>2] = 16158;
      _fprintf(9772,16132,$vararg_buffer7);
     } else {
      $1800 = ($1798|0)>(255);
      if ($1800) {
       HEAP32[$vararg_buffer10>>2] = 16158;
       _fprintf(9772,16169,$vararg_buffer10);
       $storemerge$ph = $1777;$storemerge789$ph = 0;$storemerge796$ph = $1776;
       break;
      }
     }
     $1801 = $1775;
     $1802 = (($1797) - ($1775))|0;
     $1803 = ($1777>>>0)<($1802>>>0);
     if ($1803) {
      $1804 = (($1802) + -1)|0;
      $1805 = $1804 >>> 1;
      $1806 = $1804 | $1805;
      $1807 = $1806 >>> 2;
      $1808 = $1806 | $1807;
      $1809 = $1808 >>> 4;
      $1810 = $1808 | $1809;
      $1811 = $1810 >>> 8;
      $1812 = $1810 | $1811;
      $1813 = $1812 >>> 16;
      $1814 = $1812 | $1813;
      $1815 = (($1814) + 1)|0;
      $1816 = $1776;
      $1817 = (_realloc($1816,$1815)|0);
      $1818 = ($1817|0)==(0|0);
      if ($1818) {
       $str$i$sroa$0$0 = 0;$str$i$sroa$126$1 = $1777;$str$i$sroa$199$1 = $1776;
      } else {
       $1819 = $1817;
       $str$i$sroa$126$0 = $1815;$str$i$sroa$199$0 = $1819;
       label = 366;
      }
     } else {
      $str$i$sroa$126$0 = $1777;$str$i$sroa$199$0 = $1776;
      label = 366;
     }
     if ((label|0) == 366) {
      label = 0;
      $1820 = $str$i$sroa$199$0;
      _memcpy(($1820|0),($1801|0),($1802|0))|0;
      $str$i$sroa$0$0 = $1802;$str$i$sroa$126$1 = $str$i$sroa$126$0;$str$i$sroa$199$1 = $str$i$sroa$199$0;
     }
     $1821 = $10;
     $1822 = $1821;
     $1823 = HEAP32[$1822>>2]|0;
     $1824 = (($1821) + 4)|0;
     $1825 = $1824;
     $1826 = HEAP32[$1825>>2]|0;
     $1827 = (_bitshift64Shl(($1798|0),0,24)|0);
     $1828 = tempRet0;
     $1829 = $1827 & -16777216;
     $1830 = $1823 & 16777215;
     $1831 = $1830 | $1829;
     $1832 = $10;
     $1833 = $1832;
     HEAP32[$1833>>2] = $1831;
     $1834 = (($1832) + 4)|0;
     $1835 = $1834;
     HEAP32[$1835>>2] = $1826;
     HEAP32[$f$i$i>>2] = 0;
     HEAP32[$11>>2] = $1796;
     HEAP32[$12>>2] = $1796;
     $1836 = ($1796|0)<(0|0);
     $1837 = ((($1792)) + -2147483648|0);
     $$sink$i$i = $1836 ? (-1) : $1837;
     HEAP32[$13>>2] = $$sink$i$i;
     HEAP32[$14>>2] = -1;
     HEAP32[$15>>2] = 0;
     $1838 = $$sink$i$i;
     $1839 = $1796;
     $1840 = (($1838) - ($1839))|0;
     HEAP32[$16>>2] = $1840;
     HEAP32[$17>>2] = $1838;
     $1841 = (___intscan($f$i$i,0,1,-2147483648,0)|0);
     $1842 = tempRet0;
     $1843 = HEAP32[$16>>2]|0;
     $1844 = HEAP32[$11>>2]|0;
     $1845 = HEAP32[$13>>2]|0;
     $1846 = (($1844) + ($1843))|0;
     $1847 = (($1846) - ($1845))|0;
     $1848 = (($1796) + ($1847)|0);
     $1849 = $10;
     $1850 = $1849;
     $1851 = HEAP32[$1850>>2]|0;
     $1852 = (($1849) + 4)|0;
     $1853 = $1852;
     $1854 = HEAP32[$1853>>2]|0;
     $1855 = $1841 & 65535;
     $1856 = $1854 & -65536;
     $1857 = $1856 | $1855;
     $1858 = $10;
     $1859 = $1858;
     HEAP32[$1859>>2] = $1851;
     $1860 = (($1858) + 4)|0;
     $1861 = $1860;
     HEAP32[$1861>>2] = $1857;
     $1862 = ((($1848)) + 1|0);
     $1863 = HEAP8[$1848>>0]|0;
     $1864 = ($1863<<24>>24)==(9);
     if ($1864) {
      $p$i$sroa$0$1$in = $1862;
      L499: while(1) {
       $1865 = HEAP8[$p$i$sroa$0$1$in>>0]|0;
       switch ($1865<<24>>24) {
       case 0:  {
        $storemerge$ph = $str$i$sroa$126$1;$storemerge789$ph = $str$i$sroa$0$0;$storemerge796$ph = $str$i$sroa$199$1;
        break L486;
        break;
       }
       case 9:  {
        break L499;
        break;
       }
       default: {
       }
       }
       $1866 = ((($p$i$sroa$0$1$in)) + 1|0);
       $p$i$sroa$0$1$in = $1866;
      }
      $1867 = ((($p$i$sroa$0$1$in)) + 1|0);
      HEAP8[$p$i$sroa$0$1$in>>0] = 0;
      $1868 = HEAP8[$1862>>0]|0;
      $1869 = ($1868<<24>>24)==(42);
      if ($1869) {
       $$014$i$i = $1862;$$05$i$i = 17669;
       while(1) {
        $1870 = ((($$014$i$i)) + 1|0);
        $1871 = ((($$05$i$i)) + 1|0);
        $1872 = HEAP8[$1870>>0]|0;
        $1873 = HEAP8[$1871>>0]|0;
        $1874 = ($1872<<24>>24)!=($1873<<24>>24);
        $1875 = ($1872<<24>>24)==(0);
        $or$cond$i$i = $1875 | $1874;
        if ($or$cond$i$i) {
         break;
        } else {
         $$014$i$i = $1870;$$05$i$i = $1871;
        }
       }
       $1876 = ($1872<<24>>24)==($1873<<24>>24);
       if ($1876) {
        HEAP32[$b>>2] = -1;
       } else {
        label = 373;
       }
      } else {
       label = 373;
      }
      if ((label|0) == 373) {
       label = 0;
       $1877 = HEAP32[$h>>2]|0;
       $1878 = ($1877|0)==(0);
       if ($1878) {
        HEAP32[$vararg_buffer13>>2] = 16158;
        _fprintf(9772,16198,$vararg_buffer13);
        $storemerge$ph = $str$i$sroa$126$1;$storemerge789$ph = $str$i$sroa$0$0;$storemerge796$ph = $str$i$sroa$199$1;
        break;
       }
       $1879 = (_bam_name2id($h,$1862)|0);
       HEAP32[$b>>2] = $1879;
       $1880 = ($1879|0)<(0);
       if ($1880) {
        HEAP32[$vararg_buffer16>>2] = 16158;
        _fprintf(9772,16226,$vararg_buffer16);
       }
      }
      HEAP32[$f$i7$i>>2] = 0;
      HEAP32[$18>>2] = $1867;
      HEAP32[$19>>2] = $1867;
      $1881 = ($1867|0)<(0|0);
      $1882 = ((($p$i$sroa$0$1$in)) + -2147483648|0);
      $$sink$i8$i = $1881 ? (-1) : $1882;
      HEAP32[$20>>2] = $$sink$i8$i;
      HEAP32[$21>>2] = -1;
      HEAP32[$22>>2] = 0;
      $1883 = $$sink$i8$i;
      $1884 = $1867;
      $1885 = (($1883) - ($1884))|0;
      HEAP32[$23>>2] = $1885;
      HEAP32[$24>>2] = $1883;
      $1886 = (___intscan($f$i7$i,10,1,-2147483648,0)|0);
      $1887 = tempRet0;
      $1888 = HEAP32[$23>>2]|0;
      $1889 = HEAP32[$18>>2]|0;
      $1890 = HEAP32[$20>>2]|0;
      $1891 = (($1889) + ($1888))|0;
      $1892 = (($1891) - ($1890))|0;
      $1893 = (($1867) + ($1892)|0);
      $1894 = (($1886) + -1)|0;
      HEAP32[$25>>2] = $1894;
      $1895 = ((($1893)) + 1|0);
      $1896 = HEAP8[$1893>>0]|0;
      $1897 = ($1896<<24>>24)==(9);
      if ($1897) {
       $1898 = ($1886|0)<(1);
       $1899 = HEAP32[$b>>2]|0;
       $1900 = ($1899|0)>(-1);
       $or$cond809 = $1898 & $1900;
       if ($or$cond809) {
        HEAP32[$vararg_buffer19>>2] = 16158;
        _fprintf(9772,16283,$vararg_buffer19);
        HEAP32[$b>>2] = -1;
        label = 382;
       } else {
        $1902 = $1899;
        $1901 = ($1902|0)<(0);
        if ($1901) {
         label = 382;
        }
       }
       if ((label|0) == 382) {
        label = 0;
        $1903 = $10;
        $1904 = $1903;
        $1905 = HEAP32[$1904>>2]|0;
        $1906 = (($1903) + 4)|0;
        $1907 = $1906;
        $1908 = HEAP32[$1907>>2]|0;
        $1909 = $1908 | 4;
        $1910 = $1909 & 65535;
        $1911 = $1908 & -65536;
        $1912 = $1911 | $1910;
        $1913 = $10;
        $1914 = $1913;
        HEAP32[$1914>>2] = $1905;
        $1915 = (($1913) + 4)|0;
        $1916 = $1915;
        HEAP32[$1916>>2] = $1912;
       }
       HEAP32[$f$i9$i>>2] = 0;
       HEAP32[$26>>2] = $1895;
       HEAP32[$27>>2] = $1895;
       $1917 = ($1895|0)<(0|0);
       $1918 = ((($1895)) + 2147483647|0);
       $$sink$i10$i = $1917 ? (-1) : $1918;
       HEAP32[$28>>2] = $$sink$i10$i;
       HEAP32[$29>>2] = -1;
       HEAP32[$30>>2] = 0;
       $1919 = $$sink$i10$i;
       $1920 = $1895;
       $1921 = (($1919) - ($1920))|0;
       HEAP32[$31>>2] = $1921;
       HEAP32[$32>>2] = $1919;
       $1922 = (___intscan($f$i9$i,10,1,-2147483648,0)|0);
       $1923 = tempRet0;
       $1924 = HEAP32[$31>>2]|0;
       $1925 = HEAP32[$26>>2]|0;
       $1926 = HEAP32[$28>>2]|0;
       $1927 = (($1925) + ($1924))|0;
       $1928 = (($1927) - ($1926))|0;
       $1929 = (($1895) + ($1928)|0);
       $1930 = $10;
       $1931 = $1930;
       $1932 = HEAP32[$1931>>2]|0;
       $1933 = (($1930) + 4)|0;
       $1934 = $1933;
       $1935 = HEAP32[$1934>>2]|0;
       $1936 = (_bitshift64Shl(($1922|0),($1923|0),16)|0);
       $1937 = tempRet0;
       $1938 = $1936 & 16711680;
       $1939 = $1932 & -16711681;
       $1940 = $1939 | $1938;
       $1941 = $10;
       $1942 = $1941;
       HEAP32[$1942>>2] = $1940;
       $1943 = (($1941) + 4)|0;
       $1944 = $1943;
       HEAP32[$1944>>2] = $1935;
       $1945 = ((($1929)) + 1|0);
       $1946 = $1945;
       $1947 = HEAP8[$1929>>0]|0;
       $1948 = ($1947<<24>>24)==(9);
       if ($1948) {
        $1949 = HEAP8[$1945>>0]|0;
        $1950 = ($1949<<24>>24)==(42);
        L523: do {
         if ($1950) {
          $2057 = $1935 & 4;
          $2058 = (0)==(0);
          $2059 = ($2057|0)==(0);
          $2060 = $2058 & $2059;
          if ($2060) {
           HEAP32[$vararg_buffer31>>2] = 16158;
           _fprintf(9772,16455,$vararg_buffer31);
           $2061 = $10;
           $2062 = $2061;
           $2063 = HEAP32[$2062>>2]|0;
           $2064 = (($2061) + 4)|0;
           $2065 = $2064;
           $2066 = HEAP32[$2065>>2]|0;
           $2068 = $2066;$2074 = $2063;
          } else {
           $2068 = $1935;$2074 = $1940;
          }
          $2067 = $2068 | 4;
          $2069 = $2067 & 65535;
          $2070 = $2068 & -65536;
          $2071 = $2070 | $2069;
          $2072 = $10;
          $2073 = $2072;
          HEAP32[$2073>>2] = $2074;
          $2075 = (($2072) + 4)|0;
          $2076 = $2075;
          HEAP32[$2076>>2] = $2071;
          $p$i$sroa$0$3 = $1946;
          L528: while(1) {
           $2077 = $p$i$sroa$0$3;
           $2078 = HEAP8[$2077>>0]|0;
           switch ($2078<<24>>24) {
           case 0:  {
            $storemerge$ph = $str$i$sroa$126$1;$storemerge789$ph = $str$i$sroa$0$0;$storemerge796$ph = $str$i$sroa$199$1;
            break L486;
            break;
           }
           case 9:  {
            break L528;
            break;
           }
           default: {
           }
           }
           $2079 = ((($2077)) + 1|0);
           $2080 = $2079;
           $p$i$sroa$0$3 = $2080;
          }
          $2081 = ((($2077)) + 1|0);
          $2082 = $2081;
          HEAP8[$2077>>0] = 0;
          $i$3$i = 1;$p$i$sroa$0$4 = $2082;$str$i$sroa$0$1 = $str$i$sroa$0$0;$str$i$sroa$126$3 = $str$i$sroa$126$1;$str$i$sroa$199$3 = $str$i$sroa$199$1;
         } else {
          $1952 = $1949;$n_cigar$0$i = 0;$p$i$sroa$0$2 = $1946;
          L532: while(1) {
           $1951 = $p$i$sroa$0$2;
           switch ($1952<<24>>24) {
           case 0: case 9:  {
            break L532;
            break;
           }
           default: {
           }
           }
           $1953 = $1952&255;
           $1954 = (($1953) + -48)|0;
           $not$ = ($1954>>>0)>(9);
           $1955 = $not$&1;
           $n_cigar$0$i$ = (($n_cigar$0$i) + ($1955))|0;
           $1956 = ((($1951)) + 1|0);
           $1957 = $1956;
           $$pre415 = HEAP8[$1956>>0]|0;
           $1952 = $$pre415;$n_cigar$0$i = $n_cigar$0$i$;$p$i$sroa$0$2 = $1957;
          }
          $1958 = ((($1951)) + 1|0);
          $1959 = $1958;
          $1960 = ($1952<<24>>24)==(9);
          if (!($1960)) {
           $storemerge$ph = $str$i$sroa$126$1;$storemerge789$ph = $str$i$sroa$0$0;$storemerge796$ph = $str$i$sroa$199$1;
           break L486;
          }
          $1961 = ($n_cigar$0$i|0)==(0);
          if ($1961) {
           HEAP32[$vararg_buffer22>>2] = 16158;
           _fprintf(9772,16354,$vararg_buffer22);
           $storemerge$ph = $str$i$sroa$126$1;$storemerge789$ph = $str$i$sroa$0$0;$storemerge796$ph = $str$i$sroa$199$1;
           break L486;
          }
          $1962 = ($n_cigar$0$i>>>0)>(65535);
          if ($1962) {
           HEAP32[$vararg_buffer25>>2] = 16158;
           _fprintf(9772,16383,$vararg_buffer25);
           $storemerge$ph = $str$i$sroa$126$1;$storemerge789$ph = $str$i$sroa$0$0;$storemerge796$ph = $str$i$sroa$199$1;
           break L486;
          }
          $1963 = (_bitshift64Shl(($n_cigar$0$i|0),0,48)|0);
          $1964 = tempRet0;
          $1965 = $1935 & 65535;
          $1966 = $1940 | $1963;
          $1967 = $1965 | $1964;
          $1968 = $10;
          $1969 = $1968;
          HEAP32[$1969>>2] = $1966;
          $1970 = (($1968) + 4)|0;
          $1971 = $1970;
          HEAP32[$1971>>2] = $1967;
          $1972 = $n_cigar$0$i << 2;
          $1973 = $1972 & 262140;
          $1974 = (($str$i$sroa$0$0) + ($1973))|0;
          $1975 = ($str$i$sroa$126$1>>>0)<($1974>>>0);
          if ($1975) {
           $1976 = (($1974) + -1)|0;
           $1977 = $1976 >>> 1;
           $1978 = $1976 | $1977;
           $1979 = $1978 >>> 2;
           $1980 = $1978 | $1979;
           $1981 = $1980 >>> 4;
           $1982 = $1980 | $1981;
           $1983 = $1982 >>> 8;
           $1984 = $1982 | $1983;
           $1985 = $1984 >>> 16;
           $1986 = $1984 | $1985;
           $1987 = (($1986) + 1)|0;
           $1988 = $str$i$sroa$199$1;
           $1989 = (_realloc($1988,$1987)|0);
           $1990 = ($1989|0)==(0|0);
           $1991 = $1989;
           $str$i$sroa$126$1$ = $1990 ? $str$i$sroa$126$1 : $1987;
           $str$i$sroa$199$1$ = $1990 ? $str$i$sroa$199$1 : $1991;
           $str$i$sroa$126$2 = $str$i$sroa$126$1$;$str$i$sroa$199$2 = $str$i$sroa$199$1$;
          } else {
           $str$i$sroa$126$2 = $str$i$sroa$126$1;$str$i$sroa$199$2 = $str$i$sroa$199$1;
          }
          $1992 = $str$i$sroa$199$2;
          $1993 = (($1992) + ($str$i$sroa$0$0)|0);
          $1994 = $10;
          $1995 = $1994;
          $1996 = HEAP32[$1995>>2]|0;
          $1997 = (($1994) + 4)|0;
          $1998 = $1997;
          $1999 = HEAP32[$1998>>2]|0;
          $2000 = (_bitshift64Lshr(($1996|0),($1999|0),46)|0);
          $2001 = tempRet0;
          $2002 = $2000 & 262140;
          $2003 = (($str$i$sroa$0$0) + ($2002))|0;
          $2004 = $1996;$2005 = $1999;$i$2$i = 0;$q$i$sroa$0$0 = $1946;
          while(1) {
           $2006 = (_bitshift64Lshr(($2004|0),($2005|0),48)|0);
           $2007 = tempRet0;
           $2008 = ($i$2$i|0)<($2006|0);
           if (!($2008)) {
            break;
           }
           $2009 = $q$i$sroa$0$0;
           HEAP32[$f$i11$i>>2] = 0;
           HEAP32[$128>>2] = $2009;
           HEAP32[$129>>2] = $2009;
           $2010 = ($q$i$sroa$0$0|0)<(0);
           $2011 = ((($2009)) + 2147483647|0);
           $$sink$i12$i = $2010 ? (-1) : $2011;
           HEAP32[$130>>2] = $$sink$i12$i;
           HEAP32[$131>>2] = -1;
           HEAP32[$132>>2] = 0;
           $2012 = $$sink$i12$i;
           $2013 = (($2012) - ($q$i$sroa$0$0))|0;
           HEAP32[$133>>2] = $2013;
           HEAP32[$134>>2] = $2012;
           $2014 = (___intscan($f$i11$i,10,1,-2147483648,0)|0);
           $2015 = tempRet0;
           $2016 = HEAP32[$133>>2]|0;
           $2017 = HEAP32[$128>>2]|0;
           $2018 = HEAP32[$130>>2]|0;
           $2019 = (($2017) + ($2016))|0;
           $2020 = (($2019) - ($2018))|0;
           $2021 = (($2009) + ($2020)|0);
           $2022 = $2014 << 4;
           $2023 = (($1993) + ($i$2$i<<2)|0);
           HEAP32[$2023>>2] = $2022;
           $2024 = HEAP8[$2021>>0]|0;
           $2025 = ($2024<<24>>24)<(0);
           if ($2025) {
            label = 398;
            break;
           }
           $2026 = $2024 << 24 >> 24;
           $2027 = HEAP32[$9>>2]|0;
           $2028 = (($2027) + ($2026)|0);
           $2029 = HEAP8[$2028>>0]|0;
           $2030 = ($2029<<24>>24)<(0);
           if ($2030) {
            label = 398;
            break;
           }
           $2031 = $2029 << 24 >> 24;
           $2032 = $2022 | $2031;
           HEAP32[$2023>>2] = $2032;
           $2033 = (($i$2$i) + 1)|0;
           $2034 = ((($2021)) + 1|0);
           $2035 = $2034;
           $2036 = $10;
           $2037 = $2036;
           $2038 = HEAP32[$2037>>2]|0;
           $2039 = (($2036) + 4)|0;
           $2040 = $2039;
           $2041 = HEAP32[$2040>>2]|0;
           $2004 = $2038;$2005 = $2041;$i$2$i = $2033;$q$i$sroa$0$0 = $2035;
          }
          if ((label|0) == 398) {
           label = 0;
           HEAP32[$vararg_buffer28>>2] = 16158;
           _fprintf(9772,16418,$vararg_buffer28);
           $storemerge$ph = $str$i$sroa$126$2;$storemerge789$ph = $2003;$storemerge796$ph = $str$i$sroa$199$2;
           break L486;
          }
          $2042 = $2005 & 4;
          $2043 = (0)==(0);
          $2044 = ($2042|0)==(0);
          $2045 = $2043 & $2044;
          if ($2045) {
           $k$0$i$i = 0;$l$0$i$i = 0;
           while(1) {
            $2046 = ($k$0$i$i|0)<($2006|0);
            if (!($2046)) {
             $i$3$i = $l$0$i$i;$p$i$sroa$0$4 = $1959;$str$i$sroa$0$1 = $2003;$str$i$sroa$126$3 = $str$i$sroa$126$2;$str$i$sroa$199$3 = $str$i$sroa$199$2;
             break L523;
            }
            $2047 = (($1993) + ($k$0$i$i<<2)|0);
            $2048 = HEAP32[$2047>>2]|0;
            $2049 = $2048 << 1;
            $2050 = $2049 & 30;
            $2051 = 246183 >>> $2050;
            $2052 = $2051 & 2;
            $2053 = ($2052|0)==(0);
            $2054 = $2048 >>> 4;
            $2055 = $2053 ? 0 : $2054;
            $l$1$i$i = (($l$0$i$i) + ($2055))|0;
            $2056 = (($k$0$i$i) + 1)|0;
            $k$0$i$i = $2056;$l$0$i$i = $l$1$i$i;
           }
          } else {
           $i$3$i = 1;$p$i$sroa$0$4 = $1959;$str$i$sroa$0$1 = $2003;$str$i$sroa$126$3 = $str$i$sroa$126$2;$str$i$sroa$199$3 = $str$i$sroa$199$2;
          }
         }
        } while(0);
        $2083 = HEAP32[$25>>2]|0;
        $2084 = ($2083|0)<(0);
        $2085 = $2084 << 31 >> 31;
        $2086 = (($2083) + ($i$3$i))|0;
        $2087 = ($2086|0)<(0);
        $2088 = $2087 << 31 >> 31;
        $2089 = (_i64Add(($2086|0),($2088|0),-1,-1)|0);
        $2090 = tempRet0;
        $l$0$i16$i = 5;$s$0$i$i10 = 14;$t$0$i$i = 4681;
        while(1) {
         $2091 = ($l$0$i16$i|0)>(0);
         if (!($2091)) {
          $$0$i17$i = 0;
          break;
         }
         $2092 = (_bitshift64Ashr(($2083|0),($2085|0),($s$0$i$i10|0))|0);
         $2093 = tempRet0;
         $2094 = (_bitshift64Ashr(($2089|0),($2090|0),($s$0$i$i10|0))|0);
         $2095 = tempRet0;
         $2096 = ($2092|0)==($2094|0);
         $2097 = ($2093|0)==($2095|0);
         $2098 = $2096 & $2097;
         if ($2098) {
          label = 412;
          break;
         }
         $2101 = (($l$0$i16$i) + -1)|0;
         $2102 = (($s$0$i$i10) + 3)|0;
         $2103 = ($2101*3)|0;
         $2104 = 1 << $2103;
         $2105 = (($t$0$i$i) - ($2104))|0;
         $l$0$i16$i = $2101;$s$0$i$i10 = $2102;$t$0$i$i = $2105;
        }
        if ((label|0) == 412) {
         label = 0;
         $2099 = (_i64Add(($t$0$i$i|0),0,($2092|0),($2093|0))|0);
         $2100 = tempRet0;
         $$0$i17$i = $2099;
        }
        $2106 = $10;
        $2107 = $2106;
        $2108 = HEAP32[$2107>>2]|0;
        $2109 = (($2106) + 4)|0;
        $2110 = $2109;
        $2111 = HEAP32[$2110>>2]|0;
        $2112 = $$0$i17$i & 65535;
        $2113 = $2108 & -65536;
        $2114 = $2113 | $2112;
        $2115 = $10;
        $2116 = $2115;
        HEAP32[$2116>>2] = $2114;
        $2117 = (($2115) + 4)|0;
        $2118 = $2117;
        HEAP32[$2118>>2] = $2111;
        $p$i$sroa$0$5 = $p$i$sroa$0$4;
        L565: while(1) {
         $2119 = $p$i$sroa$0$5;
         $2120 = HEAP8[$2119>>0]|0;
         switch ($2120<<24>>24) {
         case 0:  {
          $storemerge$ph = $str$i$sroa$126$3;$storemerge789$ph = $str$i$sroa$0$1;$storemerge796$ph = $str$i$sroa$199$3;
          break L486;
          break;
         }
         case 9:  {
          break L565;
          break;
         }
         default: {
         }
         }
         $2121 = ((($2119)) + 1|0);
         $2122 = $2121;
         $p$i$sroa$0$5 = $2122;
        }
        $2123 = ((($2119)) + 1|0);
        HEAP8[$2119>>0] = 0;
        $2124 = $p$i$sroa$0$4;
        $2125 = HEAP8[$2124>>0]|0;
        L569: do {
         switch ($2125<<24>>24) {
         case 61:  {
          $$014$i21$i = $2124;$$05$i20$i = 16516;
          while(1) {
           $2126 = ((($$014$i21$i)) + 1|0);
           $2127 = ((($$05$i20$i)) + 1|0);
           $2128 = HEAP8[$2126>>0]|0;
           $2129 = HEAP8[$2127>>0]|0;
           $2130 = ($2128<<24>>24)!=($2129<<24>>24);
           $2131 = ($2128<<24>>24)==(0);
           $or$cond$i22$i = $2131 | $2130;
           if ($or$cond$i22$i) {
            break;
           } else {
            $$014$i21$i = $2126;$$05$i20$i = $2127;
           }
          }
          $2132 = ($2128<<24>>24)==($2129<<24>>24);
          if ($2132) {
           $2133 = HEAP32[$b>>2]|0;
           HEAP32[$41>>2] = $2133;
           break L569;
          } else {
           $2134 = ($2125<<24>>24)==(42);
           if ($2134) {
            $$014$i34$i = $2124;$$05$i33$i = 17669;
            label = 422;
            break L569;
           } else {
            label = 425;
            break L569;
           }
          }
          break;
         }
         case 42:  {
          $$014$i34$i = $2124;$$05$i33$i = 17669;
          label = 422;
          break;
         }
         default: {
          label = 425;
         }
         }
        } while(0);
        if ((label|0) == 422) {
         while(1) {
          label = 0;
          $2135 = ((($$014$i34$i)) + 1|0);
          $2136 = ((($$05$i33$i)) + 1|0);
          $2137 = HEAP8[$2135>>0]|0;
          $2138 = HEAP8[$2136>>0]|0;
          $2139 = ($2137<<24>>24)!=($2138<<24>>24);
          $2140 = ($2137<<24>>24)==(0);
          $or$cond$i35$i = $2140 | $2139;
          if ($or$cond$i35$i) {
           break;
          } else {
           $$014$i34$i = $2135;$$05$i33$i = $2136;
           label = 422;
          }
         }
         $2141 = ($2137<<24>>24)==($2138<<24>>24);
         if ($2141) {
          HEAP32[$41>>2] = -1;
         } else {
          label = 425;
         }
        }
        if ((label|0) == 425) {
         label = 0;
         $2142 = (_bam_name2id($h,$2124)|0);
         HEAP32[$41>>2] = $2142;
         $2143 = ($2142|0)<(0);
         if ($2143) {
          HEAP32[$vararg_buffer34>>2] = 16158;
          _fprintf(9772,16518,$vararg_buffer34);
         }
        }
        HEAP32[$f$i43$i>>2] = 0;
        HEAP32[$33>>2] = $2123;
        HEAP32[$34>>2] = $2123;
        $2144 = ($2123|0)<(0|0);
        $2145 = ((($2119)) + -2147483648|0);
        $$sink$i44$i = $2144 ? (-1) : $2145;
        HEAP32[$35>>2] = $$sink$i44$i;
        HEAP32[$36>>2] = -1;
        HEAP32[$37>>2] = 0;
        $2146 = $$sink$i44$i;
        $2147 = $2123;
        $2148 = (($2146) - ($2147))|0;
        HEAP32[$38>>2] = $2148;
        HEAP32[$39>>2] = $2146;
        $2149 = (___intscan($f$i43$i,10,1,-2147483648,0)|0);
        $2150 = tempRet0;
        $2151 = HEAP32[$38>>2]|0;
        $2152 = HEAP32[$33>>2]|0;
        $2153 = HEAP32[$35>>2]|0;
        $2154 = (($2152) + ($2151))|0;
        $2155 = (($2154) - ($2153))|0;
        $2156 = (($2123) + ($2155)|0);
        $2157 = (($2149) + -1)|0;
        HEAP32[$40>>2] = $2157;
        $2158 = ((($2156)) + 1|0);
        $2159 = HEAP8[$2156>>0]|0;
        $2160 = ($2159<<24>>24)==(9);
        if ($2160) {
         $2161 = ($2149|0)<(1);
         if ($2161) {
          $2162 = HEAP32[$41>>2]|0;
          $2163 = ($2162|0)>(-1);
          if ($2163) {
           HEAP32[$vararg_buffer37>>2] = 16158;
           _fprintf(9772,16580,$vararg_buffer37);
           HEAP32[$41>>2] = -1;
          }
         }
         HEAP32[$f$i45$i>>2] = 0;
         HEAP32[$42>>2] = $2158;
         HEAP32[$43>>2] = $2158;
         $2164 = ($2158|0)<(0|0);
         $2165 = ((($2158)) + 2147483647|0);
         $$sink$i46$i = $2164 ? (-1) : $2165;
         HEAP32[$44>>2] = $$sink$i46$i;
         HEAP32[$45>>2] = -1;
         HEAP32[$46>>2] = 0;
         $2166 = $$sink$i46$i;
         $2167 = $2158;
         $2168 = (($2166) - ($2167))|0;
         HEAP32[$47>>2] = $2168;
         HEAP32[$48>>2] = $2166;
         $2169 = (___intscan($f$i45$i,10,1,-2147483648,0)|0);
         $2170 = tempRet0;
         $2171 = HEAP32[$47>>2]|0;
         $2172 = HEAP32[$42>>2]|0;
         $2173 = HEAP32[$44>>2]|0;
         $2174 = (($2172) + ($2171))|0;
         $2175 = (($2174) - ($2173))|0;
         $2176 = (($2158) + ($2175)|0);
         HEAP32[$49>>2] = $2169;
         $2177 = ((($2176)) + 1|0);
         $2178 = $2177;
         $2179 = HEAP8[$2176>>0]|0;
         $2180 = ($2179<<24>>24)==(9);
         if ($2180) {
          $p$i$sroa$0$6 = $2178;
          L590: while(1) {
           $2181 = $p$i$sroa$0$6;
           $2182 = HEAP8[$2181>>0]|0;
           switch ($2182<<24>>24) {
           case 0:  {
            $storemerge$ph = $str$i$sroa$126$3;$storemerge789$ph = $str$i$sroa$0$1;$storemerge796$ph = $str$i$sroa$199$3;
            break L486;
            break;
           }
           case 9:  {
            break L590;
            break;
           }
           default: {
           }
           }
           $2183 = ((($2181)) + 1|0);
           $2184 = $2183;
           $p$i$sroa$0$6 = $2184;
          }
          $2185 = ((($2181)) + 1|0);
          $2186 = $2185;
          HEAP8[$2181>>0] = 0;
          $2187 = HEAP8[$2177>>0]|0;
          $2188 = ($2187<<24>>24)==(42);
          if ($2188) {
           $$014$i50$i = $2177;$$05$i49$i = 17669;
           while(1) {
            $2189 = ((($$014$i50$i)) + 1|0);
            $2190 = ((($$05$i49$i)) + 1|0);
            $2191 = HEAP8[$2189>>0]|0;
            $2192 = HEAP8[$2190>>0]|0;
            $2193 = ($2191<<24>>24)!=($2192<<24>>24);
            $2194 = ($2191<<24>>24)==(0);
            $or$cond$i51$i = $2194 | $2193;
            if ($or$cond$i51$i) {
             break;
            } else {
             $$014$i50$i = $2189;$$05$i49$i = $2190;
            }
           }
           $2195 = ($2191<<24>>24)==($2192<<24>>24);
           if ($2195) {
            HEAP32[$50>>2] = 0;
            $str$i$sroa$0$2 = $str$i$sroa$0$1;$str$i$sroa$126$5 = $str$i$sroa$126$3;$str$i$sroa$199$5 = $str$i$sroa$199$3;
           } else {
            label = 437;
           }
          } else {
           label = 437;
          }
          L599: do {
           if ((label|0) == 437) {
            label = 0;
            $2196 = (($2186) - ($2178))|0;
            $2197 = (($2196) + -1)|0;
            HEAP32[$50>>2] = $2197;
            $2198 = $10;
            $2199 = $2198;
            $2200 = HEAP32[$2199>>2]|0;
            $2201 = (($2198) + 4)|0;
            $2202 = $2201;
            $2203 = HEAP32[$2202>>2]|0;
            $2204 = (_bitshift64Lshr(($2200|0),($2203|0),48)|0);
            $2205 = tempRet0;
            $2206 = $str$i$sroa$199$3;
            $2207 = (_bitshift64Lshr(($2200|0),($2203|0),24)|0);
            $2208 = tempRet0;
            $2209 = $2207 & 255;
            $2210 = (($2206) + ($2209)|0);
            $k$0$i60$i = 0;$l$0$i61$i = 0;
            while(1) {
             $2211 = ($k$0$i60$i|0)<($2204|0);
             if (!($2211)) {
              break;
             }
             $2212 = (($2210) + ($k$0$i60$i<<2)|0);
             $2213 = HEAP32[$2212>>2]|0;
             $2214 = $2213 << 1;
             $2215 = $2214 & 30;
             $2216 = 246183 >>> $2215;
             $2217 = $2216 & 1;
             $2218 = ($2217|0)==(0);
             $2219 = $2213 >>> 4;
             $2220 = $2218 ? 0 : $2219;
             $l$1$i62$i = (($l$0$i61$i) + ($2220))|0;
             $2221 = (($k$0$i60$i) + 1)|0;
             $k$0$i60$i = $2221;$l$0$i61$i = $l$1$i62$i;
            }
            $2222 = ($2203>>>0)<(65536);
            $2223 = ($2200>>>0)<(0);
            $2224 = ($2203|0)==(65536);
            $2225 = $2224 & $2223;
            $2226 = $2222 | $2225;
            $2227 = ($l$0$i61$i|0)==($2197|0);
            $or$cond810 = $2226 | $2227;
            if (!($or$cond810)) {
             HEAP32[$vararg_buffer40>>2] = 16158;
             _fprintf(9772,16650,$vararg_buffer40);
             $storemerge$ph = $str$i$sroa$126$3;$storemerge789$ph = $str$i$sroa$0$1;$storemerge796$ph = $str$i$sroa$199$3;
             break L486;
            }
            $2228 = $2196 >> 1;
            $2229 = (($str$i$sroa$0$1) + ($2228))|0;
            $2230 = ($str$i$sroa$126$3>>>0)<($2229>>>0);
            if ($2230) {
             $2231 = (($2229) + -1)|0;
             $2232 = $2231 >>> 1;
             $2233 = $2231 | $2232;
             $2234 = $2233 >>> 2;
             $2235 = $2233 | $2234;
             $2236 = $2235 >>> 4;
             $2237 = $2235 | $2236;
             $2238 = $2237 >>> 8;
             $2239 = $2237 | $2238;
             $2240 = $2239 >>> 16;
             $2241 = $2239 | $2240;
             $2242 = (($2241) + 1)|0;
             $2243 = (_realloc($2206,$2242)|0);
             $2244 = ($2243|0)==(0|0);
             $2245 = $2243;
             $str$i$sroa$126$3$ = $2244 ? $str$i$sroa$126$3 : $2242;
             $str$i$sroa$199$3$ = $2244 ? $str$i$sroa$199$3 : $2245;
             $str$i$sroa$126$4 = $str$i$sroa$126$3$;$str$i$sroa$199$4 = $str$i$sroa$199$3$;
            } else {
             $str$i$sroa$126$4 = $str$i$sroa$126$3;$str$i$sroa$199$4 = $str$i$sroa$199$3;
            }
            $2246 = $str$i$sroa$199$4;
            $2247 = (($2246) + ($str$i$sroa$0$1)|0);
            _memset(($2247|0),0,($2228|0))|0;
            $i$4$i = 0;
            while(1) {
             $2248 = HEAP32[$50>>2]|0;
             $2249 = ($i$4$i|0)<($2248|0);
             if (!($2249)) {
              $str$i$sroa$0$2 = $2229;$str$i$sroa$126$5 = $str$i$sroa$126$4;$str$i$sroa$199$5 = $str$i$sroa$199$4;
              break L599;
             }
             $2250 = (($2177) + ($i$4$i)|0);
             $2251 = HEAP8[$2250>>0]|0;
             $2252 = $2251 << 24 >> 24;
             $2253 = (15443 + ($2252)|0);
             $2254 = HEAP8[$2253>>0]|0;
             $2255 = $2254&255;
             $2256 = $i$4$i << 2;
             $2257 = $2256 & 4;
             $2258 = $2257 ^ 4;
             $2259 = $2255 << $2258;
             $2260 = $i$4$i >> 1;
             $2261 = (($2247) + ($2260)|0);
             $2262 = HEAP8[$2261>>0]|0;
             $2263 = $2262&255;
             $2264 = $2263 | $2259;
             $2265 = $2264&255;
             HEAP8[$2261>>0] = $2265;
             $2266 = (($i$4$i) + 1)|0;
             $i$4$i = $2266;
            }
           }
          } while(0);
          $p$i$sroa$0$7 = $2186;
          L615: while(1) {
           $2267 = $p$i$sroa$0$7;
           $2268 = HEAP8[$2267>>0]|0;
           switch ($2268<<24>>24) {
           case 0: case 9:  {
            break L615;
            break;
           }
           default: {
           }
           }
           $2269 = ((($2267)) + 1|0);
           $2270 = $2269;
           $p$i$sroa$0$7 = $2270;
          }
          $2271 = ((($2267)) + 1|0);
          $2272 = $2271;
          HEAP8[$2267>>0] = 0;
          $2273 = HEAP32[$50>>2]|0;
          $2274 = (($str$i$sroa$0$2) + ($2273))|0;
          $2275 = ($str$i$sroa$126$5>>>0)<($2274>>>0);
          if ($2275) {
           $2276 = (($2274) + -1)|0;
           $2277 = $2276 >>> 1;
           $2278 = $2276 | $2277;
           $2279 = $2278 >>> 2;
           $2280 = $2278 | $2279;
           $2281 = $2280 >>> 4;
           $2282 = $2280 | $2281;
           $2283 = $2282 >>> 8;
           $2284 = $2282 | $2283;
           $2285 = $2284 >>> 16;
           $2286 = $2284 | $2285;
           $2287 = (($2286) + 1)|0;
           $2288 = $str$i$sroa$199$5;
           $2289 = (_realloc($2288,$2287)|0);
           $2290 = ($2289|0)==(0|0);
           $2291 = $2289;
           $str$i$sroa$126$5$ = $2290 ? $str$i$sroa$126$5 : $2287;
           $str$i$sroa$199$5$ = $2290 ? $str$i$sroa$199$5 : $2291;
           $str$i$sroa$126$6 = $str$i$sroa$126$5$;$str$i$sroa$199$6 = $str$i$sroa$199$5$;
          } else {
           $str$i$sroa$126$6 = $str$i$sroa$126$5;$str$i$sroa$199$6 = $str$i$sroa$199$5;
          }
          $2292 = $str$i$sroa$199$6;
          $2293 = (($2292) + ($str$i$sroa$0$2)|0);
          $2294 = HEAP32[$50>>2]|0;
          $2295 = (($str$i$sroa$0$2) + ($2294))|0;
          $2296 = HEAP8[$2185>>0]|0;
          $2297 = ($2296<<24>>24)==(42);
          do {
           if ($2297) {
            $$014$i72$i = $2185;$$05$i71$i = 17669;
            while(1) {
             $2298 = ((($$014$i72$i)) + 1|0);
             $2299 = ((($$05$i71$i)) + 1|0);
             $2300 = HEAP8[$2298>>0]|0;
             $2301 = HEAP8[$2299>>0]|0;
             $2302 = ($2300<<24>>24)!=($2301<<24>>24);
             $2303 = ($2300<<24>>24)==(0);
             $or$cond$i73$i = $2303 | $2302;
             if ($or$cond$i73$i) {
              break;
             } else {
              $$014$i72$i = $2298;$$05$i71$i = $2299;
             }
            }
            $2304 = ($2300<<24>>24)==($2301<<24>>24);
            if (!($2304)) {
             label = 456;
             break;
            }
            _memset(($2293|0),-1,($2294|0))|0;
            $p$i$sroa$0$8 = $2272;$str$i$sroa$0$3 = $2295;$str$i$sroa$126$7 = $str$i$sroa$126$6;$str$i$sroa$199$7 = $str$i$sroa$199$6;
           } else {
            label = 456;
           }
          } while(0);
          L627: do {
           if ((label|0) == 456) {
            label = 0;
            $2305 = (($2272) - ($2186))|0;
            $2306 = (($2305) + -1)|0;
            $2307 = ($2306|0)==($2294|0);
            if ($2307) {
             $2309 = $2294;$i$5$i = 0;
            } else {
             HEAP32[$vararg_buffer43>>2] = 16158;
             _fprintf(9772,16708,$vararg_buffer43);
             $storemerge$ph = $str$i$sroa$126$6;$storemerge789$ph = $2295;$storemerge796$ph = $str$i$sroa$199$6;
             break L486;
            }
            while(1) {
             $2308 = ($i$5$i|0)<($2309|0);
             if (!($2308)) {
              $p$i$sroa$0$8 = $2272;$str$i$sroa$0$3 = $2295;$str$i$sroa$126$7 = $str$i$sroa$126$6;$str$i$sroa$199$7 = $str$i$sroa$199$6;
              break L627;
             }
             $2310 = (($2185) + ($i$5$i)|0);
             $2311 = HEAP8[$2310>>0]|0;
             $2312 = $2311&255;
             $2313 = (($2312) + 223)|0;
             $2314 = $2313&255;
             $2315 = (($2293) + ($i$5$i)|0);
             HEAP8[$2315>>0] = $2314;
             $2316 = (($i$5$i) + 1)|0;
             $$pre418 = HEAP32[$50>>2]|0;
             $2309 = $$pre418;$i$5$i = $2316;
            }
           }
          } while(0);
          L634: while(1) {
           $2317 = $p$i$sroa$0$8;
           $2318 = HEAP32[$5>>2]|0;
           $2319 = HEAP32[$4>>2]|0;
           $2320 = (($2318) + ($2319)|0);
           $2321 = ($2317>>>0)<($2320>>>0);
           if ($2321) {
            $p$i$sroa$0$9 = $p$i$sroa$0$8;
           } else {
            $$0$i11 = 0;$storemerge = $str$i$sroa$126$7;$storemerge789 = $str$i$sroa$0$3;$storemerge796 = $str$i$sroa$199$7;
            label = 628;
            break L470;
           }
           L636: while(1) {
            $2322 = $p$i$sroa$0$9;
            $2323 = HEAP8[$2322>>0]|0;
            switch ($2323<<24>>24) {
            case 0: case 9:  {
             break L636;
             break;
            }
            default: {
            }
            }
            $2324 = ((($2322)) + 1|0);
            $2325 = $2324;
            $p$i$sroa$0$9 = $2325;
           }
           $2326 = ((($2322)) + 1|0);
           $2327 = $2326;
           HEAP8[$2322>>0] = 0;
           $2328 = (($2327) - ($p$i$sroa$0$8))|0;
           $2329 = ($2328|0)<(6);
           if ($2329) {
            label = 465;
            break;
           }
           $2330 = $p$i$sroa$0$8;
           $2331 = (($str$i$sroa$0$3) + 2)|0;
           $2332 = ($str$i$sroa$126$7>>>0)<($2331>>>0);
           do {
            if ($2332) {
             $2333 = (($str$i$sroa$0$3) + 1)|0;
             $2334 = $2333 >>> 1;
             $2335 = $2333 | $2334;
             $2336 = $2335 >>> 2;
             $2337 = $2335 | $2336;
             $2338 = $2337 >>> 4;
             $2339 = $2337 | $2338;
             $2340 = $2339 >>> 8;
             $2341 = $2339 | $2340;
             $2342 = $2341 >>> 16;
             $2343 = $2341 | $2342;
             $2344 = (($2343) + 1)|0;
             $2345 = $str$i$sroa$199$7;
             $2346 = (_realloc($2345,$2344)|0);
             $2347 = ($2346|0)==(0|0);
             if ($2347) {
              $str$i$sroa$0$4 = $str$i$sroa$0$3;$str$i$sroa$126$9 = $str$i$sroa$126$7;$str$i$sroa$199$9 = $str$i$sroa$199$7;
              break;
             }
             $2348 = $2346;
             $str$i$sroa$126$8 = $2344;$str$i$sroa$199$8 = $2348;
             label = 469;
            } else {
             $str$i$sroa$126$8 = $str$i$sroa$126$7;$str$i$sroa$199$8 = $str$i$sroa$199$7;
             label = 469;
            }
           } while(0);
           if ((label|0) == 469) {
            label = 0;
            $2349 = $str$i$sroa$199$8;
            $2350 = (($2349) + ($str$i$sroa$0$3)|0);
            $2351 = HEAPU8[$2330>>0]|(HEAPU8[$2330+1>>0]<<8);
            HEAP8[$2350>>0]=$2351&255;HEAP8[$2350+1>>0]=$2351>>8;
            $str$i$sroa$0$4 = $2331;$str$i$sroa$126$9 = $str$i$sroa$126$8;$str$i$sroa$199$9 = $str$i$sroa$199$8;
           }
           $2352 = ((($2317)) + 3|0);
           $2353 = HEAP8[$2352>>0]|0;
           $2354 = ((($2317)) + 5|0);
           $2355 = $2354;
           switch ($2353<<24>>24) {
           case 90:  {
            break;
           }
           case 72:  {
            $$pre438 = (($2327) - ($2355))|0;
            $2356 = $$pre438 & 1;
            $2357 = ($2356|0)==(0);
            if ($2357) {
             label = 552;
             break L634;
            }
            break;
           }
           default: {
            $2358 = (($2327) - ($2355))|0;
            $2359 = ($2358|0)<(2);
            if ($2359) {
             label = 473;
             break L634;
            }
            switch ($2353<<24>>24) {
            case 67: case 99: case 97: case 65:  {
             $2360 = (($str$i$sroa$0$4) + 1)|0;
             $2361 = ($str$i$sroa$126$9>>>0)<($2360>>>0);
             do {
              if ($2361) {
               $2362 = $str$i$sroa$0$4 >>> 1;
               $2363 = $str$i$sroa$0$4 | $2362;
               $2364 = $2363 >>> 2;
               $2365 = $2363 | $2364;
               $2366 = $2365 >>> 4;
               $2367 = $2365 | $2366;
               $2368 = $2367 >>> 8;
               $2369 = $2367 | $2368;
               $2370 = $2369 >>> 16;
               $2371 = $2369 | $2370;
               $2372 = (($2371) + 1)|0;
               $2373 = $str$i$sroa$199$9;
               $2374 = (_realloc($2373,$2372)|0);
               $2375 = ($2374|0)==(0|0);
               if ($2375) {
                $str$i$sroa$0$5 = $str$i$sroa$0$4;$str$i$sroa$126$11 = $str$i$sroa$126$9;$str$i$sroa$199$11 = $str$i$sroa$199$9;
                break;
               }
               $2376 = $2374;
               $str$i$sroa$126$10 = $2372;$str$i$sroa$199$10 = $2376;
               label = 478;
              } else {
               $str$i$sroa$126$10 = $str$i$sroa$126$9;$str$i$sroa$199$10 = $str$i$sroa$199$9;
               label = 478;
              }
             } while(0);
             if ((label|0) == 478) {
              label = 0;
              $2377 = $str$i$sroa$199$10;
              $2378 = (($2377) + ($str$i$sroa$0$4)|0);
              HEAP8[$2378>>0] = 65;
              $str$i$sroa$0$5 = $2360;$str$i$sroa$126$11 = $str$i$sroa$126$10;$str$i$sroa$199$11 = $str$i$sroa$199$10;
             }
             $2379 = HEAP8[$2354>>0]|0;
             $2380 = (($str$i$sroa$0$5) + 1)|0;
             $2381 = ($str$i$sroa$126$11>>>0)<($2380>>>0);
             if ($2381) {
              $2382 = $str$i$sroa$0$5 >>> 1;
              $2383 = $str$i$sroa$0$5 | $2382;
              $2384 = $2383 >>> 2;
              $2385 = $2383 | $2384;
              $2386 = $2385 >>> 4;
              $2387 = $2385 | $2386;
              $2388 = $2387 >>> 8;
              $2389 = $2387 | $2388;
              $2390 = $2389 >>> 16;
              $2391 = $2389 | $2390;
              $2392 = (($2391) + 1)|0;
              $2393 = $str$i$sroa$199$11;
              $2394 = (_realloc($2393,$2392)|0);
              $2395 = ($2394|0)==(0|0);
              if ($2395) {
               $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $str$i$sroa$0$5;$str$i$sroa$126$7 = $str$i$sroa$126$11;$str$i$sroa$199$7 = $str$i$sroa$199$11;
               continue L634;
              }
              $2396 = $2394;
              $str$i$sroa$126$12 = $2392;$str$i$sroa$199$12 = $2396;
             } else {
              $str$i$sroa$126$12 = $str$i$sroa$126$11;$str$i$sroa$199$12 = $str$i$sroa$199$11;
             }
             $2397 = $str$i$sroa$199$12;
             $2398 = (($2397) + ($str$i$sroa$0$5)|0);
             HEAP8[$2398>>0] = $2379;
             $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $2380;$str$i$sroa$126$7 = $str$i$sroa$126$12;$str$i$sroa$199$7 = $str$i$sroa$199$12;
             continue L634;
             break;
            }
            case 73: case 105:  {
             $2399 = HEAP8[$2354>>0]|0;
             $2400 = ($2399<<24>>24)==(45);
             if ($2400) {
              HEAP32[$f$i90$i>>2] = 0;
              HEAP32[$51>>2] = $2354;
              HEAP32[$52>>2] = $2354;
              $2401 = ($2354|0)<(0|0);
              $2402 = ((($2317)) + -2147483644|0);
              $$sink$i91$i = $2401 ? (-1) : $2402;
              HEAP32[$53>>2] = $$sink$i91$i;
              HEAP32[$54>>2] = -1;
              HEAP32[$55>>2] = 0;
              $2403 = $$sink$i91$i;
              $2404 = $2354;
              $2405 = (($2403) - ($2404))|0;
              HEAP32[$56>>2] = $2405;
              HEAP32[$57>>2] = $2403;
              $2406 = (___intscan($f$i90$i,10,1,-2147483648,0)|0);
              $2407 = tempRet0;
              $2408 = ($2406|0)>(-129);
              if ($2408) {
               $2409 = (($str$i$sroa$0$4) + 1)|0;
               $2410 = ($str$i$sroa$126$9>>>0)<($2409>>>0);
               do {
                if ($2410) {
                 $2411 = $str$i$sroa$0$4 >>> 1;
                 $2412 = $str$i$sroa$0$4 | $2411;
                 $2413 = $2412 >>> 2;
                 $2414 = $2412 | $2413;
                 $2415 = $2414 >>> 4;
                 $2416 = $2414 | $2415;
                 $2417 = $2416 >>> 8;
                 $2418 = $2416 | $2417;
                 $2419 = $2418 >>> 16;
                 $2420 = $2418 | $2419;
                 $2421 = (($2420) + 1)|0;
                 $2422 = $str$i$sroa$199$9;
                 $2423 = (_realloc($2422,$2421)|0);
                 $2424 = ($2423|0)==(0|0);
                 if ($2424) {
                  $str$i$sroa$0$6 = $str$i$sroa$0$4;$str$i$sroa$126$14 = $str$i$sroa$126$9;$str$i$sroa$199$14 = $str$i$sroa$199$9;
                  break;
                 }
                 $2425 = $2423;
                 $str$i$sroa$126$13 = $2421;$str$i$sroa$199$13 = $2425;
                 label = 488;
                } else {
                 $str$i$sroa$126$13 = $str$i$sroa$126$9;$str$i$sroa$199$13 = $str$i$sroa$199$9;
                 label = 488;
                }
               } while(0);
               if ((label|0) == 488) {
                label = 0;
                $2426 = $str$i$sroa$199$13;
                $2427 = (($2426) + ($str$i$sroa$0$4)|0);
                HEAP8[$2427>>0] = 99;
                $str$i$sroa$0$6 = $2409;$str$i$sroa$126$14 = $str$i$sroa$126$13;$str$i$sroa$199$14 = $str$i$sroa$199$13;
               }
               $2428 = (($str$i$sroa$0$6) + 1)|0;
               $2429 = ($str$i$sroa$126$14>>>0)<($2428>>>0);
               if ($2429) {
                $2430 = $str$i$sroa$0$6 >>> 1;
                $2431 = $str$i$sroa$0$6 | $2430;
                $2432 = $2431 >>> 2;
                $2433 = $2431 | $2432;
                $2434 = $2433 >>> 4;
                $2435 = $2433 | $2434;
                $2436 = $2435 >>> 8;
                $2437 = $2435 | $2436;
                $2438 = $2437 >>> 16;
                $2439 = $2437 | $2438;
                $2440 = (($2439) + 1)|0;
                $2441 = $str$i$sroa$199$14;
                $2442 = (_realloc($2441,$2440)|0);
                $2443 = ($2442|0)==(0|0);
                if ($2443) {
                 $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $str$i$sroa$0$6;$str$i$sroa$126$7 = $str$i$sroa$126$14;$str$i$sroa$199$7 = $str$i$sroa$199$14;
                 continue L634;
                }
                $2444 = $2442;
                $str$i$sroa$126$15 = $2440;$str$i$sroa$199$15 = $2444;
               } else {
                $str$i$sroa$126$15 = $str$i$sroa$126$14;$str$i$sroa$199$15 = $str$i$sroa$199$14;
               }
               $2445 = $2406&255;
               $2446 = $str$i$sroa$199$15;
               $2447 = (($2446) + ($str$i$sroa$0$6)|0);
               HEAP8[$2447>>0] = $2445;
               $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $2428;$str$i$sroa$126$7 = $str$i$sroa$126$15;$str$i$sroa$199$7 = $str$i$sroa$199$15;
               continue L634;
              }
              $2448 = ($2406|0)>(-32769);
              if ($2448) {
               $2449 = $2406&65535;
               $2450 = (($str$i$sroa$0$4) + 1)|0;
               $2451 = ($str$i$sroa$126$9>>>0)<($2450>>>0);
               do {
                if ($2451) {
                 $2452 = $str$i$sroa$0$4 >>> 1;
                 $2453 = $str$i$sroa$0$4 | $2452;
                 $2454 = $2453 >>> 2;
                 $2455 = $2453 | $2454;
                 $2456 = $2455 >>> 4;
                 $2457 = $2455 | $2456;
                 $2458 = $2457 >>> 8;
                 $2459 = $2457 | $2458;
                 $2460 = $2459 >>> 16;
                 $2461 = $2459 | $2460;
                 $2462 = (($2461) + 1)|0;
                 $2463 = $str$i$sroa$199$9;
                 $2464 = (_realloc($2463,$2462)|0);
                 $2465 = ($2464|0)==(0|0);
                 if ($2465) {
                  $str$i$sroa$0$7 = $str$i$sroa$0$4;$str$i$sroa$126$17 = $str$i$sroa$126$9;$str$i$sroa$199$17 = $str$i$sroa$199$9;
                  break;
                 }
                 $2466 = $2464;
                 $str$i$sroa$126$16 = $2462;$str$i$sroa$199$16 = $2466;
                 label = 497;
                } else {
                 $str$i$sroa$126$16 = $str$i$sroa$126$9;$str$i$sroa$199$16 = $str$i$sroa$199$9;
                 label = 497;
                }
               } while(0);
               if ((label|0) == 497) {
                label = 0;
                $2467 = $str$i$sroa$199$16;
                $2468 = (($2467) + ($str$i$sroa$0$4)|0);
                HEAP8[$2468>>0] = 115;
                $str$i$sroa$0$7 = $2450;$str$i$sroa$126$17 = $str$i$sroa$126$16;$str$i$sroa$199$17 = $str$i$sroa$199$16;
               }
               $2469 = (($str$i$sroa$0$7) + 2)|0;
               $2470 = ($str$i$sroa$126$17>>>0)<($2469>>>0);
               if ($2470) {
                $2471 = (($str$i$sroa$0$7) + 1)|0;
                $2472 = $2471 >>> 1;
                $2473 = $2471 | $2472;
                $2474 = $2473 >>> 2;
                $2475 = $2473 | $2474;
                $2476 = $2475 >>> 4;
                $2477 = $2475 | $2476;
                $2478 = $2477 >>> 8;
                $2479 = $2477 | $2478;
                $2480 = $2479 >>> 16;
                $2481 = $2479 | $2480;
                $2482 = (($2481) + 1)|0;
                $2483 = $str$i$sroa$199$17;
                $2484 = (_realloc($2483,$2482)|0);
                $2485 = ($2484|0)==(0|0);
                if ($2485) {
                 $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $str$i$sroa$0$7;$str$i$sroa$126$7 = $str$i$sroa$126$17;$str$i$sroa$199$7 = $str$i$sroa$199$17;
                 continue L634;
                }
                $2486 = $2484;
                $str$i$sroa$126$18 = $2482;$str$i$sroa$199$18 = $2486;
               } else {
                $str$i$sroa$126$18 = $str$i$sroa$126$17;$str$i$sroa$199$18 = $str$i$sroa$199$17;
               }
               $2487 = $str$i$sroa$199$18;
               $2488 = (($2487) + ($str$i$sroa$0$7)|0);
               HEAP8[$2488>>0]=$2449&255;HEAP8[$2488+1>>0]=$2449>>8;
               $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $2469;$str$i$sroa$126$7 = $str$i$sroa$126$18;$str$i$sroa$199$7 = $str$i$sroa$199$18;
               continue L634;
              } else {
               $2489 = (($str$i$sroa$0$4) + 1)|0;
               $2490 = ($str$i$sroa$126$9>>>0)<($2489>>>0);
               do {
                if ($2490) {
                 $2491 = $str$i$sroa$0$4 >>> 1;
                 $2492 = $str$i$sroa$0$4 | $2491;
                 $2493 = $2492 >>> 2;
                 $2494 = $2492 | $2493;
                 $2495 = $2494 >>> 4;
                 $2496 = $2494 | $2495;
                 $2497 = $2496 >>> 8;
                 $2498 = $2496 | $2497;
                 $2499 = $2498 >>> 16;
                 $2500 = $2498 | $2499;
                 $2501 = (($2500) + 1)|0;
                 $2502 = $str$i$sroa$199$9;
                 $2503 = (_realloc($2502,$2501)|0);
                 $2504 = ($2503|0)==(0|0);
                 if ($2504) {
                  $str$i$sroa$0$8 = $str$i$sroa$0$4;$str$i$sroa$126$20 = $str$i$sroa$126$9;$str$i$sroa$199$20 = $str$i$sroa$199$9;
                  break;
                 }
                 $2505 = $2503;
                 $str$i$sroa$126$19 = $2501;$str$i$sroa$199$19 = $2505;
                 label = 505;
                } else {
                 $str$i$sroa$126$19 = $str$i$sroa$126$9;$str$i$sroa$199$19 = $str$i$sroa$199$9;
                 label = 505;
                }
               } while(0);
               if ((label|0) == 505) {
                label = 0;
                $2506 = $str$i$sroa$199$19;
                $2507 = (($2506) + ($str$i$sroa$0$4)|0);
                HEAP8[$2507>>0] = 105;
                $str$i$sroa$0$8 = $2489;$str$i$sroa$126$20 = $str$i$sroa$126$19;$str$i$sroa$199$20 = $str$i$sroa$199$19;
               }
               $2508 = (($str$i$sroa$0$8) + 4)|0;
               $2509 = ($str$i$sroa$126$20>>>0)<($2508>>>0);
               if ($2509) {
                $2510 = (($str$i$sroa$0$8) + 3)|0;
                $2511 = $2510 >>> 1;
                $2512 = $2510 | $2511;
                $2513 = $2512 >>> 2;
                $2514 = $2512 | $2513;
                $2515 = $2514 >>> 4;
                $2516 = $2514 | $2515;
                $2517 = $2516 >>> 8;
                $2518 = $2516 | $2517;
                $2519 = $2518 >>> 16;
                $2520 = $2518 | $2519;
                $2521 = (($2520) + 1)|0;
                $2522 = $str$i$sroa$199$20;
                $2523 = (_realloc($2522,$2521)|0);
                $2524 = ($2523|0)==(0|0);
                if ($2524) {
                 $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $str$i$sroa$0$8;$str$i$sroa$126$7 = $str$i$sroa$126$20;$str$i$sroa$199$7 = $str$i$sroa$199$20;
                 continue L634;
                }
                $2525 = $2523;
                $str$i$sroa$126$21 = $2521;$str$i$sroa$199$21 = $2525;
               } else {
                $str$i$sroa$126$21 = $str$i$sroa$126$20;$str$i$sroa$199$21 = $str$i$sroa$199$20;
               }
               $2526 = $str$i$sroa$199$21;
               $2527 = (($2526) + ($str$i$sroa$0$8)|0);
               HEAP8[$2527>>0]=$2406&255;HEAP8[$2527+1>>0]=($2406>>8)&255;HEAP8[$2527+2>>0]=($2406>>16)&255;HEAP8[$2527+3>>0]=$2406>>24;
               $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $2508;$str$i$sroa$126$7 = $str$i$sroa$126$21;$str$i$sroa$199$7 = $str$i$sroa$199$21;
               continue L634;
              }
             } else {
              HEAP32[$f$i110$i>>2] = 0;
              HEAP32[$58>>2] = $2354;
              HEAP32[$59>>2] = $2354;
              $2528 = ($2354|0)<(0|0);
              $2529 = ((($2317)) + -2147483644|0);
              $$sink$i111$i = $2528 ? (-1) : $2529;
              HEAP32[$60>>2] = $$sink$i111$i;
              HEAP32[$61>>2] = -1;
              HEAP32[$62>>2] = 0;
              $2530 = $$sink$i111$i;
              $2531 = $2354;
              $2532 = (($2530) - ($2531))|0;
              HEAP32[$63>>2] = $2532;
              HEAP32[$64>>2] = $2530;
              $2533 = (___intscan($f$i110$i,10,1,-1,0)|0);
              $2534 = tempRet0;
              $2535 = ($2533>>>0)<(256);
              if ($2535) {
               $2536 = (($str$i$sroa$0$4) + 1)|0;
               $2537 = ($str$i$sroa$126$9>>>0)<($2536>>>0);
               do {
                if ($2537) {
                 $2538 = $str$i$sroa$0$4 >>> 1;
                 $2539 = $str$i$sroa$0$4 | $2538;
                 $2540 = $2539 >>> 2;
                 $2541 = $2539 | $2540;
                 $2542 = $2541 >>> 4;
                 $2543 = $2541 | $2542;
                 $2544 = $2543 >>> 8;
                 $2545 = $2543 | $2544;
                 $2546 = $2545 >>> 16;
                 $2547 = $2545 | $2546;
                 $2548 = (($2547) + 1)|0;
                 $2549 = $str$i$sroa$199$9;
                 $2550 = (_realloc($2549,$2548)|0);
                 $2551 = ($2550|0)==(0|0);
                 if ($2551) {
                  $str$i$sroa$0$9 = $str$i$sroa$0$4;$str$i$sroa$126$23 = $str$i$sroa$126$9;$str$i$sroa$199$23 = $str$i$sroa$199$9;
                  break;
                 }
                 $2552 = $2550;
                 $str$i$sroa$126$22 = $2548;$str$i$sroa$199$22 = $2552;
                 label = 514;
                } else {
                 $str$i$sroa$126$22 = $str$i$sroa$126$9;$str$i$sroa$199$22 = $str$i$sroa$199$9;
                 label = 514;
                }
               } while(0);
               if ((label|0) == 514) {
                label = 0;
                $2553 = $str$i$sroa$199$22;
                $2554 = (($2553) + ($str$i$sroa$0$4)|0);
                HEAP8[$2554>>0] = 67;
                $str$i$sroa$0$9 = $2536;$str$i$sroa$126$23 = $str$i$sroa$126$22;$str$i$sroa$199$23 = $str$i$sroa$199$22;
               }
               $2555 = (($str$i$sroa$0$9) + 1)|0;
               $2556 = ($str$i$sroa$126$23>>>0)<($2555>>>0);
               if ($2556) {
                $2557 = $str$i$sroa$0$9 >>> 1;
                $2558 = $str$i$sroa$0$9 | $2557;
                $2559 = $2558 >>> 2;
                $2560 = $2558 | $2559;
                $2561 = $2560 >>> 4;
                $2562 = $2560 | $2561;
                $2563 = $2562 >>> 8;
                $2564 = $2562 | $2563;
                $2565 = $2564 >>> 16;
                $2566 = $2564 | $2565;
                $2567 = (($2566) + 1)|0;
                $2568 = $str$i$sroa$199$23;
                $2569 = (_realloc($2568,$2567)|0);
                $2570 = ($2569|0)==(0|0);
                if ($2570) {
                 $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $str$i$sroa$0$9;$str$i$sroa$126$7 = $str$i$sroa$126$23;$str$i$sroa$199$7 = $str$i$sroa$199$23;
                 continue L634;
                }
                $2571 = $2569;
                $str$i$sroa$126$24 = $2567;$str$i$sroa$199$24 = $2571;
               } else {
                $str$i$sroa$126$24 = $str$i$sroa$126$23;$str$i$sroa$199$24 = $str$i$sroa$199$23;
               }
               $2572 = $2533&255;
               $2573 = $str$i$sroa$199$24;
               $2574 = (($2573) + ($str$i$sroa$0$9)|0);
               HEAP8[$2574>>0] = $2572;
               $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $2555;$str$i$sroa$126$7 = $str$i$sroa$126$24;$str$i$sroa$199$7 = $str$i$sroa$199$24;
               continue L634;
              }
              $2575 = ($2533>>>0)<(65536);
              if ($2575) {
               $2576 = $2533&65535;
               $2577 = (($str$i$sroa$0$4) + 1)|0;
               $2578 = ($str$i$sroa$126$9>>>0)<($2577>>>0);
               do {
                if ($2578) {
                 $2579 = $str$i$sroa$0$4 >>> 1;
                 $2580 = $str$i$sroa$0$4 | $2579;
                 $2581 = $2580 >>> 2;
                 $2582 = $2580 | $2581;
                 $2583 = $2582 >>> 4;
                 $2584 = $2582 | $2583;
                 $2585 = $2584 >>> 8;
                 $2586 = $2584 | $2585;
                 $2587 = $2586 >>> 16;
                 $2588 = $2586 | $2587;
                 $2589 = (($2588) + 1)|0;
                 $2590 = $str$i$sroa$199$9;
                 $2591 = (_realloc($2590,$2589)|0);
                 $2592 = ($2591|0)==(0|0);
                 if ($2592) {
                  $str$i$sroa$0$10 = $str$i$sroa$0$4;$str$i$sroa$126$26 = $str$i$sroa$126$9;$str$i$sroa$199$26 = $str$i$sroa$199$9;
                  break;
                 }
                 $2593 = $2591;
                 $str$i$sroa$126$25 = $2589;$str$i$sroa$199$25 = $2593;
                 label = 523;
                } else {
                 $str$i$sroa$126$25 = $str$i$sroa$126$9;$str$i$sroa$199$25 = $str$i$sroa$199$9;
                 label = 523;
                }
               } while(0);
               if ((label|0) == 523) {
                label = 0;
                $2594 = $str$i$sroa$199$25;
                $2595 = (($2594) + ($str$i$sroa$0$4)|0);
                HEAP8[$2595>>0] = 83;
                $str$i$sroa$0$10 = $2577;$str$i$sroa$126$26 = $str$i$sroa$126$25;$str$i$sroa$199$26 = $str$i$sroa$199$25;
               }
               $2596 = (($str$i$sroa$0$10) + 2)|0;
               $2597 = ($str$i$sroa$126$26>>>0)<($2596>>>0);
               if ($2597) {
                $2598 = (($str$i$sroa$0$10) + 1)|0;
                $2599 = $2598 >>> 1;
                $2600 = $2598 | $2599;
                $2601 = $2600 >>> 2;
                $2602 = $2600 | $2601;
                $2603 = $2602 >>> 4;
                $2604 = $2602 | $2603;
                $2605 = $2604 >>> 8;
                $2606 = $2604 | $2605;
                $2607 = $2606 >>> 16;
                $2608 = $2606 | $2607;
                $2609 = (($2608) + 1)|0;
                $2610 = $str$i$sroa$199$26;
                $2611 = (_realloc($2610,$2609)|0);
                $2612 = ($2611|0)==(0|0);
                if ($2612) {
                 $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $str$i$sroa$0$10;$str$i$sroa$126$7 = $str$i$sroa$126$26;$str$i$sroa$199$7 = $str$i$sroa$199$26;
                 continue L634;
                }
                $2613 = $2611;
                $str$i$sroa$126$27 = $2609;$str$i$sroa$199$27 = $2613;
               } else {
                $str$i$sroa$126$27 = $str$i$sroa$126$26;$str$i$sroa$199$27 = $str$i$sroa$199$26;
               }
               $2614 = $str$i$sroa$199$27;
               $2615 = (($2614) + ($str$i$sroa$0$10)|0);
               HEAP8[$2615>>0]=$2576&255;HEAP8[$2615+1>>0]=$2576>>8;
               $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $2596;$str$i$sroa$126$7 = $str$i$sroa$126$27;$str$i$sroa$199$7 = $str$i$sroa$199$27;
               continue L634;
              } else {
               $2616 = (($str$i$sroa$0$4) + 1)|0;
               $2617 = ($str$i$sroa$126$9>>>0)<($2616>>>0);
               do {
                if ($2617) {
                 $2618 = $str$i$sroa$0$4 >>> 1;
                 $2619 = $str$i$sroa$0$4 | $2618;
                 $2620 = $2619 >>> 2;
                 $2621 = $2619 | $2620;
                 $2622 = $2621 >>> 4;
                 $2623 = $2621 | $2622;
                 $2624 = $2623 >>> 8;
                 $2625 = $2623 | $2624;
                 $2626 = $2625 >>> 16;
                 $2627 = $2625 | $2626;
                 $2628 = (($2627) + 1)|0;
                 $2629 = $str$i$sroa$199$9;
                 $2630 = (_realloc($2629,$2628)|0);
                 $2631 = ($2630|0)==(0|0);
                 if ($2631) {
                  $str$i$sroa$0$11 = $str$i$sroa$0$4;$str$i$sroa$126$29 = $str$i$sroa$126$9;$str$i$sroa$199$29 = $str$i$sroa$199$9;
                  break;
                 }
                 $2632 = $2630;
                 $str$i$sroa$126$28 = $2628;$str$i$sroa$199$28 = $2632;
                 label = 531;
                } else {
                 $str$i$sroa$126$28 = $str$i$sroa$126$9;$str$i$sroa$199$28 = $str$i$sroa$199$9;
                 label = 531;
                }
               } while(0);
               if ((label|0) == 531) {
                label = 0;
                $2633 = $str$i$sroa$199$28;
                $2634 = (($2633) + ($str$i$sroa$0$4)|0);
                HEAP8[$2634>>0] = 73;
                $str$i$sroa$0$11 = $2616;$str$i$sroa$126$29 = $str$i$sroa$126$28;$str$i$sroa$199$29 = $str$i$sroa$199$28;
               }
               $2635 = (($str$i$sroa$0$11) + 4)|0;
               $2636 = ($str$i$sroa$126$29>>>0)<($2635>>>0);
               if ($2636) {
                $2637 = (($str$i$sroa$0$11) + 3)|0;
                $2638 = $2637 >>> 1;
                $2639 = $2637 | $2638;
                $2640 = $2639 >>> 2;
                $2641 = $2639 | $2640;
                $2642 = $2641 >>> 4;
                $2643 = $2641 | $2642;
                $2644 = $2643 >>> 8;
                $2645 = $2643 | $2644;
                $2646 = $2645 >>> 16;
                $2647 = $2645 | $2646;
                $2648 = (($2647) + 1)|0;
                $2649 = $str$i$sroa$199$29;
                $2650 = (_realloc($2649,$2648)|0);
                $2651 = ($2650|0)==(0|0);
                if ($2651) {
                 $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $str$i$sroa$0$11;$str$i$sroa$126$7 = $str$i$sroa$126$29;$str$i$sroa$199$7 = $str$i$sroa$199$29;
                 continue L634;
                }
                $2652 = $2650;
                $str$i$sroa$126$30 = $2648;$str$i$sroa$199$30 = $2652;
               } else {
                $str$i$sroa$126$30 = $str$i$sroa$126$29;$str$i$sroa$199$30 = $str$i$sroa$199$29;
               }
               $2653 = $str$i$sroa$199$30;
               $2654 = (($2653) + ($str$i$sroa$0$11)|0);
               HEAP8[$2654>>0]=$2533&255;HEAP8[$2654+1>>0]=($2533>>8)&255;HEAP8[$2654+2>>0]=($2533>>16)&255;HEAP8[$2654+3>>0]=$2533>>24;
               $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $2635;$str$i$sroa$126$7 = $str$i$sroa$126$30;$str$i$sroa$199$7 = $str$i$sroa$199$30;
               continue L634;
              }
             }
             break;
            }
            case 102:  {
             dest=$f$i$i130$i; stop=dest+108|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
             HEAP32[$65>>2] = $2354;
             HEAP32[$66>>2] = (-1);
             HEAP32[$67>>2] = $2354;
             HEAP32[$68>>2] = -1;
             HEAP32[$69>>2] = 0;
             $2655 = $2354;
             $2656 = $2655 ^ -1;
             HEAP32[$70>>2] = $2656;
             HEAP32[$71>>2] = -1;
             $2657 = (+___floatscan($f$i$i130$i,1,1));
             $2658 = $2657;
             $2659 = (($str$i$sroa$0$4) + 1)|0;
             $2660 = ($str$i$sroa$126$9>>>0)<($2659>>>0);
             do {
              if ($2660) {
               $2661 = $str$i$sroa$0$4 >>> 1;
               $2662 = $str$i$sroa$0$4 | $2661;
               $2663 = $2662 >>> 2;
               $2664 = $2662 | $2663;
               $2665 = $2664 >>> 4;
               $2666 = $2664 | $2665;
               $2667 = $2666 >>> 8;
               $2668 = $2666 | $2667;
               $2669 = $2668 >>> 16;
               $2670 = $2668 | $2669;
               $2671 = (($2670) + 1)|0;
               $2672 = $str$i$sroa$199$9;
               $2673 = (_realloc($2672,$2671)|0);
               $2674 = ($2673|0)==(0|0);
               if ($2674) {
                $str$i$sroa$0$12 = $str$i$sroa$0$4;$str$i$sroa$126$32 = $str$i$sroa$126$9;$str$i$sroa$199$32 = $str$i$sroa$199$9;
                break;
               }
               $2675 = $2673;
               $str$i$sroa$126$31 = $2671;$str$i$sroa$199$31 = $2675;
               label = 539;
              } else {
               $str$i$sroa$126$31 = $str$i$sroa$126$9;$str$i$sroa$199$31 = $str$i$sroa$199$9;
               label = 539;
              }
             } while(0);
             if ((label|0) == 539) {
              label = 0;
              $2676 = $str$i$sroa$199$31;
              $2677 = (($2676) + ($str$i$sroa$0$4)|0);
              HEAP8[$2677>>0] = 102;
              $str$i$sroa$0$12 = $2659;$str$i$sroa$126$32 = $str$i$sroa$126$31;$str$i$sroa$199$32 = $str$i$sroa$199$31;
             }
             $2678 = (($str$i$sroa$0$12) + 4)|0;
             $2679 = ($str$i$sroa$126$32>>>0)<($2678>>>0);
             if ($2679) {
              $2680 = (($str$i$sroa$0$12) + 3)|0;
              $2681 = $2680 >>> 1;
              $2682 = $2680 | $2681;
              $2683 = $2682 >>> 2;
              $2684 = $2682 | $2683;
              $2685 = $2684 >>> 4;
              $2686 = $2684 | $2685;
              $2687 = $2686 >>> 8;
              $2688 = $2686 | $2687;
              $2689 = $2688 >>> 16;
              $2690 = $2688 | $2689;
              $2691 = (($2690) + 1)|0;
              $2692 = $str$i$sroa$199$32;
              $2693 = (_realloc($2692,$2691)|0);
              $2694 = ($2693|0)==(0|0);
              if ($2694) {
               $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $str$i$sroa$0$12;$str$i$sroa$126$7 = $str$i$sroa$126$32;$str$i$sroa$199$7 = $str$i$sroa$199$32;
               continue L634;
              }
              $2695 = $2693;
              $str$i$sroa$126$33 = $2691;$str$i$sroa$199$33 = $2695;
             } else {
              $str$i$sroa$126$33 = $str$i$sroa$126$32;$str$i$sroa$199$33 = $str$i$sroa$199$32;
             }
             $2696 = $str$i$sroa$199$33;
             $2697 = (($2696) + ($str$i$sroa$0$12)|0);
             HEAPF32[tempDoublePtr>>2]=$2658;HEAP8[$2697>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$2697+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$2697+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$2697+3>>0]=HEAP8[tempDoublePtr+3>>0];
             $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $2678;$str$i$sroa$126$7 = $str$i$sroa$126$33;$str$i$sroa$199$7 = $str$i$sroa$199$33;
             continue L634;
             break;
            }
            case 100:  {
             dest=$f$i$i137$i; stop=dest+108|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
             HEAP32[$72>>2] = $2354;
             HEAP32[$73>>2] = (-1);
             HEAP32[$74>>2] = $2354;
             HEAP32[$75>>2] = -1;
             HEAP32[$76>>2] = 0;
             $2698 = $2354;
             $2699 = $2698 ^ -1;
             HEAP32[$77>>2] = $2699;
             HEAP32[$78>>2] = -1;
             $2700 = (+___floatscan($f$i$i137$i,1,1));
             $2701 = (($str$i$sroa$0$4) + 1)|0;
             $2702 = ($str$i$sroa$126$9>>>0)<($2701>>>0);
             do {
              if ($2702) {
               $2703 = $str$i$sroa$0$4 >>> 1;
               $2704 = $str$i$sroa$0$4 | $2703;
               $2705 = $2704 >>> 2;
               $2706 = $2704 | $2705;
               $2707 = $2706 >>> 4;
               $2708 = $2706 | $2707;
               $2709 = $2708 >>> 8;
               $2710 = $2708 | $2709;
               $2711 = $2710 >>> 16;
               $2712 = $2710 | $2711;
               $2713 = (($2712) + 1)|0;
               $2714 = $str$i$sroa$199$9;
               $2715 = (_realloc($2714,$2713)|0);
               $2716 = ($2715|0)==(0|0);
               if ($2716) {
                $str$i$sroa$0$13 = $str$i$sroa$0$4;$str$i$sroa$126$35 = $str$i$sroa$126$9;$str$i$sroa$199$35 = $str$i$sroa$199$9;
                break;
               }
               $2717 = $2715;
               $str$i$sroa$126$34 = $2713;$str$i$sroa$199$34 = $2717;
               label = 547;
              } else {
               $str$i$sroa$126$34 = $str$i$sroa$126$9;$str$i$sroa$199$34 = $str$i$sroa$199$9;
               label = 547;
              }
             } while(0);
             if ((label|0) == 547) {
              label = 0;
              $2718 = $str$i$sroa$199$34;
              $2719 = (($2718) + ($str$i$sroa$0$4)|0);
              HEAP8[$2719>>0] = 100;
              $str$i$sroa$0$13 = $2701;$str$i$sroa$126$35 = $str$i$sroa$126$34;$str$i$sroa$199$35 = $str$i$sroa$199$34;
             }
             $2720 = (($str$i$sroa$0$13) + 8)|0;
             $2721 = ($str$i$sroa$126$35>>>0)<($2720>>>0);
             if ($2721) {
              $2722 = (($str$i$sroa$0$13) + 7)|0;
              $2723 = $2722 >>> 1;
              $2724 = $2722 | $2723;
              $2725 = $2724 >>> 2;
              $2726 = $2724 | $2725;
              $2727 = $2726 >>> 4;
              $2728 = $2726 | $2727;
              $2729 = $2728 >>> 8;
              $2730 = $2728 | $2729;
              $2731 = $2730 >>> 16;
              $2732 = $2730 | $2731;
              $2733 = (($2732) + 1)|0;
              $2734 = $str$i$sroa$199$35;
              $2735 = (_realloc($2734,$2733)|0);
              $2736 = ($2735|0)==(0|0);
              if ($2736) {
               $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $str$i$sroa$0$13;$str$i$sroa$126$7 = $str$i$sroa$126$35;$str$i$sroa$199$7 = $str$i$sroa$199$35;
               continue L634;
              }
              $2737 = $2735;
              $str$i$sroa$126$36 = $2733;$str$i$sroa$199$36 = $2737;
             } else {
              $str$i$sroa$126$36 = $str$i$sroa$126$35;$str$i$sroa$199$36 = $str$i$sroa$199$35;
             }
             $2738 = $str$i$sroa$199$36;
             $2739 = (($2738) + ($str$i$sroa$0$13)|0);
             HEAPF64[tempDoublePtr>>3]=$2700;HEAP8[$2739>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$2739+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$2739+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$2739+3>>0]=HEAP8[tempDoublePtr+3>>0];HEAP8[$2739+4>>0]=HEAP8[tempDoublePtr+4>>0];HEAP8[$2739+5>>0]=HEAP8[tempDoublePtr+5>>0];HEAP8[$2739+6>>0]=HEAP8[tempDoublePtr+6>>0];HEAP8[$2739+7>>0]=HEAP8[tempDoublePtr+7>>0];
             $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $2720;$str$i$sroa$126$7 = $str$i$sroa$126$36;$str$i$sroa$199$7 = $str$i$sroa$199$36;
             continue L634;
             break;
            }
            case 66:  {
             $2780 = ($2358|0)<(4);
             if ($2780) {
              label = 562;
              break L634;
             }
             $2781 = ((($2317)) + 6|0);
             $2782 = HEAP8[$2354>>0]|0;
             $n$i$0 = 0;$r$0$i = $2781;
             L762: while(1) {
              $2783 = HEAP8[$r$0$i>>0]|0;
              switch ($2783<<24>>24) {
              case 0:  {
               break L762;
               break;
              }
              case 44:  {
               $2784 = (($n$i$0) + 1)|0;
               $n$i$1 = $2784;
               break;
              }
              default: {
               $n$i$1 = $n$i$0;
              }
              }
              $2785 = ((($r$0$i)) + 1|0);
              $n$i$0 = $n$i$1;$r$0$i = $2785;
             }
             $2786 = $2781;
             $2787 = (($str$i$sroa$0$4) + 1)|0;
             $2788 = ($str$i$sroa$126$9>>>0)<($2787>>>0);
             do {
              if ($2788) {
               $2789 = $str$i$sroa$0$4 >>> 1;
               $2790 = $str$i$sroa$0$4 | $2789;
               $2791 = $2790 >>> 2;
               $2792 = $2790 | $2791;
               $2793 = $2792 >>> 4;
               $2794 = $2792 | $2793;
               $2795 = $2794 >>> 8;
               $2796 = $2794 | $2795;
               $2797 = $2796 >>> 16;
               $2798 = $2796 | $2797;
               $2799 = (($2798) + 1)|0;
               $2800 = $str$i$sroa$199$9;
               $2801 = (_realloc($2800,$2799)|0);
               $2802 = ($2801|0)==(0|0);
               if ($2802) {
                $str$i$sroa$0$15 = $str$i$sroa$0$4;$str$i$sroa$126$41 = $str$i$sroa$126$9;$str$i$sroa$199$41 = $str$i$sroa$199$9;
                break;
               }
               $2803 = $2801;
               $str$i$sroa$126$40 = $2799;$str$i$sroa$199$40 = $2803;
               label = 570;
              } else {
               $str$i$sroa$126$40 = $str$i$sroa$126$9;$str$i$sroa$199$40 = $str$i$sroa$199$9;
               label = 570;
              }
             } while(0);
             if ((label|0) == 570) {
              label = 0;
              $2804 = $str$i$sroa$199$40;
              $2805 = (($2804) + ($str$i$sroa$0$4)|0);
              HEAP8[$2805>>0] = 66;
              $str$i$sroa$0$15 = $2787;$str$i$sroa$126$41 = $str$i$sroa$126$40;$str$i$sroa$199$41 = $str$i$sroa$199$40;
             }
             $2806 = (($str$i$sroa$0$15) + 1)|0;
             $2807 = ($str$i$sroa$126$41>>>0)<($2806>>>0);
             do {
              if ($2807) {
               $2808 = $str$i$sroa$0$15 >>> 1;
               $2809 = $str$i$sroa$0$15 | $2808;
               $2810 = $2809 >>> 2;
               $2811 = $2809 | $2810;
               $2812 = $2811 >>> 4;
               $2813 = $2811 | $2812;
               $2814 = $2813 >>> 8;
               $2815 = $2813 | $2814;
               $2816 = $2815 >>> 16;
               $2817 = $2815 | $2816;
               $2818 = (($2817) + 1)|0;
               $2819 = $str$i$sroa$199$41;
               $2820 = (_realloc($2819,$2818)|0);
               $2821 = ($2820|0)==(0|0);
               if ($2821) {
                $str$i$sroa$0$16 = $str$i$sroa$0$15;$str$i$sroa$126$43 = $str$i$sroa$126$41;$str$i$sroa$199$43 = $str$i$sroa$199$41;
                break;
               }
               $2822 = $2820;
               $str$i$sroa$126$42 = $2818;$str$i$sroa$199$42 = $2822;
               label = 574;
              } else {
               $str$i$sroa$126$42 = $str$i$sroa$126$41;$str$i$sroa$199$42 = $str$i$sroa$199$41;
               label = 574;
              }
             } while(0);
             if ((label|0) == 574) {
              label = 0;
              $2823 = $str$i$sroa$199$42;
              $2824 = (($2823) + ($str$i$sroa$0$15)|0);
              HEAP8[$2824>>0] = $2782;
              $str$i$sroa$0$16 = $2806;$str$i$sroa$126$43 = $str$i$sroa$126$42;$str$i$sroa$199$43 = $str$i$sroa$199$42;
             }
             $2825 = (($str$i$sroa$0$16) + 4)|0;
             $2826 = ($str$i$sroa$126$43>>>0)<($2825>>>0);
             do {
              if ($2826) {
               $2827 = (($str$i$sroa$0$16) + 3)|0;
               $2828 = $2827 >>> 1;
               $2829 = $2827 | $2828;
               $2830 = $2829 >>> 2;
               $2831 = $2829 | $2830;
               $2832 = $2831 >>> 4;
               $2833 = $2831 | $2832;
               $2834 = $2833 >>> 8;
               $2835 = $2833 | $2834;
               $2836 = $2835 >>> 16;
               $2837 = $2835 | $2836;
               $2838 = (($2837) + 1)|0;
               $2839 = $str$i$sroa$199$43;
               $2840 = (_realloc($2839,$2838)|0);
               $2841 = ($2840|0)==(0|0);
               if ($2841) {
                $str$i$sroa$0$17 = $str$i$sroa$0$16;$str$i$sroa$126$45 = $str$i$sroa$126$43;$str$i$sroa$199$45 = $str$i$sroa$199$43;
                break;
               }
               $2842 = $2840;
               $str$i$sroa$126$44 = $2838;$str$i$sroa$199$44 = $2842;
               label = 578;
              } else {
               $str$i$sroa$126$44 = $str$i$sroa$126$43;$str$i$sroa$199$44 = $str$i$sroa$199$43;
               label = 578;
              }
             } while(0);
             if ((label|0) == 578) {
              label = 0;
              $2843 = $str$i$sroa$199$44;
              $2844 = (($2843) + ($str$i$sroa$0$16)|0);
              HEAP8[$2844>>0]=$n$i$0&255;HEAP8[$2844+1>>0]=($n$i$0>>8)&255;HEAP8[$2844+2>>0]=($n$i$0>>16)&255;HEAP8[$2844+3>>0]=$n$i$0>>24;
              $str$i$sroa$0$17 = $2825;$str$i$sroa$126$45 = $str$i$sroa$126$44;$str$i$sroa$199$45 = $str$i$sroa$199$44;
             }
             switch ($2782<<24>>24) {
             case 99:  {
              $q$i$sroa$0$1$ph = $2786;$str$i$sroa$0$18$ph = $str$i$sroa$0$17;$str$i$sroa$126$46$ph = $str$i$sroa$126$45;$str$i$sroa$199$46$ph = $str$i$sroa$199$45;
              while(1) {
               $2845 = (($str$i$sroa$0$18$ph) + 1)|0;
               $2846 = ($str$i$sroa$126$46$ph>>>0)<($2845>>>0);
               $2847 = $str$i$sroa$0$18$ph >>> 1;
               $2848 = $str$i$sroa$0$18$ph | $2847;
               $2849 = $2848 >>> 2;
               $2850 = $2848 | $2849;
               $2851 = $2850 >>> 4;
               $2852 = $2850 | $2851;
               $2853 = $2852 >>> 8;
               $2854 = $2852 | $2853;
               $2855 = $2854 >>> 16;
               $2856 = $2854 | $2855;
               $2857 = (($2856) + 1)|0;
               $2858 = $str$i$sroa$199$46$ph;
               $q$i$sroa$0$1 = $q$i$sroa$0$1$ph;
               while(1) {
                $2859 = $q$i$sroa$0$1;
                $2860 = ((($2859)) + 1|0);
                $2861 = ($2859>>>0)<($2322>>>0);
                if (!($2861)) {
                 $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $str$i$sroa$0$18$ph;$str$i$sroa$126$7 = $str$i$sroa$126$46$ph;$str$i$sroa$199$7 = $str$i$sroa$199$46$ph;
                 continue L634;
                }
                HEAP32[$f$i159$i>>2] = 0;
                HEAP32[$121>>2] = $2860;
                HEAP32[$122>>2] = $2860;
                $2862 = ($2860|0)<(0|0);
                $2863 = ((($2859)) + -2147483648|0);
                $$sink$i160$i = $2862 ? (-1) : $2863;
                HEAP32[$123>>2] = $$sink$i160$i;
                HEAP32[$124>>2] = -1;
                HEAP32[$125>>2] = 0;
                $2864 = $$sink$i160$i;
                $2865 = $2860;
                $2866 = (($2864) - ($2865))|0;
                HEAP32[$126>>2] = $2866;
                HEAP32[$127>>2] = $2864;
                $2867 = (___intscan($f$i159$i,0,1,-2147483648,0)|0);
                $2868 = tempRet0;
                $2869 = HEAP32[$126>>2]|0;
                $2870 = HEAP32[$121>>2]|0;
                $2871 = HEAP32[$123>>2]|0;
                $2872 = (($2870) + ($2869))|0;
                $2873 = (($2872) - ($2871))|0;
                $2874 = (($2860) + ($2873)|0);
                $2875 = $2874;
                if (!($2846)) {
                 $str$i$sroa$126$47 = $str$i$sroa$126$46$ph;$str$i$sroa$199$47 = $str$i$sroa$199$46$ph;
                 break;
                }
                $2876 = (_realloc($2858,$2857)|0);
                $2877 = ($2876|0)==(0|0);
                if ($2877) {
                 $q$i$sroa$0$1 = $2875;
                } else {
                 label = 584;
                 break;
                }
               }
               if ((label|0) == 584) {
                label = 0;
                $2878 = $2876;
                $str$i$sroa$126$47 = $2857;$str$i$sroa$199$47 = $2878;
               }
               $2879 = $2867&255;
               $2880 = $str$i$sroa$199$47;
               $2881 = (($2880) + ($str$i$sroa$0$18$ph)|0);
               HEAP8[$2881>>0] = $2879;
               $q$i$sroa$0$1$ph = $2875;$str$i$sroa$0$18$ph = $2845;$str$i$sroa$126$46$ph = $str$i$sroa$126$47;$str$i$sroa$199$46$ph = $str$i$sroa$199$47;
              }
              break;
             }
             case 67:  {
              $q$i$sroa$0$2$ph = $2786;$str$i$sroa$0$19$ph = $str$i$sroa$0$17;$str$i$sroa$126$48$ph = $str$i$sroa$126$45;$str$i$sroa$199$48$ph = $str$i$sroa$199$45;
              while(1) {
               $2882 = (($str$i$sroa$0$19$ph) + 1)|0;
               $2883 = ($str$i$sroa$126$48$ph>>>0)<($2882>>>0);
               $2884 = $str$i$sroa$0$19$ph >>> 1;
               $2885 = $str$i$sroa$0$19$ph | $2884;
               $2886 = $2885 >>> 2;
               $2887 = $2885 | $2886;
               $2888 = $2887 >>> 4;
               $2889 = $2887 | $2888;
               $2890 = $2889 >>> 8;
               $2891 = $2889 | $2890;
               $2892 = $2891 >>> 16;
               $2893 = $2891 | $2892;
               $2894 = (($2893) + 1)|0;
               $2895 = $str$i$sroa$199$48$ph;
               $q$i$sroa$0$2 = $q$i$sroa$0$2$ph;
               while(1) {
                $2896 = $q$i$sroa$0$2;
                $2897 = ((($2896)) + 1|0);
                $2898 = ($2896>>>0)<($2322>>>0);
                if (!($2898)) {
                 $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $str$i$sroa$0$19$ph;$str$i$sroa$126$7 = $str$i$sroa$126$48$ph;$str$i$sroa$199$7 = $str$i$sroa$199$48$ph;
                 continue L634;
                }
                HEAP32[$f$i164$i>>2] = 0;
                HEAP32[$114>>2] = $2897;
                HEAP32[$115>>2] = $2897;
                $2899 = ($2897|0)<(0|0);
                $2900 = ((($2896)) + -2147483648|0);
                $$sink$i165$i = $2899 ? (-1) : $2900;
                HEAP32[$116>>2] = $$sink$i165$i;
                HEAP32[$117>>2] = -1;
                HEAP32[$118>>2] = 0;
                $2901 = $$sink$i165$i;
                $2902 = $2897;
                $2903 = (($2901) - ($2902))|0;
                HEAP32[$119>>2] = $2903;
                HEAP32[$120>>2] = $2901;
                $2904 = (___intscan($f$i164$i,0,1,-1,0)|0);
                $2905 = tempRet0;
                $2906 = HEAP32[$119>>2]|0;
                $2907 = HEAP32[$114>>2]|0;
                $2908 = HEAP32[$116>>2]|0;
                $2909 = (($2907) + ($2906))|0;
                $2910 = (($2909) - ($2908))|0;
                $2911 = (($2897) + ($2910)|0);
                $2912 = $2911;
                if (!($2883)) {
                 $str$i$sroa$126$49 = $str$i$sroa$126$48$ph;$str$i$sroa$199$49 = $str$i$sroa$199$48$ph;
                 break;
                }
                $2913 = (_realloc($2895,$2894)|0);
                $2914 = ($2913|0)==(0|0);
                if ($2914) {
                 $q$i$sroa$0$2 = $2912;
                } else {
                 label = 590;
                 break;
                }
               }
               if ((label|0) == 590) {
                label = 0;
                $2915 = $2913;
                $str$i$sroa$126$49 = $2894;$str$i$sroa$199$49 = $2915;
               }
               $2916 = $2904&255;
               $2917 = $str$i$sroa$199$49;
               $2918 = (($2917) + ($str$i$sroa$0$19$ph)|0);
               HEAP8[$2918>>0] = $2916;
               $q$i$sroa$0$2$ph = $2912;$str$i$sroa$0$19$ph = $2882;$str$i$sroa$126$48$ph = $str$i$sroa$126$49;$str$i$sroa$199$48$ph = $str$i$sroa$199$49;
              }
              break;
             }
             case 115:  {
              $q$i$sroa$0$3$ph = $2786;$str$i$sroa$0$20$ph = $str$i$sroa$0$17;$str$i$sroa$126$50$ph = $str$i$sroa$126$45;$str$i$sroa$199$50$ph = $str$i$sroa$199$45;
              while(1) {
               $2919 = (($str$i$sroa$0$20$ph) + 2)|0;
               $2920 = ($str$i$sroa$126$50$ph>>>0)<($2919>>>0);
               $2921 = (($str$i$sroa$0$20$ph) + 1)|0;
               $2922 = $2921 >>> 1;
               $2923 = $2921 | $2922;
               $2924 = $2923 >>> 2;
               $2925 = $2923 | $2924;
               $2926 = $2925 >>> 4;
               $2927 = $2925 | $2926;
               $2928 = $2927 >>> 8;
               $2929 = $2927 | $2928;
               $2930 = $2929 >>> 16;
               $2931 = $2929 | $2930;
               $2932 = (($2931) + 1)|0;
               $2933 = $str$i$sroa$199$50$ph;
               $q$i$sroa$0$3 = $q$i$sroa$0$3$ph;
               while(1) {
                $2934 = $q$i$sroa$0$3;
                $2935 = ((($2934)) + 1|0);
                $2936 = ($2934>>>0)<($2322>>>0);
                if (!($2936)) {
                 $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $str$i$sroa$0$20$ph;$str$i$sroa$126$7 = $str$i$sroa$126$50$ph;$str$i$sroa$199$7 = $str$i$sroa$199$50$ph;
                 continue L634;
                }
                HEAP32[$f$i169$i>>2] = 0;
                HEAP32[$107>>2] = $2935;
                HEAP32[$108>>2] = $2935;
                $2937 = ($2935|0)<(0|0);
                $2938 = ((($2934)) + -2147483648|0);
                $$sink$i170$i = $2937 ? (-1) : $2938;
                HEAP32[$109>>2] = $$sink$i170$i;
                HEAP32[$110>>2] = -1;
                HEAP32[$111>>2] = 0;
                $2939 = $$sink$i170$i;
                $2940 = $2935;
                $2941 = (($2939) - ($2940))|0;
                HEAP32[$112>>2] = $2941;
                HEAP32[$113>>2] = $2939;
                $2942 = (___intscan($f$i169$i,0,1,-2147483648,0)|0);
                $2943 = tempRet0;
                $2944 = HEAP32[$112>>2]|0;
                $2945 = HEAP32[$107>>2]|0;
                $2946 = HEAP32[$109>>2]|0;
                $2947 = (($2945) + ($2944))|0;
                $2948 = (($2947) - ($2946))|0;
                $2949 = (($2935) + ($2948)|0);
                $2950 = $2949;
                if (!($2920)) {
                 label = 597;
                 break;
                }
                $2951 = (_realloc($2933,$2932)|0);
                $2952 = ($2951|0)==(0|0);
                if ($2952) {
                 $q$i$sroa$0$3 = $2950;
                } else {
                 label = 596;
                 break;
                }
               }
               if ((label|0) == 596) {
                label = 0;
                $2953 = $2942&65535;
                $2954 = $2951;
                $2958 = $2953;$str$i$sroa$126$51 = $2932;$str$i$sroa$199$51 = $2954;
               }
               else if ((label|0) == 597) {
                label = 0;
                $2955 = $2942&65535;
                $2958 = $2955;$str$i$sroa$126$51 = $str$i$sroa$126$50$ph;$str$i$sroa$199$51 = $str$i$sroa$199$50$ph;
               }
               $2956 = $str$i$sroa$199$51;
               $2957 = (($2956) + ($str$i$sroa$0$20$ph)|0);
               HEAP8[$2957>>0]=$2958&255;HEAP8[$2957+1>>0]=$2958>>8;
               $q$i$sroa$0$3$ph = $2950;$str$i$sroa$0$20$ph = $2919;$str$i$sroa$126$50$ph = $str$i$sroa$126$51;$str$i$sroa$199$50$ph = $str$i$sroa$199$51;
              }
              break;
             }
             case 83:  {
              $q$i$sroa$0$4$ph = $2786;$str$i$sroa$0$21$ph = $str$i$sroa$0$17;$str$i$sroa$126$52$ph = $str$i$sroa$126$45;$str$i$sroa$199$52$ph = $str$i$sroa$199$45;
              while(1) {
               $2959 = (($str$i$sroa$0$21$ph) + 2)|0;
               $2960 = ($str$i$sroa$126$52$ph>>>0)<($2959>>>0);
               $2961 = (($str$i$sroa$0$21$ph) + 1)|0;
               $2962 = $2961 >>> 1;
               $2963 = $2961 | $2962;
               $2964 = $2963 >>> 2;
               $2965 = $2963 | $2964;
               $2966 = $2965 >>> 4;
               $2967 = $2965 | $2966;
               $2968 = $2967 >>> 8;
               $2969 = $2967 | $2968;
               $2970 = $2969 >>> 16;
               $2971 = $2969 | $2970;
               $2972 = (($2971) + 1)|0;
               $2973 = $str$i$sroa$199$52$ph;
               $q$i$sroa$0$4 = $q$i$sroa$0$4$ph;
               while(1) {
                $2974 = $q$i$sroa$0$4;
                $2975 = ((($2974)) + 1|0);
                $2976 = ($2974>>>0)<($2322>>>0);
                if (!($2976)) {
                 $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $str$i$sroa$0$21$ph;$str$i$sroa$126$7 = $str$i$sroa$126$52$ph;$str$i$sroa$199$7 = $str$i$sroa$199$52$ph;
                 continue L634;
                }
                HEAP32[$f$i174$i>>2] = 0;
                HEAP32[$100>>2] = $2975;
                HEAP32[$101>>2] = $2975;
                $2977 = ($2975|0)<(0|0);
                $2978 = ((($2974)) + -2147483648|0);
                $$sink$i175$i = $2977 ? (-1) : $2978;
                HEAP32[$102>>2] = $$sink$i175$i;
                HEAP32[$103>>2] = -1;
                HEAP32[$104>>2] = 0;
                $2979 = $$sink$i175$i;
                $2980 = $2975;
                $2981 = (($2979) - ($2980))|0;
                HEAP32[$105>>2] = $2981;
                HEAP32[$106>>2] = $2979;
                $2982 = (___intscan($f$i174$i,0,1,-1,0)|0);
                $2983 = tempRet0;
                $2984 = HEAP32[$105>>2]|0;
                $2985 = HEAP32[$100>>2]|0;
                $2986 = HEAP32[$102>>2]|0;
                $2987 = (($2985) + ($2984))|0;
                $2988 = (($2987) - ($2986))|0;
                $2989 = (($2975) + ($2988)|0);
                $2990 = $2989;
                if (!($2960)) {
                 label = 604;
                 break;
                }
                $2991 = (_realloc($2973,$2972)|0);
                $2992 = ($2991|0)==(0|0);
                if ($2992) {
                 $q$i$sroa$0$4 = $2990;
                } else {
                 label = 603;
                 break;
                }
               }
               if ((label|0) == 603) {
                label = 0;
                $2993 = $2982&65535;
                $2994 = $2991;
                $2998 = $2993;$str$i$sroa$126$53 = $2972;$str$i$sroa$199$53 = $2994;
               }
               else if ((label|0) == 604) {
                label = 0;
                $2995 = $2982&65535;
                $2998 = $2995;$str$i$sroa$126$53 = $str$i$sroa$126$52$ph;$str$i$sroa$199$53 = $str$i$sroa$199$52$ph;
               }
               $2996 = $str$i$sroa$199$53;
               $2997 = (($2996) + ($str$i$sroa$0$21$ph)|0);
               HEAP8[$2997>>0]=$2998&255;HEAP8[$2997+1>>0]=$2998>>8;
               $q$i$sroa$0$4$ph = $2990;$str$i$sroa$0$21$ph = $2959;$str$i$sroa$126$52$ph = $str$i$sroa$126$53;$str$i$sroa$199$52$ph = $str$i$sroa$199$53;
              }
              break;
             }
             case 105:  {
              $q$i$sroa$0$5$ph = $2786;$str$i$sroa$0$22$ph = $str$i$sroa$0$17;$str$i$sroa$126$54$ph = $str$i$sroa$126$45;$str$i$sroa$199$54$ph = $str$i$sroa$199$45;
              while(1) {
               $2999 = (($str$i$sroa$0$22$ph) + 4)|0;
               $3000 = ($str$i$sroa$126$54$ph>>>0)<($2999>>>0);
               $3001 = (($str$i$sroa$0$22$ph) + 3)|0;
               $3002 = $3001 >>> 1;
               $3003 = $3001 | $3002;
               $3004 = $3003 >>> 2;
               $3005 = $3003 | $3004;
               $3006 = $3005 >>> 4;
               $3007 = $3005 | $3006;
               $3008 = $3007 >>> 8;
               $3009 = $3007 | $3008;
               $3010 = $3009 >>> 16;
               $3011 = $3009 | $3010;
               $3012 = (($3011) + 1)|0;
               $3013 = $str$i$sroa$199$54$ph;
               $q$i$sroa$0$5 = $q$i$sroa$0$5$ph;
               while(1) {
                $3014 = $q$i$sroa$0$5;
                $3015 = ((($3014)) + 1|0);
                $3016 = ($3014>>>0)<($2322>>>0);
                if (!($3016)) {
                 $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $str$i$sroa$0$22$ph;$str$i$sroa$126$7 = $str$i$sroa$126$54$ph;$str$i$sroa$199$7 = $str$i$sroa$199$54$ph;
                 continue L634;
                }
                HEAP32[$f$i63$i>>2] = 0;
                HEAP32[$93>>2] = $3015;
                HEAP32[$94>>2] = $3015;
                $3017 = ($3015|0)<(0|0);
                $3018 = ((($3014)) + -2147483648|0);
                $$sink$i64$i = $3017 ? (-1) : $3018;
                HEAP32[$95>>2] = $$sink$i64$i;
                HEAP32[$96>>2] = -1;
                HEAP32[$97>>2] = 0;
                $3019 = $$sink$i64$i;
                $3020 = $3015;
                $3021 = (($3019) - ($3020))|0;
                HEAP32[$98>>2] = $3021;
                HEAP32[$99>>2] = $3019;
                $3022 = (___intscan($f$i63$i,0,1,-2147483648,0)|0);
                $3023 = tempRet0;
                $3024 = HEAP32[$98>>2]|0;
                $3025 = HEAP32[$93>>2]|0;
                $3026 = HEAP32[$95>>2]|0;
                $3027 = (($3025) + ($3024))|0;
                $3028 = (($3027) - ($3026))|0;
                $3029 = (($3015) + ($3028)|0);
                $3030 = $3029;
                if (!($3000)) {
                 label = 611;
                 break;
                }
                $3031 = (_realloc($3013,$3012)|0);
                $3032 = ($3031|0)==(0|0);
                if ($3032) {
                 $q$i$sroa$0$5 = $3030;
                } else {
                 label = 610;
                 break;
                }
               }
               if ((label|0) == 610) {
                label = 0;
                $3033 = $3031;
                $3036 = $3022;$str$i$sroa$126$55 = $3012;$str$i$sroa$199$55 = $3033;
               }
               else if ((label|0) == 611) {
                label = 0;
                $3036 = $3022;$str$i$sroa$126$55 = $str$i$sroa$126$54$ph;$str$i$sroa$199$55 = $str$i$sroa$199$54$ph;
               }
               $3034 = $str$i$sroa$199$55;
               $3035 = (($3034) + ($str$i$sroa$0$22$ph)|0);
               HEAP8[$3035>>0]=$3036&255;HEAP8[$3035+1>>0]=($3036>>8)&255;HEAP8[$3035+2>>0]=($3036>>16)&255;HEAP8[$3035+3>>0]=$3036>>24;
               $q$i$sroa$0$5$ph = $3030;$str$i$sroa$0$22$ph = $2999;$str$i$sroa$126$54$ph = $str$i$sroa$126$55;$str$i$sroa$199$54$ph = $str$i$sroa$199$55;
              }
              break;
             }
             case 73:  {
              $q$i$sroa$0$6$ph = $2786;$str$i$sroa$0$23$ph = $str$i$sroa$0$17;$str$i$sroa$126$56$ph = $str$i$sroa$126$45;$str$i$sroa$199$56$ph = $str$i$sroa$199$45;
              while(1) {
               $3037 = (($str$i$sroa$0$23$ph) + 4)|0;
               $3038 = ($str$i$sroa$126$56$ph>>>0)<($3037>>>0);
               $3039 = (($str$i$sroa$0$23$ph) + 3)|0;
               $3040 = $3039 >>> 1;
               $3041 = $3039 | $3040;
               $3042 = $3041 >>> 2;
               $3043 = $3041 | $3042;
               $3044 = $3043 >>> 4;
               $3045 = $3043 | $3044;
               $3046 = $3045 >>> 8;
               $3047 = $3045 | $3046;
               $3048 = $3047 >>> 16;
               $3049 = $3047 | $3048;
               $3050 = (($3049) + 1)|0;
               $3051 = $str$i$sroa$199$56$ph;
               $q$i$sroa$0$6 = $q$i$sroa$0$6$ph;
               while(1) {
                $3052 = $q$i$sroa$0$6;
                $3053 = ((($3052)) + 1|0);
                $3054 = ($3052>>>0)<($2322>>>0);
                if (!($3054)) {
                 $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $str$i$sroa$0$23$ph;$str$i$sroa$126$7 = $str$i$sroa$126$56$ph;$str$i$sroa$199$7 = $str$i$sroa$199$56$ph;
                 continue L634;
                }
                HEAP32[$f$i41$i>>2] = 0;
                HEAP32[$86>>2] = $3053;
                HEAP32[$87>>2] = $3053;
                $3055 = ($3053|0)<(0|0);
                $3056 = ((($3052)) + -2147483648|0);
                $$sink$i42$i = $3055 ? (-1) : $3056;
                HEAP32[$88>>2] = $$sink$i42$i;
                HEAP32[$89>>2] = -1;
                HEAP32[$90>>2] = 0;
                $3057 = $$sink$i42$i;
                $3058 = $3053;
                $3059 = (($3057) - ($3058))|0;
                HEAP32[$91>>2] = $3059;
                HEAP32[$92>>2] = $3057;
                $3060 = (___intscan($f$i41$i,0,1,-1,0)|0);
                $3061 = tempRet0;
                $3062 = HEAP32[$91>>2]|0;
                $3063 = HEAP32[$86>>2]|0;
                $3064 = HEAP32[$88>>2]|0;
                $3065 = (($3063) + ($3062))|0;
                $3066 = (($3065) - ($3064))|0;
                $3067 = (($3053) + ($3066)|0);
                $3068 = $3067;
                if (!($3038)) {
                 label = 618;
                 break;
                }
                $3069 = (_realloc($3051,$3050)|0);
                $3070 = ($3069|0)==(0|0);
                if ($3070) {
                 $q$i$sroa$0$6 = $3068;
                } else {
                 label = 617;
                 break;
                }
               }
               if ((label|0) == 617) {
                label = 0;
                $3071 = $3069;
                $3074 = $3060;$str$i$sroa$126$57 = $3050;$str$i$sroa$199$57 = $3071;
               }
               else if ((label|0) == 618) {
                label = 0;
                $3074 = $3060;$str$i$sroa$126$57 = $str$i$sroa$126$56$ph;$str$i$sroa$199$57 = $str$i$sroa$199$56$ph;
               }
               $3072 = $str$i$sroa$199$57;
               $3073 = (($3072) + ($str$i$sroa$0$23$ph)|0);
               HEAP8[$3073>>0]=$3074&255;HEAP8[$3073+1>>0]=($3074>>8)&255;HEAP8[$3073+2>>0]=($3074>>16)&255;HEAP8[$3073+3>>0]=$3074>>24;
               $q$i$sroa$0$6$ph = $3068;$str$i$sroa$0$23$ph = $3037;$str$i$sroa$126$56$ph = $str$i$sroa$126$57;$str$i$sroa$199$56$ph = $str$i$sroa$199$57;
              }
              break;
             }
             case 102:  {
              $q$i$sroa$0$7$ph = $2786;$str$i$sroa$0$24$ph = $str$i$sroa$0$17;$str$i$sroa$126$58$ph = $str$i$sroa$126$45;$str$i$sroa$199$58$ph = $str$i$sroa$199$45;
              while(1) {
               $3075 = (($str$i$sroa$0$24$ph) + 4)|0;
               $3076 = ($str$i$sroa$126$58$ph>>>0)<($3075>>>0);
               $3077 = (($str$i$sroa$0$24$ph) + 3)|0;
               $3078 = $3077 >>> 1;
               $3079 = $3077 | $3078;
               $3080 = $3079 >>> 2;
               $3081 = $3079 | $3080;
               $3082 = $3081 >>> 4;
               $3083 = $3081 | $3082;
               $3084 = $3083 >>> 8;
               $3085 = $3083 | $3084;
               $3086 = $3085 >>> 16;
               $3087 = $3085 | $3086;
               $3088 = (($3087) + 1)|0;
               $3089 = $str$i$sroa$199$58$ph;
               $q$i$sroa$0$7 = $q$i$sroa$0$7$ph;
               while(1) {
                $3090 = $q$i$sroa$0$7;
                $3091 = ((($3090)) + 1|0);
                $3092 = ($3090>>>0)<($2322>>>0);
                if (!($3092)) {
                 $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $str$i$sroa$0$24$ph;$str$i$sroa$126$7 = $str$i$sroa$126$58$ph;$str$i$sroa$199$7 = $str$i$sroa$199$58$ph;
                 continue L634;
                }
                dest=$f$i$i$i; stop=dest+108|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
                HEAP32[$79>>2] = $3091;
                HEAP32[$80>>2] = (-1);
                HEAP32[$81>>2] = $3091;
                HEAP32[$82>>2] = -1;
                HEAP32[$83>>2] = 0;
                $3093 = $3091;
                $3094 = $3093 ^ -1;
                HEAP32[$84>>2] = $3094;
                HEAP32[$85>>2] = -1;
                $3095 = (+___floatscan($f$i$i$i,1,1));
                $3096 = HEAP32[$84>>2]|0;
                $3097 = HEAP32[$79>>2]|0;
                $3098 = HEAP32[$80>>2]|0;
                $3099 = (($3097) - ($3098))|0;
                $3100 = (($3099) + ($3096))|0;
                $3101 = ($3100|0)!=(0);
                $3102 = (($3091) + ($3100)|0);
                $3103 = $3101 ? $3102 : $3091;
                $3104 = $3103;
                if (!($3076)) {
                 $str$i$sroa$126$59 = $str$i$sroa$126$58$ph;$str$i$sroa$199$59 = $str$i$sroa$199$58$ph;
                 break;
                }
                $3105 = (_realloc($3089,$3088)|0);
                $3106 = ($3105|0)==(0|0);
                if ($3106) {
                 $q$i$sroa$0$7 = $3104;
                } else {
                 label = 624;
                 break;
                }
               }
               if ((label|0) == 624) {
                label = 0;
                $3107 = $3105;
                $str$i$sroa$126$59 = $3088;$str$i$sroa$199$59 = $3107;
               }
               $$in = $3095;
               $3108 = $str$i$sroa$199$59;
               $3109 = (($3108) + ($str$i$sroa$0$24$ph)|0);
               HEAPF32[tempDoublePtr>>2]=$$in;HEAP8[$3109>>0]=HEAP8[tempDoublePtr>>0];HEAP8[$3109+1>>0]=HEAP8[tempDoublePtr+1>>0];HEAP8[$3109+2>>0]=HEAP8[tempDoublePtr+2>>0];HEAP8[$3109+3>>0]=HEAP8[tempDoublePtr+3>>0];
               $q$i$sroa$0$7$ph = $3104;$str$i$sroa$0$24$ph = $3075;$str$i$sroa$126$58$ph = $str$i$sroa$126$59;$str$i$sroa$199$58$ph = $str$i$sroa$199$59;
              }
              break;
             }
             default: {
              label = 626;
              break L634;
             }
             }
             break;
            }
            default: {
             label = 627;
             break L634;
            }
            }
           }
           }
           $2740 = (($str$i$sroa$0$4) + 1)|0;
           $2741 = ($str$i$sroa$126$9>>>0)<($2740>>>0);
           do {
            if ($2741) {
             $2742 = $str$i$sroa$0$4 >>> 1;
             $2743 = $str$i$sroa$0$4 | $2742;
             $2744 = $2743 >>> 2;
             $2745 = $2743 | $2744;
             $2746 = $2745 >>> 4;
             $2747 = $2745 | $2746;
             $2748 = $2747 >>> 8;
             $2749 = $2747 | $2748;
             $2750 = $2749 >>> 16;
             $2751 = $2749 | $2750;
             $2752 = (($2751) + 1)|0;
             $2753 = $str$i$sroa$199$9;
             $2754 = (_realloc($2753,$2752)|0);
             $2755 = ($2754|0)==(0|0);
             if ($2755) {
              $str$i$sroa$0$14 = $str$i$sroa$0$4;$str$i$sroa$126$38 = $str$i$sroa$126$9;$str$i$sroa$199$38 = $str$i$sroa$199$9;
              break;
             }
             $2756 = $2754;
             $str$i$sroa$126$37 = $2752;$str$i$sroa$199$37 = $2756;
             label = 556;
            } else {
             $str$i$sroa$126$37 = $str$i$sroa$126$9;$str$i$sroa$199$37 = $str$i$sroa$199$9;
             label = 556;
            }
           } while(0);
           if ((label|0) == 556) {
            label = 0;
            $2757 = $str$i$sroa$199$37;
            $2758 = (($2757) + ($str$i$sroa$0$4)|0);
            HEAP8[$2758>>0] = $2353;
            $str$i$sroa$0$14 = $2740;$str$i$sroa$126$38 = $str$i$sroa$126$37;$str$i$sroa$199$38 = $str$i$sroa$199$37;
           }
           $$cast2$i = $2354;
           $2759 = (($2327) - ($$cast2$i))|0;
           $2760 = (($str$i$sroa$0$14) + ($2759))|0;
           $2761 = ($str$i$sroa$126$38>>>0)<($2760>>>0);
           if ($2761) {
            $2762 = (($2760) + -1)|0;
            $2763 = $2762 >>> 1;
            $2764 = $2762 | $2763;
            $2765 = $2764 >>> 2;
            $2766 = $2764 | $2765;
            $2767 = $2766 >>> 4;
            $2768 = $2766 | $2767;
            $2769 = $2768 >>> 8;
            $2770 = $2768 | $2769;
            $2771 = $2770 >>> 16;
            $2772 = $2770 | $2771;
            $2773 = (($2772) + 1)|0;
            $2774 = $str$i$sroa$199$38;
            $2775 = (_realloc($2774,$2773)|0);
            $2776 = ($2775|0)==(0|0);
            if ($2776) {
             $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $str$i$sroa$0$14;$str$i$sroa$126$7 = $str$i$sroa$126$38;$str$i$sroa$199$7 = $str$i$sroa$199$38;
             continue;
            }
            $2777 = $2775;
            $str$i$sroa$126$39 = $2773;$str$i$sroa$199$39 = $2777;
           } else {
            $str$i$sroa$126$39 = $str$i$sroa$126$38;$str$i$sroa$199$39 = $str$i$sroa$199$38;
           }
           $2778 = $str$i$sroa$199$39;
           $2779 = (($2778) + ($str$i$sroa$0$14)|0);
           _memcpy(($2779|0),($2354|0),($2759|0))|0;
           $p$i$sroa$0$8 = $2327;$str$i$sroa$0$3 = $2760;$str$i$sroa$126$7 = $str$i$sroa$126$39;$str$i$sroa$199$7 = $str$i$sroa$199$39;
          }
          if ((label|0) == 465) {
           label = 0;
           HEAP32[$vararg_buffer46>>2] = 16158;
           _fprintf(9772,16754,$vararg_buffer46);
           $storemerge$ph = $str$i$sroa$126$7;$storemerge789$ph = $str$i$sroa$0$3;$storemerge796$ph = $str$i$sroa$199$7;
           break;
          }
          else if ((label|0) == 473) {
           label = 0;
           HEAP32[$vararg_buffer49>>2] = 16158;
           _fprintf(9772,16754,$vararg_buffer49);
           $storemerge$ph = $str$i$sroa$126$9;$storemerge789$ph = $str$i$sroa$0$4;$storemerge796$ph = $str$i$sroa$199$9;
           break;
          }
          else if ((label|0) == 552) {
           label = 0;
           HEAP32[$vararg_buffer52>>2] = 16158;
           _fprintf(9772,16784,$vararg_buffer52);
           $storemerge$ph = $str$i$sroa$126$9;$storemerge789$ph = $str$i$sroa$0$4;$storemerge796$ph = $str$i$sroa$199$9;
           break;
          }
          else if ((label|0) == 562) {
           label = 0;
           HEAP32[$vararg_buffer55>>2] = 16158;
           _fprintf(9772,16842,$vararg_buffer55);
           $storemerge$ph = $str$i$sroa$126$9;$storemerge789$ph = $str$i$sroa$0$4;$storemerge796$ph = $str$i$sroa$199$9;
           break;
          }
          else if ((label|0) == 626) {
           label = 0;
           HEAP32[$vararg_buffer58>>2] = 16158;
           _fprintf(9772,16880,$vararg_buffer58);
           $storemerge$ph = $str$i$sroa$126$45;$storemerge789$ph = $str$i$sroa$0$17;$storemerge796$ph = $str$i$sroa$199$45;
           break;
          }
          else if ((label|0) == 627) {
           label = 0;
           HEAP32[$vararg_buffer61>>2] = 16158;
           _fprintf(9772,16880,$vararg_buffer61);
           $storemerge$ph = $str$i$sroa$126$9;$storemerge789$ph = $str$i$sroa$0$4;$storemerge796$ph = $str$i$sroa$199$9;
           break;
          }
         } else {
          $storemerge$ph = $str$i$sroa$126$3;$storemerge789$ph = $str$i$sroa$0$1;$storemerge796$ph = $str$i$sroa$199$3;
         }
        } else {
         $storemerge$ph = $str$i$sroa$126$3;$storemerge789$ph = $str$i$sroa$0$1;$storemerge796$ph = $str$i$sroa$199$3;
        }
       } else {
        $storemerge$ph = $str$i$sroa$126$1;$storemerge789$ph = $str$i$sroa$0$0;$storemerge796$ph = $str$i$sroa$199$1;
       }
      } else {
       $storemerge$ph = $str$i$sroa$126$1;$storemerge789$ph = $str$i$sroa$0$0;$storemerge796$ph = $str$i$sroa$199$1;
      }
     } else {
      $storemerge$ph = $str$i$sroa$126$1;$storemerge789$ph = $str$i$sroa$0$0;$storemerge796$ph = $str$i$sroa$199$1;
     }
    }
   } while(0);
   HEAP32[$7>>2] = $storemerge796$ph;
   HEAP32[$6>>2] = $storemerge789$ph;
   HEAP32[$8>>2] = $storemerge$ph;
   HEAP32[$4>>2] = 0;
   $3110 = $3;
   $3111 = $3110;
   $3112 = HEAP32[$3111>>2]|0;
   $3113 = (($3110) + 4)|0;
   $3114 = $3113;
   $3115 = HEAP32[$3114>>2]|0;
   HEAP32[$vararg_buffer64>>2] = 16941;
   $vararg_ptr67 = ((($vararg_buffer64)) + 8|0);
   $3116 = $vararg_ptr67;
   $3117 = $3116;
   HEAP32[$3117>>2] = $3112;
   $3118 = (($3116) + 4)|0;
   $3119 = $3118;
   HEAP32[$3119>>2] = $3115;
   _fprintf(9772,16907,$vararg_buffer64);
   $3120 = HEAP32[$135>>2]|0;
   $3121 = ($3120|0)==(0);
   if ($3121) {
    $$0 = -2;
    label = 631;
    break;
   }
  }
  if ((label|0) == 628) {
   HEAP32[$7>>2] = $storemerge796;
   HEAP32[$6>>2] = $storemerge789;
   HEAP32[$8>>2] = $storemerge;
   HEAP32[$4>>2] = 0;
   $$0 = $$0$i11;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 631) {
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 default: {
  _abort();
  // unreachable;
 }
 }
 return (0)|0;
}
function _bam_aux_get($b,$tag$val,$tag$1$val) {
 $b = $b|0;
 $tag$val = $tag$val|0;
 $tag$1$val = $tag$1$val|0;
 var $$0 = 0, $$0$i$i1 = 0, $$0$i2$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $tag$val << 24 >> 24;
 $1 = $0 << 8;
 $2 = $tag$1$val << 24 >> 24;
 $3 = $1 | $2;
 $4 = ((($b)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($b)) + 8|0);
 $7 = $6;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (_bitshift64Lshr(($9|0),($12|0),46)|0);
 $14 = tempRet0;
 $15 = $13 & 262140;
 $16 = (($5) + ($15)|0);
 $17 = (_bitshift64Lshr(($9|0),($12|0),24)|0);
 $18 = tempRet0;
 $19 = $17 & 255;
 $20 = (($16) + ($19)|0);
 $21 = ((($b)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 1)|0;
 $24 = $23 >> 1;
 $25 = (($20) + ($24)|0);
 $26 = (($25) + ($22)|0);
 $27 = ((($b)) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($5) + ($28)|0);
 $s$0 = $26;
 L1: while(1) {
  $30 = ($s$0>>>0)<($29>>>0);
  if (!($30)) {
   $$0 = 0;
   label = 19;
   break;
  }
  $31 = HEAP8[$s$0>>0]|0;
  $32 = $31&255;
  $33 = $32 << 8;
  $34 = ((($s$0)) + 1|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = $33 | $36;
  $38 = ((($s$0)) + 2|0);
  $39 = ($37|0)==($3|0);
  if ($39) {
   $$0 = $38;
   label = 19;
   break;
  }
  $40 = HEAP8[$38>>0]|0;
  $41 = $40&255;
  L5: do {
   switch ($41|0) {
   case 67: case 99: case 65:  {
    $$0$i$i1 = 1;
    break;
   }
   case 83: case 115:  {
    $$0$i$i1 = 2;
    break;
   }
   case 102: case 73: case 105:  {
    $$0$i$i1 = 4;
    break;
   }
   case 100:  {
    $$0$i$i1 = 8;
    break;
   }
   case 66: case 72: case 90:  {
    $42 = ((($s$0)) + 3|0);
    switch ($41|0) {
    case 0:  {
     label = 17;
     break L1;
     break;
    }
    case 72: case 90:  {
     $$01$i = $42;
     while(1) {
      $43 = HEAP8[$$01$i>>0]|0;
      $44 = ($43<<24>>24)==(0);
      $45 = ((($$01$i)) + 1|0);
      if ($44) {
       $s$0 = $45;
       continue L1;
      } else {
       $$01$i = $45;
      }
     }
     break;
    }
    case 66:  {
     break;
    }
    default: {
     $$0$i$i1 = $41;
     break L5;
    }
    }
    $46 = HEAP8[$42>>0]|0;
    $47 = $46&255;
    switch ($47|0) {
    case 67: case 99: case 65:  {
     $$0$i2$i = 1;
     break;
    }
    case 83: case 115:  {
     $$0$i2$i = 2;
     break;
    }
    case 102: case 73: case 105:  {
     $$0$i2$i = 4;
     break;
    }
    case 100:  {
     $$0$i2$i = 8;
     break;
    }
    case 66: case 72: case 90:  {
     $$0$i2$i = $47;
     break;
    }
    default: {
     $$0$i2$i = 0;
    }
    }
    $48 = ((($s$0)) + 4|0);
    $49 = HEAPU8[$48>>0]|(HEAPU8[$48+1>>0]<<8)|(HEAPU8[$48+2>>0]<<16)|(HEAPU8[$48+3>>0]<<24);
    $50 = ((($s$0)) + 8|0);
    $51 = Math_imul($$0$i2$i, $49)|0;
    $52 = (($50) + ($51)|0);
    $s$0 = $52;
    continue L1;
    break;
   }
   default: {
    label = 17;
    break L1;
   }
   }
  } while(0);
  $53 = ((($s$0)) + 3|0);
  $54 = (($53) + ($$0$i$i1)|0);
  $s$0 = $54;
 }
 if ((label|0) == 17) {
  _abort();
  // unreachable;
 }
 else if ((label|0) == 19) {
  return ($$0|0);
 }
 return (0)|0;
}
function _hts_tpool_next_result_locked($q) {
 $q = $q|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $last$0 = 0, $or$cond = 0, $r$0 = 0, $r$0$in = 0, $r$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($q)) + 12|0);
 $1 = ((($q)) + 24|0);
 $last$0 = 0;$r$0$in = $0;
 while(1) {
  $r$0 = HEAP32[$r$0$in>>2]|0;
  $2 = ($r$0|0)==(0|0);
  if ($2) {
   $r$03 = 0;
   label = 15;
   break;
  }
  $3 = ((($r$0)) + 8|0);
  $4 = $3;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = $1;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($10) + 4)|0;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($6|0)==($12|0);
  $17 = ($9|0)==($15|0);
  $18 = $16 & $17;
  if ($18) {
   break;
  }
  $last$0 = $r$0;$r$0$in = $r$0;
 }
 if ((label|0) == 15) {
  return ($r$03|0);
 }
 $19 = HEAP32[$0>>2]|0;
 $20 = ($19|0)==($r$0|0);
 $21 = HEAP32[$r$0>>2]|0;
 if ($20) {
  HEAP32[$0>>2] = $21;
 } else {
  HEAP32[$last$0>>2] = $21;
 }
 $22 = ((($q)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==($r$0|0);
 if ($24) {
  HEAP32[$22>>2] = $last$0;
 }
 $25 = HEAP32[$0>>2]|0;
 $26 = ($25|0)==(0|0);
 if ($26) {
  HEAP32[$22>>2] = 0;
 }
 $27 = $1;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (_i64Add(($29|0),($32|0),1,0)|0);
 $34 = tempRet0;
 $35 = $1;
 $36 = $35;
 HEAP32[$36>>2] = $33;
 $37 = (($35) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = $34;
 $39 = ((($q)) + 44|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + -1)|0;
 HEAP32[$39>>2] = $41;
 $42 = ((($q)) + 20|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(0);
 $45 = ($40|0)>($43|0);
 $or$cond = $44 | $45;
 if ($or$cond) {
  $r$03 = $r$0;
  return ($r$03|0);
 }
 $46 = ((($q)) + 116|0);
 (_pthread_cond_signal(($46|0))|0);
 $47 = ((($q)) + 52|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)==(0);
 if (!($49)) {
  $r$03 = $r$0;
  return ($r$03|0);
 }
 _wake_next_worker($q);
 $r$03 = $r$0;
 return ($r$03|0);
}
function _wake_next_worker($q) {
 $q = $q|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$q>>2]|0;
 $1 = ((($q)) + 264|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  ___assert_fail((16951|0),(16970|0),580,(16984|0));
  // unreachable;
 }
 $4 = ((($q)) + 260|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  ___assert_fail((16951|0),(16970|0),580,(16984|0));
  // unreachable;
 }
 $7 = ((($0)) + 12|0);
 HEAP32[$7>>2] = $q;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($q)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)<($11|0);
 if ($12) {
  ___assert_fail((17001|0),(16970|0),594,(16984|0));
  // unreachable;
 }
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>(-1);
 if (!($15)) {
  return;
 }
 $16 = ((($0)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$0>>2]|0;
 $19 = (($17) - ($18))|0;
 $20 = ($9|0)>($19|0);
 if (!($20)) {
  return;
 }
 $21 = ((($q)) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($q)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($q)) + 44|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) - ($26))|0;
 $28 = ($22|0)<($27|0);
 if (!($28)) {
  return;
 }
 $29 = ((($0)) + 20|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (((($30) + (($14*60)|0)|0)) + 12|0);
 (_pthread_cond_signal(($31|0))|0);
 return;
}
function _hts_tpool_next_result_wait($q) {
 $q = $q|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $now = 0, $timeout = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $now = sp + 8|0;
 $timeout = sp;
 $0 = HEAP32[$q>>2]|0;
 $1 = ((($0)) + 32|0);
 (_pthread_mutex_lock(($1|0))|0);
 $2 = ((($now)) + 4|0);
 $3 = ((($timeout)) + 4|0);
 $4 = ((($q)) + 64|0);
 $5 = ((($q)) + 68|0);
 $6 = ((($q)) + 52|0);
 while(1) {
  $7 = (_hts_tpool_next_result_locked($q)|0);
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   label = 6;
   break;
  }
  (_gettimeofday(($now|0),(0|0))|0);
  $9 = HEAP32[$now>>2]|0;
  $10 = (($9) + 10)|0;
  HEAP32[$timeout>>2] = $10;
  $11 = HEAP32[$2>>2]|0;
  $12 = ($11*1000)|0;
  HEAP32[$3>>2] = $12;
  $13 = HEAP32[$4>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$4>>2] = $14;
  $15 = HEAP32[$q>>2]|0;
  $16 = ((($15)) + 32|0);
  (_pthread_cond_timedwait(($5|0),($16|0),($timeout|0))|0);
  $17 = HEAP32[$6>>2]|0;
  $18 = ($17|0)==(0);
  $19 = HEAP32[$4>>2]|0;
  $20 = (($19) + -1)|0;
  HEAP32[$4>>2] = $20;
  if (!($18)) {
   break;
  }
 }
 if ((label|0) == 6) {
  $24 = HEAP32[$q>>2]|0;
  $25 = ((($24)) + 32|0);
  (_pthread_mutex_unlock(($25|0))|0);
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = HEAP32[$q>>2]|0;
 $22 = ((($21)) + 32|0);
 (_pthread_mutex_unlock(($22|0))|0);
 $23 = ($20|0)==(0);
 if (!($23)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _hts_tpool_process_destroy($q);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _hts_tpool_process_destroy($q) {
 $q = $q|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $curr$0$i = 0, $j$0$i = 0, $r$0$i = 0, $r$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($q|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$q>>2]|0;
 $2 = ((($1)) + 32|0);
 (_pthread_mutex_lock(($2|0))|0);
 $3 = ((($q)) + 24|0);
 $4 = $3;
 $5 = $4;
 HEAP32[$5>>2] = 2147483647;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($q)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $j$0$i = $9;
 while(1) {
  $10 = ($j$0$i|0)==(0|0);
  if ($10) {
   break;
  }
  $11 = ((($j$0$i)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  _free($j$0$i);
  $j$0$i = $12;
 }
 $13 = ((($q)) + 8|0);
 HEAP32[$13>>2] = 0;
 HEAP32[$8>>2] = 0;
 $14 = ((($q)) + 40|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($q)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $r$0$i = $16;
 while(1) {
  $17 = ($r$0$i|0)==(0|0);
  if ($17) {
   break;
  }
  $18 = HEAP32[$r$0$i>>2]|0;
  _free($r$0$i);
  $r$0$i = $18;
 }
 $19 = ((($q)) + 16|0);
 HEAP32[$19>>2] = 0;
 HEAP32[$15>>2] = 0;
 $20 = ((($q)) + 44|0);
 HEAP32[$20>>2] = 0;
 $21 = HEAP32[$q>>2]|0;
 $22 = ((($21)) + 32|0);
 (_pthread_mutex_unlock(($22|0))|0);
 _hts_tpool_process_flush($q);
 $23 = HEAP32[$q>>2]|0;
 $24 = ((($23)) + 32|0);
 (_pthread_mutex_lock(($24|0))|0);
 $25 = HEAP32[$15>>2]|0;
 $r$1$i = $25;
 while(1) {
  $26 = ($r$1$i|0)==(0|0);
  if ($26) {
   break;
  }
  $27 = HEAP32[$r$1$i>>2]|0;
  _free($r$1$i);
  $r$1$i = $27;
 }
 HEAP32[$19>>2] = 0;
 HEAP32[$15>>2] = 0;
 HEAP32[$20>>2] = 0;
 $28 = ((($q)) + 116|0);
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
 (_pthread_cond_signal(($28|0))|0);
 $29 = HEAP32[$q>>2]|0;
 $30 = ((($29)) + 32|0);
 (_pthread_mutex_unlock(($30|0))|0);
 $31 = HEAP32[$q>>2]|0;
 $32 = ((($31)) + 32|0);
 (_pthread_mutex_lock(($32|0))|0);
 $33 = HEAP32[$q>>2]|0;
 $34 = ((($33)) + 32|0);
 (_pthread_mutex_lock(($34|0))|0);
 $35 = ((($33)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 L16: do {
  if (!($37)) {
   $38 = ((($q)) + 264|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(0|0);
   $41 = $39;
   if (!($40)) {
    $42 = ((($q)) + 260|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43|0)==(0|0);
    if (!($44)) {
     $curr$0$i = $36;
     while(1) {
      $45 = ($curr$0$i|0)==($q|0);
      if ($45) {
       break;
      }
      $53 = ((($curr$0$i)) + 260|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = ($54|0)==($36|0);
      if ($55) {
       break L16;
      } else {
       $curr$0$i = $54;
      }
     }
     $46 = ((($43)) + 264|0);
     HEAP32[$46>>2] = $41;
     $47 = HEAP32[$42>>2]|0;
     $48 = HEAP32[$38>>2]|0;
     $49 = ((($48)) + 260|0);
     HEAP32[$49>>2] = $47;
     $50 = HEAP32[$42>>2]|0;
     HEAP32[$35>>2] = $50;
     HEAP32[$38>>2] = 0;
     HEAP32[$42>>2] = 0;
     $51 = HEAP32[$35>>2]|0;
     $52 = ($51|0)==($q|0);
     if ($52) {
      HEAP32[$35>>2] = 0;
     }
    }
   }
  }
 } while(0);
 (_pthread_mutex_unlock(($34|0))|0);
 $56 = HEAP32[$q>>2]|0;
 $57 = ((($56)) + 32|0);
 (_pthread_mutex_lock(($57|0))|0);
 $58 = ((($q)) + 52|0);
 HEAP32[$58>>2] = 1;
 $59 = ((($q)) + 68|0);
 (_pthread_cond_broadcast(($59|0))|0);
 (_pthread_cond_broadcast(($28|0))|0);
 $60 = ((($q)) + 164|0);
 (_pthread_cond_broadcast(($60|0))|0);
 $61 = ((($q)) + 212|0);
 (_pthread_cond_broadcast(($61|0))|0);
 $62 = HEAP32[$q>>2]|0;
 $63 = ((($62)) + 32|0);
 (_pthread_mutex_unlock(($63|0))|0);
 $64 = ((($q)) + 64|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) + -1)|0;
 HEAP32[$64>>2] = $66;
 $67 = ($65|0)>(1);
 if ($67) {
  $68 = HEAP32[$q>>2]|0;
  $69 = ((($68)) + 32|0);
  (_pthread_mutex_unlock(($69|0))|0);
  return;
 } else {
  (_pthread_cond_destroy(($59|0))|0);
  (_pthread_cond_destroy(($28|0))|0);
  (_pthread_cond_destroy(($60|0))|0);
  (_pthread_cond_destroy(($61|0))|0);
  $70 = HEAP32[$q>>2]|0;
  $71 = ((($70)) + 32|0);
  (_pthread_mutex_unlock(($71|0))|0);
  _free($q);
  return;
 }
}
function _hts_tpool_process_flush($q) {
 $q = $q|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$0 = 0, $or$cond = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$q>>2]|0;
 $1 = ((($0)) + 32|0);
 (_pthread_mutex_lock(($1|0))|0);
 $2 = ((($0)) + 16|0);
 $3 = ((($0)) + 24|0);
 $4 = ((($0)) + 20|0);
 $i$0 = 0;
 while(1) {
  $5 = HEAP32[$2>>2]|0;
  $6 = ($i$0|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$3>>2]|0;
  $8 = (($7) + ($i$0<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = HEAP32[$4>>2]|0;
   $12 = (((($11) + (($i$0*60)|0)|0)) + 12|0);
   (_pthread_cond_signal(($12|0))|0);
  }
  $13 = (($i$0) + 1)|0;
  $i$0 = $13;
 }
 $14 = ((($q)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($q)) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($q)) + 40|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + ($19))|0;
 $21 = ((($q)) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + ($22))|0;
 $24 = ($15|0)<($23|0);
 if ($24) {
  HEAP32[$14>>2] = $23;
 }
 $25 = ((($q)) + 52|0);
 $26 = ((($q)) + 164|0);
 $27 = ((($q)) + 212|0);
 $phitmp = ($22|0)!=(0);
 $29 = $19;$30 = $phitmp;
 while(1) {
  $28 = ($29|0)!=(0);
  $or$cond = $28 | $30;
  if ($or$cond) {
   $32 = $29;
  } else {
   label = 17;
   break;
  }
  while(1) {
   $31 = ($32|0)==(0);
   if ($31) {
    break;
   }
   (_pthread_cond_wait(($26|0),($1|0))|0);
   $$pre2 = HEAP32[$18>>2]|0;
   $32 = $$pre2;
  }
  $33 = HEAP32[$25>>2]|0;
  $34 = ($33|0)==(0);
  if (!($34)) {
   label = 17;
   break;
  }
  while(1) {
   $35 = HEAP32[$21>>2]|0;
   $36 = ($35|0)==(0);
   if ($36) {
    break;
   }
   (_pthread_cond_wait(($27|0),($1|0))|0);
  }
  $37 = HEAP32[$25>>2]|0;
  $38 = ($37|0)==(0);
  if (!($38)) {
   label = 17;
   break;
  }
  $$pre = HEAP32[$18>>2]|0;
  $29 = $$pre;$30 = 0;
 }
 if ((label|0) == 17) {
  (_pthread_mutex_unlock(($1|0))|0);
  return;
 }
}
function _hts_tpool_dispatch2($p,$q,$func,$arg,$nonblock) {
 $p = $p|0;
 $q = $q|0;
 $func = $func|0;
 $arg = $arg|0;
 $nonblock = $nonblock|0;
 var $$0 = 0, $$0$i = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 32|0);
 (_pthread_mutex_lock(($0|0))|0);
 $1 = ((($q)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($q)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)>=($4|0);
 $6 = ($nonblock|0)==(1);
 $or$cond = $5 & $6;
 if ($or$cond) {
  (_pthread_mutex_unlock(($0|0))|0);
  $7 = HEAP32[6773]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0$i = 27136;
  } else {
   $9 = (_pthread_self()|0);
   $10 = ((($9)) + 64|0);
   $11 = HEAP32[$10>>2]|0;
   $$0$i = $11;
  }
  HEAP32[$$0$i>>2] = 11;
  $$0 = -1;
  return ($$0|0);
 }
 $12 = (_malloc(32)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $$0 = -1;
  return ($$0|0);
 }
 HEAP32[$12>>2] = $func;
 $14 = ((($12)) + 4|0);
 HEAP32[$14>>2] = $arg;
 $15 = ((($12)) + 8|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($12)) + 12|0);
 HEAP32[$16>>2] = $p;
 $17 = ((($12)) + 16|0);
 HEAP32[$17>>2] = $q;
 $18 = ((($q)) + 32|0);
 $19 = $18;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (_i64Add(($21|0),($24|0),1,0)|0);
 $26 = tempRet0;
 $27 = $18;
 $28 = $27;
 HEAP32[$28>>2] = $25;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 $31 = ((($12)) + 24|0);
 $32 = $31;
 $33 = $32;
 HEAP32[$33>>2] = $21;
 $34 = (($32) + 4)|0;
 $35 = $34;
 HEAP32[$35>>2] = $24;
 $36 = ($nonblock|0)==(0);
 L11: do {
  if ($36) {
   $37 = ((($q)) + 52|0);
   $38 = ((($q)) + 60|0);
   $39 = ((($q)) + 116|0);
   while(1) {
    $40 = HEAP32[$1>>2]|0;
    $41 = HEAP32[$3>>2]|0;
    $42 = ($40|0)>=($41|0);
    $$pre = HEAP32[$37>>2]|0;
    $43 = ($$pre|0)==(0);
    $or$cond1 = $42 & $43;
    if (!($or$cond1)) {
     $49 = $$pre;
     label = 11;
     break;
    }
    $44 = HEAP32[$38>>2]|0;
    $45 = ($44|0)==(0);
    if (!($45)) {
     break;
    }
    $46 = HEAP32[$q>>2]|0;
    $47 = ((($46)) + 32|0);
    (_pthread_cond_wait(($39|0),($47|0))|0);
   }
   do {
    if ((label|0) == 11) {
     $48 = ($49|0)==(0);
     if ($48) {
      $$pr = HEAP32[$38>>2]|0;
      $50 = ($$pr|0)==(0);
      if ($50) {
       break L11;
      } else {
       break;
      }
     }
     (_pthread_mutex_unlock(($0|0))|0);
     $$0 = -1;
     return ($$0|0);
    }
   } while(0);
   HEAP32[$38>>2] = 0;
  }
 } while(0);
 $51 = ((($p)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + 1)|0;
 HEAP32[$51>>2] = $53;
 $54 = HEAP32[$1>>2]|0;
 $55 = (($54) + 1)|0;
 HEAP32[$1>>2] = $55;
 $56 = ((($q)) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)==(0|0);
 if ($58) {
  HEAP32[$56>>2] = $12;
  $60 = ((($q)) + 4|0);
  HEAP32[$60>>2] = $12;
 } else {
  $59 = ((($57)) + 8|0);
  HEAP32[$59>>2] = $12;
  HEAP32[$56>>2] = $12;
 }
 $61 = ((($q)) + 52|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)==(0);
 if ($63) {
  _wake_next_worker($q);
 }
 (_pthread_mutex_unlock(($0|0))|0);
 $$0 = 0;
 return ($$0|0);
}
function _hts_tpool_destroy($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 32|0);
 (_pthread_mutex_lock(($0|0))|0);
 $1 = ((($p)) + 8|0);
 HEAP32[$1>>2] = 1;
 $2 = ((($p)) + 16|0);
 $3 = ((($p)) + 20|0);
 $i$0 = 0;
 while(1) {
  $4 = HEAP32[$2>>2]|0;
  $5 = ($i$0|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$3>>2]|0;
  $7 = (((($6) + (($i$0*60)|0)|0)) + 12|0);
  (_pthread_cond_signal(($7|0))|0);
  $8 = (($i$0) + 1)|0;
  $i$0 = $8;
 }
 (_pthread_mutex_unlock(($0|0))|0);
 $i$1 = 0;
 while(1) {
  $9 = HEAP32[$2>>2]|0;
  $10 = ($i$1|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = HEAP32[$3>>2]|0;
  $12 = (((($11) + (($i$1*60)|0)|0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  (_pthread_join(($13|0),(0|0))|0);
  $14 = (($i$1) + 1)|0;
  $i$1 = $14;
 }
 (_pthread_mutex_destroy(($0|0))|0);
 $i$2 = 0;
 while(1) {
  $15 = HEAP32[$2>>2]|0;
  $16 = ($i$2|0)<($15|0);
  if (!($16)) {
   break;
  }
  $17 = HEAP32[$3>>2]|0;
  $18 = (((($17) + (($i$2*60)|0)|0)) + 12|0);
  (_pthread_cond_destroy(($18|0))|0);
  $19 = (($i$2) + 1)|0;
  $i$2 = $19;
 }
 $20 = ((($p)) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = HEAP32[$3>>2]|0;
  _free($23);
  _free($p);
  return;
 }
 _free($21);
 $23 = HEAP32[$3>>2]|0;
 _free($23);
 _free($p);
 return;
}
function _safe_itf8_get($cp,$endp,$val_p) {
 $cp = $cp|0;
 $endp = $endp|0;
 $val_p = $val_p|0;
 var $$0 = 0, $$masked = 0, $$masked1 = 0, $$masked2 = 0, $$masked3 = 0, $$masked4 = 0, $$masked5 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $endp;
 $1 = $cp;
 $2 = (($0) - ($1))|0;
 $3 = ($2|0)<(5);
 do {
  if ($3) {
   $4 = ($cp>>>0)<($endp>>>0);
   if ($4) {
    $5 = HEAP8[$cp>>0]|0;
    $6 = $5&255;
    $7 = $6 >>> 4;
    $8 = (376 + ($7<<2)|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($2|0)<($9|0);
    if (!($10)) {
     $12 = $5;
     break;
    }
   }
   HEAP32[$val_p>>2] = 0;
   $$0 = 0;
   return ($$0|0);
  } else {
   $$pre = HEAP8[$cp>>0]|0;
   $12 = $$pre;
  }
 } while(0);
 $11 = ($12<<24>>24)>(-1);
 if ($11) {
  $13 = $12&255;
  HEAP32[$val_p>>2] = $13;
  $$0 = 1;
  return ($$0|0);
 }
 $14 = ($12&255)<(192);
 if ($14) {
  $15 = $12&255;
  $16 = $15 << 8;
  $17 = ((($cp)) + 1|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $$masked5 = $16 & 16128;
  $20 = $$masked5 | $19;
  HEAP32[$val_p>>2] = $20;
  $$0 = 2;
  return ($$0|0);
 }
 $21 = ($12&255)<(224);
 if ($21) {
  $22 = $12&255;
  $23 = $22 << 16;
  $24 = ((($cp)) + 1|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $26 << 8;
  $28 = ((($cp)) + 2|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $$masked4 = $23 & 2031616;
  $$masked3 = $$masked4 | $27;
  $31 = $$masked3 | $30;
  HEAP32[$val_p>>2] = $31;
  $$0 = 3;
  return ($$0|0);
 }
 $32 = ($12&255)<(240);
 $33 = $12&255;
 if ($32) {
  $34 = $33 << 24;
  $35 = ((($cp)) + 1|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = $37 << 16;
  $39 = ((($cp)) + 2|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $41 << 8;
  $43 = ((($cp)) + 3|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $$masked2 = $34 & 251658240;
  $$masked1 = $$masked2 | $38;
  $$masked = $$masked1 | $42;
  $46 = $$masked | $45;
  HEAP32[$val_p>>2] = $46;
  $$0 = 4;
  return ($$0|0);
 } else {
  $47 = $33 << 28;
  $48 = ((($cp)) + 1|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = $50 << 20;
  $52 = $47 | $51;
  $53 = ((($cp)) + 2|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = $55 << 12;
  $57 = $52 | $56;
  $58 = ((($cp)) + 3|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = $60 << 4;
  $62 = $57 | $61;
  $63 = ((($cp)) + 4|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = $65 & 15;
  $67 = $62 | $66;
  HEAP32[$val_p>>2] = $67;
  $$0 = 5;
  return ($$0|0);
 }
 return (0)|0;
}
function _cram_decode_compression_header($fd,$b) {
 $fd = $fd|0;
 $b = $b|0;
 var $$$i$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i1 = 0, $$0$i$i103 = 0, $$0$i$i107 = 0, $$0$i$i11 = 0, $$0$i$i111 = 0, $$0$i$i115 = 0, $$0$i$i119 = 0, $$0$i$i15 = 0, $$0$i$i19 = 0, $$0$i$i23 = 0, $$0$i$i27 = 0, $$0$i$i3 = 0, $$0$i$i31 = 0, $$0$i$i35 = 0, $$0$i$i39 = 0, $$0$i$i43 = 0, $$0$i$i47 = 0;
 var $$0$i$i51 = 0, $$0$i$i55 = 0, $$0$i$i59 = 0, $$0$i$i63 = 0, $$0$i$i67 = 0, $$0$i$i7 = 0, $$0$i$i71 = 0, $$0$i$i75 = 0, $$0$i$i79 = 0, $$0$i$i83 = 0, $$0$i$i87 = 0, $$0$i$i91 = 0, $$0$i$i95 = 0, $$0$i$i99 = 0, $$lcssa = 0, $$lcssa263 = 0, $$mask = 0, $$ph = 0, $$pr = 0, $$pr650 = 0;
 var $$pre = 0, $$pre404 = 0, $$pre408 = 0, $$pre409 = 0, $$pre410 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0.0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $blk_size$i = 0, $cp$0 = 0, $cp$1 = 0, $cp$2 = 0, $cp$3 = 0, $cp$4 = 0, $cp$5 = 0;
 var $cp$6 = 0, $encoding = 0, $encoding1 = 0, $i$0 = 0, $i$0$i = 0, $i$1 = 0, $i$1$i = 0, $i$2 = 0, $i$2$i = 0, $i$3 = 0, $i$3$i = 0, $map_count = 0, $map_size = 0, $nTL$0$i = 0, $nTL$1$i = 0, $or$cond = 0, $or$cond628 = 0, $r = 0, $req$0$i$i = 0, $size = 0;
 var $size2 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer53 = 0, $vararg_buffer56 = 0;
 var $vararg_buffer59 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer68 = 0, $vararg_buffer71 = 0, $vararg_buffer74 = 0, $vararg_buffer77 = 0, $vararg_buffer8 = 0, $vararg_buffer80 = 0, $vararg_buffer83 = 0, $vararg_buffer86 = 0, $vararg_buffer89 = 0, $vararg_buffer92 = 0, $vararg_buffer95 = 0, $vararg_ptr1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer95 = sp + 256|0;
 $vararg_buffer92 = sp + 248|0;
 $vararg_buffer89 = sp + 240|0;
 $vararg_buffer86 = sp + 232|0;
 $vararg_buffer83 = sp + 224|0;
 $vararg_buffer80 = sp + 216|0;
 $vararg_buffer77 = sp + 208|0;
 $vararg_buffer74 = sp + 200|0;
 $vararg_buffer71 = sp + 192|0;
 $vararg_buffer68 = sp + 184|0;
 $vararg_buffer65 = sp + 176|0;
 $vararg_buffer62 = sp + 168|0;
 $vararg_buffer59 = sp + 160|0;
 $vararg_buffer56 = sp + 152|0;
 $vararg_buffer53 = sp + 144|0;
 $vararg_buffer50 = sp + 136|0;
 $vararg_buffer47 = sp + 128|0;
 $vararg_buffer44 = sp + 120|0;
 $vararg_buffer41 = sp + 112|0;
 $vararg_buffer38 = sp + 104|0;
 $vararg_buffer35 = sp + 96|0;
 $vararg_buffer32 = sp + 88|0;
 $vararg_buffer29 = sp + 80|0;
 $vararg_buffer26 = sp + 72|0;
 $vararg_buffer23 = sp + 64|0;
 $vararg_buffer20 = sp + 56|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $blk_size$i = sp + 288|0;
 $map_size = sp + 284|0;
 $map_count = sp + 280|0;
 $r = sp + 276|0;
 $encoding = sp + 272|0;
 $size = sp + 268|0;
 $encoding1 = sp + 264|0;
 $size2 = sp + 260|0;
 $0 = (_malloc(552)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$map_size>>2] = 0;
  HEAP32[$map_count>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((($0)) + -4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 3;
 $5 = ($4|0)==(0);
 if (!($5)) {
  _memset(($0|0),0,552)|0;
 }
 HEAP32[$map_size>>2] = 0;
 HEAP32[$map_count>>2] = 0;
 $6 = HEAP32[$b>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = (_cram_uncompress_block($b)|0);
  $9 = ($8|0)==(0);
  if (!($9)) {
   _free($0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $10 = ((($b)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($b)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + ($13)|0);
 $15 = ((($fd)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $$mask = $16 & -256;
 $17 = ($$mask|0)==(256);
 L13: do {
  if ($17) {
   $18 = (_safe_itf8_get($11,$14,$0)|0);
   $19 = (($11) + ($18)|0);
   $20 = ((($0)) + 4|0);
   $21 = (_safe_itf8_get($19,$14,$20)|0);
   $22 = (($19) + ($21)|0);
   $23 = ((($0)) + 8|0);
   $24 = (_safe_itf8_get($22,$14,$23)|0);
   $25 = (($22) + ($24)|0);
   $26 = ((($0)) + 12|0);
   $27 = (_safe_itf8_get($25,$14,$26)|0);
   $28 = (($25) + ($27)|0);
   $29 = ((($0)) + 16|0);
   $30 = (_safe_itf8_get($28,$14,$29)|0);
   $31 = HEAP32[$29>>2]|0;
   $32 = $31 << 2;
   $33 = (_malloc($32)|0);
   $34 = ((($0)) + 20|0);
   HEAP32[$34>>2] = $33;
   $35 = ($33|0)==(0|0);
   if ($35) {
    _free($0);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = (($28) + ($30)|0);
   $cp$0 = $36;$i$0 = 0;
   while(1) {
    $37 = HEAP32[$29>>2]|0;
    $38 = ($i$0|0)<($37|0);
    if (!($38)) {
     $cp$1 = $cp$0;
     break L13;
    }
    $39 = HEAP32[$34>>2]|0;
    $40 = (($39) + ($i$0<<2)|0);
    $41 = (_safe_itf8_get($cp$0,$14,$40)|0);
    $42 = (($cp$0) + ($41)|0);
    $43 = (($i$0) + 1)|0;
    $cp$0 = $42;$i$0 = $43;
   }
  } else {
   $cp$1 = $11;
  }
 } while(0);
 $44 = (_malloc(28)|0);
 $45 = ($44|0)==(0|0);
 if (!($45)) {
  $46 = ((($44)) + -4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $47 & 3;
  $49 = ($48|0)==(0);
  if (!($49)) {
   dest=$44; stop=dest+28|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  }
 }
 $50 = ((($0)) + 88|0);
 HEAP32[$50>>2] = $44;
 $51 = ((($0)) + 92|0);
 $52 = ((($0)) + 220|0);
 $53 = ($44|0)==(0|0);
 _memset(($51|0),0,256)|0;
 if ($53) {
  _cram_free_compression_header($0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $54 = ((($0)) + 24|0);
 $55 = ((($0)) + 28|0);
 $56 = ((($0)) + 32|0);
 $57 = ((($0)) + 40|0);
 $58 = ((($0)) + 44|0);
 ;HEAP32[$54>>2]=0|0;HEAP32[$54+4>>2]=0|0;HEAP32[$54+8>>2]=0|0;HEAP32[$54+12>>2]=0|0;HEAP32[$54+16>>2]=0|0;
 HEAP32[$58>>2] = 1;
 $59 = ((($0)) + 48|0);
 dest=$59; src=18465; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $60 = (_safe_itf8_get($cp$1,$14,$map_size)|0);
 $61 = (($cp$1) + ($60)|0);
 $62 = (_safe_itf8_get($61,$14,$map_count)|0);
 $63 = (($61) + ($62)|0);
 $64 = $14;
 $65 = ((($fd)) + 288|0);
 $66 = ((($0)) + 52|0);
 $67 = ((($0)) + 56|0);
 $68 = ((($0)) + 60|0);
 $69 = ((($0)) + 64|0);
 $70 = ((($0)) + 72|0);
 $71 = ((($0)) + 76|0);
 $72 = ((($0)) + 68|0);
 $cp$2 = $63;$i$1 = 0;
 L31: while(1) {
  $73 = HEAP32[$map_count>>2]|0;
  $74 = ($i$1|0)<($73|0);
  $75 = $cp$2;
  if (!($74)) {
   label = 93;
   break;
  }
  $76 = (($64) - ($75))|0;
  $77 = ($76|0)<(2);
  if ($77) {
   label = 22;
   break;
  }
  $78 = ((($cp$2)) + 2|0);
  $79 = HEAP8[$cp$2>>0]|0;
  $80 = $79 << 24 >> 24;
  $81 = $80 << 8;
  $82 = ((($cp$2)) + 1|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83 << 24 >> 24;
  $85 = $81 | $84;
  switch ($85|0) {
  case 19785:  {
   $86 = HEAP8[$78>>0]|0;
   $87 = $86 << 24 >> 24;
   $88 = HEAP32[$50>>2]|0;
   $89 = (_kh_put_map($88,17680,$r)|0);
   $90 = HEAP32[$r>>2]|0;
   $91 = ($90|0)==(-1);
   if ($91) {
    label = 25;
    break L31;
   }
   $92 = ((($cp$2)) + 3|0);
   $93 = HEAP32[$50>>2]|0;
   $94 = ((($93)) + 24|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (($95) + ($89<<2)|0);
   HEAP32[$96>>2] = $87;
   HEAP32[$54>>2] = $87;
   $cp$3 = $92;
   break;
  }
  case 21833:  {
   $97 = HEAP8[$78>>0]|0;
   $98 = $97 << 24 >> 24;
   $99 = HEAP32[$50>>2]|0;
   $100 = (_kh_put_map($99,17677,$r)|0);
   $101 = HEAP32[$r>>2]|0;
   $102 = ($101|0)==(-1);
   if ($102) {
    label = 28;
    break L31;
   }
   $103 = ((($cp$2)) + 3|0);
   $104 = HEAP32[$50>>2]|0;
   $105 = ((($104)) + 24|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + ($100<<2)|0);
   HEAP32[$107>>2] = $98;
   HEAP32[$55>>2] = $98;
   $cp$3 = $103;
   break;
  }
  case 20553:  {
   $108 = HEAP8[$78>>0]|0;
   $109 = $108 << 24 >> 24;
   $110 = HEAP32[$50>>2]|0;
   $111 = (_kh_put_map($110,17674,$r)|0);
   $112 = HEAP32[$r>>2]|0;
   $113 = ($112|0)==(-1);
   if ($113) {
    label = 31;
    break L31;
   }
   $114 = ((($cp$2)) + 3|0);
   $115 = HEAP32[$50>>2]|0;
   $116 = ((($115)) + 24|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (($117) + ($111<<2)|0);
   HEAP32[$118>>2] = $109;
   HEAP32[$56>>2] = $109;
   $cp$3 = $114;
   break;
  }
  case 21070:  {
   $119 = HEAP8[$78>>0]|0;
   $120 = $119 << 24 >> 24;
   $121 = HEAP32[$50>>2]|0;
   $122 = (_kh_put_map($121,17671,$r)|0);
   $123 = HEAP32[$r>>2]|0;
   $124 = ($123|0)==(-1);
   if ($124) {
    label = 34;
    break L31;
   }
   $125 = ((($cp$2)) + 3|0);
   $126 = HEAP32[$50>>2]|0;
   $127 = ((($126)) + 24|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = (($128) + ($122<<2)|0);
   HEAP32[$129>>2] = $120;
   HEAP32[$57>>2] = $120;
   $cp$3 = $125;
   break;
  }
  case 16720:  {
   $130 = HEAP8[$78>>0]|0;
   $131 = $130 << 24 >> 24;
   $132 = HEAP32[$50>>2]|0;
   $133 = (_kh_put_map($132,17689,$r)|0);
   $134 = HEAP32[$r>>2]|0;
   $135 = ($134|0)==(-1);
   if ($135) {
    label = 37;
    break L31;
   }
   $136 = ((($cp$2)) + 3|0);
   $137 = HEAP32[$50>>2]|0;
   $138 = ((($137)) + 24|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = (($139) + ($133<<2)|0);
   HEAP32[$140>>2] = $131;
   HEAP32[$58>>2] = $131;
   $cp$3 = $136;
   break;
  }
  case 21074:  {
   $141 = HEAP8[$78>>0]|0;
   $142 = HEAP32[$50>>2]|0;
   $143 = (_kh_put_map($142,17692,$r)|0);
   $144 = HEAP32[$r>>2]|0;
   $145 = ($144|0)==(-1);
   if ($145) {
    label = 40;
    break L31;
   }
   $146 = $141 << 24 >> 24;
   $147 = ((($cp$2)) + 3|0);
   $148 = HEAP32[$50>>2]|0;
   $149 = ((($148)) + 24|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = (($150) + ($143<<2)|0);
   HEAP32[$151>>2] = $146;
   $152 = ($141<<24>>24)==(0);
   $153 = $152&1;
   HEAP32[$65>>2] = $153;
   $cp$3 = $147;
   break;
  }
  case 21325:  {
   $154 = $78;
   $155 = (($64) - ($154))|0;
   $156 = ($155|0)<(5);
   if ($156) {
    label = 43;
    break L31;
   }
   $157 = HEAP8[$78>>0]|0;
   $158 = $157&255;
   $159 = $158 >>> 6;
   $160 = (($59) + ($159)|0);
   HEAP8[$160>>0] = 67;
   $161 = HEAP8[$78>>0]|0;
   $162 = $161&255;
   $163 = $162 >>> 4;
   $164 = $163 & 3;
   $165 = (($59) + ($164)|0);
   HEAP8[$165>>0] = 71;
   $166 = HEAP8[$78>>0]|0;
   $167 = $166&255;
   $168 = $167 >>> 2;
   $169 = $168 & 3;
   $170 = (($59) + ($169)|0);
   HEAP8[$170>>0] = 84;
   $171 = HEAP8[$78>>0]|0;
   $172 = $171&255;
   $173 = $172 & 3;
   $174 = (($59) + ($173)|0);
   HEAP8[$174>>0] = 78;
   $175 = ((($cp$2)) + 3|0);
   $176 = HEAP8[$175>>0]|0;
   $177 = $176&255;
   $178 = $177 >>> 6;
   $179 = (($66) + ($178)|0);
   HEAP8[$179>>0] = 65;
   $180 = HEAP8[$175>>0]|0;
   $181 = $180&255;
   $182 = $181 >>> 4;
   $183 = $182 & 3;
   $184 = (($66) + ($183)|0);
   HEAP8[$184>>0] = 71;
   $185 = HEAP8[$175>>0]|0;
   $186 = $185&255;
   $187 = $186 >>> 2;
   $188 = $187 & 3;
   $189 = (($66) + ($188)|0);
   HEAP8[$189>>0] = 84;
   $190 = HEAP8[$175>>0]|0;
   $191 = $190&255;
   $192 = $191 & 3;
   $193 = (($66) + ($192)|0);
   HEAP8[$193>>0] = 78;
   $194 = ((($cp$2)) + 4|0);
   $195 = HEAP8[$194>>0]|0;
   $196 = $195&255;
   $197 = $196 >>> 6;
   $198 = (($67) + ($197)|0);
   HEAP8[$198>>0] = 65;
   $199 = HEAP8[$194>>0]|0;
   $200 = $199&255;
   $201 = $200 >>> 4;
   $202 = $201 & 3;
   $203 = (($67) + ($202)|0);
   HEAP8[$203>>0] = 67;
   $204 = HEAP8[$194>>0]|0;
   $205 = $204&255;
   $206 = $205 >>> 2;
   $207 = $206 & 3;
   $208 = (($67) + ($207)|0);
   HEAP8[$208>>0] = 84;
   $209 = HEAP8[$194>>0]|0;
   $210 = $209&255;
   $211 = $210 & 3;
   $212 = (($67) + ($211)|0);
   HEAP8[$212>>0] = 78;
   $213 = ((($cp$2)) + 5|0);
   $214 = HEAP8[$213>>0]|0;
   $215 = $214&255;
   $216 = $215 >>> 6;
   $217 = (($68) + ($216)|0);
   HEAP8[$217>>0] = 65;
   $218 = HEAP8[$213>>0]|0;
   $219 = $218&255;
   $220 = $219 >>> 4;
   $221 = $220 & 3;
   $222 = (($68) + ($221)|0);
   HEAP8[$222>>0] = 67;
   $223 = HEAP8[$213>>0]|0;
   $224 = $223&255;
   $225 = $224 >>> 2;
   $226 = $225 & 3;
   $227 = (($68) + ($226)|0);
   HEAP8[$227>>0] = 71;
   $228 = HEAP8[$213>>0]|0;
   $229 = $228&255;
   $230 = $229 & 3;
   $231 = (($68) + ($230)|0);
   HEAP8[$231>>0] = 78;
   $232 = ((($cp$2)) + 6|0);
   $233 = HEAP8[$232>>0]|0;
   $234 = $233&255;
   $235 = $234 >>> 6;
   $236 = (($69) + ($235)|0);
   HEAP8[$236>>0] = 65;
   $237 = HEAP8[$232>>0]|0;
   $238 = $237&255;
   $239 = $238 >>> 4;
   $240 = $239 & 3;
   $241 = (($69) + ($240)|0);
   HEAP8[$241>>0] = 67;
   $242 = HEAP8[$232>>0]|0;
   $243 = $242&255;
   $244 = $243 >>> 2;
   $245 = $244 & 3;
   $246 = (($69) + ($245)|0);
   HEAP8[$246>>0] = 71;
   $247 = HEAP8[$232>>0]|0;
   $248 = $247&255;
   $249 = $248 & 3;
   $250 = (($69) + ($249)|0);
   HEAP8[$250>>0] = 84;
   $251 = HEAP32[$50>>2]|0;
   $252 = (_kh_put_map($251,17683,$r)|0);
   $253 = HEAP32[$r>>2]|0;
   $254 = ($253|0)==(-1);
   if ($254) {
    label = 45;
    break L31;
   }
   $255 = ((($cp$2)) + 7|0);
   $256 = HEAP32[$50>>2]|0;
   $257 = ((($256)) + 24|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = (($258) + ($252<<2)|0);
   HEAP32[$259>>2] = $154;
   $cp$3 = $255;
   break;
  }
  case 21572:  {
   HEAP32[$blk_size$i>>2] = 0;
   $260 = (_malloc(48)|0);
   $261 = ($260|0)==(0|0);
   if ($261) {
    label = 85;
    break L31;
   }
   $262 = ((($260)) + 32|0);
   HEAP32[$262>>2] = 0;
   $263 = ((($260)) + 36|0);
   HEAP32[$263>>2] = 0;
   $264 = ((($260)) + 40|0);
   HEAP32[$264>>2] = 0;
   $265 = ((($260)) + 44|0);
   ;HEAP32[$260>>2]=0|0;HEAP32[$260+4>>2]=0|0;HEAP32[$260+8>>2]=0|0;HEAP32[$260+12>>2]=0|0;HEAP32[$260+16>>2]=0|0;HEAP32[$260+20>>2]=0|0;
   HEAP32[$265>>2] = 7;
   $266 = (_safe_itf8_get($78,$14,$blk_size$i)|0);
   $267 = (($78) + ($266)|0);
   $268 = HEAP32[$blk_size$i>>2]|0;
   $269 = ($268|0)==(0);
   if ($269) {
    HEAP32[$70>>2] = 0;
    HEAP32[$71>>2] = 0;
    $270 = ((($260)) + 32|0);
    $271 = HEAP32[$270>>2]|0;
    $272 = ($271|0)==(0|0);
    if (!($272)) {
     _free($271);
    }
    _free($260);
    $$0$i = $266;
   } else {
    $273 = ($268|0)<(0);
    if ($273) {
     label = 55;
     break L31;
    }
    $274 = $267;
    $275 = (($64) - ($274))|0;
    $276 = ($275|0)<($268|0);
    if ($276) {
     label = 55;
     break L31;
    }
    $277 = ((($260)) + 36|0);
    $278 = ((($260)) + 40|0);
    $279 = ((($260)) + 32|0);
    while(1) {
     $283 = HEAP32[$277>>2]|0;
     $284 = HEAP32[$278>>2]|0;
     $285 = (($284) + ($268))|0;
     $286 = ($283>>>0)>($285>>>0);
     if ($286) {
      break;
     }
     $287 = ($283|0)==(0);
     $288 = (+($283>>>0));
     $289 = $288 * 1.5;
     $290 = (~~(($289))>>>0);
     $291 = $287 ? 1024 : $290;
     HEAP32[$277>>2] = $291;
     $292 = HEAP32[$279>>2]|0;
     $293 = (_realloc($292,$291)|0);
     HEAP32[$279>>2] = $293;
    }
    $294 = HEAP32[$279>>2]|0;
    $295 = (($294) + ($284)|0);
    _memcpy(($295|0),($267|0),($268|0))|0;
    $296 = HEAP32[$278>>2]|0;
    $297 = (($296) + ($268))|0;
    HEAP32[$278>>2] = $297;
    $298 = (($267) + ($268)|0);
    $299 = $298;
    $300 = $78;
    $301 = (($299) - ($300))|0;
    $302 = (($297) + -1)|0;
    $303 = HEAP32[$279>>2]|0;
    $304 = (($303) + ($302)|0);
    $305 = HEAP8[$304>>0]|0;
    $306 = ($305<<24>>24)==(0);
    if ($306) {
     $320 = $297;$322 = $303;
    } else {
     $309 = $297;$316 = $303;
     while(1) {
      $307 = HEAP32[$277>>2]|0;
      $308 = (($309) + 1)|0;
      $310 = ($307>>>0)>($308>>>0);
      if ($310) {
       break;
      }
      $311 = ($307|0)==(0);
      $312 = (+($307>>>0));
      $313 = $312 * 1.5;
      $314 = (~~(($313))>>>0);
      $315 = $311 ? 1024 : $314;
      HEAP32[$277>>2] = $315;
      $317 = (_realloc($316,$315)|0);
      HEAP32[$279>>2] = $317;
      $$pre408 = HEAP32[$278>>2]|0;
      $309 = $$pre408;$316 = $317;
     }
     HEAP32[$278>>2] = $308;
     $318 = (($316) + ($309)|0);
     HEAP8[$318>>0] = 0;
     $$pre409 = HEAP32[$279>>2]|0;
     $$pre410 = HEAP32[$278>>2]|0;
     $320 = $$pre410;$322 = $$pre409;
    }
    $i$0$i = 0;$nTL$0$i = 0;
    while(1) {
     $319 = ($i$0$i>>>0)<($320>>>0);
     if ($319) {
      $i$1$i = $i$0$i;
     } else {
      break;
     }
     while(1) {
      $321 = (($322) + ($i$1$i)|0);
      $323 = HEAP8[$321>>0]|0;
      $324 = ($323<<24>>24)==(0);
      if ($324) {
       break;
      }
      $325 = (($i$1$i) + 1)|0;
      $i$1$i = $325;
     }
     $326 = (($nTL$0$i) + 1)|0;
     $327 = (($i$1$i) + 1)|0;
     $i$0$i = $327;$nTL$0$i = $326;
    }
    HEAP32[$70>>2] = $nTL$0$i;
    $328 = ($nTL$0$i|0)==(0);
    if ($328) {
     $req$0$i$i = 0;
    } else {
     $329 = $nTL$0$i << 2;
     $330 = ($nTL$0$i>>>0)>(65535);
     if ($330) {
      $331 = (($329>>>0) / ($nTL$0$i>>>0))&-1;
      $332 = ($331|0)==(4);
      $$$i$i = $332 ? $329 : -1;
      $req$0$i$i = $$$i$i;
     } else {
      $req$0$i$i = $329;
     }
    }
    $333 = (_malloc($req$0$i$i)|0);
    $334 = ($333|0)==(0|0);
    if ($334) {
     label = 75;
     break L31;
    }
    $335 = ((($333)) + -4|0);
    $336 = HEAP32[$335>>2]|0;
    $337 = $336 & 3;
    $338 = ($337|0)==(0);
    if (!($338)) {
     _memset(($333|0),0,($req$0$i$i|0))|0;
    }
    HEAP32[$71>>2] = $333;
    $i$2$i = 0;$nTL$1$i = 0;
    while(1) {
     $341 = HEAP32[$278>>2]|0;
     $342 = ($i$2$i>>>0)<($341>>>0);
     if (!($342)) {
      break;
     }
     $343 = (($322) + ($i$2$i)|0);
     $344 = HEAP32[$71>>2]|0;
     $345 = (($344) + ($nTL$1$i<<2)|0);
     HEAP32[$345>>2] = $343;
     $i$3$i = $i$2$i;
     while(1) {
      $346 = (($322) + ($i$3$i)|0);
      $347 = HEAP8[$346>>0]|0;
      $348 = ($347<<24>>24)==(0);
      if ($348) {
       break;
      }
      $349 = (($i$3$i) + 1)|0;
      $i$3$i = $349;
     }
     $350 = (($nTL$1$i) + 1)|0;
     $351 = (($i$3$i) + 1)|0;
     $i$2$i = $351;$nTL$1$i = $350;
    }
    HEAP32[$72>>2] = $260;
    $$0$i = $301;
   }
   $352 = ($$0$i|0)<(0);
   if ($352) {
    break L31;
   }
   $353 = HEAP32[$50>>2]|0;
   $354 = (_kh_put_map($353,17686,$r)|0);
   $355 = HEAP32[$r>>2]|0;
   $356 = ($355|0)==(-1);
   if ($356) {
    label = 89;
    break L31;
   }
   $357 = $78;
   $358 = (($78) + ($$0$i)|0);
   $359 = HEAP32[$50>>2]|0;
   $360 = ((($359)) + 24|0);
   $361 = HEAP32[$360>>2]|0;
   $362 = (($361) + ($354<<2)|0);
   HEAP32[$362>>2] = $357;
   $cp$3 = $358;
   break;
  }
  default: {
   HEAP32[$vararg_buffer>>2] = $80;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $84;
   _fprintf(9772,17024,$vararg_buffer);
   $363 = ((($cp$2)) + 3|0);
   $cp$3 = $363;
  }
  }
  $364 = (($i$1) + 1)|0;
  $cp$2 = $cp$3;$i$1 = $364;
 }
 switch (label|0) {
  case 22: {
   _cram_free_compression_header($0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 25: {
   _cram_free_compression_header($0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 28: {
   _cram_free_compression_header($0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 31: {
   _cram_free_compression_header($0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 34: {
   _cram_free_compression_header($0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 37: {
   _cram_free_compression_header($0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 40: {
   _cram_free_compression_header($0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 43: {
   _cram_free_compression_header($0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 45: {
   _cram_free_compression_header($0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 55: {
   $280 = ((($260)) + 32|0);
   $281 = HEAP32[$280>>2]|0;
   $282 = ($281|0)==(0|0);
   if (!($282)) {
    _free($281);
   }
   _free($260);
   label = 85;
   break;
  }
  case 75: {
   HEAP32[$71>>2] = 0;
   $339 = HEAP32[$279>>2]|0;
   $340 = ($339|0)==(0|0);
   if (!($340)) {
    _free($339);
   }
   _free($260);
   label = 85;
   break;
  }
  case 89: {
   _cram_free_compression_header($0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 93: {
   $365 = $61;
   $366 = (($75) - ($365))|0;
   $367 = HEAP32[$map_size>>2]|0;
   $368 = ($366|0)==($367|0);
   if (!($368)) {
    _cram_free_compression_header($0);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $369 = (_safe_itf8_get($cp$2,$14,$map_size)|0);
   $370 = (($cp$2) + ($369)|0);
   $371 = (_safe_itf8_get($370,$14,$map_count)|0);
   $372 = (($370) + ($371)|0);
   $373 = ((($0)) + 408|0);
   $374 = ((($0)) + 412|0);
   $375 = ((($0)) + 480|0);
   $376 = ((($0)) + 448|0);
   $377 = ((($0)) + 416|0);
   $378 = ((($0)) + 420|0);
   $379 = ((($0)) + 432|0);
   $380 = ((($0)) + 428|0);
   $381 = ((($0)) + 440|0);
   $382 = ((($0)) + 436|0);
   $383 = ((($0)) + 444|0);
   $384 = ((($0)) + 524|0);
   $385 = ((($0)) + 504|0);
   $386 = ((($0)) + 452|0);
   $387 = ((($0)) + 456|0);
   $388 = ((($0)) + 460|0);
   $389 = ((($0)) + 472|0);
   $390 = ((($0)) + 400|0);
   $391 = ((($0)) + 404|0);
   $392 = ((($0)) + 464|0);
   $393 = ((($0)) + 468|0);
   $394 = ((($0)) + 496|0);
   $395 = ((($0)) + 484|0);
   $396 = ((($0)) + 488|0);
   $397 = ((($0)) + 492|0);
   $398 = ((($0)) + 424|0);
   $399 = ((($0)) + 392|0);
   $400 = ((($0)) + 396|0);
   $401 = ((($0)) + 500|0);
   $402 = ((($0)) + 476|0);
   $$pre = HEAP32[$map_count>>2]|0;
   $cp$4 = $372;$i$2 = 0;
   L105: while(1) {
    $403 = ($i$2|0)<($$pre|0);
    if (!($403)) {
     label = 633;
     break;
    }
    HEAP32[$encoding>>2] = 0;
    HEAP32[$size>>2] = 0;
    $404 = (_malloc(24)|0);
    $405 = ($404|0)==(0|0);
    if ($405) {
     $$lcssa263 = 0;
     label = 99;
     break;
    }
    $406 = $cp$4;
    $407 = (($64) - ($406))|0;
    $408 = ($407|0)<(4);
    if ($408) {
     $$lcssa263 = $404;
     label = 99;
     break;
    }
    $409 = ((($cp$4)) + 2|0);
    $410 = (_safe_itf8_get($409,$14,$encoding)|0);
    $411 = (($409) + ($410)|0);
    $412 = (_safe_itf8_get($411,$14,$size)|0);
    $413 = (($411) + ($412)|0);
    $414 = HEAP8[$cp$4>>0]|0;
    $415 = $414 << 24 >> 24;
    $416 = $415 << 8;
    $417 = ((($cp$4)) + 1|0);
    $418 = HEAP8[$417>>0]|0;
    $419 = $418 << 24 >> 24;
    $420 = $416 | $419;
    HEAP32[$404>>2] = $420;
    $421 = HEAP32[$encoding>>2]|0;
    $422 = ((($404)) + 4|0);
    HEAP32[$422>>2] = $421;
    $423 = HEAP32[$size>>2]|0;
    $424 = ((($404)) + 12|0);
    HEAP32[$424>>2] = $423;
    $425 = HEAP32[$10>>2]|0;
    $426 = $413;
    $427 = (($426) - ($425))|0;
    $428 = ((($404)) + 8|0);
    HEAP32[$428>>2] = $427;
    $429 = ((($404)) + 16|0);
    HEAP32[$429>>2] = 0;
    $430 = ($421|0)==(0);
    if ($430) {
     $cp$5 = $413;
    } else {
     $431 = HEAP32[$size>>2]|0;
     $432 = ($431|0)<(0);
     $433 = (($64) - ($426))|0;
     $434 = ($433|0)<($431|0);
     $or$cond = $432 | $434;
     if ($or$cond) {
      label = 102;
      break;
     }
     $435 = HEAP8[$cp$4>>0]|0;
     $436 = ($435<<24>>24)==(66);
     L113: do {
      if ($436) {
       $437 = HEAP8[$417>>0]|0;
       $438 = ($437<<24>>24)==(70);
       if ($438) {
        $439 = HEAP32[$encoding>>2]|0;
        $440 = HEAP32[$15>>2]|0;
        $441 = ($439>>>0)<(10);
        if (!($441)) {
         label = 107;
         break L105;
        }
        $442 = 762 >>> $439;
        $443 = $442 & 1;
        $444 = ($443|0)==(0);
        if ($444) {
         label = 107;
         break L105;
        }
        $445 = (568 + ($439<<2)|0);
        $446 = HEAP32[$445>>2]|0;
        $447 = (FUNCTION_TABLE_iiiii[$446 & 127]($413,$431,1,$440)|0);
        HEAP32[$373>>2] = $447;
        $448 = ($447|0)==(0|0);
        if ($448) {
         label = 120;
         break L105;
        }
       } else {
        $$ph = 0;
        label = 208;
       }
      } else {
       $449 = ($435<<24>>24)==(67);
       if ($449) {
        $450 = HEAP8[$417>>0]|0;
        $451 = ($450<<24>>24)==(70);
        if (!($451)) {
         $$ph = 0;
         label = 208;
         break;
        }
        $452 = HEAP32[$encoding>>2]|0;
        $453 = HEAP32[$15>>2]|0;
        $454 = ($452>>>0)<(10);
        if (!($454)) {
         label = 125;
         break L105;
        }
        $455 = 762 >>> $452;
        $456 = $455 & 1;
        $457 = ($456|0)==(0);
        if ($457) {
         label = 125;
         break L105;
        }
        $458 = (568 + ($452<<2)|0);
        $459 = HEAP32[$458>>2]|0;
        $460 = (FUNCTION_TABLE_iiiii[$459 & 127]($413,$431,1,$453)|0);
        HEAP32[$374>>2] = $460;
        $461 = ($460|0)==(0|0);
        if ($461) {
         label = 138;
         break L105;
        } else {
         break;
        }
       }
       $462 = ($435<<24>>24)==(82);
       if (!($462)) {
        $896 = $462;
        $484 = ($435<<24>>24)==(65);
        if ($484) {
         $485 = HEAP8[$417>>0]|0;
         $486 = ($485<<24>>24)==(80);
         if (!($486)) {
          label = 630;
          break;
         }
         $487 = HEAP32[$encoding>>2]|0;
         $488 = HEAP32[$15>>2]|0;
         $489 = ($487>>>0)<(10);
         if (!($489)) {
          label = 177;
          break L105;
         }
         $490 = 762 >>> $487;
         $491 = $490 & 1;
         $492 = ($491|0)==(0);
         if ($492) {
          label = 177;
          break L105;
         }
         $493 = (568 + ($487<<2)|0);
         $494 = HEAP32[$493>>2]|0;
         $495 = (FUNCTION_TABLE_iiiii[$494 & 127]($413,$431,1,$488)|0);
         HEAP32[$377>>2] = $495;
         $496 = ($495|0)==(0|0);
         if ($496) {
          label = 190;
          break L105;
         } else {
          break;
         }
        }
        $510 = ($435<<24>>24)==(77);
        if (!($510)) {
         $897 = $510;$898 = $896;
         label = 227;
         break;
        }
        $511 = HEAP8[$417>>0]|0;
        $512 = ($511<<24>>24)==(70);
        if (!($512)) {
         $738 = $511;$899 = $896;$900 = 0;
         label = 542;
         break;
        }
        $513 = HEAP32[$encoding>>2]|0;
        $514 = HEAP32[$15>>2]|0;
        $515 = ($513>>>0)<(10);
        if (!($515)) {
         label = 213;
         break L105;
        }
        $516 = 762 >>> $513;
        $517 = $516 & 1;
        $518 = ($517|0)==(0);
        if ($518) {
         label = 213;
         break L105;
        }
        $519 = (568 + ($513<<2)|0);
        $520 = HEAP32[$519>>2]|0;
        $521 = (FUNCTION_TABLE_iiiii[$520 & 127]($413,$431,1,$514)|0);
        HEAP32[$379>>2] = $521;
        $522 = ($521|0)==(0|0);
        if ($522) {
         label = 226;
         break L105;
        } else {
         break;
        }
       }
       $463 = HEAP8[$417>>0]|0;
       switch ($463<<24>>24) {
       case 73:  {
        $464 = HEAP32[$encoding>>2]|0;
        $465 = HEAP32[$15>>2]|0;
        $466 = ($464>>>0)<(10);
        if (!($466)) {
         label = 143;
         break L105;
        }
        $467 = 762 >>> $464;
        $468 = $467 & 1;
        $469 = ($468|0)==(0);
        if ($469) {
         label = 143;
         break L105;
        }
        $470 = (568 + ($464<<2)|0);
        $471 = HEAP32[$470>>2]|0;
        $472 = (FUNCTION_TABLE_iiiii[$471 & 127]($413,$431,1,$465)|0);
        HEAP32[$375>>2] = $472;
        $473 = ($472|0)==(0|0);
        if ($473) {
         label = 156;
         break L105;
        } else {
         break L113;
        }
        break;
       }
       case 76:  {
        $474 = HEAP32[$encoding>>2]|0;
        $475 = HEAP32[$15>>2]|0;
        $476 = ($474>>>0)<(10);
        if (!($476)) {
         label = 159;
         break L105;
        }
        $477 = 762 >>> $474;
        $478 = $477 & 1;
        $479 = ($478|0)==(0);
        if ($479) {
         label = 159;
         break L105;
        }
        $480 = (568 + ($474<<2)|0);
        $481 = HEAP32[$480>>2]|0;
        $482 = (FUNCTION_TABLE_iiiii[$481 & 127]($413,$431,1,$475)|0);
        HEAP32[$376>>2] = $482;
        $483 = ($482|0)==(0|0);
        if ($483) {
         label = 172;
         break L105;
        } else {
         break L113;
        }
        break;
       }
       default: {
        $497 = HEAP8[$417>>0]|0;
        $498 = ($497<<24>>24)==(71);
        if (!($498)) {
         $$ph = $462;
         label = 208;
         break L113;
        }
        $499 = HEAP32[$encoding>>2]|0;
        $500 = HEAP32[$15>>2]|0;
        $501 = ($499>>>0)<(10);
        if (!($501)) {
         label = 194;
         break L105;
        }
        $502 = 762 >>> $499;
        $503 = $502 & 1;
        $504 = ($503|0)==(0);
        if ($504) {
         label = 194;
         break L105;
        }
        $505 = (568 + ($499<<2)|0);
        $506 = HEAP32[$505>>2]|0;
        $507 = (FUNCTION_TABLE_iiiii[$506 & 127]($413,$431,1,$500)|0);
        HEAP32[$378>>2] = $507;
        $508 = ($507|0)==(0|0);
        if ($508) {
         label = 207;
         break L105;
        } else {
         break L113;
        }
       }
       }
      }
     } while(0);
     if ((label|0) == 208) {
      label = 0;
      $509 = ($435<<24>>24)==(77);
      $897 = $509;$898 = $$ph;
      label = 227;
     }
     L151: do {
      if ((label|0) == 227) {
       label = 0;
       $523 = ($435<<24>>24)==(78);
       L153: do {
        if ($523) {
         $524 = HEAP8[$417>>0]|0;
         switch ($524<<24>>24) {
         case 83:  {
          $525 = HEAP32[$encoding>>2]|0;
          $526 = HEAP32[$15>>2]|0;
          $527 = ($525>>>0)<(10);
          if (!($527)) {
           label = 231;
           break L105;
          }
          $528 = 762 >>> $525;
          $529 = $528 & 1;
          $530 = ($529|0)==(0);
          if ($530) {
           label = 231;
           break L105;
          }
          $531 = (568 + ($525<<2)|0);
          $532 = HEAP32[$531>>2]|0;
          $533 = (FUNCTION_TABLE_iiiii[$532 & 127]($413,$431,1,$526)|0);
          HEAP32[$380>>2] = $533;
          $534 = ($533|0)==(0|0);
          if ($534) {
           label = 244;
           break L105;
          } else {
           break L151;
          }
          break;
         }
         case 80:  {
          $535 = HEAP32[$encoding>>2]|0;
          $536 = HEAP32[$15>>2]|0;
          $537 = ($535>>>0)<(10);
          if (!($537)) {
           label = 247;
           break L105;
          }
          $538 = 762 >>> $535;
          $539 = $538 & 1;
          $540 = ($539|0)==(0);
          if ($540) {
           label = 247;
           break L105;
          }
          $541 = (568 + ($535<<2)|0);
          $542 = HEAP32[$541>>2]|0;
          $543 = (FUNCTION_TABLE_iiiii[$542 & 127]($413,$431,1,$536)|0);
          HEAP32[$381>>2] = $543;
          $544 = ($543|0)==(0|0);
          if ($544) {
           label = 260;
           break L105;
          } else {
           break L151;
          }
          break;
         }
         default: {
          $558 = ($435<<24>>24)==(84);
          $559 = HEAP8[$417>>0]|0;
          $560 = ($559<<24>>24)==(70);
          if (!($560)) {
           $906 = $898;$907 = $897;$908 = $558;
           if (!($908)) {
            $909 = $906;$910 = $907;$911 = $908;
            break L153;
           }
           $$pr = HEAP8[$417>>0]|0;
           $572 = $$pr;$903 = $908;$904 = $907;$905 = $906;
           label = 298;
           break L153;
          }
          $561 = HEAP32[$encoding>>2]|0;
          $562 = HEAP32[$15>>2]|0;
          $563 = ($561>>>0)<(10);
          if (!($563)) {
           label = 282;
           break L105;
          }
          $564 = 762 >>> $561;
          $565 = $564 & 1;
          $566 = ($565|0)==(0);
          if ($566) {
           label = 282;
           break L105;
          }
          $567 = (568 + ($561<<2)|0);
          $568 = HEAP32[$567>>2]|0;
          $569 = (FUNCTION_TABLE_iiiii[$568 & 127]($413,$431,1,$562)|0);
          HEAP32[$383>>2] = $569;
          $570 = ($569|0)==(0|0);
          if ($570) {
           label = 295;
           break L105;
          } else {
           break L151;
          }
         }
         }
        } else {
         $901 = $898;$902 = $897;
         $545 = ($435<<24>>24)==(84);
         if ($545) {
          $546 = HEAP8[$417>>0]|0;
          $547 = ($546<<24>>24)==(83);
          if (!($547)) {
           $572 = $546;$903 = $545;$904 = $902;$905 = $901;
           label = 298;
           break;
          }
          $548 = HEAP32[$encoding>>2]|0;
          $549 = HEAP32[$15>>2]|0;
          $550 = ($548>>>0)<(10);
          if (!($550)) {
           label = 265;
           break L105;
          }
          $551 = 762 >>> $548;
          $552 = $551 & 1;
          $553 = ($552|0)==(0);
          if ($553) {
           label = 265;
           break L105;
          }
          $554 = (568 + ($548<<2)|0);
          $555 = HEAP32[$554>>2]|0;
          $556 = (FUNCTION_TABLE_iiiii[$555 & 127]($413,$431,1,$549)|0);
          HEAP32[$382>>2] = $556;
          $557 = ($556|0)==(0|0);
          if ($557) {
           label = 278;
           break L105;
          } else {
           break L151;
          }
         }
         $595 = ($435<<24>>24)==(70);
         if (!($595)) {
          $909 = $901;$910 = $902;$911 = $545;
          break;
         }
         $596 = HEAP8[$417>>0]|0;
         $597 = ($596<<24>>24)==(78);
         if ($597) {
          $598 = HEAP32[$encoding>>2]|0;
          $599 = HEAP32[$15>>2]|0;
          $600 = ($598>>>0)<(10);
          if (!($600)) {
           label = 336;
           break L105;
          }
          $601 = 762 >>> $598;
          $602 = $601 & 1;
          $603 = ($602|0)==(0);
          if ($603) {
           label = 336;
           break L105;
          }
          $604 = (568 + ($598<<2)|0);
          $605 = HEAP32[$604>>2]|0;
          $606 = (FUNCTION_TABLE_iiiii[$605 & 127]($413,$431,1,$599)|0);
          HEAP32[$386>>2] = $606;
          $607 = ($606|0)==(0|0);
          if ($607) {
           label = 349;
           break L105;
          } else {
           break L151;
          }
         }
         $608 = HEAP8[$417>>0]|0;
         switch ($608<<24>>24) {
         case 67:  {
          $609 = HEAP32[$encoding>>2]|0;
          $610 = HEAP32[$15>>2]|0;
          $611 = ($609>>>0)<(10);
          if (!($611)) {
           label = 353;
           break L105;
          }
          $612 = 762 >>> $609;
          $613 = $612 & 1;
          $614 = ($613|0)==(0);
          if ($614) {
           label = 353;
           break L105;
          }
          $615 = (568 + ($609<<2)|0);
          $616 = HEAP32[$615>>2]|0;
          $617 = (FUNCTION_TABLE_iiiii[$616 & 127]($413,$431,3,$610)|0);
          HEAP32[$387>>2] = $617;
          $618 = ($617|0)==(0|0);
          if ($618) {
           label = 366;
           break L105;
          } else {
           break L151;
          }
          break;
         }
         case 80:  {
          $619 = HEAP32[$encoding>>2]|0;
          $620 = HEAP32[$15>>2]|0;
          $621 = ($619>>>0)<(10);
          if (!($621)) {
           label = 369;
           break L105;
          }
          $622 = 762 >>> $619;
          $623 = $622 & 1;
          $624 = ($623|0)==(0);
          if ($624) {
           label = 369;
           break L105;
          }
          $625 = (568 + ($619<<2)|0);
          $626 = HEAP32[$625>>2]|0;
          $627 = (FUNCTION_TABLE_iiiii[$626 & 127]($413,$431,1,$620)|0);
          HEAP32[$388>>2] = $627;
          $628 = ($627|0)==(0|0);
          if ($628) {
           label = 382;
           break L105;
          } else {
           break L151;
          }
          break;
         }
         default: {
          $909 = $901;$910 = $902;$911 = $545;
          break L153;
         }
         }
        }
       } while(0);
       do {
        if ((label|0) == 298) {
         label = 0;
         $571 = ($572<<24>>24)==(67);
         if ($571) {
          $573 = HEAP32[$encoding>>2]|0;
          $574 = HEAP32[$15>>2]|0;
          $575 = ($573>>>0)<(10);
          if (!($575)) {
           label = 301;
           break L105;
          }
          $576 = 762 >>> $573;
          $577 = $576 & 1;
          $578 = ($577|0)==(0);
          if ($578) {
           label = 301;
           break L105;
          }
          $579 = (568 + ($573<<2)|0);
          $580 = HEAP32[$579>>2]|0;
          $581 = (FUNCTION_TABLE_iiiii[$580 & 127]($413,$431,3,$574)|0);
          HEAP32[$384>>2] = $581;
          $582 = ($581|0)==(0|0);
          if ($582) {
           label = 314;
           break L105;
          } else {
           break L151;
          }
         }
         $583 = HEAP8[$417>>0]|0;
         $584 = ($583<<24>>24)==(78);
         if (!($584)) {
          $909 = $905;$910 = $904;$911 = $903;
          break;
         }
         $585 = HEAP32[$encoding>>2]|0;
         $586 = HEAP32[$15>>2]|0;
         $587 = ($585>>>0)<(10);
         if (!($587)) {
          label = 318;
          break L105;
         }
         $588 = 762 >>> $585;
         $589 = $588 & 1;
         $590 = ($589|0)==(0);
         if ($590) {
          label = 318;
          break L105;
         }
         $591 = (568 + ($585<<2)|0);
         $592 = HEAP32[$591>>2]|0;
         $593 = (FUNCTION_TABLE_iiiii[$592 & 127]($413,$431,1,$586)|0);
         HEAP32[$385>>2] = $593;
         $594 = ($593|0)==(0|0);
         if ($594) {
          label = 331;
          break L105;
         } else {
          break L151;
         }
        }
       } while(0);
       L200: do {
        if ($436) {
         $629 = HEAP8[$417>>0]|0;
         $630 = ($629<<24>>24)==(83);
         if ($630) {
          $631 = HEAP32[$encoding>>2]|0;
          $632 = HEAP32[$15>>2]|0;
          $633 = ($631>>>0)<(10);
          if (!($633)) {
           label = 387;
           break L105;
          }
          $634 = 762 >>> $631;
          $635 = $634 & 1;
          $636 = ($635|0)==(0);
          if ($636) {
           label = 387;
           break L105;
          }
          $637 = (568 + ($631<<2)|0);
          $638 = HEAP32[$637>>2]|0;
          $639 = (FUNCTION_TABLE_iiiii[$638 & 127]($413,$431,3,$632)|0);
          HEAP32[$389>>2] = $639;
          $640 = ($639|0)==(0|0);
          if ($640) {
           label = 400;
           break L105;
          } else {
           break L151;
          }
         }
         $677 = HEAP8[$417>>0]|0;
         $678 = ($677<<24>>24)==(65);
         if ($678) {
          $679 = HEAP32[$encoding>>2]|0;
          $680 = HEAP32[$15>>2]|0;
          $681 = ($679>>>0)<(10);
          if (!($681)) {
           label = 456;
           break L105;
          }
          $682 = 762 >>> $679;
          $683 = $682 & 1;
          $684 = ($683|0)==(0);
          if ($684) {
           label = 456;
           break L105;
          }
          $685 = (568 + ($679<<2)|0);
          $686 = HEAP32[$685>>2]|0;
          $687 = (FUNCTION_TABLE_iiiii[$686 & 127]($413,$431,3,$680)|0);
          HEAP32[$393>>2] = $687;
          $688 = ($687|0)==(0|0);
          if ($688) {
           label = 469;
           break L105;
          } else {
           break L151;
          }
         }
         $689 = HEAP8[$417>>0]|0;
         $690 = ($689<<24>>24)==(66);
         if (!($690)) {
          $915 = $911;$916 = $910;$917 = $909;
          break;
         }
         $691 = HEAP32[$encoding>>2]|0;
         $692 = HEAP32[$15>>2]|0;
         $693 = ($691>>>0)<(10);
         if (!($693)) {
          label = 473;
          break L105;
         }
         $694 = 762 >>> $691;
         $695 = $694 & 1;
         $696 = ($695|0)==(0);
         if ($696) {
          label = 473;
          break L105;
         }
         $697 = (568 + ($691<<2)|0);
         $698 = HEAP32[$697>>2]|0;
         $699 = (FUNCTION_TABLE_iiiii[$698 & 127]($413,$431,4,$692)|0);
         HEAP32[$394>>2] = $699;
         $700 = ($699|0)==(0|0);
         if ($700) {
          label = 486;
          break L105;
         } else {
          break L151;
         }
        } else {
         $912 = $911;$913 = $910;$914 = $909;
         switch ($435<<24>>24) {
         case 73:  {
          $641 = HEAP8[$417>>0]|0;
          $642 = ($641<<24>>24)==(78);
          if (!($642)) {
           $915 = $912;$916 = $913;$917 = $914;
           break L200;
          }
          $643 = HEAP32[$encoding>>2]|0;
          $644 = HEAP32[$15>>2]|0;
          $645 = ($643>>>0)<(10);
          if (!($645)) {
           label = 405;
           break L105;
          }
          $646 = 762 >>> $643;
          $647 = $646 & 1;
          $648 = ($647|0)==(0);
          if ($648) {
           label = 405;
           break L105;
          }
          $649 = (568 + ($643<<2)|0);
          $650 = HEAP32[$649>>2]|0;
          $651 = (FUNCTION_TABLE_iiiii[$650 & 127]($413,$431,4,$644)|0);
          HEAP32[$390>>2] = $651;
          $652 = ($651|0)==(0|0);
          if ($652) {
           label = 418;
           break L105;
          } else {
           break L151;
          }
          break;
         }
         case 83:  {
          $653 = HEAP8[$417>>0]|0;
          $654 = ($653<<24>>24)==(67);
          if (!($654)) {
           $915 = $912;$916 = $913;$917 = $914;
           break L200;
          }
          $655 = HEAP32[$encoding>>2]|0;
          $656 = HEAP32[$15>>2]|0;
          $657 = ($655>>>0)<(10);
          if (!($657)) {
           label = 422;
           break L105;
          }
          $658 = 762 >>> $655;
          $659 = $658 & 1;
          $660 = ($659|0)==(0);
          if ($660) {
           label = 422;
           break L105;
          }
          $661 = (568 + ($655<<2)|0);
          $662 = HEAP32[$661>>2]|0;
          $663 = (FUNCTION_TABLE_iiiii[$662 & 127]($413,$431,4,$656)|0);
          HEAP32[$391>>2] = $663;
          $664 = ($663|0)==(0|0);
          if ($664) {
           label = 435;
           break L105;
          } else {
           break L151;
          }
          break;
         }
         case 68:  {
          $665 = HEAP8[$417>>0]|0;
          $666 = ($665<<24>>24)==(76);
          if (!($666)) {
           $915 = $912;$916 = $913;$917 = $914;
           break L200;
          }
          $667 = HEAP32[$encoding>>2]|0;
          $668 = HEAP32[$15>>2]|0;
          $669 = ($667>>>0)<(10);
          if (!($669)) {
           label = 439;
           break L105;
          }
          $670 = 762 >>> $667;
          $671 = $670 & 1;
          $672 = ($671|0)==(0);
          if ($672) {
           label = 439;
           break L105;
          }
          $673 = (568 + ($667<<2)|0);
          $674 = HEAP32[$673>>2]|0;
          $675 = (FUNCTION_TABLE_iiiii[$674 & 127]($413,$431,1,$668)|0);
          HEAP32[$392>>2] = $675;
          $676 = ($675|0)==(0|0);
          if ($676) {
           label = 452;
           break L105;
          } else {
           break L151;
          }
          break;
         }
         default: {
          $915 = $912;$916 = $913;$917 = $914;
          break L200;
         }
         }
        }
       } while(0);
       do {
        if ($917) {
         $701 = HEAP8[$417>>0]|0;
         $702 = ($701<<24>>24)==(83);
         if (!($702)) {
          $918 = $917;$919 = $916;$920 = $915;
          break;
         }
         $703 = HEAP32[$encoding>>2]|0;
         $704 = HEAP32[$15>>2]|0;
         $705 = ($703>>>0)<(10);
         if (!($705)) {
          label = 491;
          break L105;
         }
         $706 = 762 >>> $703;
         $707 = $706 & 1;
         $708 = ($707|0)==(0);
         if ($708) {
          label = 491;
          break L105;
         }
         $709 = (568 + ($703<<2)|0);
         $710 = HEAP32[$709>>2]|0;
         $711 = (FUNCTION_TABLE_iiiii[$710 & 127]($413,$431,1,$704)|0);
         HEAP32[$395>>2] = $711;
         $712 = ($711|0)==(0|0);
         if ($712) {
          label = 504;
          break L105;
         } else {
          break L151;
         }
        } else {
         $918 = $917;$919 = $916;$920 = $915;
        }
       } while(0);
       L236: do {
        switch ($435<<24>>24) {
        case 80:  {
         $713 = HEAP8[$417>>0]|0;
         $714 = ($713<<24>>24)==(68);
         if (!($714)) {
          $921 = $920;$922 = $919;$923 = $918;
          break L236;
         }
         $715 = HEAP32[$encoding>>2]|0;
         $716 = HEAP32[$15>>2]|0;
         $717 = ($715>>>0)<(10);
         if (!($717)) {
          label = 509;
          break L105;
         }
         $718 = 762 >>> $715;
         $719 = $718 & 1;
         $720 = ($719|0)==(0);
         if ($720) {
          label = 509;
          break L105;
         }
         $721 = (568 + ($715<<2)|0);
         $722 = HEAP32[$721>>2]|0;
         $723 = (FUNCTION_TABLE_iiiii[$722 & 127]($413,$431,1,$716)|0);
         HEAP32[$396>>2] = $723;
         $724 = ($723|0)==(0|0);
         if ($724) {
          label = 522;
          break L105;
         } else {
          break L151;
         }
         break;
        }
        case 72:  {
         $725 = HEAP8[$417>>0]|0;
         $726 = ($725<<24>>24)==(67);
         if (!($726)) {
          $921 = $920;$922 = $919;$923 = $918;
          break L236;
         }
         $727 = HEAP32[$encoding>>2]|0;
         $728 = HEAP32[$15>>2]|0;
         $729 = ($727>>>0)<(10);
         if (!($729)) {
          label = 526;
          break L105;
         }
         $730 = 762 >>> $727;
         $731 = $730 & 1;
         $732 = ($731|0)==(0);
         if ($732) {
          label = 526;
          break L105;
         }
         $733 = (568 + ($727<<2)|0);
         $734 = HEAP32[$733>>2]|0;
         $735 = (FUNCTION_TABLE_iiiii[$734 & 127]($413,$431,1,$728)|0);
         HEAP32[$397>>2] = $735;
         $736 = ($735|0)==(0|0);
         if ($736) {
          label = 539;
          break L105;
         } else {
          break L151;
         }
         break;
        }
        default: {
         $921 = $920;$922 = $919;$923 = $918;
        }
        }
       } while(0);
       if (!($922)) {
        $924 = $923;$925 = $921;
        label = 559;
        break;
       }
       $$pr650 = HEAP8[$417>>0]|0;
       $738 = $$pr650;$899 = $923;$900 = $921;
       label = 542;
      }
     } while(0);
     if ((label|0) == 542) {
      label = 0;
      $737 = ($738<<24>>24)==(81);
      if ($737) {
       $739 = HEAP32[$encoding>>2]|0;
       $740 = HEAP32[$15>>2]|0;
       $741 = ($739>>>0)<(10);
       if (!($741)) {
        label = 545;
        break;
       }
       $742 = 762 >>> $739;
       $743 = $742 & 1;
       $744 = ($743|0)==(0);
       if ($744) {
        label = 545;
        break;
       }
       $745 = (568 + ($739<<2)|0);
       $746 = HEAP32[$745>>2]|0;
       $747 = (FUNCTION_TABLE_iiiii[$746 & 127]($413,$431,1,$740)|0);
       HEAP32[$398>>2] = $747;
       $748 = ($747|0)==(0|0);
       if ($748) {
        label = 558;
        break;
       }
      } else {
       $924 = $899;$925 = $900;
       label = 559;
      }
     }
     L252: do {
      if ((label|0) == 559) {
       label = 0;
       if ($924) {
        $749 = HEAP8[$417>>0]|0;
        $750 = ($749<<24>>24)==(78);
        if ($750) {
         $751 = HEAP32[$encoding>>2]|0;
         $752 = HEAP32[$15>>2]|0;
         $753 = ($751>>>0)<(10);
         if (!($753)) {
          label = 563;
          break L105;
         }
         $754 = 762 >>> $751;
         $755 = $754 & 1;
         $756 = ($755|0)==(0);
         if ($756) {
          label = 563;
          break L105;
         }
         $757 = (568 + ($751<<2)|0);
         $758 = HEAP32[$757>>2]|0;
         $759 = (FUNCTION_TABLE_iiiii[$758 & 127]($413,$431,5,$752)|0);
         HEAP32[$399>>2] = $759;
         $760 = ($759|0)==(0|0);
         if ($760) {
          label = 576;
          break L105;
         } else {
          break;
         }
        } else {
         $926 = $925;
        }
       } else {
        $926 = $925;
       }
       $761 = ($435<<24>>24)==(81);
       L260: do {
        if ($761) {
         $762 = HEAP8[$417>>0]|0;
         switch ($762<<24>>24) {
         case 83:  {
          $763 = HEAP32[$encoding>>2]|0;
          $764 = HEAP32[$15>>2]|0;
          $765 = ($763>>>0)<(10);
          if (!($765)) {
           label = 581;
           break L105;
          }
          $766 = 762 >>> $763;
          $767 = $766 & 1;
          $768 = ($767|0)==(0);
          if ($768) {
           label = 581;
           break L105;
          }
          $769 = (568 + ($763<<2)|0);
          $770 = HEAP32[$769>>2]|0;
          $771 = (FUNCTION_TABLE_iiiii[$770 & 127]($413,$431,3,$764)|0);
          HEAP32[$400>>2] = $771;
          $772 = ($771|0)==(0|0);
          if ($772) {
           label = 594;
           break L105;
          } else {
           break L252;
          }
          break;
         }
         case 81:  {
          $773 = HEAP32[$encoding>>2]|0;
          $774 = HEAP32[$15>>2]|0;
          $775 = ($773>>>0)<(10);
          if (!($775)) {
           label = 597;
           break L105;
          }
          $776 = 762 >>> $773;
          $777 = $776 & 1;
          $778 = ($777|0)==(0);
          if ($778) {
           label = 597;
           break L105;
          }
          $779 = (568 + ($773<<2)|0);
          $780 = HEAP32[$779>>2]|0;
          $781 = (FUNCTION_TABLE_iiiii[$780 & 127]($413,$431,4,$774)|0);
          HEAP32[$401>>2] = $781;
          $782 = ($781|0)==(0|0);
          if ($782) {
           label = 610;
           break L105;
          } else {
           break L252;
          }
          break;
         }
         default: {
          $927 = $926;
          break L260;
         }
         }
        } else {
         $927 = $926;
        }
       } while(0);
       if ($927) {
        $783 = HEAP8[$417>>0]|0;
        $784 = ($783<<24>>24)==(76);
        if (!($784)) {
         $795 = HEAP8[$417>>0]|0;
         switch ($795<<24>>24) {
         case 86: case 77:  {
          break L252;
          break;
         }
         default: {
          label = 630;
          break L252;
         }
         }
        }
        $785 = HEAP32[$encoding>>2]|0;
        $786 = HEAP32[$15>>2]|0;
        $787 = ($785>>>0)<(10);
        if (!($787)) {
         label = 615;
         break L105;
        }
        $788 = 762 >>> $785;
        $789 = $788 & 1;
        $790 = ($789|0)==(0);
        if ($790) {
         label = 615;
         break L105;
        }
        $791 = (568 + ($785<<2)|0);
        $792 = HEAP32[$791>>2]|0;
        $793 = (FUNCTION_TABLE_iiiii[$792 & 127]($413,$431,1,$786)|0);
        HEAP32[$402>>2] = $793;
        $794 = ($793|0)==(0|0);
        if ($794) {
         label = 628;
         break L105;
        }
       } else {
        label = 630;
       }
      }
     } while(0);
     if ((label|0) == 630) {
      label = 0;
      HEAP32[$vararg_buffer92>>2] = $cp$4;
      _fprintf(9772,17064,$vararg_buffer92);
     }
     $796 = (($413) + ($431)|0);
     $797 = HEAP8[$cp$4>>0]|0;
     $798 = $797 << 24 >> 24;
     $799 = ($798*3)|0;
     $800 = HEAP8[$417>>0]|0;
     $801 = $800&255;
     $802 = (($799) + ($801))|0;
     $803 = $802 & 31;
     $804 = (($51) + ($803<<2)|0);
     $805 = HEAP32[$804>>2]|0;
     $806 = ((($404)) + 20|0);
     HEAP32[$806>>2] = $805;
     $807 = HEAP8[$cp$4>>0]|0;
     $808 = $807 << 24 >> 24;
     $809 = ($808*3)|0;
     $810 = HEAP8[$417>>0]|0;
     $811 = $810&255;
     $812 = (($809) + ($811))|0;
     $813 = $812 & 31;
     $814 = (($51) + ($813<<2)|0);
     HEAP32[$814>>2] = $404;
     $cp$5 = $796;
    }
    $815 = (($i$2) + 1)|0;
    $cp$4 = $cp$5;$i$2 = $815;
   }
   switch (label|0) {
    case 99: {
     _free($$lcssa263);
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 102: {
     _free($404);
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 107: {
     do {
      switch ($439|0) {
      case 0:  {
       $$0$i$i1 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i1 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i1 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i1 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i1 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i1 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i1 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i1 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i1 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i1 = 22683;
       break;
      }
      default: {
       $$0$i$i1 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer2>>2] = $$0$i$i1;
     _fprintf(9772,22691,$vararg_buffer2);
     HEAP32[$373>>2] = 0;
     label = 120;
     break;
    }
    case 125: {
     do {
      switch ($452|0) {
      case 0:  {
       $$0$i$i3 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i3 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i3 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i3 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i3 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i3 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i3 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i3 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i3 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i3 = 22683;
       break;
      }
      default: {
       $$0$i$i3 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer5>>2] = $$0$i$i3;
     _fprintf(9772,22691,$vararg_buffer5);
     HEAP32[$374>>2] = 0;
     label = 138;
     break;
    }
    case 143: {
     do {
      switch ($464|0) {
      case 0:  {
       $$0$i$i7 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i7 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i7 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i7 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i7 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i7 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i7 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i7 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i7 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i7 = 22683;
       break;
      }
      default: {
       $$0$i$i7 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer8>>2] = $$0$i$i7;
     _fprintf(9772,22691,$vararg_buffer8);
     HEAP32[$375>>2] = 0;
     label = 156;
     break;
    }
    case 159: {
     do {
      switch ($474|0) {
      case 0:  {
       $$0$i$i11 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i11 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i11 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i11 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i11 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i11 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i11 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i11 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i11 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i11 = 22683;
       break;
      }
      default: {
       $$0$i$i11 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer11>>2] = $$0$i$i11;
     _fprintf(9772,22691,$vararg_buffer11);
     HEAP32[$376>>2] = 0;
     label = 172;
     break;
    }
    case 177: {
     do {
      switch ($487|0) {
      case 0:  {
       $$0$i$i15 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i15 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i15 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i15 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i15 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i15 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i15 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i15 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i15 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i15 = 22683;
       break;
      }
      default: {
       $$0$i$i15 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer14>>2] = $$0$i$i15;
     _fprintf(9772,22691,$vararg_buffer14);
     HEAP32[$377>>2] = 0;
     label = 190;
     break;
    }
    case 194: {
     do {
      switch ($499|0) {
      case 0:  {
       $$0$i$i19 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i19 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i19 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i19 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i19 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i19 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i19 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i19 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i19 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i19 = 22683;
       break;
      }
      default: {
       $$0$i$i19 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer17>>2] = $$0$i$i19;
     _fprintf(9772,22691,$vararg_buffer17);
     HEAP32[$378>>2] = 0;
     label = 207;
     break;
    }
    case 213: {
     do {
      switch ($513|0) {
      case 0:  {
       $$0$i$i23 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i23 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i23 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i23 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i23 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i23 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i23 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i23 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i23 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i23 = 22683;
       break;
      }
      default: {
       $$0$i$i23 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer20>>2] = $$0$i$i23;
     _fprintf(9772,22691,$vararg_buffer20);
     HEAP32[$379>>2] = 0;
     label = 226;
     break;
    }
    case 231: {
     do {
      switch ($525|0) {
      case 0:  {
       $$0$i$i27 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i27 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i27 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i27 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i27 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i27 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i27 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i27 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i27 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i27 = 22683;
       break;
      }
      default: {
       $$0$i$i27 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer23>>2] = $$0$i$i27;
     _fprintf(9772,22691,$vararg_buffer23);
     HEAP32[$380>>2] = 0;
     label = 244;
     break;
    }
    case 247: {
     do {
      switch ($535|0) {
      case 0:  {
       $$0$i$i31 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i31 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i31 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i31 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i31 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i31 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i31 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i31 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i31 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i31 = 22683;
       break;
      }
      default: {
       $$0$i$i31 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer26>>2] = $$0$i$i31;
     _fprintf(9772,22691,$vararg_buffer26);
     HEAP32[$381>>2] = 0;
     label = 260;
     break;
    }
    case 265: {
     do {
      switch ($548|0) {
      case 0:  {
       $$0$i$i35 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i35 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i35 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i35 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i35 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i35 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i35 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i35 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i35 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i35 = 22683;
       break;
      }
      default: {
       $$0$i$i35 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer29>>2] = $$0$i$i35;
     _fprintf(9772,22691,$vararg_buffer29);
     HEAP32[$382>>2] = 0;
     label = 278;
     break;
    }
    case 282: {
     do {
      switch ($561|0) {
      case 0:  {
       $$0$i$i39 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i39 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i39 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i39 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i39 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i39 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i39 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i39 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i39 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i39 = 22683;
       break;
      }
      default: {
       $$0$i$i39 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer32>>2] = $$0$i$i39;
     _fprintf(9772,22691,$vararg_buffer32);
     HEAP32[$383>>2] = 0;
     label = 295;
     break;
    }
    case 301: {
     do {
      switch ($573|0) {
      case 0:  {
       $$0$i$i43 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i43 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i43 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i43 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i43 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i43 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i43 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i43 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i43 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i43 = 22683;
       break;
      }
      default: {
       $$0$i$i43 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer35>>2] = $$0$i$i43;
     _fprintf(9772,22691,$vararg_buffer35);
     HEAP32[$384>>2] = 0;
     label = 314;
     break;
    }
    case 318: {
     do {
      switch ($585|0) {
      case 0:  {
       $$0$i$i47 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i47 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i47 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i47 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i47 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i47 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i47 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i47 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i47 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i47 = 22683;
       break;
      }
      default: {
       $$0$i$i47 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer38>>2] = $$0$i$i47;
     _fprintf(9772,22691,$vararg_buffer38);
     HEAP32[$385>>2] = 0;
     label = 331;
     break;
    }
    case 336: {
     do {
      switch ($598|0) {
      case 0:  {
       $$0$i$i51 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i51 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i51 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i51 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i51 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i51 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i51 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i51 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i51 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i51 = 22683;
       break;
      }
      default: {
       $$0$i$i51 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer41>>2] = $$0$i$i51;
     _fprintf(9772,22691,$vararg_buffer41);
     HEAP32[$386>>2] = 0;
     label = 349;
     break;
    }
    case 353: {
     do {
      switch ($609|0) {
      case 0:  {
       $$0$i$i55 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i55 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i55 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i55 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i55 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i55 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i55 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i55 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i55 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i55 = 22683;
       break;
      }
      default: {
       $$0$i$i55 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer44>>2] = $$0$i$i55;
     _fprintf(9772,22691,$vararg_buffer44);
     HEAP32[$387>>2] = 0;
     label = 366;
     break;
    }
    case 369: {
     do {
      switch ($619|0) {
      case 0:  {
       $$0$i$i59 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i59 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i59 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i59 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i59 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i59 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i59 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i59 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i59 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i59 = 22683;
       break;
      }
      default: {
       $$0$i$i59 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer47>>2] = $$0$i$i59;
     _fprintf(9772,22691,$vararg_buffer47);
     HEAP32[$388>>2] = 0;
     label = 382;
     break;
    }
    case 387: {
     do {
      switch ($631|0) {
      case 0:  {
       $$0$i$i63 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i63 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i63 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i63 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i63 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i63 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i63 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i63 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i63 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i63 = 22683;
       break;
      }
      default: {
       $$0$i$i63 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer50>>2] = $$0$i$i63;
     _fprintf(9772,22691,$vararg_buffer50);
     HEAP32[$389>>2] = 0;
     label = 400;
     break;
    }
    case 405: {
     do {
      switch ($643|0) {
      case 0:  {
       $$0$i$i67 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i67 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i67 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i67 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i67 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i67 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i67 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i67 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i67 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i67 = 22683;
       break;
      }
      default: {
       $$0$i$i67 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer53>>2] = $$0$i$i67;
     _fprintf(9772,22691,$vararg_buffer53);
     HEAP32[$390>>2] = 0;
     label = 418;
     break;
    }
    case 422: {
     do {
      switch ($655|0) {
      case 0:  {
       $$0$i$i71 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i71 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i71 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i71 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i71 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i71 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i71 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i71 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i71 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i71 = 22683;
       break;
      }
      default: {
       $$0$i$i71 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer56>>2] = $$0$i$i71;
     _fprintf(9772,22691,$vararg_buffer56);
     HEAP32[$391>>2] = 0;
     label = 435;
     break;
    }
    case 439: {
     do {
      switch ($667|0) {
      case 0:  {
       $$0$i$i75 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i75 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i75 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i75 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i75 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i75 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i75 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i75 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i75 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i75 = 22683;
       break;
      }
      default: {
       $$0$i$i75 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer59>>2] = $$0$i$i75;
     _fprintf(9772,22691,$vararg_buffer59);
     HEAP32[$392>>2] = 0;
     label = 452;
     break;
    }
    case 456: {
     do {
      switch ($679|0) {
      case 0:  {
       $$0$i$i79 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i79 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i79 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i79 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i79 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i79 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i79 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i79 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i79 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i79 = 22683;
       break;
      }
      default: {
       $$0$i$i79 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer62>>2] = $$0$i$i79;
     _fprintf(9772,22691,$vararg_buffer62);
     HEAP32[$393>>2] = 0;
     label = 469;
     break;
    }
    case 473: {
     do {
      switch ($691|0) {
      case 0:  {
       $$0$i$i83 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i83 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i83 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i83 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i83 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i83 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i83 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i83 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i83 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i83 = 22683;
       break;
      }
      default: {
       $$0$i$i83 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer65>>2] = $$0$i$i83;
     _fprintf(9772,22691,$vararg_buffer65);
     HEAP32[$394>>2] = 0;
     label = 486;
     break;
    }
    case 491: {
     do {
      switch ($703|0) {
      case 0:  {
       $$0$i$i87 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i87 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i87 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i87 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i87 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i87 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i87 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i87 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i87 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i87 = 22683;
       break;
      }
      default: {
       $$0$i$i87 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer68>>2] = $$0$i$i87;
     _fprintf(9772,22691,$vararg_buffer68);
     HEAP32[$395>>2] = 0;
     label = 504;
     break;
    }
    case 509: {
     do {
      switch ($715|0) {
      case 0:  {
       $$0$i$i91 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i91 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i91 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i91 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i91 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i91 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i91 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i91 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i91 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i91 = 22683;
       break;
      }
      default: {
       $$0$i$i91 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer71>>2] = $$0$i$i91;
     _fprintf(9772,22691,$vararg_buffer71);
     HEAP32[$396>>2] = 0;
     label = 522;
     break;
    }
    case 526: {
     do {
      switch ($727|0) {
      case 0:  {
       $$0$i$i95 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i95 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i95 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i95 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i95 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i95 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i95 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i95 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i95 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i95 = 22683;
       break;
      }
      default: {
       $$0$i$i95 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer74>>2] = $$0$i$i95;
     _fprintf(9772,22691,$vararg_buffer74);
     HEAP32[$397>>2] = 0;
     label = 539;
     break;
    }
    case 545: {
     do {
      switch ($739|0) {
      case 0:  {
       $$0$i$i99 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i99 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i99 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i99 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i99 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i99 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i99 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i99 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i99 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i99 = 22683;
       break;
      }
      default: {
       $$0$i$i99 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer77>>2] = $$0$i$i99;
     _fprintf(9772,22691,$vararg_buffer77);
     HEAP32[$398>>2] = 0;
     label = 558;
     break;
    }
    case 563: {
     do {
      switch ($751|0) {
      case 0:  {
       $$0$i$i103 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i103 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i103 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i103 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i103 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i103 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i103 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i103 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i103 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i103 = 22683;
       break;
      }
      default: {
       $$0$i$i103 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer80>>2] = $$0$i$i103;
     _fprintf(9772,22691,$vararg_buffer80);
     HEAP32[$399>>2] = 0;
     label = 576;
     break;
    }
    case 581: {
     do {
      switch ($763|0) {
      case 0:  {
       $$0$i$i107 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i107 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i107 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i107 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i107 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i107 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i107 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i107 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i107 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i107 = 22683;
       break;
      }
      default: {
       $$0$i$i107 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer83>>2] = $$0$i$i107;
     _fprintf(9772,22691,$vararg_buffer83);
     HEAP32[$400>>2] = 0;
     label = 594;
     break;
    }
    case 597: {
     do {
      switch ($773|0) {
      case 0:  {
       $$0$i$i111 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i111 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i111 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i111 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i111 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i111 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i111 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i111 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i111 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i111 = 22683;
       break;
      }
      default: {
       $$0$i$i111 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer86>>2] = $$0$i$i111;
     _fprintf(9772,22691,$vararg_buffer86);
     HEAP32[$401>>2] = 0;
     label = 610;
     break;
    }
    case 615: {
     do {
      switch ($785|0) {
      case 0:  {
       $$0$i$i115 = 22599;
       break;
      }
      case 1:  {
       $$0$i$i115 = 22604;
       break;
      }
      case 2:  {
       $$0$i$i115 = 22613;
       break;
      }
      case 3:  {
       $$0$i$i115 = 22620;
       break;
      }
      case 4:  {
       $$0$i$i115 = 22628;
       break;
      }
      case 5:  {
       $$0$i$i115 = 22643;
       break;
      }
      case 6:  {
       $$0$i$i115 = 22659;
       break;
      }
      case 7:  {
       $$0$i$i115 = 22664;
       break;
      }
      case 8:  {
       $$0$i$i115 = 22671;
       break;
      }
      case 9:  {
       $$0$i$i115 = 22683;
       break;
      }
      default: {
       $$0$i$i115 = 22689;
      }
      }
     } while(0);
     HEAP32[$vararg_buffer89>>2] = $$0$i$i115;
     _fprintf(9772,22691,$vararg_buffer89);
     HEAP32[$402>>2] = 0;
     label = 628;
     break;
    }
    case 633: {
     $816 = $cp$4;
     $817 = $370;
     $818 = (($816) - ($817))|0;
     $819 = HEAP32[$map_size>>2]|0;
     $820 = ($818|0)==($819|0);
     if (!($820)) {
      _cram_free_compression_header($0);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     $821 = (_safe_itf8_get($cp$4,$14,$map_size)|0);
     $822 = (($cp$4) + ($821)|0);
     $823 = (_safe_itf8_get($822,$14,$map_count)|0);
     $824 = (($822) + ($823)|0);
     $$pre404 = HEAP32[$map_count>>2]|0;
     $cp$6 = $824;$i$3 = 0;
     while(1) {
      $825 = ($i$3|0)<($$pre404|0);
      if (!($825)) {
       label = 658;
       break;
      }
      HEAP32[$encoding1>>2] = 0;
      HEAP32[$size2>>2] = 0;
      $826 = (_malloc(24)|0);
      $827 = ($826|0)==(0|0);
      if ($827) {
       $$lcssa = 0;
       label = 639;
       break;
      }
      $828 = $cp$6;
      $829 = (($64) - ($828))|0;
      $830 = ($829|0)<(6);
      if ($830) {
       $$lcssa = $826;
       label = 639;
       break;
      }
      $831 = ((($cp$6)) + 1|0);
      $832 = HEAP8[$831>>0]|0;
      $833 = $832 << 24 >> 24;
      $834 = $833 << 16;
      $835 = ((($cp$6)) + 2|0);
      $836 = HEAP8[$835>>0]|0;
      $837 = $836 << 24 >> 24;
      $838 = $837 << 8;
      $839 = $834 | $838;
      $840 = ((($cp$6)) + 3|0);
      $841 = HEAP8[$840>>0]|0;
      $842 = $841 << 24 >> 24;
      $843 = $839 | $842;
      HEAP32[$826>>2] = $843;
      $844 = ((($cp$6)) + 4|0);
      $845 = (_safe_itf8_get($844,$14,$encoding1)|0);
      $846 = (($844) + ($845)|0);
      $847 = (_safe_itf8_get($846,$14,$size2)|0);
      $848 = (($846) + ($847)|0);
      $849 = HEAP32[$encoding1>>2]|0;
      $850 = ((($826)) + 4|0);
      HEAP32[$850>>2] = $849;
      $851 = HEAP32[$size2>>2]|0;
      $852 = ((($826)) + 12|0);
      HEAP32[$852>>2] = $851;
      $853 = HEAP32[$10>>2]|0;
      $854 = $848;
      $855 = (($854) - ($853))|0;
      $856 = ((($826)) + 8|0);
      HEAP32[$856>>2] = $855;
      $857 = ($851|0)<(0);
      $858 = (($64) - ($854))|0;
      $859 = ($858|0)<($851|0);
      $or$cond628 = $857 | $859;
      if ($or$cond628) {
       break;
      }
      $860 = HEAP32[$15>>2]|0;
      $861 = ($849>>>0)<(10);
      if (!($861)) {
       label = 643;
       break;
      }
      $862 = 762 >>> $849;
      $863 = $862 & 1;
      $864 = ($863|0)==(0);
      if ($864) {
       label = 643;
       break;
      }
      $866 = (568 + ($849<<2)|0);
      $867 = HEAP32[$866>>2]|0;
      $868 = (FUNCTION_TABLE_iiiii[$867 & 127]($848,$851,5,$860)|0);
      $869 = ((($826)) + 16|0);
      HEAP32[$869>>2] = $868;
      $870 = ($868|0)==(0|0);
      if ($870) {
       break;
      }
      $871 = HEAP8[$831>>0]|0;
      $872 = $871 << 24 >> 24;
      $873 = ($872*3)|0;
      $874 = HEAP8[$835>>0]|0;
      $875 = $874&255;
      $876 = (($873) + ($875))|0;
      $877 = $876 & 31;
      $878 = (($52) + ($877<<2)|0);
      $879 = HEAP32[$878>>2]|0;
      $880 = ((($826)) + 20|0);
      HEAP32[$880>>2] = $879;
      $881 = HEAP8[$831>>0]|0;
      $882 = $881 << 24 >> 24;
      $883 = ($882*3)|0;
      $884 = HEAP8[$835>>0]|0;
      $885 = $884&255;
      $886 = (($883) + ($885))|0;
      $887 = $886 & 31;
      $888 = (($52) + ($887<<2)|0);
      HEAP32[$888>>2] = $826;
      $889 = (($848) + ($851)|0);
      $890 = (($i$3) + 1)|0;
      $cp$6 = $889;$i$3 = $890;
     }
     if ((label|0) == 639) {
      _free($$lcssa);
      _cram_free_compression_header($0);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     else if ((label|0) == 643) {
      do {
       switch ($849|0) {
       case 0:  {
        $$0$i$i119 = 22599;
        break;
       }
       case 1:  {
        $$0$i$i119 = 22604;
        break;
       }
       case 2:  {
        $$0$i$i119 = 22613;
        break;
       }
       case 3:  {
        $$0$i$i119 = 22620;
        break;
       }
       case 4:  {
        $$0$i$i119 = 22628;
        break;
       }
       case 5:  {
        $$0$i$i119 = 22643;
        break;
       }
       case 6:  {
        $$0$i$i119 = 22659;
        break;
       }
       case 7:  {
        $$0$i$i119 = 22664;
        break;
       }
       case 8:  {
        $$0$i$i119 = 22671;
        break;
       }
       case 9:  {
        $$0$i$i119 = 22683;
        break;
       }
       default: {
        $$0$i$i119 = 22689;
       }
       }
      } while(0);
      HEAP32[$vararg_buffer95>>2] = $$0$i$i119;
      _fprintf(9772,22691,$vararg_buffer95);
      $865 = ((($826)) + 16|0);
      HEAP32[$865>>2] = 0;
     }
     else if ((label|0) == 658) {
      $891 = $cp$6;
      $892 = $822;
      $893 = (($891) - ($892))|0;
      $894 = HEAP32[$map_size>>2]|0;
      $895 = ($893|0)==($894|0);
      if ($895) {
       $$0 = $0;
       STACKTOP = sp;return ($$0|0);
      }
      _cram_free_compression_header($0);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     _cram_free_compression_header($0);
     _free($826);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
   }
   switch (label|0) {
    case 120: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 138: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 156: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 172: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 190: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 207: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 226: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 244: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 260: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 278: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 295: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 314: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 331: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 349: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 366: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 382: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 400: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 418: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 435: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 452: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 469: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 486: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 504: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 522: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 539: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 558: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 576: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 594: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 610: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 628: {
     _cram_free_compression_header($0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
     break;
    }
   }
   break;
  }
 }
 if ((label|0) == 85) {
 }
 _cram_free_compression_header($0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _kh_put_map($h,$key,$ret) {
 $h = $h|0;
 $key = $key|0;
 $ret = $ret|0;
 var $$0 = 0, $$0$i = 0, $$014$i = 0, $$05$i = 0, $$lcssa$i = 0, $$lcssa2$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $h$0$i = 0, $h$1$i = 0, $i$0 = 0, $i$1 = 0, $i$1$site$2 = 0, $i$16 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond3$i = 0, $s$pn$i = 0, $site$0 = 0, $site$0$i$0 = 0, $site$27 = 0, $step$0 = 0, $storemerge1 = 0, $x$0 = 0, $x$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($h)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($h)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 do {
  if (!($4)) {
   $5 = HEAP32[$h>>2]|0;
   $6 = ((($h)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7 << 1;
   $9 = ($5>>>0)>($8>>>0);
   if ($9) {
    $10 = (($5) + -1)|0;
    $11 = (_kh_resize_map($h,$10)|0);
    $12 = ($11|0)<(0);
    if (!($12)) {
     break;
    }
    HEAP32[$ret>>2] = -1;
    $13 = HEAP32[$h>>2]|0;
    $$0 = $13;
    return ($$0|0);
   } else {
    $14 = (($5) + 1)|0;
    $15 = (_kh_resize_map($h,$14)|0);
    $16 = ($15|0)<(0);
    if (!($16)) {
     break;
    }
    HEAP32[$ret>>2] = -1;
    $17 = HEAP32[$h>>2]|0;
    $$0 = $17;
    return ($$0|0);
   }
  }
 } while(0);
 $18 = HEAP32[$h>>2]|0;
 $19 = (($18) + -1)|0;
 $20 = HEAP8[$key>>0]|0;
 $21 = $20 << 24 >> 24;
 $22 = ($20<<24>>24)==(0);
 L11: do {
  if ($22) {
   $h$1$i = $21;
  } else {
   $h$0$i = $21;$s$pn$i = $key;
   while(1) {
    $$0$i = ((($s$pn$i)) + 1|0);
    $23 = HEAP8[$$0$i>>0]|0;
    $24 = ($23<<24>>24)==(0);
    if ($24) {
     $h$1$i = $h$0$i;
     break L11;
    }
    $25 = ($h$0$i*31)|0;
    $26 = $23 << 24 >> 24;
    $27 = (($25) + ($26))|0;
    $h$0$i = $27;$s$pn$i = $$0$i;
   }
  }
 } while(0);
 $28 = $h$1$i & $19;
 $29 = $28 >>> 4;
 $30 = ((($h)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($29<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $28 << 1;
 $35 = $34 & 30;
 $36 = 2 << $35;
 $37 = $33 & $36;
 $38 = ($37|0)==(0);
 do {
  if ($38) {
   $39 = ((($h)) + 20|0);
   $i$0 = $28;$site$0 = $18;$step$0 = 0;
   while(1) {
    $40 = $i$0 >>> 4;
    $41 = (($31) + ($40<<2)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $i$0 << 1;
    $44 = $43 & 30;
    $45 = 2 << $44;
    $46 = $42 & $45;
    $47 = ($46|0)==(0);
    if (!($47)) {
     $i$16 = $i$0;$site$27 = $site$0;
     break;
    }
    $48 = 1 << $44;
    $49 = $42 & $48;
    $50 = ($49|0)==(0);
    if ($50) {
     $51 = HEAP32[$39>>2]|0;
     $52 = (($51) + ($i$0<<2)|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = HEAP8[$53>>0]|0;
     $55 = ($54<<24>>24)!=($20<<24>>24);
     $56 = ($54<<24>>24)==(0);
     $or$cond3$i = $56 | $55;
     if ($or$cond3$i) {
      $$lcssa$i = $54;$$lcssa2$i = $20;
     } else {
      $$014$i = $53;$$05$i = $key;
      while(1) {
       $57 = ((($$014$i)) + 1|0);
       $58 = ((($$05$i)) + 1|0);
       $59 = HEAP8[$57>>0]|0;
       $60 = HEAP8[$58>>0]|0;
       $61 = ($59<<24>>24)!=($60<<24>>24);
       $62 = ($59<<24>>24)==(0);
       $or$cond$i = $62 | $61;
       if ($or$cond$i) {
        $$lcssa$i = $59;$$lcssa2$i = $60;
        break;
       } else {
        $$014$i = $57;$$05$i = $58;
       }
      }
     }
     $63 = ($$lcssa$i<<24>>24)==($$lcssa2$i<<24>>24);
     if ($63) {
      $i$16 = $i$0;$site$27 = $site$0;
      break;
     }
    }
    $site$0$i$0 = $50 ? $site$0 : $i$0;
    $64 = (($step$0) + 1)|0;
    $65 = (($i$0) + ($64))|0;
    $66 = $65 & $19;
    $67 = ($66|0)==($28|0);
    if ($67) {
     $i$1 = $28;$x$0 = $site$0$i$0;
     label = 18;
     break;
    } else {
     $i$0 = $66;$site$0 = $site$0$i$0;$step$0 = $64;
    }
   }
   if ((label|0) == 18) {
    $68 = ($x$0|0)==($18|0);
    if ($68) {
     $i$16 = $i$1;$site$27 = $x$0;
    } else {
     $x$3 = $x$0;
     break;
    }
   }
   $69 = $i$16 >>> 4;
   $70 = (($31) + ($69<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $i$16 << 1;
   $73 = $72 & 30;
   $74 = 2 << $73;
   $75 = $71 & $74;
   $76 = ($75|0)==(0);
   $77 = ($site$27|0)==($18|0);
   $or$cond = $76 | $77;
   $i$1$site$2 = $or$cond ? $i$16 : $site$27;
   $x$3 = $i$1$site$2;
  } else {
   $x$3 = $28;
  }
 } while(0);
 $78 = $x$3 >>> 4;
 $79 = (($31) + ($78<<2)|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $x$3 << 1;
 $82 = $81 & 30;
 $83 = 2 << $82;
 $84 = $80 & $83;
 $85 = ($84|0)==(0);
 if ($85) {
  $100 = 1 << $82;
  $101 = $80 & $100;
  $102 = ($101|0)==(0);
  if ($102) {
   $storemerge1 = 0;
  } else {
   $103 = ((($h)) + 20|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (($104) + ($x$3<<2)|0);
   HEAP32[$105>>2] = $key;
   $106 = 3 << $82;
   $107 = $106 ^ -1;
   $108 = HEAP32[$30>>2]|0;
   $109 = (($108) + ($78<<2)|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $110 & $107;
   HEAP32[$109>>2] = $111;
   $112 = ((($h)) + 4|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = (($113) + 1)|0;
   HEAP32[$112>>2] = $114;
   $storemerge1 = 2;
  }
 } else {
  $86 = ((($h)) + 20|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($87) + ($x$3<<2)|0);
  HEAP32[$88>>2] = $key;
  $89 = 3 << $82;
  $90 = $89 ^ -1;
  $91 = HEAP32[$30>>2]|0;
  $92 = (($91) + ($78<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $93 & $90;
  HEAP32[$92>>2] = $94;
  $95 = ((($h)) + 4|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) + 1)|0;
  HEAP32[$95>>2] = $97;
  $98 = HEAP32[$0>>2]|0;
  $99 = (($98) + 1)|0;
  HEAP32[$0>>2] = $99;
  $storemerge1 = 1;
 }
 HEAP32[$ret>>2] = $storemerge1;
 $$0 = $x$3;
 return ($$0|0);
}
function _kh_resize_map($h,$new_n_buckets) {
 $h = $h|0;
 $new_n_buckets = $new_n_buckets|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$pn = 0, $$pre$phi5Z2D = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $h$0$i = 0;
 var $i$0 = 0, $j$1 = 0, $key$0 = 0, $phitmp = 0, $phitmp10 = 0, $s$pn$i = 0, $step$0 = 0, $val$sroa$0$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($new_n_buckets) + -1)|0;
 $1 = $0 >>> 1;
 $2 = $0 | $1;
 $3 = $2 >>> 2;
 $4 = $2 | $3;
 $5 = $4 >>> 4;
 $6 = $4 | $5;
 $7 = $6 >>> 8;
 $8 = $6 | $7;
 $9 = $8 >>> 16;
 $10 = $8 | $9;
 $11 = (($10) + 1)|0;
 $12 = ($11>>>0)<(4);
 $$ = $12 ? 4 : $11;
 $13 = ((($h)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($$>>>0));
 $16 = $15 * 0.77000000000000001;
 $17 = $16 + 0.5;
 $18 = (~~(($17))>>>0);
 $19 = ($14>>>0)<($18>>>0);
 if (!($19)) {
  $$0 = 0;
  return ($$0|0);
 }
 $20 = ($$>>>0)<(16);
 $21 = $$ >>> 4;
 $phitmp10 = $21 << 2;
 $22 = $20 ? 4 : $phitmp10;
 $23 = (_malloc($22)|0);
 $24 = ($23|0)==(0|0);
 if ($24) {
  $$0 = -1;
  return ($$0|0);
 }
 $25 = $$ >>> 4;
 $phitmp = $25 << 2;
 $26 = $20 ? 4 : $phitmp;
 _memset(($23|0),-86,($26|0))|0;
 $27 = HEAP32[$h>>2]|0;
 $28 = ($27>>>0)<($$>>>0);
 $29 = ((($h)) + 20|0);
 do {
  if ($28) {
   $30 = HEAP32[$29>>2]|0;
   $31 = $$ << 2;
   $32 = (_realloc($30,$31)|0);
   $33 = ($32|0)==(0|0);
   if ($33) {
    _free($23);
    $$0 = -1;
    return ($$0|0);
   }
   HEAP32[$29>>2] = $32;
   $34 = ((($h)) + 24|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (_realloc($35,$31)|0);
   $37 = ($36|0)==(0|0);
   if (!($37)) {
    HEAP32[$34>>2] = $36;
    $$pre$phi5Z2D = $34;
    break;
   }
   _free($23);
   $$0 = -1;
   return ($$0|0);
  } else {
   $$pre4 = ((($h)) + 24|0);
   $$pre$phi5Z2D = $$pre4;
  }
 } while(0);
 $38 = ((($h)) + 16|0);
 $39 = (($$) + -1)|0;
 $j$1 = 0;
 while(1) {
  $40 = HEAP32[$h>>2]|0;
  $41 = ($j$1|0)==($40|0);
  if ($41) {
   break;
  }
  $42 = $j$1 >>> 4;
  $43 = HEAP32[$38>>2]|0;
  $44 = (($43) + ($42<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $j$1 << 1;
  $47 = $46 & 30;
  $48 = 3 << $47;
  $49 = $45 & $48;
  $50 = ($49|0)==(0);
  if ($50) {
   $51 = HEAP32[$29>>2]|0;
   $52 = (($51) + ($j$1<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = HEAP32[$$pre$phi5Z2D>>2]|0;
   $55 = (($54) + ($j$1<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = 1 << $47;
   $58 = $45 | $57;
   HEAP32[$44>>2] = $58;
   $key$0 = $53;$val$sroa$0$0 = $56;
   while(1) {
    $59 = HEAP8[$key$0>>0]|0;
    $60 = $59 << 24 >> 24;
    $61 = ($59<<24>>24)==(0);
    L26: do {
     if ($61) {
      $$pn = $60;$step$0 = 0;
     } else {
      $h$0$i = $60;$s$pn$i = $key$0;
      while(1) {
       $$0$i = ((($s$pn$i)) + 1|0);
       $62 = HEAP8[$$0$i>>0]|0;
       $63 = ($62<<24>>24)==(0);
       if ($63) {
        $$pn = $h$0$i;$step$0 = 0;
        break L26;
       }
       $64 = ($h$0$i*31)|0;
       $65 = $62 << 24 >> 24;
       $66 = (($64) + ($65))|0;
       $h$0$i = $66;$s$pn$i = $$0$i;
      }
     }
    } while(0);
    while(1) {
     $i$0 = $$pn & $39;
     $67 = $i$0 >>> 4;
     $68 = (($23) + ($67<<2)|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $i$0 << 1;
     $71 = $70 & 30;
     $72 = 2 << $71;
     $73 = $69 & $72;
     $74 = ($73|0)==(0);
     if (!($74)) {
      break;
     }
     $75 = (($step$0) + 1)|0;
     $76 = (($i$0) + ($75))|0;
     $$pn = $76;$step$0 = $75;
    }
    $77 = $72 ^ -1;
    $78 = $69 & $77;
    HEAP32[$68>>2] = $78;
    $79 = HEAP32[$h>>2]|0;
    $80 = ($i$0>>>0)<($79>>>0);
    if (!($80)) {
     break;
    }
    $81 = HEAP32[$38>>2]|0;
    $82 = (($81) + ($67<<2)|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = 3 << $71;
    $85 = $83 & $84;
    $86 = ($85|0)==(0);
    if (!($86)) {
     break;
    }
    $87 = HEAP32[$29>>2]|0;
    $88 = (($87) + ($i$0<<2)|0);
    $89 = HEAP32[$88>>2]|0;
    HEAP32[$88>>2] = $key$0;
    $90 = HEAP32[$$pre$phi5Z2D>>2]|0;
    $91 = (($90) + ($i$0<<2)|0);
    $92 = HEAP32[$91>>2]|0;
    HEAP32[$91>>2] = $val$sroa$0$0;
    $93 = 1 << $71;
    $94 = HEAP32[$38>>2]|0;
    $95 = (($94) + ($67<<2)|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $96 | $93;
    HEAP32[$95>>2] = $97;
    $key$0 = $89;$val$sroa$0$0 = $92;
   }
   $98 = HEAP32[$29>>2]|0;
   $99 = (($98) + ($i$0<<2)|0);
   HEAP32[$99>>2] = $key$0;
   $100 = HEAP32[$$pre$phi5Z2D>>2]|0;
   $101 = (($100) + ($i$0<<2)|0);
   HEAP32[$101>>2] = $val$sroa$0$0;
  }
  $102 = (($j$1) + 1)|0;
  $j$1 = $102;
 }
 $103 = ($j$1>>>0)>($$>>>0);
 if ($103) {
  $104 = HEAP32[$29>>2]|0;
  $105 = $$ << 2;
  $106 = (_realloc($104,$105)|0);
  HEAP32[$29>>2] = $106;
  $107 = HEAP32[$$pre$phi5Z2D>>2]|0;
  $108 = (_realloc($107,$105)|0);
  HEAP32[$$pre$phi5Z2D>>2] = $108;
 }
 $109 = HEAP32[$38>>2]|0;
 _free($109);
 HEAP32[$38>>2] = $23;
 HEAP32[$h>>2] = $$;
 $110 = HEAP32[$13>>2]|0;
 $111 = ((($h)) + 8|0);
 HEAP32[$111>>2] = $110;
 $112 = ((($h)) + 12|0);
 HEAP32[$112>>2] = $18;
 $$0 = 0;
 return ($$0|0);
}
function _cram_decode_slice($fd,$c,$s,$bfd) {
 $fd = $fd|0;
 $c = $c|0;
 $s = $s|0;
 $bfd = $bfd|0;
 var $$ = 0, $$$ = 0, $$$$ = 0, $$$$$ = 0, $$$$$$ = 0, $$$$$$$ = 0, $$$$$$$$ = 0, $$$$$$$$$ = 0, $$$$$$$$$$ = 0, $$$$$$$$$$$ = 0, $$$$$$$$$$$$ = 0, $$$$$$$$$$$$$$$$$$$ = 0, $$$i = 0, $$$i$i = 0, $$0 = 0, $$0$i$i40 = 0, $$0$i$i54 = 0, $$0$i1460 = 0, $$0$i3$i56 = 0, $$0$i36 = 0;
 var $$0$i46 = 0, $$0$i51 = 0, $$0$i52 = 0, $$0$i858 = 0, $$01$lcssa$i$i = 0, $$014$i = 0, $$014$i$i = 0, $$03$i = 0, $$03$i27 = 0, $$05$i = 0, $$1$i = 0, $$1$i21 = 0, $$1$lcssa$i$i = 0, $$12$i = 0, $$12$i20 = 0, $$457 = 0, $$465 = 0, $$469 = 0, $$475 = 0, $$486 = 0;
 var $$487 = 0, $$494 = 0, $$522 = 0, $$526 = 0, $$aright$0$i = 0, $$demorgan = 0, $$demorgan545 = 0, $$has_MD$0 = 0, $$left_cnt$0$i = 0, $$lobit = 0, $$mask = 0, $$mask1 = 0, $$mask2 = 0, $$mask3 = 0, $$mask4 = 0, $$mask534 = 0, $$mux = 0, $$n_id$2$i$i = 0, $$n_id$2$i11$i = 0, $$not = 0;
 var $$not488 = 0, $$not491 = 0, $$not492 = 0, $$not495 = 0, $$not496 = 0, $$not501 = 0, $$not506 = 0, $$not511 = 0, $$not517 = 0, $$phi$trans$insert = 0, $$phi$trans$insert241 = 0, $$phi$trans$insert257 = 0, $$phi$trans$insert264 = 0, $$phi$trans$insert270 = 0, $$phi$trans$insert276 = 0, $$pn = 0, $$pn$i$i = 0, $$pn15$i$i = 0, $$pre = 0, $$pre$i$i = 0;
 var $$pre$phi283Z2D = 0, $$pre$phi291Z2D = 0, $$pre$phi293Z2D = 0, $$pre$phiZ2D = 0, $$pre222 = 0, $$pre223 = 0, $$pre224 = 0, $$pre225 = 0, $$pre226 = 0, $$pre227 = 0, $$pre228 = 0, $$pre229 = 0, $$pre230 = 0, $$pre231 = 0, $$pre232 = 0, $$pre233 = 0, $$pre234 = 0, $$pre235 = 0, $$pre236 = 0, $$pre239 = 0;
 var $$pre242 = 0, $$pre243 = 0, $$pre244 = 0, $$pre245 = 0, $$pre248 = 0, $$pre250 = 0, $$pre251 = 0, $$pre255 = 0, $$pre256 = 0, $$pre258 = 0, $$pre260 = 0, $$pre261 = 0, $$pre262 = 0, $$pre263 = 0, $$pre265 = 0, $$pre266 = 0, $$pre267 = 0, $$pre268 = 0, $$pre269 = 0, $$pre271 = 0;
 var $$pre272 = 0, $$pre273 = 0, $$pre274 = 0, $$pre275 = 0, $$pre277 = 0, $$pre279 = 0, $$pre282 = 0, $$pre290 = 0, $$pre292 = 0, $$pre294 = 0, $$pre296 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0;
 var $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0;
 var $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0;
 var $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0;
 var $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0;
 var $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0;
 var $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0;
 var $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0;
 var $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0.0, $1149 = 0.0;
 var $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0;
 var $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0;
 var $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0;
 var $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0;
 var $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0;
 var $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0;
 var $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0.0;
 var $1276 = 0.0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0;
 var $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0;
 var $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0.0, $1325 = 0.0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0;
 var $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0;
 var $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0.0, $1354 = 0.0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0;
 var $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0;
 var $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0;
 var $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0.0, $1417 = 0.0, $1418 = 0, $1419 = 0;
 var $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0;
 var $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0;
 var $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0;
 var $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0;
 var $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0;
 var $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0;
 var $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0;
 var $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0;
 var $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0;
 var $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0;
 var $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0;
 var $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0;
 var $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0;
 var $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0.0, $1671 = 0.0;
 var $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0;
 var $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0;
 var $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0;
 var $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0;
 var $1744 = 0, $1745 = 0, $1746 = 0.0, $1747 = 0.0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0;
 var $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0;
 var $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0.0, $1786 = 0.0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0;
 var $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0.0, $1811 = 0.0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0;
 var $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0;
 var $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0.0, $1847 = 0.0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0;
 var $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0;
 var $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0.0, $1876 = 0.0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0;
 var $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0;
 var $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0.0, $1913 = 0.0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0;
 var $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0;
 var $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0;
 var $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0;
 var $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0;
 var $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0;
 var $2013 = 0, $2014 = 0.0, $2015 = 0.0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0;
 var $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0.0;
 var $205 = 0, $2050 = 0.0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0;
 var $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0;
 var $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0.0, $209 = 0, $2090 = 0.0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0;
 var $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0;
 var $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0;
 var $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0;
 var $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0.0, $2162 = 0.0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0;
 var $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0;
 var $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0.0, $2201 = 0.0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0;
 var $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0;
 var $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0;
 var $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0;
 var $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0;
 var $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0;
 var $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0;
 var $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0;
 var $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0;
 var $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0;
 var $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0;
 var $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0.0, $24 = 0, $240 = 0, $2400 = 0.0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0;
 var $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0;
 var $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0;
 var $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0;
 var $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0.0, $2476 = 0.0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0;
 var $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0;
 var $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0.0, $2511 = 0.0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0;
 var $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0;
 var $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0;
 var $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0;
 var $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0;
 var $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0;
 var $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0;
 var $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0;
 var $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0;
 var $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0;
 var $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0;
 var $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0;
 var $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0;
 var $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0;
 var $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0;
 var $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0;
 var $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $M = 0, $TL$i = 0, $TN$0$i = 0;
 var $aleft$0$i = 0, $aleft$1$i = 0, $aright$0$i = 0, $base1$i = 0, $bf = 0, $bnum1$0$i = 0, $bnum1$0$i6 = 0, $bnum1$1$i = 0, $bnum11$0$i = 0, $bnum15$0$i = 0, $bnum19$0$i = 0, $bnum2$i = 0, $bnum2$i$i = 0, $bnum2$i5 = 0, $bnum2$i5$i = 0, $bnum210$i = 0, $bnum22$i = 0, $bnum26$i = 0, $brmerge = 0, $brmerge481 = 0;
 var $brmerge493 = 0, $brmerge497 = 0, $brmerge500 = 0, $brmerge502 = 0, $brmerge505 = 0, $brmerge507 = 0, $brmerge510 = 0, $brmerge512 = 0, $brmerge513 = 0, $brmerge516 = 0, $brmerge518 = 0, $brmerge521 = 0, $cf = 0, $cig_len$0$i = 0, $cig_len$1$i = 0, $cig_len$10$i = 0, $cig_len$11$i = 0, $cig_len$12$i = 0, $cig_len$13$i = 0, $cig_len$15$i = 0;
 var $cig_len$17$i = 0, $cig_len$2$i = 0, $cig_len$20$i = 0, $cig_len$21$i = 0, $cig_len$23$i = 0, $cig_len$23$i558 = 0, $cig_len$4$i = 0, $cig_len$5$i = 0, $cig_len$7$i = 0, $cig_len$9$i = 0, $cig_op$0$i = 0, $cig_op$1$i = 0, $cig_op$11$i = 0, $cig_op$11$i556 = 0, $cig_op$9$i = 0, $cigar$0$i = 0, $cigar$1$i = 0, $cigar$2$i = 0, $cigar$4$i = 0, $cigar$4$i555 = 0;
 var $cigar$5$i = 0, $cigar$6$i = 0, $cigar_alloc$0$i = 0, $cigar_alloc$1$i = 0, $cigar_alloc$2$i = 0, $cigar_alloc$4$i = 0, $cigar_alloc$4$i561 = 0, $cigar_alloc$5$i = 0, $cigar_alloc$6$i = 0, $cond = 0, $core_used$0$i = 0, $core_used$1$i = 0, $core_used$2$i = 0, $core_used$3$i = 0, $core_used$4$i = 0, $core_used$5$i = 0, $core_used$6$i$ph = 0, $core_used$7$i = 0, $core_used$8$i = 0, $core_used$9$i = 0;
 var $decode_md$0$i65 = 0, $decode_md$0$i66 = 0, $decode_md$0$i66554 = 0, $decode_md$0$i69 = 0, $decode_md$0$i70 = 0, $decode_nm$0$i72 = 0, $digest = 0, $e_type$0$i$i = 0, $e_type$0$i8$i = 0, $e_type$1$i$i = 0, $e_type$1$i10$i = 0, $e_type$2$i$i = 0, $e_type$2$i12$i = 0, $e_type$3$i$i = 0, $e_type$3$i15$i = 0, $exitcond = 0, $exitcond450 = 0, $exitcond451 = 0, $exitcond452 = 0, $exitcond453 = 0;
 var $exitcond454 = 0, $f$0$i = 0, $fn$i = 0, $has_MD$0 = 0, $has_MD$2 = 0, $has_MD$3 = 0, $has_MD$4 = 0, $has_NM$0 = 0, $has_NM$1 = 0, $has_NM$2 = 0, $has_NM$3 = 0, $i$0 = 0, $i$0$i = 0, $i$0$i$i = 0, $i$0$i1$i = 0, $i$0$i13 = 0, $i$0$i2$i = 0, $i$0$i32 = 0, $i$0$i33 = 0, $i$0$i35 = 0;
 var $i$0$i41 = 0, $i$0$i50 = 0, $i$0$i6$i = 0, $i$0$i7 = 0, $i$1$i = 0, $i$2$i = 0, $i$3$i = 0, $i$4$i = 0, $i11$0$i = 0, $i32$i = 0, $i4$0 = 0, $id$i = 0, $id2$0$i = 0, $id2$1$i = 0, $id2$1$in$i = 0, $id2$2$i = 0, $id2$2$in$i = 0, $j$0$i = 0, $j11$0$i = 0, $j3$0$i = 0;
 var $j7$0$i = 0, $l$04$i = 0, $l$04$i26 = 0, $last_ref_id$0 = 0, $last_ref_id$3 = 0, $left_cnt$0$i = 0, $left_cnt$2$i = 0, $len$0 = 0, $len$1 = 0, $len$i = 0, $len8$i = 0, $m$0$i$i = 0, $m$0$i$i44 = 0, $m$0$i$ph = 0, $m$0$i$ph$in = 0, $m$0$in$i$i = 0, $m$0$in$i$i43 = 0, $m12$0$i$ph = 0, $m12$0$i$ph$in = 0, $md_dist$i = 0;
 var $mf = 0, $n_id$0$i$i = 0, $n_id$0$i7$i = 0, $n_id$1$i$i = 0, $n_id$1$i9$i = 0, $n_id$2$i$i = 0, $n_id$2$i11$i = 0, $n_id$4$i$i = 0, $n_id$4$i14$i = 0, $ncigar$0$i = 0, $ncigar$1$i = 0, $ncigar$10$i = 0, $ncigar$11$i = 0, $ncigar$12$i = 0, $ncigar$13$i = 0, $ncigar$14$i = 0, $ncigar$16$i = 0, $ncigar$17$i = 0, $ncigar$19$i = 0, $ncigar$19$i560 = 0;
 var $ncigar$2$i = 0, $ncigar$20$i = 0, $ncigar$3$i = 0, $ncigar$5$i = 0, $ncigar$6$i = 0, $ncigar$7$i = 0, $ncigar$8$i = 0, $ncigar$9$i = 0, $nm$0$i = 0, $nm$1$i = 0, $nm$10$i = 0, $nm$12$i = 0, $nm$16$i = 0, $nm$17$i = 0, $nm$19$i = 0, $nm$2$i = 0, $nm$21$i = 0, $nm$22$i = 0, $nm$23$i = 0, $nm$25$i = 0;
 var $nm$27$i = 0, $nm$29$i = 0, $nm$29$i562 = 0, $nm$5$i = 0, $nm$6$i = 0, $nm$9$i = 0, $not$ = 0, $not$533 = 0, $nsize$0 = 0, $ntags$i = 0, $op$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond298 = 0, $or$cond456 = 0, $or$cond458 = 0, $or$cond459 = 0, $or$cond460 = 0, $or$cond466 = 0, $or$cond470 = 0;
 var $or$cond474 = 0, $or$cond478 = 0, $or$cond482 = 0, $or$cond483 = 0, $or$cond485 = 0, $or$cond490 = 0, $or$cond523 = 0, $or$cond523$not = 0, $or$cond525 = 0, $or$cond528 = 0, $or$cond529 = 0, $or$cond530 = 0, $or$cond532 = 0, $orig_aux$0$i = 0, $out_sz = 0, $out_sz$i = 0, $out_sz$i37 = 0, $out_sz$i47 = 0, $out_sz1$i = 0, $out_sz1$i38 = 0;
 var $out_sz2 = 0, $out_sz2$i = 0, $out_sz214$i = 0, $out_sz22 = 0, $out_sz23 = 0, $out_sz24$i = 0, $pos$i = 0, $prev_pos$0$i = 0, $prev_pos$1$i = 0, $qsize$1 = 0, $qual$0 = 0, $qual$1 = 0, $r$0$i = 0, $r$05$i = 0, $r$05$i25 = 0, $r$1$i49 = 0, $r$12$i = 0, $r$13$i = 0, $r$19$i = 0, $r$2$i = 0;
 var $r$20$i = 0, $r$20$i559 = 0, $r$21$i = 0, $r$23$i = 0, $r$5$i = 0, $rec$0 = 0, $rec$0$i = 0, $rec$1$i = 0, $ref$0$i = 0, $ref$0$i$ = 0, $ref$2$i = 0, $ref_pos$0$i = 0, $ref_pos$1$i = 0, $ref_pos$5$i = 0, $ref_pos$7$i = 0, $ref_pos$9$i = 0, $ref_pos$9$i557 = 0, $refs$0 = 0, $req$0$i = 0, $req$0$i$i = 0;
 var $seq$0 = 0, $seq$1 = 0, $seq_pos$0$i = 0, $seq_pos$1$i = 0, $seq_pos$5$i = 0, $start$0 = 0, $storemerge$i = 0, $switch$split2D = 0, $tag_data$i$sroa$0$0 = 0, $tag_data$i$sroa$0$0$in = 0, $tag_data$i$sroa$12$0 = 0, $tag_data$i$sroa$18$0 = 0, $tag_data$i$sroa$18$0$in = 0, $unknown_rg$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0;
 var $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer40 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr43 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $w$0$i$i = 0, $x$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer40 = sp + 136|0;
 $vararg_buffer38 = sp + 128|0;
 $vararg_buffer35 = sp + 120|0;
 $vararg_buffer33 = sp + 112|0;
 $vararg_buffer30 = sp + 104|0;
 $vararg_buffer27 = sp + 96|0;
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer19 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $out_sz$i47 = sp + 252|0;
 $fn$i = sp + 248|0;
 $i32$i = sp + 244|0;
 $md_dist$i = sp + 240|0;
 $pos$i = sp + 236|0;
 $op$i = sp + 315|0;
 $out_sz2$i = sp + 232|0;
 $base1$i = sp + 314|0;
 $out_sz24$i = sp + 228|0;
 $len$i = sp + 224|0;
 $len8$i = sp + 220|0;
 $out_sz214$i = sp + 216|0;
 $out_sz$i37 = sp + 212|0;
 $TL$i = sp + 208|0;
 $out_sz1$i38 = sp + 204|0;
 $out_sz$i = sp + 200|0;
 $ntags$i = sp + 313|0;
 $id$i = sp + 196|0;
 $out_sz1$i = sp + 192|0;
 $bnum2$i5$i = sp + 188|0;
 $bnum2$i$i = sp + 184|0;
 $bnum2$i5 = sp + 180|0;
 $bnum2$i = sp + 176|0;
 $bnum22$i = sp + 172|0;
 $bnum26$i = sp + 168|0;
 $bnum210$i = sp + 164|0;
 $bf = sp + 160|0;
 $cf = sp + 312|0;
 $out_sz = sp + 156|0;
 $digest = sp + 296|0;
 $M = sp + 257|0;
 $out_sz2 = sp + 152|0;
 $mf = sp + 256|0;
 $out_sz22 = sp + 148|0;
 $out_sz23 = sp + 144|0;
 $0 = ((($s)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($c)) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($fd)) + 312|0);
 $6 = HEAP32[$5>>2]|0;
 $switch$split2D = ($6|0)<(2147483647);
 if ($switch$split2D) {
  switch ($6|0) {
  case 0:  {
   label = 32;
   break;
  }
  default: {
   label = 2;
  }
  }
 } else {
  switch ($6|0) {
  case 2147483647:  {
   label = 32;
   break;
  }
  default: {
   label = 2;
  }
  }
 }
 do {
  if ((label|0) == 2) {
   $7 = ((($4)) + 548|0);
   HEAP32[$7>>2] = 0;
   $8 = HEAP32[$5>>2]|0;
   $9 = $8 & 1;
   $10 = ($9|0)==(0);
   if ($10) {
    $12 = $8;$15 = 0;
   } else {
    HEAP32[$7>>2] = 32768;
    $$pre = HEAP32[$5>>2]|0;
    $12 = $$pre;$15 = 32768;
   }
   $11 = $12 & 2;
   $13 = ($11|0)==(0);
   if ($13) {
    $17 = $12;$20 = $15;
   } else {
    $14 = $15 | 1;
    HEAP32[$7>>2] = $14;
    $$pre222 = HEAP32[$5>>2]|0;
    $17 = $$pre222;$20 = $14;
   }
   $16 = $17 & 4;
   $18 = ($16|0)==(0);
   if ($18) {
    $22 = $17;$25 = $20;
   } else {
    $19 = $20 | 2097153;
    HEAP32[$7>>2] = $19;
    $$pre223 = HEAP32[$5>>2]|0;
    $22 = $$pre223;$25 = $19;
   }
   $21 = $22 & 8;
   $23 = ($21|0)==(0);
   if ($23) {
    $27 = $22;$30 = $25;
   } else {
    $24 = $25 | 3;
    HEAP32[$7>>2] = $24;
    $$pre224 = HEAP32[$5>>2]|0;
    $27 = $$pre224;$30 = $24;
   }
   $26 = $27 & 16;
   $28 = ($26|0)==(0);
   if ($28) {
    $32 = $27;$35 = $30;
   } else {
    $29 = $30 | 8192;
    HEAP32[$7>>2] = $29;
    $$pre225 = HEAP32[$5>>2]|0;
    $32 = $$pre225;$35 = $29;
   }
   $31 = $32 & 32;
   $33 = ($31|0)==(0);
   if ($33) {
    $37 = $32;$40 = $35;
   } else {
    $34 = $35 | 62917405;
    HEAP32[$7>>2] = $34;
    $$pre226 = HEAP32[$5>>2]|0;
    $37 = $$pre226;$40 = $34;
   }
   $36 = $37 & 64;
   $38 = ($36|0)==(0);
   if ($38) {
    $42 = $37;$45 = $40;
   } else {
    $39 = $40 | 3211297;
    HEAP32[$7>>2] = $39;
    $$pre227 = HEAP32[$5>>2]|0;
    $42 = $$pre227;$45 = $39;
   }
   $41 = $42 & 128;
   $43 = ($41|0)==(0);
   if ($43) {
    $47 = $42;$50 = $45;
   } else {
    $44 = $45 | 1179683;
    HEAP32[$7>>2] = $44;
    $$pre228 = HEAP32[$5>>2]|0;
    $47 = $$pre228;$50 = $44;
   }
   $46 = $47 & 256;
   $48 = ($46|0)==(0);
   if ($48) {
    $52 = $47;$55 = $50;
   } else {
    $49 = $50 | 66849599;
    HEAP32[$7>>2] = $49;
    $$pre229 = HEAP32[$5>>2]|0;
    $52 = $$pre229;$55 = $49;
   }
   $51 = $52 & 512;
   $53 = ($51|0)==(0);
   if ($53) {
    $57 = $52;
   } else {
    $54 = $55 | 130027359;
    HEAP32[$7>>2] = $54;
    $$pre230 = HEAP32[$5>>2]|0;
    $57 = $$pre230;
   }
   $56 = $57 & 2048;
   $58 = ($56|0)==(0);
   if ($58) {
    $59 = ((($fd)) + 268|0);
    HEAP32[$59>>2] = 0;
   }
   $60 = $57 & 1024;
   $61 = ($60|0)==(0);
   if ($61) {
    $65 = $57;
   } else {
    $62 = HEAP32[$7>>2]|0;
    $63 = $62 | 331352991;
    HEAP32[$7>>2] = $63;
    $$pre231 = HEAP32[$5>>2]|0;
    $65 = $$pre231;
   }
   $64 = $65 & 2048;
   $66 = ($64|0)==(0);
   if ($66) {
    $70 = $65;
   } else {
    $67 = HEAP32[$7>>2]|0;
    $68 = $67 | 1073762304;
    HEAP32[$7>>2] = $68;
    $$pre232 = HEAP32[$5>>2]|0;
    $70 = $$pre232;
   }
   $69 = $70 & 4096;
   $71 = ($69|0)==(0);
   if (!($71)) {
    $72 = HEAP32[$7>>2]|0;
    $73 = $72 | 4097;
    HEAP32[$7>>2] = $73;
   }
   $74 = HEAP32[$0>>2]|0;
   $75 = HEAP32[$74>>2]|0;
   $76 = (_cram_uncompress_block($75)|0);
   $77 = ($76|0)==(0);
   if (!($77)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $78 = HEAP32[$s>>2]|0;
   $79 = ((($78)) + 32|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (($80) + 1)|0;
   $82 = ($81|0)==(0);
   if ($82) {
    $req$0$i$i = 0;
   } else {
    $94 = $81 << 2;
    $95 = ($81>>>0)>(65535);
    if ($95) {
     $96 = (($94>>>0) / ($81>>>0))&-1;
     $97 = ($96|0)==(4);
     $$$i$i = $97 ? $94 : -1;
     $req$0$i$i = $$$i$i;
    } else {
     $req$0$i$i = $94;
    }
   }
   $98 = (_malloc($req$0$i$i)|0);
   $99 = ($98|0)==(0|0);
   if ($99) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $100 = ((($98)) + -4|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = $101 & 3;
   $103 = ($102|0)==(0);
   if (!($103)) {
    _memset(($98|0),0,($req$0$i$i|0))|0;
   }
   $104 = ((($4)) + 40|0);
   $$pre233 = HEAP32[$7>>2]|0;
   $106 = $$pre233;$core_used$0$i = 0;
   L63: while(1) {
    $105 = $106 & 4194304;
    $107 = ($105|0)==(0);
    $108 = $106 | 260;
    $109 = $107 ? $106 : $108;
    $110 = $109 & 8388608;
    $111 = ($110|0)==(0);
    $$ = $111 ? $109 : $108;
    $112 = $105 | $110;
    $113 = $$ & 16777216;
    $114 = ($113|0)==(0);
    $$$ = $114 ? $$ : $108;
    $115 = $$$ & 128;
    $116 = ($115|0)==(0);
    $117 = $$$ | 260;
    $$$$ = $116 ? $$$ : $117;
    $118 = $113 | $112;
    $119 = $$$$ & 2048;
    $120 = ($119|0)==(0);
    $$$$$ = $120 ? $$$$ : $117;
    $121 = $115 | $118;
    $122 = $$$$$ & 33554432;
    $123 = ($122|0)==(0);
    $$$$$$ = $123 ? $$$$$ : $117;
    $124 = $119 | $121;
    $125 = $$$$$$ & 1024;
    $126 = ($125|0)==(0);
    $127 = $$$$$$ | 260;
    $$$$$$$ = $126 ? $$$$$$ : $127;
    $128 = $122 | $124;
    $129 = $$$$$$$ & 16;
    $130 = ($129|0)==(0);
    $$$$$$$$ = $130 ? $$$$$$$ : $127;
    $131 = $125 | $128;
    $132 = $$$$$$$$ & 64;
    $133 = ($132|0)==(0);
    $$$$$$$$$ = $133 ? $$$$$$$$ : $127;
    $134 = $129 | $131;
    $135 = $$$$$$$$$ & 67108864;
    $136 = ($135|0)==(0);
    $137 = $$$$$$$$$ | 260;
    $$$$$$$$$$ = $136 ? $$$$$$$$$ : $137;
    $138 = $132 | $134;
    $139 = $$$$$$$$$$ & 268435456;
    $140 = ($139|0)==(0);
    $$$$$$$$$$$ = $140 ? $$$$$$$$$$ : $137;
    $141 = $135 | $138;
    $142 = $$$$$$$$$$$ & 130027359;
    $143 = ($142|0)==(0);
    $144 = $$$$$$$$$$$ | 8;
    $$$$$$$$$$$$ = $143 ? $$$$$$$$$$$ : $144;
    $145 = $139 | $141;
    $146 = $$$$$$$$$$$$ & 4;
    $147 = $146 << 6;
    $148 = $147 | $$$$$$$$$$$$;
    $149 = $142 | $145;
    $150 = $149 | $146;
    $151 = $148 & 256;
    $152 = $151 << 1;
    $153 = $152 | $148;
    $154 = $150 | $151;
    $155 = $$$$$$$$$$$$ & 1073741824;
    $156 = $155 >>> 16;
    $157 = $156 | $153;
    $158 = $154 | $155;
    $159 = $$$$$$$$$$$$ & 524288;
    $160 = $159 << 1;
    $161 = $160 | $157;
    $162 = $158 | $159;
    $163 = $$$$$$$$$$$$ & 8192;
    $164 = $163 >>> 13;
    $165 = $164 | $161;
    $166 = $162 | $163;
    $167 = $$$$$$$$$$$$ & 1024;
    $168 = $167 << 11;
    $169 = $168 | $165;
    $170 = $166 | $167;
    $171 = $$$$$$$$$$$$ & 983072;
    $172 = ($171|0)==(0);
    $173 = $169 | 1048576;
    $$$$$$$$$$$$$$$$$$$ = $172 ? $169 : $173;
    $174 = $172 ^ 1;
    $175 = ($170|0)!=(0);
    $176 = $175 | $174;
    if ($176) {
     HEAP32[$7>>2] = $$$$$$$$$$$$$$$$$$$;
    }
    $177 = HEAP32[$104>>2]|0;
    $178 = ($177|0)!=(0);
    $179 = $$$$$$$$$$$$$$$$$$$ & 32768;
    $180 = ($179|0)==(0);
    $or$cond456 = $178 | $180;
    $181 = $$$$$$$$$$$$$$$$$$$ | 1048608;
    $182 = $or$cond456 ? $$$$$$$$$$$$$$$$$$$ : $181;
    $183 = $182 & 335544512;
    $184 = ($183|0)==(0);
    $185 = $182 | 1048585;
    $$457 = $184 ? $182 : $185;
    $$demorgan = $178 | $180;
    $$demorgan545 = $$demorgan & $184;
    if ($$demorgan545) {
     $core_used$1$i = $core_used$0$i;$i$1$i = 0;
    } else {
     HEAP32[$7>>2] = $$457;
     $core_used$1$i = $core_used$0$i;$i$1$i = 0;
    }
    while(1) {
     $186 = ($i$1$i>>>0)<(28);
     if (!($186)) {
      break;
     }
     $187 = (264 + ($i$1$i<<2)|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = (((($4)) + 348|0) + ($188<<2)|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = HEAP32[$7>>2]|0;
     $192 = 1 << $i$1$i;
     $193 = $191 & $192;
     $194 = ($193|0)==(0);
     $195 = ($190|0)==(0|0);
     $or$cond458 = $194 | $195;
     L73: do {
      if ($or$cond458) {
       $core_used$4$i = $core_used$1$i;
      } else {
       $196 = (_cram_codec_to_id($190,$bnum2$i)|0);
       $bnum1$0$i = $196;$core_used$2$i = $core_used$1$i;
       while(1) {
        L77: do {
         switch ($bnum1$0$i|0) {
         case -2:  {
          $core_used$3$i = $core_used$2$i;
          break;
         }
         case -1:  {
          $core_used$3$i = 1;
          break;
         }
         default: {
          $j$0$i = 0;
          while(1) {
           $197 = HEAP32[$s>>2]|0;
           $198 = ((($197)) + 32|0);
           $199 = HEAP32[$198>>2]|0;
           $200 = ($j$0$i|0)<($199|0);
           if (!($200)) {
            $core_used$3$i = $core_used$2$i;
            break L77;
           }
           $201 = HEAP32[$0>>2]|0;
           $202 = (($201) + ($j$0$i<<2)|0);
           $203 = HEAP32[$202>>2]|0;
           $204 = ((($203)) + 8|0);
           $205 = HEAP32[$204>>2]|0;
           $206 = ($205|0)==(4);
           do {
            if ($206) {
             $207 = ((($203)) + 12|0);
             $208 = HEAP32[$207>>2]|0;
             $209 = ($208|0)==($bnum1$0$i|0);
             if (!($209)) {
              break;
             }
             $210 = (($98) + ($j$0$i<<2)|0);
             HEAP32[$210>>2] = 1;
             $211 = HEAP32[$0>>2]|0;
             $212 = (($211) + ($j$0$i<<2)|0);
             $213 = HEAP32[$212>>2]|0;
             $214 = (_cram_uncompress_block($213)|0);
             $215 = ($214|0)==(0);
             if (!($215)) {
              label = 55;
              break L63;
             }
            }
           } while(0);
           $216 = (($j$0$i) + 1)|0;
           $j$0$i = $216;
          }
         }
         }
        } while(0);
        $217 = HEAP32[$bnum2$i>>2]|0;
        $218 = ($217|0)==(-2);
        $219 = ($bnum1$0$i|0)==($217|0);
        $or$cond459 = $218 | $219;
        if ($or$cond459) {
         $core_used$4$i = $core_used$3$i;
         break L73;
        } else {
         $bnum1$0$i = $217;$core_used$2$i = $core_used$3$i;
        }
       }
      }
     } while(0);
     $220 = (($i$1$i) + 1)|0;
     $core_used$1$i = $core_used$4$i;$i$1$i = $220;
    }
    $221 = HEAP32[$5>>2]|0;
    $222 = $221 & 2048;
    $223 = ($222|0)==(0);
    if ($223) {
     $224 = HEAP32[$7>>2]|0;
     $225 = $224 & 1073741824;
     $226 = ($225|0)==(0);
     if ($226) {
      $core_used$9$i = $core_used$1$i;
     } else {
      $core_used$5$i = $core_used$1$i;$i$2$i = 0;
      label = 61;
     }
    } else {
     $core_used$5$i = $core_used$1$i;$i$2$i = 0;
     label = 61;
    }
    L91: do {
     if ((label|0) == 61) {
      while(1) {
       label = 0;
       $227 = ($i$2$i|0)<(32);
       if (!($227)) {
        $core_used$9$i = $core_used$5$i;
        break L91;
       }
       $228 = (((($4)) + 220|0) + ($i$2$i<<2)|0);
       $core_used$6$i$ph = $core_used$5$i;$m$0$i$ph$in = $228;
       L95: while(1) {
        $m$0$i$ph = HEAP32[$m$0$i$ph$in>>2]|0;
        $229 = ($m$0$i$ph|0)==(0|0);
        $230 = ((($m$0$i$ph)) + 16|0);
        while(1) {
         if ($229) {
          break L95;
         }
         $231 = HEAP32[$230>>2]|0;
         $232 = ($231|0)==(0|0);
         if (!($232)) {
          break;
         }
        }
        $233 = (_cram_codec_to_id($231,$bnum22$i)|0);
        $bnum11$0$i = $233;$core_used$7$i = $core_used$6$i$ph;
        while(1) {
         L103: do {
          switch ($bnum11$0$i|0) {
          case -2:  {
           $core_used$8$i = $core_used$7$i;
           break;
          }
          case -1:  {
           $core_used$8$i = 1;
           break;
          }
          default: {
           $j3$0$i = 0;
           while(1) {
            $234 = HEAP32[$s>>2]|0;
            $235 = ((($234)) + 32|0);
            $236 = HEAP32[$235>>2]|0;
            $237 = ($j3$0$i|0)<($236|0);
            if (!($237)) {
             $core_used$8$i = $core_used$7$i;
             break L103;
            }
            $238 = HEAP32[$0>>2]|0;
            $239 = (($238) + ($j3$0$i<<2)|0);
            $240 = HEAP32[$239>>2]|0;
            $241 = ((($240)) + 8|0);
            $242 = HEAP32[$241>>2]|0;
            $243 = ($242|0)==(4);
            do {
             if ($243) {
              $244 = ((($240)) + 12|0);
              $245 = HEAP32[$244>>2]|0;
              $246 = ($245|0)==($bnum11$0$i|0);
              if (!($246)) {
               break;
              }
              $247 = (($98) + ($j3$0$i<<2)|0);
              HEAP32[$247>>2] = 1;
              $248 = HEAP32[$0>>2]|0;
              $249 = (($248) + ($j3$0$i<<2)|0);
              $250 = HEAP32[$249>>2]|0;
              $251 = (_cram_uncompress_block($250)|0);
              $252 = ($251|0)==(0);
              if (!($252)) {
               label = 73;
               break L63;
              }
             }
            } while(0);
            $253 = (($j3$0$i) + 1)|0;
            $j3$0$i = $253;
           }
          }
          }
         } while(0);
         $254 = HEAP32[$bnum22$i>>2]|0;
         $255 = ($254|0)==(-2);
         $256 = ($bnum11$0$i|0)==($254|0);
         $or$cond460 = $255 | $256;
         if ($or$cond460) {
          break;
         } else {
          $bnum11$0$i = $254;$core_used$7$i = $core_used$8$i;
         }
        }
        $257 = ((($m$0$i$ph)) + 20|0);
        $core_used$6$i$ph = $core_used$8$i;$m$0$i$ph$in = $257;
       }
       $258 = (($i$2$i) + 1)|0;
       $core_used$5$i = $core_used$6$i$ph;$i$2$i = $258;
       label = 61;
      }
     }
    } while(0);
    $259 = ($core_used$9$i|0)==(0);
    $i$3$i = 0;
    while(1) {
     $exitcond453 = ($i$3$i|0)==(28);
     if ($exitcond453) {
      $i$4$i = 0;
      break;
     }
     $260 = (264 + ($i$3$i<<2)|0);
     $261 = HEAP32[$260>>2]|0;
     $262 = (((($4)) + 348|0) + ($261<<2)|0);
     $263 = HEAP32[$262>>2]|0;
     $264 = ($263|0)==(0|0);
     L119: do {
      if (!($264)) {
       $265 = (_cram_codec_to_id($263,$bnum26$i)|0);
       $266 = 1 << $i$3$i;
       $bnum15$0$i = $265;
       while(1) {
        L123: do {
         switch ($bnum15$0$i|0) {
         case -2:  {
          break;
         }
         case -1:  {
          if ($259) {
           break L123;
          }
          $267 = HEAP32[$7>>2]|0;
          $268 = $267 | $266;
          HEAP32[$7>>2] = $268;
          break;
         }
         default: {
          $j7$0$i = 0;
          while(1) {
           $269 = HEAP32[$s>>2]|0;
           $270 = ((($269)) + 32|0);
           $271 = HEAP32[$270>>2]|0;
           $272 = ($j7$0$i|0)<($271|0);
           if (!($272)) {
            break L123;
           }
           $273 = HEAP32[$0>>2]|0;
           $274 = (($273) + ($j7$0$i<<2)|0);
           $275 = HEAP32[$274>>2]|0;
           $276 = ((($275)) + 8|0);
           $277 = HEAP32[$276>>2]|0;
           $278 = ($277|0)==(4);
           do {
            if ($278) {
             $279 = ((($275)) + 12|0);
             $280 = HEAP32[$279>>2]|0;
             $281 = ($280|0)==($bnum15$0$i|0);
             if (!($281)) {
              break;
             }
             $282 = (($98) + ($j7$0$i<<2)|0);
             $283 = HEAP32[$282>>2]|0;
             $284 = ($283|0)==(0);
             if ($284) {
              break;
             }
             $285 = HEAP32[$7>>2]|0;
             $286 = $285 | $266;
             HEAP32[$7>>2] = $286;
            }
           } while(0);
           $287 = (($j7$0$i) + 1)|0;
           $j7$0$i = $287;
          }
         }
         }
        } while(0);
        $288 = HEAP32[$bnum26$i>>2]|0;
        $289 = ($288|0)==(-2);
        $290 = ($bnum15$0$i|0)==($288|0);
        $or$cond298 = $289 | $290;
        if ($or$cond298) {
         break L119;
        } else {
         $bnum15$0$i = $288;
        }
       }
      }
     } while(0);
     $291 = (($i$3$i) + 1)|0;
     $i$3$i = $291;
    }
    while(1) {
     $exitcond454 = ($i$4$i|0)==(32);
     if ($exitcond454) {
      break;
     }
     $292 = (((($4)) + 220|0) + ($i$4$i<<2)|0);
     $m12$0$i$ph$in = $292;
     L139: while(1) {
      $m12$0$i$ph = HEAP32[$m12$0$i$ph$in>>2]|0;
      $293 = ($m12$0$i$ph|0)==(0|0);
      $294 = ((($m12$0$i$ph)) + 16|0);
      while(1) {
       if ($293) {
        break L139;
       }
       $295 = HEAP32[$294>>2]|0;
       $296 = ($295|0)==(0|0);
       if (!($296)) {
        break;
       }
      }
      $297 = (_cram_codec_to_id($295,$bnum210$i)|0);
      $bnum19$0$i = $297;
      while(1) {
       L147: do {
        switch ($bnum19$0$i|0) {
        case -2:  {
         break;
        }
        case -1:  {
         $298 = HEAP32[$7>>2]|0;
         $299 = $298 | 1073741824;
         HEAP32[$7>>2] = $299;
         break;
        }
        default: {
         $j11$0$i = 0;
         while(1) {
          $300 = HEAP32[$s>>2]|0;
          $301 = ((($300)) + 32|0);
          $302 = HEAP32[$301>>2]|0;
          $303 = ($j11$0$i|0)<($302|0);
          if (!($303)) {
           break L147;
          }
          $304 = HEAP32[$0>>2]|0;
          $305 = (($304) + ($j11$0$i<<2)|0);
          $306 = HEAP32[$305>>2]|0;
          $307 = ((($306)) + 8|0);
          $308 = HEAP32[$307>>2]|0;
          $309 = ($308|0)==(0);
          do {
           if (!($309)) {
            $310 = ((($306)) + 12|0);
            $311 = HEAP32[$310>>2]|0;
            $312 = ($311|0)==($bnum19$0$i|0);
            if (!($312)) {
             break;
            }
            $313 = (($98) + ($j11$0$i<<2)|0);
            $314 = HEAP32[$313>>2]|0;
            $315 = ($314|0)==(0);
            if ($315) {
             break;
            }
            $316 = HEAP32[$7>>2]|0;
            $317 = $316 | 1073741824;
            HEAP32[$7>>2] = $317;
           }
          } while(0);
          $318 = (($j11$0$i) + 1)|0;
          $j11$0$i = $318;
         }
        }
        }
       } while(0);
       $319 = HEAP32[$bnum210$i>>2]|0;
       $320 = ($319|0)==(-2);
       $321 = ($bnum19$0$i|0)==($319|0);
       $or$cond = $320 | $321;
       if ($or$cond) {
        break;
       } else {
        $bnum19$0$i = $319;
       }
      }
      $322 = ((($m12$0$i$ph)) + 20|0);
      $m12$0$i$ph$in = $322;
     }
     $323 = (($i$4$i) + 1)|0;
     $i$4$i = $323;
    }
    $324 = HEAP32[$7>>2]|0;
    $325 = ($$457|0)==($324|0);
    if ($325) {
     label = 111;
     break;
    } else {
     $106 = $324;$core_used$0$i = $core_used$9$i;
    }
   }
   if ((label|0) == 55) {
    _free($98);
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 73) {
    _free($98);
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 111) {
    _free($98);
    break;
   }
  }
  else if ((label|0) == 32) {
   $83 = ((($4)) + 548|0);
   HEAP32[$83>>2] = 2147483647;
   $i$0$i = 0;
   while(1) {
    $84 = HEAP32[$s>>2]|0;
    $85 = ((($84)) + 32|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($i$0$i|0)<($86|0);
    if (!($87)) {
     label = 113;
     break;
    }
    $88 = HEAP32[$0>>2]|0;
    $89 = (($88) + ($i$0$i<<2)|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (_cram_uncompress_block($90)|0);
    $92 = ($91|0)==(0);
    if (!($92)) {
     break;
    }
    $93 = (($i$0$i) + 1)|0;
    $i$0$i = $93;
   }
   if ((label|0) == 113) {
    break;
   }
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $326 = HEAP32[$3>>2]|0;
 $327 = ((($326)) + 548|0);
 $328 = HEAP32[$327>>2]|0;
 $329 = ((($2)) + 44|0);
 HEAP32[$329>>2] = 7;
 $330 = HEAP32[$3>>2]|0;
 $331 = ((($330)) + 396|0);
 $332 = HEAP32[$331>>2]|0;
 $333 = (_cram_codec_to_id($332,$bnum2$i5)|0);
 $334 = ($333|0)<(0);
 if ($334) {
  $335 = HEAP32[$bnum2$i5>>2]|0;
  $336 = ($335|0)>(-1);
  $$465 = $336 ? $335 : $333;
  $bnum1$0$i6 = $$465;
 } else {
  $bnum1$0$i6 = $333;
 }
 $e_type$0$i$i = 0;$i$0$i$i = 0;$n_id$0$i$i = 0;
 while(1) {
  $exitcond452 = ($i$0$i$i|0)==(47);
  if ($exitcond452) {
   break;
  }
  $337 = (((($330)) + 348|0) + ($i$0$i$i<<2)|0);
  $338 = HEAP32[$337>>2]|0;
  $339 = ($338|0)==(0|0);
  if ($339) {
   $e_type$3$i$i = $e_type$0$i$i;$n_id$4$i$i = $n_id$0$i$i;
  } else {
   $340 = (_cram_codec_to_id($338,$bnum2$i$i)|0);
   $341 = ($340|0)==($bnum1$0$i6|0);
   if ($341) {
    $342 = (($n_id$0$i$i) + 1)|0;
    $343 = HEAP32[$338>>2]|0;
    $e_type$1$i$i = $343;$n_id$1$i$i = $342;
   } else {
    $e_type$1$i$i = $e_type$0$i$i;$n_id$1$i$i = $n_id$0$i$i;
   }
   $344 = HEAP32[$bnum2$i$i>>2]|0;
   $345 = ($344|0)==($bnum1$0$i6|0);
   if ($345) {
    $346 = (($n_id$1$i$i) + 1)|0;
    $347 = HEAP32[$338>>2]|0;
    $e_type$2$i$i = $347;$n_id$2$i$i = $346;
   } else {
    $e_type$2$i$i = $e_type$1$i$i;$n_id$2$i$i = $n_id$1$i$i;
   }
   $348 = (($n_id$0$i$i) + 2)|0;
   $349 = ($n_id$2$i$i|0)==($348|0);
   $350 = $349 << 31 >> 31;
   $$n_id$2$i$i = (($n_id$2$i$i) + ($350))|0;
   $e_type$3$i$i = $e_type$2$i$i;$n_id$4$i$i = $$n_id$2$i$i;
  }
  $351 = (($i$0$i$i) + 1)|0;
  $e_type$0$i$i = $e_type$3$i$i;$i$0$i$i = $351;$n_id$0$i$i = $n_id$4$i$i;
 }
 $352 = ($n_id$0$i$i|0)!=(1);
 $353 = ($e_type$0$i$i|0)==(0);
 $or$cond466 = $352 | $353;
 L193: do {
  if ($or$cond466) {
   $qsize$1 = 0;
  } else {
   $354 = ((($s)) + 12|0);
   $355 = HEAP32[$354>>2]|0;
   $356 = ($355|0)!=(0|0);
   $357 = ($bnum1$0$i6>>>0)<(1024);
   $358 = $357 & $356;
   L195: do {
    if ($358) {
     $374 = (($355) + ($bnum1$0$i6<<2)|0);
     $375 = HEAP32[$374>>2]|0;
     $376 = ($375|0)==(0|0);
     if ($376) {
      $qsize$1 = 0;
      break L193;
     } else {
      $$0$i$i54 = $375;
     }
    } else {
     $359 = HEAP32[$s>>2]|0;
     $360 = ((($359)) + 32|0);
     $361 = HEAP32[$360>>2]|0;
     $i$0$i1$i = 0;
     while(1) {
      $362 = ($i$0$i1$i|0)<($361|0);
      if (!($362)) {
       $qsize$1 = 0;
       break L193;
      }
      $363 = HEAP32[$0>>2]|0;
      $364 = (($363) + ($i$0$i1$i<<2)|0);
      $365 = HEAP32[$364>>2]|0;
      $366 = ($365|0)==(0|0);
      if (!($366)) {
       $367 = ((($365)) + 8|0);
       $368 = HEAP32[$367>>2]|0;
       $369 = ($368|0)==(4);
       if ($369) {
        $370 = ((($365)) + 12|0);
        $371 = HEAP32[$370>>2]|0;
        $372 = ($371|0)==($bnum1$0$i6|0);
        if ($372) {
         $$0$i$i54 = $365;
         break L195;
        }
       }
      }
      $373 = (($i$0$i1$i) + 1)|0;
      $i$0$i1$i = $373;
     }
    }
   } while(0);
   $377 = ((($$0$i$i54)) + 20|0);
   $378 = HEAP32[$377>>2]|0;
   $qsize$1 = $378;
  }
 } while(0);
 $379 = ((($330)) + 392|0);
 $380 = HEAP32[$379>>2]|0;
 $381 = (_cram_codec_to_id($380,$bnum2$i5)|0);
 $382 = ($381|0)<(0);
 if ($382) {
  $383 = HEAP32[$bnum2$i5>>2]|0;
  $384 = ($383|0)>(-1);
  $$469 = $384 ? $383 : $381;
  $bnum1$1$i = $$469;
 } else {
  $bnum1$1$i = $381;
 }
 $e_type$0$i8$i = 0;$i$0$i6$i = 0;$n_id$0$i7$i = 0;
 while(1) {
  $exitcond451 = ($i$0$i6$i|0)==(47);
  if ($exitcond451) {
   break;
  }
  $385 = (((($330)) + 348|0) + ($i$0$i6$i<<2)|0);
  $386 = HEAP32[$385>>2]|0;
  $387 = ($386|0)==(0|0);
  if ($387) {
   $e_type$3$i15$i = $e_type$0$i8$i;$n_id$4$i14$i = $n_id$0$i7$i;
  } else {
   $388 = (_cram_codec_to_id($386,$bnum2$i5$i)|0);
   $389 = ($388|0)==($bnum1$1$i|0);
   if ($389) {
    $390 = (($n_id$0$i7$i) + 1)|0;
    $391 = HEAP32[$386>>2]|0;
    $e_type$1$i10$i = $391;$n_id$1$i9$i = $390;
   } else {
    $e_type$1$i10$i = $e_type$0$i8$i;$n_id$1$i9$i = $n_id$0$i7$i;
   }
   $392 = HEAP32[$bnum2$i5$i>>2]|0;
   $393 = ($392|0)==($bnum1$1$i|0);
   if ($393) {
    $394 = (($n_id$1$i9$i) + 1)|0;
    $395 = HEAP32[$386>>2]|0;
    $e_type$2$i12$i = $395;$n_id$2$i11$i = $394;
   } else {
    $e_type$2$i12$i = $e_type$1$i10$i;$n_id$2$i11$i = $n_id$1$i9$i;
   }
   $396 = (($n_id$0$i7$i) + 2)|0;
   $397 = ($n_id$2$i11$i|0)==($396|0);
   $398 = $397 << 31 >> 31;
   $$n_id$2$i11$i = (($n_id$2$i11$i) + ($398))|0;
   $e_type$3$i15$i = $e_type$2$i12$i;$n_id$4$i14$i = $$n_id$2$i11$i;
  }
  $399 = (($i$0$i6$i) + 1)|0;
  $e_type$0$i8$i = $e_type$3$i15$i;$i$0$i6$i = $399;$n_id$0$i7$i = $n_id$4$i14$i;
 }
 $400 = ($n_id$0$i7$i|0)!=(1);
 $401 = ($e_type$0$i8$i|0)==(0);
 $or$cond470 = $400 | $401;
 L223: do {
  if ($or$cond470) {
   $nsize$0 = 0;
  } else {
   $402 = ((($s)) + 12|0);
   $403 = HEAP32[$402>>2]|0;
   $404 = ($403|0)!=(0|0);
   $405 = ($bnum1$1$i>>>0)<(1024);
   $406 = $405 & $404;
   L225: do {
    if ($406) {
     $422 = (($403) + ($bnum1$1$i<<2)|0);
     $423 = HEAP32[$422>>2]|0;
     $424 = ($423|0)==(0|0);
     if ($424) {
      $nsize$0 = 0;
      break L223;
     } else {
      $$0$i3$i56 = $423;
     }
    } else {
     $407 = HEAP32[$s>>2]|0;
     $408 = ((($407)) + 32|0);
     $409 = HEAP32[$408>>2]|0;
     $i$0$i2$i = 0;
     while(1) {
      $410 = ($i$0$i2$i|0)<($409|0);
      if (!($410)) {
       $nsize$0 = 0;
       break L223;
      }
      $411 = HEAP32[$0>>2]|0;
      $412 = (($411) + ($i$0$i2$i<<2)|0);
      $413 = HEAP32[$412>>2]|0;
      $414 = ($413|0)==(0|0);
      if (!($414)) {
       $415 = ((($413)) + 8|0);
       $416 = HEAP32[$415>>2]|0;
       $417 = ($416|0)==(4);
       if ($417) {
        $418 = ((($413)) + 12|0);
        $419 = HEAP32[$418>>2]|0;
        $420 = ($419|0)==($bnum1$1$i|0);
        if ($420) {
         $$0$i3$i56 = $413;
         break L225;
        }
       }
      }
      $421 = (($i$0$i2$i) + 1)|0;
      $i$0$i2$i = $421;
     }
    }
   } while(0);
   $425 = ((($$0$i3$i56)) + 20|0);
   $426 = HEAP32[$425>>2]|0;
   $nsize$0 = $426;
  }
 } while(0);
 $427 = ($qsize$1|0)==(0);
 $428 = $328 & 8;
 $429 = ($428|0)==(0);
 $or$cond532 = $427 | $429;
 if (!($or$cond532)) {
  $430 = (($qsize$1) + 1)|0;
  $431 = ((($s)) + 68|0);
  $432 = HEAP32[$431>>2]|0;
  $433 = ((($432)) + 36|0);
  HEAP32[$433>>2] = $430;
  $434 = HEAP32[$431>>2]|0;
  $435 = ((($434)) + 32|0);
  $436 = HEAP32[$435>>2]|0;
  $437 = ((($434)) + 36|0);
  $438 = HEAP32[$437>>2]|0;
  $439 = (_realloc($436,$438)|0);
  $440 = HEAP32[$431>>2]|0;
  $441 = ((($440)) + 32|0);
  HEAP32[$441>>2] = $439;
  $442 = ((($s)) + 72|0);
  $443 = HEAP32[$442>>2]|0;
  $444 = ((($443)) + 36|0);
  HEAP32[$444>>2] = $430;
  $445 = HEAP32[$442>>2]|0;
  $446 = ((($445)) + 32|0);
  $447 = HEAP32[$446>>2]|0;
  $448 = ((($445)) + 36|0);
  $449 = HEAP32[$448>>2]|0;
  $450 = (_realloc($447,$449)|0);
  $451 = HEAP32[$442>>2]|0;
  $452 = ((($451)) + 32|0);
  HEAP32[$452>>2] = $450;
 }
 $453 = ($nsize$0|0)==(0);
 $454 = $328 & 65536;
 $455 = ($454|0)==(0);
 $or$cond474 = $453 | $455;
 if (!($or$cond474)) {
  $456 = (($nsize$0) + 1)|0;
  $457 = ((($s)) + 64|0);
  $458 = HEAP32[$457>>2]|0;
  $459 = ((($458)) + 36|0);
  HEAP32[$459>>2] = $456;
  $460 = HEAP32[$457>>2]|0;
  $461 = ((($460)) + 32|0);
  $462 = HEAP32[$461>>2]|0;
  $463 = ((($460)) + 36|0);
  $464 = HEAP32[$463>>2]|0;
  $465 = (_realloc($462,$464)|0);
  $466 = HEAP32[$457>>2]|0;
  $467 = ((($466)) + 32|0);
  HEAP32[$467>>2] = $465;
 }
 $468 = ((($bfd)) + 40|0);
 $469 = HEAP32[$468>>2]|0;
 $470 = ($469|0)>(0);
 if ($470) {
  $471 = (($469) + -1)|0;
  $472 = ((($bfd)) + 44|0);
  $473 = HEAP32[$472>>2]|0;
  $474 = (($473) + (($471*20)|0)|0);
  $475 = HEAP32[$474>>2]|0;
  $476 = ($475|0)==(0|0);
  if ($476) {
   $unknown_rg$0 = -1;
  } else {
   $477 = HEAP8[$475>>0]|0;
   $478 = ($477<<24>>24)==(85);
   if ($478) {
    $$014$i = $475;$$05$i = 18321;
    while(1) {
     $479 = ((($$014$i)) + 1|0);
     $480 = ((($$05$i)) + 1|0);
     $481 = HEAP8[$479>>0]|0;
     $482 = HEAP8[$480>>0]|0;
     $483 = ($481<<24>>24)!=($482<<24>>24);
     $484 = ($481<<24>>24)==(0);
     $or$cond$i = $484 | $483;
     if ($or$cond$i) {
      break;
     } else {
      $$014$i = $479;$$05$i = $480;
     }
    }
    $485 = ($481<<24>>24)==($482<<24>>24);
    $$475 = $485 ? $471 : -1;
    $unknown_rg$0 = $$475;
   } else {
    $unknown_rg$0 = -1;
   }
  }
 } else {
  $unknown_rg$0 = -1;
 }
 $486 = ((($2)) + 8|0);
 $487 = HEAP32[$486>>2]|0;
 $488 = ($487|0)==(5);
 if (!($488)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $489 = ((($s)) + 24|0);
 $490 = HEAP32[$489>>2]|0;
 $491 = ($490|0)==(0|0);
 if (!($491)) {
  _free($490);
 }
 $492 = HEAP32[$s>>2]|0;
 $493 = ((($492)) + 16|0);
 $494 = HEAP32[$493>>2]|0;
 $495 = ($494*108)|0;
 $496 = (_malloc($495)|0);
 HEAP32[$489>>2] = $496;
 $497 = ($496|0)==(0|0);
 if ($497) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $498 = HEAP32[$s>>2]|0;
 $499 = ((($498)) + 4|0);
 $500 = HEAP32[$499>>2]|0;
 $501 = ((($498)) + 44|0);
 $502 = HEAP32[$501>>2]|0;
 $$lobit = $502 >>> 31;
 $503 = ($500|0)>(-1);
 do {
  if ($503) {
   $504 = ($$lobit|0)==(1);
   if ($504) {
    $543 = ((($fd)) + 288|0);
    $544 = HEAP32[$543>>2]|0;
    $545 = ($544|0)==(0);
    if (!($545)) {
     break;
    }
    $546 = HEAP32[$5>>2]|0;
    $547 = $546 & 512;
    $548 = ($547|0)==(0);
    if ($548) {
     $558 = $498;
    } else {
     $549 = ((($498)) + 8|0);
     $550 = HEAP32[$549>>2]|0;
     $551 = ((($498)) + 12|0);
     $552 = HEAP32[$551>>2]|0;
     $553 = (($550) + ($552))|0;
     $554 = (($553) + -1)|0;
     $555 = (_cram_get_ref($fd,$500,$550,$554)|0);
     $556 = ((($s)) + 132|0);
     HEAP32[$556>>2] = $555;
     $$pre234 = HEAP32[$s>>2]|0;
     $558 = $$pre234;
    }
    $557 = ((($558)) + 8|0);
    $559 = HEAP32[$557>>2]|0;
    $560 = ((($s)) + 136|0);
    HEAP32[$560>>2] = $559;
    $561 = HEAP32[$557>>2]|0;
    $562 = ((($558)) + 12|0);
    $563 = HEAP32[$562>>2]|0;
    $564 = (($561) + ($563))|0;
    $565 = (($564) + -1)|0;
    $566 = ((($s)) + 140|0);
    HEAP32[$566>>2] = $565;
    $567 = ($559|0)<(0);
    if ($567) {
     _fprintf(9772,17152,$vararg_buffer1);
     HEAP32[$560>>2] = 0;
    }
    $568 = ((($fd)) + 34704|0);
    (_pthread_mutex_lock(($568|0))|0);
    $569 = ((($fd)) + 48|0);
    $570 = HEAP32[$569>>2]|0;
    $571 = ((($570)) + 28|0);
    (_pthread_mutex_lock(($571|0))|0);
    $572 = HEAP32[$5>>2]|0;
    $573 = $572 & 512;
    $574 = ($573|0)==(0);
    do {
     if (!($574)) {
      $575 = HEAP32[$566>>2]|0;
      $576 = ($575|0)<(0);
      $577 = $576 << 31 >> 31;
      $578 = HEAP32[$569>>2]|0;
      $579 = ((($578)) + 8|0);
      $580 = HEAP32[$579>>2]|0;
      $581 = (($580) + ($500<<2)|0);
      $582 = HEAP32[$581>>2]|0;
      $583 = ((($582)) + 8|0);
      $584 = $583;
      $585 = $584;
      $586 = HEAP32[$585>>2]|0;
      $587 = (($584) + 4)|0;
      $588 = $587;
      $589 = HEAP32[$588>>2]|0;
      $590 = ($577|0)>($589|0);
      $591 = ($575>>>0)>($586>>>0);
      $592 = ($577|0)==($589|0);
      $593 = $592 & $591;
      $594 = $590 | $593;
      if (!($594)) {
       break;
      }
      HEAP32[$566>>2] = $586;
     }
    } while(0);
    $595 = HEAP32[$569>>2]|0;
    $596 = ((($595)) + 28|0);
    (_pthread_mutex_unlock(($596|0))|0);
    (_pthread_mutex_unlock(($568|0))|0);
    break;
   }
   $505 = ($502|0)<(0);
   if ($505) {
    _fprintf(9772,17088,$vararg_buffer);
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $506 = ((($s)) + 12|0);
   $507 = HEAP32[$506>>2]|0;
   $508 = ($507|0)!=(0|0);
   $509 = ($502>>>0)<(1024);
   $510 = $509 & $508;
   L279: do {
    if ($510) {
     $525 = (($507) + ($502<<2)|0);
     $526 = HEAP32[$525>>2]|0;
     $527 = ($526|0)==(0|0);
     if ($527) {
      $$0 = -1;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i858 = $526;
     }
    } else {
     $511 = ((($498)) + 32|0);
     $512 = HEAP32[$511>>2]|0;
     $i$0$i7 = 0;
     while(1) {
      $513 = ($i$0$i7|0)<($512|0);
      if (!($513)) {
       $$0 = -1;
       break;
      }
      $514 = HEAP32[$0>>2]|0;
      $515 = (($514) + ($i$0$i7<<2)|0);
      $516 = HEAP32[$515>>2]|0;
      $517 = ($516|0)==(0|0);
      do {
       if (!($517)) {
        $518 = ((($516)) + 8|0);
        $519 = HEAP32[$518>>2]|0;
        $520 = ($519|0)==(4);
        if (!($520)) {
         break;
        }
        $521 = ((($516)) + 12|0);
        $522 = HEAP32[$521>>2]|0;
        $523 = ($522|0)==($502|0);
        if ($523) {
         $$0$i858 = $516;
         break L279;
        }
       }
      } while(0);
      $524 = (($i$0$i7) + 1)|0;
      $i$0$i7 = $524;
     }
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   $528 = (_cram_uncompress_block($$0$i858)|0);
   $529 = ($528|0)==(0);
   if ($529) {
    $530 = ((($$0$i858)) + 32|0);
    $531 = HEAP32[$530>>2]|0;
    $532 = ((($s)) + 132|0);
    HEAP32[$532>>2] = $531;
    $533 = HEAP32[$s>>2]|0;
    $534 = ((($533)) + 8|0);
    $535 = HEAP32[$534>>2]|0;
    $536 = ((($s)) + 136|0);
    HEAP32[$536>>2] = $535;
    $537 = HEAP32[$534>>2]|0;
    $538 = ((($533)) + 12|0);
    $539 = HEAP32[$538>>2]|0;
    $540 = (($537) + ($539))|0;
    $541 = (($540) + -1)|0;
    $542 = ((($s)) + 140|0);
    HEAP32[$542>>2] = $541;
    break;
   } else {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $597 = HEAP32[$5>>2]|0;
 $598 = $597 & 512;
 $599 = ($598|0)==(0);
 L296: do {
  if ($599) {
   $600 = ((($fd)) + 8|0);
   $865 = $600;
  } else {
   $601 = ((($s)) + 132|0);
   $602 = HEAP32[$601>>2]|0;
   $603 = ($602|0)==(0|0);
   if ($603) {
    $604 = HEAP32[$s>>2]|0;
    $605 = ((($604)) + 4|0);
    $606 = HEAP32[$605>>2]|0;
    $607 = ($606|0)>(-1);
    if ($607) {
     $608 = ((($fd)) + 288|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = ($609|0)==(0);
     if ($610) {
      $611 = ((($604)) + 8|0);
      $612 = HEAP32[$611>>2]|0;
      $613 = ((($604)) + 12|0);
      $614 = HEAP32[$613>>2]|0;
      $615 = (($612) + ($614))|0;
      $616 = (($615) + -1)|0;
      HEAP32[$vararg_buffer3>>2] = $606;
      $vararg_ptr5 = ((($vararg_buffer3)) + 4|0);
      HEAP32[$vararg_ptr5>>2] = $612;
      $vararg_ptr6 = ((($vararg_buffer3)) + 8|0);
      HEAP32[$vararg_ptr6>>2] = $616;
      _fprintf(9772,17181,$vararg_buffer3);
      $$0 = -1;
      STACKTOP = sp;return ($$0|0);
     }
    }
   }
   $617 = ((($fd)) + 8|0);
   $618 = HEAP32[$617>>2]|0;
   $$mask = $618 & -256;
   $619 = ($$mask|0)==(256);
   $brmerge = $619 | $599;
   if ($brmerge) {
    $865 = $617;
   } else {
    $620 = HEAP32[$s>>2]|0;
    $621 = ((($620)) + 4|0);
    $622 = HEAP32[$621>>2]|0;
    $623 = ($622|0)>(-1);
    if ($623) {
     $624 = ((($fd)) + 292|0);
     $625 = HEAP32[$624>>2]|0;
     $626 = ($625|0)==(0);
     if ($626) {
      $627 = ((($620)) + 48|0);
      $$03$i = 16;$l$04$i = $627;$r$05$i = 27676;
      while(1) {
       $628 = HEAP8[$l$04$i>>0]|0;
       $629 = HEAP8[$r$05$i>>0]|0;
       $630 = ($628<<24>>24)==($629<<24>>24);
       if (!($630)) {
        break;
       }
       $631 = (($$03$i) + -1)|0;
       $632 = ((($l$04$i)) + 1|0);
       $633 = ((($r$05$i)) + 1|0);
       $634 = ($631|0)==(0);
       if ($634) {
        $865 = $617;
        break L296;
       } else {
        $$03$i = $631;$l$04$i = $632;$r$05$i = $633;
       }
      }
      $635 = ($628<<24>>24)==($629<<24>>24);
      if ($635) {
       $865 = $617;
      } else {
       $636 = ((($s)) + 132|0);
       $637 = HEAP32[$636>>2]|0;
       $638 = ($637|0)==(0|0);
       L313: do {
        if ($638) {
         $682 = ((($620)) + 44|0);
         $683 = HEAP32[$682>>2]|0;
         $684 = ($683|0)>(-1);
         if (!($684)) {
          break;
         }
         $685 = ((($s)) + 12|0);
         $686 = HEAP32[$685>>2]|0;
         $687 = ($686|0)!=(0|0);
         $688 = ($683|0)<(1024);
         $or$cond478 = $687 & $688;
         L316: do {
          if ($or$cond478) {
           $703 = (($686) + ($683<<2)|0);
           $704 = HEAP32[$703>>2]|0;
           $705 = ($704|0)==(0|0);
           if ($705) {
            break L313;
           } else {
            $$0$i1460 = $704;
           }
          } else {
           $689 = ((($620)) + 32|0);
           $690 = HEAP32[$689>>2]|0;
           $i$0$i13 = 0;
           while(1) {
            $691 = ($i$0$i13|0)<($690|0);
            if (!($691)) {
             break L313;
            }
            $692 = HEAP32[$0>>2]|0;
            $693 = (($692) + ($i$0$i13<<2)|0);
            $694 = HEAP32[$693>>2]|0;
            $695 = ($694|0)==(0|0);
            do {
             if (!($695)) {
              $696 = ((($694)) + 8|0);
              $697 = HEAP32[$696>>2]|0;
              $698 = ($697|0)==(4);
              if (!($698)) {
               break;
              }
              $699 = ((($694)) + 12|0);
              $700 = HEAP32[$699>>2]|0;
              $701 = ($700|0)==($683|0);
              if ($701) {
               $$0$i1460 = $694;
               break L316;
              }
             }
            } while(0);
            $702 = (($i$0$i13) + 1)|0;
            $i$0$i13 = $702;
           }
          }
         } while(0);
         $706 = (_malloc(152)|0);
         $707 = ($706|0)==(0|0);
         if ($707) {
          $$0 = -1;
          STACKTOP = sp;return ($$0|0);
         }
         $708 = ((($706)) + 8|0);
         HEAP32[$708>>2] = 1732584193;
         $709 = ((($706)) + 12|0);
         HEAP32[$709>>2] = -271733879;
         $710 = ((($706)) + 16|0);
         HEAP32[$710>>2] = -1732584194;
         $711 = ((($706)) + 20|0);
         HEAP32[$711>>2] = 271733878;
         HEAP32[$706>>2] = 0;
         $712 = ((($706)) + 4|0);
         HEAP32[$712>>2] = 0;
         $713 = ((($$0$i1460)) + 32|0);
         $714 = HEAP32[$713>>2]|0;
         $715 = ((($$0$i1460)) + 20|0);
         $716 = HEAP32[$715>>2]|0;
         $717 = $716 & 536870911;
         HEAP32[$706>>2] = $717;
         $$pre294 = ((($706)) + 4|0);
         $718 = $716 >>> 29;
         HEAP32[$$pre294>>2] = $718;
         $719 = ($716>>>0)>(63);
         if ($719) {
          $720 = $716 & -64;
          $721 = (_body($706,$714,$720)|0);
          $722 = $716 & 63;
          $$1$i21 = $722;$$12$i20 = $721;
         } else {
          $$1$i21 = $716;$$12$i20 = $714;
         }
         $723 = ((($706)) + 24|0);
         _memcpy(($723|0),($$12$i20|0),($$1$i21|0))|0;
         _hts_md5_final($digest,$706);
         _free($706);
        } else {
         $639 = ((($620)) + 8|0);
         $640 = HEAP32[$639>>2]|0;
         $641 = ((($s)) + 136|0);
         $642 = HEAP32[$641>>2]|0;
         $643 = ($640|0)<($642|0);
         if ($643) {
          _fprintf(9772,17152,$vararg_buffer7);
          $$pre235 = HEAP32[$s>>2]|0;
          $$pre236 = HEAP32[$641>>2]|0;
          $646 = $$pre235;$651 = $$pre236;$start$0 = 0;
         } else {
          $644 = (($640) - ($642))|0;
          $646 = $620;$651 = $642;$start$0 = $644;
         }
         $645 = ((($646)) + 12|0);
         $647 = HEAP32[$645>>2]|0;
         $648 = ((($s)) + 140|0);
         $649 = HEAP32[$648>>2]|0;
         $650 = (($649) - ($651))|0;
         $652 = (($650) + 1)|0;
         $653 = ($647|0)>($652|0);
         if ($653) {
          _fprintf(9772,17219,$vararg_buffer9);
          $654 = HEAP32[$648>>2]|0;
          $655 = HEAP32[$641>>2]|0;
          $656 = (($654) - ($655))|0;
          $657 = (($656) + 1)|0;
          $len$0 = $657;
         } else {
          $len$0 = $647;
         }
         $658 = (_malloc(152)|0);
         $659 = ($658|0)==(0|0);
         if ($659) {
          $$0 = -1;
          STACKTOP = sp;return ($$0|0);
         }
         $660 = ((($658)) + 8|0);
         HEAP32[$660>>2] = 1732584193;
         $661 = ((($658)) + 12|0);
         HEAP32[$661>>2] = -271733879;
         $662 = ((($658)) + 16|0);
         HEAP32[$662>>2] = -1732584194;
         $663 = ((($658)) + 20|0);
         HEAP32[$663>>2] = 271733878;
         HEAP32[$658>>2] = 0;
         $664 = ((($658)) + 4|0);
         HEAP32[$664>>2] = 0;
         $665 = (($start$0) + ($len$0))|0;
         $666 = HEAP32[$648>>2]|0;
         $667 = HEAP32[$641>>2]|0;
         $668 = (($666) - ($667))|0;
         $669 = (($668) + 1)|0;
         $670 = ($665|0)>($669|0);
         $671 = (($669) - ($start$0))|0;
         $len$1 = $670 ? $671 : $len$0;
         $672 = ($len$1|0)>(-1);
         if ($672) {
          $673 = HEAP32[$636>>2]|0;
          $674 = (($673) + ($start$0)|0);
          $675 = $len$1 & 536870911;
          HEAP32[$658>>2] = $675;
          $$pre296 = ((($658)) + 4|0);
          $676 = $len$1 >>> 29;
          HEAP32[$$pre296>>2] = $676;
          $677 = ($len$1>>>0)>(63);
          if ($677) {
           $678 = $len$1 & -64;
           $679 = (_body($658,$674,$678)|0);
           $680 = $len$1 & 63;
           $$1$i = $680;$$12$i = $679;
          } else {
           $$1$i = $len$1;$$12$i = $674;
          }
          $681 = ((($658)) + 24|0);
          _memcpy(($681|0),($$12$i|0),($$1$i|0))|0;
         }
         _hts_md5_final($digest,$658);
         _free($658);
        }
       } while(0);
       $724 = HEAP32[$636>>2]|0;
       $725 = ($724|0)==(0|0);
       $726 = HEAP32[$s>>2]|0;
       if ($725) {
        $727 = ((($726)) + 44|0);
        $728 = HEAP32[$727>>2]|0;
        $729 = ($728|0)<(0);
        if (!($729)) {
         label = 232;
        }
       } else {
        label = 232;
       }
       if ((label|0) == 232) {
        $730 = ((($726)) + 48|0);
        $$03$i27 = 16;$l$04$i26 = $digest;$r$05$i25 = $730;
        while(1) {
         $731 = HEAP8[$l$04$i26>>0]|0;
         $732 = HEAP8[$r$05$i25>>0]|0;
         $733 = ($731<<24>>24)==($732<<24>>24);
         if (!($733)) {
          break;
         }
         $734 = (($$03$i27) + -1)|0;
         $735 = ((($l$04$i26)) + 1|0);
         $736 = ((($r$05$i25)) + 1|0);
         $737 = ($734|0)==(0);
         if ($737) {
          $865 = $617;
          break L296;
         } else {
          $$03$i27 = $734;$l$04$i26 = $735;$r$05$i25 = $736;
         }
        }
        $738 = ($731<<24>>24)==($732<<24>>24);
        if ($738) {
         $865 = $617;
         break;
        }
       }
       $739 = ((($s)) + 136|0);
       $740 = HEAP32[$739>>2]|0;
       $741 = ((($s)) + 140|0);
       $742 = HEAP32[$741>>2]|0;
       HEAP32[$vararg_buffer11>>2] = $500;
       $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
       HEAP32[$vararg_ptr14>>2] = $740;
       $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
       HEAP32[$vararg_ptr15>>2] = $742;
       _fprintf(9772,17253,$vararg_buffer11);
       $743 = HEAP32[$s>>2]|0;
       $i$0$i32 = 0;
       while(1) {
        $exitcond450 = ($i$0$i32|0)==(16);
        if ($exitcond450) {
         break;
        }
        $744 = (((($743)) + 48|0) + ($i$0$i32)|0);
        $745 = HEAP8[$744>>0]|0;
        $746 = $745&255;
        $747 = $746 >>> 4;
        $748 = (22117 + ($747)|0);
        $749 = HEAP8[$748>>0]|0;
        $750 = $i$0$i32 << 1;
        $751 = (($M) + ($750)|0);
        HEAP8[$751>>0] = $749;
        $752 = HEAP8[$744>>0]|0;
        $753 = $752&255;
        $754 = $753 & 15;
        $755 = (22117 + ($754)|0);
        $756 = HEAP8[$755>>0]|0;
        $757 = $750 | 1;
        $758 = (($M) + ($757)|0);
        HEAP8[$758>>0] = $756;
        $759 = (($i$0$i32) + 1)|0;
        $i$0$i32 = $759;
       }
       $760 = ((($M)) + 32|0);
       HEAP8[$760>>0] = 0;
       HEAP32[$vararg_buffer16>>2] = $M;
       _fprintf(9772,17309,$vararg_buffer16);
       $i$0$i33 = 0;
       while(1) {
        $exitcond = ($i$0$i33|0)==(16);
        if ($exitcond) {
         break;
        }
        $761 = (($digest) + ($i$0$i33)|0);
        $762 = HEAP8[$761>>0]|0;
        $763 = $762&255;
        $764 = $763 >>> 4;
        $765 = (22117 + ($764)|0);
        $766 = HEAP8[$765>>0]|0;
        $767 = $i$0$i33 << 1;
        $768 = (($M) + ($767)|0);
        HEAP8[$768>>0] = $766;
        $769 = $763 & 15;
        $770 = (22117 + ($769)|0);
        $771 = HEAP8[$770>>0]|0;
        $772 = $767 | 1;
        $773 = (($M) + ($772)|0);
        HEAP8[$773>>0] = $771;
        $774 = (($i$0$i33) + 1)|0;
        $i$0$i33 = $774;
       }
       HEAP8[$760>>0] = 0;
       HEAP32[$vararg_buffer19>>2] = $M;
       _fprintf(9772,17319,$vararg_buffer19);
       $$0 = -1;
       STACKTOP = sp;return ($$0|0);
      }
     } else {
      $865 = $617;
     }
    } else {
     $865 = $617;
    }
   }
  }
 } while(0);
 $775 = ($500|0)==(-2);
 if ($775) {
  $776 = ((($fd)) + 34704|0);
  (_pthread_mutex_lock(($776|0))|0);
  $777 = ((($fd)) + 48|0);
  $778 = HEAP32[$777>>2]|0;
  $779 = ((($778)) + 28|0);
  (_pthread_mutex_lock(($779|0))|0);
  $780 = HEAP32[$777>>2]|0;
  $781 = ((($780)) + 12|0);
  $782 = HEAP32[$781>>2]|0;
  $783 = ($782|0)==(0);
  if ($783) {
   $req$0$i = 0;
  } else {
   $784 = $782 << 2;
   $785 = ($782>>>0)>(65535);
   if ($785) {
    $786 = (($784>>>0) / ($782>>>0))&-1;
    $787 = ($786|0)==(4);
    $$$i = $787 ? $784 : -1;
    $req$0$i = $$$i;
   } else {
    $req$0$i = $784;
   }
  }
  $788 = (_malloc($req$0$i)|0);
  $789 = ($788|0)==(0|0);
  if ($789) {
   $2799 = HEAP32[$777>>2]|0;
   $2800 = ((($2799)) + 28|0);
   (_pthread_mutex_unlock(($2800|0))|0);
   (_pthread_mutex_unlock(($776|0))|0);
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $790 = ((($788)) + -4|0);
  $791 = HEAP32[$790>>2]|0;
  $792 = $791 & 3;
  $793 = ($792|0)==(0);
  if (!($793)) {
   _memset(($788|0),0,($req$0$i|0))|0;
  }
  $794 = HEAP32[$777>>2]|0;
  $795 = ((($794)) + 28|0);
  (_pthread_mutex_unlock(($795|0))|0);
  (_pthread_mutex_unlock(($776|0))|0);
  $$pre$phi291Z2D = $777;$$pre$phi293Z2D = $776;$refs$0 = $788;
 } else {
  $$pre290 = ((($fd)) + 48|0);
  $$pre292 = ((($fd)) + 34704|0);
  $$pre$phi291Z2D = $$pre290;$$pre$phi293Z2D = $$pre292;$refs$0 = 0;
 }
 $796 = $328 & 1;
 $797 = ($796|0)==(0);
 $798 = $328 & 1048576;
 $799 = ($798|0)==(0);
 $800 = ((($bfd)) + 28|0);
 $801 = $328 & 8;
 $802 = ($801|0)==(0);
 $803 = $328 & 2;
 $804 = ($803|0)==(0);
 $805 = ((($c)) + 8|0);
 $806 = $328 & 4096;
 $807 = ($806|0)==(0);
 $808 = $328 & 32;
 $809 = ($808|0)==(0);
 $810 = ((($s)) + 84|0);
 $811 = $328 & 130035551;
 $812 = ($811|0)==(0);
 $813 = ((($s)) + 28|0);
 $814 = ((($s)) + 36|0);
 $815 = ((($s)) + 32|0);
 $816 = ((($fd)) + 268|0);
 $817 = ((($s)) + 132|0);
 $818 = ((($bfd)) + 32|0);
 $819 = ((($s)) + 136|0);
 $820 = ((($s)) + 140|0);
 $821 = ((($fd)) + 33174|0);
 $822 = $328 & 64;
 $823 = ($822|0)==(0);
 $824 = $328 & 128;
 $825 = ($824|0)==(0);
 $826 = ((($s)) + 68|0);
 $827 = ((($s)) + 72|0);
 $828 = $328 & 524288;
 $829 = ($828|0)==(0);
 $830 = ((($s)) + 64|0);
 $831 = $328 & 32768;
 $832 = ($831|0)==(0);
 $833 = $328 & 65536;
 $834 = ($833|0)==(0);
 $835 = $328 & 131072;
 $836 = ($835|0)==(0);
 $837 = $328 & 262144;
 $838 = ($837|0)==(0);
 $839 = ((($s)) + 16|0);
 $840 = $328 & 2097152;
 $841 = ($840|0)==(0);
 $842 = ((($fd)) + 288|0);
 $843 = ((($fd)) + 34656|0);
 $last_ref_id$0 = -9;$qual$0 = 0;$rec$0 = 0;$seq$0 = 0;
 L385: while(1) {
  $844 = HEAP32[$s>>2]|0;
  $845 = ((($844)) + 16|0);
  $846 = HEAP32[$845>>2]|0;
  $847 = ($rec$0|0)<($846|0);
  if (!($847)) {
   label = 695;
   break;
  }
  $848 = HEAP32[$489>>2]|0;
  $849 = (($848) + (($rec$0*108)|0)|0);
  HEAP32[$849>>2] = $s;
  HEAP32[$out_sz>>2] = 1;
  if ($797) {
   HEAP32[$bf>>2] = 4;
   $863 = (((($848) + (($rec$0*108)|0)|0)) + 8|0);
   HEAP32[$863>>2] = 4;
  } else {
   $850 = HEAP32[$3>>2]|0;
   $851 = ((($850)) + 408|0);
   $852 = HEAP32[$851>>2]|0;
   $853 = ($852|0)==(0|0);
   if ($853) {
    $$0 = -1;
    label = 763;
    break;
   }
   $854 = ((($852)) + 12|0);
   $855 = HEAP32[$854>>2]|0;
   $856 = (FUNCTION_TABLE_iiiiii[$855 & 127]($s,$852,$2,$bf,$out_sz)|0);
   $857 = ($856|0)==(0);
   if (!($857)) {
    $$0 = -1;
    label = 763;
    break;
   }
   $858 = HEAP32[$bf>>2]|0;
   $859 = ($858>>>0)>(4095);
   if ($859) {
    $$0 = -1;
    label = 763;
    break;
   }
   $860 = (((($fd)) + 328|0) + ($858<<2)|0);
   $861 = HEAP32[$860>>2]|0;
   HEAP32[$bf>>2] = $861;
   $862 = (((($848) + (($rec$0*108)|0)|0)) + 8|0);
   HEAP32[$862>>2] = $861;
  }
  do {
   if ($799) {
    $885 = (((($848) + (($rec$0*108)|0)|0)) + 12|0);
    HEAP32[$885>>2] = 0;
    HEAP8[$cf>>0] = 0;
   } else {
    $864 = HEAP32[$865>>2]|0;
    $$mask4 = $864 & -256;
    $866 = ($$mask4|0)==(256);
    $867 = HEAP32[$3>>2]|0;
    $868 = ((($867)) + 412|0);
    $869 = HEAP32[$868>>2]|0;
    $870 = ($869|0)==(0|0);
    if ($866) {
     if ($870) {
      $$0 = -1;
      label = 763;
      break L385;
     }
     $871 = ((($869)) + 12|0);
     $872 = HEAP32[$871>>2]|0;
     $873 = (FUNCTION_TABLE_iiiiii[$872 & 127]($s,$869,$2,$cf,$out_sz)|0);
     $874 = ($873|0)==(0);
     if (!($874)) {
      $$0 = -1;
      label = 763;
      break L385;
     }
     $875 = HEAP8[$cf>>0]|0;
     $876 = $875&255;
     $877 = (((($848) + (($rec$0*108)|0)|0)) + 12|0);
     HEAP32[$877>>2] = $876;
     break;
    } else {
     if ($870) {
      $$0 = -1;
      label = 763;
      break L385;
     }
     $878 = ((($869)) + 12|0);
     $879 = HEAP32[$878>>2]|0;
     $880 = (((($848) + (($rec$0*108)|0)|0)) + 12|0);
     $881 = (FUNCTION_TABLE_iiiiii[$879 & 127]($s,$869,$2,$880,$out_sz)|0);
     $882 = ($881|0)==(0);
     if (!($882)) {
      $$0 = -1;
      label = 763;
      break L385;
     }
     $883 = HEAP32[$880>>2]|0;
     $884 = $883&255;
     HEAP8[$cf>>0] = $884;
     break;
    }
   }
  } while(0);
  $886 = HEAP32[$865>>2]|0;
  $$mask1 = $886 & -256;
  $887 = ($$mask1|0)==(256);
  $$not = $775 ^ 1;
  $brmerge481 = $887 | $$not;
  do {
   if ($brmerge481) {
    $939 = (((($848) + (($rec$0*108)|0)|0)) + 4|0);
    HEAP32[$939>>2] = $500;
    $$pre$phiZ2D = $939;$942 = $500;$last_ref_id$3 = $last_ref_id$0;
   } else {
    if ($841) {
     $938 = (((($848) + (($rec$0*108)|0)|0)) + 4|0);
     HEAP32[$938>>2] = -1;
     $$pre$phiZ2D = $938;$942 = -1;$last_ref_id$3 = $last_ref_id$0;
     break;
    }
    $888 = HEAP32[$3>>2]|0;
    $889 = ((($888)) + 480|0);
    $890 = HEAP32[$889>>2]|0;
    $891 = ($890|0)==(0|0);
    if ($891) {
     $$0 = -1;
     label = 763;
     break L385;
    }
    $892 = ((($890)) + 12|0);
    $893 = HEAP32[$892>>2]|0;
    $894 = (((($848) + (($rec$0*108)|0)|0)) + 4|0);
    $895 = (FUNCTION_TABLE_iiiiii[$893 & 127]($s,$890,$2,$894,$out_sz)|0);
    $896 = ($895|0)==(0);
    if (!($896)) {
     $$0 = -1;
     label = 763;
     break L385;
    }
    $897 = HEAP32[$5>>2]|0;
    $898 = $897 & 768;
    $899 = ($898|0)!=(0);
    $$pre248 = HEAP32[$894>>2]|0;
    $900 = ($$pre248|0)>(-1);
    $or$cond482 = $899 & $900;
    if (!($or$cond482)) {
     $$pre$phiZ2D = $894;$942 = $$pre248;$last_ref_id$3 = $last_ref_id$0;
     break;
    }
    $901 = ($$pre248|0)==($last_ref_id$0|0);
    if ($901) {
     $$pre$phiZ2D = $894;$942 = $last_ref_id$0;$last_ref_id$3 = $last_ref_id$0;
     break;
    }
    $902 = HEAP32[$842>>2]|0;
    $903 = ($902|0)==(0);
    do {
     if ($903) {
      $904 = (($refs$0) + ($$pre248<<2)|0);
      $905 = HEAP32[$904>>2]|0;
      $906 = ($905|0)==(0|0);
      if ($906) {
       $907 = (_cram_get_ref($fd,$$pre248,1,0)|0);
       $908 = HEAP32[$894>>2]|0;
       $909 = (($refs$0) + ($908<<2)|0);
       HEAP32[$909>>2] = $907;
       $$pre245 = HEAP32[$894>>2]|0;
       $911 = $$pre245;
      } else {
       $911 = $$pre248;
      }
      $910 = (($refs$0) + ($911<<2)|0);
      $912 = HEAP32[$910>>2]|0;
      HEAP32[$817>>2] = $912;
      $913 = HEAP32[$843>>2]|0;
      $914 = ($913|0)==(0);
      $915 = ($last_ref_id$0|0)>(-1);
      $or$cond483 = $914 & $915;
      if (!($or$cond483)) {
       break;
      }
      $916 = (($refs$0) + ($last_ref_id$0<<2)|0);
      $917 = HEAP32[$916>>2]|0;
      $918 = ($917|0)==(0|0);
      if ($918) {
       break;
      }
      $919 = HEAP32[$$pre$phi291Z2D>>2]|0;
      _cram_ref_decr($919,$last_ref_id$0);
      HEAP32[$916>>2] = 0;
     }
    } while(0);
    HEAP32[$819>>2] = 1;
    (_pthread_mutex_lock(($$pre$phi293Z2D|0))|0);
    $920 = HEAP32[$$pre$phi291Z2D>>2]|0;
    $921 = ((($920)) + 28|0);
    (_pthread_mutex_lock(($921|0))|0);
    $922 = HEAP32[$894>>2]|0;
    $923 = HEAP32[$$pre$phi291Z2D>>2]|0;
    $924 = ((($923)) + 8|0);
    $925 = HEAP32[$924>>2]|0;
    $926 = (($925) + ($922<<2)|0);
    $927 = HEAP32[$926>>2]|0;
    $928 = ((($927)) + 8|0);
    $929 = $928;
    $930 = $929;
    $931 = HEAP32[$930>>2]|0;
    $932 = (($929) + 4)|0;
    $933 = $932;
    $934 = HEAP32[$933>>2]|0;
    HEAP32[$820>>2] = $931;
    $935 = HEAP32[$$pre$phi291Z2D>>2]|0;
    $936 = ((($935)) + 28|0);
    (_pthread_mutex_unlock(($936|0))|0);
    (_pthread_mutex_unlock(($$pre$phi293Z2D|0))|0);
    $937 = HEAP32[$894>>2]|0;
    $$pre$phiZ2D = $894;$942 = $937;$last_ref_id$3 = $937;
   }
  } while(0);
  $940 = HEAP32[$800>>2]|0;
  $941 = ($942|0)<($940|0);
  if (!($941)) {
   label = 285;
   break;
  }
  if (!($802)) {
   $943 = HEAP32[$3>>2]|0;
   $944 = ((($943)) + 448|0);
   $945 = HEAP32[$944>>2]|0;
   $946 = ($945|0)==(0|0);
   if ($946) {
    $$0 = -1;
    label = 763;
    break;
   }
   $947 = ((($945)) + 12|0);
   $948 = HEAP32[$947>>2]|0;
   $949 = (((($848) + (($rec$0*108)|0)|0)) + 16|0);
   $950 = (FUNCTION_TABLE_iiiiii[$948 & 127]($s,$945,$2,$949,$out_sz)|0);
   $951 = ($950|0)==(0);
   if (!($951)) {
    $$0 = $950;
    label = 763;
    break;
   }
   $952 = HEAP32[$949>>2]|0;
   $953 = ($952|0)<(0);
   if ($953) {
    label = 290;
    break;
   }
  }
  if ($804) {
   $971 = HEAP32[$805>>2]|0;
   $972 = (((($848) + (($rec$0*108)|0)|0)) + 20|0);
   HEAP32[$972>>2] = $971;
  } else {
   $954 = HEAP32[$3>>2]|0;
   $955 = ((($954)) + 416|0);
   $956 = HEAP32[$955>>2]|0;
   $957 = ($956|0)==(0|0);
   if ($957) {
    $$0 = -1;
    label = 763;
    break;
   }
   $958 = ((($956)) + 12|0);
   $959 = HEAP32[$958>>2]|0;
   $960 = (((($848) + (($rec$0*108)|0)|0)) + 20|0);
   $961 = (FUNCTION_TABLE_iiiiii[$959 & 127]($s,$956,$2,$960,$out_sz)|0);
   $962 = ($961|0)==(0);
   if (!($962)) {
    $$0 = $961;
    label = 763;
    break;
   }
   $963 = HEAP32[$3>>2]|0;
   $964 = ((($963)) + 44|0);
   $965 = HEAP32[$964>>2]|0;
   $966 = ($965|0)==(0);
   if ($966) {
    $$pre250 = HEAP32[$960>>2]|0;
    $970 = $$pre250;
   } else {
    $967 = HEAP32[$839>>2]|0;
    $968 = HEAP32[$960>>2]|0;
    $969 = (($968) + ($967))|0;
    HEAP32[$960>>2] = $969;
    $970 = $969;
   }
   HEAP32[$839>>2] = $970;
  }
  do {
   if ($807) {
    $984 = (((($848) + (($rec$0*108)|0)|0)) + 24|0);
    HEAP32[$984>>2] = -1;
   } else {
    $973 = HEAP32[$3>>2]|0;
    $974 = ((($973)) + 420|0);
    $975 = HEAP32[$974>>2]|0;
    $976 = ($975|0)==(0|0);
    if ($976) {
     $$0 = -1;
     label = 763;
     break L385;
    }
    $977 = ((($975)) + 12|0);
    $978 = HEAP32[$977>>2]|0;
    $979 = (((($848) + (($rec$0*108)|0)|0)) + 24|0);
    $980 = (FUNCTION_TABLE_iiiiii[$978 & 127]($s,$975,$2,$979,$out_sz)|0);
    $981 = ($980|0)==(0);
    if (!($981)) {
     $$0 = $980;
     label = 763;
     break L385;
    }
    $982 = HEAP32[$979>>2]|0;
    $983 = ($982|0)==($unknown_rg$0|0);
    if (!($983)) {
     break;
    }
    HEAP32[$979>>2] = -1;
   }
  } while(0);
  $985 = (((($848) + (($rec$0*108)|0)|0)) + 32|0);
  HEAP32[$985>>2] = 0;
  $986 = HEAP32[$3>>2]|0;
  $987 = ((($986)) + 40|0);
  $988 = HEAP32[$987>>2]|0;
  $989 = ($988|0)==(0);
  do {
   if (!($989)) {
    HEAP32[$out_sz2>>2] = 1;
    $990 = HEAP32[$830>>2]|0;
    $991 = ((($990)) + 40|0);
    $992 = HEAP32[$991>>2]|0;
    $993 = (((($848) + (($rec$0*108)|0)|0)) + 28|0);
    HEAP32[$993>>2] = $992;
    if ($832) {
     break;
    }
    $994 = HEAP32[$3>>2]|0;
    $995 = ((($994)) + 392|0);
    $996 = HEAP32[$995>>2]|0;
    $997 = ($996|0)==(0|0);
    if ($997) {
     $$0 = -1;
     label = 763;
     break L385;
    }
    $998 = ((($996)) + 12|0);
    $999 = HEAP32[$998>>2]|0;
    $1000 = HEAP32[$830>>2]|0;
    $1001 = (FUNCTION_TABLE_iiiiii[$999 & 127]($s,$996,$2,$1000,$out_sz2)|0);
    $1002 = ($1001|0)==(0);
    if (!($1002)) {
     $$0 = $1001;
     label = 763;
     break L385;
    }
    $1003 = HEAP32[$out_sz2>>2]|0;
    HEAP32[$985>>2] = $1003;
   }
  } while(0);
  $1004 = (((($848) + (($rec$0*108)|0)|0)) + 44|0);
  HEAP32[$1004>>2] = 0;
  $1005 = (((($848) + (($rec$0*108)|0)|0)) + 36|0);
  HEAP32[$1005>>2] = -1;
  $1006 = (((($848) + (($rec$0*108)|0)|0)) + 40|0);
  HEAP32[$1006>>2] = -1;
  do {
   if ($799) {
    label = 341;
   } else {
    $1007 = HEAP8[$cf>>0]|0;
    $1008 = $1007 & 2;
    $1009 = ($1008<<24>>24)==(0);
    if ($1009) {
     $1073 = HEAP8[$cf>>0]|0;
     $1074 = $1073 & 4;
     $1075 = ($1074<<24>>24)==(0);
     if ($1075) {
      label = 341;
      break;
     }
     if ($809) {
      $1088 = (((($848) + (($rec$0*108)|0)|0)) + 104|0);
      HEAP32[$1088>>2] = 0;
      $1089 = (((($848) + (($rec$0*108)|0)|0)) + 48|0);
      HEAP32[$1089>>2] = -2147483648;
      break;
     }
     $1076 = HEAP32[$3>>2]|0;
     $1077 = ((($1076)) + 444|0);
     $1078 = HEAP32[$1077>>2]|0;
     $1079 = ($1078|0)==(0|0);
     if ($1079) {
      $$0 = -1;
      label = 763;
      break L385;
     }
     $1080 = ((($1078)) + 12|0);
     $1081 = HEAP32[$1080>>2]|0;
     $1082 = (FUNCTION_TABLE_iiiiii[$1081 & 127]($s,$1078,$2,$1005,$out_sz)|0);
     $1083 = ($1082|0)==(0);
     if (!($1083)) {
      $$0 = $1082;
      label = 763;
      break L385;
     }
     $1084 = (($rec$0) + 1)|0;
     $1085 = HEAP32[$1005>>2]|0;
     $1086 = (($1085) + ($1084))|0;
     HEAP32[$1005>>2] = $1086;
     HEAP32[$1006>>2] = -1;
     $1087 = (((($848) + (($rec$0*108)|0)|0)) + 48|0);
     HEAP32[$1087>>2] = -2147483648;
     HEAP32[$1004>>2] = 0;
     break;
    }
    do {
     if ($829) {
      $1028 = (((($848) + (($rec$0*108)|0)|0)) + 104|0);
      HEAP32[$1028>>2] = 0;
     } else {
      $1010 = HEAP32[$865>>2]|0;
      $$mask3 = $1010 & -256;
      $1011 = ($$mask3|0)==(256);
      $1012 = HEAP32[$3>>2]|0;
      $1013 = ((($1012)) + 432|0);
      $1014 = HEAP32[$1013>>2]|0;
      $1015 = ($1014|0)==(0|0);
      if (!($1011)) {
       if ($1015) {
        $$0 = -1;
        label = 763;
        break L385;
       }
       $1023 = ((($1014)) + 12|0);
       $1024 = HEAP32[$1023>>2]|0;
       $1025 = (((($848) + (($rec$0*108)|0)|0)) + 104|0);
       $1026 = (FUNCTION_TABLE_iiiiii[$1024 & 127]($s,$1014,$2,$1025,$out_sz)|0);
       $1027 = ($1026|0)==(0);
       if ($1027) {
        break;
       } else {
        $$0 = $1026;
        label = 763;
        break L385;
       }
      }
      if ($1015) {
       $$0 = -1;
       label = 763;
       break L385;
      }
      $1016 = ((($1014)) + 12|0);
      $1017 = HEAP32[$1016>>2]|0;
      $1018 = (FUNCTION_TABLE_iiiiii[$1017 & 127]($s,$1014,$2,$mf,$out_sz)|0);
      $1019 = ($1018|0)==(0);
      if (!($1019)) {
       $$0 = $1018;
       label = 763;
       break L385;
      }
      $1020 = HEAP8[$mf>>0]|0;
      $1021 = $1020&255;
      $1022 = (((($848) + (($rec$0*108)|0)|0)) + 104|0);
      HEAP32[$1022>>2] = $1021;
     }
    } while(0);
    $1029 = HEAP32[$3>>2]|0;
    $1030 = ((($1029)) + 40|0);
    $1031 = HEAP32[$1030>>2]|0;
    $1032 = ($1031|0)==(0);
    do {
     if ($1032) {
      HEAP32[$out_sz22>>2] = 1;
      $1033 = HEAP32[$830>>2]|0;
      $1034 = ((($1033)) + 40|0);
      $1035 = HEAP32[$1034>>2]|0;
      $1036 = (((($848) + (($rec$0*108)|0)|0)) + 28|0);
      HEAP32[$1036>>2] = $1035;
      if ($832) {
       break;
      }
      $1037 = HEAP32[$3>>2]|0;
      $1038 = ((($1037)) + 392|0);
      $1039 = HEAP32[$1038>>2]|0;
      $1040 = ($1039|0)==(0|0);
      if ($1040) {
       $$0 = -1;
       label = 763;
       break L385;
      }
      $1041 = ((($1039)) + 12|0);
      $1042 = HEAP32[$1041>>2]|0;
      $1043 = HEAP32[$830>>2]|0;
      $1044 = (FUNCTION_TABLE_iiiiii[$1042 & 127]($s,$1039,$2,$1043,$out_sz22)|0);
      $1045 = ($1044|0)==(0);
      if (!($1045)) {
       $$0 = $1044;
       label = 763;
       break L385;
      }
      $1046 = HEAP32[$out_sz22>>2]|0;
      HEAP32[$985>>2] = $1046;
     }
    } while(0);
    if (!($834)) {
     $1047 = HEAP32[$3>>2]|0;
     $1048 = ((($1047)) + 428|0);
     $1049 = HEAP32[$1048>>2]|0;
     $1050 = ($1049|0)==(0|0);
     if ($1050) {
      $$0 = -1;
      label = 763;
      break L385;
     }
     $1051 = ((($1049)) + 12|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = (FUNCTION_TABLE_iiiiii[$1052 & 127]($s,$1049,$2,$1006,$out_sz)|0);
     $1054 = ($1053|0)==(0);
     if (!($1054)) {
      $$0 = $1053;
      label = 763;
      break L385;
     }
    }
    if (!($836)) {
     $1055 = HEAP32[$3>>2]|0;
     $1056 = ((($1055)) + 440|0);
     $1057 = HEAP32[$1056>>2]|0;
     $1058 = ($1057|0)==(0|0);
     if ($1058) {
      $$0 = -1;
      label = 763;
      break L385;
     }
     $1059 = ((($1057)) + 12|0);
     $1060 = HEAP32[$1059>>2]|0;
     $1061 = (FUNCTION_TABLE_iiiiii[$1060 & 127]($s,$1057,$2,$1004,$out_sz)|0);
     $1062 = ($1061|0)==(0);
     if (!($1062)) {
      $$0 = $1061;
      label = 763;
      break L385;
     }
    }
    if ($838) {
     $1072 = (((($848) + (($rec$0*108)|0)|0)) + 48|0);
     HEAP32[$1072>>2] = -2147483648;
     break;
    }
    $1063 = HEAP32[$3>>2]|0;
    $1064 = ((($1063)) + 436|0);
    $1065 = HEAP32[$1064>>2]|0;
    $1066 = ($1065|0)==(0|0);
    if ($1066) {
     $$0 = -1;
     label = 763;
     break L385;
    }
    $1067 = ((($1065)) + 12|0);
    $1068 = HEAP32[$1067>>2]|0;
    $1069 = (((($848) + (($rec$0*108)|0)|0)) + 48|0);
    $1070 = (FUNCTION_TABLE_iiiiii[$1068 & 127]($s,$1065,$2,$1069,$out_sz)|0);
    $1071 = ($1070|0)==(0);
    if (!($1071)) {
     $$0 = $1070;
     label = 763;
     break L385;
    }
   }
  } while(0);
  if ((label|0) == 341) {
   label = 0;
   $1090 = (((($848) + (($rec$0*108)|0)|0)) + 104|0);
   HEAP32[$1090>>2] = 0;
   $1091 = (((($848) + (($rec$0*108)|0)|0)) + 48|0);
   HEAP32[$1091>>2] = -2147483648;
  }
  $1092 = HEAP32[$865>>2]|0;
  $$mask2 = $1092 & -256;
  $1093 = ($$mask2|0)==(256);
  if ($1093) {
   HEAP32[$out_sz$i>>2] = 1;
   $1094 = HEAP32[$3>>2]|0;
   $1095 = ((($1094)) + 524|0);
   $1096 = HEAP32[$1095>>2]|0;
   $1097 = ($1096|0)==(0|0);
   L498: do {
    if ($1097) {
     $$0$i36 = -1;
    } else {
     $1098 = ((($1096)) + 12|0);
     $1099 = HEAP32[$1098>>2]|0;
     $1100 = (FUNCTION_TABLE_iiiiii[$1099 & 127]($s,$1096,$2,$ntags$i,$out_sz$i)|0);
     $1101 = HEAP8[$ntags$i>>0]|0;
     $1102 = $1101&255;
     $1103 = (((($848) + (($rec$0*108)|0)|0)) + 52|0);
     HEAP32[$1103>>2] = $1102;
     $1104 = (((($848) + (($rec$0*108)|0)|0)) + 60|0);
     HEAP32[$1104>>2] = 0;
     $1105 = HEAP32[$810>>2]|0;
     $1106 = ((($1105)) + 40|0);
     $1107 = HEAP32[$1106>>2]|0;
     $1108 = (((($848) + (($rec$0*108)|0)|0)) + 56|0);
     HEAP32[$1108>>2] = $1107;
     $1110 = $1102;$i$0$i35 = 0;$r$0$i = $1100;
     while(1) {
      $1109 = ($i$0$i35|0)<($1110|0);
      if (!($1109)) {
       $$0$i36 = $r$0$i;
       break L498;
      }
      HEAP32[$out_sz1$i>>2] = 1;
      $1111 = HEAP32[$3>>2]|0;
      $1112 = ((($1111)) + 504|0);
      $1113 = HEAP32[$1112>>2]|0;
      $1114 = ($1113|0)==(0|0);
      if ($1114) {
       $$0$i36 = -1;
       break L498;
      }
      $1115 = ((($1113)) + 12|0);
      $1116 = HEAP32[$1115>>2]|0;
      $1117 = (FUNCTION_TABLE_iiiiii[$1116 & 127]($s,$1113,$2,$id$i,$out_sz1$i)|0);
      $1118 = $r$0$i | $1117;
      $1119 = HEAP32[$out_sz1$i>>2]|0;
      $1120 = ($1119|0)==(3);
      $1121 = HEAP32[$id$i>>2]|0;
      if ($1120) {
       $1122 = $1121&65535;
       $1123 = ($1122&65535) >>> 8;
       $1124 = $1123&255;
       $1125 = $1121 >>> 16;
       $tag_data$i$sroa$0$0$in = $1121;$tag_data$i$sroa$12$0 = $1124;$tag_data$i$sroa$18$0$in = $1125;
      } else {
       $1126 = $1121 >>> 16;
       $1127 = $1121 >>> 8;
       $1128 = $1127&255;
       $tag_data$i$sroa$0$0$in = $1126;$tag_data$i$sroa$12$0 = $1128;$tag_data$i$sroa$18$0$in = $1121;
      }
      $tag_data$i$sroa$0$0 = $tag_data$i$sroa$0$0$in&255;
      $tag_data$i$sroa$18$0 = $tag_data$i$sroa$18$0$in&255;
      $1129 = HEAP32[$3>>2]|0;
      $1130 = $tag_data$i$sroa$0$0$in & 255;
      $1131 = ($1130*3)|0;
      $1132 = $tag_data$i$sroa$12$0&255;
      $1133 = (($1131) + ($1132))|0;
      $1134 = $1133 & 31;
      $1135 = (((($1129)) + 220|0) + ($1134<<2)|0);
      $m$0$in$i$i = $1135;
      while(1) {
       $m$0$i$i = HEAP32[$m$0$in$i$i>>2]|0;
       $1136 = ($m$0$i$i|0)==(0|0);
       if ($1136) {
        $$0$i36 = -1;
        break L498;
       }
       $1137 = HEAP32[$m$0$i$i>>2]|0;
       $1138 = ($1137|0)==($1121|0);
       if ($1138) {
        break;
       }
       $1139 = ((($m$0$i$i)) + 20|0);
       $m$0$in$i$i = $1139;
      }
      while(1) {
       $1140 = HEAP32[$810>>2]|0;
       $1141 = ((($1140)) + 36|0);
       $1142 = HEAP32[$1141>>2]|0;
       $1143 = ((($1140)) + 40|0);
       $1144 = HEAP32[$1143>>2]|0;
       $1145 = (($1144) + 3)|0;
       $1146 = ($1142>>>0)>($1145>>>0);
       if ($1146) {
        break;
       }
       $1147 = ($1142|0)==(0);
       $1148 = (+($1142>>>0));
       $1149 = $1148 * 1.5;
       $1150 = (~~(($1149))>>>0);
       $1151 = $1147 ? 1024 : $1150;
       HEAP32[$1141>>2] = $1151;
       $1152 = HEAP32[$810>>2]|0;
       $1153 = ((($1152)) + 32|0);
       $1154 = HEAP32[$1153>>2]|0;
       $1155 = ((($1152)) + 36|0);
       $1156 = HEAP32[$1155>>2]|0;
       $1157 = (_realloc($1154,$1156)|0);
       $1158 = HEAP32[$810>>2]|0;
       $1159 = ((($1158)) + 32|0);
       HEAP32[$1159>>2] = $1157;
      }
      $1160 = ((($1140)) + 32|0);
      $1161 = HEAP32[$1160>>2]|0;
      $1162 = (($1161) + ($1144)|0);
      HEAP8[$1162>>0] = $tag_data$i$sroa$0$0;
      $1163 = ((($1162)) + 1|0);
      HEAP8[$1163>>0] = $tag_data$i$sroa$12$0;
      $1164 = ((($1162)) + 2|0);
      HEAP8[$1164>>0] = $tag_data$i$sroa$18$0;
      $1165 = HEAP32[$810>>2]|0;
      $1166 = ((($1165)) + 40|0);
      $1167 = HEAP32[$1166>>2]|0;
      $1168 = (($1167) + 3)|0;
      HEAP32[$1166>>2] = $1168;
      $1169 = ((($m$0$i$i)) + 16|0);
      $1170 = HEAP32[$1169>>2]|0;
      $1171 = ($1170|0)==(0|0);
      if ($1171) {
       $$0$i36 = -1;
       break L498;
      }
      $1172 = ((($1170)) + 12|0);
      $1173 = HEAP32[$1172>>2]|0;
      $1174 = HEAP32[$810>>2]|0;
      $1175 = (FUNCTION_TABLE_iiiiii[$1173 & 127]($s,$1170,$2,$1174,$out_sz1$i)|0);
      $1176 = HEAP32[$out_sz1$i>>2]|0;
      $1177 = (($1176) + 3)|0;
      $1178 = HEAP32[$1104>>2]|0;
      $1179 = (($1178) + ($1177))|0;
      HEAP32[$1104>>2] = $1179;
      $1180 = $1118 | $1175;
      $1181 = (($i$0$i35) + 1)|0;
      $$pre255 = HEAP32[$1103>>2]|0;
      $1110 = $$pre255;$i$0$i35 = $1181;$r$0$i = $1180;
     }
    }
   } while(0);
   $$pn = $$0$i36;$has_MD$4 = 0;$has_NM$3 = 0;
  } else {
   HEAP32[$out_sz$i37>>2] = 1;
   HEAP32[$TL$i>>2] = 0;
   $1182 = HEAP32[$3>>2]|0;
   $1183 = ((($1182)) + 548|0);
   $1184 = HEAP32[$1183>>2]|0;
   $1185 = $1184 & 1073758208;
   $1186 = ($1185|0)==(0);
   L519: do {
    if ($1186) {
     $1187 = (((($848) + (($rec$0*108)|0)|0)) + 56|0);
     HEAP32[$1187>>2] = 0;
     $1188 = (((($848) + (($rec$0*108)|0)|0)) + 60|0);
     HEAP32[$1188>>2] = 0;
     $$0$i46 = 0;$has_MD$3 = 0;$has_NM$2 = 0;
    } else {
     $1189 = ((($1182)) + 476|0);
     $1190 = HEAP32[$1189>>2]|0;
     $1191 = ($1190|0)==(0|0);
     if ($1191) {
      $$0$i46 = -1;$has_MD$3 = 0;$has_NM$2 = 0;
      break;
     }
     $1192 = ((($1190)) + 12|0);
     $1193 = HEAP32[$1192>>2]|0;
     $1194 = (FUNCTION_TABLE_iiiiii[$1193 & 127]($s,$1190,$2,$TL$i,$out_sz$i37)|0);
     $1195 = ($1194|0)==(0);
     if (!($1195)) {
      $$0$i46 = -1;$has_MD$3 = 0;$has_NM$2 = 0;
      break;
     }
     $1196 = HEAP32[$TL$i>>2]|0;
     $1197 = ($1196|0)<(0);
     if ($1197) {
      $$0$i46 = -1;$has_MD$3 = 0;$has_NM$2 = 0;
      break;
     }
     $1198 = HEAP32[$3>>2]|0;
     $1199 = ((($1198)) + 72|0);
     $1200 = HEAP32[$1199>>2]|0;
     $1201 = ($1196|0)<($1200|0);
     if (!($1201)) {
      $$0$i46 = -1;$has_MD$3 = 0;$has_NM$2 = 0;
      break;
     }
     $1202 = ((($1198)) + 76|0);
     $1203 = HEAP32[$1202>>2]|0;
     $1204 = (($1203) + ($1196<<2)|0);
     $1205 = HEAP32[$1204>>2]|0;
     $1206 = $1205;
     $1207 = $1206 & 3;
     $1208 = ($1207|0)==(0);
     L526: do {
      if ($1208) {
       $$01$lcssa$i$i = $1205;
       label = 368;
      } else {
       $$014$i$i = $1205;$2801 = $1206;
       while(1) {
        $1209 = HEAP8[$$014$i$i>>0]|0;
        $1210 = ($1209<<24>>24)==(0);
        if ($1210) {
         $$pn$i$i = $2801;
         break L526;
        }
        $1211 = ((($$014$i$i)) + 1|0);
        $1212 = $1211;
        $1213 = $1212 & 3;
        $1214 = ($1213|0)==(0);
        if ($1214) {
         $$01$lcssa$i$i = $1211;
         label = 368;
         break;
        } else {
         $$014$i$i = $1211;$2801 = $1212;
        }
       }
      }
     } while(0);
     if ((label|0) == 368) {
      label = 0;
      $w$0$i$i = $$01$lcssa$i$i;
      while(1) {
       $1215 = HEAP32[$w$0$i$i>>2]|0;
       $1216 = (($1215) + -16843009)|0;
       $1217 = $1215 & -2139062144;
       $1218 = $1217 ^ -2139062144;
       $1219 = $1218 & $1216;
       $1220 = ($1219|0)==(0);
       $1221 = ((($w$0$i$i)) + 4|0);
       if ($1220) {
        $w$0$i$i = $1221;
       } else {
        break;
       }
      }
      $1222 = $1215&255;
      $1223 = ($1222<<24>>24)==(0);
      if ($1223) {
       $$1$lcssa$i$i = $w$0$i$i;
      } else {
       $$pn15$i$i = $w$0$i$i;
       while(1) {
        $1224 = ((($$pn15$i$i)) + 1|0);
        $$pre$i$i = HEAP8[$1224>>0]|0;
        $1225 = ($$pre$i$i<<24>>24)==(0);
        if ($1225) {
         $$1$lcssa$i$i = $1224;
         break;
        } else {
         $$pn15$i$i = $1224;
        }
       }
      }
      $1226 = $$1$lcssa$i$i;
      $$pn$i$i = $1226;
     }
     $$0$i$i40 = (($$pn$i$i) - ($1206))|0;
     $1227 = (($$0$i$i40>>>0) / 3)&-1;
     $1228 = (((($848) + (($rec$0*108)|0)|0)) + 52|0);
     HEAP32[$1228>>2] = $1227;
     $1229 = (((($848) + (($rec$0*108)|0)|0)) + 60|0);
     HEAP32[$1229>>2] = 0;
     $1230 = HEAP32[$810>>2]|0;
     $1231 = ((($1230)) + 40|0);
     $1232 = HEAP32[$1231>>2]|0;
     $1233 = (((($848) + (($rec$0*108)|0)|0)) + 56|0);
     HEAP32[$1233>>2] = $1232;
     $1234 = $1184 & 1073741824;
     $1235 = ($1234|0)==(0);
     if ($1235) {
      $$0$i46 = 0;$has_MD$3 = 0;$has_NM$2 = 0;
      break;
     } else {
      $1237 = $1227;$TN$0$i = $1205;$has_MD$0 = 0;$has_NM$0 = 0;$i$0$i41 = 0;
     }
     while(1) {
      $1236 = ($i$0$i41|0)<($1237|0);
      if (!($1236)) {
       $$0$i46 = 0;$has_MD$3 = $has_MD$0;$has_NM$2 = $has_NM$0;
       break L519;
      }
      HEAP32[$out_sz1$i38>>2] = 1;
      $1238 = HEAP8[$TN$0$i>>0]|0;
      $1239 = ($1238<<24>>24)==(77);
      if ($1239) {
       $1240 = ((($TN$0$i)) + 1|0);
       $1241 = HEAP8[$1240>>0]|0;
       $1242 = ($1241<<24>>24)==(68);
       $$has_MD$0 = $1242 ? 1 : $has_MD$0;
       $has_MD$2 = $$has_MD$0;
      } else {
       $has_MD$2 = $has_MD$0;
      }
      $1243 = ($1238<<24>>24)==(78);
      $1244 = ((($TN$0$i)) + 1|0);
      $1245 = HEAP8[$1244>>0]|0;
      $1246 = ($1245<<24>>24)==(77);
      $or$cond485 = $1243 & $1246;
      $1247 = $or$cond485 ? 77 : $1245;
      $has_NM$1 = $or$cond485 ? 1 : $has_NM$0;
      $1248 = ((($TN$0$i)) + 2|0);
      $1249 = ((($TN$0$i)) + 3|0);
      $1250 = HEAP8[$1248>>0]|0;
      $1251 = $1238&255;
      $1252 = $1251 << 16;
      $1253 = $1247&255;
      $1254 = $1253 << 8;
      $1255 = $1252 | $1254;
      $1256 = $1250&255;
      $1257 = $1255 | $1256;
      $1258 = HEAP32[$3>>2]|0;
      $1259 = ($1251*3)|0;
      $1260 = (($1259) + ($1253))|0;
      $1261 = $1260 & 31;
      $1262 = (((($1258)) + 220|0) + ($1261<<2)|0);
      $m$0$in$i$i43 = $1262;
      while(1) {
       $m$0$i$i44 = HEAP32[$m$0$in$i$i43>>2]|0;
       $1263 = ($m$0$i$i44|0)==(0|0);
       if ($1263) {
        $$0$i46 = -1;$has_MD$3 = $has_MD$2;$has_NM$2 = $has_NM$1;
        break L519;
       }
       $1264 = HEAP32[$m$0$i$i44>>2]|0;
       $1265 = ($1264|0)==($1257|0);
       if ($1265) {
        break;
       }
       $1266 = ((($m$0$i$i44)) + 20|0);
       $m$0$in$i$i43 = $1266;
      }
      while(1) {
       $1267 = HEAP32[$810>>2]|0;
       $1268 = ((($1267)) + 36|0);
       $1269 = HEAP32[$1268>>2]|0;
       $1270 = ((($1267)) + 40|0);
       $1271 = HEAP32[$1270>>2]|0;
       $1272 = (($1271) + 3)|0;
       $1273 = ($1269>>>0)>($1272>>>0);
       if ($1273) {
        break;
       }
       $1274 = ($1269|0)==(0);
       $1275 = (+($1269>>>0));
       $1276 = $1275 * 1.5;
       $1277 = (~~(($1276))>>>0);
       $1278 = $1274 ? 1024 : $1277;
       HEAP32[$1268>>2] = $1278;
       $1279 = HEAP32[$810>>2]|0;
       $1280 = ((($1279)) + 32|0);
       $1281 = HEAP32[$1280>>2]|0;
       $1282 = ((($1279)) + 36|0);
       $1283 = HEAP32[$1282>>2]|0;
       $1284 = (_realloc($1281,$1283)|0);
       $1285 = HEAP32[$810>>2]|0;
       $1286 = ((($1285)) + 32|0);
       HEAP32[$1286>>2] = $1284;
      }
      $1287 = ((($1267)) + 32|0);
      $1288 = HEAP32[$1287>>2]|0;
      $1289 = (($1288) + ($1271)|0);
      HEAP8[$1289>>0] = $1238;
      $1290 = ((($1289)) + 1|0);
      HEAP8[$1290>>0] = $1247;
      $1291 = ((($1289)) + 2|0);
      HEAP8[$1291>>0] = $1250;
      $1292 = HEAP32[$810>>2]|0;
      $1293 = ((($1292)) + 40|0);
      $1294 = HEAP32[$1293>>2]|0;
      $1295 = (($1294) + 3)|0;
      HEAP32[$1293>>2] = $1295;
      $1296 = ((($m$0$i$i44)) + 16|0);
      $1297 = HEAP32[$1296>>2]|0;
      $1298 = ($1297|0)==(0|0);
      if ($1298) {
       $$0$i46 = -1;$has_MD$3 = $has_MD$2;$has_NM$2 = $has_NM$1;
       break L519;
      }
      $1299 = ((($1297)) + 12|0);
      $1300 = HEAP32[$1299>>2]|0;
      $1301 = HEAP32[$810>>2]|0;
      $1302 = (FUNCTION_TABLE_iiiiii[$1300 & 127]($s,$1297,$2,$1301,$out_sz1$i38)|0);
      $1303 = ($1302|0)==(0);
      if (!($1303)) {
       $$0$i46 = $1302;$has_MD$3 = $has_MD$2;$has_NM$2 = $has_NM$1;
       break L519;
      }
      $1304 = HEAP32[$out_sz1$i38>>2]|0;
      $1305 = (($1304) + 3)|0;
      $1306 = HEAP32[$1229>>2]|0;
      $1307 = (($1306) + ($1305))|0;
      HEAP32[$1229>>2] = $1307;
      $1308 = (($i$0$i41) + 1)|0;
      $$pre251 = HEAP32[$1228>>2]|0;
      $1237 = $$pre251;$TN$0$i = $1249;$has_MD$0 = $has_MD$2;$has_NM$0 = $has_NM$1;$i$0$i41 = $1308;
     }
    }
   } while(0);
   $$pn = $$0$i46;$has_MD$4 = $has_MD$3;$has_NM$3 = $has_NM$2;
  }
  $1309 = ($$pn|0)==(0);
  if (!($1309)) {
   $$0 = $$pn;
   label = 763;
   break;
  }
  do {
   if ($802) {
    $qual$1 = $qual$0;$seq$1 = $seq$0;
   } else {
    $1310 = HEAP32[$826>>2]|0;
    $1311 = ((($1310)) + 40|0);
    $1312 = HEAP32[$1311>>2]|0;
    $1313 = (((($848) + (($rec$0*108)|0)|0)) + 72|0);
    HEAP32[$1313>>2] = $1312;
    $1314 = (((($848) + (($rec$0*108)|0)|0)) + 16|0);
    while(1) {
     $1315 = HEAP32[$826>>2]|0;
     $1316 = ((($1315)) + 36|0);
     $1317 = HEAP32[$1316>>2]|0;
     $1318 = ((($1315)) + 40|0);
     $1319 = HEAP32[$1318>>2]|0;
     $1320 = HEAP32[$1314>>2]|0;
     $1321 = (($1319) + ($1320))|0;
     $1322 = ($1317>>>0)>($1321>>>0);
     if ($1322) {
      break;
     }
     $1323 = ($1317|0)==(0);
     $1324 = (+($1317>>>0));
     $1325 = $1324 * 1.5;
     $1326 = (~~(($1325))>>>0);
     $1327 = $1323 ? 1024 : $1326;
     HEAP32[$1316>>2] = $1327;
     $1328 = HEAP32[$826>>2]|0;
     $1329 = ((($1328)) + 32|0);
     $1330 = HEAP32[$1329>>2]|0;
     $1331 = ((($1328)) + 36|0);
     $1332 = HEAP32[$1331>>2]|0;
     $1333 = (_realloc($1330,$1332)|0);
     $1334 = HEAP32[$826>>2]|0;
     $1335 = ((($1334)) + 32|0);
     HEAP32[$1335>>2] = $1333;
    }
    $1336 = ((($1315)) + 32|0);
    $1337 = HEAP32[$1336>>2]|0;
    $1338 = (($1337) + ($1319)|0);
    HEAP32[$1318>>2] = $1321;
    $1339 = ($1338|0)==(0|0);
    if ($1339) {
     $$0 = -1;
     label = 763;
     break L385;
    }
    $1340 = HEAP32[$827>>2]|0;
    $1341 = ((($1340)) + 40|0);
    $1342 = HEAP32[$1341>>2]|0;
    $1343 = (((($848) + (($rec$0*108)|0)|0)) + 76|0);
    HEAP32[$1343>>2] = $1342;
    while(1) {
     $1344 = HEAP32[$827>>2]|0;
     $1345 = ((($1344)) + 36|0);
     $1346 = HEAP32[$1345>>2]|0;
     $1347 = ((($1344)) + 40|0);
     $1348 = HEAP32[$1347>>2]|0;
     $1349 = HEAP32[$1314>>2]|0;
     $1350 = (($1348) + ($1349))|0;
     $1351 = ($1346>>>0)>($1350>>>0);
     if ($1351) {
      break;
     }
     $1352 = ($1346|0)==(0);
     $1353 = (+($1346>>>0));
     $1354 = $1353 * 1.5;
     $1355 = (~~(($1354))>>>0);
     $1356 = $1352 ? 1024 : $1355;
     HEAP32[$1345>>2] = $1356;
     $1357 = HEAP32[$827>>2]|0;
     $1358 = ((($1357)) + 32|0);
     $1359 = HEAP32[$1358>>2]|0;
     $1360 = ((($1357)) + 36|0);
     $1361 = HEAP32[$1360>>2]|0;
     $1362 = (_realloc($1359,$1361)|0);
     $1363 = HEAP32[$827>>2]|0;
     $1364 = ((($1363)) + 32|0);
     HEAP32[$1364>>2] = $1362;
    }
    $1365 = ((($1344)) + 32|0);
    $1366 = HEAP32[$1365>>2]|0;
    $1367 = (($1366) + ($1348)|0);
    HEAP32[$1347>>2] = $1350;
    $1368 = HEAP32[$817>>2]|0;
    $1369 = ($1368|0)==(0|0);
    if (!($1369)) {
     $qual$1 = $1367;$seq$1 = $1338;
     break;
    }
    $1370 = HEAP32[$1314>>2]|0;
    _memset(($1338|0),61,($1370|0))|0;
    $qual$1 = $1367;$seq$1 = $1338;
   }
  } while(0);
  $1371 = HEAP32[$bf>>2]|0;
  $1372 = $1371 & 4;
  $1373 = ($1372|0)==(0);
  L572: do {
   if ($1373) {
    if (!($804)) {
     $1374 = (((($848) + (($rec$0*108)|0)|0)) + 20|0);
     $1375 = HEAP32[$1374>>2]|0;
     $1376 = ($1375|0)<(1);
     if ($1376) {
      label = 401;
      break L385;
     }
    }
    if ($812) {
     $2543 = (((($848) + (($rec$0*108)|0)|0)) + 80|0);
     HEAP32[$2543>>2] = 0;
     $2544 = (((($848) + (($rec$0*108)|0)|0)) + 84|0);
     HEAP32[$2544>>2] = 0;
     $2545 = (((($848) + (($rec$0*108)|0)|0)) + 20|0);
     $2546 = HEAP32[$2545>>2]|0;
     $2547 = (((($848) + (($rec$0*108)|0)|0)) + 88|0);
     HEAP32[$2547>>2] = $2546;
     $2548 = (((($848) + (($rec$0*108)|0)|0)) + 92|0);
     HEAP32[$2548>>2] = 0;
     break;
    }
    $1377 = HEAP8[$cf>>0]|0;
    $1378 = $1377&255;
    HEAP32[$out_sz$i47>>2] = 1;
    $1379 = (((($848) + (($rec$0*108)|0)|0)) + 20|0);
    $1380 = HEAP32[$1379>>2]|0;
    $1381 = HEAP32[$813>>2]|0;
    $1382 = HEAP32[$814>>2]|0;
    $1383 = HEAP32[$815>>2]|0;
    HEAP32[$md_dist$i>>2] = 0;
    $1384 = HEAP32[$816>>2]|0;
    $1385 = ($1384|0)==(0);
    if ($1385) {
     $1392 = 0;$1405 = 0;$2802 = 0;
    } else {
     $1386 = HEAP32[$817>>2]|0;
     $1387 = ($has_MD$4|0)==(0);
     $not$ = ($1386|0)!=(0|0);
     $$486 = $1387 & $not$;
     $1388 = $$486&1;
     $1389 = HEAP32[$817>>2]|0;
     $1390 = ($has_NM$3|0)==(0);
     $not$533 = ($1389|0)!=(0|0);
     $$487 = $1390 & $not$533;
     $1392 = $$487;$1405 = $$486;$2802 = $1388;
    }
    $1391 = $1392&1;
    $1393 = HEAP32[$3>>2]|0;
    $1394 = ((($1393)) + 548|0);
    $1395 = HEAP32[$1394>>2]|0;
    $1396 = $1395 & 128;
    $1397 = ($1396|0)==(0);
    $$not488 = $1397 ^ 1;
    $1398 = $1378 & 1;
    $1399 = ($1398|0)==(0);
    $or$cond490 = $1399 & $$not488;
    if ($or$cond490) {
     $1400 = (((($848) + (($rec$0*108)|0)|0)) + 16|0);
     $1401 = HEAP32[$1400>>2]|0;
     _memset(($qual$1|0),-1,($1401|0))|0;
    }
    $1402 = (((($848) + (($rec$0*108)|0)|0)) + 12|0);
    $1403 = HEAP32[$1402>>2]|0;
    $1404 = $1403 & 8;
    $$not491 = ($1404|0)!=(0);
    $$not492 = $1405 ^ 1;
    $brmerge493 = $$not491 | $$not492;
    $$mux = $$not491 ? 0 : $1391;
    if ($brmerge493) {
     $decode_md$0$i65 = 0;$decode_nm$0$i72 = $$mux;$orig_aux$0$i = 0;
    } else {
     $1406 = HEAP32[$810>>2]|0;
     $1407 = ((($1406)) + 40|0);
     $1408 = HEAP32[$1407>>2]|0;
     $1410 = $1406;$1413 = $1408;
     while(1) {
      $1409 = ((($1410)) + 36|0);
      $1411 = HEAP32[$1409>>2]|0;
      $1412 = (($1413) + 3)|0;
      $1414 = ($1411>>>0)>($1412>>>0);
      if ($1414) {
       break;
      }
      $1415 = ($1411|0)==(0);
      $1416 = (+($1411>>>0));
      $1417 = $1416 * 1.5;
      $1418 = (~~(($1417))>>>0);
      $1419 = $1415 ? 1024 : $1418;
      HEAP32[$1409>>2] = $1419;
      $1420 = HEAP32[$810>>2]|0;
      $1421 = ((($1420)) + 32|0);
      $1422 = HEAP32[$1421>>2]|0;
      $1423 = ((($1420)) + 36|0);
      $1424 = HEAP32[$1423>>2]|0;
      $1425 = (_realloc($1422,$1424)|0);
      $1426 = HEAP32[$810>>2]|0;
      $1427 = ((($1426)) + 32|0);
      HEAP32[$1427>>2] = $1425;
      $$pre256 = HEAP32[$810>>2]|0;
      $$phi$trans$insert257 = ((($$pre256)) + 40|0);
      $$pre258 = HEAP32[$$phi$trans$insert257>>2]|0;
      $1410 = $$pre256;$1413 = $$pre258;
     }
     $1428 = ((($1410)) + 32|0);
     $1429 = HEAP32[$1428>>2]|0;
     $1430 = (($1429) + ($1413)|0);
     ;HEAP8[$1430>>0]=HEAP8[17443>>0]|0;HEAP8[$1430+1>>0]=HEAP8[17443+1>>0]|0;HEAP8[$1430+2>>0]=HEAP8[17443+2>>0]|0;
     $1431 = HEAP32[$810>>2]|0;
     $1432 = ((($1431)) + 40|0);
     $1433 = HEAP32[$1432>>2]|0;
     $1434 = (($1433) + 3)|0;
     HEAP32[$1432>>2] = $1434;
     $decode_md$0$i65 = $2802;$decode_nm$0$i72 = $1391;$orig_aux$0$i = $1408;
    }
    $1435 = $1395 & 512;
    $1436 = ($1435|0)==(0);
    do {
     if ($1436) {
      HEAP32[$fn$i>>2] = 0;
      label = 416;
     } else {
      $1437 = HEAP32[$3>>2]|0;
      $1438 = ((($1437)) + 452|0);
      $1439 = HEAP32[$1438>>2]|0;
      $1440 = ($1439|0)==(0|0);
      if ($1440) {
       $$0$i51 = -1;
       break;
      }
      $1441 = ((($1439)) + 12|0);
      $1442 = HEAP32[$1441>>2]|0;
      $1443 = (FUNCTION_TABLE_iiiiii[$1442 & 127]($s,$1439,$2,$fn$i,$out_sz$i47)|0);
      $1444 = ($1443|0)==(0);
      if ($1444) {
       label = 416;
      } else {
       $$0$i51 = $1443;
      }
     }
    } while(0);
    L597: do {
     if ((label|0) == 416) {
      label = 0;
      $1445 = (($1380) + -1)|0;
      $1446 = (((($848) + (($rec$0*108)|0)|0)) + 80|0);
      HEAP32[$1446>>2] = $1382;
      $1447 = $1395 & 260;
      $1448 = ($1447|0)==(0);
      L599: do {
       if ($1448) {
        $cig_len$23$i = 0;$cig_op$11$i = 0;$cigar$4$i = $1381;$cigar_alloc$4$i = $1383;$decode_md$0$i66 = $decode_md$0$i65;$ncigar$19$i = $1382;$nm$29$i = 0;$r$20$i = 0;$ref_pos$9$i = $1445;
        label = 653;
       } else {
        $1449 = $1395 & 256;
        $1450 = ($1449|0)==(0);
        $1451 = $1395 & 4;
        $1452 = ($1451|0)==(0);
        $1453 = (((($848) + (($rec$0*108)|0)|0)) + 16|0);
        $1454 = ($decode_md$0$i65|0)==(0);
        $1455 = $1395 & 33554432;
        $1456 = ($1455|0)==(0);
        $1457 = $1395 & 2048;
        $1458 = ($1457|0)==(0);
        $1459 = $1395 & 1024;
        $1460 = ($1459|0)==(0);
        $1461 = $1395 & 16;
        $1462 = ($1461|0)==(0);
        $1463 = $1395 & 64;
        $1464 = ($1463|0)==(0);
        $1465 = $1395 & 67108864;
        $1466 = ($1465|0)==(0);
        $1467 = $1395 & 268435456;
        $1468 = ($1467|0)==(0);
        $1469 = $1395 & 16777216;
        $1470 = ($1469|0)==(0);
        $1471 = $1395 & 8388608;
        $1472 = ($1471|0)==(0);
        $1473 = $1395 & 4194304;
        $1474 = ($1473|0)==(0);
        $cig_len$0$i = 0;$cig_op$0$i = 0;$cigar$0$i = $1381;$cigar_alloc$0$i = $1383;$f$0$i = 0;$ncigar$0$i = $1382;$nm$0$i = 0;$prev_pos$0$i = 0;$r$1$i49 = 0;$ref_pos$0$i = $1445;$seq_pos$0$i = 1;
        L601: while(1) {
         $1475 = HEAP32[$fn$i>>2]|0;
         $1476 = ($f$0$i|0)<($1475|0);
         if (!($1476)) {
          label = 622;
          break;
         }
         HEAP32[$pos$i>>2] = 0;
         $1477 = (($ncigar$0$i) + 2)|0;
         $1478 = ($1477>>>0)<($cigar_alloc$0$i>>>0);
         if ($1478) {
          $cigar$1$i = $cigar$0$i;$cigar_alloc$1$i = $cigar_alloc$0$i;
         } else {
          $1479 = ($cigar_alloc$0$i|0)==(0);
          $1480 = $cigar_alloc$0$i << 1;
          $$494 = $1479 ? 1024 : $1480;
          HEAP32[$813>>2] = $cigar$0$i;
          $1481 = $$494 << 2;
          $1482 = (_realloc($cigar$0$i,$1481)|0);
          $1483 = ($1482|0)==(0|0);
          if ($1483) {
           $$0$i51 = -1;
           break L597;
          }
          $cigar$1$i = $1482;$cigar_alloc$1$i = $$494;
         }
         if ($1450) {
          $r$2$i = $r$1$i49;
         } else {
          $1484 = HEAP32[$3>>2]|0;
          $1485 = ((($1484)) + 456|0);
          $1486 = HEAP32[$1485>>2]|0;
          $1487 = ($1486|0)==(0|0);
          if ($1487) {
           $$0$i51 = -1;
           break L597;
          }
          $1488 = ((($1486)) + 12|0);
          $1489 = HEAP32[$1488>>2]|0;
          $1490 = (FUNCTION_TABLE_iiiiii[$1489 & 127]($s,$1486,$2,$op$i,$out_sz$i47)|0);
          $1491 = $r$1$i49 | $1490;
          $1492 = ($1491|0)==(0);
          if ($1492) {
           $r$2$i = 0;
          } else {
           $$0$i51 = $1491;
           break L597;
          }
         }
         L612: do {
          if ($1452) {
           $cig_len$20$i = $cig_len$0$i;$cig_op$9$i = $cig_op$0$i;$ncigar$16$i = $ncigar$0$i;$nm$21$i = $nm$0$i;$prev_pos$1$i = $prev_pos$0$i;$r$19$i = $r$2$i;$ref_pos$5$i = $ref_pos$0$i;$seq_pos$5$i = $seq_pos$0$i;
          } else {
           $1493 = HEAP32[$3>>2]|0;
           $1494 = ((($1493)) + 460|0);
           $1495 = HEAP32[$1494>>2]|0;
           $1496 = ($1495|0)==(0|0);
           if ($1496) {
            $$0$i51 = -1;
            break L597;
           }
           $1497 = ((($1495)) + 12|0);
           $1498 = HEAP32[$1497>>2]|0;
           $1499 = (FUNCTION_TABLE_iiiiii[$1498 & 127]($s,$1495,$2,$pos$i,$out_sz$i47)|0);
           $1500 = $r$2$i | $1499;
           $1501 = ($1500|0)==(0);
           if (!($1501)) {
            $$0$i51 = $1500;
            break L597;
           }
           $1502 = HEAP32[$pos$i>>2]|0;
           $1503 = (($1502) + ($prev_pos$0$i))|0;
           HEAP32[$pos$i>>2] = $1503;
           $1504 = ($1503|0)<(1);
           if ($1504) {
            label = 429;
            break L601;
           }
           $1505 = ($1503|0)>($seq_pos$0$i|0);
           if ($1505) {
            $1506 = HEAP32[$1453>>2]|0;
            $1507 = (($1506) + 1)|0;
            $1508 = ($1503|0)>($1507|0);
            if ($1508) {
             $$0$i51 = -1;
             break L597;
            }
            $1509 = HEAP32[$817>>2]|0;
            $1510 = ($1509|0)==(0|0);
            L620: do {
             if ($1510) {
              $nm$5$i = $nm$0$i;
             } else {
              $1511 = HEAP32[$$pre$phiZ2D>>2]|0;
              $1512 = ($1511|0)>(-1);
              if (!($1512)) {
               $nm$5$i = $nm$0$i;
               break;
              }
              $1513 = (($ref_pos$0$i) + ($1503))|0;
              $1514 = (($1513) - ($seq_pos$0$i))|0;
              $1515 = HEAP32[$818>>2]|0;
              $1516 = (((($1515) + ($1511<<4)|0)) + 4|0);
              $1517 = HEAP32[$1516>>2]|0;
              $1518 = ($1514>>>0)>($1517>>>0);
              if (!($1518)) {
               $$not495 = $1454 ^ 1;
               $$not496 = ($decode_nm$0$i72|0)!=(0);
               $brmerge497 = $$not496 | $$not495;
               $1545 = (($seq_pos$0$i) + -1)|0;
               if ($brmerge497) {
                $1547 = $1503;$i$0$i50 = 0;$nm$1$i = $nm$0$i;
               } else {
                $1563 = (($seq$1) + ($1545)|0);
                $1564 = HEAP32[$819>>2]|0;
                $1565 = (($ref_pos$0$i) - ($1564))|0;
                $1566 = (($1565) + 1)|0;
                $1567 = (($1509) + ($1566)|0);
                $1568 = (($1503) - ($seq_pos$0$i))|0;
                _memcpy(($1563|0),($1567|0),($1568|0))|0;
                $nm$5$i = $nm$0$i;
                break;
               }
               while(1) {
                $1546 = (($1547) - ($seq_pos$0$i))|0;
                $1548 = ($i$0$i50|0)<($1546|0);
                if (!($1548)) {
                 $nm$5$i = $nm$1$i;
                 break L620;
                }
                $1549 = HEAP32[$819>>2]|0;
                $1550 = (($ref_pos$0$i) - ($1549))|0;
                $1551 = (($1550) + 1)|0;
                $1552 = (($1551) + ($i$0$i50))|0;
                $1553 = HEAP32[$817>>2]|0;
                $1554 = (($1553) + ($1552)|0);
                $1555 = HEAP8[$1554>>0]|0;
                $1556 = ($1555<<24>>24)==(78);
                if ($1556) {
                 _add_md_char($s,$decode_md$0$i65,78,$md_dist$i);
                 $1557 = (($nm$1$i) + 1)|0;
                 $nm$2$i = $1557;
                } else {
                 $1558 = HEAP32[$md_dist$i>>2]|0;
                 $1559 = (($1558) + 1)|0;
                 HEAP32[$md_dist$i>>2] = $1559;
                 $nm$2$i = $nm$1$i;
                }
                $1560 = (($1545) + ($i$0$i50))|0;
                $1561 = (($seq$1) + ($1560)|0);
                HEAP8[$1561>>0] = $1555;
                $1562 = (($i$0$i50) + 1)|0;
                $$pre267 = HEAP32[$pos$i>>2]|0;
                $1547 = $$pre267;$i$0$i50 = $1562;$nm$1$i = $nm$2$i;
               }
              }
              $1519 = HEAP32[6771]|0;
              $1520 = ($1519|0)==(0);
              if ($1520) {
               _fprintf(9772,17497,$vararg_buffer33);
               $$pre268 = HEAP32[$$pre$phiZ2D>>2]|0;
               $$pre269 = HEAP32[$818>>2]|0;
               $$phi$trans$insert270 = (((($$pre269) + ($$pre268<<4)|0)) + 4|0);
               $$pre271 = HEAP32[$$phi$trans$insert270>>2]|0;
               $1522 = $$pre271;
              } else {
               $1522 = $1517;
              }
              HEAP32[6771] = 1;
              $1521 = (($1522) - ($ref_pos$0$i))|0;
              $1523 = ($1521|0)>(0);
              $1524 = (($seq_pos$0$i) + -1)|0;
              $1525 = (($seq$1) + ($1524)|0);
              do {
               if ($1523) {
                $1526 = HEAP32[$819>>2]|0;
                $1527 = (($ref_pos$0$i) - ($1526))|0;
                $1528 = (($1527) + 1)|0;
                $1529 = HEAP32[$817>>2]|0;
                $1530 = (($1529) + ($1528)|0);
                _memcpy(($1525|0),($1530|0),($1521|0))|0;
                $1531 = HEAP32[$pos$i>>2]|0;
                $1532 = (($1531) - ($seq_pos$0$i))|0;
                $1533 = ($1532|0)>($1521|0);
                if (!($1533)) {
                 break;
                }
                $1534 = (($1524) + ($1521))|0;
                $1535 = (($seq$1) + ($1534)|0);
                $1536 = (($1532) - ($1521))|0;
                _memset(($1535|0),78,($1536|0))|0;
               } else {
                $1537 = HEAP32[$1453>>2]|0;
                $1538 = (($1537) - ($seq_pos$0$i))|0;
                $1539 = (($1538) + 1)|0;
                _memset(($1525|0),78,($1539|0))|0;
               }
              } while(0);
              $1540 = HEAP32[$md_dist$i>>2]|0;
              $1541 = ($1540|0)>(-1);
              if (!($1541)) {
               $nm$5$i = $nm$0$i;
               break;
              }
              $1542 = HEAP32[$pos$i>>2]|0;
              $1543 = (($1542) - ($seq_pos$0$i))|0;
              $1544 = (($1540) + ($1543))|0;
              HEAP32[$md_dist$i>>2] = $1544;
              $nm$5$i = $nm$0$i;
             }
            } while(0);
            $1569 = ($cig_len$0$i|0)==(0);
            do {
             if ($1569) {
              $cig_len$1$i = 0;$ncigar$1$i = $ncigar$0$i;
             } else {
              $1570 = ($cig_op$0$i|0)==(0);
              if ($1570) {
               $cig_len$1$i = $cig_len$0$i;$ncigar$1$i = $ncigar$0$i;
               break;
              }
              $1571 = $cig_len$0$i << 4;
              $1572 = (($1571) + ($cig_op$0$i))|0;
              $1573 = (($ncigar$0$i) + 1)|0;
              $1574 = (($cigar$1$i) + ($ncigar$0$i<<2)|0);
              HEAP32[$1574>>2] = $1572;
              $cig_len$1$i = 0;$ncigar$1$i = $1573;
             }
            } while(0);
            $1575 = HEAP32[$pos$i>>2]|0;
            $1576 = (($1575) - ($seq_pos$0$i))|0;
            $1577 = (($cig_len$1$i) + ($1576))|0;
            $1578 = (($ref_pos$0$i) + ($1576))|0;
            $2244 = $1575;$cig_len$2$i = $1577;$cig_op$1$i = 0;$ncigar$2$i = $ncigar$1$i;$nm$6$i = $nm$5$i;$ref_pos$1$i = $1578;$seq_pos$1$i = $1575;
           } else {
            $2244 = $1503;$cig_len$2$i = $cig_len$0$i;$cig_op$1$i = $cig_op$0$i;$ncigar$2$i = $ncigar$0$i;$nm$6$i = $nm$0$i;$ref_pos$1$i = $ref_pos$0$i;$seq_pos$1$i = $seq_pos$0$i;
           }
           if ($1450) {
            $cig_len$23$i = $cig_len$2$i;$cig_op$11$i = $cig_op$1$i;$cigar$4$i = $cigar$1$i;$cigar_alloc$4$i = $cigar_alloc$1$i;$decode_md$0$i66 = $decode_md$0$i65;$ncigar$19$i = $ncigar$2$i;$nm$29$i = $nm$6$i;$r$20$i = 0;$ref_pos$9$i = $ref_pos$1$i;
            label = 653;
            break L599;
           }
           $1579 = HEAP8[$op$i>>0]|0;
           $1580 = $1579 << 24 >> 24;
           do {
            switch ($1580|0) {
            case 83:  {
             HEAP32[$out_sz2$i>>2] = 1;
             $1581 = ($cig_len$2$i|0)==(0);
             if ($1581) {
              $ncigar$3$i = $ncigar$2$i;
             } else {
              $1582 = $cig_len$2$i << 4;
              $1583 = (($1582) + ($cig_op$1$i))|0;
              $1584 = (($ncigar$2$i) + 1)|0;
              $1585 = (($cigar$1$i) + ($ncigar$2$i<<2)|0);
              HEAP32[$1585>>2] = $1583;
              $ncigar$3$i = $1584;
             }
             $1586 = HEAP32[$865>>2]|0;
             $$mask534 = $1586 & -256;
             $cond = ($$mask534|0)==(256);
             do {
              if ($cond) {
               if ($1458) {
                $cig_len$20$i = 0;$cig_op$9$i = $cig_op$1$i;$ncigar$16$i = $ncigar$3$i;$nm$21$i = $nm$6$i;$prev_pos$1$i = $2244;$r$19$i = 0;$ref_pos$5$i = $ref_pos$1$i;$seq_pos$5$i = $seq_pos$1$i;
                break L612;
               }
               $1587 = HEAP32[$3>>2]|0;
               $1588 = ((($1587)) + 400|0);
               $1589 = HEAP32[$1588>>2]|0;
               $1590 = ($1589|0)==(0|0);
               if ($1590) {
                $1600 = HEAP32[$pos$i>>2]|0;
                $1601 = (($1600) + -1)|0;
                $1602 = (($seq$1) + ($1601)|0);
                HEAP8[$1602>>0] = 78;
                HEAP32[$out_sz2$i>>2] = 1;
                break;
               } else {
                $1591 = ((($1589)) + 12|0);
                $1592 = HEAP32[$1591>>2]|0;
                $1593 = HEAP32[$1453>>2]|0;
                $1594 = ($1593|0)==(0);
                $1595 = HEAP32[$pos$i>>2]|0;
                $1596 = (($1595) + -1)|0;
                $1597 = (($seq$1) + ($1596)|0);
                $1598 = $1594 ? 0 : $1597;
                $1599 = (FUNCTION_TABLE_iiiiii[$1592 & 127]($s,$1589,$2,$1598,$out_sz2$i)|0);
                $r$5$i = $1599;
                label = 467;
                break;
               }
              } else {
               if ($1456) {
                $cig_len$20$i = 0;$cig_op$9$i = $cig_op$1$i;$ncigar$16$i = $ncigar$3$i;$nm$21$i = $nm$6$i;$prev_pos$1$i = $2244;$r$19$i = 0;$ref_pos$5$i = $ref_pos$1$i;$seq_pos$5$i = $seq_pos$1$i;
                break L612;
               }
               $1603 = HEAP32[$3>>2]|0;
               $1604 = ((($1603)) + 404|0);
               $1605 = HEAP32[$1604>>2]|0;
               $1606 = ($1605|0)==(0|0);
               if ($1606) {
                $1616 = HEAP32[$pos$i>>2]|0;
                $1617 = (($1616) + -1)|0;
                $1618 = (($seq$1) + ($1617)|0);
                HEAP8[$1618>>0] = 78;
                HEAP32[$out_sz2$i>>2] = 1;
                break;
               } else {
                $1607 = ((($1605)) + 12|0);
                $1608 = HEAP32[$1607>>2]|0;
                $1609 = HEAP32[$1453>>2]|0;
                $1610 = ($1609|0)==(0);
                $1611 = HEAP32[$pos$i>>2]|0;
                $1612 = (($1611) + -1)|0;
                $1613 = (($seq$1) + ($1612)|0);
                $1614 = $1610 ? 0 : $1613;
                $1615 = (FUNCTION_TABLE_iiiiii[$1608 & 127]($s,$1605,$2,$1614,$out_sz2$i)|0);
                $r$5$i = $1615;
                label = 467;
                break;
               }
              }
             } while(0);
             if ((label|0) == 467) {
              label = 0;
              $1619 = ($r$5$i|0)==(0);
              if (!($1619)) {
               $$0$i51 = $r$5$i;
               break L597;
              }
             }
             $1620 = HEAP32[$out_sz2$i>>2]|0;
             $1621 = $1620 << 4;
             $1622 = $1621 | 4;
             $1623 = (($ncigar$3$i) + 1)|0;
             $1624 = (($cigar$1$i) + ($ncigar$3$i<<2)|0);
             HEAP32[$1624>>2] = $1622;
             $1625 = HEAP32[$out_sz2$i>>2]|0;
             $1626 = (($seq_pos$1$i) + ($1625))|0;
             $cig_len$20$i = 0;$cig_op$9$i = 4;$ncigar$16$i = $1623;$nm$21$i = $nm$6$i;$prev_pos$1$i = $2244;$r$19$i = 0;$ref_pos$5$i = $ref_pos$1$i;$seq_pos$5$i = $1626;
             break L612;
             break;
            }
            case 88:  {
             $1627 = ($cig_len$2$i|0)==(0);
             do {
              if ($1627) {
               $cig_len$4$i = 0;$ncigar$5$i = $ncigar$2$i;
              } else {
               $1628 = ($cig_op$1$i|0)==(0);
               if ($1628) {
                $cig_len$4$i = $cig_len$2$i;$ncigar$5$i = $ncigar$2$i;
                break;
               }
               $1629 = $cig_len$2$i << 4;
               $1630 = (($1629) + ($cig_op$1$i))|0;
               $1631 = (($ncigar$2$i) + 1)|0;
               $1632 = (($cigar$1$i) + ($ncigar$2$i<<2)|0);
               HEAP32[$1632>>2] = $1630;
               $cig_len$4$i = 0;$ncigar$5$i = $1631;
              }
             } while(0);
             L675: do {
              if ($1460) {
               $nm$9$i = $nm$6$i;
              } else {
               $1633 = HEAP32[$3>>2]|0;
               $1634 = ((($1633)) + 472|0);
               $1635 = HEAP32[$1634>>2]|0;
               $1636 = ($1635|0)==(0|0);
               if ($1636) {
                $$0$i51 = -1;
                break L597;
               }
               $1637 = ((($1635)) + 12|0);
               $1638 = HEAP32[$1637>>2]|0;
               $1639 = (FUNCTION_TABLE_iiiiii[$1638 & 127]($s,$1635,$2,$base1$i,$out_sz$i47)|0);
               $1640 = ($1639|0)==(0);
               if (!($1640)) {
                $$0$i51 = -1;
                break L597;
               }
               $1641 = HEAP32[$$pre$phiZ2D>>2]|0;
               $1642 = HEAP32[$818>>2]|0;
               $1643 = (((($1642) + ($1641<<4)|0)) + 4|0);
               $1644 = HEAP32[$1643>>2]|0;
               $1645 = ($ref_pos$1$i>>>0)<($1644>>>0);
               do {
                if ($1645) {
                 $1646 = HEAP32[$817>>2]|0;
                 $1647 = ($1646|0)==(0|0);
                 if ($1647) {
                  break;
                 }
                 $1695 = HEAP32[$820>>2]|0;
                 $1696 = ($ref_pos$1$i|0)>($1695|0);
                 if ($1696) {
                  $1704 = 78;
                 } else {
                  $1697 = HEAP32[$819>>2]|0;
                  $1698 = (($ref_pos$1$i) - ($1697))|0;
                  $1699 = (($1698) + 1)|0;
                  $1700 = (($1646) + ($1699)|0);
                  $1701 = HEAP8[$1700>>0]|0;
                  $1702 = $1701&255;
                  $1704 = $1702;
                 }
                 $1703 = $1704&255;
                 $1705 = HEAP32[$pos$i>>2]|0;
                 $1706 = HEAP32[$1453>>2]|0;
                 $1707 = ($1705|0)>($1706|0);
                 if (!($1707)) {
                  $1708 = (((($fd)) + 33096|0) + ($1704)|0);
                  $1709 = HEAP8[$1708>>0]|0;
                  $1710 = $1709&255;
                  $1711 = HEAP8[$base1$i>>0]|0;
                  $1712 = $1711&255;
                  $1713 = HEAP32[$3>>2]|0;
                  $1714 = ((((($1713)) + 48|0) + ($1710<<2)|0) + ($1712)|0);
                  $1715 = HEAP8[$1714>>0]|0;
                  $1716 = (($1705) + -1)|0;
                  $1717 = (($seq$1) + ($1716)|0);
                  HEAP8[$1717>>0] = $1715;
                 }
                 _add_md_char($s,$decode_md$0$i65,$1703,$md_dist$i);
                 $nm$9$i = $nm$6$i;
                 break L675;
                }
               } while(0);
               $1648 = HEAP32[$pos$i>>2]|0;
               $1649 = HEAP32[$1453>>2]|0;
               $1650 = ($1648|0)>($1649|0);
               if (!($1650)) {
                $1651 = HEAP8[$base1$i>>0]|0;
                $1652 = $1651&255;
                $1653 = HEAP8[$821>>0]|0;
                $1654 = $1653&255;
                $1655 = HEAP32[$3>>2]|0;
                $1656 = ((((($1655)) + 48|0) + ($1654<<2)|0) + ($1652)|0);
                $1657 = HEAP8[$1656>>0]|0;
                $1658 = (($1648) + -1)|0;
                $1659 = (($seq$1) + ($1658)|0);
                HEAP8[$1659>>0] = $1657;
               }
               $1660 = $decode_md$0$i65 | $decode_nm$0$i72;
               $brmerge500 = ($1660|0)==(0);
               if ($brmerge500) {
                $nm$9$i = $nm$6$i;
                break;
               }
               $1661 = HEAP32[$md_dist$i>>2]|0;
               $$not501 = ($1661|0)<(0);
               $brmerge502 = $$not501 | $1454;
               if (!($brmerge502)) {
                while(1) {
                 $1662 = HEAP32[$810>>2]|0;
                 $1663 = ((($1662)) + 36|0);
                 $1664 = HEAP32[$1663>>2]|0;
                 $1665 = ((($1662)) + 40|0);
                 $1666 = HEAP32[$1665>>2]|0;
                 $1667 = (($1666) + 11)|0;
                 $1668 = ($1664>>>0)>($1667>>>0);
                 if ($1668) {
                  break;
                 }
                 $1669 = ($1664|0)==(0);
                 $1670 = (+($1664>>>0));
                 $1671 = $1670 * 1.5;
                 $1672 = (~~(($1671))>>>0);
                 $1673 = $1669 ? 1024 : $1672;
                 HEAP32[$1663>>2] = $1673;
                 $1674 = HEAP32[$810>>2]|0;
                 $1675 = ((($1674)) + 32|0);
                 $1676 = HEAP32[$1675>>2]|0;
                 $1677 = ((($1674)) + 36|0);
                 $1678 = HEAP32[$1677>>2]|0;
                 $1679 = (_realloc($1676,$1678)|0);
                 $1680 = HEAP32[$810>>2]|0;
                 $1681 = ((($1680)) + 32|0);
                 HEAP32[$1681>>2] = $1679;
                }
                $1682 = ((($1662)) + 32|0);
                $1683 = HEAP32[$1682>>2]|0;
                $1684 = (($1683) + ($1666)|0);
                $1685 = HEAP32[$md_dist$i>>2]|0;
                $1686 = (_append_uint32($1684,$1685)|0);
                $1687 = $1686;
                $1688 = $1684;
                $1689 = (($1687) - ($1688))|0;
                $1690 = HEAP32[$810>>2]|0;
                $1691 = ((($1690)) + 40|0);
                $1692 = HEAP32[$1691>>2]|0;
                $1693 = (($1692) + ($1689))|0;
                HEAP32[$1691>>2] = $1693;
               }
               HEAP32[$md_dist$i>>2] = -1;
               $1694 = (($nm$6$i) + -1)|0;
               $nm$9$i = $1694;
              }
             } while(0);
             $1718 = (($nm$9$i) + 1)|0;
             $1719 = (($cig_len$4$i) + 1)|0;
             $1720 = (($seq_pos$1$i) + 1)|0;
             $1721 = (($ref_pos$1$i) + 1)|0;
             $cig_len$20$i = $1719;$cig_op$9$i = 0;$ncigar$16$i = $ncigar$5$i;$nm$21$i = $1718;$prev_pos$1$i = $2244;$r$19$i = 0;$ref_pos$5$i = $1721;$seq_pos$5$i = $1720;
             break L612;
             break;
            }
            case 68:  {
             $1722 = ($cig_len$2$i|0)==(0);
             do {
              if ($1722) {
               $cig_len$5$i = 0;$ncigar$6$i = $ncigar$2$i;
              } else {
               $1723 = ($cig_op$1$i|0)==(2);
               if ($1723) {
                $cig_len$5$i = $cig_len$2$i;$ncigar$6$i = $ncigar$2$i;
                break;
               }
               $1724 = $cig_len$2$i << 4;
               $1725 = (($1724) + ($cig_op$1$i))|0;
               $1726 = (($ncigar$2$i) + 1)|0;
               $1727 = (($cigar$1$i) + ($ncigar$2$i<<2)|0);
               HEAP32[$1727>>2] = $1725;
               $cig_len$5$i = 0;$ncigar$6$i = $1726;
              }
             } while(0);
             if ($1462) {
              $cig_len$20$i = $cig_len$5$i;$cig_op$9$i = $cig_op$1$i;$ncigar$16$i = $ncigar$6$i;$nm$21$i = $nm$6$i;$prev_pos$1$i = $2244;$r$19$i = 0;$ref_pos$5$i = $ref_pos$1$i;$seq_pos$5$i = $seq_pos$1$i;
              break L612;
             }
             $1728 = HEAP32[$3>>2]|0;
             $1729 = ((($1728)) + 464|0);
             $1730 = HEAP32[$1729>>2]|0;
             $1731 = ($1730|0)==(0|0);
             if ($1731) {
              $$0$i51 = -1;
              break L597;
             }
             $1732 = ((($1730)) + 12|0);
             $1733 = HEAP32[$1732>>2]|0;
             $1734 = (FUNCTION_TABLE_iiiiii[$1733 & 127]($s,$1730,$2,$i32$i,$out_sz$i47)|0);
             $1735 = ($1734|0)==(0);
             if (!($1735)) {
              $$0$i51 = $1734;
              break L597;
             }
             $1736 = $decode_md$0$i65 | $decode_nm$0$i72;
             $brmerge505 = ($1736|0)==(0);
             do {
              if ($brmerge505) {
               $$pre279 = HEAP32[$i32$i>>2]|0;
               $1935 = $$pre279;$nm$12$i = $nm$6$i;
              } else {
               $1737 = HEAP32[$md_dist$i>>2]|0;
               $$not506 = ($1737|0)<(0);
               $brmerge507 = $$not506 | $1454;
               if (!($brmerge507)) {
                while(1) {
                 $1738 = HEAP32[$810>>2]|0;
                 $1739 = ((($1738)) + 36|0);
                 $1740 = HEAP32[$1739>>2]|0;
                 $1741 = ((($1738)) + 40|0);
                 $1742 = HEAP32[$1741>>2]|0;
                 $1743 = (($1742) + 11)|0;
                 $1744 = ($1740>>>0)>($1743>>>0);
                 if ($1744) {
                  break;
                 }
                 $1745 = ($1740|0)==(0);
                 $1746 = (+($1740>>>0));
                 $1747 = $1746 * 1.5;
                 $1748 = (~~(($1747))>>>0);
                 $1749 = $1745 ? 1024 : $1748;
                 HEAP32[$1739>>2] = $1749;
                 $1750 = HEAP32[$810>>2]|0;
                 $1751 = ((($1750)) + 32|0);
                 $1752 = HEAP32[$1751>>2]|0;
                 $1753 = ((($1750)) + 36|0);
                 $1754 = HEAP32[$1753>>2]|0;
                 $1755 = (_realloc($1752,$1754)|0);
                 $1756 = HEAP32[$810>>2]|0;
                 $1757 = ((($1756)) + 32|0);
                 HEAP32[$1757>>2] = $1755;
                }
                $1758 = ((($1738)) + 32|0);
                $1759 = HEAP32[$1758>>2]|0;
                $1760 = (($1759) + ($1742)|0);
                $1761 = HEAP32[$md_dist$i>>2]|0;
                $1762 = (_append_uint32($1760,$1761)|0);
                $1763 = $1762;
                $1764 = $1760;
                $1765 = (($1763) - ($1764))|0;
                $1766 = HEAP32[$810>>2]|0;
                $1767 = ((($1766)) + 40|0);
                $1768 = HEAP32[$1767>>2]|0;
                $1769 = (($1768) + ($1765))|0;
                HEAP32[$1767>>2] = $1769;
               }
               $1770 = HEAP32[$i32$i>>2]|0;
               $1771 = (($ref_pos$1$i) + ($1770))|0;
               $1772 = HEAP32[$$pre$phiZ2D>>2]|0;
               $1773 = HEAP32[$818>>2]|0;
               $1774 = (((($1773) + ($1772<<4)|0)) + 4|0);
               $1775 = HEAP32[$1774>>2]|0;
               $1776 = ($1771>>>0)>($1775>>>0);
               if (!($1776)) {
                if ($1454) {
                 $1836 = $1770;
                } else {
                 while(1) {
                  $1777 = HEAP32[$810>>2]|0;
                  $1778 = ((($1777)) + 36|0);
                  $1779 = HEAP32[$1778>>2]|0;
                  $1780 = ((($1777)) + 40|0);
                  $1781 = HEAP32[$1780>>2]|0;
                  $1782 = (($1781) + 1)|0;
                  $1783 = ($1779>>>0)>($1782>>>0);
                  if ($1783) {
                   break;
                  }
                  $1784 = ($1779|0)==(0);
                  $1785 = (+($1779>>>0));
                  $1786 = $1785 * 1.5;
                  $1787 = (~~(($1786))>>>0);
                  $1788 = $1784 ? 1024 : $1787;
                  HEAP32[$1778>>2] = $1788;
                  $1789 = HEAP32[$810>>2]|0;
                  $1790 = ((($1789)) + 32|0);
                  $1791 = HEAP32[$1790>>2]|0;
                  $1792 = ((($1789)) + 36|0);
                  $1793 = HEAP32[$1792>>2]|0;
                  $1794 = (_realloc($1791,$1793)|0);
                  $1795 = HEAP32[$810>>2]|0;
                  $1796 = ((($1795)) + 32|0);
                  HEAP32[$1796>>2] = $1794;
                 }
                 HEAP32[$1780>>2] = $1782;
                 $1797 = HEAP32[$810>>2]|0;
                 $1798 = ((($1797)) + 32|0);
                 $1799 = HEAP32[$1798>>2]|0;
                 $1800 = (($1799) + ($1781)|0);
                 HEAP8[$1800>>0] = 94;
                 while(1) {
                  $1801 = HEAP32[$810>>2]|0;
                  $1802 = ((($1801)) + 36|0);
                  $1803 = HEAP32[$1802>>2]|0;
                  $1804 = ((($1801)) + 40|0);
                  $1805 = HEAP32[$1804>>2]|0;
                  $1806 = HEAP32[$i32$i>>2]|0;
                  $1807 = (($1805) + ($1806))|0;
                  $1808 = ($1803>>>0)>($1807>>>0);
                  if ($1808) {
                   break;
                  }
                  $1809 = ($1803|0)==(0);
                  $1810 = (+($1803>>>0));
                  $1811 = $1810 * 1.5;
                  $1812 = (~~(($1811))>>>0);
                  $1813 = $1809 ? 1024 : $1812;
                  HEAP32[$1802>>2] = $1813;
                  $1814 = HEAP32[$810>>2]|0;
                  $1815 = ((($1814)) + 32|0);
                  $1816 = HEAP32[$1815>>2]|0;
                  $1817 = ((($1814)) + 36|0);
                  $1818 = HEAP32[$1817>>2]|0;
                  $1819 = (_realloc($1816,$1818)|0);
                  $1820 = HEAP32[$810>>2]|0;
                  $1821 = ((($1820)) + 32|0);
                  HEAP32[$1821>>2] = $1819;
                 }
                 $1822 = ((($1801)) + 32|0);
                 $1823 = HEAP32[$1822>>2]|0;
                 $1824 = (($1823) + ($1805)|0);
                 $1825 = HEAP32[$819>>2]|0;
                 $1826 = (($ref_pos$1$i) - ($1825))|0;
                 $1827 = (($1826) + 1)|0;
                 $1828 = HEAP32[$817>>2]|0;
                 $1829 = (($1828) + ($1827)|0);
                 _memcpy(($1824|0),($1829|0),($1806|0))|0;
                 $1830 = HEAP32[$i32$i>>2]|0;
                 $1831 = HEAP32[$810>>2]|0;
                 $1832 = ((($1831)) + 40|0);
                 $1833 = HEAP32[$1832>>2]|0;
                 $1834 = (($1833) + ($1830))|0;
                 HEAP32[$1832>>2] = $1834;
                 HEAP32[$md_dist$i>>2] = 0;
                 $$pre272 = HEAP32[$i32$i>>2]|0;
                 $1836 = $$pre272;
                }
                $1835 = (($nm$6$i) + ($1836))|0;
                $1935 = $1836;$nm$12$i = $1835;
                break;
               }
               $1837 = ($1775>>>0)<($ref_pos$1$i>>>0);
               if ($1837) {
                $2803 = $1770;$nm$10$i = $nm$6$i;
               } else {
                if ($1454) {
                 $1932 = $1775;$2804 = $1770;
                } else {
                 while(1) {
                  $1838 = HEAP32[$810>>2]|0;
                  $1839 = ((($1838)) + 36|0);
                  $1840 = HEAP32[$1839>>2]|0;
                  $1841 = ((($1838)) + 40|0);
                  $1842 = HEAP32[$1841>>2]|0;
                  $1843 = (($1842) + 1)|0;
                  $1844 = ($1840>>>0)>($1843>>>0);
                  if ($1844) {
                   break;
                  }
                  $1845 = ($1840|0)==(0);
                  $1846 = (+($1840>>>0));
                  $1847 = $1846 * 1.5;
                  $1848 = (~~(($1847))>>>0);
                  $1849 = $1845 ? 1024 : $1848;
                  HEAP32[$1839>>2] = $1849;
                  $1850 = HEAP32[$810>>2]|0;
                  $1851 = ((($1850)) + 32|0);
                  $1852 = HEAP32[$1851>>2]|0;
                  $1853 = ((($1850)) + 36|0);
                  $1854 = HEAP32[$1853>>2]|0;
                  $1855 = (_realloc($1852,$1854)|0);
                  $1856 = HEAP32[$810>>2]|0;
                  $1857 = ((($1856)) + 32|0);
                  HEAP32[$1857>>2] = $1855;
                 }
                 HEAP32[$1841>>2] = $1843;
                 $1858 = HEAP32[$810>>2]|0;
                 $1859 = ((($1858)) + 32|0);
                 $1860 = HEAP32[$1859>>2]|0;
                 $1861 = (($1860) + ($1842)|0);
                 HEAP8[$1861>>0] = 94;
                 while(1) {
                  $1862 = HEAP32[$810>>2]|0;
                  $1863 = ((($1862)) + 36|0);
                  $1864 = HEAP32[$1863>>2]|0;
                  $1865 = ((($1862)) + 40|0);
                  $1866 = HEAP32[$1865>>2]|0;
                  $1867 = HEAP32[$$pre$phiZ2D>>2]|0;
                  $1868 = HEAP32[$818>>2]|0;
                  $1869 = (((($1868) + ($1867<<4)|0)) + 4|0);
                  $1870 = HEAP32[$1869>>2]|0;
                  $1871 = (($1870) - ($ref_pos$1$i))|0;
                  $1872 = (($1866) + ($1871))|0;
                  $1873 = ($1864>>>0)>($1872>>>0);
                  if ($1873) {
                   break;
                  }
                  $1874 = ($1864|0)==(0);
                  $1875 = (+($1864>>>0));
                  $1876 = $1875 * 1.5;
                  $1877 = (~~(($1876))>>>0);
                  $1878 = $1874 ? 1024 : $1877;
                  HEAP32[$1863>>2] = $1878;
                  $1879 = HEAP32[$810>>2]|0;
                  $1880 = ((($1879)) + 32|0);
                  $1881 = HEAP32[$1880>>2]|0;
                  $1882 = ((($1879)) + 36|0);
                  $1883 = HEAP32[$1882>>2]|0;
                  $1884 = (_realloc($1881,$1883)|0);
                  $1885 = HEAP32[$810>>2]|0;
                  $1886 = ((($1885)) + 32|0);
                  HEAP32[$1886>>2] = $1884;
                 }
                 $1887 = ((($1862)) + 32|0);
                 $1888 = HEAP32[$1887>>2]|0;
                 $1889 = (($1888) + ($1866)|0);
                 $1890 = HEAP32[$819>>2]|0;
                 $1891 = (($ref_pos$1$i) - ($1890))|0;
                 $1892 = (($1891) + 1)|0;
                 $1893 = HEAP32[$817>>2]|0;
                 $1894 = (($1893) + ($1892)|0);
                 _memcpy(($1889|0),($1894|0),($1871|0))|0;
                 $1895 = HEAP32[$$pre$phiZ2D>>2]|0;
                 $1896 = HEAP32[$818>>2]|0;
                 $1897 = (((($1896) + ($1895<<4)|0)) + 4|0);
                 $1898 = HEAP32[$1897>>2]|0;
                 $1899 = (($1898) - ($ref_pos$1$i))|0;
                 $1900 = HEAP32[$810>>2]|0;
                 $1901 = ((($1900)) + 40|0);
                 $1902 = HEAP32[$1901>>2]|0;
                 $1903 = (($1902) + ($1899))|0;
                 HEAP32[$1901>>2] = $1903;
                 while(1) {
                  $1904 = HEAP32[$810>>2]|0;
                  $1905 = ((($1904)) + 36|0);
                  $1906 = HEAP32[$1905>>2]|0;
                  $1907 = ((($1904)) + 40|0);
                  $1908 = HEAP32[$1907>>2]|0;
                  $1909 = (($1908) + 11)|0;
                  $1910 = ($1906>>>0)>($1909>>>0);
                  if ($1910) {
                   break;
                  }
                  $1911 = ($1906|0)==(0);
                  $1912 = (+($1906>>>0));
                  $1913 = $1912 * 1.5;
                  $1914 = (~~(($1913))>>>0);
                  $1915 = $1911 ? 1024 : $1914;
                  HEAP32[$1905>>2] = $1915;
                  $1916 = HEAP32[$810>>2]|0;
                  $1917 = ((($1916)) + 32|0);
                  $1918 = HEAP32[$1917>>2]|0;
                  $1919 = ((($1916)) + 36|0);
                  $1920 = HEAP32[$1919>>2]|0;
                  $1921 = (_realloc($1918,$1920)|0);
                  $1922 = HEAP32[$810>>2]|0;
                  $1923 = ((($1922)) + 32|0);
                  HEAP32[$1923>>2] = $1921;
                 }
                 $1924 = ((($1904)) + 32|0);
                 $1925 = HEAP32[$1924>>2]|0;
                 $1926 = (($1925) + ($1908)|0);
                 HEAP8[$1926>>0] = 48;
                 $1927 = HEAP32[$810>>2]|0;
                 $1928 = ((($1927)) + 40|0);
                 $1929 = HEAP32[$1928>>2]|0;
                 $1930 = (($1929) + 1)|0;
                 HEAP32[$1928>>2] = $1930;
                 $$pre273 = HEAP32[$i32$i>>2]|0;
                 $$pre274 = HEAP32[$$pre$phiZ2D>>2]|0;
                 $$pre275 = HEAP32[$818>>2]|0;
                 $$phi$trans$insert276 = (((($$pre275) + ($$pre274<<4)|0)) + 4|0);
                 $$pre277 = HEAP32[$$phi$trans$insert276>>2]|0;
                 $1932 = $$pre277;$2804 = $$pre273;
                }
                $1931 = (($1932) - ($ref_pos$1$i))|0;
                $1933 = (($nm$6$i) + ($1931))|0;
                $2803 = $2804;$nm$10$i = $1933;
               }
               HEAP32[$md_dist$i>>2] = -1;
               $1935 = $2803;$nm$12$i = $nm$10$i;
              }
             } while(0);
             $1934 = (($cig_len$5$i) + ($1935))|0;
             $1936 = (($ref_pos$1$i) + ($1935))|0;
             $cig_len$20$i = $1934;$cig_op$9$i = 2;$ncigar$16$i = $ncigar$6$i;$nm$21$i = $nm$12$i;$prev_pos$1$i = $2244;$r$19$i = 0;$ref_pos$5$i = $1936;$seq_pos$5$i = $seq_pos$1$i;
             break L612;
             break;
            }
            case 73:  {
             HEAP32[$out_sz24$i>>2] = 1;
             $1937 = ($cig_len$2$i|0)==(0);
             do {
              if ($1937) {
               $cig_len$7$i = 0;$ncigar$7$i = $ncigar$2$i;
              } else {
               $1938 = ($cig_op$1$i|0)==(1);
               if ($1938) {
                $cig_len$7$i = $cig_len$2$i;$ncigar$7$i = $ncigar$2$i;
                break;
               }
               $1939 = $cig_len$2$i << 4;
               $1940 = (($1939) + ($cig_op$1$i))|0;
               $1941 = (($ncigar$2$i) + 1)|0;
               $1942 = (($cigar$1$i) + ($ncigar$2$i<<2)|0);
               HEAP32[$1942>>2] = $1940;
               $cig_len$7$i = 0;$ncigar$7$i = $1941;
              }
             } while(0);
             if ($1458) {
              $cig_len$20$i = $cig_len$7$i;$cig_op$9$i = $cig_op$1$i;$ncigar$16$i = $ncigar$7$i;$nm$21$i = $nm$6$i;$prev_pos$1$i = $2244;$r$19$i = 0;$ref_pos$5$i = $ref_pos$1$i;$seq_pos$5$i = $seq_pos$1$i;
              break L612;
             }
             $1943 = HEAP32[$3>>2]|0;
             $1944 = ((($1943)) + 400|0);
             $1945 = HEAP32[$1944>>2]|0;
             $1946 = ($1945|0)==(0|0);
             if ($1946) {
              $$0$i51 = -1;
              break L597;
             }
             $1947 = ((($1945)) + 12|0);
             $1948 = HEAP32[$1947>>2]|0;
             $1949 = HEAP32[$1453>>2]|0;
             $1950 = ($1949|0)==(0);
             $1951 = HEAP32[$pos$i>>2]|0;
             $1952 = (($1951) + -1)|0;
             $1953 = (($seq$1) + ($1952)|0);
             $1954 = $1950 ? 0 : $1953;
             $1955 = (FUNCTION_TABLE_iiiiii[$1948 & 127]($s,$1945,$2,$1954,$out_sz24$i)|0);
             $1956 = ($1955|0)==(0);
             if (!($1956)) {
              $$0$i51 = $1955;
              break L597;
             }
             $1957 = HEAP32[$out_sz24$i>>2]|0;
             $1958 = (($cig_len$7$i) + ($1957))|0;
             $1959 = (($seq_pos$1$i) + ($1957))|0;
             $1960 = (($nm$6$i) + ($1957))|0;
             $cig_len$20$i = $1958;$cig_op$9$i = 1;$ncigar$16$i = $ncigar$7$i;$nm$21$i = $1960;$prev_pos$1$i = $2244;$r$19$i = 0;$ref_pos$5$i = $ref_pos$1$i;$seq_pos$5$i = $1959;
             break L612;
             break;
            }
            case 105:  {
             $1961 = ($cig_len$2$i|0)==(0);
             do {
              if ($1961) {
               $cig_len$9$i = 0;$ncigar$8$i = $ncigar$2$i;
              } else {
               $1962 = ($cig_op$1$i|0)==(1);
               if ($1962) {
                $cig_len$9$i = $cig_len$2$i;$ncigar$8$i = $ncigar$2$i;
                break;
               }
               $1963 = $cig_len$2$i << 4;
               $1964 = (($1963) + ($cig_op$1$i))|0;
               $1965 = (($ncigar$2$i) + 1)|0;
               $1966 = (($cigar$1$i) + ($ncigar$2$i<<2)|0);
               HEAP32[$1966>>2] = $1964;
               $cig_len$9$i = 0;$ncigar$8$i = $1965;
              }
             } while(0);
             if (!($1464)) {
              $1967 = HEAP32[$3>>2]|0;
              $1968 = ((($1967)) + 468|0);
              $1969 = HEAP32[$1968>>2]|0;
              $1970 = ($1969|0)==(0|0);
              if ($1970) {
               $$0$i51 = -1;
               break L597;
              }
              $1971 = ((($1969)) + 12|0);
              $1972 = HEAP32[$1971>>2]|0;
              $1973 = HEAP32[$1453>>2]|0;
              $1974 = ($1973|0)==(0);
              $1975 = HEAP32[$pos$i>>2]|0;
              $1976 = (($1975) + -1)|0;
              $1977 = (($seq$1) + ($1976)|0);
              $1978 = $1974 ? 0 : $1977;
              $1979 = (FUNCTION_TABLE_iiiiii[$1972 & 127]($s,$1969,$2,$1978,$out_sz$i47)|0);
              $1980 = ($1979|0)==(0);
              if (!($1980)) {
               $$0$i51 = $1979;
               break L597;
              }
             }
             $1981 = (($cig_len$9$i) + 1)|0;
             $1982 = (($seq_pos$1$i) + 1)|0;
             $1983 = (($nm$6$i) + 1)|0;
             $cig_len$20$i = $1981;$cig_op$9$i = 1;$ncigar$16$i = $ncigar$8$i;$nm$21$i = $1983;$prev_pos$1$i = $2244;$r$19$i = 0;$ref_pos$5$i = $ref_pos$1$i;$seq_pos$5$i = $1982;
             break L612;
             break;
            }
            case 98:  {
             HEAP32[$len$i>>2] = 1;
             $1984 = ($cig_len$2$i|0)==(0);
             do {
              if ($1984) {
               $cig_len$10$i = 0;$ncigar$9$i = $ncigar$2$i;
              } else {
               $1985 = ($cig_op$1$i|0)==(0);
               if ($1985) {
                $cig_len$10$i = $cig_len$2$i;$ncigar$9$i = $ncigar$2$i;
                break;
               }
               $1986 = $cig_len$2$i << 4;
               $1987 = (($1986) + ($cig_op$1$i))|0;
               $1988 = (($ncigar$2$i) + 1)|0;
               $1989 = (($cigar$1$i) + ($ncigar$2$i<<2)|0);
               HEAP32[$1989>>2] = $1987;
               $cig_len$10$i = 0;$ncigar$9$i = $1988;
              }
             } while(0);
             do {
              if ($1466) {
               $nm$16$i = $nm$6$i;
              } else {
               $1990 = HEAP32[$3>>2]|0;
               $1991 = ((($1990)) + 496|0);
               $1992 = HEAP32[$1991>>2]|0;
               $1993 = ($1992|0)==(0|0);
               if ($1993) {
                $$0$i51 = -1;
                break L597;
               }
               $1994 = ((($1992)) + 12|0);
               $1995 = HEAP32[$1994>>2]|0;
               $1996 = HEAP32[$1453>>2]|0;
               $1997 = ($1996|0)==(0);
               $1998 = HEAP32[$pos$i>>2]|0;
               $1999 = (($1998) + -1)|0;
               $2000 = (($seq$1) + ($1999)|0);
               $2001 = $1997 ? 0 : $2000;
               $2002 = (FUNCTION_TABLE_iiiiii[$1995 & 127]($s,$1992,$2,$2001,$len$i)|0);
               $2003 = ($2002|0)==(0);
               if (!($2003)) {
                $$0$i51 = $2002;
                break L597;
               }
               $2004 = $decode_md$0$i65 | $decode_nm$0$i72;
               $brmerge510 = ($2004|0)==(0);
               if ($brmerge510) {
                $nm$16$i = $nm$6$i;
                break;
               }
               $2005 = HEAP32[$md_dist$i>>2]|0;
               $$not511 = ($2005|0)<(0);
               $brmerge512 = $$not511 | $1454;
               if ($brmerge512) {
                $x$0$i = 0;
               } else {
                while(1) {
                 $2006 = HEAP32[$810>>2]|0;
                 $2007 = ((($2006)) + 36|0);
                 $2008 = HEAP32[$2007>>2]|0;
                 $2009 = ((($2006)) + 40|0);
                 $2010 = HEAP32[$2009>>2]|0;
                 $2011 = (($2010) + 11)|0;
                 $2012 = ($2008>>>0)>($2011>>>0);
                 if ($2012) {
                  break;
                 }
                 $2013 = ($2008|0)==(0);
                 $2014 = (+($2008>>>0));
                 $2015 = $2014 * 1.5;
                 $2016 = (~~(($2015))>>>0);
                 $2017 = $2013 ? 1024 : $2016;
                 HEAP32[$2007>>2] = $2017;
                 $2018 = HEAP32[$810>>2]|0;
                 $2019 = ((($2018)) + 32|0);
                 $2020 = HEAP32[$2019>>2]|0;
                 $2021 = ((($2018)) + 36|0);
                 $2022 = HEAP32[$2021>>2]|0;
                 $2023 = (_realloc($2020,$2022)|0);
                 $2024 = HEAP32[$810>>2]|0;
                 $2025 = ((($2024)) + 32|0);
                 HEAP32[$2025>>2] = $2023;
                }
                $2026 = ((($2006)) + 32|0);
                $2027 = HEAP32[$2026>>2]|0;
                $2028 = (($2027) + ($2010)|0);
                $2029 = HEAP32[$md_dist$i>>2]|0;
                $2030 = (_append_uint32($2028,$2029)|0);
                $2031 = $2030;
                $2032 = $2028;
                $2033 = (($2031) - ($2032))|0;
                $2034 = HEAP32[$810>>2]|0;
                $2035 = ((($2034)) + 40|0);
                $2036 = HEAP32[$2035>>2]|0;
                $2037 = (($2036) + ($2033))|0;
                HEAP32[$2035>>2] = $2037;
                $x$0$i = 0;
               }
               while(1) {
                $2038 = HEAP32[$len$i>>2]|0;
                $2039 = ($x$0$i|0)<($2038|0);
                if (!($2039)) {
                 break;
                }
                $2040 = ($x$0$i|0)==(0);
                $brmerge513 = $2040 | $1454;
                if (!($brmerge513)) {
                 while(1) {
                  $2041 = HEAP32[$810>>2]|0;
                  $2042 = ((($2041)) + 36|0);
                  $2043 = HEAP32[$2042>>2]|0;
                  $2044 = ((($2041)) + 40|0);
                  $2045 = HEAP32[$2044>>2]|0;
                  $2046 = (($2045) + 11)|0;
                  $2047 = ($2043>>>0)>($2046>>>0);
                  if ($2047) {
                   break;
                  }
                  $2048 = ($2043|0)==(0);
                  $2049 = (+($2043>>>0));
                  $2050 = $2049 * 1.5;
                  $2051 = (~~(($2050))>>>0);
                  $2052 = $2048 ? 1024 : $2051;
                  HEAP32[$2042>>2] = $2052;
                  $2053 = HEAP32[$810>>2]|0;
                  $2054 = ((($2053)) + 32|0);
                  $2055 = HEAP32[$2054>>2]|0;
                  $2056 = ((($2053)) + 36|0);
                  $2057 = HEAP32[$2056>>2]|0;
                  $2058 = (_realloc($2055,$2057)|0);
                  $2059 = HEAP32[$810>>2]|0;
                  $2060 = ((($2059)) + 32|0);
                  HEAP32[$2060>>2] = $2058;
                 }
                 $2061 = ((($2041)) + 32|0);
                 $2062 = HEAP32[$2061>>2]|0;
                 $2063 = (($2062) + ($2045)|0);
                 HEAP8[$2063>>0] = 48;
                 $2064 = HEAP32[$810>>2]|0;
                 $2065 = ((($2064)) + 40|0);
                 $2066 = HEAP32[$2065>>2]|0;
                 $2067 = (($2066) + 1)|0;
                 HEAP32[$2065>>2] = $2067;
                }
                $2068 = (($ref_pos$1$i) + ($x$0$i))|0;
                $2069 = HEAP32[$$pre$phiZ2D>>2]|0;
                $2070 = HEAP32[$818>>2]|0;
                $2071 = (((($2070) + ($2069<<4)|0)) + 4|0);
                $2072 = HEAP32[$2071>>2]|0;
                $2073 = ($2068>>>0)<($2072>>>0);
                if (!($2073)) {
                 label = 558;
                 break;
                }
                $2074 = HEAP32[$817>>2]|0;
                $2075 = ($2074|0)==(0|0);
                if ($2075) {
                 label = 558;
                 break;
                }
                if (!($1454)) {
                 $2076 = HEAP32[$819>>2]|0;
                 $2077 = (($2068) - ($2076))|0;
                 $2078 = (($2077) + 1)|0;
                 $2079 = (($2074) + ($2078)|0);
                 $2080 = HEAP8[$2079>>0]|0;
                 while(1) {
                  $2081 = HEAP32[$810>>2]|0;
                  $2082 = ((($2081)) + 36|0);
                  $2083 = HEAP32[$2082>>2]|0;
                  $2084 = ((($2081)) + 40|0);
                  $2085 = HEAP32[$2084>>2]|0;
                  $2086 = (($2085) + 1)|0;
                  $2087 = ($2083>>>0)>($2086>>>0);
                  if ($2087) {
                   break;
                  }
                  $2088 = ($2083|0)==(0);
                  $2089 = (+($2083>>>0));
                  $2090 = $2089 * 1.5;
                  $2091 = (~~(($2090))>>>0);
                  $2092 = $2088 ? 1024 : $2091;
                  HEAP32[$2082>>2] = $2092;
                  $2093 = HEAP32[$810>>2]|0;
                  $2094 = ((($2093)) + 32|0);
                  $2095 = HEAP32[$2094>>2]|0;
                  $2096 = ((($2093)) + 36|0);
                  $2097 = HEAP32[$2096>>2]|0;
                  $2098 = (_realloc($2095,$2097)|0);
                  $2099 = HEAP32[$810>>2]|0;
                  $2100 = ((($2099)) + 32|0);
                  HEAP32[$2100>>2] = $2098;
                 }
                 HEAP32[$2084>>2] = $2086;
                 $2101 = HEAP32[$810>>2]|0;
                 $2102 = ((($2101)) + 32|0);
                 $2103 = HEAP32[$2102>>2]|0;
                 $2104 = (($2103) + ($2085)|0);
                 HEAP8[$2104>>0] = $2080;
                }
                $2105 = (($x$0$i) + 1)|0;
                $x$0$i = $2105;
               }
               if ((label|0) == 558) {
                label = 0;
                HEAP32[$md_dist$i>>2] = -1;
               }
               $2106 = (($nm$6$i) + ($x$0$i))|0;
               $nm$16$i = $2106;
              }
             } while(0);
             $2107 = HEAP32[$len$i>>2]|0;
             $2108 = (($cig_len$10$i) + ($2107))|0;
             $2109 = (($seq_pos$1$i) + ($2107))|0;
             $2110 = (($ref_pos$1$i) + ($2107))|0;
             $cig_len$20$i = $2108;$cig_op$9$i = 0;$ncigar$16$i = $ncigar$9$i;$nm$21$i = $nm$16$i;$prev_pos$1$i = $2244;$r$19$i = 0;$ref_pos$5$i = $2110;$seq_pos$5$i = $2109;
             break L612;
             break;
            }
            case 113:  {
             HEAP32[$len8$i>>2] = 1;
             $2111 = ($cig_len$2$i|0)==(0);
             do {
              if ($2111) {
               $cig_len$11$i = 0;$ncigar$10$i = $ncigar$2$i;
              } else {
               $2112 = ($cig_op$1$i|0)==(0);
               if ($2112) {
                $cig_len$11$i = $cig_len$2$i;$ncigar$10$i = $ncigar$2$i;
                break;
               }
               $2113 = $cig_len$2$i << 4;
               $2114 = (($2113) + ($cig_op$1$i))|0;
               $2115 = (($ncigar$2$i) + 1)|0;
               $2116 = (($cigar$1$i) + ($ncigar$2$i<<2)|0);
               HEAP32[$2116>>2] = $2114;
               $cig_len$11$i = 0;$ncigar$10$i = $2115;
              }
             } while(0);
             if (!($1468)) {
              $2117 = HEAP32[$3>>2]|0;
              $2118 = ((($2117)) + 500|0);
              $2119 = HEAP32[$2118>>2]|0;
              $2120 = ($2119|0)==(0|0);
              if ($2120) {
               $$0$i51 = -1;
               break L597;
              }
              $2121 = ((($2119)) + 12|0);
              $2122 = HEAP32[$2121>>2]|0;
              $2123 = HEAP32[$pos$i>>2]|0;
              $2124 = (($2123) + -1)|0;
              $2125 = (($qual$1) + ($2124)|0);
              $2126 = (FUNCTION_TABLE_iiiiii[$2122 & 127]($s,$2119,$2,$2125,$len8$i)|0);
              $2127 = ($2126|0)==(0);
              if (!($2127)) {
               $$0$i51 = $2126;
               break L597;
              }
             }
             $2128 = HEAP32[$len8$i>>2]|0;
             $2129 = (($cig_len$11$i) + ($2128))|0;
             $2130 = (($seq_pos$1$i) + ($2128))|0;
             $2131 = (($ref_pos$1$i) + ($2128))|0;
             $cig_len$20$i = $2129;$cig_op$9$i = 0;$ncigar$16$i = $ncigar$10$i;$nm$21$i = $nm$6$i;$prev_pos$1$i = $2244;$r$19$i = 0;$ref_pos$5$i = $2131;$seq_pos$5$i = $2130;
             break L612;
             break;
            }
            case 66:  {
             $2132 = ($cig_len$2$i|0)==(0);
             do {
              if ($2132) {
               $cig_len$12$i = 0;$ncigar$11$i = $ncigar$2$i;
              } else {
               $2133 = ($cig_op$1$i|0)==(0);
               if ($2133) {
                $cig_len$12$i = $cig_len$2$i;$ncigar$11$i = $ncigar$2$i;
                break;
               }
               $2134 = $cig_len$2$i << 4;
               $2135 = (($2134) + ($cig_op$1$i))|0;
               $2136 = (($ncigar$2$i) + 1)|0;
               $2137 = (($cigar$1$i) + ($ncigar$2$i<<2)|0);
               HEAP32[$2137>>2] = $2135;
               $cig_len$12$i = 0;$ncigar$11$i = $2136;
              }
             } while(0);
             do {
              if ($1464) {
               $nm$19$i = $nm$6$i;$r$12$i = 0;
              } else {
               $2138 = HEAP32[$3>>2]|0;
               $2139 = ((($2138)) + 468|0);
               $2140 = HEAP32[$2139>>2]|0;
               $2141 = ($2140|0)==(0|0);
               if ($2141) {
                $$0$i51 = -1;
                break L597;
               }
               $2142 = ((($2140)) + 12|0);
               $2143 = HEAP32[$2142>>2]|0;
               $2144 = HEAP32[$1453>>2]|0;
               $2145 = ($2144|0)==(0);
               $2146 = HEAP32[$pos$i>>2]|0;
               $2147 = (($2146) + -1)|0;
               $2148 = (($seq$1) + ($2147)|0);
               $2149 = $2145 ? 0 : $2148;
               $2150 = (FUNCTION_TABLE_iiiiii[$2143 & 127]($s,$2140,$2,$2149,$out_sz$i47)|0);
               $2151 = $decode_md$0$i65 | $decode_nm$0$i72;
               $brmerge516 = ($2151|0)==(0);
               if ($brmerge516) {
                $nm$19$i = $nm$6$i;$r$12$i = $2150;
                break;
               }
               $2152 = HEAP32[$md_dist$i>>2]|0;
               $$not517 = ($2152|0)<(0);
               $brmerge518 = $$not517 | $1454;
               if (!($brmerge518)) {
                while(1) {
                 $2153 = HEAP32[$810>>2]|0;
                 $2154 = ((($2153)) + 36|0);
                 $2155 = HEAP32[$2154>>2]|0;
                 $2156 = ((($2153)) + 40|0);
                 $2157 = HEAP32[$2156>>2]|0;
                 $2158 = (($2157) + 11)|0;
                 $2159 = ($2155>>>0)>($2158>>>0);
                 if ($2159) {
                  break;
                 }
                 $2160 = ($2155|0)==(0);
                 $2161 = (+($2155>>>0));
                 $2162 = $2161 * 1.5;
                 $2163 = (~~(($2162))>>>0);
                 $2164 = $2160 ? 1024 : $2163;
                 HEAP32[$2154>>2] = $2164;
                 $2165 = HEAP32[$810>>2]|0;
                 $2166 = ((($2165)) + 32|0);
                 $2167 = HEAP32[$2166>>2]|0;
                 $2168 = ((($2165)) + 36|0);
                 $2169 = HEAP32[$2168>>2]|0;
                 $2170 = (_realloc($2167,$2169)|0);
                 $2171 = HEAP32[$810>>2]|0;
                 $2172 = ((($2171)) + 32|0);
                 HEAP32[$2172>>2] = $2170;
                }
                $2173 = ((($2153)) + 32|0);
                $2174 = HEAP32[$2173>>2]|0;
                $2175 = (($2174) + ($2157)|0);
                $2176 = HEAP32[$md_dist$i>>2]|0;
                $2177 = (_append_uint32($2175,$2176)|0);
                $2178 = $2177;
                $2179 = $2175;
                $2180 = (($2178) - ($2179))|0;
                $2181 = HEAP32[$810>>2]|0;
                $2182 = ((($2181)) + 40|0);
                $2183 = HEAP32[$2182>>2]|0;
                $2184 = (($2183) + ($2180))|0;
                HEAP32[$2182>>2] = $2184;
               }
               $2185 = HEAP32[$$pre$phiZ2D>>2]|0;
               $2186 = HEAP32[$818>>2]|0;
               $2187 = (((($2186) + ($2185<<4)|0)) + 4|0);
               $2188 = HEAP32[$2187>>2]|0;
               $2189 = ($ref_pos$1$i>>>0)<($2188>>>0);
               do {
                if ($2189) {
                 $2190 = HEAP32[$817>>2]|0;
                 $2191 = ($2190|0)==(0|0);
                 if ($2191) {
                  $nm$17$i = $nm$6$i;$storemerge$i = -1;
                  break;
                 }
                 if (!($1454)) {
                  while(1) {
                   $2192 = HEAP32[$810>>2]|0;
                   $2193 = ((($2192)) + 36|0);
                   $2194 = HEAP32[$2193>>2]|0;
                   $2195 = ((($2192)) + 40|0);
                   $2196 = HEAP32[$2195>>2]|0;
                   $2197 = (($2196) + 1)|0;
                   $2198 = ($2194>>>0)>($2197>>>0);
                   if ($2198) {
                    break;
                   }
                   $2199 = ($2194|0)==(0);
                   $2200 = (+($2194>>>0));
                   $2201 = $2200 * 1.5;
                   $2202 = (~~(($2201))>>>0);
                   $2203 = $2199 ? 1024 : $2202;
                   HEAP32[$2193>>2] = $2203;
                   $2204 = HEAP32[$810>>2]|0;
                   $2205 = ((($2204)) + 32|0);
                   $2206 = HEAP32[$2205>>2]|0;
                   $2207 = ((($2204)) + 36|0);
                   $2208 = HEAP32[$2207>>2]|0;
                   $2209 = (_realloc($2206,$2208)|0);
                   $2210 = HEAP32[$810>>2]|0;
                   $2211 = ((($2210)) + 32|0);
                   HEAP32[$2211>>2] = $2209;
                  }
                  $2212 = HEAP32[$819>>2]|0;
                  $2213 = (($ref_pos$1$i) - ($2212))|0;
                  $2214 = (($2213) + 1)|0;
                  $2215 = HEAP32[$817>>2]|0;
                  $2216 = (($2215) + ($2214)|0);
                  $2217 = HEAP8[$2216>>0]|0;
                  HEAP32[$2195>>2] = $2197;
                  $2218 = HEAP32[$810>>2]|0;
                  $2219 = ((($2218)) + 32|0);
                  $2220 = HEAP32[$2219>>2]|0;
                  $2221 = (($2220) + ($2196)|0);
                  HEAP8[$2221>>0] = $2217;
                 }
                 $2222 = (($nm$6$i) + 1)|0;
                 $nm$17$i = $2222;$storemerge$i = 0;
                } else {
                 $nm$17$i = $nm$6$i;$storemerge$i = -1;
                }
               } while(0);
               HEAP32[$md_dist$i>>2] = $storemerge$i;
               $nm$19$i = $nm$17$i;$r$12$i = $2150;
              }
             } while(0);
             if ($1397) {
              $r$13$i = $r$12$i;
             } else {
              $2223 = HEAP32[$3>>2]|0;
              $2224 = ((($2223)) + 396|0);
              $2225 = HEAP32[$2224>>2]|0;
              $2226 = ($2225|0)==(0|0);
              if ($2226) {
               $$0$i51 = -1;
               break L597;
              }
              $2227 = ((($2225)) + 12|0);
              $2228 = HEAP32[$2227>>2]|0;
              $2229 = HEAP32[$pos$i>>2]|0;
              $2230 = (($2229) + -1)|0;
              $2231 = (($qual$1) + ($2230)|0);
              $2232 = (FUNCTION_TABLE_iiiiii[$2228 & 127]($s,$2225,$2,$2231,$out_sz$i47)|0);
              $2233 = $r$12$i | $2232;
              $r$13$i = $2233;
             }
             $2234 = (($cig_len$12$i) + 1)|0;
             $2235 = (($seq_pos$1$i) + 1)|0;
             $2236 = (($ref_pos$1$i) + 1)|0;
             $cig_len$20$i = $2234;$cig_op$9$i = 0;$ncigar$16$i = $ncigar$11$i;$nm$21$i = $nm$19$i;$prev_pos$1$i = $2244;$r$19$i = $r$13$i;$ref_pos$5$i = $2236;$seq_pos$5$i = $2235;
             break L612;
             break;
            }
            case 81:  {
             if ($1397) {
              $cig_len$20$i = $cig_len$2$i;$cig_op$9$i = $cig_op$1$i;$ncigar$16$i = $ncigar$2$i;$nm$21$i = $nm$6$i;$prev_pos$1$i = $2244;$r$19$i = 0;$ref_pos$5$i = $ref_pos$1$i;$seq_pos$5$i = $seq_pos$1$i;
              break L612;
             }
             $2237 = HEAP32[$3>>2]|0;
             $2238 = ((($2237)) + 396|0);
             $2239 = HEAP32[$2238>>2]|0;
             $2240 = ($2239|0)==(0|0);
             if ($2240) {
              $$0$i51 = -1;
              break L597;
             }
             $2241 = ((($2239)) + 12|0);
             $2242 = HEAP32[$2241>>2]|0;
             $2243 = (($2244) + -1)|0;
             $2245 = (($qual$1) + ($2243)|0);
             $2246 = (FUNCTION_TABLE_iiiiii[$2242 & 127]($s,$2239,$2,$2245,$out_sz$i47)|0);
             $cig_len$20$i = $cig_len$2$i;$cig_op$9$i = $cig_op$1$i;$ncigar$16$i = $ncigar$2$i;$nm$21$i = $nm$6$i;$prev_pos$1$i = $2244;$r$19$i = $2246;$ref_pos$5$i = $ref_pos$1$i;$seq_pos$5$i = $seq_pos$1$i;
             break L612;
             break;
            }
            case 72:  {
             $2247 = ($cig_len$2$i|0)==(0);
             do {
              if ($2247) {
               $cig_len$13$i = 0;$ncigar$12$i = $ncigar$2$i;
              } else {
               $2248 = ($cig_op$1$i|0)==(5);
               if ($2248) {
                $cig_len$13$i = $cig_len$2$i;$ncigar$12$i = $ncigar$2$i;
                break;
               }
               $2249 = $cig_len$2$i << 4;
               $2250 = (($2249) + ($cig_op$1$i))|0;
               $2251 = (($ncigar$2$i) + 1)|0;
               $2252 = (($cigar$1$i) + ($ncigar$2$i<<2)|0);
               HEAP32[$2252>>2] = $2250;
               $cig_len$13$i = 0;$ncigar$12$i = $2251;
              }
             } while(0);
             if ($1470) {
              $cig_len$20$i = $cig_len$13$i;$cig_op$9$i = $cig_op$1$i;$ncigar$16$i = $ncigar$12$i;$nm$21$i = $nm$6$i;$prev_pos$1$i = $2244;$r$19$i = 0;$ref_pos$5$i = $ref_pos$1$i;$seq_pos$5$i = $seq_pos$1$i;
              break L612;
             }
             $2253 = HEAP32[$3>>2]|0;
             $2254 = ((($2253)) + 492|0);
             $2255 = HEAP32[$2254>>2]|0;
             $2256 = ($2255|0)==(0|0);
             if ($2256) {
              $$0$i51 = -1;
              break L597;
             }
             $2257 = ((($2255)) + 12|0);
             $2258 = HEAP32[$2257>>2]|0;
             $2259 = (FUNCTION_TABLE_iiiiii[$2258 & 127]($s,$2255,$2,$i32$i,$out_sz$i47)|0);
             $2260 = ($2259|0)==(0);
             if (!($2260)) {
              $$0$i51 = $2259;
              break L597;
             }
             $2261 = HEAP32[$i32$i>>2]|0;
             $2262 = (($cig_len$13$i) + ($2261))|0;
             $cig_len$20$i = $2262;$cig_op$9$i = 5;$ncigar$16$i = $ncigar$12$i;$nm$21$i = $nm$6$i;$prev_pos$1$i = $2244;$r$19$i = 0;$ref_pos$5$i = $ref_pos$1$i;$seq_pos$5$i = $seq_pos$1$i;
             break L612;
             break;
            }
            case 80:  {
             $2263 = ($cig_len$2$i|0)==(0);
             do {
              if ($2263) {
               $cig_len$15$i = 0;$ncigar$13$i = $ncigar$2$i;
              } else {
               $2264 = ($cig_op$1$i|0)==(6);
               if ($2264) {
                $cig_len$15$i = $cig_len$2$i;$ncigar$13$i = $ncigar$2$i;
                break;
               }
               $2265 = $cig_len$2$i << 4;
               $2266 = (($2265) + ($cig_op$1$i))|0;
               $2267 = (($ncigar$2$i) + 1)|0;
               $2268 = (($cigar$1$i) + ($ncigar$2$i<<2)|0);
               HEAP32[$2268>>2] = $2266;
               $cig_len$15$i = 0;$ncigar$13$i = $2267;
              }
             } while(0);
             if ($1472) {
              $cig_len$20$i = $cig_len$15$i;$cig_op$9$i = $cig_op$1$i;$ncigar$16$i = $ncigar$13$i;$nm$21$i = $nm$6$i;$prev_pos$1$i = $2244;$r$19$i = 0;$ref_pos$5$i = $ref_pos$1$i;$seq_pos$5$i = $seq_pos$1$i;
              break L612;
             }
             $2269 = HEAP32[$3>>2]|0;
             $2270 = ((($2269)) + 488|0);
             $2271 = HEAP32[$2270>>2]|0;
             $2272 = ($2271|0)==(0|0);
             if ($2272) {
              $$0$i51 = -1;
              break L597;
             }
             $2273 = ((($2271)) + 12|0);
             $2274 = HEAP32[$2273>>2]|0;
             $2275 = (FUNCTION_TABLE_iiiiii[$2274 & 127]($s,$2271,$2,$i32$i,$out_sz$i47)|0);
             $2276 = ($2275|0)==(0);
             if (!($2276)) {
              $$0$i51 = $2275;
              break L597;
             }
             $2277 = HEAP32[$i32$i>>2]|0;
             $2278 = (($cig_len$15$i) + ($2277))|0;
             $cig_len$20$i = $2278;$cig_op$9$i = 6;$ncigar$16$i = $ncigar$13$i;$nm$21$i = $nm$6$i;$prev_pos$1$i = $2244;$r$19$i = 0;$ref_pos$5$i = $ref_pos$1$i;$seq_pos$5$i = $seq_pos$1$i;
             break L612;
             break;
            }
            case 78:  {
             $2279 = ($cig_len$2$i|0)==(0);
             do {
              if ($2279) {
               $cig_len$17$i = 0;$ncigar$14$i = $ncigar$2$i;
              } else {
               $2280 = ($cig_op$1$i|0)==(3);
               if ($2280) {
                $cig_len$17$i = $cig_len$2$i;$ncigar$14$i = $ncigar$2$i;
                break;
               }
               $2281 = $cig_len$2$i << 4;
               $2282 = (($2281) + ($cig_op$1$i))|0;
               $2283 = (($ncigar$2$i) + 1)|0;
               $2284 = (($cigar$1$i) + ($ncigar$2$i<<2)|0);
               HEAP32[$2284>>2] = $2282;
               $cig_len$17$i = 0;$ncigar$14$i = $2283;
              }
             } while(0);
             if ($1474) {
              $cig_len$20$i = $cig_len$17$i;$cig_op$9$i = $cig_op$1$i;$ncigar$16$i = $ncigar$14$i;$nm$21$i = $nm$6$i;$prev_pos$1$i = $2244;$r$19$i = 0;$ref_pos$5$i = $ref_pos$1$i;$seq_pos$5$i = $seq_pos$1$i;
              break L612;
             }
             $2285 = HEAP32[$3>>2]|0;
             $2286 = ((($2285)) + 484|0);
             $2287 = HEAP32[$2286>>2]|0;
             $2288 = ($2287|0)==(0|0);
             if ($2288) {
              $$0$i51 = -1;
              break L597;
             }
             $2289 = ((($2287)) + 12|0);
             $2290 = HEAP32[$2289>>2]|0;
             $2291 = (FUNCTION_TABLE_iiiiii[$2290 & 127]($s,$2287,$2,$i32$i,$out_sz$i47)|0);
             $2292 = ($2291|0)==(0);
             if (!($2292)) {
              $$0$i51 = $2291;
              break L597;
             }
             $2293 = HEAP32[$i32$i>>2]|0;
             $2294 = (($cig_len$17$i) + ($2293))|0;
             $2295 = (($ref_pos$1$i) + ($2293))|0;
             $cig_len$20$i = $2294;$cig_op$9$i = 3;$ncigar$16$i = $ncigar$14$i;$nm$21$i = $nm$6$i;$prev_pos$1$i = $2244;$r$19$i = 0;$ref_pos$5$i = $2295;$seq_pos$5$i = $seq_pos$1$i;
             break L612;
             break;
            }
            default: {
             label = 620;
             break L601;
            }
            }
           } while(0);
          }
         } while(0);
         $2296 = (($f$0$i) + 1)|0;
         $cig_len$0$i = $cig_len$20$i;$cig_op$0$i = $cig_op$9$i;$cigar$0$i = $cigar$1$i;$cigar_alloc$0$i = $cigar_alloc$1$i;$f$0$i = $2296;$ncigar$0$i = $ncigar$16$i;$nm$0$i = $nm$21$i;$prev_pos$0$i = $prev_pos$1$i;$r$1$i49 = $r$19$i;$ref_pos$0$i = $ref_pos$5$i;$seq_pos$0$i = $seq_pos$5$i;
        }
        if ((label|0) == 429) {
         label = 0;
         HEAP32[$vararg_buffer30>>2] = $1503;
         _fprintf(9772,17447,$vararg_buffer30);
         $$0$i51 = -1;
         break L597;
        }
        else if ((label|0) == 620) {
         label = 0;
         HEAP32[$vararg_buffer35>>2] = $1580;
         _fprintf(9772,17539,$vararg_buffer35);
         $$0$i51 = -1;
         break L597;
        }
        else if ((label|0) == 622) {
         label = 0;
         if ($1450) {
          $cig_len$23$i = $cig_len$0$i;$cig_op$11$i = $cig_op$0$i;$cigar$4$i = $cigar$0$i;$cigar_alloc$4$i = $cigar_alloc$0$i;$decode_md$0$i66 = $decode_md$0$i65;$ncigar$19$i = $ncigar$0$i;$nm$29$i = $nm$0$i;$r$20$i = $r$1$i49;$ref_pos$9$i = $ref_pos$0$i;
          label = 653;
          break;
         }
         if ($1436) {
          $cig_len$23$i558 = $cig_len$0$i;$cig_op$11$i556 = $cig_op$0$i;$cigar$4$i555 = $cigar$0$i;$cigar_alloc$4$i561 = $cigar_alloc$0$i;$decode_md$0$i66554 = $decode_md$0$i65;$ncigar$19$i560 = $ncigar$0$i;$nm$29$i562 = $nm$0$i;$r$20$i559 = $r$1$i49;$ref_pos$9$i557 = $ref_pos$0$i;
          break;
         }
         $2297 = HEAP32[$1453>>2]|0;
         $2298 = ($2297|0)<($seq_pos$0$i|0);
         if ($2298) {
          $cig_len$23$i = $cig_len$0$i;$cig_op$11$i = $cig_op$0$i;$cigar$4$i = $cigar$0$i;$cigar_alloc$4$i = $cigar_alloc$0$i;$decode_md$0$i66 = $decode_md$0$i65;$ncigar$19$i = $ncigar$0$i;$nm$29$i = $nm$0$i;$r$20$i = $r$1$i49;$ref_pos$9$i = $ref_pos$0$i;
          label = 653;
          break;
         }
         $2299 = HEAP32[$817>>2]|0;
         $2300 = ($2299|0)==(0|0);
         do {
          if ($2300) {
           $decode_md$0$i70 = $decode_md$0$i65;$nm$27$i = $nm$0$i;$ref_pos$7$i = $ref_pos$0$i;
          } else {
           $2301 = (($ref_pos$0$i) + ($2297))|0;
           $2302 = (($2301) - ($seq_pos$0$i))|0;
           $2303 = (($2302) + 1)|0;
           $2304 = HEAP32[$$pre$phiZ2D>>2]|0;
           $2305 = HEAP32[$818>>2]|0;
           $2306 = (((($2305) + ($2304<<4)|0)) + 4|0);
           $2307 = HEAP32[$2306>>2]|0;
           $2308 = ($2303>>>0)>($2307>>>0);
           if (!($2308)) {
            $2342 = $decode_md$0$i65 | $decode_nm$0$i72;
            $brmerge521 = ($2342|0)==(0);
            $2343 = (($seq_pos$0$i) + -1)|0;
            L878: do {
             if ($brmerge521) {
              $2361 = (($seq$1) + ($2343)|0);
              $2362 = HEAP32[$819>>2]|0;
              $2363 = (($ref_pos$0$i) - ($2362))|0;
              $2364 = (($2363) + 1)|0;
              $2365 = (($2299) + ($2364)|0);
              $2366 = (($2297) - ($seq_pos$0$i))|0;
              $2367 = (($2366) + 1)|0;
              _memcpy(($2361|0),($2365|0),($2367|0))|0;
              $$pre261 = HEAP32[$1453>>2]|0;
              $2369 = $$pre261;$decode_md$0$i69 = 0;$nm$25$i = $nm$0$i;
             } else {
              $2345 = $2297;$i11$0$i = 0;$nm$22$i = $nm$0$i;
              while(1) {
               $2344 = (($2345) - ($seq_pos$0$i))|0;
               $2346 = ($i11$0$i|0)>($2344|0);
               if ($2346) {
                $2369 = $2345;$decode_md$0$i69 = $decode_md$0$i65;$nm$25$i = $nm$22$i;
                break L878;
               }
               $2347 = HEAP32[$819>>2]|0;
               $2348 = (($ref_pos$0$i) - ($2347))|0;
               $2349 = (($2348) + 1)|0;
               $2350 = (($2349) + ($i11$0$i))|0;
               $2351 = HEAP32[$817>>2]|0;
               $2352 = (($2351) + ($2350)|0);
               $2353 = HEAP8[$2352>>0]|0;
               $2354 = ($2353<<24>>24)==(78);
               if ($2354) {
                _add_md_char($s,$decode_md$0$i65,78,$md_dist$i);
                $2355 = (($nm$22$i) + 1)|0;
                $nm$23$i = $2355;
               } else {
                $2356 = HEAP32[$md_dist$i>>2]|0;
                $2357 = (($2356) + 1)|0;
                HEAP32[$md_dist$i>>2] = $2357;
                $nm$23$i = $nm$22$i;
               }
               $2358 = (($2343) + ($i11$0$i))|0;
               $2359 = (($seq$1) + ($2358)|0);
               HEAP8[$2359>>0] = $2353;
               $2360 = (($i11$0$i) + 1)|0;
               $$pre260 = HEAP32[$1453>>2]|0;
               $2345 = $$pre260;$i11$0$i = $2360;$nm$22$i = $nm$23$i;
              }
             }
            } while(0);
            $2368 = (($2369) - ($seq_pos$0$i))|0;
            $2370 = (($2368) + 1)|0;
            $2371 = (($ref_pos$0$i) + ($2370))|0;
            $decode_md$0$i70 = $decode_md$0$i69;$nm$27$i = $nm$25$i;$ref_pos$7$i = $2371;
            break;
           }
           $2309 = HEAP32[6772]|0;
           $2310 = ($2309|0)==(0);
           if ($2310) {
            _fprintf(9772,17497,$vararg_buffer38);
            $$pre262 = HEAP32[$$pre$phiZ2D>>2]|0;
            $$pre263 = HEAP32[$818>>2]|0;
            $$phi$trans$insert264 = (((($$pre263) + ($$pre262<<4)|0)) + 4|0);
            $$pre265 = HEAP32[$$phi$trans$insert264>>2]|0;
            $2312 = $$pre265;
           } else {
            $2312 = $2307;
           }
           HEAP32[6772] = 1;
           $2311 = (($2312) - ($ref_pos$0$i))|0;
           $2313 = ($2311|0)>(0);
           do {
            if ($2313) {
             $2314 = (($seq_pos$0$i) + -1)|0;
             $2315 = (($2314) + ($2311))|0;
             $2316 = HEAP32[$1453>>2]|0;
             $2317 = ($2315|0)<($2316|0);
             if ($2317) {
              $2318 = (($seq$1) + ($2314)|0);
              $2319 = HEAP32[$819>>2]|0;
              $2320 = (($ref_pos$0$i) - ($2319))|0;
              $2321 = (($2320) + 1)|0;
              $2322 = HEAP32[$817>>2]|0;
              $2323 = (($2322) + ($2321)|0);
              _memcpy(($2318|0),($2323|0),($2311|0))|0;
              $$pre266 = HEAP32[$1453>>2]|0;
              $2325 = $$pre266;
             } else {
              $2325 = $2316;
             }
             $2324 = (($2325) - ($seq_pos$0$i))|0;
             $2326 = ($2324|0)<($2311|0);
             if ($2326) {
              break;
             }
             $2327 = (($seq$1) + ($2315)|0);
             $2328 = (($2324) + 1)|0;
             $2329 = (($2328) - ($2311))|0;
             _memset(($2327|0),78,($2329|0))|0;
            } else {
             $2330 = HEAP32[$1453>>2]|0;
             $2331 = ($2330|0)<($seq_pos$0$i|0);
             if ($2331) {
              break;
             }
             $2332 = (($seq_pos$0$i) + -1)|0;
             $2333 = (($seq$1) + ($2332)|0);
             $2334 = (($2330) - ($seq_pos$0$i))|0;
             $2335 = (($2334) + 1)|0;
             _memset(($2333|0),78,($2335|0))|0;
            }
           } while(0);
           $2336 = HEAP32[$md_dist$i>>2]|0;
           $2337 = ($2336|0)>(-1);
           if (!($2337)) {
            $decode_md$0$i70 = $decode_md$0$i65;$nm$27$i = $nm$0$i;$ref_pos$7$i = $ref_pos$0$i;
            break;
           }
           $2338 = HEAP32[$1453>>2]|0;
           $2339 = (($2338) - ($seq_pos$0$i))|0;
           $2340 = (($2339) + 1)|0;
           $2341 = (($2336) + ($2340))|0;
           HEAP32[$md_dist$i>>2] = $2341;
           $decode_md$0$i70 = $decode_md$0$i65;$nm$27$i = $nm$0$i;$ref_pos$7$i = $ref_pos$0$i;
          }
         } while(0);
         $2372 = (($ncigar$0$i) + 1)|0;
         $2373 = ($2372>>>0)<($cigar_alloc$0$i>>>0);
         if ($2373) {
          $cigar$2$i = $cigar$0$i;$cigar_alloc$2$i = $cigar_alloc$0$i;
         } else {
          $2374 = ($cigar_alloc$0$i|0)==(0);
          $2375 = $cigar_alloc$0$i << 1;
          $$522 = $2374 ? 1024 : $2375;
          HEAP32[$813>>2] = $cigar$0$i;
          $2376 = $$522 << 2;
          $2377 = (_realloc($cigar$0$i,$2376)|0);
          $2378 = ($2377|0)==(0|0);
          if ($2378) {
           $$0$i51 = -1;
           break L597;
          }
          $cigar$2$i = $2377;$cigar_alloc$2$i = $$522;
         }
         $2379 = ($cig_len$0$i|0)==(0);
         do {
          if ($2379) {
           $cig_len$21$i = 0;$ncigar$17$i = $ncigar$0$i;
          } else {
           $2380 = ($cig_op$0$i|0)==(0);
           if ($2380) {
            $cig_len$21$i = $cig_len$0$i;$ncigar$17$i = $ncigar$0$i;
            break;
           }
           $2381 = $cig_len$0$i << 4;
           $2382 = (($2381) + ($cig_op$0$i))|0;
           $2383 = (($cigar$2$i) + ($ncigar$0$i<<2)|0);
           HEAP32[$2383>>2] = $2382;
           $cig_len$21$i = 0;$ncigar$17$i = $2372;
          }
         } while(0);
         $2384 = HEAP32[$1453>>2]|0;
         $2385 = (($2384) - ($seq_pos$0$i))|0;
         $2386 = (($2385) + 1)|0;
         $2387 = (($cig_len$21$i) + ($2386))|0;
         $cig_len$23$i = $2387;$cig_op$11$i = 0;$cigar$4$i = $cigar$2$i;$cigar_alloc$4$i = $cigar_alloc$2$i;$decode_md$0$i66 = $decode_md$0$i70;$ncigar$19$i = $ncigar$17$i;$nm$29$i = $nm$27$i;$r$20$i = $r$1$i49;$ref_pos$9$i = $ref_pos$7$i;
         label = 653;
         break;
        }
       }
      } while(0);
      do {
       if ((label|0) == 653) {
        label = 0;
        $2388 = ($decode_md$0$i66|0)==(0);
        $or$cond523 = $1436 | $2388;
        $or$cond523$not = $or$cond523 ^ 1;
        $2389 = HEAP32[$md_dist$i>>2]|0;
        $2390 = ($2389|0)>(-1);
        $or$cond525 = $2390 & $or$cond523$not;
        if (!($or$cond525)) {
         $cig_len$23$i558 = $cig_len$23$i;$cig_op$11$i556 = $cig_op$11$i;$cigar$4$i555 = $cigar$4$i;$cigar_alloc$4$i561 = $cigar_alloc$4$i;$decode_md$0$i66554 = $decode_md$0$i66;$ncigar$19$i560 = $ncigar$19$i;$nm$29$i562 = $nm$29$i;$r$20$i559 = $r$20$i;$ref_pos$9$i557 = $ref_pos$9$i;
         break;
        }
        while(1) {
         $2391 = HEAP32[$810>>2]|0;
         $2392 = ((($2391)) + 36|0);
         $2393 = HEAP32[$2392>>2]|0;
         $2394 = ((($2391)) + 40|0);
         $2395 = HEAP32[$2394>>2]|0;
         $2396 = (($2395) + 11)|0;
         $2397 = ($2393>>>0)>($2396>>>0);
         if ($2397) {
          break;
         }
         $2398 = ($2393|0)==(0);
         $2399 = (+($2393>>>0));
         $2400 = $2399 * 1.5;
         $2401 = (~~(($2400))>>>0);
         $2402 = $2398 ? 1024 : $2401;
         HEAP32[$2392>>2] = $2402;
         $2403 = HEAP32[$810>>2]|0;
         $2404 = ((($2403)) + 32|0);
         $2405 = HEAP32[$2404>>2]|0;
         $2406 = ((($2403)) + 36|0);
         $2407 = HEAP32[$2406>>2]|0;
         $2408 = (_realloc($2405,$2407)|0);
         $2409 = HEAP32[$810>>2]|0;
         $2410 = ((($2409)) + 32|0);
         HEAP32[$2410>>2] = $2408;
        }
        $2411 = ((($2391)) + 32|0);
        $2412 = HEAP32[$2411>>2]|0;
        $2413 = (($2412) + ($2395)|0);
        $2414 = HEAP32[$md_dist$i>>2]|0;
        $2415 = (_append_uint32($2413,$2414)|0);
        $2416 = $2415;
        $2417 = $2413;
        $2418 = (($2416) - ($2417))|0;
        $2419 = HEAP32[$810>>2]|0;
        $2420 = ((($2419)) + 40|0);
        $2421 = HEAP32[$2420>>2]|0;
        $2422 = (($2421) + ($2418))|0;
        HEAP32[$2420>>2] = $2422;
        $cig_len$23$i558 = $cig_len$23$i;$cig_op$11$i556 = $cig_op$11$i;$cigar$4$i555 = $cigar$4$i;$cigar_alloc$4$i561 = $cigar_alloc$4$i;$decode_md$0$i66554 = $decode_md$0$i66;$ncigar$19$i560 = $ncigar$19$i;$nm$29$i562 = $nm$29$i;$r$20$i559 = $r$20$i;$ref_pos$9$i557 = $ref_pos$9$i;
       }
      } while(0);
      $2423 = ($cig_len$23$i558|0)==(0);
      if ($2423) {
       $cigar$6$i = $cigar$4$i555;$cigar_alloc$6$i = $cigar_alloc$4$i561;$ncigar$20$i = $ncigar$19$i560;
      } else {
       $2424 = ($ncigar$19$i560>>>0)<($cigar_alloc$4$i561>>>0);
       if ($2424) {
        $cigar$5$i = $cigar$4$i555;$cigar_alloc$5$i = $cigar_alloc$4$i561;
       } else {
        $2425 = ($cigar_alloc$4$i561|0)==(0);
        $2426 = $cigar_alloc$4$i561 << 1;
        $$526 = $2425 ? 1024 : $2426;
        HEAP32[$813>>2] = $cigar$4$i555;
        $2427 = $$526 << 2;
        $2428 = (_realloc($cigar$4$i555,$2427)|0);
        $2429 = ($2428|0)==(0|0);
        if ($2429) {
         $$0$i51 = -1;
         break;
        }
        $cigar$5$i = $2428;$cigar_alloc$5$i = $$526;
       }
       $2430 = $cig_len$23$i558 << 4;
       $2431 = (($2430) + ($cig_op$11$i556))|0;
       $2432 = (($ncigar$19$i560) + 1)|0;
       $2433 = (($cigar$5$i) + ($ncigar$19$i560<<2)|0);
       HEAP32[$2433>>2] = $2431;
       $cigar$6$i = $cigar$5$i;$cigar_alloc$6$i = $cigar_alloc$5$i;$ncigar$20$i = $2432;
      }
      $2434 = HEAP32[$1446>>2]|0;
      $2435 = (($ncigar$20$i) - ($2434))|0;
      $2436 = (((($848) + (($rec$0*108)|0)|0)) + 84|0);
      HEAP32[$2436>>2] = $2435;
      $2437 = (((($848) + (($rec$0*108)|0)|0)) + 88|0);
      HEAP32[$2437>>2] = $ref_pos$9$i557;
      $2438 = $1395 & 8192;
      $2439 = ($2438|0)==(0);
      if ($2439) {
       $2449 = (((($848) + (($rec$0*108)|0)|0)) + 92|0);
       HEAP32[$2449>>2] = 40;
       $r$21$i = $r$20$i559;
      } else {
       $2440 = HEAP32[$3>>2]|0;
       $2441 = ((($2440)) + 424|0);
       $2442 = HEAP32[$2441>>2]|0;
       $2443 = ($2442|0)==(0|0);
       if ($2443) {
        $$0$i51 = -1;
        break;
       }
       $2444 = ((($2442)) + 12|0);
       $2445 = HEAP32[$2444>>2]|0;
       $2446 = (((($848) + (($rec$0*108)|0)|0)) + 92|0);
       $2447 = (FUNCTION_TABLE_iiiiii[$2445 & 127]($s,$2442,$2,$2446,$out_sz$i47)|0);
       $2448 = $r$20$i559 | $2447;
       $r$21$i = $2448;
      }
      $2450 = $1378 & 1;
      $2451 = ($2450|0)==(0);
      $or$cond528 = $1397 | $2451;
      if ($or$cond528) {
       $r$23$i = $r$21$i;
      } else {
       $2452 = (((($848) + (($rec$0*108)|0)|0)) + 16|0);
       $2453 = HEAP32[$2452>>2]|0;
       HEAP32[$out_sz214$i>>2] = $2453;
       $2454 = HEAP32[$3>>2]|0;
       $2455 = ((($2454)) + 396|0);
       $2456 = HEAP32[$2455>>2]|0;
       $2457 = ($2456|0)==(0|0);
       if ($2457) {
        $$0$i51 = -1;
        break;
       }
       $2458 = ((($2456)) + 12|0);
       $2459 = HEAP32[$2458>>2]|0;
       $2460 = (FUNCTION_TABLE_iiiiii[$2459 & 127]($s,$2456,$2,$qual$1,$out_sz214$i)|0);
       $2461 = $r$21$i | $2460;
       $r$23$i = $2461;
      }
      HEAP32[$813>>2] = $cigar$6$i;
      HEAP32[$815>>2] = $cigar_alloc$6$i;
      HEAP32[$814>>2] = $ncigar$20$i;
      $2462 = HEAP32[$1402>>2]|0;
      $2463 = $2462 & 8;
      $2464 = ($2463|0)==(0);
      if (!($2464)) {
       $2465 = (((($848) + (($rec$0*108)|0)|0)) + 16|0);
       HEAP32[$2465>>2] = 0;
      }
      $2466 = ($decode_md$0$i66554|0)==(0);
      if (!($2466)) {
       while(1) {
        $2467 = HEAP32[$810>>2]|0;
        $2468 = ((($2467)) + 36|0);
        $2469 = HEAP32[$2468>>2]|0;
        $2470 = ((($2467)) + 40|0);
        $2471 = HEAP32[$2470>>2]|0;
        $2472 = (($2471) + 1)|0;
        $2473 = ($2469>>>0)>($2472>>>0);
        if ($2473) {
         break;
        }
        $2474 = ($2469|0)==(0);
        $2475 = (+($2469>>>0));
        $2476 = $2475 * 1.5;
        $2477 = (~~(($2476))>>>0);
        $2478 = $2474 ? 1024 : $2477;
        HEAP32[$2468>>2] = $2478;
        $2479 = HEAP32[$810>>2]|0;
        $2480 = ((($2479)) + 32|0);
        $2481 = HEAP32[$2480>>2]|0;
        $2482 = ((($2479)) + 36|0);
        $2483 = HEAP32[$2482>>2]|0;
        $2484 = (_realloc($2481,$2483)|0);
        $2485 = HEAP32[$810>>2]|0;
        $2486 = ((($2485)) + 32|0);
        HEAP32[$2486>>2] = $2484;
       }
       HEAP32[$2470>>2] = $2472;
       $2487 = HEAP32[$810>>2]|0;
       $2488 = ((($2487)) + 32|0);
       $2489 = HEAP32[$2488>>2]|0;
       $2490 = (($2489) + ($2471)|0);
       HEAP8[$2490>>0] = 0;
       $2491 = HEAP32[$810>>2]|0;
       $2492 = ((($2491)) + 40|0);
       $2493 = HEAP32[$2492>>2]|0;
       $2494 = (($2493) - ($orig_aux$0$i))|0;
       $2495 = (((($848) + (($rec$0*108)|0)|0)) + 60|0);
       $2496 = HEAP32[$2495>>2]|0;
       $2497 = (($2496) + ($2494))|0;
       HEAP32[$2495>>2] = $2497;
      }
      $2498 = ($decode_nm$0$i72|0)==(0);
      if ($2498) {
       $$0$i51 = $r$23$i;
       break;
      }
      $2499 = $nm$29$i562 >>> 8;
      $2500 = $nm$29$i562 >>> 16;
      $2501 = $nm$29$i562 >>> 24;
      while(1) {
       $2502 = HEAP32[$810>>2]|0;
       $2503 = ((($2502)) + 36|0);
       $2504 = HEAP32[$2503>>2]|0;
       $2505 = ((($2502)) + 40|0);
       $2506 = HEAP32[$2505>>2]|0;
       $2507 = (($2506) + 7)|0;
       $2508 = ($2504>>>0)>($2507>>>0);
       if ($2508) {
        break;
       }
       $2509 = ($2504|0)==(0);
       $2510 = (+($2504>>>0));
       $2511 = $2510 * 1.5;
       $2512 = (~~(($2511))>>>0);
       $2513 = $2509 ? 1024 : $2512;
       HEAP32[$2503>>2] = $2513;
       $2514 = HEAP32[$810>>2]|0;
       $2515 = ((($2514)) + 32|0);
       $2516 = HEAP32[$2515>>2]|0;
       $2517 = ((($2514)) + 36|0);
       $2518 = HEAP32[$2517>>2]|0;
       $2519 = (_realloc($2516,$2518)|0);
       $2520 = HEAP32[$810>>2]|0;
       $2521 = ((($2520)) + 32|0);
       HEAP32[$2521>>2] = $2519;
      }
      $2522 = $nm$29$i562&255;
      $2523 = $2499&255;
      $2524 = $2500&255;
      $2525 = $2501&255;
      $2526 = ((($2502)) + 32|0);
      $2527 = HEAP32[$2526>>2]|0;
      $2528 = (($2527) + ($2506)|0);
      HEAP8[$2528>>0] = 78;
      $2529 = ((($2528)) + 1|0);
      HEAP8[$2529>>0] = 77;
      $2530 = ((($2528)) + 2|0);
      HEAP8[$2530>>0] = 73;
      $2531 = ((($2528)) + 3|0);
      HEAP8[$2531>>0] = $2522;
      $2532 = ((($2528)) + 4|0);
      HEAP8[$2532>>0] = $2523;
      $2533 = ((($2528)) + 5|0);
      HEAP8[$2533>>0] = $2524;
      $2534 = ((($2528)) + 6|0);
      HEAP8[$2534>>0] = $2525;
      $2535 = HEAP32[$810>>2]|0;
      $2536 = ((($2535)) + 40|0);
      $2537 = HEAP32[$2536>>2]|0;
      $2538 = (($2537) + 7)|0;
      HEAP32[$2536>>2] = $2538;
      $2539 = (((($848) + (($rec$0*108)|0)|0)) + 60|0);
      $2540 = HEAP32[$2539>>2]|0;
      $2541 = (($2540) + 7)|0;
      HEAP32[$2539>>2] = $2541;
      $$0$i51 = $r$23$i;
     }
    } while(0);
    $2542 = ($$0$i51|0)==(0);
    if (!($2542)) {
     $$0 = $$0$i51;
     label = 763;
     break L385;
    }
   } else {
    $2549 = (((($848) + (($rec$0*108)|0)|0)) + 16|0);
    $2550 = HEAP32[$2549>>2]|0;
    HEAP32[$out_sz23>>2] = $2550;
    $2551 = (((($848) + (($rec$0*108)|0)|0)) + 80|0);
    HEAP32[$2551>>2] = 0;
    $2552 = (((($848) + (($rec$0*108)|0)|0)) + 84|0);
    HEAP32[$2552>>2] = 0;
    $2553 = (((($848) + (($rec$0*108)|0)|0)) + 20|0);
    $2554 = HEAP32[$2553>>2]|0;
    $2555 = (((($848) + (($rec$0*108)|0)|0)) + 88|0);
    HEAP32[$2555>>2] = $2554;
    $2556 = (((($848) + (($rec$0*108)|0)|0)) + 92|0);
    HEAP32[$2556>>2] = 0;
    do {
     if (!($823)) {
      $2557 = HEAP32[$2549>>2]|0;
      $2558 = ($2557|0)==(0);
      if ($2558) {
       break;
      }
      $2559 = HEAP32[$3>>2]|0;
      $2560 = ((($2559)) + 468|0);
      $2561 = HEAP32[$2560>>2]|0;
      $2562 = ($2561|0)==(0|0);
      if ($2562) {
       $$0 = -1;
       label = 763;
       break L385;
      }
      $2563 = ((($2561)) + 12|0);
      $2564 = HEAP32[$2563>>2]|0;
      $2565 = (FUNCTION_TABLE_iiiiii[$2564 & 127]($s,$2561,$2,$seq$1,$out_sz23)|0);
      $2566 = ($2565|0)==(0);
      if (!($2566)) {
       $$0 = $2565;
       label = 763;
       break L385;
      }
     }
    } while(0);
    do {
     if (!($799)) {
      $2567 = HEAP8[$cf>>0]|0;
      $2568 = $2567 & 1;
      $2569 = ($2568<<24>>24)==(0);
      if ($2569) {
       break;
      }
      $2570 = HEAP32[$2549>>2]|0;
      HEAP32[$out_sz23>>2] = $2570;
      if ($825) {
       break L572;
      }
      $2571 = HEAP32[$2549>>2]|0;
      $2572 = ($2571|0)>(-1);
      if (!($2572)) {
       break L572;
      }
      $2573 = HEAP32[$3>>2]|0;
      $2574 = ((($2573)) + 396|0);
      $2575 = HEAP32[$2574>>2]|0;
      $2576 = ($2575|0)==(0|0);
      if ($2576) {
       $$0 = -1;
       label = 763;
       break L385;
      }
      $2577 = ((($2575)) + 12|0);
      $2578 = HEAP32[$2577>>2]|0;
      $2579 = (FUNCTION_TABLE_iiiiii[$2578 & 127]($s,$2575,$2,$qual$1,$out_sz23)|0);
      $2580 = ($2579|0)==(0);
      if ($2580) {
       break L572;
      } else {
       $$0 = $2579;
       label = 763;
       break L385;
      }
     }
    } while(0);
    if ($802) {
     break;
    }
    $2581 = HEAP32[$2549>>2]|0;
    _memset(($qual$1|0),-1,($2581|0))|0;
   }
  } while(0);
  $2582 = (($rec$0) + 1)|0;
  $last_ref_id$0 = $last_ref_id$3;$qual$0 = $qual$1;$rec$0 = $2582;$seq$0 = $seq$1;
 }
 if ((label|0) == 285) {
  HEAP32[$vararg_buffer22>>2] = $942;
  _fprintf(9772,17329,$vararg_buffer22);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 290) {
  _fprintf(9772,17364,$vararg_buffer25);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 401) {
  HEAP32[$vararg_buffer27>>2] = $1375;
  _fprintf(9772,17390,$vararg_buffer27);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 695) {
  (_pthread_mutex_lock(($$pre$phi293Z2D|0))|0);
  $2583 = ($refs$0|0)==(0|0);
  if ($2583) {
   if ($503) {
    $2592 = HEAP32[$817>>2]|0;
    $2593 = ((($fd)) + 56|0);
    $2594 = HEAP32[$2593>>2]|0;
    $2595 = ($2592|0)!=($2594|0);
    $2596 = ($$lobit|0)==(1);
    $or$cond529 = $2595 & $2596;
    if ($or$cond529) {
     $2597 = HEAP32[$$pre$phi291Z2D>>2]|0;
     _cram_ref_decr($2597,$500);
    }
   }
  } else {
   $i$0 = 0;
   while(1) {
    $2584 = HEAP32[$$pre$phi291Z2D>>2]|0;
    $2585 = ((($2584)) + 12|0);
    $2586 = HEAP32[$2585>>2]|0;
    $2587 = ($i$0|0)<($2586|0);
    if (!($2587)) {
     break;
    }
    $2588 = (($refs$0) + ($i$0<<2)|0);
    $2589 = HEAP32[$2588>>2]|0;
    $2590 = ($2589|0)==(0|0);
    if (!($2590)) {
     _cram_ref_decr($2584,$i$0);
    }
    $2591 = (($i$0) + 1)|0;
    $i$0 = $2591;
   }
   _free($refs$0);
  }
  (_pthread_mutex_unlock(($$pre$phi293Z2D|0))|0);
  $2598 = HEAP32[$5>>2]|0;
  $2599 = $2598 & 448;
  $2600 = ($2599|0)==(0);
  L980: do {
   if ($2600) {
    $rec$0$i = 0;
    while(1) {
     $2601 = HEAP32[$s>>2]|0;
     $2602 = ((($2601)) + 16|0);
     $2603 = HEAP32[$2602>>2]|0;
     $2604 = ($rec$0$i|0)<($2603|0);
     if (!($2604)) {
      $$0$i52 = 0;$2805 = $2601;
      break L980;
     }
     $2605 = HEAP32[$489>>2]|0;
     $2606 = (((($2605) + (($rec$0$i*108)|0)|0)) + 48|0);
     HEAP32[$2606>>2] = 0;
     $2607 = (((($2605) + (($rec$0$i*108)|0)|0)) + 44|0);
     HEAP32[$2607>>2] = 0;
     $2608 = (((($2605) + (($rec$0$i*108)|0)|0)) + 40|0);
     HEAP32[$2608>>2] = -1;
     $2609 = (($rec$0$i) + 1)|0;
     $rec$0$i = $2609;
    }
   } else {
    $rec$1$i = 0;
    while(1) {
     $2610 = HEAP32[$s>>2]|0;
     $2611 = ((($2610)) + 16|0);
     $2612 = HEAP32[$2611>>2]|0;
     $2613 = ($rec$1$i|0)<($2612|0);
     if (!($2613)) {
      $$0$i52 = 0;$2805 = $2610;
      break L980;
     }
     $2614 = HEAP32[$489>>2]|0;
     $2615 = (((($2614) + (($rec$1$i*108)|0)|0)) + 36|0);
     $2616 = HEAP32[$2615>>2]|0;
     $2617 = ($2616|0)>(-1);
     do {
      if ($2617) {
       $2618 = ($2616|0)<($2612|0);
       if (!($2618)) {
        $2714 = (($2612) + -1)|0;
        HEAP32[$vararg_buffer40>>2] = $2616;
        $vararg_ptr43 = ((($vararg_buffer40)) + 4|0);
        HEAP32[$vararg_ptr43>>2] = $2714;
        _fprintf(9772,17573,$vararg_buffer40);
        break;
       }
       $2619 = (((($2614) + (($rec$1$i*108)|0)|0)) + 48|0);
       $2620 = HEAP32[$2619>>2]|0;
       $2621 = ($2620|0)==(-2147483648);
       L992: do {
        if ($2621) {
         $2622 = (((($2614) + (($rec$1$i*108)|0)|0)) + 20|0);
         $2623 = HEAP32[$2622>>2]|0;
         $2624 = (((($2614) + (($rec$1$i*108)|0)|0)) + 88|0);
         $2625 = HEAP32[$2624>>2]|0;
         $2626 = (((($2614) + (($rec$1$i*108)|0)|0)) + 4|0);
         $2627 = HEAP32[$2626>>2]|0;
         $2629 = $2623;$aleft$0$i = $2623;$aright$0$i = $2625;$id2$0$i = $rec$1$i;$left_cnt$0$i = 0;$ref$0$i = $2627;
         while(1) {
          $2628 = ($aleft$0$i|0)>($2629|0);
          $2630 = ($aleft$0$i|0)==($2629|0);
          $2631 = $2630&1;
          $$left_cnt$0$i = (($left_cnt$0$i) + ($2631))|0;
          $aleft$1$i = $2628 ? $2629 : $aleft$0$i;
          $left_cnt$2$i = $2628 ? 1 : $$left_cnt$0$i;
          $2632 = (((($2614) + (($id2$0$i*108)|0)|0)) + 88|0);
          $2633 = HEAP32[$2632>>2]|0;
          $2634 = ($aright$0$i|0)<($2633|0);
          $$aright$0$i = $2634 ? $2633 : $aright$0$i;
          $2635 = (((($2614) + (($id2$0$i*108)|0)|0)) + 36|0);
          $2636 = HEAP32[$2635>>2]|0;
          $2637 = ($2636|0)==(-1);
          if ($2637) {
           label = 713;
           break;
          }
          $2638 = ($2636|0)>($id2$0$i|0);
          $2639 = ($2636|0)<($2612|0);
          $or$cond530 = $2638 & $2639;
          if (!($or$cond530)) {
           $$0$i52 = -1;$2805 = $2610;
           break L980;
          }
          $2640 = (((($2614) + (($2636*108)|0)|0)) + 4|0);
          $2641 = HEAP32[$2640>>2]|0;
          $2642 = ($2641|0)==($ref$0$i|0);
          $ref$0$i$ = $2642 ? $ref$0$i : -1;
          $2643 = ($2636|0)==($rec$1$i|0);
          if ($2643) {
           $ref$2$i = $ref$0$i$;
           break;
          }
          $$phi$trans$insert241 = (((($2614) + (($2636*108)|0)|0)) + 20|0);
          $$pre242 = HEAP32[$$phi$trans$insert241>>2]|0;
          $2629 = $$pre242;$aleft$0$i = $aleft$1$i;$aright$0$i = $$aright$0$i;$id2$0$i = $2636;$left_cnt$0$i = $left_cnt$2$i;$ref$0$i = $ref$0$i$;
         }
         if ((label|0) == 713) {
          label = 0;
          HEAP32[$2635>>2] = $rec$1$i;
          $ref$2$i = $ref$0$i;
         }
         $2644 = ($ref$2$i|0)==(-1);
         if ($2644) {
          $2678 = HEAP32[$489>>2]|0;
          $2679 = (((($2678) + (($rec$1$i*108)|0)|0)) + 48|0);
          HEAP32[$2679>>2] = 0;
          $2680 = HEAP32[$489>>2]|0;
          $2681 = (((($2680) + (($rec$1$i*108)|0)|0)) + 36|0);
          $2684 = $2680;$id2$2$in$i = $2681;
          while(1) {
           $id2$2$i = HEAP32[$id2$2$in$i>>2]|0;
           $2682 = ($id2$2$i|0)==($rec$1$i|0);
           if ($2682) {
            $2689 = $2684;
            break L992;
           }
           $2683 = (((($2684) + (($id2$2$i*108)|0)|0)) + 48|0);
           HEAP32[$2683>>2] = 0;
           $2685 = HEAP32[$489>>2]|0;
           $2686 = (((($2685) + (($id2$2$i*108)|0)|0)) + 36|0);
           $2684 = $2685;$id2$2$in$i = $2686;
          }
         }
         $2645 = (($$aright$0$i) - ($aleft$1$i))|0;
         $2646 = (($2645) + 1)|0;
         $2647 = HEAP32[$489>>2]|0;
         $2648 = (((($2647) + (($rec$1$i*108)|0)|0)) + 20|0);
         $2649 = HEAP32[$2648>>2]|0;
         $2650 = ($2649|0)==($aleft$1$i|0);
         L1008: do {
          if ($2650) {
           $2651 = ($left_cnt$2$i|0)==(1);
           do {
            if (!($2651)) {
             $2652 = (((($2647) + (($rec$1$i*108)|0)|0)) + 8|0);
             $2653 = HEAP32[$2652>>2]|0;
             $2654 = $2653 & 64;
             $2655 = ($2654|0)==(0);
             if (!($2655)) {
              break;
             }
             $2657 = $2645 ^ -1;
             $2658 = (((($2647) + (($rec$1$i*108)|0)|0)) + 48|0);
             HEAP32[$2658>>2] = $2657;
             $$pre$phi283Z2D = $2657;
             break L1008;
            }
           } while(0);
           $2656 = (((($2647) + (($rec$1$i*108)|0)|0)) + 48|0);
           HEAP32[$2656>>2] = $2646;
           $$pre282 = $2645 ^ -1;
           $$pre$phi283Z2D = $$pre282;
          } else {
           $2659 = $2645 ^ -1;
           $2660 = (((($2647) + (($rec$1$i*108)|0)|0)) + 48|0);
           HEAP32[$2660>>2] = $2659;
           $$pre$phi283Z2D = $2659;
          }
         } while(0);
         $2661 = HEAP32[$489>>2]|0;
         $2662 = (((($2661) + (($rec$1$i*108)|0)|0)) + 36|0);
         $2663 = ($left_cnt$2$i|0)==(1);
         $2666 = $2661;$id2$1$in$i = $2662;
         while(1) {
          $id2$1$i = HEAP32[$id2$1$in$i>>2]|0;
          $2664 = ($id2$1$i|0)==($rec$1$i|0);
          if ($2664) {
           $2689 = $2666;
           break L992;
          }
          $2665 = (((($2666) + (($id2$1$i*108)|0)|0)) + 20|0);
          $2667 = HEAP32[$2665>>2]|0;
          $2668 = ($2667|0)==($aleft$1$i|0);
          L1019: do {
           if ($2668) {
            do {
             if (!($2663)) {
              $2669 = (((($2666) + (($id2$1$i*108)|0)|0)) + 8|0);
              $2670 = HEAP32[$2669>>2]|0;
              $2671 = $2670 & 64;
              $2672 = ($2671|0)==(0);
              if (!($2672)) {
               break;
              }
              $2674 = (((($2666) + (($id2$1$i*108)|0)|0)) + 48|0);
              HEAP32[$2674>>2] = $$pre$phi283Z2D;
              break L1019;
             }
            } while(0);
            $2673 = (((($2666) + (($id2$1$i*108)|0)|0)) + 48|0);
            HEAP32[$2673>>2] = $2646;
           } else {
            $2675 = (((($2666) + (($id2$1$i*108)|0)|0)) + 48|0);
            HEAP32[$2675>>2] = $$pre$phi283Z2D;
           }
          } while(0);
          $2676 = HEAP32[$489>>2]|0;
          $2677 = (((($2676) + (($id2$1$i*108)|0)|0)) + 36|0);
          $2666 = $2676;$id2$1$in$i = $2677;
         }
        } else {
         $2689 = $2614;
        }
       } while(0);
       $2687 = HEAP32[$2615>>2]|0;
       $2688 = (((($2689) + (($2687*108)|0)|0)) + 20|0);
       $2690 = HEAP32[$2688>>2]|0;
       $2691 = (((($2614) + (($rec$1$i*108)|0)|0)) + 44|0);
       HEAP32[$2691>>2] = $2690;
       $2692 = HEAP32[$489>>2]|0;
       $2693 = (((($2692) + (($2687*108)|0)|0)) + 4|0);
       $2694 = HEAP32[$2693>>2]|0;
       $2695 = (((($2614) + (($rec$1$i*108)|0)|0)) + 40|0);
       HEAP32[$2695>>2] = $2694;
       $2696 = (((($2614) + (($rec$1$i*108)|0)|0)) + 8|0);
       $2697 = HEAP32[$2696>>2]|0;
       $2698 = $2697 | 1;
       HEAP32[$2696>>2] = $2698;
       $2699 = HEAP32[$489>>2]|0;
       $2700 = (((($2699) + (($2687*108)|0)|0)) + 8|0);
       $2701 = HEAP32[$2700>>2]|0;
       $2702 = $2701 & 4;
       $2703 = ($2702|0)==(0);
       if ($2703) {
        $2706 = $2698;
       } else {
        $2704 = $2697 | 9;
        HEAP32[$2696>>2] = $2704;
        HEAP32[$2619>>2] = 0;
        $2706 = $2704;
       }
       $2705 = $2706 & 4;
       $2707 = ($2705|0)==(0);
       if (!($2707)) {
        HEAP32[$2619>>2] = 0;
       }
       $2708 = HEAP32[$489>>2]|0;
       $2709 = (((($2708) + (($2687*108)|0)|0)) + 8|0);
       $2710 = HEAP32[$2709>>2]|0;
       $2711 = $2710 & 16;
       $2712 = ($2711|0)==(0);
       if ($2712) {
        break;
       }
       $2713 = $2706 | 32;
       HEAP32[$2696>>2] = $2713;
      } else {
       $2715 = (((($2614) + (($rec$1$i*108)|0)|0)) + 104|0);
       $2716 = HEAP32[$2715>>2]|0;
       $2717 = $2716 & 1;
       $2718 = ($2717|0)==(0);
       if (!($2718)) {
        $2719 = (((($2614) + (($rec$1$i*108)|0)|0)) + 8|0);
        $2720 = HEAP32[$2719>>2]|0;
        $2721 = $2720 | 33;
        HEAP32[$2719>>2] = $2721;
       }
       $2722 = $2716 & 2;
       $2723 = ($2722|0)==(0);
       $$phi$trans$insert = (((($2614) + (($rec$1$i*108)|0)|0)) + 8|0);
       $$pre239 = HEAP32[$$phi$trans$insert>>2]|0;
       if ($2723) {
        $2726 = $$pre239;
       } else {
        $2724 = $$pre239 | 8;
        HEAP32[$$phi$trans$insert>>2] = $2724;
        $2726 = $2724;
       }
       $2725 = $2726 & 1;
       $2727 = ($2725|0)==(0);
       if (!($2727)) {
        break;
       }
       $2728 = (((($2614) + (($rec$1$i*108)|0)|0)) + 40|0);
       HEAP32[$2728>>2] = -1;
      }
     } while(0);
     $2729 = (((($2614) + (($rec$1$i*108)|0)|0)) + 48|0);
     $2730 = HEAP32[$2729>>2]|0;
     $2731 = ($2730|0)==(-2147483648);
     if ($2731) {
      HEAP32[$2729>>2] = 0;
     }
     $2732 = (($rec$1$i) + 1)|0;
     $rec$1$i = $2732;
    }
   }
  } while(0);
  $2734 = $2805;$i4$0 = 0;
  while(1) {
   $2733 = ((($2734)) + 32|0);
   $2735 = HEAP32[$2733>>2]|0;
   $2736 = ($i4$0|0)<($2735|0);
   if (!($2736)) {
    break;
   }
   $2737 = HEAP32[$0>>2]|0;
   $2738 = (($2737) + ($i4$0<<2)|0);
   $2739 = HEAP32[$2738>>2]|0;
   $2740 = ($2739|0)==(0|0);
   if ($2740) {
    $2745 = $2737;
   } else {
    $2741 = ((($2739)) + 32|0);
    $2742 = HEAP32[$2741>>2]|0;
    $2743 = ($2742|0)==(0|0);
    if (!($2743)) {
     _free($2742);
    }
    _free($2739);
    $$pre244 = HEAP32[$0>>2]|0;
    $2745 = $$pre244;
   }
   $2744 = (($2745) + ($i4$0<<2)|0);
   HEAP32[$2744>>2] = 0;
   $2746 = (($i4$0) + 1)|0;
   $$pre243 = HEAP32[$s>>2]|0;
   $2734 = $$pre243;$i4$0 = $2746;
  }
  $2747 = HEAP32[$826>>2]|0;
  $2748 = ((($2747)) + 40|0);
  $2749 = HEAP32[$2748>>2]|0;
  $2750 = (($2749) + 1)|0;
  $2751 = ((($2747)) + 36|0);
  HEAP32[$2751>>2] = $2750;
  $2752 = HEAP32[$826>>2]|0;
  $2753 = ((($2752)) + 32|0);
  $2754 = HEAP32[$2753>>2]|0;
  $2755 = ((($2752)) + 36|0);
  $2756 = HEAP32[$2755>>2]|0;
  $2757 = (_realloc($2754,$2756)|0);
  $2758 = HEAP32[$826>>2]|0;
  $2759 = ((($2758)) + 32|0);
  HEAP32[$2759>>2] = $2757;
  $2760 = HEAP32[$827>>2]|0;
  $2761 = ((($2760)) + 40|0);
  $2762 = HEAP32[$2761>>2]|0;
  $2763 = (($2762) + 1)|0;
  $2764 = ((($2760)) + 36|0);
  HEAP32[$2764>>2] = $2763;
  $2765 = HEAP32[$827>>2]|0;
  $2766 = ((($2765)) + 32|0);
  $2767 = HEAP32[$2766>>2]|0;
  $2768 = ((($2765)) + 36|0);
  $2769 = HEAP32[$2768>>2]|0;
  $2770 = (_realloc($2767,$2769)|0);
  $2771 = HEAP32[$827>>2]|0;
  $2772 = ((($2771)) + 32|0);
  HEAP32[$2772>>2] = $2770;
  $2773 = HEAP32[$830>>2]|0;
  $2774 = ((($2773)) + 40|0);
  $2775 = HEAP32[$2774>>2]|0;
  $2776 = (($2775) + 1)|0;
  $2777 = ((($2773)) + 36|0);
  HEAP32[$2777>>2] = $2776;
  $2778 = HEAP32[$830>>2]|0;
  $2779 = ((($2778)) + 32|0);
  $2780 = HEAP32[$2779>>2]|0;
  $2781 = ((($2778)) + 36|0);
  $2782 = HEAP32[$2781>>2]|0;
  $2783 = (_realloc($2780,$2782)|0);
  $2784 = HEAP32[$830>>2]|0;
  $2785 = ((($2784)) + 32|0);
  HEAP32[$2785>>2] = $2783;
  $2786 = HEAP32[$810>>2]|0;
  $2787 = ((($2786)) + 40|0);
  $2788 = HEAP32[$2787>>2]|0;
  $2789 = (($2788) + 1)|0;
  $2790 = ((($2786)) + 36|0);
  HEAP32[$2790>>2] = $2789;
  $2791 = HEAP32[$810>>2]|0;
  $2792 = ((($2791)) + 32|0);
  $2793 = HEAP32[$2792>>2]|0;
  $2794 = ((($2791)) + 36|0);
  $2795 = HEAP32[$2794>>2]|0;
  $2796 = (_realloc($2793,$2795)|0);
  $2797 = HEAP32[$810>>2]|0;
  $2798 = ((($2797)) + 32|0);
  HEAP32[$2798>>2] = $2796;
  $$0 = $$0$i52;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 763) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _add_md_char($s,$decode_md,$c,$md_dist) {
 $s = $s|0;
 $decode_md = $decode_md|0;
 $c = $c|0;
 $md_dist = $md_dist|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($decode_md|0)==(0);
 if ($0) {
  return;
 }
 $1 = ((($s)) + 84|0);
 while(1) {
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($2)) + 36|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($2)) + 40|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 11)|0;
  $8 = ($4>>>0)>($7>>>0);
  if ($8) {
   break;
  }
  $9 = ($4|0)==(0);
  $10 = (+($4>>>0));
  $11 = $10 * 1.5;
  $12 = (~~(($11))>>>0);
  $13 = $9 ? 1024 : $12;
  HEAP32[$3>>2] = $13;
  $14 = HEAP32[$1>>2]|0;
  $15 = ((($14)) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($14)) + 36|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_realloc($16,$18)|0);
  $20 = HEAP32[$1>>2]|0;
  $21 = ((($20)) + 32|0);
  HEAP32[$21>>2] = $19;
 }
 $22 = ((($2)) + 32|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + ($6)|0);
 $25 = HEAP32[$md_dist>>2]|0;
 $26 = (_append_uint32($24,$25)|0);
 $27 = $26;
 $28 = $24;
 $29 = (($27) - ($28))|0;
 $30 = HEAP32[$1>>2]|0;
 $31 = ((($30)) + 40|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + ($29))|0;
 HEAP32[$31>>2] = $33;
 while(1) {
  $34 = HEAP32[$1>>2]|0;
  $35 = ((($34)) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($34)) + 40|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 1)|0;
  $40 = ($36>>>0)>($39>>>0);
  if ($40) {
   break;
  }
  $41 = ($36|0)==(0);
  $42 = (+($36>>>0));
  $43 = $42 * 1.5;
  $44 = (~~(($43))>>>0);
  $45 = $41 ? 1024 : $44;
  HEAP32[$35>>2] = $45;
  $46 = HEAP32[$1>>2]|0;
  $47 = ((($46)) + 32|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($46)) + 36|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (_realloc($48,$50)|0);
  $52 = HEAP32[$1>>2]|0;
  $53 = ((($52)) + 32|0);
  HEAP32[$53>>2] = $51;
 }
 HEAP32[$37>>2] = $39;
 $54 = HEAP32[$1>>2]|0;
 $55 = ((($54)) + 32|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + ($38)|0);
 HEAP8[$57>>0] = $c;
 HEAP32[$md_dist>>2] = 0;
 return;
}
function _append_uint32($cp,$i) {
 $cp = $cp|0;
 $i = $i|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$13 = 0, $$2 = 0, $$2$pn = 0, $$24 = 0, $$3 = 0, $$35 = 0, $$4 = 0, $$4$pn = 0, $$46 = 0, $$5 = 0, $$57 = 0, $$6 = 0, $$6$pn = 0, $$68 = 0, $$7 = 0, $$79 = 0, $$8 = 0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $cp$pn = 0, $cp$pn10 = 0, $cp$pn11 = 0, $cp$pn12 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)==(0);
 if ($0) {
  $1 = ((($cp)) + 1|0);
  HEAP8[$cp>>0] = 48;
  $$0 = $1;
  return ($$0|0);
 }
 $2 = ($i>>>0)<(100);
 do {
  if ($2) {
   $46 = (($i>>>0) / 10)&-1;
   $47 = ($i>>>0)>(9);
   if ($47) {
    $48 = (($46) + 48)|0;
    $49 = $48&255;
    HEAP8[$cp>>0] = $49;
    $50 = Math_imul($46, -10)|0;
    $51 = (($50) + ($i))|0;
    $$79 = $51;$cp$pn = $cp;
    break;
   }
   $52 = (($i) + 48)|0;
   $53 = $52&255;
   $54 = ((($cp)) + 1|0);
   HEAP8[$cp>>0] = $53;
   $$0 = $54;
   return ($$0|0);
  } else {
   $3 = ($i>>>0)<(10000);
   do {
    if ($3) {
     $35 = (($i>>>0) / 1000)&-1;
     $36 = ($i>>>0)>(999);
     if ($36) {
      $37 = (($35) + 48)|0;
      $38 = $37&255;
      HEAP8[$cp>>0] = $38;
      $39 = Math_imul($35, -1000)|0;
      $40 = (($39) + ($i))|0;
      $$57 = $40;$cp$pn10 = $cp;
      label = 27;
      break;
     } else {
      $41 = (($i>>>0) / 100)&-1;
      $42 = (($41) + 48)|0;
      $43 = $42&255;
      HEAP8[$cp>>0] = $43;
      $44 = Math_imul($41, -100)|0;
      $45 = (($44) + ($i))|0;
      $$6$pn = $cp;$$68 = $45;
      break;
     }
    } else {
     $4 = ($i>>>0)<(1000000);
     do {
      if ($4) {
       $24 = (($i>>>0) / 100000)&-1;
       $25 = ($i>>>0)>(99999);
       if ($25) {
        $26 = (($24) + 48)|0;
        $27 = $26&255;
        HEAP8[$cp>>0] = $27;
        $28 = Math_imul($24, -100000)|0;
        $29 = (($28) + ($i))|0;
        $$35 = $29;$cp$pn11 = $cp;
        label = 25;
        break;
       } else {
        $30 = (($i>>>0) / 10000)&-1;
        $31 = (($30) + 48)|0;
        $32 = $31&255;
        HEAP8[$cp>>0] = $32;
        $33 = Math_imul($30, -10000)|0;
        $34 = (($33) + ($i))|0;
        $$4$pn = $cp;$$46 = $34;
        break;
       }
      } else {
       $5 = ($i>>>0)<(100000000);
       do {
        if ($5) {
         $13 = (($i>>>0) / 10000000)&-1;
         $14 = ($i>>>0)>(9999999);
         if ($14) {
          $15 = (($13) + 48)|0;
          $16 = $15&255;
          HEAP8[$cp>>0] = $16;
          $17 = Math_imul($13, -10000000)|0;
          $18 = (($17) + ($i))|0;
          $$13 = $18;$cp$pn12 = $cp;
          label = 23;
          break;
         } else {
          $19 = (($i>>>0) / 1000000)&-1;
          $20 = (($19) + 48)|0;
          $21 = $20&255;
          HEAP8[$cp>>0] = $21;
          $22 = Math_imul($19, -1000000)|0;
          $23 = (($22) + ($i))|0;
          $$2$pn = $cp;$$24 = $23;
          break;
         }
        } else {
         $6 = (($i>>>0) / 1000000000)&-1;
         $7 = ($i>>>0)>(999999999);
         if ($7) {
          $55 = $6 | 48;
          $56 = $55&255;
          $57 = ((($cp)) + 1|0);
          HEAP8[$cp>>0] = $56;
          $58 = Math_imul($6, -1000000000)|0;
          $59 = (($58) + ($i))|0;
          $60 = (($59>>>0) / 100000000)&-1;
          $61 = (($60) + 48)|0;
          $62 = $61&255;
          HEAP8[$57>>0] = $62;
          $63 = (($59>>>0) % 100000000)&-1;
          $$02 = $63;$$pn = $57;
         } else {
          $8 = (($i>>>0) / 100000000)&-1;
          $9 = (($8) + 48)|0;
          $10 = $9&255;
          HEAP8[$cp>>0] = $10;
          $11 = Math_imul($8, -100000000)|0;
          $12 = (($11) + ($i))|0;
          $$02 = $12;$$pn = $cp;
         }
         $$1 = ((($$pn)) + 1|0);
         $64 = (($$02>>>0) / 10000000)&-1;
         $65 = (($64) + 48)|0;
         $66 = $65&255;
         HEAP8[$$1>>0] = $66;
         $67 = (($$02>>>0) % 10000000)&-1;
         $$13 = $67;$cp$pn12 = $$1;
         label = 23;
        }
       } while(0);
       if ((label|0) == 23) {
        $$2 = ((($cp$pn12)) + 1|0);
        $68 = (($$13>>>0) / 1000000)&-1;
        $69 = (($68) + 48)|0;
        $70 = $69&255;
        HEAP8[$$2>>0] = $70;
        $71 = (($$13>>>0) % 1000000)&-1;
        $$2$pn = $$2;$$24 = $71;
       }
       $$3 = ((($$2$pn)) + 1|0);
       $72 = (($$24>>>0) / 100000)&-1;
       $73 = (($72) + 48)|0;
       $74 = $73&255;
       HEAP8[$$3>>0] = $74;
       $75 = (($$24>>>0) % 100000)&-1;
       $$35 = $75;$cp$pn11 = $$3;
       label = 25;
      }
     } while(0);
     if ((label|0) == 25) {
      $$4 = ((($cp$pn11)) + 1|0);
      $76 = (($$35>>>0) / 10000)&-1;
      $77 = (($76) + 48)|0;
      $78 = $77&255;
      HEAP8[$$4>>0] = $78;
      $79 = (($$35>>>0) % 10000)&-1;
      $$4$pn = $$4;$$46 = $79;
     }
     $$5 = ((($$4$pn)) + 1|0);
     $80 = (($$46>>>0) / 1000)&-1;
     $81 = (($80) + 48)|0;
     $82 = $81&255;
     HEAP8[$$5>>0] = $82;
     $83 = (($$46>>>0) % 1000)&-1;
     $$57 = $83;$cp$pn10 = $$5;
     label = 27;
    }
   } while(0);
   if ((label|0) == 27) {
    $$6 = ((($cp$pn10)) + 1|0);
    $84 = (($$57>>>0) / 100)&-1;
    $85 = (($84) + 48)|0;
    $86 = $85&255;
    HEAP8[$$6>>0] = $86;
    $87 = (($$57>>>0) % 100)&-1;
    $$6$pn = $$6;$$68 = $87;
   }
   $$7 = ((($$6$pn)) + 1|0);
   $88 = (($$68>>>0) / 10)&-1;
   $89 = (($88) + 48)|0;
   $90 = $89&255;
   HEAP8[$$7>>0] = $90;
   $91 = (($$68>>>0) % 10)&-1;
   $$79 = $91;$cp$pn = $$7;
  }
 } while(0);
 $$8 = ((($cp$pn)) + 1|0);
 $92 = (($$79) + 48)|0;
 $93 = $92&255;
 $94 = ((($cp$pn)) + 2|0);
 HEAP8[$$8>>0] = $93;
 $$0 = $94;
 return ($$0|0);
}
function _cram_decode_slice_thread($arg) {
 $arg = $arg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$arg>>2]|0;
 $1 = ((($arg)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($arg)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($arg)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_cram_decode_slice($0,$2,$4,$6)|0);
 $8 = ((($arg)) + 16|0);
 HEAP32[$8>>2] = $7;
 return ($arg|0);
}
function _kh_put_map_286($h,$key,$ret) {
 $h = $h|0;
 $key = $key|0;
 $ret = $ret|0;
 var $$0 = 0, $$0$i = 0, $$014$i = 0, $$05$i = 0, $$lcssa$i = 0, $$lcssa2$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $h$0$i = 0, $h$1$i = 0, $i$0 = 0, $i$1 = 0, $i$1$site$2 = 0, $i$16 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond3$i = 0, $s$pn$i = 0, $site$0 = 0, $site$0$i$0 = 0, $site$27 = 0, $step$0 = 0, $storemerge1 = 0, $x$0 = 0, $x$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($h)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($h)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 do {
  if (!($4)) {
   $5 = HEAP32[$h>>2]|0;
   $6 = ((($h)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7 << 1;
   $9 = ($5>>>0)>($8>>>0);
   if ($9) {
    $10 = (($5) + -1)|0;
    $11 = (_kh_resize_map_287($h,$10)|0);
    $12 = ($11|0)<(0);
    if (!($12)) {
     break;
    }
    HEAP32[$ret>>2] = -1;
    $13 = HEAP32[$h>>2]|0;
    $$0 = $13;
    return ($$0|0);
   } else {
    $14 = (($5) + 1)|0;
    $15 = (_kh_resize_map_287($h,$14)|0);
    $16 = ($15|0)<(0);
    if (!($16)) {
     break;
    }
    HEAP32[$ret>>2] = -1;
    $17 = HEAP32[$h>>2]|0;
    $$0 = $17;
    return ($$0|0);
   }
  }
 } while(0);
 $18 = HEAP32[$h>>2]|0;
 $19 = (($18) + -1)|0;
 $20 = HEAP8[$key>>0]|0;
 $21 = $20 << 24 >> 24;
 $22 = ($20<<24>>24)==(0);
 L11: do {
  if ($22) {
   $h$1$i = $21;
  } else {
   $h$0$i = $21;$s$pn$i = $key;
   while(1) {
    $$0$i = ((($s$pn$i)) + 1|0);
    $23 = HEAP8[$$0$i>>0]|0;
    $24 = ($23<<24>>24)==(0);
    if ($24) {
     $h$1$i = $h$0$i;
     break L11;
    }
    $25 = ($h$0$i*31)|0;
    $26 = $23 << 24 >> 24;
    $27 = (($25) + ($26))|0;
    $h$0$i = $27;$s$pn$i = $$0$i;
   }
  }
 } while(0);
 $28 = $h$1$i & $19;
 $29 = $28 >>> 4;
 $30 = ((($h)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($29<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $28 << 1;
 $35 = $34 & 30;
 $36 = 2 << $35;
 $37 = $33 & $36;
 $38 = ($37|0)==(0);
 do {
  if ($38) {
   $39 = ((($h)) + 20|0);
   $i$0 = $28;$site$0 = $18;$step$0 = 0;
   while(1) {
    $40 = $i$0 >>> 4;
    $41 = (($31) + ($40<<2)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $i$0 << 1;
    $44 = $43 & 30;
    $45 = 2 << $44;
    $46 = $42 & $45;
    $47 = ($46|0)==(0);
    if (!($47)) {
     $i$16 = $i$0;$site$27 = $site$0;
     break;
    }
    $48 = 1 << $44;
    $49 = $42 & $48;
    $50 = ($49|0)==(0);
    if ($50) {
     $51 = HEAP32[$39>>2]|0;
     $52 = (($51) + ($i$0<<2)|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = HEAP8[$53>>0]|0;
     $55 = ($54<<24>>24)!=($20<<24>>24);
     $56 = ($54<<24>>24)==(0);
     $or$cond3$i = $56 | $55;
     if ($or$cond3$i) {
      $$lcssa$i = $54;$$lcssa2$i = $20;
     } else {
      $$014$i = $53;$$05$i = $key;
      while(1) {
       $57 = ((($$014$i)) + 1|0);
       $58 = ((($$05$i)) + 1|0);
       $59 = HEAP8[$57>>0]|0;
       $60 = HEAP8[$58>>0]|0;
       $61 = ($59<<24>>24)!=($60<<24>>24);
       $62 = ($59<<24>>24)==(0);
       $or$cond$i = $62 | $61;
       if ($or$cond$i) {
        $$lcssa$i = $59;$$lcssa2$i = $60;
        break;
       } else {
        $$014$i = $57;$$05$i = $58;
       }
      }
     }
     $63 = ($$lcssa$i<<24>>24)==($$lcssa2$i<<24>>24);
     if ($63) {
      $i$16 = $i$0;$site$27 = $site$0;
      break;
     }
    }
    $site$0$i$0 = $50 ? $site$0 : $i$0;
    $64 = (($step$0) + 1)|0;
    $65 = (($i$0) + ($64))|0;
    $66 = $65 & $19;
    $67 = ($66|0)==($28|0);
    if ($67) {
     $i$1 = $28;$x$0 = $site$0$i$0;
     label = 18;
     break;
    } else {
     $i$0 = $66;$site$0 = $site$0$i$0;$step$0 = $64;
    }
   }
   if ((label|0) == 18) {
    $68 = ($x$0|0)==($18|0);
    if ($68) {
     $i$16 = $i$1;$site$27 = $x$0;
    } else {
     $x$3 = $x$0;
     break;
    }
   }
   $69 = $i$16 >>> 4;
   $70 = (($31) + ($69<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $i$16 << 1;
   $73 = $72 & 30;
   $74 = 2 << $73;
   $75 = $71 & $74;
   $76 = ($75|0)==(0);
   $77 = ($site$27|0)==($18|0);
   $or$cond = $76 | $77;
   $i$1$site$2 = $or$cond ? $i$16 : $site$27;
   $x$3 = $i$1$site$2;
  } else {
   $x$3 = $28;
  }
 } while(0);
 $78 = $x$3 >>> 4;
 $79 = (($31) + ($78<<2)|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $x$3 << 1;
 $82 = $81 & 30;
 $83 = 2 << $82;
 $84 = $80 & $83;
 $85 = ($84|0)==(0);
 if ($85) {
  $100 = 1 << $82;
  $101 = $80 & $100;
  $102 = ($101|0)==(0);
  if ($102) {
   $storemerge1 = 0;
  } else {
   $103 = ((($h)) + 20|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (($104) + ($x$3<<2)|0);
   HEAP32[$105>>2] = $key;
   $106 = 3 << $82;
   $107 = $106 ^ -1;
   $108 = HEAP32[$30>>2]|0;
   $109 = (($108) + ($78<<2)|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $110 & $107;
   HEAP32[$109>>2] = $111;
   $112 = ((($h)) + 4|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = (($113) + 1)|0;
   HEAP32[$112>>2] = $114;
   $storemerge1 = 2;
  }
 } else {
  $86 = ((($h)) + 20|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($87) + ($x$3<<2)|0);
  HEAP32[$88>>2] = $key;
  $89 = 3 << $82;
  $90 = $89 ^ -1;
  $91 = HEAP32[$30>>2]|0;
  $92 = (($91) + ($78<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $93 & $90;
  HEAP32[$92>>2] = $94;
  $95 = ((($h)) + 4|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) + 1)|0;
  HEAP32[$95>>2] = $97;
  $98 = HEAP32[$0>>2]|0;
  $99 = (($98) + 1)|0;
  HEAP32[$0>>2] = $99;
  $storemerge1 = 1;
 }
 HEAP32[$ret>>2] = $storemerge1;
 $$0 = $x$3;
 return ($$0|0);
}
function _kh_resize_map_287($h,$new_n_buckets) {
 $h = $h|0;
 $new_n_buckets = $new_n_buckets|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$pn = 0, $$pre$phi5Z2D = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $h$0$i = 0;
 var $i$0 = 0, $j$1 = 0, $key$0 = 0, $phitmp = 0, $phitmp10 = 0, $s$pn$i = 0, $step$0 = 0, $val$sroa$0$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($new_n_buckets) + -1)|0;
 $1 = $0 >>> 1;
 $2 = $0 | $1;
 $3 = $2 >>> 2;
 $4 = $2 | $3;
 $5 = $4 >>> 4;
 $6 = $4 | $5;
 $7 = $6 >>> 8;
 $8 = $6 | $7;
 $9 = $8 >>> 16;
 $10 = $8 | $9;
 $11 = (($10) + 1)|0;
 $12 = ($11>>>0)<(4);
 $$ = $12 ? 4 : $11;
 $13 = ((($h)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($$>>>0));
 $16 = $15 * 0.77000000000000001;
 $17 = $16 + 0.5;
 $18 = (~~(($17))>>>0);
 $19 = ($14>>>0)<($18>>>0);
 if (!($19)) {
  $$0 = 0;
  return ($$0|0);
 }
 $20 = ($$>>>0)<(16);
 $21 = $$ >>> 4;
 $phitmp10 = $21 << 2;
 $22 = $20 ? 4 : $phitmp10;
 $23 = (_malloc($22)|0);
 $24 = ($23|0)==(0|0);
 if ($24) {
  $$0 = -1;
  return ($$0|0);
 }
 $25 = $$ >>> 4;
 $phitmp = $25 << 2;
 $26 = $20 ? 4 : $phitmp;
 _memset(($23|0),-86,($26|0))|0;
 $27 = HEAP32[$h>>2]|0;
 $28 = ($27>>>0)<($$>>>0);
 $29 = ((($h)) + 20|0);
 do {
  if ($28) {
   $30 = HEAP32[$29>>2]|0;
   $31 = $$ << 2;
   $32 = (_realloc($30,$31)|0);
   $33 = ($32|0)==(0|0);
   if ($33) {
    _free($23);
    $$0 = -1;
    return ($$0|0);
   }
   HEAP32[$29>>2] = $32;
   $34 = ((($h)) + 24|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (_realloc($35,$31)|0);
   $37 = ($36|0)==(0|0);
   if (!($37)) {
    HEAP32[$34>>2] = $36;
    $$pre$phi5Z2D = $34;
    break;
   }
   _free($23);
   $$0 = -1;
   return ($$0|0);
  } else {
   $$pre4 = ((($h)) + 24|0);
   $$pre$phi5Z2D = $$pre4;
  }
 } while(0);
 $38 = ((($h)) + 16|0);
 $39 = (($$) + -1)|0;
 $j$1 = 0;
 while(1) {
  $40 = HEAP32[$h>>2]|0;
  $41 = ($j$1|0)==($40|0);
  if ($41) {
   break;
  }
  $42 = $j$1 >>> 4;
  $43 = HEAP32[$38>>2]|0;
  $44 = (($43) + ($42<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $j$1 << 1;
  $47 = $46 & 30;
  $48 = 3 << $47;
  $49 = $45 & $48;
  $50 = ($49|0)==(0);
  if ($50) {
   $51 = HEAP32[$29>>2]|0;
   $52 = (($51) + ($j$1<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = HEAP32[$$pre$phi5Z2D>>2]|0;
   $55 = (($54) + ($j$1<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = 1 << $47;
   $58 = $45 | $57;
   HEAP32[$44>>2] = $58;
   $key$0 = $53;$val$sroa$0$0 = $56;
   while(1) {
    $59 = HEAP8[$key$0>>0]|0;
    $60 = $59 << 24 >> 24;
    $61 = ($59<<24>>24)==(0);
    L26: do {
     if ($61) {
      $$pn = $60;$step$0 = 0;
     } else {
      $h$0$i = $60;$s$pn$i = $key$0;
      while(1) {
       $$0$i = ((($s$pn$i)) + 1|0);
       $62 = HEAP8[$$0$i>>0]|0;
       $63 = ($62<<24>>24)==(0);
       if ($63) {
        $$pn = $h$0$i;$step$0 = 0;
        break L26;
       }
       $64 = ($h$0$i*31)|0;
       $65 = $62 << 24 >> 24;
       $66 = (($64) + ($65))|0;
       $h$0$i = $66;$s$pn$i = $$0$i;
      }
     }
    } while(0);
    while(1) {
     $i$0 = $$pn & $39;
     $67 = $i$0 >>> 4;
     $68 = (($23) + ($67<<2)|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $i$0 << 1;
     $71 = $70 & 30;
     $72 = 2 << $71;
     $73 = $69 & $72;
     $74 = ($73|0)==(0);
     if (!($74)) {
      break;
     }
     $75 = (($step$0) + 1)|0;
     $76 = (($i$0) + ($75))|0;
     $$pn = $76;$step$0 = $75;
    }
    $77 = $72 ^ -1;
    $78 = $69 & $77;
    HEAP32[$68>>2] = $78;
    $79 = HEAP32[$h>>2]|0;
    $80 = ($i$0>>>0)<($79>>>0);
    if (!($80)) {
     break;
    }
    $81 = HEAP32[$38>>2]|0;
    $82 = (($81) + ($67<<2)|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = 3 << $71;
    $85 = $83 & $84;
    $86 = ($85|0)==(0);
    if (!($86)) {
     break;
    }
    $87 = HEAP32[$29>>2]|0;
    $88 = (($87) + ($i$0<<2)|0);
    $89 = HEAP32[$88>>2]|0;
    HEAP32[$88>>2] = $key$0;
    $90 = HEAP32[$$pre$phi5Z2D>>2]|0;
    $91 = (($90) + ($i$0<<2)|0);
    $92 = HEAP32[$91>>2]|0;
    HEAP32[$91>>2] = $val$sroa$0$0;
    $93 = 1 << $71;
    $94 = HEAP32[$38>>2]|0;
    $95 = (($94) + ($67<<2)|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $96 | $93;
    HEAP32[$95>>2] = $97;
    $key$0 = $89;$val$sroa$0$0 = $92;
   }
   $98 = HEAP32[$29>>2]|0;
   $99 = (($98) + ($i$0<<2)|0);
   HEAP32[$99>>2] = $key$0;
   $100 = HEAP32[$$pre$phi5Z2D>>2]|0;
   $101 = (($100) + ($i$0<<2)|0);
   HEAP32[$101>>2] = $val$sroa$0$0;
  }
  $102 = (($j$1) + 1)|0;
  $j$1 = $102;
 }
 $103 = ($j$1>>>0)>($$>>>0);
 if ($103) {
  $104 = HEAP32[$29>>2]|0;
  $105 = $$ << 2;
  $106 = (_realloc($104,$105)|0);
  HEAP32[$29>>2] = $106;
  $107 = HEAP32[$$pre$phi5Z2D>>2]|0;
  $108 = (_realloc($107,$105)|0);
  HEAP32[$$pre$phi5Z2D>>2] = $108;
 }
 $109 = HEAP32[$38>>2]|0;
 _free($109);
 HEAP32[$38>>2] = $23;
 HEAP32[$h>>2] = $$;
 $110 = HEAP32[$13>>2]|0;
 $111 = ((($h)) + 8|0);
 HEAP32[$111>>2] = $110;
 $112 = ((($h)) + 12|0);
 HEAP32[$112>>2] = $18;
 $$0 = 0;
 return ($$0|0);
}
function _cram_encode_container($fd,$c) {
 $fd = $fd|0;
 $c = $c|0;
 var $$ = 0, $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i$ = 0, $$0$i$i1$i = 0, $$0$i$i10 = 0, $$0$i$i100 = 0, $$0$i$i104 = 0, $$0$i$i128 = 0, $$0$i$i14 = 0, $$0$i$i21 = 0, $$0$i$i25 = 0, $$0$i$i29 = 0, $$0$i$i33 = 0, $$0$i$i37 = 0, $$0$i$i4$i = 0, $$0$i$i41 = 0, $$0$i$i45 = 0, $$0$i$i49 = 0, $$0$i$i53 = 0;
 var $$0$i$i57 = 0, $$0$i$i61 = 0, $$0$i$i65 = 0, $$0$i$i69 = 0, $$0$i$i76 = 0, $$0$i$i8 = 0, $$0$i$i80 = 0, $$0$i$i84 = 0, $$0$i$i88 = 0, $$0$i$i92 = 0, $$0$i$i96 = 0, $$0$i102 = 0, $$0$i106 = 0, $$0$i110153 = 0, $$0$i113154 = 0, $$0$i117155 = 0, $$0$i12 = 0, $$0$i120156 = 0, $$0$i13$i = 0, $$0$i16 = 0;
 var $$0$i19$i = 0, $$0$i19$i130473 = 0, $$0$i19$i130474 = 0, $$0$i19$i130475 = 0, $$0$i20151 = 0, $$0$i21$i = 0, $$0$i23 = 0, $$0$i23$i = 0, $$0$i27 = 0, $$0$i27$i = 0, $$0$i31 = 0, $$0$i31$i = 0, $$0$i35 = 0, $$0$i35$i = 0, $$0$i39 = 0, $$0$i39$i = 0, $$0$i43 = 0, $$0$i43$i = 0, $$0$i47 = 0, $$0$i47$i = 0;
 var $$0$i51 = 0, $$0$i51$i = 0, $$0$i55 = 0, $$0$i55$i = 0, $$0$i59 = 0, $$0$i59$i = 0, $$0$i63 = 0, $$0$i63$i = 0, $$0$i67 = 0, $$0$i67$i = 0, $$0$i71 = 0, $$0$i71$i = 0, $$0$i75$i = 0, $$0$i75152 = 0, $$0$i78 = 0, $$0$i79$i = 0, $$0$i82 = 0, $$0$i83$i = 0, $$0$i86 = 0, $$0$i87$i = 0;
 var $$0$i9 = 0, $$0$i90 = 0, $$0$i91$i = 0, $$0$i94 = 0, $$0$i95$i = 0, $$0$i98 = 0, $$014$i$i$i = 0, $$014$i$i12$i = 0, $$05$i$i$i = 0, $$05$i$i11$i = 0, $$1$i = 0, $$12$i = 0, $$443 = 0, $$444 = 0, $$445 = 0, $$467 = 0, $$468 = 0, $$first_base$0 = 0, $$in1 = 0, $$lcssa$i$i$i = 0;
 var $$lcssa$i$i17$i = 0, $$lcssa2$i$i$i = 0, $$lcssa2$i$i16$i = 0, $$mask = 0, $$mask$i = 0, $$mask$i$i = 0, $$mask$i131 = 0, $$mask$i15$i = 0, $$mask1$i = 0, $$mask1$i$i = 0, $$mask1$i17$i = 0, $$mask2$i = 0, $$mask3 = 0, $$mask3$i = 0, $$mask5$i = 0, $$mask6$i = 0, $$not = 0, $$phi$trans$insert304$phi$trans$insert = 0, $$pn$i$i = 0, $$pre = 0;
 var $$pre$phi310Z2D = 0, $$pre$phi311Z2D = 0, $$pre283 = 0, $$pre285 = 0, $$pre285$pre = 0, $$pre286 = 0, $$pre287 = 0, $$pre288 = 0, $$pre289 = 0, $$pre290 = 0, $$pre291 = 0, $$pre292 = 0, $$pre294 = 0, $$pre295 = 0, $$pre298 = 0, $$pre299 = 0, $$pre300 = 0, $$pre301 = 0, $$pre302 = 0, $$pre303$pre = 0;
 var $$pre305 = 0, $$pre305$pre = 0, $$pre308 = 0, $$pre309 = 0, $$pre315 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0;
 var $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0;
 var $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0;
 var $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0;
 var $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0;
 var $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0;
 var $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0;
 var $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0;
 var $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0;
 var $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0;
 var $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0.0, $1255 = 0.0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0;
 var $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0;
 var $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0;
 var $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0;
 var $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0;
 var $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0;
 var $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0;
 var $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0;
 var $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0;
 var $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0;
 var $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0;
 var $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0;
 var $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0;
 var $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0;
 var $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0;
 var $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0;
 var $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0;
 var $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0;
 var $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0;
 var $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0;
 var $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0;
 var $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0;
 var $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0;
 var $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0;
 var $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0;
 var $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0;
 var $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0;
 var $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0;
 var $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0;
 var $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0;
 var $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0;
 var $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0;
 var $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0;
 var $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0;
 var $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0;
 var $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0;
 var $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0;
 var $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0;
 var $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0;
 var $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0;
 var $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0;
 var $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0;
 var $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0;
 var $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0;
 var $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0;
 var $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0;
 var $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0;
 var $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0;
 var $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0;
 var $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0;
 var $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0;
 var $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0;
 var $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0;
 var $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0;
 var $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0;
 var $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0;
 var $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0;
 var $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0;
 var $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0;
 var $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0;
 var $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0;
 var $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0;
 var $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0;
 var $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0;
 var $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0;
 var $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0;
 var $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0;
 var $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0;
 var $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0;
 var $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0;
 var $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0;
 var $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0;
 var $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0;
 var $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0;
 var $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0;
 var $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0;
 var $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0;
 var $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0;
 var $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0;
 var $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0;
 var $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0;
 var $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0;
 var $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0;
 var $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0;
 var $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0;
 var $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0;
 var $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0;
 var $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0;
 var $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0;
 var $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0;
 var $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0;
 var $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0;
 var $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0.0, $2933 = 0.0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0;
 var $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0.0;
 var $2956 = 0.0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0.0;
 var $2974 = 0.0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0.0;
 var $2992 = 0.0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0;
 var $3009 = 0.0, $301 = 0, $3010 = 0.0, $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0;
 var $3027 = 0.0, $3028 = 0.0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0;
 var $3045 = 0.0, $3046 = 0.0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0;
 var $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0;
 var $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0;
 var $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0;
 var $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0;
 var $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0, $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0;
 var $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0, $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0;
 var $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0, $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0;
 var $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0, $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0;
 var $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0, $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0;
 var $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0, $3229 = 0, $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0.0;
 var $3243 = 0.0, $3244 = 0, $3245 = 0, $3246 = 0, $3247 = 0, $3248 = 0, $3249 = 0, $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0, $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0;
 var $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0, $3265 = 0, $3266 = 0, $3267 = 0, $3268 = 0.0, $3269 = 0.0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0, $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0;
 var $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0, $3283 = 0, $3284 = 0, $3285 = 0, $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0, $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0;
 var $3298 = 0, $3299 = 0, $33 = 0, $330 = 0, $3300 = 0, $3301 = 0, $3302 = 0, $3303 = 0.0, $3304 = 0.0, $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0, $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0;
 var $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0, $3319 = 0, $332 = 0, $3320 = 0, $3321 = 0, $3322 = 0, $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0, $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0;
 var $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0, $3337 = 0, $3338 = 0, $3339 = 0, $334 = 0, $3340 = 0, $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0, $3345 = 0, $3346 = 0, $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0;
 var $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0, $3355 = 0, $3356 = 0, $3357 = 0, $3358 = 0, $3359 = 0, $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0, $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0;
 var $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0, $3373 = 0, $3374 = 0, $3375 = 0, $3376 = 0, $3377 = 0, $3378 = 0, $3379 = 0, $338 = 0, $3380 = 0, $3381 = 0, $3382 = 0, $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0;
 var $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0, $3391 = 0, $3392 = 0, $3393 = 0, $3394 = 0, $3395 = 0, $3396 = 0, $3397 = 0, $3398 = 0, $3399 = 0, $34 = 0, $340 = 0, $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0;
 var $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0, $3409 = 0, $341 = 0, $3410 = 0, $3411 = 0, $3412 = 0, $3413 = 0, $3414 = 0, $3415 = 0, $3416 = 0, $3417 = 0, $3418 = 0, $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0;
 var $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0, $3427 = 0, $3428 = 0, $3429 = 0, $343 = 0, $3430 = 0, $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0, $3435 = 0, $3436 = 0, $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0;
 var $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0, $3445 = 0, $3446 = 0, $3447 = 0, $3448 = 0, $3449 = 0, $345 = 0, $3450 = 0, $3451 = 0, $3452 = 0, $3453 = 0, $3454 = 0, $3455 = 0, $3456 = 0, $3457 = 0, $3458 = 0, $3459 = 0;
 var $346 = 0, $3460 = 0, $3461 = 0, $3462 = 0, $3463 = 0, $3464 = 0, $3465 = 0, $3466 = 0, $3467 = 0, $3468 = 0, $3469 = 0, $347 = 0, $3470 = 0, $3471 = 0, $3472 = 0, $3473 = 0, $3474 = 0, $3475 = 0, $3476 = 0, $3477 = 0;
 var $3478 = 0, $3479 = 0, $348 = 0, $3480 = 0, $3481 = 0, $3482 = 0, $3483 = 0, $3484 = 0, $3485 = 0, $3486 = 0, $3487 = 0, $3488 = 0, $3489 = 0, $349 = 0, $3490 = 0, $3491 = 0, $3492 = 0, $3493 = 0, $3494 = 0, $3495 = 0;
 var $3496 = 0, $3497 = 0, $3498 = 0, $3499 = 0, $35 = 0, $350 = 0, $3500 = 0, $3501 = 0, $3502 = 0, $3503 = 0, $3504 = 0, $3505 = 0, $3506 = 0, $3507 = 0, $3508 = 0, $3509 = 0, $351 = 0, $3510 = 0, $3511 = 0, $3512 = 0;
 var $3513 = 0, $3514 = 0, $3515 = 0, $3516 = 0, $3517 = 0, $3518 = 0, $3519 = 0, $352 = 0, $3520 = 0, $3521 = 0, $3522 = 0, $3523 = 0, $3524 = 0, $3525 = 0, $3526 = 0, $3527 = 0, $3528 = 0, $3529 = 0, $353 = 0, $3530 = 0;
 var $3531 = 0, $3532 = 0, $3533 = 0, $3534 = 0, $3535 = 0, $3536 = 0, $3537 = 0, $3538 = 0, $3539 = 0, $354 = 0, $3540 = 0, $3541 = 0, $3542 = 0, $3543 = 0, $3544 = 0, $3545 = 0, $3546 = 0, $3547 = 0, $3548 = 0, $3549 = 0;
 var $355 = 0, $3550 = 0, $3551 = 0, $3552 = 0, $3553 = 0, $3554 = 0, $3555 = 0, $3556 = 0, $3557 = 0, $3558 = 0, $3559 = 0, $356 = 0, $3560 = 0, $3561 = 0, $3562 = 0, $3563 = 0, $3564 = 0, $3565 = 0, $3566 = 0, $3567 = 0;
 var $3568 = 0, $3569 = 0, $357 = 0, $3570 = 0, $3571 = 0, $3572 = 0, $3573 = 0, $3574 = 0, $3575 = 0, $3576 = 0, $3577 = 0, $3578 = 0, $3579 = 0, $358 = 0, $3580 = 0, $3581 = 0, $3582 = 0, $3583 = 0, $3584 = 0, $3585 = 0;
 var $3586 = 0, $3587 = 0, $3588 = 0, $3589 = 0, $359 = 0, $3590 = 0.0, $3591 = 0.0, $3592 = 0, $3593 = 0, $3594 = 0, $3595 = 0, $3596 = 0, $3597 = 0, $3598 = 0, $3599 = 0, $36 = 0, $360 = 0, $3600 = 0, $3601 = 0, $3602 = 0;
 var $3603 = 0, $3604 = 0, $3605 = 0, $3606 = 0, $3607 = 0, $3608 = 0, $3609 = 0, $361 = 0, $3610 = 0, $3611 = 0, $3612 = 0, $3613 = 0, $3614 = 0, $3615 = 0, $3616 = 0, $3617 = 0, $3618 = 0, $3619 = 0, $362 = 0, $3620 = 0;
 var $3621 = 0, $3622 = 0, $3623 = 0, $3624 = 0, $3625 = 0, $3626 = 0, $3627 = 0, $3628 = 0, $3629 = 0, $363 = 0, $3630 = 0, $3631 = 0, $3632 = 0, $3633 = 0, $3634 = 0, $3635 = 0, $3636 = 0, $3637 = 0.0, $3638 = 0.0, $3639 = 0;
 var $364 = 0, $3640 = 0, $3641 = 0, $3642 = 0, $3643 = 0, $3644 = 0, $3645 = 0, $3646 = 0, $3647 = 0, $3648 = 0, $3649 = 0, $365 = 0, $3650 = 0, $3651 = 0, $3652 = 0.0, $3653 = 0.0, $3654 = 0, $3655 = 0, $3656 = 0, $3657 = 0;
 var $3658 = 0, $3659 = 0, $366 = 0, $3660 = 0, $3661 = 0, $3662 = 0, $3663 = 0, $3664 = 0, $3665 = 0, $3666 = 0, $3667 = 0.0, $3668 = 0.0, $3669 = 0, $367 = 0, $3670 = 0, $3671 = 0, $3672 = 0, $3673 = 0, $3674 = 0, $3675 = 0;
 var $3676 = 0, $3677 = 0, $3678 = 0, $3679 = 0, $368 = 0, $3680 = 0, $3681 = 0, $3682 = 0.0, $3683 = 0.0, $3684 = 0, $3685 = 0, $3686 = 0, $3687 = 0, $3688 = 0, $3689 = 0, $369 = 0, $3690 = 0, $3691 = 0, $3692 = 0, $3693 = 0;
 var $3694 = 0, $3695 = 0, $3696 = 0, $3697 = 0.0, $3698 = 0.0, $3699 = 0, $37 = 0, $370 = 0, $3700 = 0, $3701 = 0, $3702 = 0, $3703 = 0, $3704 = 0, $3705 = 0, $3706 = 0, $3707 = 0, $3708 = 0, $3709 = 0, $371 = 0, $3710 = 0;
 var $3711 = 0, $3712 = 0.0, $3713 = 0.0, $3714 = 0, $3715 = 0, $3716 = 0, $3717 = 0, $3718 = 0, $3719 = 0, $372 = 0, $3720 = 0, $3721 = 0, $3722 = 0, $3723 = 0, $3724 = 0, $3725 = 0, $3726 = 0, $3727 = 0.0, $3728 = 0.0, $3729 = 0;
 var $373 = 0, $3730 = 0, $3731 = 0, $3732 = 0, $3733 = 0, $3734 = 0, $3735 = 0, $3736 = 0, $3737 = 0, $3738 = 0, $3739 = 0, $374 = 0, $3740 = 0, $3741 = 0, $3742 = 0.0, $3743 = 0.0, $3744 = 0, $3745 = 0, $3746 = 0, $3747 = 0;
 var $3748 = 0, $3749 = 0, $375 = 0, $3750 = 0, $3751 = 0, $3752 = 0, $3753 = 0, $3754 = 0, $3755 = 0, $3756 = 0, $3757 = 0.0, $3758 = 0.0, $3759 = 0, $376 = 0, $3760 = 0, $3761 = 0, $3762 = 0, $3763 = 0, $3764 = 0, $3765 = 0;
 var $3766 = 0, $3767 = 0, $3768 = 0, $3769 = 0, $377 = 0, $3770 = 0, $3771 = 0, $3772 = 0.0, $3773 = 0.0, $3774 = 0, $3775 = 0, $3776 = 0, $3777 = 0, $3778 = 0, $3779 = 0, $378 = 0, $3780 = 0, $3781 = 0, $3782 = 0, $3783 = 0;
 var $3784 = 0, $3785 = 0, $3786 = 0, $3787 = 0.0, $3788 = 0.0, $3789 = 0, $379 = 0, $3790 = 0, $3791 = 0, $3792 = 0, $3793 = 0, $3794 = 0, $3795 = 0, $3796 = 0, $3797 = 0, $3798 = 0, $3799 = 0, $38 = 0, $380 = 0, $3800 = 0;
 var $3801 = 0, $3802 = 0.0, $3803 = 0.0, $3804 = 0, $3805 = 0, $3806 = 0, $3807 = 0, $3808 = 0, $3809 = 0, $381 = 0, $3810 = 0, $3811 = 0, $3812 = 0, $3813 = 0, $3814 = 0, $3815 = 0, $3816 = 0, $3817 = 0, $3818 = 0, $3819 = 0;
 var $382 = 0, $3820 = 0, $3821 = 0.0, $3822 = 0.0, $3823 = 0, $3824 = 0, $3825 = 0, $3826 = 0, $3827 = 0, $3828 = 0, $3829 = 0, $383 = 0, $3830 = 0, $3831 = 0, $3832 = 0, $3833 = 0, $3834 = 0, $3835 = 0, $3836 = 0, $3837 = 0;
 var $3838 = 0, $3839 = 0, $384 = 0, $3840 = 0, $3841 = 0, $3842 = 0, $3843 = 0, $3844 = 0, $3845 = 0, $3846 = 0, $3847 = 0, $3848 = 0, $3849 = 0, $385 = 0, $3850 = 0, $3851 = 0.0, $3852 = 0.0, $3853 = 0, $3854 = 0, $3855 = 0;
 var $3856 = 0, $3857 = 0, $3858 = 0, $3859 = 0, $386 = 0, $3860 = 0, $3861 = 0, $3862 = 0, $3863 = 0, $3864 = 0, $3865 = 0, $3866 = 0, $3867 = 0, $3868 = 0, $3869 = 0, $387 = 0, $3870 = 0, $3871 = 0, $3872 = 0, $3873 = 0;
 var $3874 = 0, $3875 = 0, $3876 = 0, $3877 = 0, $3878 = 0, $3879 = 0, $388 = 0, $3880 = 0, $3881 = 0, $3882 = 0, $3883 = 0, $3884 = 0, $3885 = 0, $3886 = 0, $3887 = 0, $3888 = 0, $3889 = 0, $389 = 0, $3890 = 0, $3891 = 0;
 var $3892 = 0, $3893 = 0, $3894 = 0, $3895 = 0, $3896 = 0, $3897 = 0, $3898 = 0, $3899 = 0, $39 = 0, $390 = 0, $3900 = 0, $3901 = 0, $3902 = 0, $3903 = 0, $3904 = 0, $3905 = 0, $3906 = 0, $3907 = 0, $3908 = 0, $3909 = 0;
 var $391 = 0, $3910 = 0, $3911 = 0, $3912 = 0, $3913 = 0, $3914 = 0, $3915 = 0, $3916 = 0, $3917 = 0, $3918 = 0, $3919 = 0, $392 = 0, $3920 = 0, $3921 = 0, $3922 = 0, $3923 = 0, $3924 = 0, $3925 = 0, $3926 = 0, $3927 = 0;
 var $3928 = 0, $3929 = 0, $393 = 0, $3930 = 0, $3931 = 0, $3932 = 0, $3933 = 0, $3934 = 0, $3935 = 0, $3936 = 0, $3937 = 0, $3938 = 0, $3939 = 0, $394 = 0, $3940 = 0, $3941 = 0, $3942 = 0, $3943 = 0, $3944 = 0, $3945 = 0;
 var $3946 = 0, $3947 = 0, $3948 = 0, $3949 = 0, $395 = 0, $3950 = 0, $3951 = 0, $3952 = 0, $3953 = 0, $3954 = 0, $3955 = 0, $3956 = 0, $3957 = 0, $3958 = 0, $3959 = 0, $396 = 0, $3960 = 0, $3961 = 0, $3962 = 0, $3963 = 0;
 var $3964 = 0, $3965 = 0, $3966 = 0, $3967 = 0, $3968 = 0, $3969 = 0, $397 = 0, $3970 = 0, $3971 = 0, $3972 = 0, $3973 = 0, $3974 = 0, $3975 = 0, $3976 = 0, $3977 = 0, $3978 = 0, $3979 = 0, $398 = 0, $3980 = 0, $3981 = 0;
 var $3982 = 0, $3983 = 0, $3984 = 0, $3985 = 0, $3986 = 0, $3987 = 0, $3988 = 0, $3989 = 0, $399 = 0, $3990 = 0, $3991 = 0, $3992 = 0, $3993 = 0, $3994 = 0, $3995 = 0, $3996 = 0, $3997 = 0, $3998 = 0, $3999 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $4000 = 0, $4001 = 0, $4002 = 0, $4003 = 0, $4004 = 0, $4005 = 0, $4006 = 0, $4007 = 0, $4008 = 0, $4009 = 0, $401 = 0, $4010 = 0, $4011 = 0, $4012 = 0, $4013 = 0, $4014 = 0, $4015 = 0, $4016 = 0;
 var $4017 = 0, $4018 = 0, $4019 = 0, $402 = 0, $4020 = 0, $4021 = 0, $4022 = 0, $4023 = 0, $4024 = 0, $4025 = 0, $4026 = 0, $4027 = 0, $4028 = 0, $4029 = 0, $403 = 0, $4030 = 0, $4031 = 0, $4032 = 0, $4033 = 0, $4034 = 0;
 var $4035 = 0, $4036 = 0, $4037 = 0, $4038 = 0, $4039 = 0, $404 = 0, $4040 = 0, $4041 = 0, $4042 = 0, $4043 = 0, $4044 = 0, $4045 = 0, $4046 = 0, $4047 = 0, $4048 = 0, $4049 = 0, $405 = 0, $4050 = 0, $4051 = 0, $4052 = 0;
 var $4053 = 0, $4054 = 0, $4055 = 0, $4056 = 0, $4057 = 0, $4058 = 0, $4059 = 0, $406 = 0, $4060 = 0, $4061 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0.0, $469 = 0.0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $brmerge = 0, $cp$1$i$i = 0, $cp$2$i$i = 0, $cp$3$i$i = 0, $cp$4$i$i = 0, $exitcond = 0, $exitcond439 = 0, $exitcond440 = 0, $expected$2$i$i = 0, $first_base$0 = 0, $h$0$i$i$i = 0, $h$0$i$i2$i = 0, $h$1$i$i$i = 0;
 var $h$1$i$i5$i = 0, $i$0 = 0, $i$0$i = 0, $i$0$i$i = 0, $i$0$i$i123 = 0, $i$0$i$i133 = 0, $i$0$i132 = 0, $i$0$i22$i = 0, $i$0$i26$i = 0, $i$0$i30$i = 0, $i$0$i34$i = 0, $i$0$i38$i = 0, $i$0$i42$i = 0, $i$0$i46$i = 0, $i$0$i50$i = 0, $i$0$i54$i = 0, $i$0$i58$i = 0, $i$0$i62$i = 0, $i$0$i66$i = 0, $i$0$i7$i = 0;
 var $i$0$i7$i$ = 0, $i$0$i70$i = 0, $i$0$i74$i = 0, $i$0$i78$i = 0, $i$0$i82$i = 0, $i$0$i86$i = 0, $i$0$i90$i = 0, $i$0$i94$i = 0, $i$1 = 0, $i$1$i$i = 0, $i$1$i$i$site$2$i$i = 0, $i$1$i$i124 = 0, $i$1$i$i470 = 0, $i$2 = 0, $i$2$i$i = 0, $i$3 = 0, $i$4 = 0, $i1$0$i$i = 0, $i32$i$i = 0, $i321$i$i = 0;
 var $id$0$i = 0, $id$1$i = 0, $j$0 = 0, $j$0$i = 0, $j$0$i$i = 0, $j$0$i16$i = 0, $j$1$i = 0, $j2$0$i$i = 0, $k1$0$i = 0, $k2$0$i = 0, $last_base$0 = 0, $last_base$1 = 0, $last_pos$i$0 = 0, $last_pos$i$1 = 0, $len$0$i = 0, $max_val$7$i = 0, $mc$0$i = 0, $mc$1$i = 0, $mc$10$i = 0, $mc$11$i = 0;
 var $mc$12$i = 0, $mc$13$i = 0, $mc$14$i = 0, $mc$15$i = 0, $mc$16$i = 0, $mc$17$i = 0, $mc$18$i = 0, $mc$19$i = 0, $mc$2$i178 = 0, $mc$20$i = 0, $mc$21$i = 0, $mc$22$i = 0, $mc$23$i = 0, $mc$24$i = 0, $mc$25$i = 0, $mc$26$i = 0, $mc$27$i = 0, $mc$28$i = 0, $mc$29$i = 0, $mc$3$i = 0;
 var $mc$30$i = 0, $mc$31$i = 0, $mc$33$i = 0, $mc$34$i = 0, $mc$35$i = 0, $mc$36$i = 0, $mc$37$i = 0, $mc$38$i181 = 0, $mc$4$i = 0, $mc$5$i = 0, $mc$6$i = 0, $mc$7$i = 0, $mc$8$i = 0, $mc$9$i = 0, $method$1$i$i = 0, $method$1$i$i$ = 0, $methodF$0$i$i = 0, $or$cond = 0, $or$cond$i$i$i = 0, $or$cond$i$i13$i = 0;
 var $or$cond3$i$i$i = 0, $or$cond3$i$i9$i = 0, $or$cond441 = 0, $or$cond442 = 0, $or$cond446 = 0, $or$cond447 = 0, $or$cond448 = 0, $or$cond449 = 0, $or$cond450 = 0, $or$cond451 = 0, $or$cond452 = 0, $or$cond453 = 0, $or$cond454 = 0, $or$cond455 = 0, $or$cond456 = 0, $or$cond457 = 0, $or$cond458 = 0, $or$cond459 = 0, $or$cond460 = 0, $or$cond461 = 0;
 var $or$cond462 = 0, $or$cond463 = 0, $or$cond464 = 0, $or$cond465 = 0, $or$cond466 = 0, $prev_pos$0$i$i = 0, $r$0$i$i = 0, $r$1$i$i = 0, $r$3$i$i = 0, $r$4$i$i = 0, $r$5$i$i = 0, $r$6$i$i = 0, $r$7$i$i = 0, $r$9$i$i = 0, $r$i = 0, $r1$0 = 0, $r1$0$i = 0, $r1$0$i4 = 0, $r1$1 = 0, $r1$1$i = 0;
 var $r2$0 = 0, $r2$0$i = 0, $r2$0$i5 = 0, $r2$1$i = 0, $r2$2$i = 0, $rec$0$i = 0, $s$pn$i$i$i = 0, $s$pn$i$i3$i = 0, $site$0$i$i = 0, $site$0$i$i$i$0$i$i = 0, $site$2$i$i471 = 0, $slice_offset$0 = 0, $slice_offset$1 = 0, $sn$0 = 0, $step$0$i$i = 0, $step$0$i8$i = 0, $switch$split1022D = 0, $switch$split1052D = 0, $switch$split1082D = 0, $switch$split1112D = 0;
 var $switch$split1142D = 0, $switch$split1172D = 0, $switch$split2D = 0, $switch$split932D = 0, $switch$split962D = 0, $switch$split992D = 0, $uc$i$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer4 = 0;
 var $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer51 = 0, $vararg_buffer54 = 0, $vararg_buffer57 = 0, $vararg_buffer6 = 0, $vararg_buffer60 = 0, $vararg_buffer63 = 0, $vararg_buffer66 = 0, $vararg_buffer69 = 0, $vararg_buffer72 = 0, $vararg_buffer75 = 0, $vararg_buffer78 = 0, $vararg_buffer81 = 0, $vararg_buffer84 = 0, $vararg_buffer87 = 0, $vararg_buffer9 = 0, $vararg_buffer90 = 0, $x$0$i$i = 0;
 var $x$3$i$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer90 = sp + 248|0;
 $vararg_buffer87 = sp + 240|0;
 $vararg_buffer84 = sp + 232|0;
 $vararg_buffer81 = sp + 224|0;
 $vararg_buffer78 = sp + 216|0;
 $vararg_buffer75 = sp + 208|0;
 $vararg_buffer72 = sp + 200|0;
 $vararg_buffer69 = sp + 192|0;
 $vararg_buffer66 = sp + 184|0;
 $vararg_buffer63 = sp + 176|0;
 $vararg_buffer60 = sp + 168|0;
 $vararg_buffer57 = sp + 160|0;
 $vararg_buffer54 = sp + 152|0;
 $vararg_buffer51 = sp + 144|0;
 $vararg_buffer48 = sp + 136|0;
 $vararg_buffer45 = sp + 128|0;
 $vararg_buffer42 = sp + 120|0;
 $vararg_buffer39 = sp + 112|0;
 $vararg_buffer36 = sp + 104|0;
 $vararg_buffer33 = sp + 96|0;
 $vararg_buffer30 = sp + 88|0;
 $vararg_buffer27 = sp + 80|0;
 $vararg_buffer24 = sp + 72|0;
 $vararg_buffer21 = sp + 64|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $r$i = sp + 260|0;
 $i32$i$i = sp + 256|0;
 $uc$i$i = sp + 264|0;
 $i321$i$i = sp + 252|0;
 $0 = ((($c)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($fd)) + 34704|0);
 (_pthread_mutex_lock(($2|0))|0);
 $3 = ((($fd)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 (_pthread_mutex_unlock(($2|0))|0);
 $7 = ((($fd)) + 288|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $14 = ((($c)) + 344|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0|0);
   if ($16) {
    $17 = ((($c)) + 148|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = HEAP32[$18>>2]|0;
    $20 = HEAP32[$19>>2]|0;
    $32 = $20;$36 = $19;$4061 = $17;
   } else {
    $i$0 = 0;
    while(1) {
     $21 = ($i$0|0)<($6|0);
     if (!($21)) {
      break;
     }
     $22 = HEAP32[$14>>2]|0;
     $23 = (($22) + ($i$0<<2)|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(0);
     if (!($25)) {
      (_cram_get_ref($fd,$i$0,1,0)|0);
     }
     $26 = (($i$0) + 1)|0;
     $i$0 = $26;
    }
    $$pre = HEAP32[$7>>2]|0;
    $27 = ($$pre|0)==(0);
    $28 = ((($c)) + 148|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = HEAP32[$29>>2]|0;
    $31 = HEAP32[$30>>2]|0;
    if ($27) {
     $32 = $31;$36 = $30;$4061 = $28;
    } else {
     $4060 = $28;$64 = $31;
     label = 14;
     break;
    }
   }
   $33 = (_cram_get_ref($fd,$32,1,0)|0);
   $34 = ($33|0)==(0|0);
   $35 = HEAP32[$36>>2]|0;
   $37 = ($35|0)>(-1);
   $or$cond = $34 & $37;
   if ($or$cond) {
    HEAP32[$vararg_buffer>>2] = $35;
    _fprintf(9772,18044,$vararg_buffer);
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $38 = ((($c)) + 136|0);
    HEAP32[$38>>2] = $35;
    $39 = ($35|0)>(-1);
    $40 = ((($c)) + 4|0);
    HEAP32[$40>>2] = $35;
    if (!($39)) {
     $$pre$phi310Z2D = $40;$$pre$phi311Z2D = $38;$138 = $4061;
     break;
    }
    $41 = HEAP32[$3>>2]|0;
    $42 = ((($41)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) + ($35<<2)|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 40|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ((($c)) + 144|0);
    HEAP32[$48>>2] = $47;
    $49 = ((($c)) + 124|0);
    HEAP32[$49>>2] = 1;
    $50 = HEAP32[$3>>2]|0;
    $51 = ((($50)) + 8|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (($52) + ($35<<2)|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ((($54)) + 8|0);
    $56 = $55;
    $57 = $56;
    $58 = HEAP32[$57>>2]|0;
    $59 = (($56) + 4)|0;
    $60 = $59;
    $61 = HEAP32[$60>>2]|0;
    $62 = ((($c)) + 140|0);
    HEAP32[$62>>2] = $58;
    $$pre$phi310Z2D = $40;$$pre$phi311Z2D = $38;$138 = $4061;
    break;
   }
  } else {
   $10 = ((($c)) + 148|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$12>>2]|0;
   $4060 = $10;$64 = $13;
   label = 14;
  }
 } while(0);
 if ((label|0) == 14) {
  $63 = ((($c)) + 136|0);
  HEAP32[$63>>2] = $64;
  $65 = HEAP32[$3>>2]|0;
  $66 = ((($65)) + 28|0);
  (_pthread_mutex_lock(($66|0))|0);
  $67 = ($64|0)<(0);
  if (!($67)) {
   $68 = ((($65)) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (($69) + ($64<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ((($71)) + 40|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($73|0)==(0|0);
   if (!($74)) {
    $75 = ((($65)) + 60|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)==($64|0);
    if ($77) {
     HEAP32[$75>>2] = -1;
     $$pre283 = HEAP32[$70>>2]|0;
     $79 = $$pre283;
    } else {
     $79 = $71;
    }
    $78 = ((($79)) + 32|0);
    $80 = $78;
    $81 = $80;
    $82 = HEAP32[$81>>2]|0;
    $83 = (($80) + 4)|0;
    $84 = $83;
    $85 = HEAP32[$84>>2]|0;
    $86 = (_i64Add(($82|0),($85|0),1,0)|0);
    $87 = tempRet0;
    $88 = $78;
    $89 = $88;
    HEAP32[$89>>2] = $86;
    $90 = (($88) + 4)|0;
    $91 = $90;
    HEAP32[$91>>2] = $87;
   }
  }
  (_pthread_mutex_unlock(($66|0))|0);
  $92 = HEAP32[$63>>2]|0;
  $93 = ((($c)) + 4|0);
  HEAP32[$93>>2] = $92;
  $$pre$phi310Z2D = $93;$$pre$phi311Z2D = $63;$138 = $4060;
 }
 $94 = ((($c)) + 80|0);
 $95 = ((($c)) + 96|0);
 $96 = ((($c)) + 64|0);
 $97 = ((($fd)) + 34772|0);
 $98 = ((($c)) + 68|0);
 $99 = ((($c)) + 116|0);
 $100 = ((($c)) + 144|0);
 $101 = ((($c)) + 124|0);
 $102 = ((($c)) + 140|0);
 $103 = ((($c)) + 196|0);
 $r1$0 = 0;$sn$0 = 0;
 L29: while(1) {
  $104 = HEAP32[$94>>2]|0;
  $105 = ($r1$0|0)<($104|0);
  if (!($105)) {
   label = 116;
   break;
  }
  $106 = HEAP32[$95>>2]|0;
  $107 = (($106) + ($sn$0<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = HEAP32[$96>>2]|0;
  $110 = ($sn$0|0)<($109|0);
  if (!($110)) {
   label = 23;
   break;
  }
  $111 = ((($108)) + 24|0);
  $r2$0$i = 0;
  while(1) {
   $112 = HEAP32[$108>>2]|0;
   $113 = ((($112)) + 16|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = ($r2$0$i|0)<($114|0);
   if (!($115)) {
    break;
   }
   $116 = HEAP32[$111>>2]|0;
   $117 = (((($116) + (($r2$0$i*108)|0)|0)) + 12|0);
   HEAP32[$117>>2] = 0;
   $118 = (($r2$0$i) + 1)|0;
   $r2$0$i = $118;
  }
  $119 = HEAP32[$97>>2]|0;
  $120 = ($119|0)==(0);
  if ($120) {
   $first_base$0 = 2147483647;$last_base$0 = -2147483648;$r1$1 = $r1$0;$r2$0 = 0;
  } else {
   $121 = (_malloc(28)|0);
   $122 = ($121|0)==(0|0);
   if ($122) {
    $$0 = -1;
    label = 1164;
    break;
   }
   $123 = ((($121)) + -4|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $124 & 3;
   $126 = ($125|0)==(0);
   if (!($126)) {
    dest=$121; stop=dest+28|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   }
   $127 = ((($121)) + 8|0);
   $128 = ((($121)) + 12|0);
   $129 = ((($121)) + 16|0);
   $130 = ((($121)) + 24|0);
   $131 = ((($121)) + 20|0);
   $132 = ((($121)) + 4|0);
   $r1$0$i = $r1$0;$r2$1$i = 0;
   while(1) {
    $133 = HEAP32[$108>>2]|0;
    $134 = ((($133)) + 16|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ($r2$1$i|0)<($135|0);
    if (!($136)) {
     $304 = $135;$r1$1$i = $r1$0;$r2$2$i = 0;
     break;
    }
    $137 = HEAP32[$138>>2]|0;
    $139 = (($137) + ($r1$0$i<<2)|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ((($140)) + 8|0);
    $142 = $141;
    $143 = $142;
    $144 = HEAP32[$143>>2]|0;
    $145 = (($142) + 4)|0;
    $146 = $145;
    $147 = HEAP32[$146>>2]|0;
    $148 = $147 & 1;
    $149 = (($148) + 1)|0;
    $150 = (_bam_aux_get($140,84,67)|0);
    $151 = ($150|0)==(0|0);
    if ($151) {
     $164 = (_bam_aux_get($140,83,65)|0);
     $165 = ($164|0)==(0|0);
     $$ = $165 ? $149 : 2147483647;
     $expected$2$i$i = $$;
    } else {
     $152 = ((($150)) + 1|0);
     $153 = HEAP8[$150>>0]|0;
     switch ($153<<24>>24) {
     case 99:  {
      $154 = HEAP8[$152>>0]|0;
      $155 = $154 << 24 >> 24;
      $$0$i$i$i = $155;
      break;
     }
     case 67:  {
      $156 = HEAP8[$152>>0]|0;
      $157 = $156&255;
      $$0$i$i$i = $157;
      break;
     }
     case 115:  {
      $158 = HEAP16[$152>>1]|0;
      $159 = $158 << 16 >> 16;
      $$0$i$i$i = $159;
      break;
     }
     case 83:  {
      $160 = HEAP16[$152>>1]|0;
      $161 = $160&65535;
      $$0$i$i$i = $161;
      break;
     }
     case 73: case 105:  {
      $162 = HEAP32[$152>>2]|0;
      $$0$i$i$i = $162;
      break;
     }
     default: {
      $$0$i$i$i = 0;
     }
     }
     $163 = ($149|0)<($$0$i$i$i|0);
     $$0$i$i$i$ = $163 ? $$0$i$i$i : $149;
     $expected$2$i$i = $$0$i$i$i$;
    }
    $166 = ((($140)) + 40|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = HEAP32[$127>>2]|0;
    $169 = HEAP32[$128>>2]|0;
    $170 = ($168>>>0)<($169>>>0);
    do {
     if (!($170)) {
      $171 = HEAP32[$121>>2]|0;
      $172 = HEAP32[$132>>2]|0;
      $173 = $172 << 1;
      $174 = ($171>>>0)>($173>>>0);
      if ($174) {
       $175 = (($171) + -1)|0;
       $176 = (_kh_resize_m_s2u64($121,$175)|0);
       $177 = ($176|0)<(0);
       if ($177) {
        label = 1161;
        break L29;
       } else {
        break;
       }
      } else {
       $178 = (($171) + 1)|0;
       $179 = (_kh_resize_m_s2u64($121,$178)|0);
       $180 = ($179|0)<(0);
       if ($180) {
        label = 1162;
        break L29;
       } else {
        break;
       }
      }
     }
    } while(0);
    $181 = HEAP32[$121>>2]|0;
    $182 = (($181) + -1)|0;
    $183 = HEAP8[$167>>0]|0;
    $184 = $183 << 24 >> 24;
    $185 = ($183<<24>>24)==(0);
    L63: do {
     if ($185) {
      $h$1$i$i$i = $184;
     } else {
      $h$0$i$i$i = $184;$s$pn$i$i$i = $167;
      while(1) {
       $$0$i$i1$i = ((($s$pn$i$i$i)) + 1|0);
       $186 = HEAP8[$$0$i$i1$i>>0]|0;
       $187 = ($186<<24>>24)==(0);
       if ($187) {
        $h$1$i$i$i = $h$0$i$i$i;
        break L63;
       }
       $188 = ($h$0$i$i$i*31)|0;
       $189 = $186 << 24 >> 24;
       $190 = (($188) + ($189))|0;
       $h$0$i$i$i = $190;$s$pn$i$i$i = $$0$i$i1$i;
      }
     }
    } while(0);
    $191 = $h$1$i$i$i & $182;
    $192 = $191 >>> 4;
    $193 = HEAP32[$129>>2]|0;
    $194 = (($193) + ($192<<2)|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = $191 << 1;
    $197 = $196 & 30;
    $198 = 2 << $197;
    $199 = $195 & $198;
    $200 = ($199|0)==(0);
    do {
     if ($200) {
      $i$0$i$i = $191;$site$0$i$i = $181;$step$0$i$i = 0;
      while(1) {
       $201 = $i$0$i$i >>> 4;
       $202 = (($193) + ($201<<2)|0);
       $203 = HEAP32[$202>>2]|0;
       $204 = $i$0$i$i << 1;
       $205 = $204 & 30;
       $206 = 2 << $205;
       $207 = $203 & $206;
       $208 = ($207|0)==(0);
       if (!($208)) {
        $i$1$i$i470 = $i$0$i$i;$site$2$i$i471 = $site$0$i$i;
        break;
       }
       $209 = 1 << $205;
       $210 = $203 & $209;
       $211 = ($210|0)==(0);
       if ($211) {
        $212 = HEAP32[$131>>2]|0;
        $213 = (($212) + ($i$0$i$i<<2)|0);
        $214 = HEAP32[$213>>2]|0;
        $215 = HEAP8[$214>>0]|0;
        $216 = ($215<<24>>24)!=($183<<24>>24);
        $217 = ($215<<24>>24)==(0);
        $or$cond3$i$i$i = $217 | $216;
        if ($or$cond3$i$i$i) {
         $$lcssa$i$i$i = $215;$$lcssa2$i$i$i = $183;
        } else {
         $$014$i$i$i = $214;$$05$i$i$i = $167;
         while(1) {
          $218 = ((($$014$i$i$i)) + 1|0);
          $219 = ((($$05$i$i$i)) + 1|0);
          $220 = HEAP8[$218>>0]|0;
          $221 = HEAP8[$219>>0]|0;
          $222 = ($220<<24>>24)!=($221<<24>>24);
          $223 = ($220<<24>>24)==(0);
          $or$cond$i$i$i = $223 | $222;
          if ($or$cond$i$i$i) {
           $$lcssa$i$i$i = $220;$$lcssa2$i$i$i = $221;
           break;
          } else {
           $$014$i$i$i = $218;$$05$i$i$i = $219;
          }
         }
        }
        $224 = ($$lcssa$i$i$i<<24>>24)==($$lcssa2$i$i$i<<24>>24);
        if ($224) {
         $i$1$i$i470 = $i$0$i$i;$site$2$i$i471 = $site$0$i$i;
         break;
        }
       }
       $site$0$i$i$i$0$i$i = $211 ? $site$0$i$i : $i$0$i$i;
       $225 = (($step$0$i$i) + 1)|0;
       $226 = (($i$0$i$i) + ($225))|0;
       $227 = $226 & $182;
       $228 = ($227|0)==($191|0);
       if ($228) {
        $i$1$i$i = $191;$x$0$i$i = $site$0$i$i$i$0$i$i;
        label = 56;
        break;
       } else {
        $i$0$i$i = $227;$site$0$i$i = $site$0$i$i$i$0$i$i;$step$0$i$i = $225;
       }
      }
      if ((label|0) == 56) {
       label = 0;
       $229 = ($x$0$i$i|0)==($181|0);
       if ($229) {
        $i$1$i$i470 = $i$1$i$i;$site$2$i$i471 = $x$0$i$i;
       } else {
        $x$3$i$i = $x$0$i$i;
        break;
       }
      }
      $230 = $i$1$i$i470 >>> 4;
      $231 = (($193) + ($230<<2)|0);
      $232 = HEAP32[$231>>2]|0;
      $233 = $i$1$i$i470 << 1;
      $234 = $233 & 30;
      $235 = 2 << $234;
      $236 = $232 & $235;
      $237 = ($236|0)==(0);
      $238 = ($site$2$i$i471|0)==($181|0);
      $or$cond441 = $237 | $238;
      $i$1$i$i$site$2$i$i = $or$cond441 ? $i$1$i$i470 : $site$2$i$i471;
      $x$3$i$i = $i$1$i$i$site$2$i$i;
     } else {
      $x$3$i$i = $191;
     }
    } while(0);
    $239 = $x$3$i$i >>> 4;
    $240 = (($193) + ($239<<2)|0);
    $241 = HEAP32[$240>>2]|0;
    $242 = $x$3$i$i << 1;
    $243 = $242 & 30;
    $244 = 2 << $243;
    $245 = $241 & $244;
    $246 = ($245|0)==(0);
    do {
     if ($246) {
      $259 = 1 << $243;
      $260 = $241 & $259;
      $261 = ($260|0)==(0);
      if (!($261)) {
       $262 = HEAP32[$131>>2]|0;
       $263 = (($262) + ($x$3$i$i<<2)|0);
       HEAP32[$263>>2] = $167;
       $264 = 3 << $243;
       $265 = $264 ^ -1;
       $266 = HEAP32[$129>>2]|0;
       $267 = (($266) + ($239<<2)|0);
       $268 = HEAP32[$267>>2]|0;
       $269 = $268 & $265;
       HEAP32[$267>>2] = $269;
       $270 = HEAP32[$132>>2]|0;
       $271 = (($270) + 1)|0;
       HEAP32[$132>>2] = $271;
       label = 67;
       break;
      }
      $272 = HEAP32[$130>>2]|0;
      $273 = (($272) + ($x$3$i$i<<3)|0);
      $274 = $273;
      $275 = $274;
      $276 = HEAP32[$275>>2]|0;
      $277 = (($274) + 4)|0;
      $278 = $277;
      $279 = HEAP32[$278>>2]|0;
      $280 = ($276|0)==($expected$2$i$i|0);
      if (!($280)) {
       $281 = $273;
       $282 = $281;
       HEAP32[$282>>2] = 0;
       $283 = (($281) + 4)|0;
       $284 = $283;
       HEAP32[$284>>2] = 0;
       break;
      }
      $285 = (($279) + 1)|0;
      $286 = ($expected$2$i$i|0)==($285|0);
      if ($286) {
       $287 = $273;
       $288 = $287;
       HEAP32[$288>>2] = -1;
       $289 = (($287) + 4)|0;
       $290 = $289;
       HEAP32[$290>>2] = -1;
       break;
      } else {
       $291 = $273;
       $292 = $291;
       HEAP32[$292>>2] = $expected$2$i$i;
       $293 = (($291) + 4)|0;
       $294 = $293;
       HEAP32[$294>>2] = $285;
       break;
      }
     } else {
      $247 = HEAP32[$131>>2]|0;
      $248 = (($247) + ($x$3$i$i<<2)|0);
      HEAP32[$248>>2] = $167;
      $249 = 3 << $243;
      $250 = $249 ^ -1;
      $251 = HEAP32[$129>>2]|0;
      $252 = (($251) + ($239<<2)|0);
      $253 = HEAP32[$252>>2]|0;
      $254 = $253 & $250;
      HEAP32[$252>>2] = $254;
      $255 = HEAP32[$132>>2]|0;
      $256 = (($255) + 1)|0;
      HEAP32[$132>>2] = $256;
      $257 = HEAP32[$127>>2]|0;
      $258 = (($257) + 1)|0;
      HEAP32[$127>>2] = $258;
      label = 67;
     }
    } while(0);
    if ((label|0) == 67) {
     label = 0;
     $295 = HEAP32[$130>>2]|0;
     $296 = (($295) + ($x$3$i$i<<3)|0);
     $297 = $296;
     $298 = $297;
     HEAP32[$298>>2] = $expected$2$i$i;
     $299 = (($297) + 4)|0;
     $300 = $299;
     HEAP32[$300>>2] = 1;
    }
    $301 = (($r1$0$i) + 1)|0;
    $302 = (($r2$1$i) + 1)|0;
    $r1$0$i = $301;$r2$1$i = $302;
   }
   while(1) {
    $303 = ($r2$2$i|0)<($304|0);
    if (!($303)) {
     break;
    }
    $305 = HEAP32[$111>>2]|0;
    $306 = HEAP32[$138>>2]|0;
    $307 = (($306) + ($r1$1$i<<2)|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = ((($308)) + 40|0);
    $310 = HEAP32[$309>>2]|0;
    $311 = HEAP32[$121>>2]|0;
    $312 = ($311|0)==(0);
    if ($312) {
     $$0$i19$i = 0;
    } else {
     $313 = (($311) + -1)|0;
     $314 = HEAP8[$310>>0]|0;
     $315 = $314 << 24 >> 24;
     $316 = ($314<<24>>24)==(0);
     L103: do {
      if ($316) {
       $h$1$i$i5$i = $315;
      } else {
       $h$0$i$i2$i = $315;$s$pn$i$i3$i = $310;
       while(1) {
        $$0$i$i4$i = ((($s$pn$i$i3$i)) + 1|0);
        $317 = HEAP8[$$0$i$i4$i>>0]|0;
        $318 = ($317<<24>>24)==(0);
        if ($318) {
         $h$1$i$i5$i = $h$0$i$i2$i;
         break L103;
        }
        $319 = ($h$0$i$i2$i*31)|0;
        $320 = $317 << 24 >> 24;
        $321 = (($319) + ($320))|0;
        $h$0$i$i2$i = $321;$s$pn$i$i3$i = $$0$i$i4$i;
       }
      }
     } while(0);
     $322 = $h$1$i$i5$i & $313;
     $323 = HEAP32[$129>>2]|0;
     $i$0$i7$i = $322;$step$0$i8$i = 0;
     while(1) {
      $324 = $i$0$i7$i >>> 4;
      $325 = (($323) + ($324<<2)|0);
      $326 = HEAP32[$325>>2]|0;
      $327 = $i$0$i7$i << 1;
      $328 = $327 & 30;
      $329 = 2 << $328;
      $330 = $326 & $329;
      $331 = ($330|0)==(0);
      if (!($331)) {
       break;
      }
      $332 = 1 << $328;
      $333 = $326 & $332;
      $334 = ($333|0)==(0);
      if ($334) {
       $335 = HEAP32[$131>>2]|0;
       $336 = (($335) + ($i$0$i7$i<<2)|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = HEAP8[$337>>0]|0;
       $339 = ($338<<24>>24)!=($314<<24>>24);
       $340 = ($338<<24>>24)==(0);
       $or$cond3$i$i9$i = $340 | $339;
       if ($or$cond3$i$i9$i) {
        $$lcssa$i$i17$i = $338;$$lcssa2$i$i16$i = $314;
       } else {
        $$014$i$i12$i = $337;$$05$i$i11$i = $310;
        while(1) {
         $341 = ((($$014$i$i12$i)) + 1|0);
         $342 = ((($$05$i$i11$i)) + 1|0);
         $343 = HEAP8[$341>>0]|0;
         $344 = HEAP8[$342>>0]|0;
         $345 = ($343<<24>>24)!=($344<<24>>24);
         $346 = ($343<<24>>24)==(0);
         $or$cond$i$i13$i = $346 | $345;
         if ($or$cond$i$i13$i) {
          $$lcssa$i$i17$i = $343;$$lcssa2$i$i16$i = $344;
          break;
         } else {
          $$014$i$i12$i = $341;$$05$i$i11$i = $342;
         }
        }
       }
       $347 = ($$lcssa$i$i17$i<<24>>24)==($$lcssa2$i$i16$i<<24>>24);
       if ($347) {
        break;
       }
      }
      $348 = (($step$0$i8$i) + 1)|0;
      $349 = (($i$0$i7$i) + ($348))|0;
      $350 = $349 & $313;
      $351 = ($350|0)==($322|0);
      if ($351) {
       label = 86;
       break L29;
      } else {
       $i$0$i7$i = $350;$step$0$i8$i = $348;
      }
     }
     $352 = 3 << $328;
     $353 = $326 & $352;
     $354 = ($353|0)==(0);
     $i$0$i7$i$ = $354 ? $i$0$i7$i : $311;
     $$0$i19$i = $i$0$i7$i$;
    }
    $355 = ($$0$i19$i|0)==($311|0);
    if ($355) {
     label = 1163;
     break L29;
    }
    $356 = HEAP32[$130>>2]|0;
    $357 = (($356) + ($$0$i19$i<<3)|0);
    $358 = $357;
    $359 = $358;
    $360 = HEAP32[$359>>2]|0;
    $361 = (($358) + 4)|0;
    $362 = $361;
    $363 = HEAP32[$362>>2]|0;
    $364 = ($360|0)==(-1);
    $365 = ($363|0)==(-1);
    $366 = $364 & $365;
    if ($366) {
     $367 = (((($305) + (($r2$2$i*108)|0)|0)) + 12|0);
     HEAP32[$367>>2] = -2147483648;
     $$pre303$pre = HEAP32[$108>>2]|0;
     $$phi$trans$insert304$phi$trans$insert = ((($$pre303$pre)) + 16|0);
     $$pre305$pre = HEAP32[$$phi$trans$insert304$phi$trans$insert>>2]|0;
     $$pre305 = $$pre305$pre;
    } else {
     $$pre305 = $304;
    }
    $368 = (($r1$1$i) + 1)|0;
    $369 = (($r2$2$i) + 1)|0;
    $304 = $$pre305;$r1$1$i = $368;$r2$2$i = $369;
   }
   $373 = HEAP32[$131>>2]|0;
   _free($373);
   $374 = HEAP32[$129>>2]|0;
   _free($374);
   $375 = HEAP32[$130>>2]|0;
   _free($375);
   _free($121);
   $first_base$0 = 2147483647;$last_base$0 = -2147483648;$r1$1 = $r1$0;$r2$0 = 0;
  }
  while(1) {
   $376 = HEAP32[$94>>2]|0;
   $377 = ($r1$1|0)<($376|0);
   if (!($377)) {
    break;
   }
   $378 = HEAP32[$98>>2]|0;
   $379 = ($r2$0|0)<($378|0);
   if (!($379)) {
    break;
   }
   $380 = HEAP32[$111>>2]|0;
   $381 = (($380) + (($r2$0*108)|0)|0);
   $382 = HEAP32[$138>>2]|0;
   $383 = (($382) + ($r1$1<<2)|0);
   $384 = HEAP32[$383>>2]|0;
   $385 = HEAP32[$99>>2]|0;
   $386 = ($385|0)==(0);
   if (!($386)) {
    $387 = HEAP32[$7>>2]|0;
    $388 = ($387|0)==(0);
    if ($388) {
     $389 = HEAP32[$384>>2]|0;
     $390 = HEAP32[$$pre$phi310Z2D>>2]|0;
     $391 = ($389|0)!=($390|0);
     $392 = ($389|0)>(-1);
     $or$cond442 = $391 & $392;
     if ($or$cond442) {
      $393 = ($390|0)>(-1);
      if ($393) {
       $394 = HEAP32[$3>>2]|0;
       _cram_ref_decr($394,$390);
       $$pre309 = HEAP32[$384>>2]|0;
       $395 = $$pre309;
      } else {
       $395 = $389;
      }
      $396 = (_cram_get_ref($fd,$395,1,0)|0);
      $397 = ($396|0)==(0|0);
      $398 = HEAP32[$384>>2]|0;
      if ($397) {
       label = 96;
       break L29;
      }
      HEAP32[$$pre$phi310Z2D>>2] = $398;
      $399 = HEAP32[$3>>2]|0;
      $400 = ((($399)) + 8|0);
      $401 = HEAP32[$400>>2]|0;
      $402 = (($401) + ($398<<2)|0);
      $403 = HEAP32[$402>>2]|0;
      $404 = ((($403)) + 40|0);
      $405 = HEAP32[$404>>2]|0;
      $406 = ($405|0)==(0|0);
      if ($406) {
       label = 98;
       break L29;
      }
      $407 = $405;
      HEAP32[$100>>2] = $407;
      HEAP32[$101>>2] = 1;
      $408 = HEAP32[$3>>2]|0;
      $409 = ((($408)) + 8|0);
      $410 = HEAP32[$409>>2]|0;
      $411 = (($410) + ($398<<2)|0);
      $412 = HEAP32[$411>>2]|0;
      $413 = ((($412)) + 8|0);
      $414 = $413;
      $415 = $414;
      $416 = HEAP32[$415>>2]|0;
      $417 = (($414) + 4)|0;
      $418 = $417;
      $419 = HEAP32[$418>>2]|0;
      HEAP32[$102>>2] = $416;
     }
    }
   }
   $420 = (_process_one_read($fd,$c,$108,$381,$384,$r2$0)|0);
   $421 = ($420|0)==(0);
   if (!($421)) {
    $$0 = -1;
    label = 1164;
    break L29;
   }
   $422 = (((($380) + (($r2$0*108)|0)|0)) + 20|0);
   $423 = HEAP32[$422>>2]|0;
   $424 = ($first_base$0|0)>($423|0);
   $$first_base$0 = $424 ? $423 : $first_base$0;
   $425 = (((($380) + (($r2$0*108)|0)|0)) + 88|0);
   $426 = HEAP32[$425>>2]|0;
   $427 = ($last_base$0|0)<($426|0);
   $last_base$1 = $427 ? $426 : $last_base$0;
   $428 = (($r1$1) + 1)|0;
   $429 = (($r2$0) + 1)|0;
   $first_base$0 = $$first_base$0;$last_base$0 = $last_base$1;$r1$1 = $428;$r2$0 = $429;
  }
  $430 = HEAP32[$97>>2]|0;
  $431 = ($430|0)==(0);
  $432 = ((($108)) + 64|0);
  $434 = $376;$r1$0$i4 = $r1$0;$r2$0$i5 = 0;
  while(1) {
   $433 = ($r1$0$i4|0)<($434|0);
   if (!($433)) {
    break;
   }
   $435 = HEAP32[$108>>2]|0;
   $436 = ((($435)) + 16|0);
   $437 = HEAP32[$436>>2]|0;
   $438 = ($r2$0$i5|0)<($437|0);
   if (!($438)) {
    break;
   }
   $439 = HEAP32[$111>>2]|0;
   $440 = HEAP32[$138>>2]|0;
   $441 = (($440) + ($r1$0$i4<<2)|0);
   $442 = HEAP32[$441>>2]|0;
   $443 = HEAP32[$432>>2]|0;
   $444 = ((($443)) + 40|0);
   $445 = HEAP32[$444>>2]|0;
   $446 = (((($439) + (($r2$0$i5*108)|0)|0)) + 28|0);
   HEAP32[$446>>2] = $445;
   $447 = (((($439) + (($r2$0$i5*108)|0)|0)) + 12|0);
   $448 = HEAP32[$447>>2]|0;
   $449 = $448 & 2;
   $$not = ($449|0)!=(0);
   $brmerge = $$not | $431;
   if ($brmerge) {
    $450 = ((($442)) + 8|0);
    while(1) {
     $451 = HEAP32[$432>>2]|0;
     $452 = ((($451)) + 36|0);
     $453 = HEAP32[$452>>2]|0;
     $454 = ((($451)) + 40|0);
     $455 = HEAP32[$454>>2]|0;
     $456 = $450;
     $457 = $456;
     $458 = HEAP32[$457>>2]|0;
     $459 = (($456) + 4)|0;
     $460 = $459;
     $461 = HEAP32[$460>>2]|0;
     $462 = (_bitshift64Lshr(($458|0),($461|0),24)|0);
     $463 = tempRet0;
     $464 = $462 & 255;
     $465 = (($455) + ($464))|0;
     $466 = ($453>>>0)>($465>>>0);
     if ($466) {
      break;
     }
     $467 = ($453|0)==(0);
     $468 = (+($453>>>0));
     $469 = $468 * 1.5;
     $470 = (~~(($469))>>>0);
     $471 = $467 ? 1024 : $470;
     HEAP32[$452>>2] = $471;
     $472 = HEAP32[$432>>2]|0;
     $473 = ((($472)) + 32|0);
     $474 = HEAP32[$473>>2]|0;
     $475 = ((($472)) + 36|0);
     $476 = HEAP32[$475>>2]|0;
     $477 = (_realloc($474,$476)|0);
     $478 = HEAP32[$432>>2]|0;
     $479 = ((($478)) + 32|0);
     HEAP32[$479>>2] = $477;
    }
    $480 = ((($451)) + 32|0);
    $481 = HEAP32[$480>>2]|0;
    $482 = (($481) + ($455)|0);
    $483 = ((($442)) + 40|0);
    $484 = HEAP32[$483>>2]|0;
    _memcpy(($482|0),($484|0),($464|0))|0;
    $485 = $450;
    $486 = $485;
    $487 = HEAP32[$486>>2]|0;
    $488 = (($485) + 4)|0;
    $489 = $488;
    $490 = HEAP32[$489>>2]|0;
    $491 = (_bitshift64Lshr(($487|0),($490|0),24)|0);
    $492 = tempRet0;
    $493 = $491 & 255;
    $494 = HEAP32[$432>>2]|0;
    $495 = ((($494)) + 40|0);
    $496 = HEAP32[$495>>2]|0;
    $497 = (($496) + ($493))|0;
    HEAP32[$495>>2] = $497;
    $498 = $450;
    $499 = $498;
    $500 = HEAP32[$499>>2]|0;
    $501 = (($498) + 4)|0;
    $502 = $501;
    $503 = HEAP32[$502>>2]|0;
    $504 = (_bitshift64Lshr(($500|0),($503|0),24)|0);
    $505 = tempRet0;
    $506 = $504 & 255;
    $507 = (((($439) + (($r2$0$i5*108)|0)|0)) + 32|0);
    HEAP32[$507>>2] = $506;
    $510 = $506;
   } else {
    $508 = (((($439) + (($r2$0$i5*108)|0)|0)) + 32|0);
    HEAP32[$508>>2] = 0;
    $510 = 0;
   }
   $509 = HEAP32[$103>>2]|0;
   _cram_stats_add($509,$510);
   $511 = (($r1$0$i4) + 1)|0;
   $512 = (($r2$0$i5) + 1)|0;
   $$pre308 = HEAP32[$94>>2]|0;
   $434 = $$pre308;$r1$0$i4 = $511;$r2$0$i5 = $512;
  }
  $513 = HEAP32[$99>>2]|0;
  $514 = ($513|0)==(0);
  if ($514) {
   $521 = HEAP32[$$pre$phi311Z2D>>2]|0;
   $522 = HEAP32[$108>>2]|0;
   $523 = ((($522)) + 4|0);
   HEAP32[$523>>2] = $521;
   $524 = HEAP32[$108>>2]|0;
   $525 = ((($524)) + 8|0);
   HEAP32[$525>>2] = $first_base$0;
   $526 = (($last_base$0) - ($first_base$0))|0;
   $527 = ($526|0)<(-1);
   $528 = (($526) + 1)|0;
   $$443 = $527 ? 0 : $528;
   $529 = HEAP32[$108>>2]|0;
   $530 = ((($529)) + 12|0);
   HEAP32[$530>>2] = $$443;
  } else {
   $515 = HEAP32[$108>>2]|0;
   $516 = ((($515)) + 4|0);
   HEAP32[$516>>2] = -2;
   $517 = HEAP32[$108>>2]|0;
   $518 = ((($517)) + 8|0);
   HEAP32[$518>>2] = 0;
   $519 = HEAP32[$108>>2]|0;
   $520 = ((($519)) + 12|0);
   HEAP32[$520>>2] = 0;
  }
  $531 = HEAP32[$108>>2]|0;
  $532 = ((($531)) + 16|0);
  HEAP32[$532>>2] = $r2$0;
  $533 = (($sn$0) + 1)|0;
  $r1$0 = $r1$1;$sn$0 = $533;
 }
 if ((label|0) == 23) {
  ___assert_fail((18074|0),(18000|0),1431,(18093|0));
  // unreachable;
 }
 else if ((label|0) == 86) {
  $370 = HEAP32[$131>>2]|0;
  _free($370);
  $371 = HEAP32[$129>>2]|0;
  _free($371);
  $372 = HEAP32[$130>>2]|0;
  _free($372);
  _free($121);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 96) {
  HEAP32[$vararg_buffer1>>2] = $398;
  _fprintf(9772,18044,$vararg_buffer1);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 98) {
  ___assert_fail((18115|0),(18000|0),1457,(18093|0));
  // unreachable;
 }
 else if ((label|0) == 116) {
  $534 = HEAP32[$99>>2]|0;
  $535 = ($534|0)==(0);
  if (!($535)) {
   $536 = HEAP32[$7>>2]|0;
   $537 = ($536|0)==(0);
   if ($537) {
    $538 = HEAP32[$$pre$phi310Z2D>>2]|0;
    $539 = ($538|0)>(-1);
    if ($539) {
     $540 = HEAP32[$3>>2]|0;
     _cram_ref_decr($540,$538);
    }
   }
  }
  $541 = (_malloc(8)|0);
  $542 = ((($fd)) + 34736|0);
  (_pthread_mutex_lock(($542|0))|0);
  $543 = HEAP32[$138>>2]|0;
  HEAP32[$541>>2] = $543;
  $544 = ((($fd)) + 34732|0);
  $545 = HEAP32[$544>>2]|0;
  $546 = ((($541)) + 4|0);
  HEAP32[$546>>2] = $545;
  HEAP32[$544>>2] = $541;
  (_pthread_mutex_unlock(($542|0))|0);
  HEAP32[$138>>2] = 0;
  $547 = ((($c)) + 284|0);
  $548 = HEAP32[$547>>2]|0;
  (_cram_stats_encoding($548)|0);
  $549 = HEAP32[$547>>2]|0;
  $550 = ((($549)) + 4104|0);
  $551 = HEAP32[$550>>2]|0;
  $552 = ($551|0)>(1);
  if ($552) {
   $553 = ((($fd)) + 272|0);
   $554 = HEAP32[$553>>2]|0;
   $555 = ($554|0)==(0);
   if (!($555)) {
    _fprintf(9772,18400,$vararg_buffer4);
   }
   HEAP32[$$pre$phi310Z2D>>2] = -2;
   $556 = ((($c)) + 8|0);
   HEAP32[$556>>2] = 0;
   $557 = ((($c)) + 12|0);
   HEAP32[$557>>2] = 0;
  }
  $558 = ((($fd)) + 8|0);
  $i$1 = 0;
  L171: while(1) {
   $559 = HEAP32[$96>>2]|0;
   $560 = ($i$1|0)<($559|0);
   if (!($560)) {
    break;
   }
   $561 = HEAP32[$558>>2]|0;
   $$mask3 = $561 & -256;
   $562 = ($$mask3|0)==(256);
   do {
    if (!($562)) {
     $563 = HEAP32[$95>>2]|0;
     $564 = (($563) + ($i$1<<2)|0);
     $565 = HEAP32[$564>>2]|0;
     $566 = HEAP32[$565>>2]|0;
     $567 = ((($566)) + 4|0);
     $568 = HEAP32[$567>>2]|0;
     $569 = ($568|0)>(-1);
     if ($569) {
      $570 = HEAP32[$99>>2]|0;
      $571 = ($570|0)==(0);
      if ($571) {
       $572 = HEAP32[$7>>2]|0;
       $573 = ($572|0)==(0);
       if ($573) {
        $574 = (_malloc(152)|0);
        $575 = ($574|0)==(0|0);
        if ($575) {
         $$0 = -1;
         label = 1164;
         break L171;
        }
        $576 = ((($574)) + 8|0);
        HEAP32[$576>>2] = 1732584193;
        $577 = ((($574)) + 12|0);
        HEAP32[$577>>2] = -271733879;
        $578 = ((($574)) + 16|0);
        HEAP32[$578>>2] = -1732584194;
        $579 = ((($574)) + 20|0);
        HEAP32[$579>>2] = 271733878;
        HEAP32[$574>>2] = 0;
        $580 = ((($574)) + 4|0);
        HEAP32[$580>>2] = 0;
        $581 = HEAP32[$100>>2]|0;
        $582 = HEAP32[$565>>2]|0;
        $583 = ((($582)) + 8|0);
        $584 = HEAP32[$583>>2]|0;
        $585 = (($581) + ($584)|0);
        $586 = HEAP32[$101>>2]|0;
        $587 = (0 - ($586))|0;
        $588 = (($585) + ($587)|0);
        $589 = ((($582)) + 12|0);
        $590 = HEAP32[$589>>2]|0;
        $591 = $590 & 536870911;
        HEAP32[$574>>2] = $591;
        $$pre315 = ((($574)) + 4|0);
        $592 = $590 >>> 29;
        HEAP32[$$pre315>>2] = $592;
        $593 = ($590>>>0)>(63);
        if ($593) {
         $594 = $590 & -64;
         $595 = (_body($574,$588,$594)|0);
         $596 = $590 & 63;
         $$1$i = $596;$$12$i = $595;
        } else {
         $$1$i = $590;$$12$i = $588;
        }
        $597 = ((($574)) + 24|0);
        _memcpy(($597|0),($$12$i|0),($$1$i|0))|0;
        $$pre302 = HEAP32[$565>>2]|0;
        $598 = ((($$pre302)) + 48|0);
        _hts_md5_final($598,$574);
        _free($574);
        break;
       }
      }
     }
     $599 = ((($566)) + 48|0);
     ;HEAP32[$599>>2]=0|0;HEAP32[$599+4>>2]=0|0;HEAP32[$599+8>>2]=0|0;HEAP32[$599+12>>2]=0|0;
    }
   } while(0);
   $600 = (($i$1) + 1)|0;
   $i$1 = $600;
  }
  if ((label|0) == 1164) {
   STACKTOP = sp;return ($$0|0);
  }
  $601 = ((($c)) + 32|0);
  HEAP32[$601>>2] = 0;
  $602 = ((($c)) + 36|0);
  HEAP32[$602>>2] = 1;
  HEAP32[$c>>2] = 0;
  $603 = ((($c)) + 212|0);
  $604 = HEAP32[$603>>2]|0;
  $605 = (_cram_stats_encoding($604)|0);
  $606 = HEAP32[$603>>2]|0;
  $607 = HEAP32[$558>>2]|0;
  $608 = ($606|0)==(0|0);
  if ($608) {
   label = 138;
  } else {
   $609 = ((($606)) + 4104|0);
   $610 = HEAP32[$609>>2]|0;
   $611 = ($610|0)==(0);
   if ($611) {
    $$0$i9 = 0;
   } else {
    label = 138;
   }
  }
  do {
   if ((label|0) == 138) {
    $612 = 122 >>> $605;
    $613 = $612 & 1;
    $614 = ($613|0)==(0);
    if (!($614)) {
     $615 = (608 + ($605<<2)|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = (FUNCTION_TABLE_iiiii[$616 & 127]($606,1,0,$607)|0);
     $618 = ($617|0)==(0|0);
     if ($618) {
      $$0$i9 = 0;
      break;
     }
     $619 = ((($617)) + 4|0);
     HEAP32[$619>>2] = 0;
     $$0$i9 = $617;
     break;
    }
    do {
     switch ($605|0) {
     case 1:  {
      $$0$i$i8 = 22604;
      HEAP32[$vararg_buffer6>>2] = $$0$i$i8;
      _fprintf(9772,22691,$vararg_buffer6);
      _abort();
      // unreachable;
      break;
     }
     case 2:  {
      $$0$i$i8 = 22613;
      HEAP32[$vararg_buffer6>>2] = $$0$i$i8;
      _fprintf(9772,22691,$vararg_buffer6);
      _abort();
      // unreachable;
      break;
     }
     case 3:  {
      $$0$i$i8 = 22620;
      HEAP32[$vararg_buffer6>>2] = $$0$i$i8;
      _fprintf(9772,22691,$vararg_buffer6);
      _abort();
      // unreachable;
      break;
     }
     case 4:  {
      $$0$i$i8 = 22628;
      HEAP32[$vararg_buffer6>>2] = $$0$i$i8;
      _fprintf(9772,22691,$vararg_buffer6);
      _abort();
      // unreachable;
      break;
     }
     case 5:  {
      $$0$i$i8 = 22643;
      HEAP32[$vararg_buffer6>>2] = $$0$i$i8;
      _fprintf(9772,22691,$vararg_buffer6);
      _abort();
      // unreachable;
      break;
     }
     case 6:  {
      $$0$i$i8 = 22659;
      HEAP32[$vararg_buffer6>>2] = $$0$i$i8;
      _fprintf(9772,22691,$vararg_buffer6);
      _abort();
      // unreachable;
      break;
     }
     case 7:  {
      $$0$i$i8 = 22664;
      HEAP32[$vararg_buffer6>>2] = $$0$i$i8;
      _fprintf(9772,22691,$vararg_buffer6);
      _abort();
      // unreachable;
      break;
     }
     case 8:  {
      $$0$i$i8 = 22671;
      HEAP32[$vararg_buffer6>>2] = $$0$i$i8;
      _fprintf(9772,22691,$vararg_buffer6);
      _abort();
      // unreachable;
      break;
     }
     case 9:  {
      $$0$i$i8 = 22683;
      HEAP32[$vararg_buffer6>>2] = $$0$i$i8;
      _fprintf(9772,22691,$vararg_buffer6);
      _abort();
      // unreachable;
      break;
     }
     case 0:  {
      $$0$i$i8 = 22599;
      HEAP32[$vararg_buffer6>>2] = $$0$i$i8;
      _fprintf(9772,22691,$vararg_buffer6);
      _abort();
      // unreachable;
      break;
     }
     default: {
      $$0$i$i8 = 22689;
      HEAP32[$vararg_buffer6>>2] = $$0$i$i8;
      _fprintf(9772,22691,$vararg_buffer6);
      _abort();
      // unreachable;
     }
     }
    } while(0);
   }
  } while(0);
  $620 = ((($1)) + 408|0);
  HEAP32[$620>>2] = $$0$i9;
  $621 = ((($c)) + 216|0);
  $622 = HEAP32[$621>>2]|0;
  $623 = (_cram_stats_encoding($622)|0);
  $624 = HEAP32[$621>>2]|0;
  $625 = HEAP32[$558>>2]|0;
  $626 = ($624|0)==(0|0);
  if ($626) {
   label = 155;
  } else {
   $627 = ((($624)) + 4104|0);
   $628 = HEAP32[$627>>2]|0;
   $629 = ($628|0)==(0);
   if ($629) {
    $$0$i12 = 0;
   } else {
    label = 155;
   }
  }
  do {
   if ((label|0) == 155) {
    $630 = 122 >>> $623;
    $631 = $630 & 1;
    $632 = ($631|0)==(0);
    if (!($632)) {
     $633 = (608 + ($623<<2)|0);
     $634 = HEAP32[$633>>2]|0;
     $635 = (FUNCTION_TABLE_iiiii[$634 & 127]($624,1,0,$625)|0);
     $636 = ($635|0)==(0|0);
     if ($636) {
      $$0$i12 = 0;
      break;
     }
     $637 = ((($635)) + 4|0);
     HEAP32[$637>>2] = 0;
     $$0$i12 = $635;
     break;
    }
    do {
     switch ($623|0) {
     case 1:  {
      $$0$i$i10 = 22604;
      HEAP32[$vararg_buffer9>>2] = $$0$i$i10;
      _fprintf(9772,22691,$vararg_buffer9);
      _abort();
      // unreachable;
      break;
     }
     case 2:  {
      $$0$i$i10 = 22613;
      HEAP32[$vararg_buffer9>>2] = $$0$i$i10;
      _fprintf(9772,22691,$vararg_buffer9);
      _abort();
      // unreachable;
      break;
     }
     case 3:  {
      $$0$i$i10 = 22620;
      HEAP32[$vararg_buffer9>>2] = $$0$i$i10;
      _fprintf(9772,22691,$vararg_buffer9);
      _abort();
      // unreachable;
      break;
     }
     case 4:  {
      $$0$i$i10 = 22628;
      HEAP32[$vararg_buffer9>>2] = $$0$i$i10;
      _fprintf(9772,22691,$vararg_buffer9);
      _abort();
      // unreachable;
      break;
     }
     case 5:  {
      $$0$i$i10 = 22643;
      HEAP32[$vararg_buffer9>>2] = $$0$i$i10;
      _fprintf(9772,22691,$vararg_buffer9);
      _abort();
      // unreachable;
      break;
     }
     case 6:  {
      $$0$i$i10 = 22659;
      HEAP32[$vararg_buffer9>>2] = $$0$i$i10;
      _fprintf(9772,22691,$vararg_buffer9);
      _abort();
      // unreachable;
      break;
     }
     case 7:  {
      $$0$i$i10 = 22664;
      HEAP32[$vararg_buffer9>>2] = $$0$i$i10;
      _fprintf(9772,22691,$vararg_buffer9);
      _abort();
      // unreachable;
      break;
     }
     case 8:  {
      $$0$i$i10 = 22671;
      HEAP32[$vararg_buffer9>>2] = $$0$i$i10;
      _fprintf(9772,22691,$vararg_buffer9);
      _abort();
      // unreachable;
      break;
     }
     case 9:  {
      $$0$i$i10 = 22683;
      HEAP32[$vararg_buffer9>>2] = $$0$i$i10;
      _fprintf(9772,22691,$vararg_buffer9);
      _abort();
      // unreachable;
      break;
     }
     case 0:  {
      $$0$i$i10 = 22599;
      HEAP32[$vararg_buffer9>>2] = $$0$i$i10;
      _fprintf(9772,22691,$vararg_buffer9);
      _abort();
      // unreachable;
      break;
     }
     default: {
      $$0$i$i10 = 22689;
      HEAP32[$vararg_buffer9>>2] = $$0$i$i10;
      _fprintf(9772,22691,$vararg_buffer9);
      _abort();
      // unreachable;
     }
     }
    } while(0);
   }
  } while(0);
  $638 = ((($1)) + 412|0);
  HEAP32[$638>>2] = $$0$i12;
  $639 = ((($c)) + 104|0);
  $640 = HEAP32[$639>>2]|0;
  $641 = ($640|0)==(0);
  if ($641) {
   $660 = ((($c)) + 108|0);
   $661 = HEAP32[$660>>2]|0;
   $662 = (_malloc(548)|0);
   $663 = ($662|0)==(0|0);
   if ($663) {
    $$0$i20151 = 0;
   } else {
    HEAP32[$662>>2] = 6;
    $664 = ((($662)) + 8|0);
    HEAP32[$664>>2] = 61;
    $665 = ((($662)) + 16|0);
    HEAP32[$665>>2] = 62;
    $666 = ((($662)) + 20|0);
    HEAP32[$666>>2] = 63;
    $667 = ($661|0)<(0);
    if ($667) {
     ___assert_fail((22198|0),(22217|0),648,(22236|0));
     // unreachable;
    }
    $668 = ((($662)) + 24|0);
    HEAP32[$668>>2] = 0;
    $len$0$i = 0;$max_val$7$i = $661;
    while(1) {
     $669 = ($max_val$7$i|0)==(0);
     if ($669) {
      break;
     }
     $670 = (($len$0$i) + 1)|0;
     $671 = $max_val$7$i >> 1;
     $len$0$i = $670;$max_val$7$i = $671;
    }
    $672 = ((($662)) + 28|0);
    HEAP32[$672>>2] = $len$0$i;
    $673 = ($662|0)==(0|0);
    if ($673) {
     $$0$i20151 = 0;
    } else {
     $674 = ((($662)) + 4|0);
     HEAP32[$674>>2] = 0;
     $$0$i20151 = $662;
    }
   }
   $675 = ((($1)) + 416|0);
   HEAP32[$675>>2] = $$0$i20151;
  } else {
   $642 = ((($c)) + 220|0);
   $643 = HEAP32[$642>>2]|0;
   $644 = (_cram_stats_encoding($643)|0);
   $645 = HEAP32[$642>>2]|0;
   $646 = HEAP32[$558>>2]|0;
   $647 = ($645|0)==(0|0);
   if ($647) {
    label = 173;
   } else {
    $648 = ((($645)) + 4104|0);
    $649 = HEAP32[$648>>2]|0;
    $650 = ($649|0)==(0);
    if ($650) {
     $$0$i16 = 0;
    } else {
     label = 173;
    }
   }
   do {
    if ((label|0) == 173) {
     $651 = 122 >>> $644;
     $652 = $651 & 1;
     $653 = ($652|0)==(0);
     if (!($653)) {
      $654 = (608 + ($644<<2)|0);
      $655 = HEAP32[$654>>2]|0;
      $656 = (FUNCTION_TABLE_iiiii[$655 & 127]($645,1,0,$646)|0);
      $657 = ($656|0)==(0|0);
      if ($657) {
       $$0$i16 = 0;
       break;
      }
      $658 = ((($656)) + 4|0);
      HEAP32[$658>>2] = 0;
      $$0$i16 = $656;
      break;
     }
     do {
      switch ($644|0) {
      case 1:  {
       $$0$i$i14 = 22604;
       HEAP32[$vararg_buffer12>>2] = $$0$i$i14;
       _fprintf(9772,22691,$vararg_buffer12);
       _abort();
       // unreachable;
       break;
      }
      case 2:  {
       $$0$i$i14 = 22613;
       HEAP32[$vararg_buffer12>>2] = $$0$i$i14;
       _fprintf(9772,22691,$vararg_buffer12);
       _abort();
       // unreachable;
       break;
      }
      case 3:  {
       $$0$i$i14 = 22620;
       HEAP32[$vararg_buffer12>>2] = $$0$i$i14;
       _fprintf(9772,22691,$vararg_buffer12);
       _abort();
       // unreachable;
       break;
      }
      case 4:  {
       $$0$i$i14 = 22628;
       HEAP32[$vararg_buffer12>>2] = $$0$i$i14;
       _fprintf(9772,22691,$vararg_buffer12);
       _abort();
       // unreachable;
       break;
      }
      case 5:  {
       $$0$i$i14 = 22643;
       HEAP32[$vararg_buffer12>>2] = $$0$i$i14;
       _fprintf(9772,22691,$vararg_buffer12);
       _abort();
       // unreachable;
       break;
      }
      case 6:  {
       $$0$i$i14 = 22659;
       HEAP32[$vararg_buffer12>>2] = $$0$i$i14;
       _fprintf(9772,22691,$vararg_buffer12);
       _abort();
       // unreachable;
       break;
      }
      case 7:  {
       $$0$i$i14 = 22664;
       HEAP32[$vararg_buffer12>>2] = $$0$i$i14;
       _fprintf(9772,22691,$vararg_buffer12);
       _abort();
       // unreachable;
       break;
      }
      case 8:  {
       $$0$i$i14 = 22671;
       HEAP32[$vararg_buffer12>>2] = $$0$i$i14;
       _fprintf(9772,22691,$vararg_buffer12);
       _abort();
       // unreachable;
       break;
      }
      case 9:  {
       $$0$i$i14 = 22683;
       HEAP32[$vararg_buffer12>>2] = $$0$i$i14;
       _fprintf(9772,22691,$vararg_buffer12);
       _abort();
       // unreachable;
       break;
      }
      case 0:  {
       $$0$i$i14 = 22599;
       HEAP32[$vararg_buffer12>>2] = $$0$i$i14;
       _fprintf(9772,22691,$vararg_buffer12);
       _abort();
       // unreachable;
       break;
      }
      default: {
       $$0$i$i14 = 22689;
       HEAP32[$vararg_buffer12>>2] = $$0$i$i14;
       _fprintf(9772,22691,$vararg_buffer12);
       _abort();
       // unreachable;
      }
      }
     } while(0);
    }
   } while(0);
   $659 = ((($1)) + 416|0);
   HEAP32[$659>>2] = $$0$i16;
  }
  $676 = ((($c)) + 224|0);
  $677 = HEAP32[$676>>2]|0;
  $678 = (_cram_stats_encoding($677)|0);
  $679 = HEAP32[$676>>2]|0;
  $680 = HEAP32[$558>>2]|0;
  $681 = ($679|0)==(0|0);
  if ($681) {
   label = 200;
  } else {
   $682 = ((($679)) + 4104|0);
   $683 = HEAP32[$682>>2]|0;
   $684 = ($683|0)==(0);
   if ($684) {
    $$0$i23 = 0;
   } else {
    label = 200;
   }
  }
  do {
   if ((label|0) == 200) {
    $685 = 122 >>> $678;
    $686 = $685 & 1;
    $687 = ($686|0)==(0);
    if (!($687)) {
     $688 = (608 + ($678<<2)|0);
     $689 = HEAP32[$688>>2]|0;
     $690 = (FUNCTION_TABLE_iiiii[$689 & 127]($679,1,0,$680)|0);
     $691 = ($690|0)==(0|0);
     if ($691) {
      $$0$i23 = 0;
      break;
     }
     $692 = ((($690)) + 4|0);
     HEAP32[$692>>2] = 0;
     $$0$i23 = $690;
     break;
    }
    do {
     switch ($678|0) {
     case 1:  {
      $$0$i$i21 = 22604;
      HEAP32[$vararg_buffer15>>2] = $$0$i$i21;
      _fprintf(9772,22691,$vararg_buffer15);
      _abort();
      // unreachable;
      break;
     }
     case 2:  {
      $$0$i$i21 = 22613;
      HEAP32[$vararg_buffer15>>2] = $$0$i$i21;
      _fprintf(9772,22691,$vararg_buffer15);
      _abort();
      // unreachable;
      break;
     }
     case 3:  {
      $$0$i$i21 = 22620;
      HEAP32[$vararg_buffer15>>2] = $$0$i$i21;
      _fprintf(9772,22691,$vararg_buffer15);
      _abort();
      // unreachable;
      break;
     }
     case 4:  {
      $$0$i$i21 = 22628;
      HEAP32[$vararg_buffer15>>2] = $$0$i$i21;
      _fprintf(9772,22691,$vararg_buffer15);
      _abort();
      // unreachable;
      break;
     }
     case 5:  {
      $$0$i$i21 = 22643;
      HEAP32[$vararg_buffer15>>2] = $$0$i$i21;
      _fprintf(9772,22691,$vararg_buffer15);
      _abort();
      // unreachable;
      break;
     }
     case 6:  {
      $$0$i$i21 = 22659;
      HEAP32[$vararg_buffer15>>2] = $$0$i$i21;
      _fprintf(9772,22691,$vararg_buffer15);
      _abort();
      // unreachable;
      break;
     }
     case 7:  {
      $$0$i$i21 = 22664;
      HEAP32[$vararg_buffer15>>2] = $$0$i$i21;
      _fprintf(9772,22691,$vararg_buffer15);
      _abort();
      // unreachable;
      break;
     }
     case 8:  {
      $$0$i$i21 = 22671;
      HEAP32[$vararg_buffer15>>2] = $$0$i$i21;
      _fprintf(9772,22691,$vararg_buffer15);
      _abort();
      // unreachable;
      break;
     }
     case 9:  {
      $$0$i$i21 = 22683;
      HEAP32[$vararg_buffer15>>2] = $$0$i$i21;
      _fprintf(9772,22691,$vararg_buffer15);
      _abort();
      // unreachable;
      break;
     }
     case 0:  {
      $$0$i$i21 = 22599;
      HEAP32[$vararg_buffer15>>2] = $$0$i$i21;
      _fprintf(9772,22691,$vararg_buffer15);
      _abort();
      // unreachable;
      break;
     }
     default: {
      $$0$i$i21 = 22689;
      HEAP32[$vararg_buffer15>>2] = $$0$i$i21;
      _fprintf(9772,22691,$vararg_buffer15);
      _abort();
      // unreachable;
     }
     }
    } while(0);
   }
  } while(0);
  $693 = ((($1)) + 420|0);
  HEAP32[$693>>2] = $$0$i23;
  $694 = ((($c)) + 228|0);
  $695 = HEAP32[$694>>2]|0;
  $696 = (_cram_stats_encoding($695)|0);
  $697 = HEAP32[$694>>2]|0;
  $698 = HEAP32[$558>>2]|0;
  $699 = ($697|0)==(0|0);
  if ($699) {
   label = 217;
  } else {
   $700 = ((($697)) + 4104|0);
   $701 = HEAP32[$700>>2]|0;
   $702 = ($701|0)==(0);
   if ($702) {
    $$0$i27 = 0;
   } else {
    label = 217;
   }
  }
  do {
   if ((label|0) == 217) {
    $703 = 122 >>> $696;
    $704 = $703 & 1;
    $705 = ($704|0)==(0);
    if (!($705)) {
     $706 = (608 + ($696<<2)|0);
     $707 = HEAP32[$706>>2]|0;
     $708 = (FUNCTION_TABLE_iiiii[$707 & 127]($697,1,0,$698)|0);
     $709 = ($708|0)==(0|0);
     if ($709) {
      $$0$i27 = 0;
      break;
     }
     $710 = ((($708)) + 4|0);
     HEAP32[$710>>2] = 0;
     $$0$i27 = $708;
     break;
    }
    do {
     switch ($696|0) {
     case 1:  {
      $$0$i$i25 = 22604;
      HEAP32[$vararg_buffer18>>2] = $$0$i$i25;
      _fprintf(9772,22691,$vararg_buffer18);
      _abort();
      // unreachable;
      break;
     }
     case 2:  {
      $$0$i$i25 = 22613;
      HEAP32[$vararg_buffer18>>2] = $$0$i$i25;
      _fprintf(9772,22691,$vararg_buffer18);
      _abort();
      // unreachable;
      break;
     }
     case 3:  {
      $$0$i$i25 = 22620;
      HEAP32[$vararg_buffer18>>2] = $$0$i$i25;
      _fprintf(9772,22691,$vararg_buffer18);
      _abort();
      // unreachable;
      break;
     }
     case 4:  {
      $$0$i$i25 = 22628;
      HEAP32[$vararg_buffer18>>2] = $$0$i$i25;
      _fprintf(9772,22691,$vararg_buffer18);
      _abort();
      // unreachable;
      break;
     }
     case 5:  {
      $$0$i$i25 = 22643;
      HEAP32[$vararg_buffer18>>2] = $$0$i$i25;
      _fprintf(9772,22691,$vararg_buffer18);
      _abort();
      // unreachable;
      break;
     }
     case 6:  {
      $$0$i$i25 = 22659;
      HEAP32[$vararg_buffer18>>2] = $$0$i$i25;
      _fprintf(9772,22691,$vararg_buffer18);
      _abort();
      // unreachable;
      break;
     }
     case 7:  {
      $$0$i$i25 = 22664;
      HEAP32[$vararg_buffer18>>2] = $$0$i$i25;
      _fprintf(9772,22691,$vararg_buffer18);
      _abort();
      // unreachable;
      break;
     }
     case 8:  {
      $$0$i$i25 = 22671;
      HEAP32[$vararg_buffer18>>2] = $$0$i$i25;
      _fprintf(9772,22691,$vararg_buffer18);
      _abort();
      // unreachable;
      break;
     }
     case 9:  {
      $$0$i$i25 = 22683;
      HEAP32[$vararg_buffer18>>2] = $$0$i$i25;
      _fprintf(9772,22691,$vararg_buffer18);
      _abort();
      // unreachable;
      break;
     }
     case 0:  {
      $$0$i$i25 = 22599;
      HEAP32[$vararg_buffer18>>2] = $$0$i$i25;
      _fprintf(9772,22691,$vararg_buffer18);
      _abort();
      // unreachable;
      break;
     }
     default: {
      $$0$i$i25 = 22689;
      HEAP32[$vararg_buffer18>>2] = $$0$i$i25;
      _fprintf(9772,22691,$vararg_buffer18);
      _abort();
      // unreachable;
     }
     }
    } while(0);
   }
  } while(0);
  $711 = ((($1)) + 424|0);
  HEAP32[$711>>2] = $$0$i27;
  $712 = ((($c)) + 232|0);
  $713 = HEAP32[$712>>2]|0;
  $714 = (_cram_stats_encoding($713)|0);
  $715 = HEAP32[$712>>2]|0;
  $716 = HEAP32[$558>>2]|0;
  $717 = ($715|0)==(0|0);
  if ($717) {
   label = 234;
  } else {
   $718 = ((($715)) + 4104|0);
   $719 = HEAP32[$718>>2]|0;
   $720 = ($719|0)==(0);
   if ($720) {
    $$0$i31 = 0;
   } else {
    label = 234;
   }
  }
  do {
   if ((label|0) == 234) {
    $721 = 122 >>> $714;
    $722 = $721 & 1;
    $723 = ($722|0)==(0);
    if (!($723)) {
     $724 = (608 + ($714<<2)|0);
     $725 = HEAP32[$724>>2]|0;
     $726 = (FUNCTION_TABLE_iiiii[$725 & 127]($715,1,0,$716)|0);
     $727 = ($726|0)==(0|0);
     if ($727) {
      $$0$i31 = 0;
      break;
     }
     $728 = ((($726)) + 4|0);
     HEAP32[$728>>2] = 0;
     $$0$i31 = $726;
     break;
    }
    do {
     switch ($714|0) {
     case 1:  {
      $$0$i$i29 = 22604;
      HEAP32[$vararg_buffer21>>2] = $$0$i$i29;
      _fprintf(9772,22691,$vararg_buffer21);
      _abort();
      // unreachable;
      break;
     }
     case 2:  {
      $$0$i$i29 = 22613;
      HEAP32[$vararg_buffer21>>2] = $$0$i$i29;
      _fprintf(9772,22691,$vararg_buffer21);
      _abort();
      // unreachable;
      break;
     }
     case 3:  {
      $$0$i$i29 = 22620;
      HEAP32[$vararg_buffer21>>2] = $$0$i$i29;
      _fprintf(9772,22691,$vararg_buffer21);
      _abort();
      // unreachable;
      break;
     }
     case 4:  {
      $$0$i$i29 = 22628;
      HEAP32[$vararg_buffer21>>2] = $$0$i$i29;
      _fprintf(9772,22691,$vararg_buffer21);
      _abort();
      // unreachable;
      break;
     }
     case 5:  {
      $$0$i$i29 = 22643;
      HEAP32[$vararg_buffer21>>2] = $$0$i$i29;
      _fprintf(9772,22691,$vararg_buffer21);
      _abort();
      // unreachable;
      break;
     }
     case 6:  {
      $$0$i$i29 = 22659;
      HEAP32[$vararg_buffer21>>2] = $$0$i$i29;
      _fprintf(9772,22691,$vararg_buffer21);
      _abort();
      // unreachable;
      break;
     }
     case 7:  {
      $$0$i$i29 = 22664;
      HEAP32[$vararg_buffer21>>2] = $$0$i$i29;
      _fprintf(9772,22691,$vararg_buffer21);
      _abort();
      // unreachable;
      break;
     }
     case 8:  {
      $$0$i$i29 = 22671;
      HEAP32[$vararg_buffer21>>2] = $$0$i$i29;
      _fprintf(9772,22691,$vararg_buffer21);
      _abort();
      // unreachable;
      break;
     }
     case 9:  {
      $$0$i$i29 = 22683;
      HEAP32[$vararg_buffer21>>2] = $$0$i$i29;
      _fprintf(9772,22691,$vararg_buffer21);
      _abort();
      // unreachable;
      break;
     }
     case 0:  {
      $$0$i$i29 = 22599;
      HEAP32[$vararg_buffer21>>2] = $$0$i$i29;
      _fprintf(9772,22691,$vararg_buffer21);
      _abort();
      // unreachable;
      break;
     }
     default: {
      $$0$i$i29 = 22689;
      HEAP32[$vararg_buffer21>>2] = $$0$i$i29;
      _fprintf(9772,22691,$vararg_buffer21);
      _abort();
      // unreachable;
     }
     }
    } while(0);
   }
  } while(0);
  $729 = ((($1)) + 428|0);
  HEAP32[$729>>2] = $$0$i31;
  $730 = ((($c)) + 236|0);
  $731 = HEAP32[$730>>2]|0;
  $732 = (_cram_stats_encoding($731)|0);
  $733 = HEAP32[$730>>2]|0;
  $734 = HEAP32[$558>>2]|0;
  $735 = ($733|0)==(0|0);
  if ($735) {
   label = 251;
  } else {
   $736 = ((($733)) + 4104|0);
   $737 = HEAP32[$736>>2]|0;
   $738 = ($737|0)==(0);
   if ($738) {
    $$0$i35 = 0;
   } else {
    label = 251;
   }
  }
  do {
   if ((label|0) == 251) {
    $739 = 122 >>> $732;
    $740 = $739 & 1;
    $741 = ($740|0)==(0);
    if (!($741)) {
     $742 = (608 + ($732<<2)|0);
     $743 = HEAP32[$742>>2]|0;
     $744 = (FUNCTION_TABLE_iiiii[$743 & 127]($733,1,0,$734)|0);
     $745 = ($744|0)==(0|0);
     if ($745) {
      $$0$i35 = 0;
      break;
     }
     $746 = ((($744)) + 4|0);
     HEAP32[$746>>2] = 0;
     $$0$i35 = $744;
     break;
    }
    do {
     switch ($732|0) {
     case 1:  {
      $$0$i$i33 = 22604;
      HEAP32[$vararg_buffer24>>2] = $$0$i$i33;
      _fprintf(9772,22691,$vararg_buffer24);
      _abort();
      // unreachable;
      break;
     }
     case 2:  {
      $$0$i$i33 = 22613;
      HEAP32[$vararg_buffer24>>2] = $$0$i$i33;
      _fprintf(9772,22691,$vararg_buffer24);
      _abort();
      // unreachable;
      break;
     }
     case 3:  {
      $$0$i$i33 = 22620;
      HEAP32[$vararg_buffer24>>2] = $$0$i$i33;
      _fprintf(9772,22691,$vararg_buffer24);
      _abort();
      // unreachable;
      break;
     }
     case 4:  {
      $$0$i$i33 = 22628;
      HEAP32[$vararg_buffer24>>2] = $$0$i$i33;
      _fprintf(9772,22691,$vararg_buffer24);
      _abort();
      // unreachable;
      break;
     }
     case 5:  {
      $$0$i$i33 = 22643;
      HEAP32[$vararg_buffer24>>2] = $$0$i$i33;
      _fprintf(9772,22691,$vararg_buffer24);
      _abort();
      // unreachable;
      break;
     }
     case 6:  {
      $$0$i$i33 = 22659;
      HEAP32[$vararg_buffer24>>2] = $$0$i$i33;
      _fprintf(9772,22691,$vararg_buffer24);
      _abort();
      // unreachable;
      break;
     }
     case 7:  {
      $$0$i$i33 = 22664;
      HEAP32[$vararg_buffer24>>2] = $$0$i$i33;
      _fprintf(9772,22691,$vararg_buffer24);
      _abort();
      // unreachable;
      break;
     }
     case 8:  {
      $$0$i$i33 = 22671;
      HEAP32[$vararg_buffer24>>2] = $$0$i$i33;
      _fprintf(9772,22691,$vararg_buffer24);
      _abort();
      // unreachable;
      break;
     }
     case 9:  {
      $$0$i$i33 = 22683;
      HEAP32[$vararg_buffer24>>2] = $$0$i$i33;
      _fprintf(9772,22691,$vararg_buffer24);
      _abort();
      // unreachable;
      break;
     }
     case 0:  {
      $$0$i$i33 = 22599;
      HEAP32[$vararg_buffer24>>2] = $$0$i$i33;
      _fprintf(9772,22691,$vararg_buffer24);
      _abort();
      // unreachable;
      break;
     }
     default: {
      $$0$i$i33 = 22689;
      HEAP32[$vararg_buffer24>>2] = $$0$i$i33;
      _fprintf(9772,22691,$vararg_buffer24);
      _abort();
      // unreachable;
     }
     }
    } while(0);
   }
  } while(0);
  $747 = ((($1)) + 432|0);
  HEAP32[$747>>2] = $$0$i35;
  $748 = ((($c)) + 240|0);
  $749 = HEAP32[$748>>2]|0;
  $750 = (_cram_stats_encoding($749)|0);
  $751 = HEAP32[$748>>2]|0;
  $752 = HEAP32[$558>>2]|0;
  $753 = ($751|0)==(0|0);
  if ($753) {
   label = 268;
  } else {
   $754 = ((($751)) + 4104|0);
   $755 = HEAP32[$754>>2]|0;
   $756 = ($755|0)==(0);
   if ($756) {
    $$0$i39 = 0;
   } else {
    label = 268;
   }
  }
  do {
   if ((label|0) == 268) {
    $757 = 122 >>> $750;
    $758 = $757 & 1;
    $759 = ($758|0)==(0);
    if (!($759)) {
     $760 = (608 + ($750<<2)|0);
     $761 = HEAP32[$760>>2]|0;
     $762 = (FUNCTION_TABLE_iiiii[$761 & 127]($751,1,0,$752)|0);
     $763 = ($762|0)==(0|0);
     if ($763) {
      $$0$i39 = 0;
      break;
     }
     $764 = ((($762)) + 4|0);
     HEAP32[$764>>2] = 0;
     $$0$i39 = $762;
     break;
    }
    do {
     switch ($750|0) {
     case 1:  {
      $$0$i$i37 = 22604;
      HEAP32[$vararg_buffer27>>2] = $$0$i$i37;
      _fprintf(9772,22691,$vararg_buffer27);
      _abort();
      // unreachable;
      break;
     }
     case 2:  {
      $$0$i$i37 = 22613;
      HEAP32[$vararg_buffer27>>2] = $$0$i$i37;
      _fprintf(9772,22691,$vararg_buffer27);
      _abort();
      // unreachable;
      break;
     }
     case 3:  {
      $$0$i$i37 = 22620;
      HEAP32[$vararg_buffer27>>2] = $$0$i$i37;
      _fprintf(9772,22691,$vararg_buffer27);
      _abort();
      // unreachable;
      break;
     }
     case 4:  {
      $$0$i$i37 = 22628;
      HEAP32[$vararg_buffer27>>2] = $$0$i$i37;
      _fprintf(9772,22691,$vararg_buffer27);
      _abort();
      // unreachable;
      break;
     }
     case 5:  {
      $$0$i$i37 = 22643;
      HEAP32[$vararg_buffer27>>2] = $$0$i$i37;
      _fprintf(9772,22691,$vararg_buffer27);
      _abort();
      // unreachable;
      break;
     }
     case 6:  {
      $$0$i$i37 = 22659;
      HEAP32[$vararg_buffer27>>2] = $$0$i$i37;
      _fprintf(9772,22691,$vararg_buffer27);
      _abort();
      // unreachable;
      break;
     }
     case 7:  {
      $$0$i$i37 = 22664;
      HEAP32[$vararg_buffer27>>2] = $$0$i$i37;
      _fprintf(9772,22691,$vararg_buffer27);
      _abort();
      // unreachable;
      break;
     }
     case 8:  {
      $$0$i$i37 = 22671;
      HEAP32[$vararg_buffer27>>2] = $$0$i$i37;
      _fprintf(9772,22691,$vararg_buffer27);
      _abort();
      // unreachable;
      break;
     }
     case 9:  {
      $$0$i$i37 = 22683;
      HEAP32[$vararg_buffer27>>2] = $$0$i$i37;
      _fprintf(9772,22691,$vararg_buffer27);
      _abort();
      // unreachable;
      break;
     }
     case 0:  {
      $$0$i$i37 = 22599;
      HEAP32[$vararg_buffer27>>2] = $$0$i$i37;
      _fprintf(9772,22691,$vararg_buffer27);
      _abort();
      // unreachable;
      break;
     }
     default: {
      $$0$i$i37 = 22689;
      HEAP32[$vararg_buffer27>>2] = $$0$i$i37;
      _fprintf(9772,22691,$vararg_buffer27);
      _abort();
      // unreachable;
     }
     }
    } while(0);
   }
  } while(0);
  $765 = ((($1)) + 436|0);
  HEAP32[$765>>2] = $$0$i39;
  $766 = ((($c)) + 244|0);
  $767 = HEAP32[$766>>2]|0;
  $768 = (_cram_stats_encoding($767)|0);
  $769 = HEAP32[$766>>2]|0;
  $770 = HEAP32[$558>>2]|0;
  $771 = ($769|0)==(0|0);
  if ($771) {
   label = 285;
  } else {
   $772 = ((($769)) + 4104|0);
   $773 = HEAP32[$772>>2]|0;
   $774 = ($773|0)==(0);
   if ($774) {
    $$0$i43 = 0;
   } else {
    label = 285;
   }
  }
  do {
   if ((label|0) == 285) {
    $775 = 122 >>> $768;
    $776 = $775 & 1;
    $777 = ($776|0)==(0);
    if (!($777)) {
     $778 = (608 + ($768<<2)|0);
     $779 = HEAP32[$778>>2]|0;
     $780 = (FUNCTION_TABLE_iiiii[$779 & 127]($769,1,0,$770)|0);
     $781 = ($780|0)==(0|0);
     if ($781) {
      $$0$i43 = 0;
      break;
     }
     $782 = ((($780)) + 4|0);
     HEAP32[$782>>2] = 0;
     $$0$i43 = $780;
     break;
    }
    do {
     switch ($768|0) {
     case 1:  {
      $$0$i$i41 = 22604;
      HEAP32[$vararg_buffer30>>2] = $$0$i$i41;
      _fprintf(9772,22691,$vararg_buffer30);
      _abort();
      // unreachable;
      break;
     }
     case 2:  {
      $$0$i$i41 = 22613;
      HEAP32[$vararg_buffer30>>2] = $$0$i$i41;
      _fprintf(9772,22691,$vararg_buffer30);
      _abort();
      // unreachable;
      break;
     }
     case 3:  {
      $$0$i$i41 = 22620;
      HEAP32[$vararg_buffer30>>2] = $$0$i$i41;
      _fprintf(9772,22691,$vararg_buffer30);
      _abort();
      // unreachable;
      break;
     }
     case 4:  {
      $$0$i$i41 = 22628;
      HEAP32[$vararg_buffer30>>2] = $$0$i$i41;
      _fprintf(9772,22691,$vararg_buffer30);
      _abort();
      // unreachable;
      break;
     }
     case 5:  {
      $$0$i$i41 = 22643;
      HEAP32[$vararg_buffer30>>2] = $$0$i$i41;
      _fprintf(9772,22691,$vararg_buffer30);
      _abort();
      // unreachable;
      break;
     }
     case 6:  {
      $$0$i$i41 = 22659;
      HEAP32[$vararg_buffer30>>2] = $$0$i$i41;
      _fprintf(9772,22691,$vararg_buffer30);
      _abort();
      // unreachable;
      break;
     }
     case 7:  {
      $$0$i$i41 = 22664;
      HEAP32[$vararg_buffer30>>2] = $$0$i$i41;
      _fprintf(9772,22691,$vararg_buffer30);
      _abort();
      // unreachable;
      break;
     }
     case 8:  {
      $$0$i$i41 = 22671;
      HEAP32[$vararg_buffer30>>2] = $$0$i$i41;
      _fprintf(9772,22691,$vararg_buffer30);
      _abort();
      // unreachable;
      break;
     }
     case 9:  {
      $$0$i$i41 = 22683;
      HEAP32[$vararg_buffer30>>2] = $$0$i$i41;
      _fprintf(9772,22691,$vararg_buffer30);
      _abort();
      // unreachable;
      break;
     }
     case 0:  {
      $$0$i$i41 = 22599;
      HEAP32[$vararg_buffer30>>2] = $$0$i$i41;
      _fprintf(9772,22691,$vararg_buffer30);
      _abort();
      // unreachable;
      break;
     }
     default: {
      $$0$i$i41 = 22689;
      HEAP32[$vararg_buffer30>>2] = $$0$i$i41;
      _fprintf(9772,22691,$vararg_buffer30);
      _abort();
      // unreachable;
     }
     }
    } while(0);
   }
  } while(0);
  $783 = ((($1)) + 440|0);
  HEAP32[$783>>2] = $$0$i43;
  $784 = ((($c)) + 248|0);
  $785 = HEAP32[$784>>2]|0;
  $786 = (_cram_stats_encoding($785)|0);
  $787 = HEAP32[$784>>2]|0;
  $788 = HEAP32[$558>>2]|0;
  $789 = ($787|0)==(0|0);
  if ($789) {
   label = 302;
  } else {
   $790 = ((($787)) + 4104|0);
   $791 = HEAP32[$790>>2]|0;
   $792 = ($791|0)==(0);
   if ($792) {
    $$0$i47 = 0;
   } else {
    label = 302;
   }
  }
  do {
   if ((label|0) == 302) {
    $793 = 122 >>> $786;
    $794 = $793 & 1;
    $795 = ($794|0)==(0);
    if (!($795)) {
     $796 = (608 + ($786<<2)|0);
     $797 = HEAP32[$796>>2]|0;
     $798 = (FUNCTION_TABLE_iiiii[$797 & 127]($787,1,0,$788)|0);
     $799 = ($798|0)==(0|0);
     if ($799) {
      $$0$i47 = 0;
      break;
     }
     $800 = ((($798)) + 4|0);
     HEAP32[$800>>2] = 0;
     $$0$i47 = $798;
     break;
    }
    do {
     switch ($786|0) {
     case 1:  {
      $$0$i$i45 = 22604;
      HEAP32[$vararg_buffer33>>2] = $$0$i$i45;
      _fprintf(9772,22691,$vararg_buffer33);
      _abort();
      // unreachable;
      break;
     }
     case 2:  {
      $$0$i$i45 = 22613;
      HEAP32[$vararg_buffer33>>2] = $$0$i$i45;
      _fprintf(9772,22691,$vararg_buffer33);
      _abort();
      // unreachable;
      break;
     }
     case 3:  {
      $$0$i$i45 = 22620;
      HEAP32[$vararg_buffer33>>2] = $$0$i$i45;
      _fprintf(9772,22691,$vararg_buffer33);
      _abort();
      // unreachable;
      break;
     }
     case 4:  {
      $$0$i$i45 = 22628;
      HEAP32[$vararg_buffer33>>2] = $$0$i$i45;
      _fprintf(9772,22691,$vararg_buffer33);
      _abort();
      // unreachable;
      break;
     }
     case 5:  {
      $$0$i$i45 = 22643;
      HEAP32[$vararg_buffer33>>2] = $$0$i$i45;
      _fprintf(9772,22691,$vararg_buffer33);
      _abort();
      // unreachable;
      break;
     }
     case 6:  {
      $$0$i$i45 = 22659;
      HEAP32[$vararg_buffer33>>2] = $$0$i$i45;
      _fprintf(9772,22691,$vararg_buffer33);
      _abort();
      // unreachable;
      break;
     }
     case 7:  {
      $$0$i$i45 = 22664;
      HEAP32[$vararg_buffer33>>2] = $$0$i$i45;
      _fprintf(9772,22691,$vararg_buffer33);
      _abort();
      // unreachable;
      break;
     }
     case 8:  {
      $$0$i$i45 = 22671;
      HEAP32[$vararg_buffer33>>2] = $$0$i$i45;
      _fprintf(9772,22691,$vararg_buffer33);
      _abort();
      // unreachable;
      break;
     }
     case 9:  {
      $$0$i$i45 = 22683;
      HEAP32[$vararg_buffer33>>2] = $$0$i$i45;
      _fprintf(9772,22691,$vararg_buffer33);
      _abort();
      // unreachable;
      break;
     }
     case 0:  {
      $$0$i$i45 = 22599;
      HEAP32[$vararg_buffer33>>2] = $$0$i$i45;
      _fprintf(9772,22691,$vararg_buffer33);
      _abort();
      // unreachable;
      break;
     }
     default: {
      $$0$i$i45 = 22689;
      HEAP32[$vararg_buffer33>>2] = $$0$i$i45;
      _fprintf(9772,22691,$vararg_buffer33);
      _abort();
      // unreachable;
     }
     }
    } while(0);
   }
  } while(0);
  $801 = ((($1)) + 444|0);
  HEAP32[$801>>2] = $$0$i47;
  $802 = ((($c)) + 252|0);
  $803 = HEAP32[$802>>2]|0;
  $804 = (_cram_stats_encoding($803)|0);
  $805 = HEAP32[$802>>2]|0;
  $806 = HEAP32[$558>>2]|0;
  $807 = ($805|0)==(0|0);
  if ($807) {
   label = 319;
  } else {
   $808 = ((($805)) + 4104|0);
   $809 = HEAP32[$808>>2]|0;
   $810 = ($809|0)==(0);
   if ($810) {
    $$0$i51 = 0;
   } else {
    label = 319;
   }
  }
  do {
   if ((label|0) == 319) {
    $811 = 122 >>> $804;
    $812 = $811 & 1;
    $813 = ($812|0)==(0);
    if (!($813)) {
     $814 = (608 + ($804<<2)|0);
     $815 = HEAP32[$814>>2]|0;
     $816 = (FUNCTION_TABLE_iiiii[$815 & 127]($805,1,0,$806)|0);
     $817 = ($816|0)==(0|0);
     if ($817) {
      $$0$i51 = 0;
      break;
     }
     $818 = ((($816)) + 4|0);
     HEAP32[$818>>2] = 0;
     $$0$i51 = $816;
     break;
    }
    do {
     switch ($804|0) {
     case 1:  {
      $$0$i$i49 = 22604;
      HEAP32[$vararg_buffer36>>2] = $$0$i$i49;
      _fprintf(9772,22691,$vararg_buffer36);
      _abort();
      // unreachable;
      break;
     }
     case 2:  {
      $$0$i$i49 = 22613;
      HEAP32[$vararg_buffer36>>2] = $$0$i$i49;
      _fprintf(9772,22691,$vararg_buffer36);
      _abort();
      // unreachable;
      break;
     }
     case 3:  {
      $$0$i$i49 = 22620;
      HEAP32[$vararg_buffer36>>2] = $$0$i$i49;
      _fprintf(9772,22691,$vararg_buffer36);
      _abort();
      // unreachable;
      break;
     }
     case 4:  {
      $$0$i$i49 = 22628;
      HEAP32[$vararg_buffer36>>2] = $$0$i$i49;
      _fprintf(9772,22691,$vararg_buffer36);
      _abort();
      // unreachable;
      break;
     }
     case 5:  {
      $$0$i$i49 = 22643;
      HEAP32[$vararg_buffer36>>2] = $$0$i$i49;
      _fprintf(9772,22691,$vararg_buffer36);
      _abort();
      // unreachable;
      break;
     }
     case 6:  {
      $$0$i$i49 = 22659;
      HEAP32[$vararg_buffer36>>2] = $$0$i$i49;
      _fprintf(9772,22691,$vararg_buffer36);
      _abort();
      // unreachable;
      break;
     }
     case 7:  {
      $$0$i$i49 = 22664;
      HEAP32[$vararg_buffer36>>2] = $$0$i$i49;
      _fprintf(9772,22691,$vararg_buffer36);
      _abort();
      // unreachable;
      break;
     }
     case 8:  {
      $$0$i$i49 = 22671;
      HEAP32[$vararg_buffer36>>2] = $$0$i$i49;
      _fprintf(9772,22691,$vararg_buffer36);
      _abort();
      // unreachable;
      break;
     }
     case 9:  {
      $$0$i$i49 = 22683;
      HEAP32[$vararg_buffer36>>2] = $$0$i$i49;
      _fprintf(9772,22691,$vararg_buffer36);
      _abort();
      // unreachable;
      break;
     }
     case 0:  {
      $$0$i$i49 = 22599;
      HEAP32[$vararg_buffer36>>2] = $$0$i$i49;
      _fprintf(9772,22691,$vararg_buffer36);
      _abort();
      // unreachable;
      break;
     }
     default: {
      $$0$i$i49 = 22689;
      HEAP32[$vararg_buffer36>>2] = $$0$i$i49;
      _fprintf(9772,22691,$vararg_buffer36);
      _abort();
      // unreachable;
     }
     }
    } while(0);
   }
  } while(0);
  $819 = ((($1)) + 448|0);
  HEAP32[$819>>2] = $$0$i51;
  $820 = ((($c)) + 256|0);
  $821 = HEAP32[$820>>2]|0;
  $822 = (_cram_stats_encoding($821)|0);
  $823 = HEAP32[$820>>2]|0;
  $824 = HEAP32[$558>>2]|0;
  $825 = ($823|0)==(0|0);
  if ($825) {
   label = 336;
  } else {
   $826 = ((($823)) + 4104|0);
   $827 = HEAP32[$826>>2]|0;
   $828 = ($827|0)==(0);
   if ($828) {
    $$0$i55 = 0;
   } else {
    label = 336;
   }
  }
  do {
   if ((label|0) == 336) {
    $829 = 122 >>> $822;
    $830 = $829 & 1;
    $831 = ($830|0)==(0);
    if (!($831)) {
     $832 = (608 + ($822<<2)|0);
     $833 = HEAP32[$832>>2]|0;
     $834 = (FUNCTION_TABLE_iiiii[$833 & 127]($823,1,0,$824)|0);
     $835 = ($834|0)==(0|0);
     if ($835) {
      $$0$i55 = 0;
      break;
     }
     $836 = ((($834)) + 4|0);
     HEAP32[$836>>2] = 0;
     $$0$i55 = $834;
     break;
    }
    do {
     switch ($822|0) {
     case 1:  {
      $$0$i$i53 = 22604;
      HEAP32[$vararg_buffer39>>2] = $$0$i$i53;
      _fprintf(9772,22691,$vararg_buffer39);
      _abort();
      // unreachable;
      break;
     }
     case 2:  {
      $$0$i$i53 = 22613;
      HEAP32[$vararg_buffer39>>2] = $$0$i$i53;
      _fprintf(9772,22691,$vararg_buffer39);
      _abort();
      // unreachable;
      break;
     }
     case 3:  {
      $$0$i$i53 = 22620;
      HEAP32[$vararg_buffer39>>2] = $$0$i$i53;
      _fprintf(9772,22691,$vararg_buffer39);
      _abort();
      // unreachable;
      break;
     }
     case 4:  {
      $$0$i$i53 = 22628;
      HEAP32[$vararg_buffer39>>2] = $$0$i$i53;
      _fprintf(9772,22691,$vararg_buffer39);
      _abort();
      // unreachable;
      break;
     }
     case 5:  {
      $$0$i$i53 = 22643;
      HEAP32[$vararg_buffer39>>2] = $$0$i$i53;
      _fprintf(9772,22691,$vararg_buffer39);
      _abort();
      // unreachable;
      break;
     }
     case 6:  {
      $$0$i$i53 = 22659;
      HEAP32[$vararg_buffer39>>2] = $$0$i$i53;
      _fprintf(9772,22691,$vararg_buffer39);
      _abort();
      // unreachable;
      break;
     }
     case 7:  {
      $$0$i$i53 = 22664;
      HEAP32[$vararg_buffer39>>2] = $$0$i$i53;
      _fprintf(9772,22691,$vararg_buffer39);
      _abort();
      // unreachable;
      break;
     }
     case 8:  {
      $$0$i$i53 = 22671;
      HEAP32[$vararg_buffer39>>2] = $$0$i$i53;
      _fprintf(9772,22691,$vararg_buffer39);
      _abort();
      // unreachable;
      break;
     }
     case 9:  {
      $$0$i$i53 = 22683;
      HEAP32[$vararg_buffer39>>2] = $$0$i$i53;
      _fprintf(9772,22691,$vararg_buffer39);
      _abort();
      // unreachable;
      break;
     }
     case 0:  {
      $$0$i$i53 = 22599;
      HEAP32[$vararg_buffer39>>2] = $$0$i$i53;
      _fprintf(9772,22691,$vararg_buffer39);
      _abort();
      // unreachable;
      break;
     }
     default: {
      $$0$i$i53 = 22689;
      HEAP32[$vararg_buffer39>>2] = $$0$i$i53;
      _fprintf(9772,22691,$vararg_buffer39);
      _abort();
      // unreachable;
     }
     }
    } while(0);
   }
  } while(0);
  $837 = ((($1)) + 452|0);
  HEAP32[$837>>2] = $$0$i55;
  $838 = ((($c)) + 260|0);
  $839 = HEAP32[$838>>2]|0;
  $840 = (_cram_stats_encoding($839)|0);
  $841 = HEAP32[$838>>2]|0;
  $842 = HEAP32[$558>>2]|0;
  $843 = ($841|0)==(0|0);
  if ($843) {
   label = 353;
  } else {
   $844 = ((($841)) + 4104|0);
   $845 = HEAP32[$844>>2]|0;
   $846 = ($845|0)==(0);
   if ($846) {
    $$0$i59 = 0;
   } else {
    label = 353;
   }
  }
  do {
   if ((label|0) == 353) {
    $847 = 122 >>> $840;
    $848 = $847 & 1;
    $849 = ($848|0)==(0);
    if (!($849)) {
     $850 = (608 + ($840<<2)|0);
     $851 = HEAP32[$850>>2]|0;
     $852 = (FUNCTION_TABLE_iiiii[$851 & 127]($841,3,0,$842)|0);
     $853 = ($852|0)==(0|0);
     if ($853) {
      $$0$i59 = 0;
      break;
     }
     $854 = ((($852)) + 4|0);
     HEAP32[$854>>2] = 0;
     $$0$i59 = $852;
     break;
    }
    do {
     switch ($840|0) {
     case 1:  {
      $$0$i$i57 = 22604;
      HEAP32[$vararg_buffer42>>2] = $$0$i$i57;
      _fprintf(9772,22691,$vararg_buffer42);
      _abort();
      // unreachable;
      break;
     }
     case 2:  {
      $$0$i$i57 = 22613;
      HEAP32[$vararg_buffer42>>2] = $$0$i$i57;
      _fprintf(9772,22691,$vararg_buffer42);
      _abort();
      // unreachable;
      break;
     }
     case 3:  {
      $$0$i$i57 = 22620;
      HEAP32[$vararg_buffer42>>2] = $$0$i$i57;
      _fprintf(9772,22691,$vararg_buffer42);
      _abort();
      // unreachable;
      break;
     }
     case 4:  {
      $$0$i$i57 = 22628;
      HEAP32[$vararg_buffer42>>2] = $$0$i$i57;
      _fprintf(9772,22691,$vararg_buffer42);
      _abort();
      // unreachable;
      break;
     }
     case 5:  {
      $$0$i$i57 = 22643;
      HEAP32[$vararg_buffer42>>2] = $$0$i$i57;
      _fprintf(9772,22691,$vararg_buffer42);
      _abort();
      // unreachable;
      break;
     }
     case 6:  {
      $$0$i$i57 = 22659;
      HEAP32[$vararg_buffer42>>2] = $$0$i$i57;
      _fprintf(9772,22691,$vararg_buffer42);
      _abort();
      // unreachable;
      break;
     }
     case 7:  {
      $$0$i$i57 = 22664;
      HEAP32[$vararg_buffer42>>2] = $$0$i$i57;
      _fprintf(9772,22691,$vararg_buffer42);
      _abort();
      // unreachable;
      break;
     }
     case 8:  {
      $$0$i$i57 = 22671;
      HEAP32[$vararg_buffer42>>2] = $$0$i$i57;
      _fprintf(9772,22691,$vararg_buffer42);
      _abort();
      // unreachable;
      break;
     }
     case 9:  {
      $$0$i$i57 = 22683;
      HEAP32[$vararg_buffer42>>2] = $$0$i$i57;
      _fprintf(9772,22691,$vararg_buffer42);
      _abort();
      // unreachable;
      break;
     }
     case 0:  {
      $$0$i$i57 = 22599;
      HEAP32[$vararg_buffer42>>2] = $$0$i$i57;
      _fprintf(9772,22691,$vararg_buffer42);
      _abort();
      // unreachable;
      break;
     }
     default: {
      $$0$i$i57 = 22689;
      HEAP32[$vararg_buffer42>>2] = $$0$i$i57;
      _fprintf(9772,22691,$vararg_buffer42);
      _abort();
      // unreachable;
     }
     }
    } while(0);
   }
  } while(0);
  $855 = ((($1)) + 456|0);
  HEAP32[$855>>2] = $$0$i59;
  $856 = ((($c)) + 264|0);
  $857 = HEAP32[$856>>2]|0;
  $858 = (_cram_stats_encoding($857)|0);
  $859 = HEAP32[$856>>2]|0;
  $860 = HEAP32[$558>>2]|0;
  $861 = ($859|0)==(0|0);
  if ($861) {
   label = 370;
  } else {
   $862 = ((($859)) + 4104|0);
   $863 = HEAP32[$862>>2]|0;
   $864 = ($863|0)==(0);
   if ($864) {
    $$0$i63 = 0;
   } else {
    label = 370;
   }
  }
  do {
   if ((label|0) == 370) {
    $865 = 122 >>> $858;
    $866 = $865 & 1;
    $867 = ($866|0)==(0);
    if (!($867)) {
     $868 = (608 + ($858<<2)|0);
     $869 = HEAP32[$868>>2]|0;
     $870 = (FUNCTION_TABLE_iiiii[$869 & 127]($859,1,0,$860)|0);
     $871 = ($870|0)==(0|0);
     if ($871) {
      $$0$i63 = 0;
      break;
     }
     $872 = ((($870)) + 4|0);
     HEAP32[$872>>2] = 0;
     $$0$i63 = $870;
     break;
    }
    do {
     switch ($858|0) {
     case 1:  {
      $$0$i$i61 = 22604;
      HEAP32[$vararg_buffer45>>2] = $$0$i$i61;
      _fprintf(9772,22691,$vararg_buffer45);
      _abort();
      // unreachable;
      break;
     }
     case 2:  {
      $$0$i$i61 = 22613;
      HEAP32[$vararg_buffer45>>2] = $$0$i$i61;
      _fprintf(9772,22691,$vararg_buffer45);
      _abort();
      // unreachable;
      break;
     }
     case 3:  {
      $$0$i$i61 = 22620;
      HEAP32[$vararg_buffer45>>2] = $$0$i$i61;
      _fprintf(9772,22691,$vararg_buffer45);
      _abort();
      // unreachable;
      break;
     }
     case 4:  {
      $$0$i$i61 = 22628;
      HEAP32[$vararg_buffer45>>2] = $$0$i$i61;
      _fprintf(9772,22691,$vararg_buffer45);
      _abort();
      // unreachable;
      break;
     }
     case 5:  {
      $$0$i$i61 = 22643;
      HEAP32[$vararg_buffer45>>2] = $$0$i$i61;
      _fprintf(9772,22691,$vararg_buffer45);
      _abort();
      // unreachable;
      break;
     }
     case 6:  {
      $$0$i$i61 = 22659;
      HEAP32[$vararg_buffer45>>2] = $$0$i$i61;
      _fprintf(9772,22691,$vararg_buffer45);
      _abort();
      // unreachable;
      break;
     }
     case 7:  {
      $$0$i$i61 = 22664;
      HEAP32[$vararg_buffer45>>2] = $$0$i$i61;
      _fprintf(9772,22691,$vararg_buffer45);
      _abort();
      // unreachable;
      break;
     }
     case 8:  {
      $$0$i$i61 = 22671;
      HEAP32[$vararg_buffer45>>2] = $$0$i$i61;
      _fprintf(9772,22691,$vararg_buffer45);
      _abort();
      // unreachable;
      break;
     }
     case 9:  {
      $$0$i$i61 = 22683;
      HEAP32[$vararg_buffer45>>2] = $$0$i$i61;
      _fprintf(9772,22691,$vararg_buffer45);
      _abort();
      // unreachable;
      break;
     }
     case 0:  {
      $$0$i$i61 = 22599;
      HEAP32[$vararg_buffer45>>2] = $$0$i$i61;
      _fprintf(9772,22691,$vararg_buffer45);
      _abort();
      // unreachable;
      break;
     }
     default: {
      $$0$i$i61 = 22689;
      HEAP32[$vararg_buffer45>>2] = $$0$i$i61;
      _fprintf(9772,22691,$vararg_buffer45);
      _abort();
      // unreachable;
     }
     }
    } while(0);
   }
  } while(0);
  $873 = ((($1)) + 460|0);
  HEAP32[$873>>2] = $$0$i63;
  $874 = ((($c)) + 268|0);
  $875 = HEAP32[$874>>2]|0;
  $876 = (_cram_stats_encoding($875)|0);
  $877 = HEAP32[$874>>2]|0;
  $878 = HEAP32[$558>>2]|0;
  $879 = ($877|0)==(0|0);
  if ($879) {
   label = 387;
  } else {
   $880 = ((($877)) + 4104|0);
   $881 = HEAP32[$880>>2]|0;
   $882 = ($881|0)==(0);
   if ($882) {
    $$0$i67 = 0;
   } else {
    label = 387;
   }
  }
  do {
   if ((label|0) == 387) {
    $883 = 122 >>> $876;
    $884 = $883 & 1;
    $885 = ($884|0)==(0);
    if (!($885)) {
     $886 = (608 + ($876<<2)|0);
     $887 = HEAP32[$886>>2]|0;
     $888 = (FUNCTION_TABLE_iiiii[$887 & 127]($877,1,0,$878)|0);
     $889 = ($888|0)==(0|0);
     if ($889) {
      $$0$i67 = 0;
      break;
     }
     $890 = ((($888)) + 4|0);
     HEAP32[$890>>2] = 0;
     $$0$i67 = $888;
     break;
    }
    do {
     switch ($876|0) {
     case 1:  {
      $$0$i$i65 = 22604;
      HEAP32[$vararg_buffer48>>2] = $$0$i$i65;
      _fprintf(9772,22691,$vararg_buffer48);
      _abort();
      // unreachable;
      break;
     }
     case 2:  {
      $$0$i$i65 = 22613;
      HEAP32[$vararg_buffer48>>2] = $$0$i$i65;
      _fprintf(9772,22691,$vararg_buffer48);
      _abort();
      // unreachable;
      break;
     }
     case 3:  {
      $$0$i$i65 = 22620;
      HEAP32[$vararg_buffer48>>2] = $$0$i$i65;
      _fprintf(9772,22691,$vararg_buffer48);
      _abort();
      // unreachable;
      break;
     }
     case 4:  {
      $$0$i$i65 = 22628;
      HEAP32[$vararg_buffer48>>2] = $$0$i$i65;
      _fprintf(9772,22691,$vararg_buffer48);
      _abort();
      // unreachable;
      break;
     }
     case 5:  {
      $$0$i$i65 = 22643;
      HEAP32[$vararg_buffer48>>2] = $$0$i$i65;
      _fprintf(9772,22691,$vararg_buffer48);
      _abort();
      // unreachable;
      break;
     }
     case 6:  {
      $$0$i$i65 = 22659;
      HEAP32[$vararg_buffer48>>2] = $$0$i$i65;
      _fprintf(9772,22691,$vararg_buffer48);
      _abort();
      // unreachable;
      break;
     }
     case 7:  {
      $$0$i$i65 = 22664;
      HEAP32[$vararg_buffer48>>2] = $$0$i$i65;
      _fprintf(9772,22691,$vararg_buffer48);
      _abort();
      // unreachable;
      break;
     }
     case 8:  {
      $$0$i$i65 = 22671;
      HEAP32[$vararg_buffer48>>2] = $$0$i$i65;
      _fprintf(9772,22691,$vararg_buffer48);
      _abort();
      // unreachable;
      break;
     }
     case 9:  {
      $$0$i$i65 = 22683;
      HEAP32[$vararg_buffer48>>2] = $$0$i$i65;
      _fprintf(9772,22691,$vararg_buffer48);
      _abort();
      // unreachable;
      break;
     }
     case 0:  {
      $$0$i$i65 = 22599;
      HEAP32[$vararg_buffer48>>2] = $$0$i$i65;
      _fprintf(9772,22691,$vararg_buffer48);
      _abort();
      // unreachable;
      break;
     }
     default: {
      $$0$i$i65 = 22689;
      HEAP32[$vararg_buffer48>>2] = $$0$i$i65;
      _fprintf(9772,22691,$vararg_buffer48);
      _abort();
      // unreachable;
     }
     }
    } while(0);
   }
  } while(0);
  $891 = ((($1)) + 464|0);
  HEAP32[$891>>2] = $$0$i67;
  $892 = ((($c)) + 272|0);
  $893 = HEAP32[$892>>2]|0;
  $894 = (_cram_stats_encoding($893)|0);
  $895 = HEAP32[$892>>2]|0;
  $896 = HEAP32[$558>>2]|0;
  $897 = ($895|0)==(0|0);
  if ($897) {
   label = 404;
  } else {
   $898 = ((($895)) + 4104|0);
   $899 = HEAP32[$898>>2]|0;
   $900 = ($899|0)==(0);
   if ($900) {
    $$0$i71 = 0;
   } else {
    label = 404;
   }
  }
  do {
   if ((label|0) == 404) {
    $901 = 122 >>> $894;
    $902 = $901 & 1;
    $903 = ($902|0)==(0);
    if (!($903)) {
     $904 = (608 + ($894<<2)|0);
     $905 = HEAP32[$904>>2]|0;
     $906 = (FUNCTION_TABLE_iiiii[$905 & 127]($895,3,0,$896)|0);
     $907 = ($906|0)==(0|0);
     if ($907) {
      $$0$i71 = 0;
      break;
     }
     $908 = ((($906)) + 4|0);
     HEAP32[$908>>2] = 0;
     $$0$i71 = $906;
     break;
    }
    do {
     switch ($894|0) {
     case 1:  {
      $$0$i$i69 = 22604;
      HEAP32[$vararg_buffer51>>2] = $$0$i$i69;
      _fprintf(9772,22691,$vararg_buffer51);
      _abort();
      // unreachable;
      break;
     }
     case 2:  {
      $$0$i$i69 = 22613;
      HEAP32[$vararg_buffer51>>2] = $$0$i$i69;
      _fprintf(9772,22691,$vararg_buffer51);
      _abort();
      // unreachable;
      break;
     }
     case 3:  {
      $$0$i$i69 = 22620;
      HEAP32[$vararg_buffer51>>2] = $$0$i$i69;
      _fprintf(9772,22691,$vararg_buffer51);
      _abort();
      // unreachable;
      break;
     }
     case 4:  {
      $$0$i$i69 = 22628;
      HEAP32[$vararg_buffer51>>2] = $$0$i$i69;
      _fprintf(9772,22691,$vararg_buffer51);
      _abort();
      // unreachable;
      break;
     }
     case 5:  {
      $$0$i$i69 = 22643;
      HEAP32[$vararg_buffer51>>2] = $$0$i$i69;
      _fprintf(9772,22691,$vararg_buffer51);
      _abort();
      // unreachable;
      break;
     }
     case 6:  {
      $$0$i$i69 = 22659;
      HEAP32[$vararg_buffer51>>2] = $$0$i$i69;
      _fprintf(9772,22691,$vararg_buffer51);
      _abort();
      // unreachable;
      break;
     }
     case 7:  {
      $$0$i$i69 = 22664;
      HEAP32[$vararg_buffer51>>2] = $$0$i$i69;
      _fprintf(9772,22691,$vararg_buffer51);
      _abort();
      // unreachable;
      break;
     }
     case 8:  {
      $$0$i$i69 = 22671;
      HEAP32[$vararg_buffer51>>2] = $$0$i$i69;
      _fprintf(9772,22691,$vararg_buffer51);
      _abort();
      // unreachable;
      break;
     }
     case 9:  {
      $$0$i$i69 = 22683;
      HEAP32[$vararg_buffer51>>2] = $$0$i$i69;
      _fprintf(9772,22691,$vararg_buffer51);
      _abort();
      // unreachable;
      break;
     }
     case 0:  {
      $$0$i$i69 = 22599;
      HEAP32[$vararg_buffer51>>2] = $$0$i$i69;
      _fprintf(9772,22691,$vararg_buffer51);
      _abort();
      // unreachable;
      break;
     }
     default: {
      $$0$i$i69 = 22689;
      HEAP32[$vararg_buffer51>>2] = $$0$i$i69;
      _fprintf(9772,22691,$vararg_buffer51);
      _abort();
      // unreachable;
     }
     }
    } while(0);
   }
  } while(0);
  $909 = ((($1)) + 468|0);
  HEAP32[$909>>2] = $$0$i71;
  $910 = HEAP32[$558>>2]|0;
  $911 = $910 >> 8;
  $912 = ($911|0)>(2);
  if ($912) {
   $913 = (_malloc(548)|0);
   $914 = ($913|0)==(0|0);
   if ($914) {
    $$0$i75152 = 0;
   } else {
    HEAP32[$913>>2] = 4;
    $915 = ((($913)) + 8|0);
    HEAP32[$915>>2] = 64;
    $916 = ((($913)) + 16|0);
    HEAP32[$916>>2] = 65;
    $917 = ((($913)) + 20|0);
    HEAP32[$917>>2] = 66;
    $918 = (_cram_encoder_init(1,0,1,(42),$910)|0);
    $919 = ((($913)) + 40|0);
    HEAP32[$919>>2] = $918;
    $920 = (_cram_encoder_init(1,0,4,(37),$910)|0);
    $921 = ((($913)) + 44|0);
    HEAP32[$921>>2] = $920;
    $922 = ((($913)) + 4|0);
    HEAP32[$922>>2] = 0;
    $$0$i75152 = $913;
   }
   $923 = ((($1)) + 496|0);
   HEAP32[$923>>2] = $$0$i75152;
  } else {
   $924 = ((($1)) + 496|0);
   HEAP32[$924>>2] = 0;
  }
  $925 = ((($c)) + 276|0);
  $926 = HEAP32[$925>>2]|0;
  $927 = (_cram_stats_encoding($926)|0);
  $928 = HEAP32[$925>>2]|0;
  $929 = HEAP32[$558>>2]|0;
  $930 = ($928|0)==(0|0);
  if ($930) {
   label = 426;
  } else {
   $931 = ((($928)) + 4104|0);
   $932 = HEAP32[$931>>2]|0;
   $933 = ($932|0)==(0);
   if ($933) {
    $$0$i78 = 0;
   } else {
    label = 426;
   }
  }
  do {
   if ((label|0) == 426) {
    $934 = 122 >>> $927;
    $935 = $934 & 1;
    $936 = ($935|0)==(0);
    if (!($936)) {
     $937 = (608 + ($927<<2)|0);
     $938 = HEAP32[$937>>2]|0;
     $939 = (FUNCTION_TABLE_iiiii[$938 & 127]($928,3,0,$929)|0);
     $940 = ($939|0)==(0|0);
     if ($940) {
      $$0$i78 = 0;
      break;
     }
     $941 = ((($939)) + 4|0);
     HEAP32[$941>>2] = 0;
     $$0$i78 = $939;
     break;
    }
    do {
     switch ($927|0) {
     case 1:  {
      $$0$i$i76 = 22604;
      HEAP32[$vararg_buffer54>>2] = $$0$i$i76;
      _fprintf(9772,22691,$vararg_buffer54);
      _abort();
      // unreachable;
      break;
     }
     case 2:  {
      $$0$i$i76 = 22613;
      HEAP32[$vararg_buffer54>>2] = $$0$i$i76;
      _fprintf(9772,22691,$vararg_buffer54);
      _abort();
      // unreachable;
      break;
     }
     case 3:  {
      $$0$i$i76 = 22620;
      HEAP32[$vararg_buffer54>>2] = $$0$i$i76;
      _fprintf(9772,22691,$vararg_buffer54);
      _abort();
      // unreachable;
      break;
     }
     case 4:  {
      $$0$i$i76 = 22628;
      HEAP32[$vararg_buffer54>>2] = $$0$i$i76;
      _fprintf(9772,22691,$vararg_buffer54);
      _abort();
      // unreachable;
      break;
     }
     case 5:  {
      $$0$i$i76 = 22643;
      HEAP32[$vararg_buffer54>>2] = $$0$i$i76;
      _fprintf(9772,22691,$vararg_buffer54);
      _abort();
      // unreachable;
      break;
     }
     case 6:  {
      $$0$i$i76 = 22659;
      HEAP32[$vararg_buffer54>>2] = $$0$i$i76;
      _fprintf(9772,22691,$vararg_buffer54);
      _abort();
      // unreachable;
      break;
     }
     case 7:  {
      $$0$i$i76 = 22664;
      HEAP32[$vararg_buffer54>>2] = $$0$i$i76;
      _fprintf(9772,22691,$vararg_buffer54);
      _abort();
      // unreachable;
      break;
     }
     case 8:  {
      $$0$i$i76 = 22671;
      HEAP32[$vararg_buffer54>>2] = $$0$i$i76;
      _fprintf(9772,22691,$vararg_buffer54);
      _abort();
      // unreachable;
      break;
     }
     case 9:  {
      $$0$i$i76 = 22683;
      HEAP32[$vararg_buffer54>>2] = $$0$i$i76;
      _fprintf(9772,22691,$vararg_buffer54);
      _abort();
      // unreachable;
      break;
     }
     case 0:  {
      $$0$i$i76 = 22599;
      HEAP32[$vararg_buffer54>>2] = $$0$i$i76;
      _fprintf(9772,22691,$vararg_buffer54);
      _abort();
      // unreachable;
      break;
     }
     default: {
      $$0$i$i76 = 22689;
      HEAP32[$vararg_buffer54>>2] = $$0$i$i76;
      _fprintf(9772,22691,$vararg_buffer54);
      _abort();
      // unreachable;
     }
     }
    } while(0);
   }
  } while(0);
  $942 = ((($1)) + 472|0);
  HEAP32[$942>>2] = $$0$i78;
  $943 = HEAP32[$558>>2]|0;
  $$mask = $943 & -256;
  $944 = ($$mask|0)==(256);
  if ($944) {
   $945 = ((($1)) + 476|0);
   $946 = ((($1)) + 404|0);
   HEAP32[$946>>2] = 0;
   $947 = ((($c)) + 328|0);
   ;HEAP32[$945>>2]=0|0;HEAP32[$945+4>>2]=0|0;HEAP32[$945+8>>2]=0|0;HEAP32[$945+12>>2]=0|0;HEAP32[$945+16>>2]=0|0;
   $948 = HEAP32[$947>>2]|0;
   $949 = (_cram_stats_encoding($948)|0);
   $950 = HEAP32[$947>>2]|0;
   $951 = HEAP32[$558>>2]|0;
   $952 = ($950|0)==(0|0);
   if ($952) {
    label = 444;
   } else {
    $953 = ((($950)) + 4104|0);
    $954 = HEAP32[$953>>2]|0;
    $955 = ($954|0)==(0);
    if ($955) {
     $$0$i82 = 0;
    } else {
     label = 444;
    }
   }
   do {
    if ((label|0) == 444) {
     $956 = 122 >>> $949;
     $957 = $956 & 1;
     $958 = ($957|0)==(0);
     if (!($958)) {
      $959 = (608 + ($949<<2)|0);
      $960 = HEAP32[$959>>2]|0;
      $961 = (FUNCTION_TABLE_iiiii[$960 & 127]($950,3,0,$951)|0);
      $962 = ($961|0)==(0|0);
      if ($962) {
       $$0$i82 = 0;
       break;
      }
      $963 = ((($961)) + 4|0);
      HEAP32[$963>>2] = 0;
      $$0$i82 = $961;
      break;
     }
     do {
      switch ($949|0) {
      case 1:  {
       $$0$i$i80 = 22604;
       HEAP32[$vararg_buffer57>>2] = $$0$i$i80;
       _fprintf(9772,22691,$vararg_buffer57);
       _abort();
       // unreachable;
       break;
      }
      case 2:  {
       $$0$i$i80 = 22613;
       HEAP32[$vararg_buffer57>>2] = $$0$i$i80;
       _fprintf(9772,22691,$vararg_buffer57);
       _abort();
       // unreachable;
       break;
      }
      case 3:  {
       $$0$i$i80 = 22620;
       HEAP32[$vararg_buffer57>>2] = $$0$i$i80;
       _fprintf(9772,22691,$vararg_buffer57);
       _abort();
       // unreachable;
       break;
      }
      case 4:  {
       $$0$i$i80 = 22628;
       HEAP32[$vararg_buffer57>>2] = $$0$i$i80;
       _fprintf(9772,22691,$vararg_buffer57);
       _abort();
       // unreachable;
       break;
      }
      case 5:  {
       $$0$i$i80 = 22643;
       HEAP32[$vararg_buffer57>>2] = $$0$i$i80;
       _fprintf(9772,22691,$vararg_buffer57);
       _abort();
       // unreachable;
       break;
      }
      case 6:  {
       $$0$i$i80 = 22659;
       HEAP32[$vararg_buffer57>>2] = $$0$i$i80;
       _fprintf(9772,22691,$vararg_buffer57);
       _abort();
       // unreachable;
       break;
      }
      case 7:  {
       $$0$i$i80 = 22664;
       HEAP32[$vararg_buffer57>>2] = $$0$i$i80;
       _fprintf(9772,22691,$vararg_buffer57);
       _abort();
       // unreachable;
       break;
      }
      case 8:  {
       $$0$i$i80 = 22671;
       HEAP32[$vararg_buffer57>>2] = $$0$i$i80;
       _fprintf(9772,22691,$vararg_buffer57);
       _abort();
       // unreachable;
       break;
      }
      case 9:  {
       $$0$i$i80 = 22683;
       HEAP32[$vararg_buffer57>>2] = $$0$i$i80;
       _fprintf(9772,22691,$vararg_buffer57);
       _abort();
       // unreachable;
       break;
      }
      case 0:  {
       $$0$i$i80 = 22599;
       HEAP32[$vararg_buffer57>>2] = $$0$i$i80;
       _fprintf(9772,22691,$vararg_buffer57);
       _abort();
       // unreachable;
       break;
      }
      default: {
       $$0$i$i80 = 22689;
       HEAP32[$vararg_buffer57>>2] = $$0$i$i80;
       _fprintf(9772,22691,$vararg_buffer57);
       _abort();
       // unreachable;
      }
      }
     } while(0);
    }
   } while(0);
   $964 = ((($1)) + 524|0);
   HEAP32[$964>>2] = $$0$i82;
   $965 = ((($c)) + 308|0);
   $966 = HEAP32[$965>>2]|0;
   $967 = (_cram_stats_encoding($966)|0);
   $968 = HEAP32[$965>>2]|0;
   $969 = HEAP32[$558>>2]|0;
   $970 = ($968|0)==(0|0);
   if ($970) {
    label = 461;
   } else {
    $971 = ((($968)) + 4104|0);
    $972 = HEAP32[$971>>2]|0;
    $973 = ($972|0)==(0);
    if ($973) {
     $$0$i86 = 0;
    } else {
     label = 461;
    }
   }
   do {
    if ((label|0) == 461) {
     $974 = 122 >>> $967;
     $975 = $974 & 1;
     $976 = ($975|0)==(0);
     if (!($976)) {
      $977 = (608 + ($967<<2)|0);
      $978 = HEAP32[$977>>2]|0;
      $979 = (FUNCTION_TABLE_iiiii[$978 & 127]($968,1,0,$969)|0);
      $980 = ($979|0)==(0|0);
      if ($980) {
       $$0$i86 = 0;
       break;
      }
      $981 = ((($979)) + 4|0);
      HEAP32[$981>>2] = 0;
      $$0$i86 = $979;
      break;
     }
     do {
      switch ($967|0) {
      case 1:  {
       $$0$i$i84 = 22604;
       HEAP32[$vararg_buffer60>>2] = $$0$i$i84;
       _fprintf(9772,22691,$vararg_buffer60);
       _abort();
       // unreachable;
       break;
      }
      case 2:  {
       $$0$i$i84 = 22613;
       HEAP32[$vararg_buffer60>>2] = $$0$i$i84;
       _fprintf(9772,22691,$vararg_buffer60);
       _abort();
       // unreachable;
       break;
      }
      case 3:  {
       $$0$i$i84 = 22620;
       HEAP32[$vararg_buffer60>>2] = $$0$i$i84;
       _fprintf(9772,22691,$vararg_buffer60);
       _abort();
       // unreachable;
       break;
      }
      case 4:  {
       $$0$i$i84 = 22628;
       HEAP32[$vararg_buffer60>>2] = $$0$i$i84;
       _fprintf(9772,22691,$vararg_buffer60);
       _abort();
       // unreachable;
       break;
      }
      case 5:  {
       $$0$i$i84 = 22643;
       HEAP32[$vararg_buffer60>>2] = $$0$i$i84;
       _fprintf(9772,22691,$vararg_buffer60);
       _abort();
       // unreachable;
       break;
      }
      case 6:  {
       $$0$i$i84 = 22659;
       HEAP32[$vararg_buffer60>>2] = $$0$i$i84;
       _fprintf(9772,22691,$vararg_buffer60);
       _abort();
       // unreachable;
       break;
      }
      case 7:  {
       $$0$i$i84 = 22664;
       HEAP32[$vararg_buffer60>>2] = $$0$i$i84;
       _fprintf(9772,22691,$vararg_buffer60);
       _abort();
       // unreachable;
       break;
      }
      case 8:  {
       $$0$i$i84 = 22671;
       HEAP32[$vararg_buffer60>>2] = $$0$i$i84;
       _fprintf(9772,22691,$vararg_buffer60);
       _abort();
       // unreachable;
       break;
      }
      case 9:  {
       $$0$i$i84 = 22683;
       HEAP32[$vararg_buffer60>>2] = $$0$i$i84;
       _fprintf(9772,22691,$vararg_buffer60);
       _abort();
       // unreachable;
       break;
      }
      case 0:  {
       $$0$i$i84 = 22599;
       HEAP32[$vararg_buffer60>>2] = $$0$i$i84;
       _fprintf(9772,22691,$vararg_buffer60);
       _abort();
       // unreachable;
       break;
      }
      default: {
       $$0$i$i84 = 22689;
       HEAP32[$vararg_buffer60>>2] = $$0$i$i84;
       _fprintf(9772,22691,$vararg_buffer60);
       _abort();
       // unreachable;
      }
      }
     } while(0);
    }
   } while(0);
   $982 = ((($1)) + 504|0);
   HEAP32[$982>>2] = $$0$i86;
  } else {
   $983 = ((($1)) + 524|0);
   HEAP32[$983>>2] = 0;
   $984 = ((($1)) + 504|0);
   HEAP32[$984>>2] = 0;
   $985 = ((($c)) + 280|0);
   $986 = HEAP32[$985>>2]|0;
   $987 = (_cram_stats_encoding($986)|0);
   $988 = HEAP32[$985>>2]|0;
   $989 = HEAP32[$558>>2]|0;
   $990 = ($988|0)==(0|0);
   if ($990) {
    label = 479;
   } else {
    $991 = ((($988)) + 4104|0);
    $992 = HEAP32[$991>>2]|0;
    $993 = ($992|0)==(0);
    if ($993) {
     $$0$i90 = 0;
    } else {
     label = 479;
    }
   }
   do {
    if ((label|0) == 479) {
     $994 = 122 >>> $987;
     $995 = $994 & 1;
     $996 = ($995|0)==(0);
     if (!($996)) {
      $997 = (608 + ($987<<2)|0);
      $998 = HEAP32[$997>>2]|0;
      $999 = (FUNCTION_TABLE_iiiii[$998 & 127]($988,1,0,$989)|0);
      $1000 = ($999|0)==(0|0);
      if ($1000) {
       $$0$i90 = 0;
       break;
      }
      $1001 = ((($999)) + 4|0);
      HEAP32[$1001>>2] = 0;
      $$0$i90 = $999;
      break;
     }
     do {
      switch ($987|0) {
      case 1:  {
       $$0$i$i88 = 22604;
       HEAP32[$vararg_buffer63>>2] = $$0$i$i88;
       _fprintf(9772,22691,$vararg_buffer63);
       _abort();
       // unreachable;
       break;
      }
      case 2:  {
       $$0$i$i88 = 22613;
       HEAP32[$vararg_buffer63>>2] = $$0$i$i88;
       _fprintf(9772,22691,$vararg_buffer63);
       _abort();
       // unreachable;
       break;
      }
      case 3:  {
       $$0$i$i88 = 22620;
       HEAP32[$vararg_buffer63>>2] = $$0$i$i88;
       _fprintf(9772,22691,$vararg_buffer63);
       _abort();
       // unreachable;
       break;
      }
      case 4:  {
       $$0$i$i88 = 22628;
       HEAP32[$vararg_buffer63>>2] = $$0$i$i88;
       _fprintf(9772,22691,$vararg_buffer63);
       _abort();
       // unreachable;
       break;
      }
      case 5:  {
       $$0$i$i88 = 22643;
       HEAP32[$vararg_buffer63>>2] = $$0$i$i88;
       _fprintf(9772,22691,$vararg_buffer63);
       _abort();
       // unreachable;
       break;
      }
      case 6:  {
       $$0$i$i88 = 22659;
       HEAP32[$vararg_buffer63>>2] = $$0$i$i88;
       _fprintf(9772,22691,$vararg_buffer63);
       _abort();
       // unreachable;
       break;
      }
      case 7:  {
       $$0$i$i88 = 22664;
       HEAP32[$vararg_buffer63>>2] = $$0$i$i88;
       _fprintf(9772,22691,$vararg_buffer63);
       _abort();
       // unreachable;
       break;
      }
      case 8:  {
       $$0$i$i88 = 22671;
       HEAP32[$vararg_buffer63>>2] = $$0$i$i88;
       _fprintf(9772,22691,$vararg_buffer63);
       _abort();
       // unreachable;
       break;
      }
      case 9:  {
       $$0$i$i88 = 22683;
       HEAP32[$vararg_buffer63>>2] = $$0$i$i88;
       _fprintf(9772,22691,$vararg_buffer63);
       _abort();
       // unreachable;
       break;
      }
      case 0:  {
       $$0$i$i88 = 22599;
       HEAP32[$vararg_buffer63>>2] = $$0$i$i88;
       _fprintf(9772,22691,$vararg_buffer63);
       _abort();
       // unreachable;
       break;
      }
      default: {
       $$0$i$i88 = 22689;
       HEAP32[$vararg_buffer63>>2] = $$0$i$i88;
       _fprintf(9772,22691,$vararg_buffer63);
       _abort();
       // unreachable;
      }
      }
     } while(0);
    }
   } while(0);
   $1002 = ((($1)) + 476|0);
   HEAP32[$1002>>2] = $$0$i90;
   $1003 = HEAP32[$547>>2]|0;
   $1004 = (_cram_stats_encoding($1003)|0);
   $1005 = HEAP32[$547>>2]|0;
   $1006 = HEAP32[$558>>2]|0;
   $1007 = ($1005|0)==(0|0);
   if ($1007) {
    label = 496;
   } else {
    $1008 = ((($1005)) + 4104|0);
    $1009 = HEAP32[$1008>>2]|0;
    $1010 = ($1009|0)==(0);
    if ($1010) {
     $$0$i94 = 0;
    } else {
     label = 496;
    }
   }
   do {
    if ((label|0) == 496) {
     $1011 = 122 >>> $1004;
     $1012 = $1011 & 1;
     $1013 = ($1012|0)==(0);
     if (!($1013)) {
      $1014 = (608 + ($1004<<2)|0);
      $1015 = HEAP32[$1014>>2]|0;
      $1016 = (FUNCTION_TABLE_iiiii[$1015 & 127]($1005,1,0,$1006)|0);
      $1017 = ($1016|0)==(0|0);
      if ($1017) {
       $$0$i94 = 0;
       break;
      }
      $1018 = ((($1016)) + 4|0);
      HEAP32[$1018>>2] = 0;
      $$0$i94 = $1016;
      break;
     }
     do {
      switch ($1004|0) {
      case 1:  {
       $$0$i$i92 = 22604;
       HEAP32[$vararg_buffer66>>2] = $$0$i$i92;
       _fprintf(9772,22691,$vararg_buffer66);
       _abort();
       // unreachable;
       break;
      }
      case 2:  {
       $$0$i$i92 = 22613;
       HEAP32[$vararg_buffer66>>2] = $$0$i$i92;
       _fprintf(9772,22691,$vararg_buffer66);
       _abort();
       // unreachable;
       break;
      }
      case 3:  {
       $$0$i$i92 = 22620;
       HEAP32[$vararg_buffer66>>2] = $$0$i$i92;
       _fprintf(9772,22691,$vararg_buffer66);
       _abort();
       // unreachable;
       break;
      }
      case 4:  {
       $$0$i$i92 = 22628;
       HEAP32[$vararg_buffer66>>2] = $$0$i$i92;
       _fprintf(9772,22691,$vararg_buffer66);
       _abort();
       // unreachable;
       break;
      }
      case 5:  {
       $$0$i$i92 = 22643;
       HEAP32[$vararg_buffer66>>2] = $$0$i$i92;
       _fprintf(9772,22691,$vararg_buffer66);
       _abort();
       // unreachable;
       break;
      }
      case 6:  {
       $$0$i$i92 = 22659;
       HEAP32[$vararg_buffer66>>2] = $$0$i$i92;
       _fprintf(9772,22691,$vararg_buffer66);
       _abort();
       // unreachable;
       break;
      }
      case 7:  {
       $$0$i$i92 = 22664;
       HEAP32[$vararg_buffer66>>2] = $$0$i$i92;
       _fprintf(9772,22691,$vararg_buffer66);
       _abort();
       // unreachable;
       break;
      }
      case 8:  {
       $$0$i$i92 = 22671;
       HEAP32[$vararg_buffer66>>2] = $$0$i$i92;
       _fprintf(9772,22691,$vararg_buffer66);
       _abort();
       // unreachable;
       break;
      }
      case 9:  {
       $$0$i$i92 = 22683;
       HEAP32[$vararg_buffer66>>2] = $$0$i$i92;
       _fprintf(9772,22691,$vararg_buffer66);
       _abort();
       // unreachable;
       break;
      }
      case 0:  {
       $$0$i$i92 = 22599;
       HEAP32[$vararg_buffer66>>2] = $$0$i$i92;
       _fprintf(9772,22691,$vararg_buffer66);
       _abort();
       // unreachable;
       break;
      }
      default: {
       $$0$i$i92 = 22689;
       HEAP32[$vararg_buffer66>>2] = $$0$i$i92;
       _fprintf(9772,22691,$vararg_buffer66);
       _abort();
       // unreachable;
      }
      }
     } while(0);
    }
   } while(0);
   $1019 = ((($1)) + 480|0);
   HEAP32[$1019>>2] = $$0$i94;
   $1020 = ((($c)) + 288|0);
   $1021 = HEAP32[$1020>>2]|0;
   $1022 = (_cram_stats_encoding($1021)|0);
   $1023 = HEAP32[$1020>>2]|0;
   $1024 = HEAP32[$558>>2]|0;
   $1025 = ($1023|0)==(0|0);
   if ($1025) {
    label = 513;
   } else {
    $1026 = ((($1023)) + 4104|0);
    $1027 = HEAP32[$1026>>2]|0;
    $1028 = ($1027|0)==(0);
    if ($1028) {
     $$0$i98 = 0;
    } else {
     label = 513;
    }
   }
   do {
    if ((label|0) == 513) {
     $1029 = 122 >>> $1022;
     $1030 = $1029 & 1;
     $1031 = ($1030|0)==(0);
     if (!($1031)) {
      $1032 = (608 + ($1022<<2)|0);
      $1033 = HEAP32[$1032>>2]|0;
      $1034 = (FUNCTION_TABLE_iiiii[$1033 & 127]($1023,1,0,$1024)|0);
      $1035 = ($1034|0)==(0|0);
      if ($1035) {
       $$0$i98 = 0;
       break;
      }
      $1036 = ((($1034)) + 4|0);
      HEAP32[$1036>>2] = 0;
      $$0$i98 = $1034;
      break;
     }
     do {
      switch ($1022|0) {
      case 1:  {
       $$0$i$i96 = 22604;
       HEAP32[$vararg_buffer69>>2] = $$0$i$i96;
       _fprintf(9772,22691,$vararg_buffer69);
       _abort();
       // unreachable;
       break;
      }
      case 2:  {
       $$0$i$i96 = 22613;
       HEAP32[$vararg_buffer69>>2] = $$0$i$i96;
       _fprintf(9772,22691,$vararg_buffer69);
       _abort();
       // unreachable;
       break;
      }
      case 3:  {
       $$0$i$i96 = 22620;
       HEAP32[$vararg_buffer69>>2] = $$0$i$i96;
       _fprintf(9772,22691,$vararg_buffer69);
       _abort();
       // unreachable;
       break;
      }
      case 4:  {
       $$0$i$i96 = 22628;
       HEAP32[$vararg_buffer69>>2] = $$0$i$i96;
       _fprintf(9772,22691,$vararg_buffer69);
       _abort();
       // unreachable;
       break;
      }
      case 5:  {
       $$0$i$i96 = 22643;
       HEAP32[$vararg_buffer69>>2] = $$0$i$i96;
       _fprintf(9772,22691,$vararg_buffer69);
       _abort();
       // unreachable;
       break;
      }
      case 6:  {
       $$0$i$i96 = 22659;
       HEAP32[$vararg_buffer69>>2] = $$0$i$i96;
       _fprintf(9772,22691,$vararg_buffer69);
       _abort();
       // unreachable;
       break;
      }
      case 7:  {
       $$0$i$i96 = 22664;
       HEAP32[$vararg_buffer69>>2] = $$0$i$i96;
       _fprintf(9772,22691,$vararg_buffer69);
       _abort();
       // unreachable;
       break;
      }
      case 8:  {
       $$0$i$i96 = 22671;
       HEAP32[$vararg_buffer69>>2] = $$0$i$i96;
       _fprintf(9772,22691,$vararg_buffer69);
       _abort();
       // unreachable;
       break;
      }
      case 9:  {
       $$0$i$i96 = 22683;
       HEAP32[$vararg_buffer69>>2] = $$0$i$i96;
       _fprintf(9772,22691,$vararg_buffer69);
       _abort();
       // unreachable;
       break;
      }
      case 0:  {
       $$0$i$i96 = 22599;
       HEAP32[$vararg_buffer69>>2] = $$0$i$i96;
       _fprintf(9772,22691,$vararg_buffer69);
       _abort();
       // unreachable;
       break;
      }
      default: {
       $$0$i$i96 = 22689;
       HEAP32[$vararg_buffer69>>2] = $$0$i$i96;
       _fprintf(9772,22691,$vararg_buffer69);
       _abort();
       // unreachable;
      }
      }
     } while(0);
    }
   } while(0);
   $1037 = ((($1)) + 484|0);
   HEAP32[$1037>>2] = $$0$i98;
   $1038 = ((($c)) + 292|0);
   $1039 = HEAP32[$1038>>2]|0;
   $1040 = (_cram_stats_encoding($1039)|0);
   $1041 = HEAP32[$1038>>2]|0;
   $1042 = HEAP32[$558>>2]|0;
   $1043 = ($1041|0)==(0|0);
   if ($1043) {
    label = 530;
   } else {
    $1044 = ((($1041)) + 4104|0);
    $1045 = HEAP32[$1044>>2]|0;
    $1046 = ($1045|0)==(0);
    if ($1046) {
     $$0$i102 = 0;
    } else {
     label = 530;
    }
   }
   do {
    if ((label|0) == 530) {
     $1047 = 122 >>> $1040;
     $1048 = $1047 & 1;
     $1049 = ($1048|0)==(0);
     if (!($1049)) {
      $1050 = (608 + ($1040<<2)|0);
      $1051 = HEAP32[$1050>>2]|0;
      $1052 = (FUNCTION_TABLE_iiiii[$1051 & 127]($1041,1,0,$1042)|0);
      $1053 = ($1052|0)==(0|0);
      if ($1053) {
       $$0$i102 = 0;
       break;
      }
      $1054 = ((($1052)) + 4|0);
      HEAP32[$1054>>2] = 0;
      $$0$i102 = $1052;
      break;
     }
     do {
      switch ($1040|0) {
      case 1:  {
       $$0$i$i100 = 22604;
       HEAP32[$vararg_buffer72>>2] = $$0$i$i100;
       _fprintf(9772,22691,$vararg_buffer72);
       _abort();
       // unreachable;
       break;
      }
      case 2:  {
       $$0$i$i100 = 22613;
       HEAP32[$vararg_buffer72>>2] = $$0$i$i100;
       _fprintf(9772,22691,$vararg_buffer72);
       _abort();
       // unreachable;
       break;
      }
      case 3:  {
       $$0$i$i100 = 22620;
       HEAP32[$vararg_buffer72>>2] = $$0$i$i100;
       _fprintf(9772,22691,$vararg_buffer72);
       _abort();
       // unreachable;
       break;
      }
      case 4:  {
       $$0$i$i100 = 22628;
       HEAP32[$vararg_buffer72>>2] = $$0$i$i100;
       _fprintf(9772,22691,$vararg_buffer72);
       _abort();
       // unreachable;
       break;
      }
      case 5:  {
       $$0$i$i100 = 22643;
       HEAP32[$vararg_buffer72>>2] = $$0$i$i100;
       _fprintf(9772,22691,$vararg_buffer72);
       _abort();
       // unreachable;
       break;
      }
      case 6:  {
       $$0$i$i100 = 22659;
       HEAP32[$vararg_buffer72>>2] = $$0$i$i100;
       _fprintf(9772,22691,$vararg_buffer72);
       _abort();
       // unreachable;
       break;
      }
      case 7:  {
       $$0$i$i100 = 22664;
       HEAP32[$vararg_buffer72>>2] = $$0$i$i100;
       _fprintf(9772,22691,$vararg_buffer72);
       _abort();
       // unreachable;
       break;
      }
      case 8:  {
       $$0$i$i100 = 22671;
       HEAP32[$vararg_buffer72>>2] = $$0$i$i100;
       _fprintf(9772,22691,$vararg_buffer72);
       _abort();
       // unreachable;
       break;
      }
      case 9:  {
       $$0$i$i100 = 22683;
       HEAP32[$vararg_buffer72>>2] = $$0$i$i100;
       _fprintf(9772,22691,$vararg_buffer72);
       _abort();
       // unreachable;
       break;
      }
      case 0:  {
       $$0$i$i100 = 22599;
       HEAP32[$vararg_buffer72>>2] = $$0$i$i100;
       _fprintf(9772,22691,$vararg_buffer72);
       _abort();
       // unreachable;
       break;
      }
      default: {
       $$0$i$i100 = 22689;
       HEAP32[$vararg_buffer72>>2] = $$0$i$i100;
       _fprintf(9772,22691,$vararg_buffer72);
       _abort();
       // unreachable;
      }
      }
     } while(0);
    }
   } while(0);
   $1055 = ((($1)) + 488|0);
   HEAP32[$1055>>2] = $$0$i102;
   $1056 = ((($c)) + 296|0);
   $1057 = HEAP32[$1056>>2]|0;
   $1058 = (_cram_stats_encoding($1057)|0);
   $1059 = HEAP32[$1056>>2]|0;
   $1060 = HEAP32[$558>>2]|0;
   $1061 = ($1059|0)==(0|0);
   if ($1061) {
    label = 547;
   } else {
    $1062 = ((($1059)) + 4104|0);
    $1063 = HEAP32[$1062>>2]|0;
    $1064 = ($1063|0)==(0);
    if ($1064) {
     $$0$i106 = 0;
    } else {
     label = 547;
    }
   }
   do {
    if ((label|0) == 547) {
     $1065 = 122 >>> $1058;
     $1066 = $1065 & 1;
     $1067 = ($1066|0)==(0);
     if (!($1067)) {
      $1068 = (608 + ($1058<<2)|0);
      $1069 = HEAP32[$1068>>2]|0;
      $1070 = (FUNCTION_TABLE_iiiii[$1069 & 127]($1059,1,0,$1060)|0);
      $1071 = ($1070|0)==(0|0);
      if ($1071) {
       $$0$i106 = 0;
       break;
      }
      $1072 = ((($1070)) + 4|0);
      HEAP32[$1072>>2] = 0;
      $$0$i106 = $1070;
      break;
     }
     do {
      switch ($1058|0) {
      case 1:  {
       $$0$i$i104 = 22604;
       HEAP32[$vararg_buffer75>>2] = $$0$i$i104;
       _fprintf(9772,22691,$vararg_buffer75);
       _abort();
       // unreachable;
       break;
      }
      case 2:  {
       $$0$i$i104 = 22613;
       HEAP32[$vararg_buffer75>>2] = $$0$i$i104;
       _fprintf(9772,22691,$vararg_buffer75);
       _abort();
       // unreachable;
       break;
      }
      case 3:  {
       $$0$i$i104 = 22620;
       HEAP32[$vararg_buffer75>>2] = $$0$i$i104;
       _fprintf(9772,22691,$vararg_buffer75);
       _abort();
       // unreachable;
       break;
      }
      case 4:  {
       $$0$i$i104 = 22628;
       HEAP32[$vararg_buffer75>>2] = $$0$i$i104;
       _fprintf(9772,22691,$vararg_buffer75);
       _abort();
       // unreachable;
       break;
      }
      case 5:  {
       $$0$i$i104 = 22643;
       HEAP32[$vararg_buffer75>>2] = $$0$i$i104;
       _fprintf(9772,22691,$vararg_buffer75);
       _abort();
       // unreachable;
       break;
      }
      case 6:  {
       $$0$i$i104 = 22659;
       HEAP32[$vararg_buffer75>>2] = $$0$i$i104;
       _fprintf(9772,22691,$vararg_buffer75);
       _abort();
       // unreachable;
       break;
      }
      case 7:  {
       $$0$i$i104 = 22664;
       HEAP32[$vararg_buffer75>>2] = $$0$i$i104;
       _fprintf(9772,22691,$vararg_buffer75);
       _abort();
       // unreachable;
       break;
      }
      case 8:  {
       $$0$i$i104 = 22671;
       HEAP32[$vararg_buffer75>>2] = $$0$i$i104;
       _fprintf(9772,22691,$vararg_buffer75);
       _abort();
       // unreachable;
       break;
      }
      case 9:  {
       $$0$i$i104 = 22683;
       HEAP32[$vararg_buffer75>>2] = $$0$i$i104;
       _fprintf(9772,22691,$vararg_buffer75);
       _abort();
       // unreachable;
       break;
      }
      case 0:  {
       $$0$i$i104 = 22599;
       HEAP32[$vararg_buffer75>>2] = $$0$i$i104;
       _fprintf(9772,22691,$vararg_buffer75);
       _abort();
       // unreachable;
       break;
      }
      default: {
       $$0$i$i104 = 22689;
       HEAP32[$vararg_buffer75>>2] = $$0$i$i104;
       _fprintf(9772,22691,$vararg_buffer75);
       _abort();
       // unreachable;
      }
      }
     } while(0);
    }
   } while(0);
   $1073 = ((($1)) + 492|0);
   HEAP32[$1073>>2] = $$0$i106;
   $1074 = (_malloc(548)|0);
   $1075 = ($1074|0)==(0|0);
   if ($1075) {
    $$0$i110153 = 0;
   } else {
    HEAP32[$1074>>2] = 5;
    $1076 = ((($1074)) + 8|0);
    HEAP32[$1076>>2] = 67;
    $1077 = ((($1074)) + 16|0);
    HEAP32[$1077>>2] = 68;
    $1078 = ((($1074)) + 20|0);
    HEAP32[$1078>>2] = 69;
    $1079 = ((($1074)) + 24|0);
    HEAP8[$1079>>0] = 0;
    $1080 = ((($1074)) + 28|0);
    HEAP32[$1080>>2] = 14;
    $1081 = ((($1074)) + 4|0);
    HEAP32[$1081>>2] = 0;
    $$0$i110153 = $1074;
   }
   $1082 = ((($1)) + 404|0);
   HEAP32[$1082>>2] = $$0$i110153;
  }
  $1083 = (_malloc(548)|0);
  $1084 = ($1083|0)==(0|0);
  if ($1084) {
   $$0$i113154 = 0;
  } else {
   HEAP32[$1083>>2] = 5;
   $1085 = ((($1083)) + 8|0);
   HEAP32[$1085>>2] = 67;
   $1086 = ((($1083)) + 16|0);
   HEAP32[$1086>>2] = 68;
   $1087 = ((($1083)) + 20|0);
   HEAP32[$1087>>2] = 69;
   $1088 = ((($1083)) + 24|0);
   HEAP8[$1088>>0] = 0;
   $1089 = ((($1083)) + 28|0);
   HEAP32[$1089>>2] = 13;
   $1090 = ((($1083)) + 4|0);
   HEAP32[$1090>>2] = 0;
   $$0$i113154 = $1083;
  }
  $1091 = ((($1)) + 400|0);
  HEAP32[$1091>>2] = $$0$i113154;
  $1092 = (_malloc(548)|0);
  $1093 = ($1092|0)==(0|0);
  if ($1093) {
   $$0$i117155 = 0;
  } else {
   HEAP32[$1092>>2] = 1;
   $1094 = ((($1092)) + 8|0);
   HEAP32[$1094>>2] = 70;
   $1095 = ((($1092)) + 16|0);
   HEAP32[$1095>>2] = 71;
   $1096 = ((($1092)) + 20|0);
   HEAP32[$1096>>2] = 72;
   $1097 = ((($1092)) + 24|0);
   HEAP32[$1097>>2] = 12;
   $1098 = ((($1092)) + 4|0);
   HEAP32[$1098>>2] = 0;
   $$0$i117155 = $1092;
  }
  $1099 = ((($1)) + 396|0);
  HEAP32[$1099>>2] = $$0$i117155;
  $1100 = (_malloc(548)|0);
  $1101 = ($1100|0)==(0|0);
  if ($1101) {
   $$0$i120156 = 0;
  } else {
   HEAP32[$1100>>2] = 5;
   $1102 = ((($1100)) + 8|0);
   HEAP32[$1102>>2] = 67;
   $1103 = ((($1100)) + 16|0);
   HEAP32[$1103>>2] = 68;
   $1104 = ((($1100)) + 20|0);
   HEAP32[$1104>>2] = 69;
   $1105 = ((($1100)) + 24|0);
   HEAP8[$1105>>0] = 0;
   $1106 = ((($1100)) + 28|0);
   HEAP32[$1106>>2] = 11;
   $1107 = ((($1100)) + 4|0);
   HEAP32[$1107>>2] = 0;
   $$0$i120156 = $1100;
  }
  $1108 = ((($1)) + 392|0);
  HEAP32[$1108>>2] = $$0$i120156;
  $1109 = ((($fd)) + 272|0);
  $1110 = ((($fd)) + 284|0);
  $1111 = ((($c)) + 16|0);
  $1112 = ((($1)) + 504|0);
  $1113 = ((($c)) + 132|0);
  $1114 = ((($c)) + 128|0);
  $1115 = ((($1)) + 496|0);
  $1116 = ((($1)) + 416|0);
  $1117 = ((($1)) + 524|0);
  $1118 = ((($1)) + 484|0);
  $1119 = ((($1)) + 488|0);
  $1120 = ((($1)) + 492|0);
  $1121 = ((($1)) + 476|0);
  $1122 = ((($1)) + 480|0);
  $1123 = ((($fd)) + 76|0);
  $1124 = ((($fd)) + 296|0);
  $1125 = ((($fd)) + 300|0);
  $1126 = ((($fd)) + 304|0);
  $1127 = ((($fd)) + 132|0);
  $1128 = ((($fd)) + 124|0);
  $1129 = ((($fd)) + 160|0);
  $1130 = ((($fd)) + 128|0);
  $1131 = ((($fd)) + 200|0);
  $1132 = ((($fd)) + 228|0);
  $i$2 = 0;
  L971: while(1) {
   $1133 = HEAP32[$96>>2]|0;
   $1134 = ($i$2|0)<($1133|0);
   if (!($1134)) {
    label = 813;
    break;
   }
   $1135 = HEAP32[$1109>>2]|0;
   $1136 = ($1135|0)==(0);
   if (!($1136)) {
    HEAP32[$vararg_buffer78>>2] = $i$2;
    _fprintf(9772,18421,$vararg_buffer78);
   }
   $1137 = HEAP32[$95>>2]|0;
   $1138 = (($1137) + ($i$2<<2)|0);
   $1139 = HEAP32[$1138>>2]|0;
   $1140 = HEAP32[$1110>>2]|0;
   $1141 = ($1140|0)==(0);
   $$pre298 = HEAP32[$1139>>2]|0;
   if ($1141) {
    $1146 = 0;
   } else {
    $1142 = ((($$pre298)) + 4|0);
    $1143 = HEAP32[$1142>>2]|0;
    $1144 = ($1143|0)!=(-1);
    $1146 = $1144;
   }
   $1145 = $1146 ? 10 : -1;
   $1147 = ((($$pre298)) + 44|0);
   HEAP32[$1147>>2] = $1145;
   $1148 = HEAP32[$601>>2]|0;
   $1149 = ($1148|0)<(0);
   $1150 = $1149 << 31 >> 31;
   $1151 = $1111;
   $1152 = $1151;
   $1153 = HEAP32[$1152>>2]|0;
   $1154 = (($1151) + 4)|0;
   $1155 = $1154;
   $1156 = HEAP32[$1155>>2]|0;
   $1157 = (_i64Add(($1148|0),($1150|0),($1153|0),($1156|0))|0);
   $1158 = tempRet0;
   $1159 = HEAP32[$1139>>2]|0;
   $1160 = ((($1159)) + 24|0);
   $1161 = $1160;
   $1162 = $1161;
   HEAP32[$1162>>2] = $1157;
   $1163 = (($1161) + 4)|0;
   $1164 = $1163;
   HEAP32[$1164>>2] = $1158;
   $1165 = HEAP32[$1139>>2]|0;
   $1166 = ((($1165)) + 16|0);
   $1167 = HEAP32[$1166>>2]|0;
   $1168 = HEAP32[$601>>2]|0;
   $1169 = (($1168) + ($1167))|0;
   HEAP32[$601>>2] = $1169;
   $1170 = (_malloc(188)|0);
   $1171 = ($1170|0)==(0|0);
   do {
    if (!($1171)) {
     $1172 = ((($1170)) + -4|0);
     $1173 = HEAP32[$1172>>2]|0;
     $1174 = $1173 & 3;
     $1175 = ($1174|0)==(0);
     if ($1175) {
      break;
     }
     _memset(($1170|0),0,188)|0;
    }
   } while(0);
   $1176 = ((($1139)) + 8|0);
   HEAP32[$1176>>2] = $1170;
   $1177 = (_malloc(188)|0);
   $1178 = HEAP32[$1139>>2]|0;
   $1179 = ((($1178)) + 40|0);
   HEAP32[$1179>>2] = $1177;
   $1180 = HEAP32[$1176>>2]|0;
   $1181 = ($1180|0)==(0|0);
   if ($1181) {
    $$0 = -1;
    label = 1164;
    break;
   }
   $1182 = HEAP32[$1139>>2]|0;
   $1183 = ((($1182)) + 40|0);
   $1184 = HEAP32[$1183>>2]|0;
   $1185 = ($1184|0)==(0|0);
   if ($1185) {
    $$0 = -1;
    label = 1164;
    break;
   }
   $1186 = (_malloc(48)|0);
   $1187 = ($1186|0)==(0|0);
   if ($1187) {
    label = 583;
    break;
   }
   $1189 = ((($1186)) + 4|0);
   HEAP32[$1189>>2] = 0;
   HEAP32[$1186>>2] = 0;
   $1190 = ((($1186)) + 8|0);
   HEAP32[$1190>>2] = 5;
   $1191 = ((($1186)) + 12|0);
   HEAP32[$1191>>2] = 0;
   $1192 = ((($1186)) + 16|0);
   HEAP32[$1192>>2] = 0;
   $1193 = ((($1186)) + 20|0);
   HEAP32[$1193>>2] = 0;
   $1194 = ((($1186)) + 32|0);
   HEAP32[$1194>>2] = 0;
   $1195 = ((($1186)) + 36|0);
   HEAP32[$1195>>2] = 0;
   $1196 = ((($1186)) + 40|0);
   HEAP32[$1196>>2] = 0;
   $1197 = ((($1186)) + 44|0);
   HEAP32[$1197>>2] = 7;
   $1198 = HEAP32[$1176>>2]|0;
   HEAP32[$1198>>2] = $1186;
   $1199 = HEAP32[$558>>2]|0;
   $$mask$i = $1199 & -256;
   $1200 = ($$mask$i|0)==(256);
   do {
    if ($1200) {
     $1201 = HEAP32[$1112>>2]|0;
     $1202 = HEAP32[$1201>>2]|0;
     $1203 = ($1202|0)==(1);
     if (!($1203)) {
      $1221 = HEAP32[$1176>>2]|0;
      $1222 = HEAP32[$1221>>2]|0;
      $1223 = ((($1221)) + 156|0);
      HEAP32[$1223>>2] = $1222;
      break;
     }
     $1204 = (_malloc(48)|0);
     $1205 = ($1204|0)==(0|0);
     if ($1205) {
      label = 587;
      break L971;
     }
     $1208 = ((($1204)) + 4|0);
     HEAP32[$1208>>2] = 0;
     HEAP32[$1204>>2] = 0;
     $1209 = ((($1204)) + 8|0);
     HEAP32[$1209>>2] = 4;
     $1210 = ((($1204)) + 12|0);
     HEAP32[$1210>>2] = 39;
     $1211 = ((($1204)) + 16|0);
     HEAP32[$1211>>2] = 0;
     $1212 = ((($1204)) + 20|0);
     HEAP32[$1212>>2] = 0;
     $1213 = ((($1204)) + 32|0);
     HEAP32[$1213>>2] = 0;
     $1214 = ((($1204)) + 36|0);
     HEAP32[$1214>>2] = 0;
     $1215 = ((($1204)) + 40|0);
     HEAP32[$1215>>2] = 0;
     $1216 = ((($1204)) + 44|0);
     HEAP32[$1216>>2] = 7;
     $1217 = HEAP32[$1176>>2]|0;
     $1218 = ((($1217)) + 156|0);
     HEAP32[$1218>>2] = $1204;
     $1219 = HEAP32[$1112>>2]|0;
     $1220 = ((($1219)) + 24|0);
     HEAP32[$1220>>2] = 39;
    }
   } while(0);
   if ($1146) {
    $1224 = (_malloc(48)|0);
    $1225 = ($1224|0)==(0|0);
    if ($1225) {
     label = 592;
     break;
    }
    $1228 = ((($1224)) + 4|0);
    HEAP32[$1228>>2] = 0;
    HEAP32[$1224>>2] = 0;
    $1229 = ((($1224)) + 8|0);
    HEAP32[$1229>>2] = 4;
    $1230 = ((($1224)) + 12|0);
    HEAP32[$1230>>2] = 10;
    $1231 = ((($1224)) + 16|0);
    HEAP32[$1231>>2] = 0;
    $1232 = ((($1224)) + 20|0);
    HEAP32[$1232>>2] = 0;
    $1233 = ((($1224)) + 32|0);
    HEAP32[$1233>>2] = 0;
    $1234 = ((($1224)) + 36|0);
    HEAP32[$1234>>2] = 0;
    $1235 = ((($1224)) + 40|0);
    HEAP32[$1235>>2] = 0;
    $1236 = ((($1224)) + 44|0);
    HEAP32[$1236>>2] = 7;
    $1237 = HEAP32[$1176>>2]|0;
    $1238 = ((($1237)) + 40|0);
    HEAP32[$1238>>2] = $1224;
    $1239 = ((($1139)) + 144|0);
    HEAP32[$1239>>2] = 10;
    while(1) {
     $1240 = HEAP32[$1176>>2]|0;
     $1241 = ((($1240)) + 40|0);
     $1242 = HEAP32[$1241>>2]|0;
     $1243 = ((($1242)) + 36|0);
     $1244 = HEAP32[$1243>>2]|0;
     $1245 = ((($1242)) + 40|0);
     $1246 = HEAP32[$1245>>2]|0;
     $1247 = HEAP32[$1113>>2]|0;
     $1248 = HEAP32[$1114>>2]|0;
     $1249 = (($1247) - ($1248))|0;
     $1250 = (($1249) + 1)|0;
     $1251 = (($1246) + ($1250))|0;
     $1252 = ($1244>>>0)>($1251>>>0);
     if ($1252) {
      break;
     }
     $1253 = ($1244|0)==(0);
     $1254 = (+($1244>>>0));
     $1255 = $1254 * 1.5;
     $1256 = (~~(($1255))>>>0);
     $1257 = $1253 ? 1024 : $1256;
     HEAP32[$1243>>2] = $1257;
     $1258 = HEAP32[$1176>>2]|0;
     $1259 = ((($1258)) + 40|0);
     $1260 = HEAP32[$1259>>2]|0;
     $1261 = ((($1260)) + 32|0);
     $1262 = HEAP32[$1261>>2]|0;
     $1263 = ((($1260)) + 36|0);
     $1264 = HEAP32[$1263>>2]|0;
     $1265 = (_realloc($1262,$1264)|0);
     $1266 = HEAP32[$1176>>2]|0;
     $1267 = ((($1266)) + 40|0);
     $1268 = HEAP32[$1267>>2]|0;
     $1269 = ((($1268)) + 32|0);
     HEAP32[$1269>>2] = $1265;
    }
    $1270 = ((($1242)) + 32|0);
    $1271 = HEAP32[$1270>>2]|0;
    $1272 = (($1271) + ($1246)|0);
    $1273 = HEAP32[$100>>2]|0;
    $1274 = (($1273) + ($1248)|0);
    $1275 = HEAP32[$101>>2]|0;
    $1276 = (0 - ($1275))|0;
    $1277 = (($1274) + ($1276)|0);
    _memcpy(($1272|0),($1277|0),($1250|0))|0;
    $1278 = HEAP32[$1113>>2]|0;
    $1279 = HEAP32[$1114>>2]|0;
    $1280 = (($1278) - ($1279))|0;
    $1281 = (($1280) + 1)|0;
    $1282 = HEAP32[$1176>>2]|0;
    $1283 = ((($1282)) + 40|0);
    $1284 = HEAP32[$1283>>2]|0;
    $1285 = ((($1284)) + 40|0);
    $1286 = HEAP32[$1285>>2]|0;
    $1287 = (($1286) + ($1281))|0;
    HEAP32[$1285>>2] = $1287;
   }
   $id$0$i = 15;
   while(1) {
    $1288 = ($id$0$i>>>0)<(39);
    if (!($1288)) {
     break;
    }
    $1289 = (((($1)) + 348|0) + ($id$0$i<<2)|0);
    $1290 = HEAP32[$1289>>2]|0;
    $1291 = ($1290|0)==(0|0);
    L1005: do {
     if ($1291) {
      label = 617;
     } else {
      $1292 = HEAP32[$1290>>2]|0;
      switch ($1292|0) {
      case 1:  {
       $1293 = (_malloc(48)|0);
       $1294 = ($1293|0)==(0|0);
       if ($1294) {
        label = 602;
        break L971;
       }
       $1297 = ((($1293)) + 4|0);
       HEAP32[$1297>>2] = 0;
       HEAP32[$1293>>2] = 0;
       $1298 = ((($1293)) + 8|0);
       HEAP32[$1298>>2] = 4;
       $1299 = ((($1293)) + 12|0);
       HEAP32[$1299>>2] = $id$0$i;
       $1300 = ((($1293)) + 16|0);
       HEAP32[$1300>>2] = 0;
       $1301 = ((($1293)) + 20|0);
       HEAP32[$1301>>2] = 0;
       $1302 = ((($1293)) + 32|0);
       HEAP32[$1302>>2] = 0;
       $1303 = ((($1293)) + 36|0);
       HEAP32[$1303>>2] = 0;
       $1304 = ((($1293)) + 40|0);
       HEAP32[$1304>>2] = 0;
       $1305 = ((($1293)) + 44|0);
       HEAP32[$1305>>2] = 7;
       $1306 = HEAP32[$1176>>2]|0;
       $1307 = (($1306) + ($id$0$i<<2)|0);
       HEAP32[$1307>>2] = $1293;
       $1308 = HEAP32[$1289>>2]|0;
       $1309 = ((($1308)) + 24|0);
       HEAP32[$1309>>2] = $id$0$i;
       break L1005;
       break;
      }
      case 5:  {
       $1310 = (_malloc(48)|0);
       $1311 = ($1310|0)==(0|0);
       if ($1311) {
        label = 605;
        break L971;
       }
       $1314 = ((($1310)) + 4|0);
       HEAP32[$1314>>2] = 0;
       HEAP32[$1310>>2] = 0;
       $1315 = ((($1310)) + 8|0);
       HEAP32[$1315>>2] = 4;
       $1316 = ((($1310)) + 12|0);
       HEAP32[$1316>>2] = $id$0$i;
       $1317 = ((($1310)) + 16|0);
       HEAP32[$1317>>2] = 0;
       $1318 = ((($1310)) + 20|0);
       HEAP32[$1318>>2] = 0;
       $1319 = ((($1310)) + 32|0);
       HEAP32[$1319>>2] = 0;
       $1320 = ((($1310)) + 36|0);
       HEAP32[$1320>>2] = 0;
       $1321 = ((($1310)) + 40|0);
       HEAP32[$1321>>2] = 0;
       $1322 = ((($1310)) + 44|0);
       HEAP32[$1322>>2] = 7;
       $1323 = HEAP32[$1176>>2]|0;
       $1324 = (($1323) + ($id$0$i<<2)|0);
       HEAP32[$1324>>2] = $1310;
       $1325 = HEAP32[$1289>>2]|0;
       $1326 = ((($1325)) + 28|0);
       HEAP32[$1326>>2] = $id$0$i;
       break L1005;
       break;
      }
      case 4:  {
       $1327 = ((($1290)) + 40|0);
       $1328 = HEAP32[$1327>>2]|0;
       $1329 = HEAP32[$1328>>2]|0;
       $1330 = ($1329|0)==(1);
       if ($1330) {
        $1331 = ((($1328)) + 24|0);
        $1332 = HEAP32[$1331>>2]|0;
        $1333 = (_malloc(48)|0);
        $1334 = ($1333|0)==(0|0);
        if ($1334) {
         label = 609;
         break L971;
        }
        $1337 = ((($1333)) + 4|0);
        HEAP32[$1337>>2] = 0;
        HEAP32[$1333>>2] = 0;
        $1338 = ((($1333)) + 8|0);
        HEAP32[$1338>>2] = 4;
        $1339 = ((($1333)) + 12|0);
        HEAP32[$1339>>2] = $1332;
        $1340 = ((($1333)) + 16|0);
        HEAP32[$1340>>2] = 0;
        $1341 = ((($1333)) + 20|0);
        HEAP32[$1341>>2] = 0;
        $1342 = ((($1333)) + 32|0);
        HEAP32[$1342>>2] = 0;
        $1343 = ((($1333)) + 36|0);
        HEAP32[$1343>>2] = 0;
        $1344 = ((($1333)) + 40|0);
        HEAP32[$1344>>2] = 0;
        $1345 = ((($1333)) + 44|0);
        HEAP32[$1345>>2] = 7;
        $1346 = HEAP32[$1176>>2]|0;
        $1347 = (($1346) + ($1332<<2)|0);
        HEAP32[$1347>>2] = $1333;
        HEAP32[$1331>>2] = $1332;
        $1348 = HEAP32[$1176>>2]|0;
        $1349 = (($1348) + ($1332<<2)|0);
        $1350 = HEAP32[$1349>>2]|0;
        $1351 = ((($1328)) + 4|0);
        HEAP32[$1351>>2] = $1350;
        $$pre301 = HEAP32[$1289>>2]|0;
        $1353 = $$pre301;
       } else {
        $1353 = $1290;
       }
       $1352 = ((($1353)) + 44|0);
       $1354 = HEAP32[$1352>>2]|0;
       $1355 = HEAP32[$1354>>2]|0;
       $1356 = ($1355|0)==(1);
       if (!($1356)) {
        break L1005;
       }
       $1357 = ((($1354)) + 24|0);
       $1358 = HEAP32[$1357>>2]|0;
       $1359 = HEAP32[$1176>>2]|0;
       $1360 = (($1359) + ($1358<<2)|0);
       $1361 = HEAP32[$1360>>2]|0;
       $1362 = ($1361|0)==(0|0);
       if ($1362) {
        $1363 = (_malloc(48)|0);
        $1364 = ($1363|0)==(0|0);
        if ($1364) {
         label = 614;
         break L971;
        }
        $1367 = ((($1363)) + 4|0);
        HEAP32[$1367>>2] = 0;
        HEAP32[$1363>>2] = 0;
        $1368 = ((($1363)) + 8|0);
        HEAP32[$1368>>2] = 4;
        $1369 = ((($1363)) + 12|0);
        HEAP32[$1369>>2] = $1358;
        $1370 = ((($1363)) + 16|0);
        HEAP32[$1370>>2] = 0;
        $1371 = ((($1363)) + 20|0);
        HEAP32[$1371>>2] = 0;
        $1372 = ((($1363)) + 32|0);
        HEAP32[$1372>>2] = 0;
        $1373 = ((($1363)) + 36|0);
        HEAP32[$1373>>2] = 0;
        $1374 = ((($1363)) + 40|0);
        HEAP32[$1374>>2] = 0;
        $1375 = ((($1363)) + 44|0);
        HEAP32[$1375>>2] = 7;
        $1376 = HEAP32[$1176>>2]|0;
        $1377 = (($1376) + ($1358<<2)|0);
        HEAP32[$1377>>2] = $1363;
       }
       HEAP32[$1357>>2] = $1358;
       $1378 = HEAP32[$1176>>2]|0;
       $1379 = (($1378) + ($1358<<2)|0);
       $1380 = HEAP32[$1379>>2]|0;
       $1381 = ((($1354)) + 4|0);
       HEAP32[$1381>>2] = $1380;
       break L1005;
       break;
      }
      default: {
       label = 617;
       break L1005;
      }
      }
     }
    } while(0);
    do {
     if ((label|0) == 617) {
      label = 0;
      $1382 = ($id$0$i|0)==(37);
      if ($1382) {
       $1383 = HEAP32[$1115>>2]|0;
       $1384 = ($1383|0)==(0|0);
       if ($1384) {
        break;
       }
      }
      $1385 = HEAP32[$1176>>2]|0;
      $1386 = HEAP32[$1385>>2]|0;
      $1387 = (($1385) + ($id$0$i<<2)|0);
      HEAP32[$1387>>2] = $1386;
     }
    } while(0);
    $1388 = HEAP32[$1289>>2]|0;
    $1389 = ($1388|0)==(0|0);
    if (!($1389)) {
     $1390 = HEAP32[$1176>>2]|0;
     $1391 = (($1390) + ($id$0$i<<2)|0);
     $1392 = HEAP32[$1391>>2]|0;
     $1393 = ((($1388)) + 4|0);
     HEAP32[$1393>>2] = $1392;
    }
    $1394 = (($id$0$i) + 1)|0;
    $id$0$i = $1394;
   }
   $1395 = HEAP32[$1139>>2]|0;
   $1396 = ((($1395)) + 8|0);
   $1397 = HEAP32[$1396>>2]|0;
   $1398 = ((($1139)) + 24|0);
   $1399 = ((($1139)) + 52|0);
   $1400 = ((($1139)) + 40|0);
   $1401 = ((($1139)) + 68|0);
   $1403 = $1395;$last_pos$i$0 = $1397;$rec$0$i = 0;
   while(1) {
    $1402 = ((($1403)) + 16|0);
    $1404 = HEAP32[$1402>>2]|0;
    $1405 = ($rec$0$i|0)<($1404|0);
    if (!($1405)) {
     break;
    }
    $1406 = HEAP32[$1398>>2]|0;
    $1407 = (((($1406) + (($rec$0$i*108)|0)|0)) + 8|0);
    $1408 = HEAP32[$1407>>2]|0;
    $1409 = $1408 & 4095;
    $1410 = (((($fd)) + 16712|0) + ($1409<<2)|0);
    $1411 = HEAP32[$1410>>2]|0;
    HEAP32[$i32$i$i>>2] = $1411;
    $1412 = HEAP32[$620>>2]|0;
    $1413 = ((($1412)) + 16|0);
    $1414 = HEAP32[$1413>>2]|0;
    $1415 = (FUNCTION_TABLE_iiiii[$1414 & 127]($1139,$1412,$i32$i$i,1)|0);
    $1416 = (((($1406) + (($rec$0$i*108)|0)|0)) + 12|0);
    $1417 = HEAP32[$1416>>2]|0;
    $1418 = $1417 & 15;
    HEAP32[$i32$i$i>>2] = $1418;
    $1419 = HEAP32[$638>>2]|0;
    $1420 = ((($1419)) + 16|0);
    $1421 = HEAP32[$1420>>2]|0;
    $1422 = (FUNCTION_TABLE_iiiii[$1421 & 127]($1139,$1419,$i32$i$i,1)|0);
    $1423 = $1415 | $1422;
    $1424 = HEAP32[$558>>2]|0;
    $$mask$i$i = $1424 & -256;
    $1425 = ($$mask$i$i|0)==(256);
    do {
     if ($1425) {
      $r$0$i$i = $1423;
     } else {
      $1426 = HEAP32[$1139>>2]|0;
      $1427 = ((($1426)) + 4|0);
      $1428 = HEAP32[$1427>>2]|0;
      $1429 = ($1428|0)==(-2);
      if (!($1429)) {
       $r$0$i$i = $1423;
       break;
      }
      $1430 = HEAP32[$1122>>2]|0;
      $1431 = ((($1430)) + 16|0);
      $1432 = HEAP32[$1431>>2]|0;
      $1433 = (((($1406) + (($rec$0$i*108)|0)|0)) + 4|0);
      $1434 = (FUNCTION_TABLE_iiiii[$1432 & 127]($1139,$1430,$1433,1)|0);
      $1435 = $1423 | $1434;
      $r$0$i$i = $1435;
     }
    } while(0);
    $1436 = HEAP32[$819>>2]|0;
    $1437 = ((($1436)) + 16|0);
    $1438 = HEAP32[$1437>>2]|0;
    $1439 = (((($1406) + (($rec$0$i*108)|0)|0)) + 16|0);
    $1440 = (FUNCTION_TABLE_iiiii[$1438 & 127]($1139,$1436,$1439,1)|0);
    $1441 = $r$0$i$i | $1440;
    $1442 = HEAP32[$639>>2]|0;
    $1443 = ($1442|0)==(0);
    $1444 = (((($1406) + (($rec$0$i*108)|0)|0)) + 20|0);
    $1445 = HEAP32[$1444>>2]|0;
    if ($1443) {
     HEAP32[$i32$i$i>>2] = $1445;
     $1452 = HEAP32[$1116>>2]|0;
     $1453 = ((($1452)) + 16|0);
     $1454 = HEAP32[$1453>>2]|0;
     $1455 = (FUNCTION_TABLE_iiiii[$1454 & 127]($1139,$1452,$i32$i$i,1)|0);
     $$pn$i$i = $1455;$last_pos$i$1 = $last_pos$i$0;
    } else {
     $1446 = (($1445) - ($last_pos$i$0))|0;
     HEAP32[$i32$i$i>>2] = $1446;
     $1447 = HEAP32[$1116>>2]|0;
     $1448 = ((($1447)) + 16|0);
     $1449 = HEAP32[$1448>>2]|0;
     $1450 = (FUNCTION_TABLE_iiiii[$1449 & 127]($1139,$1447,$i32$i$i,1)|0);
     $1451 = HEAP32[$1444>>2]|0;
     $$pn$i$i = $1450;$last_pos$i$1 = $1451;
    }
    $r$1$i$i = $1441 | $$pn$i$i;
    $1456 = HEAP32[$693>>2]|0;
    $1457 = ((($1456)) + 16|0);
    $1458 = HEAP32[$1457>>2]|0;
    $1459 = (((($1406) + (($rec$0$i*108)|0)|0)) + 24|0);
    $1460 = (FUNCTION_TABLE_iiiii[$1458 & 127]($1139,$1456,$1459,1)|0);
    $1461 = $r$1$i$i | $1460;
    $1462 = HEAP32[$1416>>2]|0;
    $1463 = $1462 & 2;
    $1464 = ($1463|0)==(0);
    do {
     if ($1464) {
      $1490 = $1462 & 4;
      $1491 = ($1490|0)==(0);
      if ($1491) {
       $r$3$i$i = $1461;
       break;
      }
      $1492 = HEAP32[$801>>2]|0;
      $1493 = ((($1492)) + 16|0);
      $1494 = HEAP32[$1493>>2]|0;
      $1495 = (((($1406) + (($rec$0$i*108)|0)|0)) + 36|0);
      $1496 = (FUNCTION_TABLE_iiiii[$1494 & 127]($1139,$1492,$1495,1)|0);
      $1497 = $1461 | $1496;
      $r$3$i$i = $1497;
     } else {
      $1465 = (((($1406) + (($rec$0$i*108)|0)|0)) + 104|0);
      $1466 = HEAP32[$1465>>2]|0;
      HEAP32[$i32$i$i>>2] = $1466;
      $1467 = HEAP32[$747>>2]|0;
      $1468 = ((($1467)) + 16|0);
      $1469 = HEAP32[$1468>>2]|0;
      $1470 = (FUNCTION_TABLE_iiiii[$1469 & 127]($1139,$1467,$i32$i$i,1)|0);
      $1471 = $1461 | $1470;
      $1472 = HEAP32[$729>>2]|0;
      $1473 = ((($1472)) + 16|0);
      $1474 = HEAP32[$1473>>2]|0;
      $1475 = (((($1406) + (($rec$0$i*108)|0)|0)) + 40|0);
      $1476 = (FUNCTION_TABLE_iiiii[$1474 & 127]($1139,$1472,$1475,1)|0);
      $1477 = $1471 | $1476;
      $1478 = HEAP32[$783>>2]|0;
      $1479 = ((($1478)) + 16|0);
      $1480 = HEAP32[$1479>>2]|0;
      $1481 = (((($1406) + (($rec$0$i*108)|0)|0)) + 44|0);
      $1482 = (FUNCTION_TABLE_iiiii[$1480 & 127]($1139,$1478,$1481,1)|0);
      $1483 = $1477 | $1482;
      $1484 = HEAP32[$765>>2]|0;
      $1485 = ((($1484)) + 16|0);
      $1486 = HEAP32[$1485>>2]|0;
      $1487 = (((($1406) + (($rec$0$i*108)|0)|0)) + 48|0);
      $1488 = (FUNCTION_TABLE_iiiii[$1486 & 127]($1139,$1484,$1487,1)|0);
      $1489 = $1483 | $1488;
      $r$3$i$i = $1489;
     }
    } while(0);
    $1498 = HEAP32[$558>>2]|0;
    $$mask1$i$i = $1498 & -256;
    $1499 = ($$mask1$i$i|0)==(256);
    L1048: do {
     if ($1499) {
      $1500 = (((($1406) + (($rec$0$i*108)|0)|0)) + 52|0);
      $1501 = HEAP32[$1500>>2]|0;
      $1502 = $1501&255;
      HEAP8[$uc$i$i>>0] = $1502;
      $1503 = HEAP32[$1117>>2]|0;
      $1504 = ((($1503)) + 16|0);
      $1505 = HEAP32[$1504>>2]|0;
      $1506 = (FUNCTION_TABLE_iiiii[$1505 & 127]($1139,$1503,$uc$i$i,1)|0);
      $1507 = $r$3$i$i | $1506;
      $1508 = (((($1406) + (($rec$0$i*108)|0)|0)) + 64|0);
      $j$0$i$i = 0;$r$4$i$i = $1507;
      while(1) {
       $1509 = HEAP32[$1500>>2]|0;
       $1510 = ($j$0$i$i|0)<($1509|0);
       if (!($1510)) {
        $r$5$i$i = $r$4$i$i;
        break L1048;
       }
       $1511 = HEAP32[$1508>>2]|0;
       $1512 = (($1511) + ($j$0$i$i))|0;
       $1513 = HEAP32[$1399>>2]|0;
       $1514 = (($1513) + ($1512<<2)|0);
       $1515 = HEAP32[$1514>>2]|0;
       HEAP32[$i321$i$i>>2] = $1515;
       $1516 = HEAP32[$1112>>2]|0;
       $1517 = ((($1516)) + 16|0);
       $1518 = HEAP32[$1517>>2]|0;
       $1519 = (FUNCTION_TABLE_iiiii[$1518 & 127]($1139,$1516,$i321$i$i,1)|0);
       $1520 = $r$4$i$i | $1519;
       $1521 = (($j$0$i$i) + 1)|0;
       $j$0$i$i = $1521;$r$4$i$i = $1520;
      }
     } else {
      $1522 = HEAP32[$1121>>2]|0;
      $1523 = ((($1522)) + 16|0);
      $1524 = HEAP32[$1523>>2]|0;
      $1525 = (((($1406) + (($rec$0$i*108)|0)|0)) + 68|0);
      $1526 = (FUNCTION_TABLE_iiiii[$1524 & 127]($1139,$1522,$1525,1)|0);
      $1527 = $r$3$i$i | $1526;
      $r$5$i$i = $1527;
     }
    } while(0);
    $1528 = HEAP32[$1407>>2]|0;
    $1529 = $1528 & 4;
    $1530 = ($1529|0)==(0);
    do {
     if ($1530) {
      $1531 = HEAP32[$837>>2]|0;
      $1532 = ((($1531)) + 16|0);
      $1533 = HEAP32[$1532>>2]|0;
      $1534 = (((($1406) + (($rec$0$i*108)|0)|0)) + 100|0);
      $1535 = (FUNCTION_TABLE_iiiii[$1533 & 127]($1139,$1531,$1534,1)|0);
      $1536 = $r$5$i$i | $1535;
      $1537 = (((($1406) + (($rec$0$i*108)|0)|0)) + 96|0);
      $j2$0$i$i = 0;$prev_pos$0$i$i = 0;$r$6$i$i = $1536;
      L1057: while(1) {
       $1538 = HEAP32[$1534>>2]|0;
       $1539 = ($j2$0$i$i|0)<($1538|0);
       if (!($1539)) {
        label = 654;
        break;
       }
       $1540 = HEAP32[$1537>>2]|0;
       $1541 = (($1540) + ($j2$0$i$i))|0;
       $1542 = HEAP32[$1400>>2]|0;
       $1543 = (((($1542) + ($1541<<4)|0)) + 4|0);
       $1544 = HEAP32[$1543>>2]|0;
       $1545 = $1544&255;
       HEAP8[$uc$i$i>>0] = $1545;
       $1546 = HEAP32[$855>>2]|0;
       $1547 = ((($1546)) + 16|0);
       $1548 = HEAP32[$1547>>2]|0;
       $1549 = (FUNCTION_TABLE_iiiii[$1548 & 127]($1139,$1546,$uc$i$i,1)|0);
       $1550 = $r$6$i$i | $1549;
       $1551 = (($1542) + ($1541<<4)|0);
       $1552 = HEAP32[$1551>>2]|0;
       $1553 = (($1552) - ($prev_pos$0$i$i))|0;
       HEAP32[$i32$i$i>>2] = $1553;
       $1554 = HEAP32[$873>>2]|0;
       $1555 = ((($1554)) + 16|0);
       $1556 = HEAP32[$1555>>2]|0;
       $1557 = (FUNCTION_TABLE_iiiii[$1556 & 127]($1139,$1554,$i32$i$i,1)|0);
       $1558 = $1550 | $1557;
       $1559 = HEAP32[$1551>>2]|0;
       $1560 = HEAP32[$1543>>2]|0;
       switch ($1560|0) {
       case 88:  {
        $1561 = (((($1542) + ($1541<<4)|0)) + 8|0);
        $1562 = HEAP32[$1561>>2]|0;
        $1563 = $1562&255;
        HEAP8[$uc$i$i>>0] = $1563;
        $1564 = HEAP32[$942>>2]|0;
        $1565 = ((($1564)) + 16|0);
        $1566 = HEAP32[$1565>>2]|0;
        $1567 = (FUNCTION_TABLE_iiiii[$1566 & 127]($1139,$1564,$uc$i$i,1)|0);
        $1568 = $1558 | $1567;
        $r$7$i$i = $1568;
        break;
       }
       case 81: case 73: case 83:  {
        $r$7$i$i = $1558;
        break;
       }
       case 105:  {
        $1569 = (((($1542) + ($1541<<4)|0)) + 8|0);
        $1570 = HEAP32[$1569>>2]|0;
        $1571 = $1570&255;
        HEAP8[$uc$i$i>>0] = $1571;
        $1572 = HEAP32[$909>>2]|0;
        $1573 = ((($1572)) + 16|0);
        $1574 = HEAP32[$1573>>2]|0;
        $1575 = (FUNCTION_TABLE_iiiii[$1574 & 127]($1139,$1572,$uc$i$i,1)|0);
        $1576 = $1558 | $1575;
        $r$7$i$i = $1576;
        break;
       }
       case 68:  {
        $1577 = (((($1542) + ($1541<<4)|0)) + 8|0);
        $1578 = HEAP32[$1577>>2]|0;
        HEAP32[$i32$i$i>>2] = $1578;
        $1579 = HEAP32[$891>>2]|0;
        $1580 = ((($1579)) + 16|0);
        $1581 = HEAP32[$1580>>2]|0;
        $1582 = (FUNCTION_TABLE_iiiii[$1581 & 127]($1139,$1579,$i32$i$i,1)|0);
        $1583 = $1558 | $1582;
        $r$7$i$i = $1583;
        break;
       }
       case 66:  {
        $1584 = (((($1542) + ($1541<<4)|0)) + 8|0);
        $1585 = HEAP32[$1584>>2]|0;
        $1586 = $1585&255;
        HEAP8[$uc$i$i>>0] = $1586;
        $1587 = HEAP32[$909>>2]|0;
        $1588 = ((($1587)) + 16|0);
        $1589 = HEAP32[$1588>>2]|0;
        $1590 = (FUNCTION_TABLE_iiiii[$1589 & 127]($1139,$1587,$uc$i$i,1)|0);
        $1591 = $1558 | $1590;
        $r$7$i$i = $1591;
        break;
       }
       case 98:  {
        $1592 = HEAP32[$1115>>2]|0;
        $1593 = ((($1592)) + 16|0);
        $1594 = HEAP32[$1593>>2]|0;
        $1595 = HEAP32[$1401>>2]|0;
        $1596 = ((($1595)) + 32|0);
        $1597 = HEAP32[$1596>>2]|0;
        $1598 = (((($1542) + ($1541<<4)|0)) + 8|0);
        $1599 = HEAP32[$1598>>2]|0;
        $1600 = (($1597) + ($1599)|0);
        $1601 = (((($1542) + ($1541<<4)|0)) + 12|0);
        $1602 = HEAP32[$1601>>2]|0;
        $1603 = (FUNCTION_TABLE_iiiii[$1594 & 127]($1139,$1592,$1600,$1602)|0);
        $1604 = $1558 | $1603;
        $r$7$i$i = $1604;
        break;
       }
       case 78:  {
        $1605 = (((($1542) + ($1541<<4)|0)) + 8|0);
        $1606 = HEAP32[$1605>>2]|0;
        HEAP32[$i32$i$i>>2] = $1606;
        $1607 = HEAP32[$1118>>2]|0;
        $1608 = ((($1607)) + 16|0);
        $1609 = HEAP32[$1608>>2]|0;
        $1610 = (FUNCTION_TABLE_iiiii[$1609 & 127]($1139,$1607,$i32$i$i,1)|0);
        $1611 = $1558 | $1610;
        $r$7$i$i = $1611;
        break;
       }
       case 80:  {
        $1612 = (((($1542) + ($1541<<4)|0)) + 8|0);
        $1613 = HEAP32[$1612>>2]|0;
        HEAP32[$i32$i$i>>2] = $1613;
        $1614 = HEAP32[$1119>>2]|0;
        $1615 = ((($1614)) + 16|0);
        $1616 = HEAP32[$1615>>2]|0;
        $1617 = (FUNCTION_TABLE_iiiii[$1616 & 127]($1139,$1614,$i32$i$i,1)|0);
        $1618 = $1558 | $1617;
        $r$7$i$i = $1618;
        break;
       }
       case 72:  {
        $1619 = (((($1542) + ($1541<<4)|0)) + 8|0);
        $1620 = HEAP32[$1619>>2]|0;
        HEAP32[$i32$i$i>>2] = $1620;
        $1621 = HEAP32[$1120>>2]|0;
        $1622 = ((($1621)) + 16|0);
        $1623 = HEAP32[$1622>>2]|0;
        $1624 = (FUNCTION_TABLE_iiiii[$1623 & 127]($1139,$1621,$i32$i$i,1)|0);
        $1625 = $1558 | $1624;
        $r$7$i$i = $1625;
        break;
       }
       default: {
        label = 652;
        break L1057;
       }
       }
       $1626 = (($j2$0$i$i) + 1)|0;
       $j2$0$i$i = $1626;$prev_pos$0$i$i = $1559;$r$6$i$i = $r$7$i$i;
      }
      if ((label|0) == 652) {
       label = 0;
       HEAP32[$vararg_buffer81>>2] = $1560;
       _fprintf(9772,18438,$vararg_buffer81);
       $$0$i13$i = -1;
       break;
      }
      else if ((label|0) == 654) {
       label = 0;
       $1627 = HEAP32[$711>>2]|0;
       $1628 = ((($1627)) + 16|0);
       $1629 = HEAP32[$1628>>2]|0;
       $1630 = (((($1406) + (($rec$0$i*108)|0)|0)) + 92|0);
       $1631 = (FUNCTION_TABLE_iiiii[$1629 & 127]($1139,$1627,$1630,1)|0);
       $1632 = $r$6$i$i | $1631;
       $r$9$i$i = $1632;
       label = 657;
       break;
      }
     } else {
      $1633 = HEAP32[$1439>>2]|0;
      $1634 = ($1633|0)==(0);
      if ($1634) {
       $r$9$i$i = $r$5$i$i;
       label = 657;
       break;
      }
      $1635 = HEAP32[$1401>>2]|0;
      $1636 = ((($1635)) + 32|0);
      $1637 = HEAP32[$1636>>2]|0;
      $1638 = (((($1406) + (($rec$0$i*108)|0)|0)) + 72|0);
      $1639 = HEAP32[$1638>>2]|0;
      $1640 = (($1637) + ($1639)|0);
      $1641 = HEAP32[$909>>2]|0;
      $1642 = ((($1641)) + 16|0);
      $1643 = HEAP32[$1642>>2]|0;
      $1644 = (FUNCTION_TABLE_iiiii[$1643 & 127]($1139,$1641,$1640,$1633)|0);
      $1645 = $r$5$i$i | $1644;
      $r$9$i$i = $1645;
      label = 657;
     }
    } while(0);
    if ((label|0) == 657) {
     label = 0;
     $1646 = ($r$9$i$i|0)!=(0);
     $1647 = $1646 << 31 >> 31;
     $$0$i13$i = $1647;
    }
    $1648 = ($$0$i13$i|0)==(-1);
    if ($1648) {
     $$0 = -1;
     label = 1164;
     break L971;
    }
    $1649 = (($rec$0$i) + 1)|0;
    $$pre299 = HEAP32[$1139>>2]|0;
    $1403 = $$pre299;$last_pos$i$0 = $last_pos$i$1;$rec$0$i = $1649;
   }
   $1650 = HEAP32[$1176>>2]|0;
   $1651 = HEAP32[$1650>>2]|0;
   $1652 = ((($1651)) + 40|0);
   $1653 = HEAP32[$1652>>2]|0;
   $1654 = ((($1651)) + 44|0);
   $1655 = HEAP32[$1654>>2]|0;
   $1656 = ($1655|0)<(7);
   $1657 = $1656&1;
   $1658 = (($1653) + ($1657))|0;
   $1659 = ((($1651)) + 20|0);
   HEAP32[$1659>>2] = $1658;
   $1660 = HEAP32[$1176>>2]|0;
   $1661 = HEAP32[$1660>>2]|0;
   $1662 = ((($1661)) + 20|0);
   $1663 = HEAP32[$1662>>2]|0;
   $1664 = ((($1661)) + 16|0);
   HEAP32[$1664>>2] = $1663;
   $1665 = ((($1139)) + 76|0);
   $1666 = HEAP32[$1665>>2]|0;
   $1667 = HEAP32[$1176>>2]|0;
   $1668 = ((($1667)) + 52|0);
   HEAP32[$1668>>2] = $1666;
   HEAP32[$1665>>2] = 0;
   $1669 = ((($1139)) + 72|0);
   $1670 = HEAP32[$1669>>2]|0;
   $1671 = HEAP32[$1176>>2]|0;
   $1672 = ((($1671)) + 48|0);
   HEAP32[$1672>>2] = $1670;
   HEAP32[$1669>>2] = 0;
   $1673 = ((($1139)) + 64|0);
   $1674 = HEAP32[$1673>>2]|0;
   $1675 = HEAP32[$1176>>2]|0;
   $1676 = ((($1675)) + 44|0);
   HEAP32[$1676>>2] = $1674;
   HEAP32[$1673>>2] = 0;
   $1677 = ((($1139)) + 80|0);
   $1678 = HEAP32[$1677>>2]|0;
   $1679 = HEAP32[$1176>>2]|0;
   $1680 = ((($1679)) + 56|0);
   HEAP32[$1680>>2] = $1678;
   HEAP32[$1677>>2] = 0;
   $1681 = ((($1139)) + 84|0);
   $1682 = HEAP32[$1681>>2]|0;
   $1683 = HEAP32[$1176>>2]|0;
   $1684 = ((($1683)) + 4|0);
   HEAP32[$1684>>2] = $1682;
   HEAP32[$1681>>2] = 0;
   $1685 = ((($1139)) + 88|0);
   $1686 = HEAP32[$1685>>2]|0;
   $1687 = HEAP32[$1176>>2]|0;
   $1688 = ((($1687)) + 8|0);
   HEAP32[$1688>>2] = $1686;
   HEAP32[$1685>>2] = 0;
   $1689 = ((($1139)) + 92|0);
   $1690 = HEAP32[$1689>>2]|0;
   $1691 = HEAP32[$1176>>2]|0;
   $1692 = ((($1691)) + 12|0);
   HEAP32[$1692>>2] = $1690;
   HEAP32[$1689>>2] = 0;
   $1693 = ((($1139)) + 96|0);
   $1694 = HEAP32[$1693>>2]|0;
   $1695 = HEAP32[$1176>>2]|0;
   $1696 = ((($1695)) + 16|0);
   HEAP32[$1696>>2] = $1694;
   HEAP32[$1693>>2] = 0;
   $1697 = ((($1139)) + 100|0);
   $1698 = HEAP32[$1697>>2]|0;
   $1699 = HEAP32[$1176>>2]|0;
   $1700 = ((($1699)) + 20|0);
   HEAP32[$1700>>2] = $1698;
   HEAP32[$1697>>2] = 0;
   $1701 = ((($1139)) + 104|0);
   $1702 = HEAP32[$1701>>2]|0;
   $1703 = HEAP32[$1176>>2]|0;
   $1704 = ((($1703)) + 24|0);
   HEAP32[$1704>>2] = $1702;
   HEAP32[$1701>>2] = 0;
   $1705 = ((($1139)) + 108|0);
   $1706 = HEAP32[$1705>>2]|0;
   $1707 = HEAP32[$1176>>2]|0;
   $1708 = ((($1707)) + 28|0);
   HEAP32[$1708>>2] = $1706;
   HEAP32[$1705>>2] = 0;
   $1709 = ((($1139)) + 112|0);
   $1710 = HEAP32[$1709>>2]|0;
   $1711 = HEAP32[$1176>>2]|0;
   $1712 = ((($1711)) + 32|0);
   HEAP32[$1712>>2] = $1710;
   HEAP32[$1709>>2] = 0;
   $1713 = ((($1139)) + 116|0);
   $1714 = HEAP32[$1713>>2]|0;
   $1715 = HEAP32[$1176>>2]|0;
   $1716 = ((($1715)) + 36|0);
   HEAP32[$1716>>2] = $1714;
   HEAP32[$1713>>2] = 0;
   $id$1$i = 1;
   while(1) {
    $exitcond = ($id$1$i|0)==(47);
    if ($exitcond) {
     break;
    }
    $1717 = HEAP32[$1176>>2]|0;
    $1718 = (($1717) + ($id$1$i<<2)|0);
    $1719 = HEAP32[$1718>>2]|0;
    $1720 = ($1719|0)==(0|0);
    do {
     if (!($1720)) {
      $1721 = HEAP32[$1717>>2]|0;
      $1722 = ($1719|0)==($1721|0);
      if ($1722) {
       break;
      }
      $1723 = ((($1719)) + 20|0);
      $1724 = HEAP32[$1723>>2]|0;
      $1725 = ($1724|0)==(0);
      if (!($1725)) {
       break;
      }
      $1726 = ((($1719)) + 40|0);
      $1727 = HEAP32[$1726>>2]|0;
      HEAP32[$1723>>2] = $1727;
      $1728 = HEAP32[$1176>>2]|0;
      $1729 = (($1728) + ($id$1$i<<2)|0);
      $1730 = HEAP32[$1729>>2]|0;
      $1731 = ((($1730)) + 16|0);
      HEAP32[$1731>>2] = $1727;
     }
    } while(0);
    $1732 = (($id$1$i) + 1)|0;
    $id$1$i = $1732;
   }
   $1733 = HEAP32[$1123>>2]|0;
   $1734 = ($1733|0)>(5);
   do {
    if ($1734) {
     $1735 = HEAP32[$1176>>2]|0;
     $1736 = HEAP32[$1735>>2]|0;
     $1737 = ((($1736)) + 20|0);
     $1738 = HEAP32[$1737>>2]|0;
     $1739 = ($1738|0)>(500);
     if (!($1739)) {
      break;
     }
     (_cram_compress_block($fd,$1736,0,1,1)|0);
    }
   } while(0);
   $1740 = HEAP32[$1124>>2]|0;
   $1741 = ($1740|0)==(0);
   $$444 = $1741 ? 2050 : 2054;
   $1742 = HEAP32[$1125>>2]|0;
   $1743 = ($1742|0)==(0);
   $1744 = $$444 | 1040;
   $method$1$i$i = $1743 ? $$444 : $1744;
   $1745 = HEAP32[$1126>>2]|0;
   $1746 = ($1745|0)==(0);
   $1747 = $method$1$i$i | 8;
   $method$1$i$i$ = $1746 ? $method$1$i$i : $1747;
   $1748 = $method$1$i$i$ & 3088;
   $methodF$0$i$i = $1734 ? $method$1$i$i$ : $1748;
   $1749 = HEAP32[$1176>>2]|0;
   $1750 = ((($1749)) + 52|0);
   $1751 = HEAP32[$1750>>2]|0;
   $1752 = HEAP32[$1127>>2]|0;
   $1753 = (_cram_compress_block($fd,$1751,$1752,$method$1$i$i$,$1733)|0);
   $1754 = ($1753|0)==(0);
   if (!($1754)) {
    $$0 = -1;
    label = 1164;
    break;
   }
   $1755 = HEAP32[$1123>>2]|0;
   L1094: do {
    switch ($1755|0) {
    case 0:  {
     break;
    }
    case 1:  {
     $1756 = HEAP32[$1176>>2]|0;
     $1757 = ((($1756)) + 48|0);
     $1758 = HEAP32[$1757>>2]|0;
     $1759 = HEAP32[$1130>>2]|0;
     $1760 = (_cram_compress_block($fd,$1758,$1759,$methodF$0$i$i,1)|0);
     $1761 = ($1760|0)==(0);
     if ($1761) {
      $i$0$i$i123 = 1;
     } else {
      $$0 = -1;
      label = 1164;
      break L971;
     }
     while(1) {
      $1762 = ($i$0$i$i123|0)<(10);
      if (!($1762)) {
       break L1094;
      }
      $1763 = HEAP32[$1176>>2]|0;
      $1764 = (($1763) + ($i$0$i$i123<<2)|0);
      $1765 = HEAP32[$1764>>2]|0;
      $1766 = ($1765|0)==(0|0);
      if (!($1766)) {
       $1767 = (((($fd)) + 80|0) + ($i$0$i$i123<<2)|0);
       $1768 = HEAP32[$1767>>2]|0;
       $1769 = (_cram_compress_block($fd,$1765,$1768,$method$1$i$i$,1)|0);
       $1770 = ($1769|0)==(0);
       if (!($1770)) {
        $$0 = -1;
        label = 1164;
        break L971;
       }
      }
      $1771 = (($i$0$i$i123) + 1)|0;
      $i$0$i$i123 = $1771;
     }
     break;
    }
    default: {
     $1772 = ($1755|0)<(3);
     $1773 = HEAP32[$1176>>2]|0;
     $1774 = ((($1773)) + 48|0);
     $1775 = HEAP32[$1774>>2]|0;
     $1776 = HEAP32[$1130>>2]|0;
     if ($1772) {
      $1777 = (_cram_compress_block($fd,$1775,$1776,$method$1$i$i$,1)|0);
      $1778 = ($1777|0)==(0);
      if (!($1778)) {
       $$0 = -1;
       label = 1164;
       break L971;
      }
      $1779 = HEAP32[$1176>>2]|0;
      $1780 = ((($1779)) + 120|0);
      $1781 = HEAP32[$1780>>2]|0;
      $1782 = HEAP32[$1131>>2]|0;
      $1783 = (_cram_compress_block($fd,$1781,$1782,$method$1$i$i$,1)|0);
      $1784 = ($1783|0)==(0);
      if (!($1784)) {
       $$0 = -1;
       label = 1164;
       break L971;
      }
      $1785 = HEAP32[$1176>>2]|0;
      $1786 = ((($1785)) + 148|0);
      $1787 = HEAP32[$1786>>2]|0;
      $1788 = ($1787|0)==(0|0);
      if ($1788) {
       $i$1$i$i124 = 1;
      } else {
       $1789 = HEAP32[$1132>>2]|0;
       $1790 = (_cram_compress_block($fd,$1787,$1789,$method$1$i$i$,1)|0);
       $1791 = ($1790|0)==(0);
       if ($1791) {
        $i$1$i$i124 = 1;
       } else {
        $$0 = -1;
        label = 1164;
        break L971;
       }
      }
      while(1) {
       $1792 = ($i$1$i$i124|0)<(10);
       if (!($1792)) {
        break L1094;
       }
       $1793 = HEAP32[$1176>>2]|0;
       $1794 = (($1793) + ($i$1$i$i124<<2)|0);
       $1795 = HEAP32[$1794>>2]|0;
       $1796 = ($1795|0)==(0|0);
       if (!($1796)) {
        $1797 = (((($fd)) + 80|0) + ($i$1$i$i124<<2)|0);
        $1798 = HEAP32[$1797>>2]|0;
        $1799 = (_cram_compress_block($fd,$1795,$1798,$method$1$i$i$,$1733)|0);
        $1800 = ($1799|0)==(0);
        if (!($1800)) {
         $$0 = -1;
         label = 1164;
         break L971;
        }
       }
       $1801 = (($i$1$i$i124) + 1)|0;
       $i$1$i$i124 = $1801;
      }
     } else {
      $1802 = (_cram_compress_block($fd,$1775,$1776,$method$1$i$i$,$1733)|0);
      $1803 = ($1802|0)==(0);
      if (!($1803)) {
       $$0 = -1;
       label = 1164;
       break L971;
      }
      $1804 = HEAP32[$1176>>2]|0;
      $1805 = ((($1804)) + 120|0);
      $1806 = HEAP32[$1805>>2]|0;
      $1807 = HEAP32[$1131>>2]|0;
      $1808 = (_cram_compress_block($fd,$1806,$1807,$method$1$i$i$,$1733)|0);
      $1809 = ($1808|0)==(0);
      if (!($1809)) {
       $$0 = -1;
       label = 1164;
       break L971;
      }
      $1810 = HEAP32[$1176>>2]|0;
      $1811 = ((($1810)) + 148|0);
      $1812 = HEAP32[$1811>>2]|0;
      $1813 = ($1812|0)==(0|0);
      if ($1813) {
       $i$2$i$i = 1;
      } else {
       $1814 = HEAP32[$1132>>2]|0;
       $1815 = (_cram_compress_block($fd,$1812,$1814,$method$1$i$i$,$1733)|0);
       $1816 = ($1815|0)==(0);
       if ($1816) {
        $i$2$i$i = 1;
       } else {
        $$0 = -1;
        label = 1164;
        break L971;
       }
      }
      while(1) {
       $1817 = ($i$2$i$i|0)<(10);
       if (!($1817)) {
        break L1094;
       }
       $1818 = HEAP32[$1176>>2]|0;
       $1819 = (($1818) + ($i$2$i$i<<2)|0);
       $1820 = HEAP32[$1819>>2]|0;
       $1821 = ($1820|0)==(0|0);
       if (!($1821)) {
        $1822 = (((($fd)) + 80|0) + ($i$2$i$i<<2)|0);
        $1823 = HEAP32[$1822>>2]|0;
        $1824 = (_cram_compress_block($fd,$1820,$1823,$method$1$i$i$,$1733)|0);
        $1825 = ($1824|0)==(0);
        if (!($1825)) {
         $$0 = -1;
         label = 1164;
         break L971;
        }
       }
       $1826 = (($i$2$i$i) + 1)|0;
       $i$2$i$i = $1826;
      }
     }
    }
    }
   } while(0);
   $1827 = HEAP32[$1176>>2]|0;
   $1828 = ((($1827)) + 44|0);
   $1829 = HEAP32[$1828>>2]|0;
   $1830 = HEAP32[$1128>>2]|0;
   $1831 = $method$1$i$i$ & 1038;
   $1832 = ($1733|0)>(9);
   $$445 = $1832 ? 9 : $1733;
   $1833 = (_cram_compress_block($fd,$1829,$1830,$1831,$$445)|0);
   $1834 = ($1833|0)==(0);
   if (!($1834)) {
    $$0 = -1;
    label = 1164;
    break;
   }
   $1835 = HEAP32[$1176>>2]|0;
   $1836 = ((($1835)) + 80|0);
   $1837 = HEAP32[$1836>>2]|0;
   $1838 = HEAP32[$1835>>2]|0;
   $1839 = ($1837|0)==($1838|0);
   if ($1839) {
    $i1$0$i$i = 1;
   } else {
    $1840 = HEAP32[$1129>>2]|0;
    $1841 = (_cram_compress_block($fd,$1837,$1840,$method$1$i$i$,$1733)|0);
    $1842 = ($1841|0)==(0);
    if ($1842) {
     $i1$0$i$i = 1;
    } else {
     $$0 = -1;
     label = 1164;
     break;
    }
   }
   while(1) {
    $exitcond439 = ($i1$0$i$i|0)==(47);
    if ($exitcond439) {
     $i$0$i = 1;$j$0$i = 1;
     break;
    }
    $1843 = HEAP32[$1176>>2]|0;
    $1844 = (($1843) + ($i1$0$i$i<<2)|0);
    $1845 = HEAP32[$1844>>2]|0;
    $1846 = ($1845|0)==(0|0);
    do {
     if (!($1846)) {
      $1847 = HEAP32[$1843>>2]|0;
      $1848 = ($1845|0)==($1847|0);
      if ($1848) {
       break;
      }
      $1849 = HEAP32[$1845>>2]|0;
      $1850 = ($1849|0)==(0);
      if (!($1850)) {
       break;
      }
      $1851 = (((($fd)) + 80|0) + ($i1$0$i$i<<2)|0);
      $1852 = HEAP32[$1851>>2]|0;
      (_cram_compress_block($fd,$1845,$1852,$methodF$0$i$i,$1733)|0);
     }
    } while(0);
    $1853 = (($i1$0$i$i) + 1)|0;
    $i1$0$i$i = $1853;
   }
   while(1) {
    $exitcond440 = ($i$0$i|0)==(47);
    if ($exitcond440) {
     break;
    }
    $1854 = HEAP32[$1176>>2]|0;
    $1855 = (($1854) + ($i$0$i<<2)|0);
    $1856 = HEAP32[$1855>>2]|0;
    $1857 = ($1856|0)==(0|0);
    $1858 = $1856;
    do {
     if ($1857) {
      $j$1$i = $j$0$i;
     } else {
      $1859 = HEAP32[$1854>>2]|0;
      $1860 = ($1856|0)==($1859|0);
      if ($1860) {
       $j$1$i = $j$0$i;
       break;
      }
      $1861 = ((($1856)) + 20|0);
      $1862 = HEAP32[$1861>>2]|0;
      $1863 = ($1862|0)==(0);
      if (!($1863)) {
       $1868 = (($1854) + ($j$0$i<<2)|0);
       HEAP32[$1868>>2] = $1858;
       $1869 = HEAP32[$1176>>2]|0;
       $1870 = (($1869) + ($i$0$i<<2)|0);
       $1871 = HEAP32[$1870>>2]|0;
       $1872 = ((($1871)) + 12|0);
       $1873 = HEAP32[$1872>>2]|0;
       $1874 = (($j$0$i) + -1)|0;
       $1875 = HEAP32[$1139>>2]|0;
       $1876 = ((($1875)) + 40|0);
       $1877 = HEAP32[$1876>>2]|0;
       $1878 = (($1877) + ($1874<<2)|0);
       HEAP32[$1878>>2] = $1873;
       $1879 = (($j$0$i) + 1)|0;
       $j$1$i = $1879;
       break;
      }
      $1864 = ((($1856)) + 32|0);
      $1865 = HEAP32[$1864>>2]|0;
      $1866 = ($1865|0)==(0|0);
      if (!($1866)) {
       _free($1865);
      }
      _free($1856);
      $$pre300 = HEAP32[$1176>>2]|0;
      $1867 = (($$pre300) + ($i$0$i<<2)|0);
      HEAP32[$1867>>2] = 0;
      $j$1$i = $j$0$i;
     }
    } while(0);
    $1880 = (($i$0$i) + 1)|0;
    $i$0$i = $1880;$j$0$i = $j$1$i;
   }
   $1881 = (($j$0$i) + -1)|0;
   $1882 = HEAP32[$1139>>2]|0;
   $1883 = ((($1882)) + 36|0);
   HEAP32[$1883>>2] = $1881;
   $1884 = HEAP32[$1139>>2]|0;
   $1885 = ((($1884)) + 32|0);
   HEAP32[$1885>>2] = $j$0$i;
   $1886 = (_malloc(48)|0);
   $1887 = ($1886|0)==(0|0);
   if ($1887) {
    break;
   }
   $1888 = ((($1886)) + 4|0);
   HEAP32[$1888>>2] = 0;
   HEAP32[$1886>>2] = 0;
   $1889 = ((($1886)) + 8|0);
   HEAP32[$1889>>2] = 2;
   $1890 = ((($1886)) + 12|0);
   HEAP32[$1890>>2] = 0;
   $1891 = ((($1886)) + 16|0);
   HEAP32[$1891>>2] = 0;
   $1892 = ((($1886)) + 20|0);
   HEAP32[$1892>>2] = 0;
   $1893 = ((($1886)) + 32|0);
   HEAP32[$1893>>2] = 0;
   $1894 = ((($1886)) + 36|0);
   HEAP32[$1894>>2] = 0;
   $1895 = ((($1886)) + 40|0);
   HEAP32[$1895>>2] = 0;
   $1896 = ((($1886)) + 44|0);
   HEAP32[$1896>>2] = 7;
   $1897 = HEAP32[$1139>>2]|0;
   $1898 = ((($1897)) + 32|0);
   $1899 = HEAP32[$1898>>2]|0;
   $1900 = ($1899*5)|0;
   $1901 = (($1900) + 56)|0;
   $1902 = (_malloc($1901)|0);
   $1903 = ($1902|0)==(0|0);
   if ($1903) {
    label = 714;
    break;
   }
   $1907 = HEAP32[$1139>>2]|0;
   $1908 = ((($1907)) + 4|0);
   $1909 = HEAP32[$1908>>2]|0;
   $1910 = ($1909>>>0)>(127);
   do {
    if ($1910) {
     $1912 = ($1909>>>0)>(16383);
     if (!($1912)) {
      $1913 = $1909 >>> 8;
      $1914 = $1913 | 128;
      $1915 = $1914&255;
      HEAP8[$1902>>0] = $1915;
      $1916 = HEAP32[$1139>>2]|0;
      $1917 = ((($1916)) + 4|0);
      $1918 = HEAP32[$1917>>2]|0;
      $1919 = $1918&255;
      $1920 = ((($1902)) + 1|0);
      HEAP8[$1920>>0] = $1919;
      $1985 = 2;
      break;
     }
     $1921 = ($1909>>>0)>(2097151);
     if (!($1921)) {
      $1922 = $1909 >>> 16;
      $1923 = $1922 | 192;
      $1924 = $1923&255;
      HEAP8[$1902>>0] = $1924;
      $1925 = HEAP32[$1139>>2]|0;
      $1926 = ((($1925)) + 4|0);
      $1927 = HEAP32[$1926>>2]|0;
      $1928 = $1927 >>> 8;
      $1929 = $1928&255;
      $1930 = ((($1902)) + 1|0);
      HEAP8[$1930>>0] = $1929;
      $1931 = HEAP32[$1139>>2]|0;
      $1932 = ((($1931)) + 4|0);
      $1933 = HEAP32[$1932>>2]|0;
      $1934 = $1933&255;
      $1935 = ((($1902)) + 2|0);
      HEAP8[$1935>>0] = $1934;
      $1985 = 3;
      break;
     }
     $1936 = ($1909>>>0)>(268435455);
     if ($1936) {
      $1957 = $1909 >>> 28;
      $1958 = $1957 | 240;
      $1959 = $1958&255;
      HEAP8[$1902>>0] = $1959;
      $1960 = HEAP32[$1139>>2]|0;
      $1961 = ((($1960)) + 4|0);
      $1962 = HEAP32[$1961>>2]|0;
      $1963 = $1962 >>> 20;
      $1964 = $1963&255;
      $1965 = ((($1902)) + 1|0);
      HEAP8[$1965>>0] = $1964;
      $1966 = HEAP32[$1139>>2]|0;
      $1967 = ((($1966)) + 4|0);
      $1968 = HEAP32[$1967>>2]|0;
      $1969 = $1968 >>> 12;
      $1970 = $1969&255;
      $1971 = ((($1902)) + 2|0);
      HEAP8[$1971>>0] = $1970;
      $1972 = HEAP32[$1139>>2]|0;
      $1973 = ((($1972)) + 4|0);
      $1974 = HEAP32[$1973>>2]|0;
      $1975 = $1974 >>> 4;
      $1976 = $1975&255;
      $1977 = ((($1902)) + 3|0);
      HEAP8[$1977>>0] = $1976;
      $1978 = HEAP32[$1139>>2]|0;
      $1979 = ((($1978)) + 4|0);
      $1980 = HEAP32[$1979>>2]|0;
      $1981 = $1980 & 15;
      $1982 = $1981&255;
      $1983 = ((($1902)) + 4|0);
      HEAP8[$1983>>0] = $1982;
      $1985 = 5;
      break;
     } else {
      $1937 = $1909 >>> 24;
      $1938 = $1937 | 224;
      $1939 = $1938&255;
      HEAP8[$1902>>0] = $1939;
      $1940 = HEAP32[$1139>>2]|0;
      $1941 = ((($1940)) + 4|0);
      $1942 = HEAP32[$1941>>2]|0;
      $1943 = $1942 >>> 16;
      $1944 = $1943&255;
      $1945 = ((($1902)) + 1|0);
      HEAP8[$1945>>0] = $1944;
      $1946 = HEAP32[$1139>>2]|0;
      $1947 = ((($1946)) + 4|0);
      $1948 = HEAP32[$1947>>2]|0;
      $1949 = $1948 >>> 8;
      $1950 = $1949&255;
      $1951 = ((($1902)) + 2|0);
      HEAP8[$1951>>0] = $1950;
      $1952 = HEAP32[$1139>>2]|0;
      $1953 = ((($1952)) + 4|0);
      $1954 = HEAP32[$1953>>2]|0;
      $1955 = $1954&255;
      $1956 = ((($1902)) + 3|0);
      HEAP8[$1956>>0] = $1955;
      $1985 = 4;
      break;
     }
    } else {
     $1911 = $1909&255;
     HEAP8[$1902>>0] = $1911;
     $1985 = 1;
    }
   } while(0);
   $1984 = (($1902) + ($1985)|0);
   $1986 = HEAP32[$1139>>2]|0;
   $1987 = ((($1986)) + 8|0);
   $1988 = HEAP32[$1987>>2]|0;
   $1989 = ($1988>>>0)>(127);
   do {
    if ($1989) {
     $1991 = ($1988>>>0)>(16383);
     if (!($1991)) {
      $1992 = $1988 >>> 8;
      $1993 = $1992 | 128;
      $1994 = $1993&255;
      HEAP8[$1984>>0] = $1994;
      $1995 = HEAP32[$1139>>2]|0;
      $1996 = ((($1995)) + 8|0);
      $1997 = HEAP32[$1996>>2]|0;
      $1998 = $1997&255;
      $1999 = ((($1984)) + 1|0);
      HEAP8[$1999>>0] = $1998;
      $2064 = 2;
      break;
     }
     $2000 = ($1988>>>0)>(2097151);
     if (!($2000)) {
      $2001 = $1988 >>> 16;
      $2002 = $2001 | 192;
      $2003 = $2002&255;
      HEAP8[$1984>>0] = $2003;
      $2004 = HEAP32[$1139>>2]|0;
      $2005 = ((($2004)) + 8|0);
      $2006 = HEAP32[$2005>>2]|0;
      $2007 = $2006 >>> 8;
      $2008 = $2007&255;
      $2009 = ((($1984)) + 1|0);
      HEAP8[$2009>>0] = $2008;
      $2010 = HEAP32[$1139>>2]|0;
      $2011 = ((($2010)) + 8|0);
      $2012 = HEAP32[$2011>>2]|0;
      $2013 = $2012&255;
      $2014 = ((($1984)) + 2|0);
      HEAP8[$2014>>0] = $2013;
      $2064 = 3;
      break;
     }
     $2015 = ($1988>>>0)>(268435455);
     if ($2015) {
      $2036 = $1988 >>> 28;
      $2037 = $2036 | 240;
      $2038 = $2037&255;
      HEAP8[$1984>>0] = $2038;
      $2039 = HEAP32[$1139>>2]|0;
      $2040 = ((($2039)) + 8|0);
      $2041 = HEAP32[$2040>>2]|0;
      $2042 = $2041 >>> 20;
      $2043 = $2042&255;
      $2044 = ((($1984)) + 1|0);
      HEAP8[$2044>>0] = $2043;
      $2045 = HEAP32[$1139>>2]|0;
      $2046 = ((($2045)) + 8|0);
      $2047 = HEAP32[$2046>>2]|0;
      $2048 = $2047 >>> 12;
      $2049 = $2048&255;
      $2050 = ((($1984)) + 2|0);
      HEAP8[$2050>>0] = $2049;
      $2051 = HEAP32[$1139>>2]|0;
      $2052 = ((($2051)) + 8|0);
      $2053 = HEAP32[$2052>>2]|0;
      $2054 = $2053 >>> 4;
      $2055 = $2054&255;
      $2056 = ((($1984)) + 3|0);
      HEAP8[$2056>>0] = $2055;
      $2057 = HEAP32[$1139>>2]|0;
      $2058 = ((($2057)) + 8|0);
      $2059 = HEAP32[$2058>>2]|0;
      $2060 = $2059 & 15;
      $2061 = $2060&255;
      $2062 = ((($1984)) + 4|0);
      HEAP8[$2062>>0] = $2061;
      $2064 = 5;
      break;
     } else {
      $2016 = $1988 >>> 24;
      $2017 = $2016 | 224;
      $2018 = $2017&255;
      HEAP8[$1984>>0] = $2018;
      $2019 = HEAP32[$1139>>2]|0;
      $2020 = ((($2019)) + 8|0);
      $2021 = HEAP32[$2020>>2]|0;
      $2022 = $2021 >>> 16;
      $2023 = $2022&255;
      $2024 = ((($1984)) + 1|0);
      HEAP8[$2024>>0] = $2023;
      $2025 = HEAP32[$1139>>2]|0;
      $2026 = ((($2025)) + 8|0);
      $2027 = HEAP32[$2026>>2]|0;
      $2028 = $2027 >>> 8;
      $2029 = $2028&255;
      $2030 = ((($1984)) + 2|0);
      HEAP8[$2030>>0] = $2029;
      $2031 = HEAP32[$1139>>2]|0;
      $2032 = ((($2031)) + 8|0);
      $2033 = HEAP32[$2032>>2]|0;
      $2034 = $2033&255;
      $2035 = ((($1984)) + 3|0);
      HEAP8[$2035>>0] = $2034;
      $2064 = 4;
      break;
     }
    } else {
     $1990 = $1988&255;
     HEAP8[$1984>>0] = $1990;
     $2064 = 1;
    }
   } while(0);
   $2063 = (($1984) + ($2064)|0);
   $2065 = HEAP32[$1139>>2]|0;
   $2066 = ((($2065)) + 12|0);
   $2067 = HEAP32[$2066>>2]|0;
   $2068 = ($2067>>>0)>(127);
   do {
    if ($2068) {
     $2070 = ($2067>>>0)>(16383);
     if (!($2070)) {
      $2071 = $2067 >>> 8;
      $2072 = $2071 | 128;
      $2073 = $2072&255;
      HEAP8[$2063>>0] = $2073;
      $2074 = HEAP32[$1139>>2]|0;
      $2075 = ((($2074)) + 12|0);
      $2076 = HEAP32[$2075>>2]|0;
      $2077 = $2076&255;
      $2078 = ((($2063)) + 1|0);
      HEAP8[$2078>>0] = $2077;
      $2143 = 2;
      break;
     }
     $2079 = ($2067>>>0)>(2097151);
     if (!($2079)) {
      $2080 = $2067 >>> 16;
      $2081 = $2080 | 192;
      $2082 = $2081&255;
      HEAP8[$2063>>0] = $2082;
      $2083 = HEAP32[$1139>>2]|0;
      $2084 = ((($2083)) + 12|0);
      $2085 = HEAP32[$2084>>2]|0;
      $2086 = $2085 >>> 8;
      $2087 = $2086&255;
      $2088 = ((($2063)) + 1|0);
      HEAP8[$2088>>0] = $2087;
      $2089 = HEAP32[$1139>>2]|0;
      $2090 = ((($2089)) + 12|0);
      $2091 = HEAP32[$2090>>2]|0;
      $2092 = $2091&255;
      $2093 = ((($2063)) + 2|0);
      HEAP8[$2093>>0] = $2092;
      $2143 = 3;
      break;
     }
     $2094 = ($2067>>>0)>(268435455);
     if ($2094) {
      $2115 = $2067 >>> 28;
      $2116 = $2115 | 240;
      $2117 = $2116&255;
      HEAP8[$2063>>0] = $2117;
      $2118 = HEAP32[$1139>>2]|0;
      $2119 = ((($2118)) + 12|0);
      $2120 = HEAP32[$2119>>2]|0;
      $2121 = $2120 >>> 20;
      $2122 = $2121&255;
      $2123 = ((($2063)) + 1|0);
      HEAP8[$2123>>0] = $2122;
      $2124 = HEAP32[$1139>>2]|0;
      $2125 = ((($2124)) + 12|0);
      $2126 = HEAP32[$2125>>2]|0;
      $2127 = $2126 >>> 12;
      $2128 = $2127&255;
      $2129 = ((($2063)) + 2|0);
      HEAP8[$2129>>0] = $2128;
      $2130 = HEAP32[$1139>>2]|0;
      $2131 = ((($2130)) + 12|0);
      $2132 = HEAP32[$2131>>2]|0;
      $2133 = $2132 >>> 4;
      $2134 = $2133&255;
      $2135 = ((($2063)) + 3|0);
      HEAP8[$2135>>0] = $2134;
      $2136 = HEAP32[$1139>>2]|0;
      $2137 = ((($2136)) + 12|0);
      $2138 = HEAP32[$2137>>2]|0;
      $2139 = $2138 & 15;
      $2140 = $2139&255;
      $2141 = ((($2063)) + 4|0);
      HEAP8[$2141>>0] = $2140;
      $2143 = 5;
      break;
     } else {
      $2095 = $2067 >>> 24;
      $2096 = $2095 | 224;
      $2097 = $2096&255;
      HEAP8[$2063>>0] = $2097;
      $2098 = HEAP32[$1139>>2]|0;
      $2099 = ((($2098)) + 12|0);
      $2100 = HEAP32[$2099>>2]|0;
      $2101 = $2100 >>> 16;
      $2102 = $2101&255;
      $2103 = ((($2063)) + 1|0);
      HEAP8[$2103>>0] = $2102;
      $2104 = HEAP32[$1139>>2]|0;
      $2105 = ((($2104)) + 12|0);
      $2106 = HEAP32[$2105>>2]|0;
      $2107 = $2106 >>> 8;
      $2108 = $2107&255;
      $2109 = ((($2063)) + 2|0);
      HEAP8[$2109>>0] = $2108;
      $2110 = HEAP32[$1139>>2]|0;
      $2111 = ((($2110)) + 12|0);
      $2112 = HEAP32[$2111>>2]|0;
      $2113 = $2112&255;
      $2114 = ((($2063)) + 3|0);
      HEAP8[$2114>>0] = $2113;
      $2143 = 4;
      break;
     }
    } else {
     $2069 = $2067&255;
     HEAP8[$2063>>0] = $2069;
     $2143 = 1;
    }
   } while(0);
   $2142 = (($2063) + ($2143)|0);
   $2144 = HEAP32[$1139>>2]|0;
   $2145 = ((($2144)) + 16|0);
   $2146 = HEAP32[$2145>>2]|0;
   $2147 = ($2146>>>0)>(127);
   do {
    if ($2147) {
     $2149 = ($2146>>>0)>(16383);
     if (!($2149)) {
      $2150 = $2146 >>> 8;
      $2151 = $2150 | 128;
      $2152 = $2151&255;
      HEAP8[$2142>>0] = $2152;
      $2153 = HEAP32[$1139>>2]|0;
      $2154 = ((($2153)) + 16|0);
      $2155 = HEAP32[$2154>>2]|0;
      $2156 = $2155&255;
      $2157 = ((($2142)) + 1|0);
      HEAP8[$2157>>0] = $2156;
      $2222 = 2;
      break;
     }
     $2158 = ($2146>>>0)>(2097151);
     if (!($2158)) {
      $2159 = $2146 >>> 16;
      $2160 = $2159 | 192;
      $2161 = $2160&255;
      HEAP8[$2142>>0] = $2161;
      $2162 = HEAP32[$1139>>2]|0;
      $2163 = ((($2162)) + 16|0);
      $2164 = HEAP32[$2163>>2]|0;
      $2165 = $2164 >>> 8;
      $2166 = $2165&255;
      $2167 = ((($2142)) + 1|0);
      HEAP8[$2167>>0] = $2166;
      $2168 = HEAP32[$1139>>2]|0;
      $2169 = ((($2168)) + 16|0);
      $2170 = HEAP32[$2169>>2]|0;
      $2171 = $2170&255;
      $2172 = ((($2142)) + 2|0);
      HEAP8[$2172>>0] = $2171;
      $2222 = 3;
      break;
     }
     $2173 = ($2146>>>0)>(268435455);
     if ($2173) {
      $2194 = $2146 >>> 28;
      $2195 = $2194 | 240;
      $2196 = $2195&255;
      HEAP8[$2142>>0] = $2196;
      $2197 = HEAP32[$1139>>2]|0;
      $2198 = ((($2197)) + 16|0);
      $2199 = HEAP32[$2198>>2]|0;
      $2200 = $2199 >>> 20;
      $2201 = $2200&255;
      $2202 = ((($2142)) + 1|0);
      HEAP8[$2202>>0] = $2201;
      $2203 = HEAP32[$1139>>2]|0;
      $2204 = ((($2203)) + 16|0);
      $2205 = HEAP32[$2204>>2]|0;
      $2206 = $2205 >>> 12;
      $2207 = $2206&255;
      $2208 = ((($2142)) + 2|0);
      HEAP8[$2208>>0] = $2207;
      $2209 = HEAP32[$1139>>2]|0;
      $2210 = ((($2209)) + 16|0);
      $2211 = HEAP32[$2210>>2]|0;
      $2212 = $2211 >>> 4;
      $2213 = $2212&255;
      $2214 = ((($2142)) + 3|0);
      HEAP8[$2214>>0] = $2213;
      $2215 = HEAP32[$1139>>2]|0;
      $2216 = ((($2215)) + 16|0);
      $2217 = HEAP32[$2216>>2]|0;
      $2218 = $2217 & 15;
      $2219 = $2218&255;
      $2220 = ((($2142)) + 4|0);
      HEAP8[$2220>>0] = $2219;
      $2222 = 5;
      break;
     } else {
      $2174 = $2146 >>> 24;
      $2175 = $2174 | 224;
      $2176 = $2175&255;
      HEAP8[$2142>>0] = $2176;
      $2177 = HEAP32[$1139>>2]|0;
      $2178 = ((($2177)) + 16|0);
      $2179 = HEAP32[$2178>>2]|0;
      $2180 = $2179 >>> 16;
      $2181 = $2180&255;
      $2182 = ((($2142)) + 1|0);
      HEAP8[$2182>>0] = $2181;
      $2183 = HEAP32[$1139>>2]|0;
      $2184 = ((($2183)) + 16|0);
      $2185 = HEAP32[$2184>>2]|0;
      $2186 = $2185 >>> 8;
      $2187 = $2186&255;
      $2188 = ((($2142)) + 2|0);
      HEAP8[$2188>>0] = $2187;
      $2189 = HEAP32[$1139>>2]|0;
      $2190 = ((($2189)) + 16|0);
      $2191 = HEAP32[$2190>>2]|0;
      $2192 = $2191&255;
      $2193 = ((($2142)) + 3|0);
      HEAP8[$2193>>0] = $2192;
      $2222 = 4;
      break;
     }
    } else {
     $2148 = $2146&255;
     HEAP8[$2142>>0] = $2148;
     $2222 = 1;
    }
   } while(0);
   $2221 = (($2142) + ($2222)|0);
   $2223 = HEAP32[$558>>2]|0;
   $$mask$i15$i = $2223 & -256;
   $2224 = ($$mask$i15$i|0)==(512);
   do {
    if ($2224) {
     $2225 = HEAP32[$1139>>2]|0;
     $2226 = ((($2225)) + 24|0);
     $2227 = $2226;
     $2228 = $2227;
     $2229 = HEAP32[$2228>>2]|0;
     $2230 = (($2227) + 4)|0;
     $2231 = $2230;
     $2232 = HEAP32[$2231>>2]|0;
     $2233 = ($2232>>>0)>(0);
     $2234 = ($2229>>>0)>(127);
     $2235 = ($2232|0)==(0);
     $2236 = $2235 & $2234;
     $2237 = $2233 | $2236;
     do {
      if ($2237) {
       $2239 = ($2232>>>0)>(0);
       $2240 = ($2229>>>0)>(16383);
       $2241 = ($2232|0)==(0);
       $2242 = $2241 & $2240;
       $2243 = $2239 | $2242;
       if (!($2243)) {
        $2244 = (_bitshift64Lshr(($2229|0),($2232|0),8)|0);
        $2245 = tempRet0;
        $2246 = $2244 | 128;
        $2247 = $2246&255;
        HEAP8[$2221>>0] = $2247;
        $2248 = HEAP32[$1139>>2]|0;
        $2249 = ((($2248)) + 24|0);
        $2250 = $2249;
        $2251 = $2250;
        $2252 = HEAP32[$2251>>2]|0;
        $2253 = (($2250) + 4)|0;
        $2254 = $2253;
        $2255 = HEAP32[$2254>>2]|0;
        $2256 = $2252&255;
        $2257 = ((($2221)) + 1|0);
        HEAP8[$2257>>0] = $2256;
        $2384 = 2;
        break;
       }
       $2258 = ($2232>>>0)>(0);
       $2259 = ($2229>>>0)>(2097151);
       $2260 = ($2232|0)==(0);
       $2261 = $2260 & $2259;
       $2262 = $2258 | $2261;
       if (!($2262)) {
        $2263 = (_bitshift64Lshr(($2229|0),($2232|0),16)|0);
        $2264 = tempRet0;
        $2265 = $2263 | 192;
        $2266 = $2265&255;
        HEAP8[$2221>>0] = $2266;
        $2267 = HEAP32[$1139>>2]|0;
        $2268 = ((($2267)) + 24|0);
        $2269 = $2268;
        $2270 = $2269;
        $2271 = HEAP32[$2270>>2]|0;
        $2272 = (($2269) + 4)|0;
        $2273 = $2272;
        $2274 = HEAP32[$2273>>2]|0;
        $2275 = (_bitshift64Lshr(($2271|0),($2274|0),8)|0);
        $2276 = tempRet0;
        $2277 = $2275&255;
        $2278 = ((($2221)) + 1|0);
        HEAP8[$2278>>0] = $2277;
        $2279 = HEAP32[$1139>>2]|0;
        $2280 = ((($2279)) + 24|0);
        $2281 = $2280;
        $2282 = $2281;
        $2283 = HEAP32[$2282>>2]|0;
        $2284 = (($2281) + 4)|0;
        $2285 = $2284;
        $2286 = HEAP32[$2285>>2]|0;
        $2287 = $2283&255;
        $2288 = ((($2221)) + 2|0);
        HEAP8[$2288>>0] = $2287;
        $2384 = 3;
        break;
       }
       $2289 = ($2232>>>0)>(0);
       $2290 = ($2229>>>0)>(268435455);
       $2291 = ($2232|0)==(0);
       $2292 = $2291 & $2290;
       $2293 = $2289 | $2292;
       if ($2293) {
        $2332 = (_bitshift64Lshr(($2229|0),($2232|0),28)|0);
        $2333 = tempRet0;
        $2334 = $2332 | 240;
        $2335 = $2334&255;
        HEAP8[$2221>>0] = $2335;
        $2336 = HEAP32[$1139>>2]|0;
        $2337 = ((($2336)) + 24|0);
        $2338 = $2337;
        $2339 = $2338;
        $2340 = HEAP32[$2339>>2]|0;
        $2341 = (($2338) + 4)|0;
        $2342 = $2341;
        $2343 = HEAP32[$2342>>2]|0;
        $2344 = (_bitshift64Lshr(($2340|0),($2343|0),20)|0);
        $2345 = tempRet0;
        $2346 = $2344&255;
        $2347 = ((($2221)) + 1|0);
        HEAP8[$2347>>0] = $2346;
        $2348 = HEAP32[$1139>>2]|0;
        $2349 = ((($2348)) + 24|0);
        $2350 = $2349;
        $2351 = $2350;
        $2352 = HEAP32[$2351>>2]|0;
        $2353 = (($2350) + 4)|0;
        $2354 = $2353;
        $2355 = HEAP32[$2354>>2]|0;
        $2356 = (_bitshift64Lshr(($2352|0),($2355|0),12)|0);
        $2357 = tempRet0;
        $2358 = $2356&255;
        $2359 = ((($2221)) + 2|0);
        HEAP8[$2359>>0] = $2358;
        $2360 = HEAP32[$1139>>2]|0;
        $2361 = ((($2360)) + 24|0);
        $2362 = $2361;
        $2363 = $2362;
        $2364 = HEAP32[$2363>>2]|0;
        $2365 = (($2362) + 4)|0;
        $2366 = $2365;
        $2367 = HEAP32[$2366>>2]|0;
        $2368 = (_bitshift64Lshr(($2364|0),($2367|0),4)|0);
        $2369 = tempRet0;
        $2370 = $2368&255;
        $2371 = ((($2221)) + 3|0);
        HEAP8[$2371>>0] = $2370;
        $2372 = HEAP32[$1139>>2]|0;
        $2373 = ((($2372)) + 24|0);
        $2374 = $2373;
        $2375 = $2374;
        $2376 = HEAP32[$2375>>2]|0;
        $2377 = (($2374) + 4)|0;
        $2378 = $2377;
        $2379 = HEAP32[$2378>>2]|0;
        $2380 = $2376&255;
        $2381 = $2380 & 15;
        $2382 = ((($2221)) + 4|0);
        HEAP8[$2382>>0] = $2381;
        $2384 = 5;
        break;
       } else {
        $2294 = (_bitshift64Lshr(($2229|0),($2232|0),24)|0);
        $2295 = tempRet0;
        $2296 = $2294 | 224;
        $2297 = $2296&255;
        HEAP8[$2221>>0] = $2297;
        $2298 = HEAP32[$1139>>2]|0;
        $2299 = ((($2298)) + 24|0);
        $2300 = $2299;
        $2301 = $2300;
        $2302 = HEAP32[$2301>>2]|0;
        $2303 = (($2300) + 4)|0;
        $2304 = $2303;
        $2305 = HEAP32[$2304>>2]|0;
        $2306 = (_bitshift64Lshr(($2302|0),($2305|0),16)|0);
        $2307 = tempRet0;
        $2308 = $2306&255;
        $2309 = ((($2221)) + 1|0);
        HEAP8[$2309>>0] = $2308;
        $2310 = HEAP32[$1139>>2]|0;
        $2311 = ((($2310)) + 24|0);
        $2312 = $2311;
        $2313 = $2312;
        $2314 = HEAP32[$2313>>2]|0;
        $2315 = (($2312) + 4)|0;
        $2316 = $2315;
        $2317 = HEAP32[$2316>>2]|0;
        $2318 = (_bitshift64Lshr(($2314|0),($2317|0),8)|0);
        $2319 = tempRet0;
        $2320 = $2318&255;
        $2321 = ((($2221)) + 2|0);
        HEAP8[$2321>>0] = $2320;
        $2322 = HEAP32[$1139>>2]|0;
        $2323 = ((($2322)) + 24|0);
        $2324 = $2323;
        $2325 = $2324;
        $2326 = HEAP32[$2325>>2]|0;
        $2327 = (($2324) + 4)|0;
        $2328 = $2327;
        $2329 = HEAP32[$2328>>2]|0;
        $2330 = $2326&255;
        $2331 = ((($2221)) + 3|0);
        HEAP8[$2331>>0] = $2330;
        $2384 = 4;
        break;
       }
      } else {
       $2238 = $2229&255;
       HEAP8[$2221>>0] = $2238;
       $2384 = 1;
      }
     } while(0);
     $2383 = (($2221) + ($2384)|0);
     $cp$1$i$i = $2383;
    } else {
     $2385 = $2223 >> 8;
     $2386 = ($2385|0)>(2);
     if (!($2386)) {
      $cp$1$i$i = $2221;
      break;
     }
     $2387 = HEAP32[$1139>>2]|0;
     $2388 = ((($2387)) + 24|0);
     $2389 = $2388;
     $2390 = $2389;
     $2391 = HEAP32[$2390>>2]|0;
     $2392 = (($2389) + 4)|0;
     $2393 = $2392;
     $2394 = HEAP32[$2393>>2]|0;
     $2395 = (_ltf8_put($2221,$2391,$2394)|0);
     $2396 = (($2221) + ($2395)|0);
     $cp$1$i$i = $2396;
    }
   } while(0);
   $2397 = HEAP32[$1139>>2]|0;
   $2398 = ((($2397)) + 32|0);
   $2399 = HEAP32[$2398>>2]|0;
   $2400 = ($2399>>>0)>(127);
   do {
    if ($2400) {
     $2402 = ($2399>>>0)>(16383);
     if (!($2402)) {
      $2403 = $2399 >>> 8;
      $2404 = $2403 | 128;
      $2405 = $2404&255;
      HEAP8[$cp$1$i$i>>0] = $2405;
      $2406 = HEAP32[$1139>>2]|0;
      $2407 = ((($2406)) + 32|0);
      $2408 = HEAP32[$2407>>2]|0;
      $2409 = $2408&255;
      $2410 = ((($cp$1$i$i)) + 1|0);
      HEAP8[$2410>>0] = $2409;
      $2475 = 2;
      break;
     }
     $2411 = ($2399>>>0)>(2097151);
     if (!($2411)) {
      $2412 = $2399 >>> 16;
      $2413 = $2412 | 192;
      $2414 = $2413&255;
      HEAP8[$cp$1$i$i>>0] = $2414;
      $2415 = HEAP32[$1139>>2]|0;
      $2416 = ((($2415)) + 32|0);
      $2417 = HEAP32[$2416>>2]|0;
      $2418 = $2417 >>> 8;
      $2419 = $2418&255;
      $2420 = ((($cp$1$i$i)) + 1|0);
      HEAP8[$2420>>0] = $2419;
      $2421 = HEAP32[$1139>>2]|0;
      $2422 = ((($2421)) + 32|0);
      $2423 = HEAP32[$2422>>2]|0;
      $2424 = $2423&255;
      $2425 = ((($cp$1$i$i)) + 2|0);
      HEAP8[$2425>>0] = $2424;
      $2475 = 3;
      break;
     }
     $2426 = ($2399>>>0)>(268435455);
     if ($2426) {
      $2447 = $2399 >>> 28;
      $2448 = $2447 | 240;
      $2449 = $2448&255;
      HEAP8[$cp$1$i$i>>0] = $2449;
      $2450 = HEAP32[$1139>>2]|0;
      $2451 = ((($2450)) + 32|0);
      $2452 = HEAP32[$2451>>2]|0;
      $2453 = $2452 >>> 20;
      $2454 = $2453&255;
      $2455 = ((($cp$1$i$i)) + 1|0);
      HEAP8[$2455>>0] = $2454;
      $2456 = HEAP32[$1139>>2]|0;
      $2457 = ((($2456)) + 32|0);
      $2458 = HEAP32[$2457>>2]|0;
      $2459 = $2458 >>> 12;
      $2460 = $2459&255;
      $2461 = ((($cp$1$i$i)) + 2|0);
      HEAP8[$2461>>0] = $2460;
      $2462 = HEAP32[$1139>>2]|0;
      $2463 = ((($2462)) + 32|0);
      $2464 = HEAP32[$2463>>2]|0;
      $2465 = $2464 >>> 4;
      $2466 = $2465&255;
      $2467 = ((($cp$1$i$i)) + 3|0);
      HEAP8[$2467>>0] = $2466;
      $2468 = HEAP32[$1139>>2]|0;
      $2469 = ((($2468)) + 32|0);
      $2470 = HEAP32[$2469>>2]|0;
      $2471 = $2470 & 15;
      $2472 = $2471&255;
      $2473 = ((($cp$1$i$i)) + 4|0);
      HEAP8[$2473>>0] = $2472;
      $2475 = 5;
      break;
     } else {
      $2427 = $2399 >>> 24;
      $2428 = $2427 | 224;
      $2429 = $2428&255;
      HEAP8[$cp$1$i$i>>0] = $2429;
      $2430 = HEAP32[$1139>>2]|0;
      $2431 = ((($2430)) + 32|0);
      $2432 = HEAP32[$2431>>2]|0;
      $2433 = $2432 >>> 16;
      $2434 = $2433&255;
      $2435 = ((($cp$1$i$i)) + 1|0);
      HEAP8[$2435>>0] = $2434;
      $2436 = HEAP32[$1139>>2]|0;
      $2437 = ((($2436)) + 32|0);
      $2438 = HEAP32[$2437>>2]|0;
      $2439 = $2438 >>> 8;
      $2440 = $2439&255;
      $2441 = ((($cp$1$i$i)) + 2|0);
      HEAP8[$2441>>0] = $2440;
      $2442 = HEAP32[$1139>>2]|0;
      $2443 = ((($2442)) + 32|0);
      $2444 = HEAP32[$2443>>2]|0;
      $2445 = $2444&255;
      $2446 = ((($cp$1$i$i)) + 3|0);
      HEAP8[$2446>>0] = $2445;
      $2475 = 4;
      break;
     }
    } else {
     $2401 = $2399&255;
     HEAP8[$cp$1$i$i>>0] = $2401;
     $2475 = 1;
    }
   } while(0);
   $2474 = (($cp$1$i$i) + ($2475)|0);
   $2476 = HEAP32[$1139>>2]|0;
   $2477 = ((($2476)) + 36|0);
   $2478 = HEAP32[$2477>>2]|0;
   $2479 = ($2478>>>0)>(127);
   do {
    if ($2479) {
     $2481 = ($2478>>>0)>(16383);
     if (!($2481)) {
      $2482 = $2478 >>> 8;
      $2483 = $2482 | 128;
      $2484 = $2483&255;
      HEAP8[$2474>>0] = $2484;
      $2485 = HEAP32[$1139>>2]|0;
      $2486 = ((($2485)) + 36|0);
      $2487 = HEAP32[$2486>>2]|0;
      $2488 = $2487&255;
      $2489 = ((($2474)) + 1|0);
      HEAP8[$2489>>0] = $2488;
      $2554 = 2;
      break;
     }
     $2490 = ($2478>>>0)>(2097151);
     if (!($2490)) {
      $2491 = $2478 >>> 16;
      $2492 = $2491 | 192;
      $2493 = $2492&255;
      HEAP8[$2474>>0] = $2493;
      $2494 = HEAP32[$1139>>2]|0;
      $2495 = ((($2494)) + 36|0);
      $2496 = HEAP32[$2495>>2]|0;
      $2497 = $2496 >>> 8;
      $2498 = $2497&255;
      $2499 = ((($2474)) + 1|0);
      HEAP8[$2499>>0] = $2498;
      $2500 = HEAP32[$1139>>2]|0;
      $2501 = ((($2500)) + 36|0);
      $2502 = HEAP32[$2501>>2]|0;
      $2503 = $2502&255;
      $2504 = ((($2474)) + 2|0);
      HEAP8[$2504>>0] = $2503;
      $2554 = 3;
      break;
     }
     $2505 = ($2478>>>0)>(268435455);
     if ($2505) {
      $2526 = $2478 >>> 28;
      $2527 = $2526 | 240;
      $2528 = $2527&255;
      HEAP8[$2474>>0] = $2528;
      $2529 = HEAP32[$1139>>2]|0;
      $2530 = ((($2529)) + 36|0);
      $2531 = HEAP32[$2530>>2]|0;
      $2532 = $2531 >>> 20;
      $2533 = $2532&255;
      $2534 = ((($2474)) + 1|0);
      HEAP8[$2534>>0] = $2533;
      $2535 = HEAP32[$1139>>2]|0;
      $2536 = ((($2535)) + 36|0);
      $2537 = HEAP32[$2536>>2]|0;
      $2538 = $2537 >>> 12;
      $2539 = $2538&255;
      $2540 = ((($2474)) + 2|0);
      HEAP8[$2540>>0] = $2539;
      $2541 = HEAP32[$1139>>2]|0;
      $2542 = ((($2541)) + 36|0);
      $2543 = HEAP32[$2542>>2]|0;
      $2544 = $2543 >>> 4;
      $2545 = $2544&255;
      $2546 = ((($2474)) + 3|0);
      HEAP8[$2546>>0] = $2545;
      $2547 = HEAP32[$1139>>2]|0;
      $2548 = ((($2547)) + 36|0);
      $2549 = HEAP32[$2548>>2]|0;
      $2550 = $2549 & 15;
      $2551 = $2550&255;
      $2552 = ((($2474)) + 4|0);
      HEAP8[$2552>>0] = $2551;
      $2554 = 5;
      break;
     } else {
      $2506 = $2478 >>> 24;
      $2507 = $2506 | 224;
      $2508 = $2507&255;
      HEAP8[$2474>>0] = $2508;
      $2509 = HEAP32[$1139>>2]|0;
      $2510 = ((($2509)) + 36|0);
      $2511 = HEAP32[$2510>>2]|0;
      $2512 = $2511 >>> 16;
      $2513 = $2512&255;
      $2514 = ((($2474)) + 1|0);
      HEAP8[$2514>>0] = $2513;
      $2515 = HEAP32[$1139>>2]|0;
      $2516 = ((($2515)) + 36|0);
      $2517 = HEAP32[$2516>>2]|0;
      $2518 = $2517 >>> 8;
      $2519 = $2518&255;
      $2520 = ((($2474)) + 2|0);
      HEAP8[$2520>>0] = $2519;
      $2521 = HEAP32[$1139>>2]|0;
      $2522 = ((($2521)) + 36|0);
      $2523 = HEAP32[$2522>>2]|0;
      $2524 = $2523&255;
      $2525 = ((($2474)) + 3|0);
      HEAP8[$2525>>0] = $2524;
      $2554 = 4;
      break;
     }
    } else {
     $2480 = $2478&255;
     HEAP8[$2474>>0] = $2480;
     $2554 = 1;
    }
   } while(0);
   $2553 = (($2474) + ($2554)|0);
   $cp$2$i$i = $2553;$j$0$i16$i = 0;
   while(1) {
    $2555 = HEAP32[$1139>>2]|0;
    $2556 = ((($2555)) + 36|0);
    $2557 = HEAP32[$2556>>2]|0;
    $2558 = ($j$0$i16$i|0)<($2557|0);
    if (!($2558)) {
     break;
    }
    $2559 = ((($2555)) + 40|0);
    $2560 = HEAP32[$2559>>2]|0;
    $2561 = (($2560) + ($j$0$i16$i<<2)|0);
    $2562 = HEAP32[$2561>>2]|0;
    $2563 = ($2562>>>0)>(127);
    do {
     if ($2563) {
      $2565 = ($2562>>>0)>(16383);
      if (!($2565)) {
       $2566 = $2562 >>> 8;
       $2567 = $2566 | 128;
       $2568 = $2567&255;
       HEAP8[$cp$2$i$i>>0] = $2568;
       $2569 = HEAP32[$1139>>2]|0;
       $2570 = ((($2569)) + 40|0);
       $2571 = HEAP32[$2570>>2]|0;
       $2572 = (($2571) + ($j$0$i16$i<<2)|0);
       $2573 = HEAP32[$2572>>2]|0;
       $2574 = $2573&255;
       $2575 = ((($cp$2$i$i)) + 1|0);
       HEAP8[$2575>>0] = $2574;
       $2658 = 2;
       break;
      }
      $2576 = ($2562>>>0)>(2097151);
      if (!($2576)) {
       $2577 = $2562 >>> 16;
       $2578 = $2577 | 192;
       $2579 = $2578&255;
       HEAP8[$cp$2$i$i>>0] = $2579;
       $2580 = HEAP32[$1139>>2]|0;
       $2581 = ((($2580)) + 40|0);
       $2582 = HEAP32[$2581>>2]|0;
       $2583 = (($2582) + ($j$0$i16$i<<2)|0);
       $2584 = HEAP32[$2583>>2]|0;
       $2585 = $2584 >>> 8;
       $2586 = $2585&255;
       $2587 = ((($cp$2$i$i)) + 1|0);
       HEAP8[$2587>>0] = $2586;
       $2588 = HEAP32[$1139>>2]|0;
       $2589 = ((($2588)) + 40|0);
       $2590 = HEAP32[$2589>>2]|0;
       $2591 = (($2590) + ($j$0$i16$i<<2)|0);
       $2592 = HEAP32[$2591>>2]|0;
       $2593 = $2592&255;
       $2594 = ((($cp$2$i$i)) + 2|0);
       HEAP8[$2594>>0] = $2593;
       $2658 = 3;
       break;
      }
      $2595 = ($2562>>>0)>(268435455);
      if ($2595) {
       $2622 = $2562 >>> 28;
       $2623 = $2622 | 240;
       $2624 = $2623&255;
       HEAP8[$cp$2$i$i>>0] = $2624;
       $2625 = HEAP32[$1139>>2]|0;
       $2626 = ((($2625)) + 40|0);
       $2627 = HEAP32[$2626>>2]|0;
       $2628 = (($2627) + ($j$0$i16$i<<2)|0);
       $2629 = HEAP32[$2628>>2]|0;
       $2630 = $2629 >>> 20;
       $2631 = $2630&255;
       $2632 = ((($cp$2$i$i)) + 1|0);
       HEAP8[$2632>>0] = $2631;
       $2633 = HEAP32[$1139>>2]|0;
       $2634 = ((($2633)) + 40|0);
       $2635 = HEAP32[$2634>>2]|0;
       $2636 = (($2635) + ($j$0$i16$i<<2)|0);
       $2637 = HEAP32[$2636>>2]|0;
       $2638 = $2637 >>> 12;
       $2639 = $2638&255;
       $2640 = ((($cp$2$i$i)) + 2|0);
       HEAP8[$2640>>0] = $2639;
       $2641 = HEAP32[$1139>>2]|0;
       $2642 = ((($2641)) + 40|0);
       $2643 = HEAP32[$2642>>2]|0;
       $2644 = (($2643) + ($j$0$i16$i<<2)|0);
       $2645 = HEAP32[$2644>>2]|0;
       $2646 = $2645 >>> 4;
       $2647 = $2646&255;
       $2648 = ((($cp$2$i$i)) + 3|0);
       HEAP8[$2648>>0] = $2647;
       $2649 = HEAP32[$1139>>2]|0;
       $2650 = ((($2649)) + 40|0);
       $2651 = HEAP32[$2650>>2]|0;
       $2652 = (($2651) + ($j$0$i16$i<<2)|0);
       $2653 = HEAP32[$2652>>2]|0;
       $2654 = $2653 & 15;
       $2655 = $2654&255;
       $2656 = ((($cp$2$i$i)) + 4|0);
       HEAP8[$2656>>0] = $2655;
       $2658 = 5;
       break;
      } else {
       $2596 = $2562 >>> 24;
       $2597 = $2596 | 224;
       $2598 = $2597&255;
       HEAP8[$cp$2$i$i>>0] = $2598;
       $2599 = HEAP32[$1139>>2]|0;
       $2600 = ((($2599)) + 40|0);
       $2601 = HEAP32[$2600>>2]|0;
       $2602 = (($2601) + ($j$0$i16$i<<2)|0);
       $2603 = HEAP32[$2602>>2]|0;
       $2604 = $2603 >>> 16;
       $2605 = $2604&255;
       $2606 = ((($cp$2$i$i)) + 1|0);
       HEAP8[$2606>>0] = $2605;
       $2607 = HEAP32[$1139>>2]|0;
       $2608 = ((($2607)) + 40|0);
       $2609 = HEAP32[$2608>>2]|0;
       $2610 = (($2609) + ($j$0$i16$i<<2)|0);
       $2611 = HEAP32[$2610>>2]|0;
       $2612 = $2611 >>> 8;
       $2613 = $2612&255;
       $2614 = ((($cp$2$i$i)) + 2|0);
       HEAP8[$2614>>0] = $2613;
       $2615 = HEAP32[$1139>>2]|0;
       $2616 = ((($2615)) + 40|0);
       $2617 = HEAP32[$2616>>2]|0;
       $2618 = (($2617) + ($j$0$i16$i<<2)|0);
       $2619 = HEAP32[$2618>>2]|0;
       $2620 = $2619&255;
       $2621 = ((($cp$2$i$i)) + 3|0);
       HEAP8[$2621>>0] = $2620;
       $2658 = 4;
       break;
      }
     } else {
      $2564 = $2562&255;
      HEAP8[$cp$2$i$i>>0] = $2564;
      $2658 = 1;
     }
    } while(0);
    $2657 = (($cp$2$i$i) + ($2658)|0);
    $2659 = (($j$0$i16$i) + 1)|0;
    $cp$2$i$i = $2657;$j$0$i16$i = $2659;
   }
   $2660 = HEAP32[$2555>>2]|0;
   $2661 = ($2660|0)==(2);
   if ($2661) {
    $2662 = ((($2555)) + 44|0);
    $2663 = HEAP32[$2662>>2]|0;
    $2664 = ($2663>>>0)>(127);
    do {
     if ($2664) {
      $2666 = ($2663>>>0)>(16383);
      if (!($2666)) {
       $2667 = $2663 >>> 8;
       $2668 = $2667 | 128;
       $2669 = $2668&255;
       HEAP8[$cp$2$i$i>>0] = $2669;
       $2670 = HEAP32[$1139>>2]|0;
       $2671 = ((($2670)) + 44|0);
       $2672 = HEAP32[$2671>>2]|0;
       $2673 = $2672&255;
       $2674 = ((($cp$2$i$i)) + 1|0);
       HEAP8[$2674>>0] = $2673;
       $2739 = 2;
       break;
      }
      $2675 = ($2663>>>0)>(2097151);
      if (!($2675)) {
       $2676 = $2663 >>> 16;
       $2677 = $2676 | 192;
       $2678 = $2677&255;
       HEAP8[$cp$2$i$i>>0] = $2678;
       $2679 = HEAP32[$1139>>2]|0;
       $2680 = ((($2679)) + 44|0);
       $2681 = HEAP32[$2680>>2]|0;
       $2682 = $2681 >>> 8;
       $2683 = $2682&255;
       $2684 = ((($cp$2$i$i)) + 1|0);
       HEAP8[$2684>>0] = $2683;
       $2685 = HEAP32[$1139>>2]|0;
       $2686 = ((($2685)) + 44|0);
       $2687 = HEAP32[$2686>>2]|0;
       $2688 = $2687&255;
       $2689 = ((($cp$2$i$i)) + 2|0);
       HEAP8[$2689>>0] = $2688;
       $2739 = 3;
       break;
      }
      $2690 = ($2663>>>0)>(268435455);
      if ($2690) {
       $2711 = $2663 >>> 28;
       $2712 = $2711 | 240;
       $2713 = $2712&255;
       HEAP8[$cp$2$i$i>>0] = $2713;
       $2714 = HEAP32[$1139>>2]|0;
       $2715 = ((($2714)) + 44|0);
       $2716 = HEAP32[$2715>>2]|0;
       $2717 = $2716 >>> 20;
       $2718 = $2717&255;
       $2719 = ((($cp$2$i$i)) + 1|0);
       HEAP8[$2719>>0] = $2718;
       $2720 = HEAP32[$1139>>2]|0;
       $2721 = ((($2720)) + 44|0);
       $2722 = HEAP32[$2721>>2]|0;
       $2723 = $2722 >>> 12;
       $2724 = $2723&255;
       $2725 = ((($cp$2$i$i)) + 2|0);
       HEAP8[$2725>>0] = $2724;
       $2726 = HEAP32[$1139>>2]|0;
       $2727 = ((($2726)) + 44|0);
       $2728 = HEAP32[$2727>>2]|0;
       $2729 = $2728 >>> 4;
       $2730 = $2729&255;
       $2731 = ((($cp$2$i$i)) + 3|0);
       HEAP8[$2731>>0] = $2730;
       $2732 = HEAP32[$1139>>2]|0;
       $2733 = ((($2732)) + 44|0);
       $2734 = HEAP32[$2733>>2]|0;
       $2735 = $2734 & 15;
       $2736 = $2735&255;
       $2737 = ((($cp$2$i$i)) + 4|0);
       HEAP8[$2737>>0] = $2736;
       $2739 = 5;
       break;
      } else {
       $2691 = $2663 >>> 24;
       $2692 = $2691 | 224;
       $2693 = $2692&255;
       HEAP8[$cp$2$i$i>>0] = $2693;
       $2694 = HEAP32[$1139>>2]|0;
       $2695 = ((($2694)) + 44|0);
       $2696 = HEAP32[$2695>>2]|0;
       $2697 = $2696 >>> 16;
       $2698 = $2697&255;
       $2699 = ((($cp$2$i$i)) + 1|0);
       HEAP8[$2699>>0] = $2698;
       $2700 = HEAP32[$1139>>2]|0;
       $2701 = ((($2700)) + 44|0);
       $2702 = HEAP32[$2701>>2]|0;
       $2703 = $2702 >>> 8;
       $2704 = $2703&255;
       $2705 = ((($cp$2$i$i)) + 2|0);
       HEAP8[$2705>>0] = $2704;
       $2706 = HEAP32[$1139>>2]|0;
       $2707 = ((($2706)) + 44|0);
       $2708 = HEAP32[$2707>>2]|0;
       $2709 = $2708&255;
       $2710 = ((($cp$2$i$i)) + 3|0);
       HEAP8[$2710>>0] = $2709;
       $2739 = 4;
       break;
      }
     } else {
      $2665 = $2663&255;
      HEAP8[$cp$2$i$i>>0] = $2665;
      $2739 = 1;
     }
    } while(0);
    $2738 = (($cp$2$i$i) + ($2739)|0);
    $cp$3$i$i = $2738;
   } else {
    $cp$3$i$i = $cp$2$i$i;
   }
   $2740 = HEAP32[$558>>2]|0;
   $$mask1$i17$i = $2740 & -256;
   $2741 = ($$mask1$i17$i|0)==(256);
   if ($2741) {
    $cp$4$i$i = $cp$3$i$i;
   } else {
    $2742 = HEAP32[$1139>>2]|0;
    $2743 = ((($2742)) + 48|0);
    dest=$cp$3$i$i; src=$2743; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $2744 = ((($cp$3$i$i)) + 16|0);
    $cp$4$i$i = $2744;
   }
   $2745 = $cp$4$i$i;
   $2746 = $1902;
   $2747 = (($2745) - ($2746))|0;
   $2748 = HEAP32[$1139>>2]|0;
   $2749 = ((($2748)) + 32|0);
   $2750 = HEAP32[$2749>>2]|0;
   $2751 = ($2750*5)|0;
   $2752 = (($2751) + 56)|0;
   $2753 = ($2747|0)>($2752|0);
   if ($2753) {
    label = 810;
    break;
   }
   $2755 = ((($1886)) + 32|0);
   HEAP32[$2755>>2] = $1902;
   $2756 = ((($1886)) + 20|0);
   HEAP32[$2756>>2] = $2747;
   $2757 = ((($1886)) + 16|0);
   HEAP32[$2757>>2] = $2747;
   $2758 = ((($1139)) + 4|0);
   HEAP32[$2758>>2] = $1886;
   $2759 = (($i$2) + 1)|0;
   $i$2 = $2759;
  }
  switch (label|0) {
   case 583: {
    $1188 = HEAP32[$1176>>2]|0;
    HEAP32[$1188>>2] = 0;
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 587: {
    $1206 = HEAP32[$1176>>2]|0;
    $1207 = ((($1206)) + 156|0);
    HEAP32[$1207>>2] = 0;
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 592: {
    $1226 = HEAP32[$1176>>2]|0;
    $1227 = ((($1226)) + 40|0);
    HEAP32[$1227>>2] = 0;
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 602: {
    $1295 = HEAP32[$1176>>2]|0;
    $1296 = (($1295) + ($id$0$i<<2)|0);
    HEAP32[$1296>>2] = 0;
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 605: {
    $1312 = HEAP32[$1176>>2]|0;
    $1313 = (($1312) + ($id$0$i<<2)|0);
    HEAP32[$1313>>2] = 0;
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 609: {
    $1335 = HEAP32[$1176>>2]|0;
    $1336 = (($1335) + ($1332<<2)|0);
    HEAP32[$1336>>2] = 0;
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 614: {
    $1365 = HEAP32[$1176>>2]|0;
    $1366 = (($1365) + ($1358<<2)|0);
    HEAP32[$1366>>2] = 0;
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 714: {
    $1904 = ((($1886)) + 32|0);
    $1905 = HEAP32[$1904>>2]|0;
    $1906 = ($1905|0)==(0|0);
    if (!($1906)) {
     _free($1905);
    }
    _free($1886);
    break;
   }
   case 810: {
    ___assert_fail((17962|0),(18000|0),707,(18019|0));
    // unreachable;
    break;
   }
   case 813: {
    $2760 = HEAP32[$$pre$phi310Z2D>>2]|0;
    HEAP32[$1>>2] = $2760;
    $2761 = ((($c)) + 8|0);
    $2762 = HEAP32[$2761>>2]|0;
    $2763 = ((($1)) + 4|0);
    HEAP32[$2763>>2] = $2762;
    $2764 = ((($c)) + 12|0);
    $2765 = HEAP32[$2764>>2]|0;
    $2766 = ((($1)) + 8|0);
    HEAP32[$2766>>2] = $2765;
    $2767 = HEAP32[$601>>2]|0;
    $2768 = ((($1)) + 12|0);
    HEAP32[$2768>>2] = $2767;
    $2769 = ((($1)) + 24|0);
    HEAP32[$2769>>2] = 0;
    $2770 = ((($1)) + 28|0);
    HEAP32[$2770>>2] = 0;
    $2771 = HEAP32[$639>>2]|0;
    $2772 = ((($1)) + 44|0);
    HEAP32[$2772>>2] = $2771;
    $2773 = ((($1)) + 48|0);
    dest=$2773; src=18465; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $2774 = (_malloc(48)|0);
    $2775 = ($2774|0)==(0|0);
    if ($2775) {
     $$0$i$i128 = 0;
    } else {
     $2776 = ((($2774)) + 4|0);
     HEAP32[$2776>>2] = 0;
     HEAP32[$2774>>2] = 0;
     $2777 = ((($2774)) + 8|0);
     HEAP32[$2777>>2] = 1;
     $2778 = ((($2774)) + 12|0);
     HEAP32[$2778>>2] = 0;
     $2779 = ((($2774)) + 16|0);
     HEAP32[$2779>>2] = 0;
     $2780 = ((($2774)) + 20|0);
     HEAP32[$2780>>2] = 0;
     $2781 = ((($2774)) + 32|0);
     HEAP32[$2781>>2] = 0;
     $2782 = ((($2774)) + 36|0);
     HEAP32[$2782>>2] = 0;
     $2783 = ((($2774)) + 40|0);
     HEAP32[$2783>>2] = 0;
     $2784 = ((($2774)) + 44|0);
     HEAP32[$2784>>2] = 7;
     $$0$i$i128 = $2774;
    }
    $2785 = (_malloc(48)|0);
    $2786 = ($2785|0)==(0|0);
    L1292: do {
     if (!($2786)) {
      $2787 = ((($2785)) + 4|0);
      HEAP32[$2787>>2] = 0;
      HEAP32[$2785>>2] = 0;
      $2788 = ((($2785)) + 8|0);
      HEAP32[$2788>>2] = 1;
      $2789 = ((($2785)) + 12|0);
      HEAP32[$2789>>2] = 0;
      $2790 = ((($2785)) + 16|0);
      HEAP32[$2790>>2] = 0;
      $2791 = ((($2785)) + 20|0);
      HEAP32[$2791>>2] = 0;
      $2792 = ((($2785)) + 32|0);
      HEAP32[$2792>>2] = 0;
      $2793 = ((($2785)) + 36|0);
      HEAP32[$2793>>2] = 0;
      $2794 = ((($2785)) + 40|0);
      HEAP32[$2794>>2] = 0;
      $2795 = ((($2785)) + 44|0);
      HEAP32[$2795>>2] = 7;
      $2796 = ($$0$i$i128|0)==(0|0);
      $2797 = ($2785|0)==(0|0);
      $or$cond446 = $2796 | $2797;
      if ($or$cond446) {
       break;
      }
      $2798 = HEAP32[$558>>2]|0;
      $$mask$i131 = $2798 & -256;
      $2799 = ($$mask$i131|0)==(256);
      L1295: do {
       if ($2799) {
        $2800 = HEAP32[$1>>2]|0;
        (_itf8_put_blk($$0$i$i128,$2800)|0);
        $2801 = HEAP32[$2763>>2]|0;
        (_itf8_put_blk($$0$i$i128,$2801)|0);
        $2802 = HEAP32[$2766>>2]|0;
        (_itf8_put_blk($$0$i$i128,$2802)|0);
        $2803 = HEAP32[$2768>>2]|0;
        (_itf8_put_blk($$0$i$i128,$2803)|0);
        $2804 = ((($1)) + 16|0);
        $2805 = HEAP32[$2804>>2]|0;
        (_itf8_put_blk($$0$i$i128,$2805)|0);
        $2806 = ((($1)) + 20|0);
        $i$0$i132 = 0;
        while(1) {
         $2807 = HEAP32[$2804>>2]|0;
         $2808 = ($i$0$i132|0)<($2807|0);
         if (!($2808)) {
          break L1295;
         }
         $2809 = HEAP32[$2806>>2]|0;
         $2810 = (($2809) + ($i$0$i132<<2)|0);
         $2811 = HEAP32[$2810>>2]|0;
         (_itf8_put_blk($$0$i$i128,$2811)|0);
         $2812 = (($i$0$i132) + 1)|0;
         $i$0$i132 = $2812;
        }
       }
      } while(0);
      $2813 = ((($1)) + 88|0);
      $2814 = HEAP32[$2813>>2]|0;
      $2815 = ($2814|0)==(0|0);
      if (!($2815)) {
       $2816 = ((($2814)) + 20|0);
       $2817 = HEAP32[$2816>>2]|0;
       _free($2817);
       $2818 = ((($2814)) + 16|0);
       $2819 = HEAP32[$2818>>2]|0;
       _free($2819);
       $2820 = ((($2814)) + 24|0);
       $2821 = HEAP32[$2820>>2]|0;
       _free($2821);
       _free($2814);
      }
      $2822 = (_malloc(28)|0);
      $2823 = ($2822|0)==(0|0);
      if ($2823) {
       HEAP32[$2813>>2] = 0;
       break;
      }
      $2824 = ((($2822)) + -4|0);
      $2825 = HEAP32[$2824>>2]|0;
      $2826 = $2825 & 3;
      $2827 = ($2826|0)==(0);
      if (!($2827)) {
       dest=$2822; stop=dest+28|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      }
      HEAP32[$2813>>2] = $2822;
      $2828 = (_kh_put_map_286($2822,17671,$r$i)|0);
      $2829 = HEAP32[$r$i>>2]|0;
      $2830 = ($2829|0)==(-1);
      if ($2830) {
       break;
      }
      $2831 = HEAP32[$97>>2]|0;
      $2832 = ($2831|0)==(0);
      $2833 = $2832&1;
      $2834 = HEAP32[$2813>>2]|0;
      $2835 = ((($2834)) + 24|0);
      $2836 = HEAP32[$2835>>2]|0;
      $2837 = (($2836) + ($2828<<2)|0);
      HEAP32[$2837>>2] = $2833;
      $2838 = HEAP32[$558>>2]|0;
      $$mask1$i = $2838 & -256;
      $2839 = ($$mask1$i|0)==(256);
      $2840 = HEAP32[$2813>>2]|0;
      do {
       if ($2839) {
        $2841 = (_kh_put_map_286($2840,17674,$r$i)|0);
        $2842 = HEAP32[$r$i>>2]|0;
        $2843 = ($2842|0)==(-1);
        if ($2843) {
         break L1292;
        }
        $2844 = HEAP32[$2813>>2]|0;
        $2845 = ((($2844)) + 24|0);
        $2846 = HEAP32[$2845>>2]|0;
        $2847 = (($2846) + ($2841<<2)|0);
        HEAP32[$2847>>2] = 0;
        $2848 = HEAP32[$2813>>2]|0;
        $2849 = (_kh_put_map_286($2848,17677,$r$i)|0);
        $2850 = HEAP32[$r$i>>2]|0;
        $2851 = ($2850|0)==(-1);
        if ($2851) {
         break L1292;
        }
        $2852 = HEAP32[$2813>>2]|0;
        $2853 = ((($2852)) + 24|0);
        $2854 = HEAP32[$2853>>2]|0;
        $2855 = (($2854) + ($2849<<2)|0);
        HEAP32[$2855>>2] = 1;
        $2856 = HEAP32[$2813>>2]|0;
        $2857 = (_kh_put_map_286($2856,17680,$r$i)|0);
        $2858 = HEAP32[$r$i>>2]|0;
        $2859 = ($2858|0)==(-1);
        if ($2859) {
         break L1292;
        }
        $2860 = HEAP32[$2813>>2]|0;
        $2861 = ((($2860)) + 24|0);
        $2862 = HEAP32[$2861>>2]|0;
        $2863 = (($2862) + ($2857<<2)|0);
        HEAP32[$2863>>2] = 1;
       } else {
        $2864 = (_kh_put_map_286($2840,17683,$r$i)|0);
        $2865 = HEAP32[$r$i>>2]|0;
        $2866 = ($2865|0)==(-1);
        if ($2866) {
         break L1292;
        }
        $2867 = HEAP32[$2813>>2]|0;
        $2868 = ((($2867)) + 24|0);
        $2869 = HEAP32[$2868>>2]|0;
        $2870 = (($2869) + ($2864<<2)|0);
        HEAP32[$2870>>2] = 0;
        $2871 = HEAP32[$2813>>2]|0;
        $2872 = (_kh_put_map_286($2871,17686,$r$i)|0);
        $2873 = HEAP32[$r$i>>2]|0;
        $2874 = ($2873|0)==(-1);
        if ($2874) {
         break L1292;
        }
        $2875 = HEAP32[$2813>>2]|0;
        $2876 = ((($2875)) + 24|0);
        $2877 = HEAP32[$2876>>2]|0;
        $2878 = (($2877) + ($2872<<2)|0);
        HEAP32[$2878>>2] = 0;
        $2879 = HEAP32[$2813>>2]|0;
        $2880 = (_kh_put_map_286($2879,17689,$r$i)|0);
        $2881 = HEAP32[$r$i>>2]|0;
        $2882 = ($2881|0)==(-1);
        if ($2882) {
         break L1292;
        }
        $2883 = HEAP32[$2772>>2]|0;
        $2884 = HEAP32[$2813>>2]|0;
        $2885 = ((($2884)) + 24|0);
        $2886 = HEAP32[$2885>>2]|0;
        $2887 = (($2886) + ($2880<<2)|0);
        HEAP32[$2887>>2] = $2883;
        $2888 = HEAP32[$7>>2]|0;
        $2889 = ($2888|0)==(0);
        if ($2889) {
         $2890 = HEAP32[$1110>>2]|0;
         $2891 = ($2890|0)==(0);
         if ($2891) {
          break;
         }
        }
        $2892 = HEAP32[$2813>>2]|0;
        $2893 = (_kh_put_map_286($2892,17692,$r$i)|0);
        $2894 = HEAP32[$r$i>>2]|0;
        $2895 = ($2894|0)==(-1);
        if ($2895) {
         break L1292;
        }
        $2896 = HEAP32[$2813>>2]|0;
        $2897 = ((($2896)) + 24|0);
        $2898 = HEAP32[$2897>>2]|0;
        $2899 = (($2898) + ($2893<<2)|0);
        HEAP32[$2899>>2] = 0;
       }
      } while(0);
      $2900 = ((($2785)) + 40|0);
      HEAP32[$2900>>2] = 0;
      $2901 = HEAP32[$2813>>2]|0;
      $2902 = ($2901|0)==(0|0);
      do {
       if ($2902) {
        $$0$i19$i130473 = $2785;$3292 = 0;$3293 = 1;$mc$2$i178 = 0;
       } else {
        $2903 = ((($2785)) + 36|0);
        $2904 = ((($2785)) + 32|0);
        $2905 = ((($1)) + 52|0);
        $2906 = ((($1)) + 56|0);
        $2907 = ((($1)) + 60|0);
        $2908 = ((($1)) + 64|0);
        $2909 = ((($1)) + 68|0);
        $2911 = $2901;$k1$0$i = 0;$mc$0$i = 0;
        while(1) {
         $2910 = HEAP32[$2911>>2]|0;
         $2912 = ($k1$0$i|0)==($2910|0);
         if ($2912) {
          break;
         }
         $2913 = $k1$0$i >>> 4;
         $2914 = ((($2911)) + 16|0);
         $2915 = HEAP32[$2914>>2]|0;
         $2916 = (($2915) + ($2913<<2)|0);
         $2917 = HEAP32[$2916>>2]|0;
         $2918 = $k1$0$i << 1;
         $2919 = $2918 & 30;
         $2920 = 3 << $2919;
         $2921 = $2917 & $2920;
         $2922 = ($2921|0)==(0);
         if ($2922) {
          $2923 = ((($2911)) + 20|0);
          $2924 = HEAP32[$2923>>2]|0;
          $2925 = (($2924) + ($k1$0$i<<2)|0);
          $2926 = HEAP32[$2925>>2]|0;
          while(1) {
           $2927 = HEAP32[$2903>>2]|0;
           $2928 = HEAP32[$2900>>2]|0;
           $2929 = (($2928) + 2)|0;
           $2930 = ($2927>>>0)>($2929>>>0);
           if ($2930) {
            break;
           }
           $2931 = ($2927|0)==(0);
           $2932 = (+($2927>>>0));
           $2933 = $2932 * 1.5;
           $2934 = (~~(($2933))>>>0);
           $2935 = $2931 ? 1024 : $2934;
           HEAP32[$2903>>2] = $2935;
           $2936 = HEAP32[$2904>>2]|0;
           $2937 = (_realloc($2936,$2935)|0);
           HEAP32[$2904>>2] = $2937;
          }
          $2938 = HEAP32[$2904>>2]|0;
          $2939 = (($2938) + ($2928)|0);
          $2940 = HEAPU8[$2926>>0]|(HEAPU8[$2926+1>>0]<<8);
          HEAP8[$2939>>0]=$2940&255;HEAP8[$2939+1>>0]=$2940>>8;
          $2941 = HEAP32[$2900>>2]|0;
          $2942 = (($2941) + 2)|0;
          HEAP32[$2900>>2] = $2942;
          $2943 = HEAP8[$2926>>0]|0;
          $2944 = $2943 << 24 >> 24;
          $2945 = $2944 << 8;
          $2946 = ((($2926)) + 1|0);
          $2947 = HEAP8[$2946>>0]|0;
          $2948 = $2947 << 24 >> 24;
          $2949 = $2945 | $2948;
          switch ($2949|0) {
          case 19785:  {
           $2952 = $2942;
           while(1) {
            $2950 = HEAP32[$2903>>2]|0;
            $2951 = (($2952) + 1)|0;
            $2953 = ($2950>>>0)>($2951>>>0);
            if ($2953) {
             break;
            }
            $2954 = ($2950|0)==(0);
            $2955 = (+($2950>>>0));
            $2956 = $2955 * 1.5;
            $2957 = (~~(($2956))>>>0);
            $2958 = $2954 ? 1024 : $2957;
            HEAP32[$2903>>2] = $2958;
            $2959 = HEAP32[$2904>>2]|0;
            $2960 = (_realloc($2959,$2958)|0);
            HEAP32[$2904>>2] = $2960;
            $$pre292 = HEAP32[$2900>>2]|0;
            $2952 = $$pre292;
           }
           $2961 = ((($2911)) + 24|0);
           $2962 = HEAP32[$2961>>2]|0;
           $2963 = (($2962) + ($k1$0$i<<2)|0);
           $2964 = HEAP32[$2963>>2]|0;
           $2965 = $2964&255;
           HEAP32[$2900>>2] = $2951;
           $2966 = HEAP32[$2904>>2]|0;
           $2967 = (($2966) + ($2952)|0);
           HEAP8[$2967>>0] = $2965;
           break;
          }
          case 21833:  {
           $2970 = $2942;
           while(1) {
            $2968 = HEAP32[$2903>>2]|0;
            $2969 = (($2970) + 1)|0;
            $2971 = ($2968>>>0)>($2969>>>0);
            if ($2971) {
             break;
            }
            $2972 = ($2968|0)==(0);
            $2973 = (+($2968>>>0));
            $2974 = $2973 * 1.5;
            $2975 = (~~(($2974))>>>0);
            $2976 = $2972 ? 1024 : $2975;
            HEAP32[$2903>>2] = $2976;
            $2977 = HEAP32[$2904>>2]|0;
            $2978 = (_realloc($2977,$2976)|0);
            HEAP32[$2904>>2] = $2978;
            $$pre291 = HEAP32[$2900>>2]|0;
            $2970 = $$pre291;
           }
           $2979 = ((($2911)) + 24|0);
           $2980 = HEAP32[$2979>>2]|0;
           $2981 = (($2980) + ($k1$0$i<<2)|0);
           $2982 = HEAP32[$2981>>2]|0;
           $2983 = $2982&255;
           HEAP32[$2900>>2] = $2969;
           $2984 = HEAP32[$2904>>2]|0;
           $2985 = (($2984) + ($2970)|0);
           HEAP8[$2985>>0] = $2983;
           break;
          }
          case 20553:  {
           $2988 = $2942;
           while(1) {
            $2986 = HEAP32[$2903>>2]|0;
            $2987 = (($2988) + 1)|0;
            $2989 = ($2986>>>0)>($2987>>>0);
            if ($2989) {
             break;
            }
            $2990 = ($2986|0)==(0);
            $2991 = (+($2986>>>0));
            $2992 = $2991 * 1.5;
            $2993 = (~~(($2992))>>>0);
            $2994 = $2990 ? 1024 : $2993;
            HEAP32[$2903>>2] = $2994;
            $2995 = HEAP32[$2904>>2]|0;
            $2996 = (_realloc($2995,$2994)|0);
            HEAP32[$2904>>2] = $2996;
            $$pre290 = HEAP32[$2900>>2]|0;
            $2988 = $$pre290;
           }
           $2997 = ((($2911)) + 24|0);
           $2998 = HEAP32[$2997>>2]|0;
           $2999 = (($2998) + ($k1$0$i<<2)|0);
           $3000 = HEAP32[$2999>>2]|0;
           $3001 = $3000&255;
           HEAP32[$2900>>2] = $2987;
           $3002 = HEAP32[$2904>>2]|0;
           $3003 = (($3002) + ($2988)|0);
           HEAP8[$3003>>0] = $3001;
           break;
          }
          case 16720:  {
           $3006 = $2942;
           while(1) {
            $3004 = HEAP32[$2903>>2]|0;
            $3005 = (($3006) + 1)|0;
            $3007 = ($3004>>>0)>($3005>>>0);
            if ($3007) {
             break;
            }
            $3008 = ($3004|0)==(0);
            $3009 = (+($3004>>>0));
            $3010 = $3009 * 1.5;
            $3011 = (~~(($3010))>>>0);
            $3012 = $3008 ? 1024 : $3011;
            HEAP32[$2903>>2] = $3012;
            $3013 = HEAP32[$2904>>2]|0;
            $3014 = (_realloc($3013,$3012)|0);
            HEAP32[$2904>>2] = $3014;
            $$pre289 = HEAP32[$2900>>2]|0;
            $3006 = $$pre289;
           }
           $3015 = ((($2911)) + 24|0);
           $3016 = HEAP32[$3015>>2]|0;
           $3017 = (($3016) + ($k1$0$i<<2)|0);
           $3018 = HEAP32[$3017>>2]|0;
           $3019 = $3018&255;
           HEAP32[$2900>>2] = $3005;
           $3020 = HEAP32[$2904>>2]|0;
           $3021 = (($3020) + ($3006)|0);
           HEAP8[$3021>>0] = $3019;
           break;
          }
          case 21070:  {
           $3024 = $2942;
           while(1) {
            $3022 = HEAP32[$2903>>2]|0;
            $3023 = (($3024) + 1)|0;
            $3025 = ($3022>>>0)>($3023>>>0);
            if ($3025) {
             break;
            }
            $3026 = ($3022|0)==(0);
            $3027 = (+($3022>>>0));
            $3028 = $3027 * 1.5;
            $3029 = (~~(($3028))>>>0);
            $3030 = $3026 ? 1024 : $3029;
            HEAP32[$2903>>2] = $3030;
            $3031 = HEAP32[$2904>>2]|0;
            $3032 = (_realloc($3031,$3030)|0);
            HEAP32[$2904>>2] = $3032;
            $$pre288 = HEAP32[$2900>>2]|0;
            $3024 = $$pre288;
           }
           $3033 = ((($2911)) + 24|0);
           $3034 = HEAP32[$3033>>2]|0;
           $3035 = (($3034) + ($k1$0$i<<2)|0);
           $3036 = HEAP32[$3035>>2]|0;
           $3037 = $3036&255;
           HEAP32[$2900>>2] = $3023;
           $3038 = HEAP32[$2904>>2]|0;
           $3039 = (($3038) + ($3024)|0);
           HEAP8[$3039>>0] = $3037;
           break;
          }
          case 21074:  {
           $3042 = $2942;
           while(1) {
            $3040 = HEAP32[$2903>>2]|0;
            $3041 = (($3042) + 1)|0;
            $3043 = ($3040>>>0)>($3041>>>0);
            if ($3043) {
             break;
            }
            $3044 = ($3040|0)==(0);
            $3045 = (+($3040>>>0));
            $3046 = $3045 * 1.5;
            $3047 = (~~(($3046))>>>0);
            $3048 = $3044 ? 1024 : $3047;
            HEAP32[$2903>>2] = $3048;
            $3049 = HEAP32[$2904>>2]|0;
            $3050 = (_realloc($3049,$3048)|0);
            HEAP32[$2904>>2] = $3050;
            $$pre287 = HEAP32[$2900>>2]|0;
            $3042 = $$pre287;
           }
           $3051 = ((($2911)) + 24|0);
           $3052 = HEAP32[$3051>>2]|0;
           $3053 = (($3052) + ($k1$0$i<<2)|0);
           $3054 = HEAP32[$3053>>2]|0;
           $3055 = $3054&255;
           HEAP32[$2900>>2] = $3041;
           $3056 = HEAP32[$2904>>2]|0;
           $3057 = (($3056) + ($3042)|0);
           HEAP8[$3057>>0] = $3055;
           break;
          }
          case 21325:  {
           $3058 = HEAP32[$2773>>2]|0;
           $3059 = $3058&65535;
           $3060 = $3058&255;
           $3061 = ($3059&65535) >>> 8;
           $3062 = $3061&255;
           $3063 = $3058 >>> 16;
           $3064 = $3063&255;
           $3065 = $3058 >>> 24;
           $3066 = $3065&255;
           $$0$i21$i = 17695;$i$0$i$i133 = 0;
           while(1) {
            $3067 = HEAP8[$$0$i21$i>>0]|0;
            $3068 = ($3067<<24>>24)==(0);
            $3069 = ($3067<<24>>24)==($3060<<24>>24);
            $or$cond447 = $3068 | $3069;
            if ($or$cond447) {
             break;
            }
            $3070 = ((($$0$i21$i)) + 1|0);
            $3071 = (($i$0$i$i133) + 1)|0;
            $$0$i21$i = $3070;$i$0$i$i133 = $3071;
           }
           $3072 = $i$0$i$i133 << 6;
           $$0$i23$i = 17695;$i$0$i22$i = 0;
           while(1) {
            $3073 = HEAP8[$$0$i23$i>>0]|0;
            $3074 = ($3073<<24>>24)==(0);
            $3075 = ($3073<<24>>24)==($3062<<24>>24);
            $or$cond448 = $3074 | $3075;
            if ($or$cond448) {
             break;
            }
            $3076 = ((($$0$i23$i)) + 1|0);
            $3077 = (($i$0$i22$i) + 1)|0;
            $$0$i23$i = $3076;$i$0$i22$i = $3077;
           }
           $3078 = $i$0$i22$i << 4;
           $3079 = $3072 | $3078;
           $$0$i27$i = 17695;$i$0$i26$i = 0;
           while(1) {
            $3080 = HEAP8[$$0$i27$i>>0]|0;
            $3081 = ($3080<<24>>24)==(0);
            $3082 = ($3080<<24>>24)==($3064<<24>>24);
            $or$cond449 = $3081 | $3082;
            if ($or$cond449) {
             break;
            }
            $3083 = ((($$0$i27$i)) + 1|0);
            $3084 = (($i$0$i26$i) + 1)|0;
            $$0$i27$i = $3083;$i$0$i26$i = $3084;
           }
           $3085 = $i$0$i26$i << 2;
           $3086 = $3079 | $3085;
           $$0$i31$i = 17695;$i$0$i30$i = 0;
           while(1) {
            $3087 = HEAP8[$$0$i31$i>>0]|0;
            $3088 = ($3087<<24>>24)==(0);
            $3089 = ($3087<<24>>24)==($3066<<24>>24);
            $or$cond450 = $3088 | $3089;
            if ($or$cond450) {
             break;
            }
            $3090 = ((($$0$i31$i)) + 1|0);
            $3091 = (($i$0$i30$i) + 1)|0;
            $$0$i31$i = $3090;$i$0$i30$i = $3091;
           }
           $3092 = $3086 | $i$0$i30$i;
           $3093 = $3092&255;
           $3094 = HEAP32[$2905>>2]|0;
           $3095 = $3094&65535;
           $3096 = $3094&255;
           $3097 = ($3095&65535) >>> 8;
           $3098 = $3097&255;
           $3099 = $3094 >>> 16;
           $3100 = $3099&255;
           $3101 = $3094 >>> 24;
           $3102 = $3101&255;
           $$0$i35$i = 17700;$i$0$i34$i = 0;
           while(1) {
            $3103 = HEAP8[$$0$i35$i>>0]|0;
            $3104 = ($3103<<24>>24)==(0);
            $3105 = ($3103<<24>>24)==($3096<<24>>24);
            $or$cond451 = $3104 | $3105;
            if ($or$cond451) {
             break;
            }
            $3106 = ((($$0$i35$i)) + 1|0);
            $3107 = (($i$0$i34$i) + 1)|0;
            $$0$i35$i = $3106;$i$0$i34$i = $3107;
           }
           $3108 = $i$0$i34$i << 6;
           $$0$i39$i = 17700;$i$0$i38$i = 0;
           while(1) {
            $3109 = HEAP8[$$0$i39$i>>0]|0;
            $3110 = ($3109<<24>>24)==(0);
            $3111 = ($3109<<24>>24)==($3098<<24>>24);
            $or$cond452 = $3110 | $3111;
            if ($or$cond452) {
             break;
            }
            $3112 = ((($$0$i39$i)) + 1|0);
            $3113 = (($i$0$i38$i) + 1)|0;
            $$0$i39$i = $3112;$i$0$i38$i = $3113;
           }
           $3114 = $i$0$i38$i << 4;
           $3115 = $3108 | $3114;
           $$0$i43$i = 17700;$i$0$i42$i = 0;
           while(1) {
            $3116 = HEAP8[$$0$i43$i>>0]|0;
            $3117 = ($3116<<24>>24)==(0);
            $3118 = ($3116<<24>>24)==($3100<<24>>24);
            $or$cond453 = $3117 | $3118;
            if ($or$cond453) {
             break;
            }
            $3119 = ((($$0$i43$i)) + 1|0);
            $3120 = (($i$0$i42$i) + 1)|0;
            $$0$i43$i = $3119;$i$0$i42$i = $3120;
           }
           $3121 = $i$0$i42$i << 2;
           $3122 = $3115 | $3121;
           $$0$i47$i = 17700;$i$0$i46$i = 0;
           while(1) {
            $3123 = HEAP8[$$0$i47$i>>0]|0;
            $3124 = ($3123<<24>>24)==(0);
            $3125 = ($3123<<24>>24)==($3102<<24>>24);
            $or$cond454 = $3124 | $3125;
            if ($or$cond454) {
             break;
            }
            $3126 = ((($$0$i47$i)) + 1|0);
            $3127 = (($i$0$i46$i) + 1)|0;
            $$0$i47$i = $3126;$i$0$i46$i = $3127;
           }
           $3128 = $3122 | $i$0$i46$i;
           $3129 = $3128&255;
           $3130 = HEAP32[$2906>>2]|0;
           $3131 = $3130&65535;
           $3132 = $3130&255;
           $3133 = ($3131&65535) >>> 8;
           $3134 = $3133&255;
           $3135 = $3130 >>> 16;
           $3136 = $3135&255;
           $3137 = $3130 >>> 24;
           $3138 = $3137&255;
           $$0$i51$i = 17705;$i$0$i50$i = 0;
           while(1) {
            $3139 = HEAP8[$$0$i51$i>>0]|0;
            $3140 = ($3139<<24>>24)==(0);
            $3141 = ($3139<<24>>24)==($3132<<24>>24);
            $or$cond455 = $3140 | $3141;
            if ($or$cond455) {
             break;
            }
            $3142 = ((($$0$i51$i)) + 1|0);
            $3143 = (($i$0$i50$i) + 1)|0;
            $$0$i51$i = $3142;$i$0$i50$i = $3143;
           }
           $3144 = $i$0$i50$i << 6;
           $$0$i55$i = 17705;$i$0$i54$i = 0;
           while(1) {
            $3145 = HEAP8[$$0$i55$i>>0]|0;
            $3146 = ($3145<<24>>24)==(0);
            $3147 = ($3145<<24>>24)==($3134<<24>>24);
            $or$cond456 = $3146 | $3147;
            if ($or$cond456) {
             break;
            }
            $3148 = ((($$0$i55$i)) + 1|0);
            $3149 = (($i$0$i54$i) + 1)|0;
            $$0$i55$i = $3148;$i$0$i54$i = $3149;
           }
           $3150 = $i$0$i54$i << 4;
           $3151 = $3144 | $3150;
           $$0$i59$i = 17705;$i$0$i58$i = 0;
           while(1) {
            $3152 = HEAP8[$$0$i59$i>>0]|0;
            $3153 = ($3152<<24>>24)==(0);
            $3154 = ($3152<<24>>24)==($3136<<24>>24);
            $or$cond457 = $3153 | $3154;
            if ($or$cond457) {
             break;
            }
            $3155 = ((($$0$i59$i)) + 1|0);
            $3156 = (($i$0$i58$i) + 1)|0;
            $$0$i59$i = $3155;$i$0$i58$i = $3156;
           }
           $3157 = $i$0$i58$i << 2;
           $3158 = $3151 | $3157;
           $$0$i63$i = 17705;$i$0$i62$i = 0;
           while(1) {
            $3159 = HEAP8[$$0$i63$i>>0]|0;
            $3160 = ($3159<<24>>24)==(0);
            $3161 = ($3159<<24>>24)==($3138<<24>>24);
            $or$cond458 = $3160 | $3161;
            if ($or$cond458) {
             break;
            }
            $3162 = ((($$0$i63$i)) + 1|0);
            $3163 = (($i$0$i62$i) + 1)|0;
            $$0$i63$i = $3162;$i$0$i62$i = $3163;
           }
           $3164 = $3158 | $i$0$i62$i;
           $3165 = $3164&255;
           $3166 = HEAP32[$2907>>2]|0;
           $3167 = $3166&65535;
           $3168 = $3166&255;
           $3169 = ($3167&65535) >>> 8;
           $3170 = $3169&255;
           $3171 = $3166 >>> 16;
           $3172 = $3171&255;
           $3173 = $3166 >>> 24;
           $3174 = $3173&255;
           $$0$i67$i = 17710;$i$0$i66$i = 0;
           while(1) {
            $3175 = HEAP8[$$0$i67$i>>0]|0;
            $3176 = ($3175<<24>>24)==(0);
            $3177 = ($3175<<24>>24)==($3168<<24>>24);
            $or$cond459 = $3176 | $3177;
            if ($or$cond459) {
             break;
            }
            $3178 = ((($$0$i67$i)) + 1|0);
            $3179 = (($i$0$i66$i) + 1)|0;
            $$0$i67$i = $3178;$i$0$i66$i = $3179;
           }
           $3180 = $i$0$i66$i << 6;
           $$0$i71$i = 17710;$i$0$i70$i = 0;
           while(1) {
            $3181 = HEAP8[$$0$i71$i>>0]|0;
            $3182 = ($3181<<24>>24)==(0);
            $3183 = ($3181<<24>>24)==($3170<<24>>24);
            $or$cond460 = $3182 | $3183;
            if ($or$cond460) {
             break;
            }
            $3184 = ((($$0$i71$i)) + 1|0);
            $3185 = (($i$0$i70$i) + 1)|0;
            $$0$i71$i = $3184;$i$0$i70$i = $3185;
           }
           $3186 = $i$0$i70$i << 4;
           $3187 = $3180 | $3186;
           $$0$i75$i = 17710;$i$0$i74$i = 0;
           while(1) {
            $3188 = HEAP8[$$0$i75$i>>0]|0;
            $3189 = ($3188<<24>>24)==(0);
            $3190 = ($3188<<24>>24)==($3172<<24>>24);
            $or$cond461 = $3189 | $3190;
            if ($or$cond461) {
             break;
            }
            $3191 = ((($$0$i75$i)) + 1|0);
            $3192 = (($i$0$i74$i) + 1)|0;
            $$0$i75$i = $3191;$i$0$i74$i = $3192;
           }
           $3193 = $i$0$i74$i << 2;
           $3194 = $3187 | $3193;
           $$0$i79$i = 17710;$i$0$i78$i = 0;
           while(1) {
            $3195 = HEAP8[$$0$i79$i>>0]|0;
            $3196 = ($3195<<24>>24)==(0);
            $3197 = ($3195<<24>>24)==($3174<<24>>24);
            $or$cond462 = $3196 | $3197;
            if ($or$cond462) {
             break;
            }
            $3198 = ((($$0$i79$i)) + 1|0);
            $3199 = (($i$0$i78$i) + 1)|0;
            $$0$i79$i = $3198;$i$0$i78$i = $3199;
           }
           $3200 = $3194 | $i$0$i78$i;
           $3201 = $3200&255;
           $3202 = HEAP32[$2908>>2]|0;
           $3203 = $3202&65535;
           $3204 = $3202&255;
           $3205 = ($3203&65535) >>> 8;
           $3206 = $3205&255;
           $3207 = $3202 >>> 16;
           $3208 = $3207&255;
           $3209 = $3202 >>> 24;
           $3210 = $3209&255;
           $$0$i83$i = 17715;$i$0$i82$i = 0;
           while(1) {
            $3211 = HEAP8[$$0$i83$i>>0]|0;
            $3212 = ($3211<<24>>24)==(0);
            $3213 = ($3211<<24>>24)==($3204<<24>>24);
            $or$cond463 = $3212 | $3213;
            if ($or$cond463) {
             break;
            }
            $3214 = ((($$0$i83$i)) + 1|0);
            $3215 = (($i$0$i82$i) + 1)|0;
            $$0$i83$i = $3214;$i$0$i82$i = $3215;
           }
           $3216 = $i$0$i82$i << 6;
           $$0$i87$i = 17715;$i$0$i86$i = 0;
           while(1) {
            $3217 = HEAP8[$$0$i87$i>>0]|0;
            $3218 = ($3217<<24>>24)==(0);
            $3219 = ($3217<<24>>24)==($3206<<24>>24);
            $or$cond464 = $3218 | $3219;
            if ($or$cond464) {
             break;
            }
            $3220 = ((($$0$i87$i)) + 1|0);
            $3221 = (($i$0$i86$i) + 1)|0;
            $$0$i87$i = $3220;$i$0$i86$i = $3221;
           }
           $3222 = $i$0$i86$i << 4;
           $3223 = $3216 | $3222;
           $$0$i91$i = 17715;$i$0$i90$i = 0;
           while(1) {
            $3224 = HEAP8[$$0$i91$i>>0]|0;
            $3225 = ($3224<<24>>24)==(0);
            $3226 = ($3224<<24>>24)==($3208<<24>>24);
            $or$cond465 = $3225 | $3226;
            if ($or$cond465) {
             break;
            }
            $3227 = ((($$0$i91$i)) + 1|0);
            $3228 = (($i$0$i90$i) + 1)|0;
            $$0$i91$i = $3227;$i$0$i90$i = $3228;
           }
           $3229 = $i$0$i90$i << 2;
           $3230 = $3223 | $3229;
           $$0$i95$i = 17715;$i$0$i94$i = 0;
           while(1) {
            $3231 = HEAP8[$$0$i95$i>>0]|0;
            $3232 = ($3231<<24>>24)==(0);
            $3233 = ($3231<<24>>24)==($3210<<24>>24);
            $or$cond466 = $3232 | $3233;
            if ($or$cond466) {
             break;
            }
            $3234 = ((($$0$i95$i)) + 1|0);
            $3235 = (($i$0$i94$i) + 1)|0;
            $$0$i95$i = $3234;$i$0$i94$i = $3235;
           }
           $3236 = $3230 | $i$0$i94$i;
           $3239 = $2942;
           while(1) {
            $3237 = HEAP32[$2903>>2]|0;
            $3238 = (($3239) + 5)|0;
            $3240 = ($3237>>>0)>($3238>>>0);
            if ($3240) {
             break;
            }
            $3241 = ($3237|0)==(0);
            $3242 = (+($3237>>>0));
            $3243 = $3242 * 1.5;
            $3244 = (~~(($3243))>>>0);
            $3245 = $3241 ? 1024 : $3244;
            HEAP32[$2903>>2] = $3245;
            $3246 = HEAP32[$2904>>2]|0;
            $3247 = (_realloc($3246,$3245)|0);
            HEAP32[$2904>>2] = $3247;
            $$pre286 = HEAP32[$2900>>2]|0;
            $3239 = $$pre286;
           }
           $3248 = $3236&255;
           $3249 = HEAP32[$2904>>2]|0;
           $3250 = (($3249) + ($3239)|0);
           HEAP8[$3250>>0] = $3093;
           $3251 = ((($3250)) + 1|0);
           HEAP8[$3251>>0] = $3129;
           $3252 = ((($3250)) + 2|0);
           HEAP8[$3252>>0] = $3165;
           $3253 = ((($3250)) + 3|0);
           HEAP8[$3253>>0] = $3201;
           $3254 = ((($3250)) + 4|0);
           HEAP8[$3254>>0] = $3248;
           $3255 = HEAP32[$2900>>2]|0;
           $3256 = (($3255) + 5)|0;
           HEAP32[$2900>>2] = $3256;
           break;
          }
          case 21572:  {
           $3257 = HEAP32[$2909>>2]|0;
           $3258 = ((($3257)) + 40|0);
           $3259 = HEAP32[$3258>>2]|0;
           (_itf8_put_blk($2785,$3259)|0);
           while(1) {
            $3260 = HEAP32[$2903>>2]|0;
            $3261 = HEAP32[$2900>>2]|0;
            $3262 = HEAP32[$2909>>2]|0;
            $3263 = ((($3262)) + 40|0);
            $3264 = HEAP32[$3263>>2]|0;
            $3265 = (($3261) + ($3264))|0;
            $3266 = ($3260>>>0)>($3265>>>0);
            if ($3266) {
             break;
            }
            $3267 = ($3260|0)==(0);
            $3268 = (+($3260>>>0));
            $3269 = $3268 * 1.5;
            $3270 = (~~(($3269))>>>0);
            $3271 = $3267 ? 1024 : $3270;
            HEAP32[$2903>>2] = $3271;
            $3272 = HEAP32[$2904>>2]|0;
            $3273 = (_realloc($3272,$3271)|0);
            HEAP32[$2904>>2] = $3273;
           }
           $3274 = HEAP32[$2904>>2]|0;
           $3275 = (($3274) + ($3261)|0);
           $3276 = ((($3262)) + 32|0);
           $3277 = HEAP32[$3276>>2]|0;
           _memcpy(($3275|0),($3277|0),($3264|0))|0;
           $3278 = HEAP32[$2909>>2]|0;
           $3279 = ((($3278)) + 40|0);
           $3280 = HEAP32[$3279>>2]|0;
           $3281 = HEAP32[$2900>>2]|0;
           $3282 = (($3281) + ($3280))|0;
           HEAP32[$2900>>2] = $3282;
           break;
          }
          default: {
           HEAP32[$vararg_buffer84>>2] = $2926;
           _fprintf(9772,17720,$vararg_buffer84);
          }
          }
          $3283 = (($mc$0$i) + 1)|0;
          $$pre285$pre = HEAP32[$2813>>2]|0;
          $$pre285 = $$pre285$pre;$mc$1$i = $3283;
         } else {
          $$pre285 = $2911;$mc$1$i = $mc$0$i;
         }
         $3284 = (($k1$0$i) + 1)|0;
         $2911 = $$pre285;$k1$0$i = $3284;$mc$0$i = $mc$1$i;
        }
        $3285 = HEAP32[$2900>>2]|0;
        $3286 = ($mc$0$i>>>0)>(127);
        if (!($3286)) {
         $$0$i19$i130473 = $2785;$3292 = $3285;$3293 = 1;$mc$2$i178 = $mc$0$i;
         break;
        }
        $3287 = ($mc$0$i>>>0)>(16383);
        if (!($3287)) {
         $$0$i19$i130473 = $2785;$3292 = $3285;$3293 = 2;$mc$2$i178 = $mc$0$i;
         break;
        }
        $3288 = ($mc$0$i>>>0)>(2097151);
        if (!($3288)) {
         $$0$i19$i130473 = $2785;$3292 = $3285;$3293 = 3;$mc$2$i178 = $mc$0$i;
         break;
        }
        $3289 = ($mc$0$i>>>0)<(268435456);
        $3290 = $3289 ? 4 : 5;
        $$0$i19$i130473 = $2785;$3292 = $3285;$3293 = $3290;$mc$2$i178 = $mc$0$i;
       }
      } while(0);
      $3291 = (($3292) + ($3293))|0;
      (_itf8_put_blk($$0$i$i128,$3291)|0);
      (_itf8_put_blk($$0$i$i128,$mc$2$i178)|0);
      $3294 = ((($$0$i$i128)) + 36|0);
      $3295 = ((($$0$i$i128)) + 40|0);
      $3296 = ((($$0$i$i128)) + 32|0);
      while(1) {
       $3297 = HEAP32[$3294>>2]|0;
       $3298 = HEAP32[$3295>>2]|0;
       $3299 = HEAP32[$2900>>2]|0;
       $3300 = (($3298) + ($3299))|0;
       $3301 = ($3297>>>0)>($3300>>>0);
       if ($3301) {
        break;
       }
       $3302 = ($3297|0)==(0);
       $3303 = (+($3297>>>0));
       $3304 = $3303 * 1.5;
       $3305 = (~~(($3304))>>>0);
       $3306 = $3302 ? 1024 : $3305;
       HEAP32[$3294>>2] = $3306;
       $3307 = HEAP32[$3296>>2]|0;
       $3308 = (_realloc($3307,$3306)|0);
       HEAP32[$3296>>2] = $3308;
      }
      $3309 = HEAP32[$3296>>2]|0;
      $3310 = (($3309) + ($3298)|0);
      $3311 = ((($$0$i19$i130473)) + 32|0);
      $3312 = HEAP32[$3311>>2]|0;
      _memcpy(($3310|0),($3312|0),($3299|0))|0;
      $3313 = HEAP32[$2900>>2]|0;
      $3314 = HEAP32[$3295>>2]|0;
      $3315 = (($3314) + ($3313))|0;
      HEAP32[$3295>>2] = $3315;
      HEAP32[$2900>>2] = 0;
      $3316 = HEAP32[$620>>2]|0;
      $3317 = ($3316|0)==(0|0);
      if ($3317) {
       $mc$3$i = 0;
      } else {
       $3318 = ((($3316)) + 20|0);
       $3319 = HEAP32[$3318>>2]|0;
       $3320 = HEAP32[$558>>2]|0;
       $3321 = (FUNCTION_TABLE_iiiii[$3319 & 127]($3316,$$0$i19$i130473,17753,$3320)|0);
       $3322 = ($3321|0)==(-1);
       if ($3322) {
        break;
       } else {
        $mc$3$i = 1;
       }
      }
      $3323 = HEAP32[$638>>2]|0;
      $3324 = ($3323|0)==(0|0);
      if ($3324) {
       $mc$4$i = $mc$3$i;
      } else {
       $3325 = ((($3323)) + 20|0);
       $3326 = HEAP32[$3325>>2]|0;
       $3327 = HEAP32[$558>>2]|0;
       $3328 = (FUNCTION_TABLE_iiiii[$3326 & 127]($3323,$$0$i19$i130473,17756,$3327)|0);
       $3329 = ($3328|0)==(-1);
       if ($3329) {
        break;
       }
       $3330 = (($mc$3$i) + 1)|0;
       $mc$4$i = $3330;
      }
      $3331 = HEAP32[$819>>2]|0;
      $3332 = ($3331|0)==(0|0);
      if ($3332) {
       $mc$5$i = $mc$4$i;
      } else {
       $3333 = ((($3331)) + 20|0);
       $3334 = HEAP32[$3333>>2]|0;
       $3335 = HEAP32[$558>>2]|0;
       $3336 = (FUNCTION_TABLE_iiiii[$3334 & 127]($3331,$$0$i19$i130473,17759,$3335)|0);
       $3337 = ($3336|0)==(-1);
       if ($3337) {
        break;
       }
       $3338 = (($mc$4$i) + 1)|0;
       $mc$5$i = $3338;
      }
      $3339 = HEAP32[$1116>>2]|0;
      $3340 = ($3339|0)==(0|0);
      if ($3340) {
       $mc$6$i = $mc$5$i;
      } else {
       $3341 = ((($3339)) + 20|0);
       $3342 = HEAP32[$3341>>2]|0;
       $3343 = HEAP32[$558>>2]|0;
       $3344 = (FUNCTION_TABLE_iiiii[$3342 & 127]($3339,$$0$i19$i130473,17689,$3343)|0);
       $3345 = ($3344|0)==(-1);
       if ($3345) {
        break;
       }
       $3346 = (($mc$5$i) + 1)|0;
       $mc$6$i = $3346;
      }
      $3347 = HEAP32[$693>>2]|0;
      $3348 = ($3347|0)==(0|0);
      if ($3348) {
       $mc$7$i = $mc$6$i;
      } else {
       $3349 = ((($3347)) + 20|0);
       $3350 = HEAP32[$3349>>2]|0;
       $3351 = HEAP32[$558>>2]|0;
       $3352 = (FUNCTION_TABLE_iiiii[$3350 & 127]($3347,$$0$i19$i130473,17762,$3351)|0);
       $3353 = ($3352|0)==(-1);
       if ($3353) {
        break;
       }
       $3354 = (($mc$6$i) + 1)|0;
       $mc$7$i = $3354;
      }
      $3355 = HEAP32[$747>>2]|0;
      $3356 = ($3355|0)==(0|0);
      if ($3356) {
       $mc$8$i = $mc$7$i;
      } else {
       $3357 = ((($3355)) + 20|0);
       $3358 = HEAP32[$3357>>2]|0;
       $3359 = HEAP32[$558>>2]|0;
       $3360 = (FUNCTION_TABLE_iiiii[$3358 & 127]($3355,$$0$i19$i130473,17765,$3359)|0);
       $3361 = ($3360|0)==(-1);
       if ($3361) {
        break;
       }
       $3362 = (($mc$7$i) + 1)|0;
       $mc$8$i = $3362;
      }
      $3363 = HEAP32[$729>>2]|0;
      $3364 = ($3363|0)==(0|0);
      if ($3364) {
       $mc$9$i = $mc$8$i;
      } else {
       $3365 = ((($3363)) + 20|0);
       $3366 = HEAP32[$3365>>2]|0;
       $3367 = HEAP32[$558>>2]|0;
       $3368 = (FUNCTION_TABLE_iiiii[$3366 & 127]($3363,$$0$i19$i130473,17768,$3367)|0);
       $3369 = ($3368|0)==(-1);
       if ($3369) {
        break;
       }
       $3370 = (($mc$8$i) + 1)|0;
       $mc$9$i = $3370;
      }
      $3371 = HEAP32[$783>>2]|0;
      $3372 = ($3371|0)==(0|0);
      if ($3372) {
       $mc$10$i = $mc$9$i;
      } else {
       $3373 = ((($3371)) + 20|0);
       $3374 = HEAP32[$3373>>2]|0;
       $3375 = HEAP32[$558>>2]|0;
       $3376 = (FUNCTION_TABLE_iiiii[$3374 & 127]($3371,$$0$i19$i130473,17771,$3375)|0);
       $3377 = ($3376|0)==(-1);
       if ($3377) {
        break;
       }
       $3378 = (($mc$9$i) + 1)|0;
       $mc$10$i = $3378;
      }
      $3379 = HEAP32[$765>>2]|0;
      $3380 = ($3379|0)==(0|0);
      if ($3380) {
       $mc$11$i = $mc$10$i;
      } else {
       $3381 = ((($3379)) + 20|0);
       $3382 = HEAP32[$3381>>2]|0;
       $3383 = HEAP32[$558>>2]|0;
       $3384 = (FUNCTION_TABLE_iiiii[$3382 & 127]($3379,$$0$i19$i130473,17774,$3383)|0);
       $3385 = ($3384|0)==(-1);
       if ($3385) {
        break;
       }
       $3386 = (($mc$10$i) + 1)|0;
       $mc$11$i = $3386;
      }
      $3387 = HEAP32[$801>>2]|0;
      $3388 = ($3387|0)==(0|0);
      if ($3388) {
       $mc$12$i = $mc$11$i;
      } else {
       $3389 = ((($3387)) + 20|0);
       $3390 = HEAP32[$3389>>2]|0;
       $3391 = HEAP32[$558>>2]|0;
       $3392 = (FUNCTION_TABLE_iiiii[$3390 & 127]($3387,$$0$i19$i130473,17777,$3391)|0);
       $3393 = ($3392|0)==(-1);
       if ($3393) {
        break;
       }
       $3394 = (($mc$11$i) + 1)|0;
       $mc$12$i = $3394;
      }
      $3395 = HEAP32[$1117>>2]|0;
      $3396 = ($3395|0)==(0|0);
      if ($3396) {
       $mc$13$i = $mc$12$i;
      } else {
       $3397 = ((($3395)) + 20|0);
       $3398 = HEAP32[$3397>>2]|0;
       $3399 = HEAP32[$558>>2]|0;
       $3400 = (FUNCTION_TABLE_iiiii[$3398 & 127]($3395,$$0$i19$i130473,17780,$3399)|0);
       $3401 = ($3400|0)==(-1);
       if ($3401) {
        break;
       }
       $3402 = (($mc$12$i) + 1)|0;
       $mc$13$i = $3402;
      }
      $3403 = HEAP32[$1112>>2]|0;
      $3404 = ($3403|0)==(0|0);
      if ($3404) {
       $mc$14$i = $mc$13$i;
      } else {
       $3405 = ((($3403)) + 20|0);
       $3406 = HEAP32[$3405>>2]|0;
       $3407 = HEAP32[$558>>2]|0;
       $3408 = (FUNCTION_TABLE_iiiii[$3406 & 127]($3403,$$0$i19$i130473,17783,$3407)|0);
       $3409 = ($3408|0)==(-1);
       if ($3409) {
        break;
       }
       $3410 = (($mc$13$i) + 1)|0;
       $mc$14$i = $3410;
      }
      $3411 = HEAP32[$1121>>2]|0;
      $3412 = ($3411|0)==(0|0);
      if ($3412) {
       $mc$15$i = $mc$14$i;
      } else {
       $3413 = ((($3411)) + 20|0);
       $3414 = HEAP32[$3413>>2]|0;
       $3415 = HEAP32[$558>>2]|0;
       $3416 = (FUNCTION_TABLE_iiiii[$3414 & 127]($3411,$$0$i19$i130473,17786,$3415)|0);
       $3417 = ($3416|0)==(-1);
       if ($3417) {
        break;
       }
       $3418 = (($mc$14$i) + 1)|0;
       $mc$15$i = $3418;
      }
      $3419 = HEAP32[$837>>2]|0;
      $3420 = ($3419|0)==(0|0);
      if ($3420) {
       $mc$16$i = $mc$15$i;
      } else {
       $3421 = ((($3419)) + 20|0);
       $3422 = HEAP32[$3421>>2]|0;
       $3423 = HEAP32[$558>>2]|0;
       $3424 = (FUNCTION_TABLE_iiiii[$3422 & 127]($3419,$$0$i19$i130473,17789,$3423)|0);
       $3425 = ($3424|0)==(-1);
       if ($3425) {
        break;
       }
       $3426 = (($mc$15$i) + 1)|0;
       $mc$16$i = $3426;
      }
      $3427 = HEAP32[$855>>2]|0;
      $3428 = ($3427|0)==(0|0);
      if ($3428) {
       $mc$17$i = $mc$16$i;
      } else {
       $3429 = ((($3427)) + 20|0);
       $3430 = HEAP32[$3429>>2]|0;
       $3431 = HEAP32[$558>>2]|0;
       $3432 = (FUNCTION_TABLE_iiiii[$3430 & 127]($3427,$$0$i19$i130473,17792,$3431)|0);
       $3433 = ($3432|0)==(-1);
       if ($3433) {
        break;
       }
       $3434 = (($mc$16$i) + 1)|0;
       $mc$17$i = $3434;
      }
      $3435 = HEAP32[$873>>2]|0;
      $3436 = ($3435|0)==(0|0);
      if ($3436) {
       $mc$18$i = $mc$17$i;
      } else {
       $3437 = ((($3435)) + 20|0);
       $3438 = HEAP32[$3437>>2]|0;
       $3439 = HEAP32[$558>>2]|0;
       $3440 = (FUNCTION_TABLE_iiiii[$3438 & 127]($3435,$$0$i19$i130473,17795,$3439)|0);
       $3441 = ($3440|0)==(-1);
       if ($3441) {
        break;
       }
       $3442 = (($mc$17$i) + 1)|0;
       $mc$18$i = $3442;
      }
      $3443 = HEAP32[$942>>2]|0;
      $3444 = ($3443|0)==(0|0);
      if ($3444) {
       $mc$19$i = $mc$18$i;
      } else {
       $3445 = ((($3443)) + 20|0);
       $3446 = HEAP32[$3445>>2]|0;
       $3447 = HEAP32[$558>>2]|0;
       $3448 = (FUNCTION_TABLE_iiiii[$3446 & 127]($3443,$$0$i19$i130473,17798,$3447)|0);
       $3449 = ($3448|0)==(-1);
       if ($3449) {
        break;
       }
       $3450 = (($mc$18$i) + 1)|0;
       $mc$19$i = $3450;
      }
      $3451 = HEAP32[$1091>>2]|0;
      $3452 = ($3451|0)==(0|0);
      if ($3452) {
       $mc$20$i = $mc$19$i;
      } else {
       $3453 = ((($3451)) + 20|0);
       $3454 = HEAP32[$3453>>2]|0;
       $3455 = HEAP32[$558>>2]|0;
       $3456 = (FUNCTION_TABLE_iiiii[$3454 & 127]($3451,$$0$i19$i130473,17801,$3455)|0);
       $3457 = ($3456|0)==(-1);
       if ($3457) {
        break;
       }
       $3458 = (($mc$19$i) + 1)|0;
       $mc$20$i = $3458;
      }
      $3459 = HEAP32[$891>>2]|0;
      $3460 = ($3459|0)==(0|0);
      if ($3460) {
       $mc$21$i = $mc$20$i;
      } else {
       $3461 = ((($3459)) + 20|0);
       $3462 = HEAP32[$3461>>2]|0;
       $3463 = HEAP32[$558>>2]|0;
       $3464 = (FUNCTION_TABLE_iiiii[$3462 & 127]($3459,$$0$i19$i130473,17804,$3463)|0);
       $3465 = ($3464|0)==(-1);
       if ($3465) {
        break;
       }
       $3466 = (($mc$20$i) + 1)|0;
       $mc$21$i = $3466;
      }
      $3467 = HEAP32[$909>>2]|0;
      $3468 = ($3467|0)==(0|0);
      if ($3468) {
       $mc$22$i = $mc$21$i;
      } else {
       $3469 = ((($3467)) + 20|0);
       $3470 = HEAP32[$3469>>2]|0;
       $3471 = HEAP32[$558>>2]|0;
       $3472 = (FUNCTION_TABLE_iiiii[$3470 & 127]($3467,$$0$i19$i130473,17807,$3471)|0);
       $3473 = ($3472|0)==(-1);
       if ($3473) {
        break;
       }
       $3474 = (($mc$21$i) + 1)|0;
       $mc$22$i = $3474;
      }
      $3475 = HEAP32[$1115>>2]|0;
      $3476 = ($3475|0)==(0|0);
      if ($3476) {
       $mc$23$i = $mc$22$i;
      } else {
       $3477 = ((($3475)) + 20|0);
       $3478 = HEAP32[$3477>>2]|0;
       $3479 = HEAP32[$558>>2]|0;
       $3480 = (FUNCTION_TABLE_iiiii[$3478 & 127]($3475,$$0$i19$i130473,17810,$3479)|0);
       $3481 = ($3480|0)==(-1);
       if ($3481) {
        break;
       }
       $3482 = (($mc$22$i) + 1)|0;
       $mc$23$i = $3482;
      }
      $3483 = HEAP32[$711>>2]|0;
      $3484 = ($3483|0)==(0|0);
      if ($3484) {
       $mc$24$i = $mc$23$i;
      } else {
       $3485 = ((($3483)) + 20|0);
       $3486 = HEAP32[$3485>>2]|0;
       $3487 = HEAP32[$558>>2]|0;
       $3488 = (FUNCTION_TABLE_iiiii[$3486 & 127]($3483,$$0$i19$i130473,17813,$3487)|0);
       $3489 = ($3488|0)==(-1);
       if ($3489) {
        break;
       }
       $3490 = (($mc$23$i) + 1)|0;
       $mc$24$i = $3490;
      }
      $3491 = HEAP32[$1108>>2]|0;
      $3492 = ($3491|0)==(0|0);
      if ($3492) {
       $mc$25$i = $mc$24$i;
      } else {
       $3493 = ((($3491)) + 20|0);
       $3494 = HEAP32[$3493>>2]|0;
       $3495 = HEAP32[$558>>2]|0;
       $3496 = (FUNCTION_TABLE_iiiii[$3494 & 127]($3491,$$0$i19$i130473,17671,$3495)|0);
       $3497 = ($3496|0)==(-1);
       if ($3497) {
        break;
       }
       $3498 = (($mc$24$i) + 1)|0;
       $mc$25$i = $3498;
      }
      $3499 = HEAP32[$1099>>2]|0;
      $3500 = ($3499|0)==(0|0);
      if ($3500) {
       $mc$26$i = $mc$25$i;
      } else {
       $3501 = ((($3499)) + 20|0);
       $3502 = HEAP32[$3501>>2]|0;
       $3503 = HEAP32[$558>>2]|0;
       $3504 = (FUNCTION_TABLE_iiiii[$3502 & 127]($3499,$$0$i19$i130473,17816,$3503)|0);
       $3505 = ($3504|0)==(-1);
       if ($3505) {
        break;
       }
       $3506 = (($mc$25$i) + 1)|0;
       $mc$26$i = $3506;
      }
      $3507 = ((($1)) + 500|0);
      $3508 = HEAP32[$3507>>2]|0;
      $3509 = ($3508|0)==(0|0);
      if ($3509) {
       $mc$27$i = $mc$26$i;
      } else {
       $3510 = ((($3508)) + 20|0);
       $3511 = HEAP32[$3510>>2]|0;
       $3512 = HEAP32[$558>>2]|0;
       $3513 = (FUNCTION_TABLE_iiiii[$3511 & 127]($3508,$$0$i19$i130473,17819,$3512)|0);
       $3514 = ($3513|0)==(-1);
       if ($3514) {
        break;
       }
       $3515 = (($mc$26$i) + 1)|0;
       $mc$27$i = $3515;
      }
      $3516 = HEAP32[$1122>>2]|0;
      $3517 = ($3516|0)==(0|0);
      if ($3517) {
       $mc$28$i = $mc$27$i;
      } else {
       $3518 = ((($3516)) + 20|0);
       $3519 = HEAP32[$3518>>2]|0;
       $3520 = HEAP32[$558>>2]|0;
       $3521 = (FUNCTION_TABLE_iiiii[$3519 & 127]($3516,$$0$i19$i130473,17822,$3520)|0);
       $3522 = ($3521|0)==(-1);
       if ($3522) {
        break;
       }
       $3523 = (($mc$27$i) + 1)|0;
       $mc$28$i = $3523;
      }
      $3524 = HEAP32[$558>>2]|0;
      $$mask2$i = $3524 & -256;
      $3525 = ($$mask2$i|0)==(256);
      do {
       if ($3525) {
        $$0$i19$i130474 = $$0$i19$i130473;$mc$33$i = $mc$28$i;
       } else {
        $3526 = ((($1)) + 404|0);
        $3527 = HEAP32[$3526>>2]|0;
        $3528 = ($3527|0)==(0|0);
        if ($3528) {
         $mc$29$i = $mc$28$i;
        } else {
         $3529 = ((($3527)) + 20|0);
         $3530 = HEAP32[$3529>>2]|0;
         $3531 = (FUNCTION_TABLE_iiiii[$3530 & 127]($3527,$$0$i19$i130473,17825,$3524)|0);
         $3532 = ($3531|0)==(-1);
         if ($3532) {
          break L1292;
         }
         $3533 = (($mc$28$i) + 1)|0;
         $mc$29$i = $3533;
        }
        $3534 = HEAP32[$1118>>2]|0;
        $3535 = ($3534|0)==(0|0);
        if ($3535) {
         $mc$30$i = $mc$29$i;
        } else {
         $3536 = ((($3534)) + 20|0);
         $3537 = HEAP32[$3536>>2]|0;
         $3538 = HEAP32[$558>>2]|0;
         $3539 = (FUNCTION_TABLE_iiiii[$3537 & 127]($3534,$$0$i19$i130473,17828,$3538)|0);
         $3540 = ($3539|0)==(-1);
         if ($3540) {
          break L1292;
         }
         $3541 = (($mc$29$i) + 1)|0;
         $mc$30$i = $3541;
        }
        $3542 = HEAP32[$1119>>2]|0;
        $3543 = ($3542|0)==(0|0);
        if ($3543) {
         $mc$31$i = $mc$30$i;
        } else {
         $3544 = ((($3542)) + 20|0);
         $3545 = HEAP32[$3544>>2]|0;
         $3546 = HEAP32[$558>>2]|0;
         $3547 = (FUNCTION_TABLE_iiiii[$3545 & 127]($3542,$$0$i19$i130473,17831,$3546)|0);
         $3548 = ($3547|0)==(-1);
         if ($3548) {
          break L1292;
         }
         $3549 = (($mc$30$i) + 1)|0;
         $mc$31$i = $3549;
        }
        $3550 = HEAP32[$1120>>2]|0;
        $3551 = ($3550|0)==(0|0);
        if ($3551) {
         $$0$i19$i130474 = $$0$i19$i130473;$mc$33$i = $mc$31$i;
         break;
        }
        $3552 = ((($3550)) + 20|0);
        $3553 = HEAP32[$3552>>2]|0;
        $3554 = HEAP32[$558>>2]|0;
        $3555 = (FUNCTION_TABLE_iiiii[$3553 & 127]($3550,$$0$i19$i130473,17834,$3554)|0);
        $3556 = ($3555|0)==(-1);
        if ($3556) {
         break L1292;
        }
        $3557 = (($mc$31$i) + 1)|0;
        $$0$i19$i130474 = $$0$i19$i130473;$mc$33$i = $3557;
       }
      } while(0);
      $3558 = ((($1)) + 528|0);
      $3559 = HEAP32[$3558>>2]|0;
      $3560 = ($3559|0)==(0|0);
      if ($3560) {
       $mc$34$i = $mc$33$i;
      } else {
       $3561 = ((($3559)) + 20|0);
       $3562 = HEAP32[$3561>>2]|0;
       $3563 = HEAP32[$558>>2]|0;
       $3564 = (FUNCTION_TABLE_iiiii[$3562 & 127]($3559,$$0$i19$i130474,17837,$3563)|0);
       $3565 = ($3564|0)==(-1);
       if ($3565) {
        break;
       }
       $3566 = (($mc$33$i) + 1)|0;
       $mc$34$i = $3566;
      }
      $3567 = ((($1)) + 532|0);
      $3568 = HEAP32[$3567>>2]|0;
      $3569 = ($3568|0)==(0|0);
      if ($3569) {
       $mc$35$i = $mc$34$i;
      } else {
       $3570 = ((($3568)) + 20|0);
       $3571 = HEAP32[$3570>>2]|0;
       $3572 = HEAP32[$558>>2]|0;
       $3573 = (FUNCTION_TABLE_iiiii[$3571 & 127]($3568,$$0$i19$i130474,17840,$3572)|0);
       $3574 = ($3573|0)==(-1);
       if ($3574) {
        break;
       }
       $3575 = (($mc$34$i) + 1)|0;
       $mc$35$i = $3575;
      }
      $3576 = HEAP32[$2900>>2]|0;
      $3577 = ($mc$35$i>>>0)>(127);
      do {
       if ($3577) {
        $3578 = ($mc$35$i>>>0)>(16383);
        if (!($3578)) {
         $3583 = 2;
         break;
        }
        $3579 = ($mc$35$i>>>0)>(2097151);
        if (!($3579)) {
         $3583 = 3;
         break;
        }
        $3580 = ($mc$35$i>>>0)<(268435456);
        $3581 = $3580 ? 4 : 5;
        $3583 = $3581;
       } else {
        $3583 = 1;
       }
      } while(0);
      $3582 = (($3576) + ($3583))|0;
      (_itf8_put_blk($$0$i$i128,$3582)|0);
      (_itf8_put_blk($$0$i$i128,$mc$35$i)|0);
      while(1) {
       $3584 = HEAP32[$3294>>2]|0;
       $3585 = HEAP32[$3295>>2]|0;
       $3586 = HEAP32[$2900>>2]|0;
       $3587 = (($3585) + ($3586))|0;
       $3588 = ($3584>>>0)>($3587>>>0);
       if ($3588) {
        break;
       }
       $3589 = ($3584|0)==(0);
       $3590 = (+($3584>>>0));
       $3591 = $3590 * 1.5;
       $3592 = (~~(($3591))>>>0);
       $3593 = $3589 ? 1024 : $3592;
       HEAP32[$3294>>2] = $3593;
       $3594 = HEAP32[$3296>>2]|0;
       $3595 = (_realloc($3594,$3593)|0);
       HEAP32[$3296>>2] = $3595;
      }
      $3596 = HEAP32[$3296>>2]|0;
      $3597 = (($3596) + ($3585)|0);
      $3598 = HEAP32[$3311>>2]|0;
      _memcpy(($3597|0),($3598|0),($3586|0))|0;
      $3599 = HEAP32[$2900>>2]|0;
      $3600 = HEAP32[$3295>>2]|0;
      $3601 = (($3600) + ($3599))|0;
      HEAP32[$3295>>2] = $3601;
      HEAP32[$2900>>2] = 0;
      $3602 = ((($c)) + 340|0);
      $3603 = HEAP32[$3602>>2]|0;
      $3604 = ($3603|0)==(0|0);
      do {
       if ($3604) {
        $$0$i19$i130475 = $$0$i19$i130474;$3843 = 0;$3844 = 1;$mc$38$i181 = 0;
       } else {
        $3605 = ((($$0$i19$i130474)) + 36|0);
        $3607 = $3603;$k2$0$i = 0;$mc$36$i = 0;
        while(1) {
         $3606 = HEAP32[$3607>>2]|0;
         $3608 = ($k2$0$i|0)==($3606|0);
         if ($3608) {
          break;
         }
         $3609 = $k2$0$i >>> 4;
         $3610 = ((($3607)) + 16|0);
         $3611 = HEAP32[$3610>>2]|0;
         $3612 = (($3611) + ($3609<<2)|0);
         $3613 = HEAP32[$3612>>2]|0;
         $3614 = $k2$0$i << 1;
         $3615 = $3614 & 30;
         $3616 = 3 << $3615;
         $3617 = $3613 & $3616;
         $3618 = ($3617|0)==(0);
         L1605: do {
          if ($3618) {
           $3619 = (($mc$36$i) + 1)|0;
           $3620 = ((($3607)) + 20|0);
           $3621 = HEAP32[$3620>>2]|0;
           $3622 = (($3621) + ($k2$0$i<<2)|0);
           $3623 = HEAP32[$3622>>2]|0;
           (_itf8_put_blk($$0$i19$i130474,$3623)|0);
           $3624 = HEAP32[$3602>>2]|0;
           $3625 = ((($3624)) + 20|0);
           $3626 = HEAP32[$3625>>2]|0;
           $3627 = (($3626) + ($k2$0$i<<2)|0);
           $3628 = HEAP32[$3627>>2]|0;
           $3629 = $3628 & 255;
           switch ($3629|0) {
           case 72: case 90:  {
            $3630 = HEAP32[$558>>2]|0;
            $$mask5$i = $3630 & -256;
            $3631 = ($$mask5$i|0)==(256);
            if ($3631) {
             while(1) {
              $3632 = HEAP32[$3605>>2]|0;
              $3633 = HEAP32[$2900>>2]|0;
              $3634 = (($3633) + 7)|0;
              $3635 = ($3632>>>0)>($3634>>>0);
              if ($3635) {
               break;
              }
              $3636 = ($3632|0)==(0);
              $3637 = (+($3632>>>0));
              $3638 = $3637 * 1.5;
              $3639 = (~~(($3638))>>>0);
              $3640 = $3636 ? 1024 : $3639;
              HEAP32[$3605>>2] = $3640;
              $3641 = HEAP32[$3311>>2]|0;
              $3642 = (_realloc($3641,$3640)|0);
              HEAP32[$3311>>2] = $3642;
             }
             $3643 = HEAP32[$3311>>2]|0;
             $3644 = (($3643) + ($3633)|0);
             ;HEAP8[$3644>>0]=HEAP8[17843>>0]|0;HEAP8[$3644+1>>0]=HEAP8[17843+1>>0]|0;HEAP8[$3644+2>>0]=HEAP8[17843+2>>0]|0;HEAP8[$3644+3>>0]=HEAP8[17843+3>>0]|0;HEAP8[$3644+4>>0]=HEAP8[17843+4>>0]|0;HEAP8[$3644+5>>0]=HEAP8[17843+5>>0]|0;HEAP8[$3644+6>>0]=HEAP8[17843+6>>0]|0;
             $3645 = HEAP32[$2900>>2]|0;
             $3646 = (($3645) + 7)|0;
             HEAP32[$2900>>2] = $3646;
             $mc$37$i = $3619;
             break L1605;
            }
            $$mask6$i = $3628 & -256;
            $switch$split2D = ($$mask6$i|0)<(4534784);
            L1616: do {
             if ($switch$split2D) {
              $switch$split962D = ($$mask6$i|0)<(4346112);
              if (!($switch$split962D)) {
               $switch$split1022D = ($$mask6$i|0)<(4411648);
               if (!($switch$split1022D)) {
                switch ($$mask6$i|0) {
                case 4412160:  {
                 label = 1072;
                 break L1616;
                 break;
                }
                case 4411648:  {
                 label = 1069;
                 break L1616;
                 break;
                }
                default: {
                 label = 1075;
                 break L1616;
                }
                }
               }
               switch ($$mask6$i|0) {
               case 4346112:  {
                break;
               }
               default: {
                label = 1075;
                break L1616;
               }
               }
               while(1) {
                $3662 = HEAP32[$3605>>2]|0;
                $3663 = HEAP32[$2900>>2]|0;
                $3664 = (($3663) + 4)|0;
                $3665 = ($3662>>>0)>($3664>>>0);
                if ($3665) {
                 break;
                }
                $3666 = ($3662|0)==(0);
                $3667 = (+($3662>>>0));
                $3668 = $3667 * 1.5;
                $3669 = (~~(($3668))>>>0);
                $3670 = $3666 ? 1024 : $3669;
                HEAP32[$3605>>2] = $3670;
                $3671 = HEAP32[$3311>>2]|0;
                $3672 = (_realloc($3671,$3670)|0);
                HEAP32[$3311>>2] = $3672;
               }
               $3673 = HEAP32[$3311>>2]|0;
               $3674 = (($3673) + ($3663)|0);
               HEAP8[$3674>>0]=50921989&255;HEAP8[$3674+1>>0]=(50921989>>8)&255;HEAP8[$3674+2>>0]=(50921989>>16)&255;HEAP8[$3674+3>>0]=50921989>>24;
               $3675 = HEAP32[$2900>>2]|0;
               $3676 = (($3675) + 4)|0;
               HEAP32[$2900>>2] = $3676;
               $mc$37$i = $3619;
               break L1605;
              }
              switch ($$mask6$i|0) {
              case 4342528:  {
               label = 1072;
               break L1616;
               break;
              }
              case 4342784:  {
               while(1) {
                $3677 = HEAP32[$3605>>2]|0;
                $3678 = HEAP32[$2900>>2]|0;
                $3679 = (($3678) + 4)|0;
                $3680 = ($3677>>>0)>($3679>>>0);
                if ($3680) {
                 break;
                }
                $3681 = ($3677|0)==(0);
                $3682 = (+($3677>>>0));
                $3683 = $3682 * 1.5;
                $3684 = (~~(($3683))>>>0);
                $3685 = $3681 ? 1024 : $3684;
                HEAP32[$3605>>2] = $3685;
                $3686 = HEAP32[$3311>>2]|0;
                $3687 = (_realloc($3686,$3685)|0);
                HEAP32[$3311>>2] = $3687;
               }
               $3688 = HEAP32[$3311>>2]|0;
               $3689 = (($3688) + ($3678)|0);
               HEAP8[$3689>>0]=67699205&255;HEAP8[$3689+1>>0]=(67699205>>8)&255;HEAP8[$3689+2>>0]=(67699205>>16)&255;HEAP8[$3689+3>>0]=67699205>>24;
               $3690 = HEAP32[$2900>>2]|0;
               $3691 = (($3690) + 4)|0;
               HEAP32[$2900>>2] = $3691;
               $mc$37$i = $3619;
               break L1605;
               break;
              }
              case 4344064:  {
               while(1) {
                $3692 = HEAP32[$3605>>2]|0;
                $3693 = HEAP32[$2900>>2]|0;
                $3694 = (($3693) + 4)|0;
                $3695 = ($3692>>>0)>($3694>>>0);
                if ($3695) {
                 break;
                }
                $3696 = ($3692|0)==(0);
                $3697 = (+($3692>>>0));
                $3698 = $3697 * 1.5;
                $3699 = (~~(($3698))>>>0);
                $3700 = $3696 ? 1024 : $3699;
                HEAP32[$3605>>2] = $3700;
                $3701 = HEAP32[$3311>>2]|0;
                $3702 = (_realloc($3701,$3700)|0);
                HEAP32[$3311>>2] = $3702;
               }
               $3703 = HEAP32[$3311>>2]|0;
               $3704 = (($3703) + ($3693)|0);
               HEAP8[$3704>>0]=84476421&255;HEAP8[$3704+1>>0]=(84476421>>8)&255;HEAP8[$3704+2>>0]=(84476421>>16)&255;HEAP8[$3704+3>>0]=84476421>>24;
               $3705 = HEAP32[$2900>>2]|0;
               $3706 = (($3705) + 4)|0;
               HEAP32[$2900>>2] = $3706;
               $mc$37$i = $3619;
               break L1605;
               break;
              }
              default: {
               label = 1075;
               break L1616;
              }
              }
             } else {
              $switch$split992D = ($$mask6$i|0)<(5329920);
              if (!($switch$split992D)) {
               $switch$split1082D = ($$mask6$i|0)<(5395456);
               if ($switch$split1082D) {
                $switch$split1142D = ($$mask6$i|0)<(5386752);
                if ($switch$split1142D) {
                 switch ($$mask6$i|0) {
                 case 5329920:  {
                  label = 1069;
                  break L1616;
                  break;
                 }
                 default: {
                  label = 1075;
                  break L1616;
                 }
                 }
                } else {
                 switch ($$mask6$i|0) {
                 case 5386752:  {
                  label = 1072;
                  break L1616;
                  break;
                 }
                 default: {
                  label = 1075;
                  break L1616;
                 }
                 }
                }
               } else {
                $switch$split1172D = ($$mask6$i|0)<(5583360);
                if ($switch$split1172D) {
                 switch ($$mask6$i|0) {
                 case 5395456:  {
                  label = 1072;
                  break L1616;
                  break;
                 }
                 default: {
                  label = 1075;
                  break L1616;
                 }
                 }
                } else {
                 switch ($$mask6$i|0) {
                 case 5583360:  {
                  label = 1069;
                  break L1616;
                  break;
                 }
                 default: {
                  label = 1075;
                  break L1616;
                 }
                 }
                }
               }
              }
              $switch$split1052D = ($$mask6$i|0)<(5198080);
              if ($switch$split1052D) {
               switch ($$mask6$i|0) {
               case 4534784:  {
                label = 1072;
                break L1616;
                break;
               }
               default: {
                label = 1075;
                break L1616;
               }
               }
              }
              $switch$split1112D = ($$mask6$i|0)<(5321216);
              if (!($switch$split1112D)) {
               switch ($$mask6$i|0) {
               case 5321216:  {
                label = 1069;
                break L1616;
                break;
               }
               default: {
                label = 1075;
                break L1616;
               }
               }
              }
              switch ($$mask6$i|0) {
              case 5198080:  {
               break;
              }
              default: {
               label = 1075;
               break L1616;
              }
              }
              while(1) {
               $3647 = HEAP32[$3605>>2]|0;
               $3648 = HEAP32[$2900>>2]|0;
               $3649 = (($3648) + 4)|0;
               $3650 = ($3647>>>0)>($3649>>>0);
               if ($3650) {
                break;
               }
               $3651 = ($3647|0)==(0);
               $3652 = (+($3647>>>0));
               $3653 = $3652 * 1.5;
               $3654 = (~~(($3653))>>>0);
               $3655 = $3651 ? 1024 : $3654;
               HEAP32[$3605>>2] = $3655;
               $3656 = HEAP32[$3311>>2]|0;
               $3657 = (_realloc($3656,$3655)|0);
               HEAP32[$3311>>2] = $3657;
              }
              $3658 = HEAP32[$3311>>2]|0;
              $3659 = (($3658) + ($3648)|0);
              HEAP8[$3659>>0]=34144773&255;HEAP8[$3659+1>>0]=(34144773>>8)&255;HEAP8[$3659+2>>0]=(34144773>>16)&255;HEAP8[$3659+3>>0]=34144773>>24;
              $3660 = HEAP32[$2900>>2]|0;
              $3661 = (($3660) + 4)|0;
              HEAP32[$2900>>2] = $3661;
              $mc$37$i = $3619;
              break L1605;
             }
            } while(0);
            if ((label|0) == 1069) {
             while(1) {
              label = 0;
              $3707 = HEAP32[$3605>>2]|0;
              $3708 = HEAP32[$2900>>2]|0;
              $3709 = (($3708) + 4)|0;
              $3710 = ($3707>>>0)>($3709>>>0);
              if ($3710) {
               break;
              }
              $3711 = ($3707|0)==(0);
              $3712 = (+($3707>>>0));
              $3713 = $3712 * 1.5;
              $3714 = (~~(($3713))>>>0);
              $3715 = $3711 ? 1024 : $3714;
              HEAP32[$3605>>2] = $3715;
              $3716 = HEAP32[$3311>>2]|0;
              $3717 = (_realloc($3716,$3715)|0);
              HEAP32[$3311>>2] = $3717;
              label = 1069;
             }
             $3718 = HEAP32[$3311>>2]|0;
             $3719 = (($3718) + ($3708)|0);
             HEAP8[$3719>>0]=118030853&255;HEAP8[$3719+1>>0]=(118030853>>8)&255;HEAP8[$3719+2>>0]=(118030853>>16)&255;HEAP8[$3719+3>>0]=118030853>>24;
             $3720 = HEAP32[$2900>>2]|0;
             $3721 = (($3720) + 4)|0;
             HEAP32[$2900>>2] = $3721;
             $mc$37$i = $3619;
             break L1605;
            }
            else if ((label|0) == 1072) {
             while(1) {
              label = 0;
              $3722 = HEAP32[$3605>>2]|0;
              $3723 = HEAP32[$2900>>2]|0;
              $3724 = (($3723) + 4)|0;
              $3725 = ($3722>>>0)>($3724>>>0);
              if ($3725) {
               break;
              }
              $3726 = ($3722|0)==(0);
              $3727 = (+($3722>>>0));
              $3728 = $3727 * 1.5;
              $3729 = (~~(($3728))>>>0);
              $3730 = $3726 ? 1024 : $3729;
              HEAP32[$3605>>2] = $3730;
              $3731 = HEAP32[$3311>>2]|0;
              $3732 = (_realloc($3731,$3730)|0);
              HEAP32[$3311>>2] = $3732;
              label = 1072;
             }
             $3733 = HEAP32[$3311>>2]|0;
             $3734 = (($3733) + ($3723)|0);
             HEAP8[$3734>>0]=134808069&255;HEAP8[$3734+1>>0]=(134808069>>8)&255;HEAP8[$3734+2>>0]=(134808069>>16)&255;HEAP8[$3734+3>>0]=134808069>>24;
             $3735 = HEAP32[$2900>>2]|0;
             $3736 = (($3735) + 4)|0;
             HEAP32[$2900>>2] = $3736;
             $mc$37$i = $3619;
             break L1605;
            }
            else if ((label|0) == 1075) {
             while(1) {
              label = 0;
              $3737 = HEAP32[$3605>>2]|0;
              $3738 = HEAP32[$2900>>2]|0;
              $3739 = (($3738) + 4)|0;
              $3740 = ($3737>>>0)>($3739>>>0);
              if ($3740) {
               break;
              }
              $3741 = ($3737|0)==(0);
              $3742 = (+($3737>>>0));
              $3743 = $3742 * 1.5;
              $3744 = (~~(($3743))>>>0);
              $3745 = $3741 ? 1024 : $3744;
              HEAP32[$3605>>2] = $3745;
              $3746 = HEAP32[$3311>>2]|0;
              $3747 = (_realloc($3746,$3745)|0);
              HEAP32[$3311>>2] = $3747;
              label = 1075;
             }
             $3748 = HEAP32[$3311>>2]|0;
             $3749 = (($3748) + ($3738)|0);
             HEAP8[$3749>>0]=151585285&255;HEAP8[$3749+1>>0]=(151585285>>8)&255;HEAP8[$3749+2>>0]=(151585285>>16)&255;HEAP8[$3749+3>>0]=151585285>>24;
             $3750 = HEAP32[$2900>>2]|0;
             $3751 = (($3750) + 4)|0;
             HEAP32[$2900>>2] = $3751;
             $mc$37$i = $3619;
             break L1605;
            }
            break;
           }
           case 67: case 99: case 65:  {
            while(1) {
             $3752 = HEAP32[$3605>>2]|0;
             $3753 = HEAP32[$2900>>2]|0;
             $3754 = (($3753) + 11)|0;
             $3755 = ($3752>>>0)>($3754>>>0);
             if ($3755) {
              break;
             }
             $3756 = ($3752|0)==(0);
             $3757 = (+($3752>>>0));
             $3758 = $3757 * 1.5;
             $3759 = (~~(($3758))>>>0);
             $3760 = $3756 ? 1024 : $3759;
             HEAP32[$3605>>2] = $3760;
             $3761 = HEAP32[$3311>>2]|0;
             $3762 = (_realloc($3761,$3760)|0);
             HEAP32[$3311>>2] = $3762;
            }
            $3763 = HEAP32[$3311>>2]|0;
            $3764 = (($3763) + ($3753)|0);
            dest=$3764; src=17851; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
            $3765 = HEAP32[$2900>>2]|0;
            $3766 = (($3765) + 11)|0;
            HEAP32[$2900>>2] = $3766;
            $mc$37$i = $3619;
            break L1605;
            break;
           }
           case 83: case 115:  {
            while(1) {
             $3767 = HEAP32[$3605>>2]|0;
             $3768 = HEAP32[$2900>>2]|0;
             $3769 = (($3768) + 11)|0;
             $3770 = ($3767>>>0)>($3769>>>0);
             if ($3770) {
              break;
             }
             $3771 = ($3767|0)==(0);
             $3772 = (+($3767>>>0));
             $3773 = $3772 * 1.5;
             $3774 = (~~(($3773))>>>0);
             $3775 = $3771 ? 1024 : $3774;
             HEAP32[$3605>>2] = $3775;
             $3776 = HEAP32[$3311>>2]|0;
             $3777 = (_realloc($3776,$3775)|0);
             HEAP32[$3311>>2] = $3777;
            }
            $3778 = HEAP32[$3311>>2]|0;
            $3779 = (($3778) + ($3768)|0);
            dest=$3779; src=17863; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
            $3780 = HEAP32[$2900>>2]|0;
            $3781 = (($3780) + 11)|0;
            HEAP32[$2900>>2] = $3781;
            $mc$37$i = $3619;
            break L1605;
            break;
           }
           case 102: case 73: case 105:  {
            while(1) {
             $3782 = HEAP32[$3605>>2]|0;
             $3783 = HEAP32[$2900>>2]|0;
             $3784 = (($3783) + 11)|0;
             $3785 = ($3782>>>0)>($3784>>>0);
             if ($3785) {
              break;
             }
             $3786 = ($3782|0)==(0);
             $3787 = (+($3782>>>0));
             $3788 = $3787 * 1.5;
             $3789 = (~~(($3788))>>>0);
             $3790 = $3786 ? 1024 : $3789;
             HEAP32[$3605>>2] = $3790;
             $3791 = HEAP32[$3311>>2]|0;
             $3792 = (_realloc($3791,$3790)|0);
             HEAP32[$3311>>2] = $3792;
            }
            $3793 = HEAP32[$3311>>2]|0;
            $3794 = (($3793) + ($3783)|0);
            dest=$3794; src=17875; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
            $3795 = HEAP32[$2900>>2]|0;
            $3796 = (($3795) + 11)|0;
            HEAP32[$2900>>2] = $3796;
            $mc$37$i = $3619;
            break L1605;
            break;
           }
           case 66:  {
            $$mask3$i = $3628 & -256;
            $switch$split932D = ($$mask3$i|0)<(5917952);
            if ($switch$split932D) {
             switch ($$mask3$i|0) {
             case 4610560:  {
              label = 1088;
              break;
             }
             default: {
              label = 1091;
             }
             }
            } else {
             switch ($$mask3$i|0) {
             case 5917952:  {
              label = 1088;
              break;
             }
             default: {
              label = 1091;
             }
             }
            }
            if ((label|0) == 1088) {
             while(1) {
              label = 0;
              $3797 = HEAP32[$3605>>2]|0;
              $3798 = HEAP32[$2900>>2]|0;
              $3799 = (($3798) + 8)|0;
              $3800 = ($3797>>>0)>($3799>>>0);
              if ($3800) {
               break;
              }
              $3801 = ($3797|0)==(0);
              $3802 = (+($3797>>>0));
              $3803 = $3802 * 1.5;
              $3804 = (~~(($3803))>>>0);
              $3805 = $3801 ? 1024 : $3804;
              HEAP32[$3605>>2] = $3805;
              $3806 = HEAP32[$3311>>2]|0;
              $3807 = (_realloc($3806,$3805)|0);
              HEAP32[$3311>>2] = $3807;
              label = 1088;
             }
             $3808 = HEAP32[$3311>>2]|0;
             $3809 = (($3808) + ($3798)|0);
             $3810 = $3809;
             $3811 = $3810;
             HEAP8[$3811>>0]=16844292&255;HEAP8[$3811+1>>0]=(16844292>>8)&255;HEAP8[$3811+2>>0]=(16844292>>16)&255;HEAP8[$3811+3>>0]=16844292>>24;
             $3812 = (($3810) + 4)|0;
             $3813 = $3812;
             HEAP8[$3813>>0]=100729094&255;HEAP8[$3813+1>>0]=(100729094>>8)&255;HEAP8[$3813+2>>0]=(100729094>>16)&255;HEAP8[$3813+3>>0]=100729094>>24;
             $3814 = HEAP32[$2900>>2]|0;
             $3815 = (($3814) + 8)|0;
             HEAP32[$2900>>2] = $3815;
             $mc$37$i = $3619;
             break L1605;
            }
            else if ((label|0) == 1091) {
             while(1) {
              label = 0;
              $3816 = HEAP32[$3605>>2]|0;
              $3817 = HEAP32[$2900>>2]|0;
              $3818 = (($3817) + 8)|0;
              $3819 = ($3816>>>0)>($3818>>>0);
              if ($3819) {
               break;
              }
              $3820 = ($3816|0)==(0);
              $3821 = (+($3816>>>0));
              $3822 = $3821 * 1.5;
              $3823 = (~~(($3822))>>>0);
              $3824 = $3820 ? 1024 : $3823;
              HEAP32[$3605>>2] = $3824;
              $3825 = HEAP32[$3311>>2]|0;
              $3826 = (_realloc($3825,$3824)|0);
              HEAP32[$3311>>2] = $3826;
              label = 1091;
             }
             $3827 = HEAP32[$3311>>2]|0;
             $3828 = (($3827) + ($3817)|0);
             $3829 = $3828;
             $3830 = $3829;
             HEAP8[$3830>>0]=16844292&255;HEAP8[$3830+1>>0]=(16844292>>8)&255;HEAP8[$3830+2>>0]=(16844292>>16)&255;HEAP8[$3830+3>>0]=16844292>>24;
             $3831 = (($3829) + 4)|0;
             $3832 = $3831;
             HEAP8[$3832>>0]=16843009&255;HEAP8[$3832+1>>0]=(16843009>>8)&255;HEAP8[$3832+2>>0]=(16843009>>16)&255;HEAP8[$3832+3>>0]=16843009>>24;
             $3833 = HEAP32[$2900>>2]|0;
             $3834 = (($3833) + 8)|0;
             HEAP32[$2900>>2] = $3834;
             $mc$37$i = $3619;
             break L1605;
            }
            break;
           }
           default: {
            HEAP32[$vararg_buffer87>>2] = $3629;
            _fprintf(9772,17887,$vararg_buffer87);
            $mc$37$i = $3619;
            break L1605;
           }
           }
          } else {
           $mc$37$i = $mc$36$i;
          }
         } while(0);
         $3835 = (($k2$0$i) + 1)|0;
         $$pre294 = HEAP32[$3602>>2]|0;
         $3607 = $$pre294;$k2$0$i = $3835;$mc$36$i = $mc$37$i;
        }
        $3836 = HEAP32[$2900>>2]|0;
        $3837 = ($mc$36$i>>>0)>(127);
        if (!($3837)) {
         $$0$i19$i130475 = $$0$i19$i130474;$3843 = $3836;$3844 = 1;$mc$38$i181 = $mc$36$i;
         break;
        }
        $3838 = ($mc$36$i>>>0)>(16383);
        if (!($3838)) {
         $$0$i19$i130475 = $$0$i19$i130474;$3843 = $3836;$3844 = 2;$mc$38$i181 = $mc$36$i;
         break;
        }
        $3839 = ($mc$36$i>>>0)>(2097151);
        if (!($3839)) {
         $$0$i19$i130475 = $$0$i19$i130474;$3843 = $3836;$3844 = 3;$mc$38$i181 = $mc$36$i;
         break;
        }
        $3840 = ($mc$36$i>>>0)<(268435456);
        $3841 = $3840 ? 4 : 5;
        $$0$i19$i130475 = $$0$i19$i130474;$3843 = $3836;$3844 = $3841;$mc$38$i181 = $mc$36$i;
       }
      } while(0);
      $3842 = (($3843) + ($3844))|0;
      (_itf8_put_blk($$0$i$i128,$3842)|0);
      (_itf8_put_blk($$0$i$i128,$mc$38$i181)|0);
      while(1) {
       $3845 = HEAP32[$3294>>2]|0;
       $3846 = HEAP32[$3295>>2]|0;
       $3847 = HEAP32[$2900>>2]|0;
       $3848 = (($3846) + ($3847))|0;
       $3849 = ($3845>>>0)>($3848>>>0);
       if ($3849) {
        break;
       }
       $3850 = ($3845|0)==(0);
       $3851 = (+($3845>>>0));
       $3852 = $3851 * 1.5;
       $3853 = (~~(($3852))>>>0);
       $3854 = $3850 ? 1024 : $3853;
       HEAP32[$3294>>2] = $3854;
       $3855 = HEAP32[$3296>>2]|0;
       $3856 = (_realloc($3855,$3854)|0);
       HEAP32[$3296>>2] = $3856;
      }
      $3857 = HEAP32[$3296>>2]|0;
      $3858 = (($3857) + ($3846)|0);
      $3859 = HEAP32[$3311>>2]|0;
      _memcpy(($3858|0),($3859|0),($3847|0))|0;
      $3860 = HEAP32[$2900>>2]|0;
      $3861 = HEAP32[$3295>>2]|0;
      $3862 = (($3861) + ($3860))|0;
      HEAP32[$3295>>2] = $3862;
      $3863 = HEAP32[$1109>>2]|0;
      $3864 = ($3863|0)==(0);
      if ($3864) {
       $3866 = $3862;
      } else {
       HEAP32[$vararg_buffer90>>2] = $3862;
       _fprintf(9772,17918,$vararg_buffer90);
       $$pre295 = HEAP32[$3295>>2]|0;
       $3866 = $$pre295;
      }
      $3865 = ((($$0$i$i128)) + 20|0);
      HEAP32[$3865>>2] = $3866;
      $3867 = ((($$0$i$i128)) + 16|0);
      HEAP32[$3867>>2] = $3866;
      $3868 = HEAP32[$3311>>2]|0;
      $3869 = ($3868|0)==(0|0);
      if (!($3869)) {
       _free($3868);
      }
      _free($$0$i19$i130475);
      $3870 = HEAP32[$96>>2]|0;
      $3871 = ((($c)) + 40|0);
      HEAP32[$3871>>2] = $3870;
      $3872 = $3870 << 2;
      $3873 = (_malloc($3872)|0);
      $3874 = ((($c)) + 44|0);
      HEAP32[$3874>>2] = $3873;
      $3875 = ($3873|0)==(0|0);
      if ($3875) {
       $$0 = -1;
       STACKTOP = sp;return ($$0|0);
      }
      $3876 = HEAP32[$$0$i$i128>>2]|0;
      $3877 = ($3876|0)==(0);
      $$467 = $3877 ? $3865 : $3867;
      $3878 = HEAP32[$$467>>2]|0;
      $3879 = HEAP32[$558>>2]|0;
      $3880 = $3879 >> 8;
      $3881 = ($3880|0)>(2);
      $3882 = $3881&1;
      $3883 = $3882 << 2;
      $3884 = $3883 | 2;
      $3885 = ((($$0$i$i128)) + 12|0);
      $3886 = HEAP32[$3885>>2]|0;
      $3887 = ($3886>>>0)>(127);
      do {
       if ($3887) {
        $3888 = ($3886>>>0)>(16383);
        if (!($3888)) {
         $3893 = 2;
         break;
        }
        $3889 = ($3886>>>0)>(2097151);
        if (!($3889)) {
         $3893 = 3;
         break;
        }
        $3890 = ($3886>>>0)<(268435456);
        $3891 = $3890 ? 4 : 5;
        $3893 = $3891;
       } else {
        $3893 = 1;
       }
      } while(0);
      $3892 = (($3884) + ($3893))|0;
      $3894 = HEAP32[$3867>>2]|0;
      $3895 = ($3894>>>0)>(127);
      do {
       if ($3895) {
        $3896 = ($3894>>>0)>(16383);
        if (!($3896)) {
         $3901 = 2;
         break;
        }
        $3897 = ($3894>>>0)>(2097151);
        if (!($3897)) {
         $3901 = 3;
         break;
        }
        $3898 = ($3894>>>0)<(268435456);
        $3899 = $3898 ? 4 : 5;
        $3901 = $3899;
       } else {
        $3901 = 1;
       }
      } while(0);
      $3900 = (($3892) + ($3901))|0;
      $3902 = HEAP32[$3865>>2]|0;
      $3903 = ($3902>>>0)>(127);
      do {
       if ($3903) {
        $3904 = ($3902>>>0)>(16383);
        if (!($3904)) {
         $3909 = 2;
         break;
        }
        $3905 = ($3902>>>0)>(2097151);
        if (!($3905)) {
         $3909 = 3;
         break;
        }
        $3906 = ($3902>>>0)<(268435456);
        $3907 = $3906 ? 4 : 5;
        $3909 = $3907;
       } else {
        $3909 = 1;
       }
      } while(0);
      $3908 = (($3900) + ($3909))|0;
      $3910 = (($3878) + ($3908))|0;
      $3911 = HEAP32[$95>>2]|0;
      $3912 = HEAP32[$3911>>2]|0;
      $3913 = HEAP32[$3912>>2]|0;
      $3914 = ((($3913)) + 4|0);
      $3915 = HEAP32[$3914>>2]|0;
      HEAP32[$$pre$phi310Z2D>>2] = $3915;
      $3916 = HEAP32[$3911>>2]|0;
      $3917 = HEAP32[$3916>>2]|0;
      $3918 = ((($3917)) + 8|0);
      $3919 = HEAP32[$3918>>2]|0;
      HEAP32[$2761>>2] = $3919;
      $3920 = HEAP32[$3911>>2]|0;
      $3921 = HEAP32[$3920>>2]|0;
      $3922 = ((($3921)) + 12|0);
      $3923 = HEAP32[$3922>>2]|0;
      HEAP32[$2764>>2] = $3923;
      $i$3 = 0;$slice_offset$0 = $3910;
      while(1) {
       $3924 = HEAP32[$96>>2]|0;
       $3925 = ($i$3|0)<($3924|0);
       if (!($3925)) {
        break;
       }
       $3926 = HEAP32[$95>>2]|0;
       $3927 = (($3926) + ($i$3<<2)|0);
       $3928 = HEAP32[$3927>>2]|0;
       $3929 = HEAP32[$3928>>2]|0;
       $3930 = ((($3929)) + 32|0);
       $3931 = HEAP32[$3930>>2]|0;
       $3932 = (($3931) + 1)|0;
       $3933 = HEAP32[$602>>2]|0;
       $3934 = (($3933) + ($3932))|0;
       HEAP32[$602>>2] = $3934;
       $3935 = HEAP32[$3874>>2]|0;
       $3936 = (($3935) + ($i$3<<2)|0);
       HEAP32[$3936>>2] = $slice_offset$0;
       $3937 = HEAP32[$3928>>2]|0;
       $3938 = ((($3937)) + 8|0);
       $3939 = HEAP32[$3938>>2]|0;
       $3940 = ((($3937)) + 12|0);
       $3941 = HEAP32[$3940>>2]|0;
       $3942 = (($3939) + ($3941))|0;
       $3943 = HEAP32[$2761>>2]|0;
       $3944 = HEAP32[$2764>>2]|0;
       $3945 = (($3943) + ($3944))|0;
       $3946 = ($3942|0)>($3945|0);
       if ($3946) {
        $3947 = (($3942) - ($3943))|0;
        HEAP32[$2764>>2] = $3947;
       }
       $3948 = ((($3928)) + 4|0);
       $3949 = HEAP32[$3948>>2]|0;
       $3950 = HEAP32[$3949>>2]|0;
       $3951 = ($3950|0)==(0);
       $3952 = ((($3949)) + 20|0);
       $3953 = ((($3949)) + 16|0);
       $$in1 = $3951 ? $3952 : $3953;
       $3954 = HEAP32[$$in1>>2]|0;
       $3955 = (($slice_offset$0) + ($3954))|0;
       $3956 = HEAP32[$558>>2]|0;
       $3957 = $3956 >> 8;
       $3958 = ($3957|0)>(2);
       $3959 = $3958&1;
       $3960 = $3959 << 2;
       $3961 = $3960 | 2;
       $3962 = ((($3949)) + 12|0);
       $3963 = HEAP32[$3962>>2]|0;
       $3964 = ($3963>>>0)>(127);
       do {
        if ($3964) {
         $3965 = ($3963>>>0)>(16383);
         if (!($3965)) {
          $3970 = 2;
          break;
         }
         $3966 = ($3963>>>0)>(2097151);
         if (!($3966)) {
          $3970 = 3;
          break;
         }
         $3967 = ($3963>>>0)<(268435456);
         $3968 = $3967 ? 4 : 5;
         $3970 = $3968;
        } else {
         $3970 = 1;
        }
       } while(0);
       $3969 = (($3961) + ($3970))|0;
       $3971 = ((($3949)) + 16|0);
       $3972 = HEAP32[$3971>>2]|0;
       $3973 = ($3972>>>0)>(127);
       do {
        if ($3973) {
         $3974 = ($3972>>>0)>(16383);
         if (!($3974)) {
          $3979 = 2;
          break;
         }
         $3975 = ($3972>>>0)>(2097151);
         if (!($3975)) {
          $3979 = 3;
          break;
         }
         $3976 = ($3972>>>0)<(268435456);
         $3977 = $3976 ? 4 : 5;
         $3979 = $3977;
        } else {
         $3979 = 1;
        }
       } while(0);
       $3978 = (($3969) + ($3979))|0;
       $3980 = ((($3949)) + 20|0);
       $3981 = HEAP32[$3980>>2]|0;
       $3982 = ($3981>>>0)>(127);
       do {
        if ($3982) {
         $3983 = ($3981>>>0)>(16383);
         if (!($3983)) {
          $3988 = 2;
          break;
         }
         $3984 = ($3981>>>0)>(2097151);
         if (!($3984)) {
          $3988 = 3;
          break;
         }
         $3985 = ($3981>>>0)<(268435456);
         $3986 = $3985 ? 4 : 5;
         $3988 = $3986;
        } else {
         $3988 = 1;
        }
       } while(0);
       $3987 = (($3978) + ($3988))|0;
       $3989 = (($3955) + ($3987))|0;
       $3990 = HEAP32[$3928>>2]|0;
       $3991 = ((($3990)) + 32|0);
       $3992 = HEAP32[$3991>>2]|0;
       $3993 = ((($3928)) + 8|0);
       $j$0 = 0;$slice_offset$1 = $3989;
       while(1) {
        $3994 = ($j$0|0)<($3992|0);
        if (!($3994)) {
         break;
        }
        $3995 = HEAP32[$3993>>2]|0;
        $3996 = (($3995) + ($j$0<<2)|0);
        $3997 = HEAP32[$3996>>2]|0;
        $3998 = ((($3997)) + 12|0);
        $3999 = HEAP32[$3998>>2]|0;
        $4000 = ($3999>>>0)>(127);
        do {
         if ($4000) {
          $4001 = ($3999>>>0)>(16383);
          if (!($4001)) {
           $4006 = 2;
           break;
          }
          $4002 = ($3999>>>0)>(2097151);
          if (!($4002)) {
           $4006 = 3;
           break;
          }
          $4003 = ($3999>>>0)<(268435456);
          $4004 = $4003 ? 4 : 5;
          $4006 = $4004;
         } else {
          $4006 = 1;
         }
        } while(0);
        $4005 = (($3961) + ($4006))|0;
        $4007 = ((($3997)) + 16|0);
        $4008 = HEAP32[$4007>>2]|0;
        $4009 = ($4008>>>0)>(127);
        do {
         if ($4009) {
          $4010 = ($4008>>>0)>(16383);
          if (!($4010)) {
           $4015 = 2;
           break;
          }
          $4011 = ($4008>>>0)>(2097151);
          if (!($4011)) {
           $4015 = 3;
           break;
          }
          $4012 = ($4008>>>0)<(268435456);
          $4013 = $4012 ? 4 : 5;
          $4015 = $4013;
         } else {
          $4015 = 1;
         }
        } while(0);
        $4014 = (($4005) + ($4015))|0;
        $4016 = ((($3997)) + 20|0);
        $4017 = HEAP32[$4016>>2]|0;
        $4018 = ($4017>>>0)>(127);
        do {
         if ($4018) {
          $4019 = ($4017>>>0)>(16383);
          if (!($4019)) {
           $4024 = 2;
           break;
          }
          $4020 = ($4017>>>0)>(2097151);
          if (!($4020)) {
           $4024 = 3;
           break;
          }
          $4021 = ($4017>>>0)<(268435456);
          $4022 = $4021 ? 4 : 5;
          $4024 = $4022;
         } else {
          $4024 = 1;
         }
        } while(0);
        $4023 = (($4014) + ($4024))|0;
        $4025 = (($slice_offset$1) + ($4023))|0;
        $4026 = HEAP32[$3997>>2]|0;
        $4027 = ($4026|0)==(0);
        $$468 = $4027 ? $4017 : $4008;
        $4028 = (($4025) + ($$468))|0;
        $4029 = (($j$0) + 1)|0;
        $j$0 = $4029;$slice_offset$1 = $4028;
       }
       $4030 = (($i$3) + 1)|0;
       $i$3 = $4030;$slice_offset$0 = $slice_offset$1;
      }
      $4031 = HEAP32[$c>>2]|0;
      $4032 = (($4031) + ($slice_offset$0))|0;
      HEAP32[$c>>2] = $4032;
      $4033 = ((($c)) + 56|0);
      HEAP32[$4033>>2] = $$0$i$i128;
      $4034 = HEAP32[$$pre$phi310Z2D>>2]|0;
      $4035 = ($4034|0)>(-1);
      if ($4035) {
       $4036 = HEAP32[$3>>2]|0;
       _cram_ref_decr($4036,$4034);
      }
      $4037 = HEAP32[$7>>2]|0;
      $4038 = ($4037|0)==(0);
      if (!($4038)) {
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      $4039 = ((($c)) + 344|0);
      $4040 = HEAP32[$4039>>2]|0;
      $4041 = ($4040|0)==(0|0);
      if ($4041) {
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      } else {
       $i$4 = 0;
      }
      while(1) {
       $4042 = HEAP32[$3>>2]|0;
       $4043 = ((($4042)) + 12|0);
       $4044 = HEAP32[$4043>>2]|0;
       $4045 = ($i$4|0)<($4044|0);
       if (!($4045)) {
        $$0 = 0;
        break;
       }
       $4046 = HEAP32[$4039>>2]|0;
       $4047 = (($4046) + ($i$4<<2)|0);
       $4048 = HEAP32[$4047>>2]|0;
       $4049 = ($4048|0)==(0);
       if (!($4049)) {
        _cram_ref_decr($4042,$i$4);
       }
       $4050 = (($i$4) + 1)|0;
       $i$4 = $4050;
      }
      STACKTOP = sp;return ($$0|0);
     }
    } while(0);
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 1164: {
    STACKTOP = sp;return ($$0|0);
    break;
   }
  }
  $2754 = ((($1139)) + 4|0);
  HEAP32[$2754>>2] = 0;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 1161) {
  $4051 = HEAP32[$131>>2]|0;
  _free($4051);
  $4052 = HEAP32[$129>>2]|0;
  _free($4052);
  $4053 = HEAP32[$130>>2]|0;
  _free($4053);
  _free($121);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 1162) {
  $4054 = HEAP32[$131>>2]|0;
  _free($4054);
  $4055 = HEAP32[$129>>2]|0;
  _free($4055);
  $4056 = HEAP32[$130>>2]|0;
  _free($4056);
  _free($121);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 1163) {
  $4057 = HEAP32[$131>>2]|0;
  _free($4057);
  $4058 = HEAP32[$129>>2]|0;
  _free($4058);
  $4059 = HEAP32[$130>>2]|0;
  _free($4059);
  _free($121);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 1164) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _kh_resize_m_s2u64($h,$new_n_buckets) {
 $h = $h|0;
 $new_n_buckets = $new_n_buckets|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$pn = 0, $$pre$phi5Z2D = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $h$0$i = 0, $i$0 = 0, $j$1 = 0, $key$0 = 0, $phitmp = 0, $phitmp10 = 0, $s$pn$i = 0, $step$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($new_n_buckets) + -1)|0;
 $1 = $0 >>> 1;
 $2 = $0 | $1;
 $3 = $2 >>> 2;
 $4 = $2 | $3;
 $5 = $4 >>> 4;
 $6 = $4 | $5;
 $7 = $6 >>> 8;
 $8 = $6 | $7;
 $9 = $8 >>> 16;
 $10 = $8 | $9;
 $11 = (($10) + 1)|0;
 $12 = ($11>>>0)<(4);
 $$ = $12 ? 4 : $11;
 $13 = ((($h)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($$>>>0));
 $16 = $15 * 0.77000000000000001;
 $17 = $16 + 0.5;
 $18 = (~~(($17))>>>0);
 $19 = ($14>>>0)<($18>>>0);
 if (!($19)) {
  $$0 = 0;
  return ($$0|0);
 }
 $20 = ($$>>>0)<(16);
 $21 = $$ >>> 4;
 $phitmp10 = $21 << 2;
 $22 = $20 ? 4 : $phitmp10;
 $23 = (_malloc($22)|0);
 $24 = ($23|0)==(0|0);
 if ($24) {
  $$0 = -1;
  return ($$0|0);
 }
 $25 = $$ >>> 4;
 $phitmp = $25 << 2;
 $26 = $20 ? 4 : $phitmp;
 _memset(($23|0),-86,($26|0))|0;
 $27 = HEAP32[$h>>2]|0;
 $28 = ($27>>>0)<($$>>>0);
 $29 = ((($h)) + 20|0);
 do {
  if ($28) {
   $30 = HEAP32[$29>>2]|0;
   $31 = $$ << 2;
   $32 = (_realloc($30,$31)|0);
   $33 = ($32|0)==(0|0);
   if ($33) {
    _free($23);
    $$0 = -1;
    return ($$0|0);
   }
   HEAP32[$29>>2] = $32;
   $34 = ((($h)) + 24|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $$ << 3;
   $37 = (_realloc($35,$36)|0);
   $38 = ($37|0)==(0|0);
   if (!($38)) {
    HEAP32[$34>>2] = $37;
    $$pre$phi5Z2D = $34;
    break;
   }
   _free($23);
   $$0 = -1;
   return ($$0|0);
  } else {
   $$pre4 = ((($h)) + 24|0);
   $$pre$phi5Z2D = $$pre4;
  }
 } while(0);
 $39 = ((($h)) + 16|0);
 $40 = (($$) + -1)|0;
 $j$1 = 0;
 while(1) {
  $41 = HEAP32[$h>>2]|0;
  $42 = ($j$1|0)==($41|0);
  if ($42) {
   break;
  }
  $43 = $j$1 >>> 4;
  $44 = HEAP32[$39>>2]|0;
  $45 = (($44) + ($43<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $j$1 << 1;
  $48 = $47 & 30;
  $49 = 3 << $48;
  $50 = $46 & $49;
  $51 = ($50|0)==(0);
  if ($51) {
   $52 = HEAP32[$29>>2]|0;
   $53 = (($52) + ($j$1<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = HEAP32[$$pre$phi5Z2D>>2]|0;
   $56 = (($55) + ($j$1<<3)|0);
   $57 = $56;
   $58 = $57;
   $59 = HEAP32[$58>>2]|0;
   $60 = (($57) + 4)|0;
   $61 = $60;
   $62 = HEAP32[$61>>2]|0;
   $63 = 1 << $48;
   $64 = $46 | $63;
   HEAP32[$45>>2] = $64;
   $106 = $59;$109 = $62;$key$0 = $54;
   while(1) {
    $65 = HEAP8[$key$0>>0]|0;
    $66 = $65 << 24 >> 24;
    $67 = ($65<<24>>24)==(0);
    L26: do {
     if ($67) {
      $$pn = $66;$step$0 = 0;
     } else {
      $h$0$i = $66;$s$pn$i = $key$0;
      while(1) {
       $$0$i = ((($s$pn$i)) + 1|0);
       $68 = HEAP8[$$0$i>>0]|0;
       $69 = ($68<<24>>24)==(0);
       if ($69) {
        $$pn = $h$0$i;$step$0 = 0;
        break L26;
       }
       $70 = ($h$0$i*31)|0;
       $71 = $68 << 24 >> 24;
       $72 = (($70) + ($71))|0;
       $h$0$i = $72;$s$pn$i = $$0$i;
      }
     }
    } while(0);
    while(1) {
     $i$0 = $$pn & $40;
     $73 = $i$0 >>> 4;
     $74 = (($23) + ($73<<2)|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = $i$0 << 1;
     $77 = $76 & 30;
     $78 = 2 << $77;
     $79 = $75 & $78;
     $80 = ($79|0)==(0);
     if (!($80)) {
      break;
     }
     $81 = (($step$0) + 1)|0;
     $82 = (($i$0) + ($81))|0;
     $$pn = $82;$step$0 = $81;
    }
    $83 = $78 ^ -1;
    $84 = $75 & $83;
    HEAP32[$74>>2] = $84;
    $85 = HEAP32[$h>>2]|0;
    $86 = ($i$0>>>0)<($85>>>0);
    if (!($86)) {
     break;
    }
    $87 = HEAP32[$39>>2]|0;
    $88 = (($87) + ($73<<2)|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = 3 << $77;
    $91 = $89 & $90;
    $92 = ($91|0)==(0);
    if (!($92)) {
     break;
    }
    $93 = HEAP32[$29>>2]|0;
    $94 = (($93) + ($i$0<<2)|0);
    $95 = HEAP32[$94>>2]|0;
    HEAP32[$94>>2] = $key$0;
    $96 = HEAP32[$$pre$phi5Z2D>>2]|0;
    $97 = (($96) + ($i$0<<3)|0);
    $98 = $97;
    $99 = $98;
    $100 = HEAP32[$99>>2]|0;
    $101 = (($98) + 4)|0;
    $102 = $101;
    $103 = HEAP32[$102>>2]|0;
    $104 = $97;
    $105 = $104;
    HEAP32[$105>>2] = $106;
    $107 = (($104) + 4)|0;
    $108 = $107;
    HEAP32[$108>>2] = $109;
    $110 = 1 << $77;
    $111 = HEAP32[$39>>2]|0;
    $112 = (($111) + ($73<<2)|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = $113 | $110;
    HEAP32[$112>>2] = $114;
    $106 = $100;$109 = $103;$key$0 = $95;
   }
   $115 = HEAP32[$29>>2]|0;
   $116 = (($115) + ($i$0<<2)|0);
   HEAP32[$116>>2] = $key$0;
   $117 = HEAP32[$$pre$phi5Z2D>>2]|0;
   $118 = (($117) + ($i$0<<3)|0);
   $119 = $118;
   $120 = $119;
   HEAP32[$120>>2] = $106;
   $121 = (($119) + 4)|0;
   $122 = $121;
   HEAP32[$122>>2] = $109;
  }
  $123 = (($j$1) + 1)|0;
  $j$1 = $123;
 }
 $124 = ($j$1>>>0)>($$>>>0);
 if ($124) {
  $125 = HEAP32[$29>>2]|0;
  $126 = $$ << 2;
  $127 = (_realloc($125,$126)|0);
  HEAP32[$29>>2] = $127;
  $128 = HEAP32[$$pre$phi5Z2D>>2]|0;
  $129 = $$ << 3;
  $130 = (_realloc($128,$129)|0);
  HEAP32[$$pre$phi5Z2D>>2] = $130;
 }
 $131 = HEAP32[$39>>2]|0;
 _free($131);
 HEAP32[$39>>2] = $23;
 HEAP32[$h>>2] = $$;
 $132 = HEAP32[$13>>2]|0;
 $133 = ((($h)) + 8|0);
 HEAP32[$133>>2] = $132;
 $134 = ((($h)) + 12|0);
 HEAP32[$134>>2] = $18;
 $$0 = 0;
 return ($$0|0);
}
function _process_one_read($fd,$c,$s,$cr,$b,$rnum) {
 $fd = $fd|0;
 $c = $c|0;
 $s = $s|0;
 $cr = $cr|0;
 $b = $b|0;
 $rnum = $rnum|0;
 var $$0 = 0, $$0$i = 0, $$0$i44 = 0, $$394 = 0, $$404 = 0, $$405 = 0, $$406 = 0, $$407 = 0, $$408 = 0, $$410 = 0, $$413 = 0, $$lobit = 0, $$lobit22 = 0, $$mask = 0, $$mask1 = 0, $$mask26 = 0, $$mask414 = 0, $$phi$trans$insert = 0, $$phi$trans$insert236 = 0, $$phi$trans$insert239 = 0;
 var $$phi$trans$insert242 = 0, $$pr = 0, $$pr420 = 0, $$pr422 = 0, $$pre = 0, $$pre$phi246Z2D = 0, $$pre$phi248Z2D = 0, $$pre$phi253Z2D = 0, $$pre$phi255Z2D = 0, $$pre$phi257Z2D = 0, $$pre205 = 0, $$pre206 = 0, $$pre207 = 0, $$pre208 = 0, $$pre209 = 0, $$pre210 = 0, $$pre211 = 0, $$pre212 = 0, $$pre214 = 0, $$pre216 = 0;
 var $$pre218 = 0, $$pre220 = 0, $$pre222 = 0, $$pre223 = 0, $$pre224 = 0, $$pre226 = 0, $$pre227 = 0, $$pre228 = 0, $$pre229 = 0, $$pre230 = 0, $$pre231 = 0, $$pre235 = 0, $$pre237 = 0, $$pre238 = 0, $$pre240 = 0, $$pre241 = 0, $$pre243 = 0, $$pre247 = 0, $$pre252 = 0, $$pre254 = 0;
 var $$pre256 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0;
 var $1014 = 0.0, $1015 = 0, $1016 = 0, $1017 = 0.0, $1018 = 0.0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0.0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0;
 var $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0;
 var $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0;
 var $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0;
 var $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0;
 var $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0;
 var $1122 = 0, $1123 = 0, $1124 = 0.0, $1125 = 0.0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0;
 var $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0;
 var $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0;
 var $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0;
 var $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0;
 var $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0;
 var $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0;
 var $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0;
 var $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0;
 var $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0;
 var $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0.0, $1315 = 0.0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0;
 var $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0.0, $1336 = 0.0, $1337 = 0, $1338 = 0;
 var $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0;
 var $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0;
 var $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0;
 var $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0;
 var $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0;
 var $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0;
 var $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0;
 var $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0;
 var $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0;
 var $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0;
 var $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0;
 var $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0.0, $1541 = 0.0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0;
 var $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0;
 var $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0;
 var $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0;
 var $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0;
 var $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0.0, $1637 = 0.0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0;
 var $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0;
 var $1663 = 0.0, $1664 = 0.0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0;
 var $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0.0, $1689 = 0.0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0;
 var $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0;
 var $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0.0, $1732 = 0.0, $1733 = 0, $1734 = 0;
 var $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0;
 var $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0.0, $1759 = 0.0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0;
 var $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0.0, $1787 = 0.0, $1788 = 0, $1789 = 0;
 var $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0;
 var $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0.0, $1814 = 0.0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0;
 var $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0.0, $1839 = 0.0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0;
 var $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0;
 var $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0;
 var $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0;
 var $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0;
 var $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0.0, $1926 = 0.0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0;
 var $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0.0, $195 = 0, $1950 = 0.0;
 var $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0;
 var $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0;
 var $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0;
 var $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0;
 var $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0;
 var $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0;
 var $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0;
 var $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0;
 var $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0;
 var $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0;
 var $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0;
 var $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0;
 var $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0;
 var $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0;
 var $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0;
 var $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0;
 var $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0;
 var $2257 = 0, $2258 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0.0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0.0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0.0, $465 = 0.0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0.0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0.0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0;
 var $512 = 0, $513 = 0.0, $514 = 0.0, $515 = 0, $516 = 0, $517 = 0.0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0.0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0.0, $560 = 0, $561 = 0.0, $562 = 0, $563 = 0, $564 = 0.0, $565 = 0.0, $566 = 0;
 var $567 = 0, $568 = 0.0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0.0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0.0, $613 = 0, $614 = 0, $615 = 0.0, $616 = 0.0, $617 = 0, $618 = 0, $619 = 0.0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0.0, $666 = 0, $667 = 0, $668 = 0.0, $669 = 0.0, $67 = 0, $670 = 0, $671 = 0, $672 = 0.0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0.0, $744 = 0, $745 = 0, $746 = 0.0;
 var $747 = 0.0, $748 = 0, $749 = 0, $75 = 0, $750 = 0.0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0.0, $853 = 0, $854 = 0;
 var $855 = 0.0, $856 = 0.0, $857 = 0, $858 = 0, $859 = 0.0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0.0, $915 = 0, $916 = 0, $917 = 0.0, $918 = 0.0, $919 = 0, $92 = 0, $920 = 0, $921 = 0.0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var $apos$0 = 0, $apos$0$ = 0, $apos$1 = 0, $apos$1$ph = 0, $apos$4 = 0, $aux$0$i = 0, $aux$0$i36 = 0, $aux$1$i = 0, $aux$1$i37 = 0, $aux$10$i = 0, $aux$2$i = 0, $aux$2$i38 = 0, $aux$4$i = 0, $aux$4$i40 = 0, $aux$5$i41 = 0, $aux$6$i = 0, $aux$7$i = 0, $aux$8$i = 0, $aux$9$i = 0, $blen$0$i = 0;
 var $blen$0$i42 = 0, $blen10$0$i = 0, $cond = 0, $exitcond = 0, $exitcond390 = 0, $exitcond391 = 0, $exitcond392 = 0, $exitcond393 = 0, $f$i = 0, $f$i46 = 0, $f$i47 = 0, $f$i48 = 0, $f$i49 = 0, $f$i50 = 0, $f$i52 = 0, $f$i53 = 0, $fake_qual$0 = 0, $i$0 = 0, $i$0$i = 0, $i$0$i51 = 0;
 var $i$1 = 0, $i$2 = 0, $l$0 = 0, $l$1 = 0, $l$1$ph = 0, $l$2 = 0, $l$3 = 0, $l$4 = 0, $l$5 = 0, $l$6 = 0, $new = 0, $new$i = 0, $or$cond = 0, $r$i = 0, $r$i29 = 0, $rg$0 = 0, $rg$0$i = 0, $rg$0$i$phi = 0, $rg$0$i34 = 0, $rg$0$i34$phi = 0;
 var $sign$2 = 0, $spos$0 = 0, $spos$1 = 0, $spos$1$ph = 0, $spos$10 = 0, $spos$11 = 0, $spos$14 = 0, $spos$2 = 0, $spos$4 = 0, $spos$5 = 0, $spos$8 = 0, $tmp$0$i = 0, $tmp$0$i$phi = 0, $tmp$0$i35 = 0, $tmp$0$i35$phi = 0, $tmp$1$i = 0, $tmp1$0$i = 0, $tmp2$0$i = 0, $tmp3$0$i = 0, $tmp4$0$i = 0;
 var $tmp6$0$i = 0, $tmp7$0$i = 0, $tmp8$0$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $f$i53 = sp + 200|0;
 $f$i52 = sp + 184|0;
 $f$i50 = sp + 168|0;
 $f$i49 = sp + 152|0;
 $f$i48 = sp + 136|0;
 $f$i47 = sp + 120|0;
 $f$i46 = sp + 104|0;
 $f$i = sp + 88|0;
 $new$i = sp + 80|0;
 $r$i29 = sp + 76|0;
 $r$i = sp + 72|0;
 $new = sp + 68|0;
 $0 = ((($c)) + 144|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($b)) + 8|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 65535;
 $10 = ((($cr)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($b)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($cr)) + 16|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($cr)) + 52|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($fd)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $$mask = $16 & -256;
 $17 = ($$mask|0)==(256);
 if ($17) {
  $18 = ((($b)) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($b)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $2;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + 4)|0;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (_bitshift64Lshr(($24|0),($27|0),46)|0);
  $29 = tempRet0;
  $30 = $28 & 262140;
  $31 = (($21) + ($30)|0);
  $32 = (_bitshift64Lshr(($24|0),($27|0),24)|0);
  $33 = tempRet0;
  $34 = $32 & 255;
  $35 = (($31) + ($34)|0);
  $36 = HEAP32[$11>>2]|0;
  $37 = (($36) + 1)|0;
  $38 = $37 >> 1;
  $39 = (($35) + ($38)|0);
  $40 = (($39) + ($36)|0);
  $41 = $40;
  $42 = $b;
  $43 = (($42) - ($41))|0;
  $44 = (($19) + ($43))|0;
  $45 = ((($s)) + 84|0);
  $46 = (+($44|0));
  $47 = $46 * 1.3400000000000001;
  $48 = $47 + 1.0;
  while(1) {
   $49 = HEAP32[$45>>2]|0;
   $50 = ((($49)) + 36|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (+($51>>>0));
   $53 = ((($49)) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (+($54>>>0));
   $56 = $55 + $48;
   $57 = !($52 <= $56);
   if ($57) {
    break;
   }
   $58 = ($51|0)==(0);
   $59 = $52 * 1.5;
   $60 = (~~(($59))>>>0);
   $61 = $58 ? 1024 : $60;
   HEAP32[$50>>2] = $61;
   $62 = HEAP32[$45>>2]|0;
   $63 = ((($62)) + 32|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($62)) + 36|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (_realloc($64,$66)|0);
   $68 = HEAP32[$45>>2]|0;
   $69 = ((($68)) + 32|0);
   HEAP32[$69>>2] = $67;
  }
  $70 = ((($49)) + 32|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + ($54)|0);
  $73 = HEAP32[$20>>2]|0;
  $74 = $2;
  $75 = $74;
  $76 = HEAP32[$75>>2]|0;
  $77 = (($74) + 4)|0;
  $78 = $77;
  $79 = HEAP32[$78>>2]|0;
  $80 = (_bitshift64Lshr(($76|0),($79|0),46)|0);
  $81 = tempRet0;
  $82 = $80 & 262140;
  $83 = (($73) + ($82)|0);
  $84 = (_bitshift64Lshr(($76|0),($79|0),24)|0);
  $85 = tempRet0;
  $86 = $84 & 255;
  $87 = (($83) + ($86)|0);
  $88 = HEAP32[$11>>2]|0;
  $89 = (($88) + 1)|0;
  $90 = $89 >> 1;
  $91 = (($87) + ($90)|0);
  $92 = (($91) + ($88)|0);
  $93 = ((($s)) + 56|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ((($cr)) + 64|0);
  HEAP32[$95>>2] = $94;
  $96 = ((($c)) + 340|0);
  $97 = ((($s)) + 60|0);
  $98 = ((($s)) + 52|0);
  $99 = ((($c)) + 308|0);
  $aux$0$i = $92;$rg$0$i = 0;$tmp$0$i = $72;
  L7: while(1) {
   $101 = HEAP8[$aux$0$i>>0]|0;
   switch ($101<<24>>24) {
   case 0:  {
    label = 50;
    break L7;
    break;
   }
   case 82:  {
    $102 = ((($aux$0$i)) + 1|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = ($103<<24>>24)==(71);
    if ($104) {
     $105 = ((($aux$0$i)) + 2|0);
     $106 = HEAP8[$105>>0]|0;
     $107 = ($106<<24>>24)==(90);
     if ($107) {
      $110 = 82;$aux$1$i = $aux$0$i;
      while(1) {
       $108 = ((($aux$1$i)) + 1|0);
       $109 = ($110<<24>>24)==(0);
       if ($109) {
        break;
       }
       $$pre222 = HEAP8[$108>>0]|0;
       $110 = $$pre222;$aux$1$i = $108;
      }
      $100 = ((($aux$0$i)) + 3|0);
      $tmp$0$i$phi = $tmp$0$i;$aux$0$i = $108;$rg$0$i = $100;$tmp$0$i = $tmp$0$i$phi;
      continue L7;
     } else {
      label = 16;
     }
    } else {
     label = 16;
    }
    break;
   }
   case 77:  {
    $111 = ((($aux$0$i)) + 1|0);
    $112 = HEAP8[$111>>0]|0;
    $113 = ($112<<24>>24)==(68);
    if ($113) {
     $114 = ((($aux$0$i)) + 2|0);
     $115 = HEAP8[$114>>0]|0;
     $116 = ($115<<24>>24)==(90);
     if ($116) {
      $119 = 77;$aux$2$i = $aux$0$i;
      while(1) {
       $117 = ((($aux$2$i)) + 1|0);
       $118 = ($119<<24>>24)==(0);
       if ($118) {
        $tmp$0$i$phi = $tmp$0$i;$rg$0$i$phi = $rg$0$i;$aux$0$i = $117;$tmp$0$i = $tmp$0$i$phi;$rg$0$i = $rg$0$i$phi;
        continue L7;
       }
       $$pre220 = HEAP8[$117>>0]|0;
       $119 = $$pre220;$aux$2$i = $117;
      }
     } else {
      label = 16;
     }
    } else {
     label = 16;
    }
    break;
   }
   case 78:  {
    $120 = ((($aux$0$i)) + 1|0);
    $121 = HEAP8[$120>>0]|0;
    $122 = ($121<<24>>24)==(77);
    if ($122) {
     $123 = ((($aux$0$i)) + 2|0);
     $124 = HEAP8[$123>>0]|0;
     $125 = $124 << 24 >> 24;
     switch ($125|0) {
     case 99: case 67: case 65:  {
      $126 = ((($aux$0$i)) + 4|0);
      $tmp$0$i$phi = $tmp$0$i;$rg$0$i$phi = $rg$0$i;$aux$0$i = $126;$tmp$0$i = $tmp$0$i$phi;$rg$0$i = $rg$0$i$phi;
      continue L7;
      break;
     }
     case 102: case 105: case 73:  {
      $127 = ((($aux$0$i)) + 7|0);
      $tmp$0$i$phi = $tmp$0$i;$rg$0$i$phi = $rg$0$i;$aux$0$i = $127;$tmp$0$i = $tmp$0$i$phi;$rg$0$i = $rg$0$i$phi;
      continue L7;
      break;
     }
     default: {
      label = 21;
      break L7;
     }
     }
    } else {
     $$pre$phi257Z2D = $120;
    }
    break;
   }
   default: {
    label = 16;
   }
   }
   if ((label|0) == 16) {
    label = 0;
    $$pre256 = ((($aux$0$i)) + 1|0);
    $$pre$phi257Z2D = $$pre256;
   }
   $128 = HEAP32[$14>>2]|0;
   $129 = (($128) + 1)|0;
   HEAP32[$14>>2] = $129;
   $130 = HEAP8[$aux$0$i>>0]|0;
   $131 = $130 << 24 >> 24;
   $132 = $131 << 16;
   $133 = HEAP8[$$pre$phi257Z2D>>0]|0;
   $134 = $133 << 24 >> 24;
   $135 = $134 << 8;
   $136 = $132 | $135;
   $137 = ((($aux$0$i)) + 2|0);
   $138 = HEAP8[$137>>0]|0;
   $139 = $138 << 24 >> 24;
   $140 = $136 | $139;
   $141 = HEAP32[$96>>2]|0;
   _kh_put_s_i2i($141,$140,$r$i);
   $142 = HEAP32[$r$i>>2]|0;
   $143 = ($142|0)==(-1);
   if ($143) {
    $$0$i = 0;
    break;
   }
   $144 = HEAP32[$93>>2]|0;
   $145 = HEAP32[$97>>2]|0;
   $146 = ($144|0)<($145|0);
   if ($146) {
    $$pre218 = HEAP32[$98>>2]|0;
    $154 = $144;$156 = $$pre218;
   } else {
    $147 = ($145|0)==(0);
    $148 = $145 << 1;
    $$394 = $147 ? 1024 : $148;
    HEAP32[$97>>2] = $$394;
    $149 = HEAP32[$98>>2]|0;
    $150 = $$394 << 2;
    $151 = (_realloc($149,$150)|0);
    HEAP32[$98>>2] = $151;
    $152 = ($151|0)==(0|0);
    if ($152) {
     $$0$i = 0;
     break;
    }
    $$pre216 = HEAP32[$93>>2]|0;
    $154 = $$pre216;$156 = $151;
   }
   $153 = (($154) + 1)|0;
   HEAP32[$93>>2] = $153;
   $155 = (($156) + ($154<<2)|0);
   HEAP32[$155>>2] = $140;
   $157 = HEAP32[$99>>2]|0;
   _cram_stats_add($157,$140);
   $158 = HEAP8[$137>>0]|0;
   $159 = $158 << 24 >> 24;
   switch ($159|0) {
   case 99: case 67: case 65:  {
    $160 = ((($aux$0$i)) + 3|0);
    $161 = ((($aux$0$i)) + 4|0);
    $162 = HEAP8[$160>>0]|0;
    $163 = ((($tmp$0$i)) + 1|0);
    HEAP8[$tmp$0$i>>0] = $162;
    $rg$0$i$phi = $rg$0$i;$aux$0$i = $161;$tmp$0$i = $163;$rg$0$i = $rg$0$i$phi;
    continue L7;
    break;
   }
   case 115: case 83:  {
    $164 = ((($aux$0$i)) + 3|0);
    $165 = ((($aux$0$i)) + 4|0);
    $166 = HEAP8[$164>>0]|0;
    $167 = ((($tmp$0$i)) + 1|0);
    HEAP8[$tmp$0$i>>0] = $166;
    $168 = ((($aux$0$i)) + 5|0);
    $169 = HEAP8[$165>>0]|0;
    $170 = ((($tmp$0$i)) + 2|0);
    HEAP8[$167>>0] = $169;
    $rg$0$i$phi = $rg$0$i;$aux$0$i = $168;$tmp$0$i = $170;$rg$0$i = $rg$0$i$phi;
    continue L7;
    break;
   }
   case 102: case 105: case 73:  {
    $171 = ((($aux$0$i)) + 3|0);
    $172 = ((($aux$0$i)) + 4|0);
    $173 = HEAP8[$171>>0]|0;
    $174 = ((($tmp$0$i)) + 1|0);
    HEAP8[$tmp$0$i>>0] = $173;
    $175 = ((($aux$0$i)) + 5|0);
    $176 = HEAP8[$172>>0]|0;
    $177 = ((($tmp$0$i)) + 2|0);
    HEAP8[$174>>0] = $176;
    $178 = ((($aux$0$i)) + 6|0);
    $179 = HEAP8[$175>>0]|0;
    $180 = ((($tmp$0$i)) + 3|0);
    HEAP8[$177>>0] = $179;
    $181 = ((($aux$0$i)) + 7|0);
    $182 = HEAP8[$178>>0]|0;
    $183 = ((($tmp$0$i)) + 4|0);
    HEAP8[$180>>0] = $182;
    $rg$0$i$phi = $rg$0$i;$aux$0$i = $181;$tmp$0$i = $183;$rg$0$i = $rg$0$i$phi;
    continue L7;
    break;
   }
   case 100:  {
    $184 = ((($aux$0$i)) + 3|0);
    $185 = ((($aux$0$i)) + 4|0);
    $186 = HEAP8[$184>>0]|0;
    $187 = ((($tmp$0$i)) + 1|0);
    HEAP8[$tmp$0$i>>0] = $186;
    $188 = ((($aux$0$i)) + 5|0);
    $189 = HEAP8[$185>>0]|0;
    $190 = ((($tmp$0$i)) + 2|0);
    HEAP8[$187>>0] = $189;
    $191 = ((($aux$0$i)) + 6|0);
    $192 = HEAP8[$188>>0]|0;
    $193 = ((($tmp$0$i)) + 3|0);
    HEAP8[$190>>0] = $192;
    $194 = ((($aux$0$i)) + 7|0);
    $195 = HEAP8[$191>>0]|0;
    $196 = ((($tmp$0$i)) + 4|0);
    HEAP8[$193>>0] = $195;
    $197 = ((($aux$0$i)) + 8|0);
    $198 = HEAP8[$194>>0]|0;
    $199 = ((($tmp$0$i)) + 5|0);
    HEAP8[$196>>0] = $198;
    $200 = ((($aux$0$i)) + 9|0);
    $201 = HEAP8[$197>>0]|0;
    $202 = ((($tmp$0$i)) + 6|0);
    HEAP8[$199>>0] = $201;
    $203 = ((($aux$0$i)) + 10|0);
    $204 = HEAP8[$200>>0]|0;
    $205 = ((($tmp$0$i)) + 7|0);
    HEAP8[$202>>0] = $204;
    $206 = ((($aux$0$i)) + 11|0);
    $207 = HEAP8[$203>>0]|0;
    $208 = ((($tmp$0$i)) + 8|0);
    HEAP8[$205>>0] = $207;
    $rg$0$i$phi = $rg$0$i;$aux$0$i = $206;$tmp$0$i = $208;$rg$0$i = $rg$0$i$phi;
    continue L7;
    break;
   }
   case 72: case 90:  {
    $209 = ((($aux$0$i)) + 3|0);
    $aux$4$i = $209;$tmp$1$i = $tmp$0$i;
    while(1) {
     $210 = ((($aux$4$i)) + 1|0);
     $211 = HEAP8[$aux$4$i>>0]|0;
     $212 = ((($tmp$1$i)) + 1|0);
     HEAP8[$tmp$1$i>>0] = $211;
     $213 = ($211<<24>>24)==(0);
     if ($213) {
      break;
     } else {
      $aux$4$i = $210;$tmp$1$i = $212;
     }
    }
    $214 = ((($tmp$1$i)) + 2|0);
    HEAP8[$212>>0] = 9;
    $rg$0$i$phi = $rg$0$i;$aux$0$i = $210;$tmp$0$i = $214;$rg$0$i = $rg$0$i$phi;
    continue L7;
    break;
   }
   case 66:  {
    $215 = ((($aux$0$i)) + 3|0);
    $216 = HEAP8[$215>>0]|0;
    $217 = $216 << 24 >> 24;
    $218 = ((($aux$0$i)) + 4|0);
    $219 = HEAP8[$218>>0]|0;
    $220 = $219&255;
    $221 = ((($aux$0$i)) + 5|0);
    $222 = HEAP8[$221>>0]|0;
    $223 = $222&255;
    $224 = $223 << 8;
    $225 = $220 | $224;
    $226 = ((($aux$0$i)) + 6|0);
    $227 = HEAP8[$226>>0]|0;
    $228 = $227&255;
    $229 = $228 << 16;
    $230 = $225 | $229;
    $231 = ((($aux$0$i)) + 7|0);
    $232 = HEAP8[$231>>0]|0;
    $233 = $232&255;
    $234 = $233 << 24;
    $235 = $230 | $234;
    switch ($217|0) {
    case 67: case 99:  {
     $blen$0$i = $235;
     break;
    }
    case 83: case 115:  {
     $236 = $235 << 1;
     $blen$0$i = $236;
     break;
    }
    case 102: case 73: case 105:  {
     $237 = $235 << 2;
     $blen$0$i = $237;
     break;
    }
    default: {
     label = 38;
     break L7;
    }
    }
    $238 = (($blen$0$i) + 5)|0;
    $239 = ($238>>>0)>(127);
    do {
     if ($239) {
      $241 = ($238>>>0)>(16383);
      if (!($241)) {
       $242 = $238 >>> 8;
       $243 = $242 | 128;
       $244 = $243&255;
       HEAP8[$tmp$0$i>>0] = $244;
       $245 = $238&255;
       $246 = ((($tmp$0$i)) + 1|0);
       HEAP8[$246>>0] = $245;
       $284 = 2;
       break;
      }
      $247 = ($238>>>0)>(2097151);
      if (!($247)) {
       $248 = $238 >>> 16;
       $249 = $248 | 192;
       $250 = $249&255;
       HEAP8[$tmp$0$i>>0] = $250;
       $251 = $238 >>> 8;
       $252 = $251&255;
       $253 = ((($tmp$0$i)) + 1|0);
       HEAP8[$253>>0] = $252;
       $254 = $238&255;
       $255 = ((($tmp$0$i)) + 2|0);
       HEAP8[$255>>0] = $254;
       $284 = 3;
       break;
      }
      $256 = ($238>>>0)>(268435455);
      if ($256) {
       $268 = $238 >>> 28;
       $269 = $268 | 240;
       $270 = $269&255;
       HEAP8[$tmp$0$i>>0] = $270;
       $271 = $238 >>> 20;
       $272 = $271&255;
       $273 = ((($tmp$0$i)) + 1|0);
       HEAP8[$273>>0] = $272;
       $274 = $238 >>> 12;
       $275 = $274&255;
       $276 = ((($tmp$0$i)) + 2|0);
       HEAP8[$276>>0] = $275;
       $277 = $238 >>> 4;
       $278 = $277&255;
       $279 = ((($tmp$0$i)) + 3|0);
       HEAP8[$279>>0] = $278;
       $280 = $238 & 15;
       $281 = $280&255;
       $282 = ((($tmp$0$i)) + 4|0);
       HEAP8[$282>>0] = $281;
       $284 = 5;
       break;
      } else {
       $257 = $238 >>> 24;
       $258 = $257 | 224;
       $259 = $258&255;
       HEAP8[$tmp$0$i>>0] = $259;
       $260 = $238 >>> 16;
       $261 = $260&255;
       $262 = ((($tmp$0$i)) + 1|0);
       HEAP8[$262>>0] = $261;
       $263 = $238 >>> 8;
       $264 = $263&255;
       $265 = ((($tmp$0$i)) + 2|0);
       HEAP8[$265>>0] = $264;
       $266 = $238&255;
       $267 = ((($tmp$0$i)) + 3|0);
       HEAP8[$267>>0] = $266;
       $284 = 4;
       break;
      }
     } else {
      $240 = $238&255;
      HEAP8[$tmp$0$i>>0] = $240;
      $284 = 1;
     }
    } while(0);
    $283 = (($tmp$0$i) + ($284)|0);
    $285 = HEAP8[$215>>0]|0;
    $286 = ((($283)) + 1|0);
    HEAP8[$283>>0] = $285;
    $287 = HEAP8[$218>>0]|0;
    $288 = ((($286)) + 1|0);
    HEAP8[$286>>0] = $287;
    $289 = HEAP8[$221>>0]|0;
    $290 = ((($288)) + 1|0);
    HEAP8[$288>>0] = $289;
    $291 = HEAP8[$226>>0]|0;
    $292 = ((($290)) + 1|0);
    HEAP8[$290>>0] = $291;
    $293 = ((($aux$0$i)) + 8|0);
    $294 = HEAP8[$231>>0]|0;
    $295 = ((($292)) + 1|0);
    HEAP8[$292>>0] = $294;
    _memcpy(($295|0),($293|0),($blen$0$i|0))|0;
    $296 = (($295) + ($blen$0$i)|0);
    $297 = (($293) + ($blen$0$i)|0);
    $rg$0$i$phi = $rg$0$i;$aux$0$i = $297;$tmp$0$i = $296;$rg$0$i = $rg$0$i$phi;
    continue L7;
    break;
   }
   default: {
    label = 49;
    break L7;
   }
   }
  }
  if ((label|0) == 21) {
   _fprintf(9772,18152,$vararg_buffer);
   $$0$i = 0;
  }
  else if ((label|0) == 38) {
   HEAP32[$vararg_buffer1>>2] = $217;
   _fprintf(9772,18184,$vararg_buffer1);
   $$0$i = 0;
  }
  else if ((label|0) == 49) {
   HEAP32[$vararg_buffer3>>2] = $159;
   _fprintf(9772,18224,$vararg_buffer3);
   $$0$i = 0;
  }
  else if ((label|0) == 50) {
   $298 = ((($c)) + 328|0);
   $299 = HEAP32[$298>>2]|0;
   $300 = HEAP32[$14>>2]|0;
   _cram_stats_add($299,$300);
   $301 = HEAP32[$45>>2]|0;
   $302 = ((($301)) + 40|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = ((($cr)) + 56|0);
   HEAP32[$304>>2] = $303;
   $305 = HEAP32[$45>>2]|0;
   $306 = ((($305)) + 32|0);
   $307 = HEAP32[$306>>2]|0;
   $308 = (($307) + ($303)|0);
   $309 = $tmp$0$i;
   $310 = $308;
   $311 = (($309) - ($310))|0;
   $312 = ((($cr)) + 60|0);
   HEAP32[$312>>2] = $311;
   $313 = HEAP32[$45>>2]|0;
   $314 = ((($313)) + 32|0);
   $315 = HEAP32[$314>>2]|0;
   $316 = (($309) - ($315))|0;
   $317 = ((($313)) + 40|0);
   HEAP32[$317>>2] = $316;
   $318 = HEAP32[$45>>2]|0;
   $319 = ((($318)) + 40|0);
   $320 = HEAP32[$319>>2]|0;
   $321 = ((($318)) + 36|0);
   $322 = HEAP32[$321>>2]|0;
   $323 = ($320>>>0)>($322>>>0);
   if ($323) {
    ___assert_fail((18247|0),(18000|0),2171,(18285|0));
    // unreachable;
   } else {
    $$0$i = $rg$0$i;
   }
  }
  $rg$0 = $$0$i;
 } else {
  $324 = ((($b)) + 32|0);
  $325 = HEAP32[$324>>2]|0;
  $326 = $2;
  $327 = $326;
  $328 = HEAP32[$327>>2]|0;
  $329 = (($326) + 4)|0;
  $330 = $329;
  $331 = HEAP32[$330>>2]|0;
  $332 = (_bitshift64Lshr(($328|0),($331|0),46)|0);
  $333 = tempRet0;
  $334 = $332 & 262140;
  $335 = (($325) - ($334))|0;
  $336 = (_bitshift64Lshr(($328|0),($331|0),24)|0);
  $337 = tempRet0;
  $338 = $336 & 255;
  $339 = (($335) - ($338))|0;
  $340 = HEAP32[$11>>2]|0;
  $341 = (($339) - ($340))|0;
  $342 = (($340) + 1)|0;
  $343 = $342 >> 1;
  $344 = (($341) - ($343))|0;
  $345 = ((($c)) + 52|0);
  $346 = HEAP32[$345>>2]|0;
  $347 = ((($346)) + 68|0);
  $348 = HEAP32[$347>>2]|0;
  $349 = ((($348)) + 40|0);
  $350 = HEAP32[$349>>2]|0;
  $351 = ((($s)) + 84|0);
  $352 = (+($344|0));
  $353 = $352 * 1.3400000000000001;
  $354 = $353 + 1.0;
  while(1) {
   $355 = HEAP32[$351>>2]|0;
   $356 = ((($355)) + 36|0);
   $357 = HEAP32[$356>>2]|0;
   $358 = (+($357>>>0));
   $359 = ((($355)) + 40|0);
   $360 = HEAP32[$359>>2]|0;
   $361 = (+($360>>>0));
   $362 = $361 + $354;
   $363 = !($358 <= $362);
   if ($363) {
    break;
   }
   $364 = ($357|0)==(0);
   $365 = $358 * 1.5;
   $366 = (~~(($365))>>>0);
   $367 = $364 ? 1024 : $366;
   HEAP32[$356>>2] = $367;
   $368 = HEAP32[$351>>2]|0;
   $369 = ((($368)) + 32|0);
   $370 = HEAP32[$369>>2]|0;
   $371 = ((($368)) + 36|0);
   $372 = HEAP32[$371>>2]|0;
   $373 = (_realloc($370,$372)|0);
   $374 = HEAP32[$351>>2]|0;
   $375 = ((($374)) + 32|0);
   HEAP32[$375>>2] = $373;
  }
  $376 = ((($355)) + 32|0);
  $377 = HEAP32[$376>>2]|0;
  $378 = (($377) + ($360)|0);
  $379 = ((($b)) + 40|0);
  $380 = HEAP32[$379>>2]|0;
  $381 = $2;
  $382 = $381;
  $383 = HEAP32[$382>>2]|0;
  $384 = (($381) + 4)|0;
  $385 = $384;
  $386 = HEAP32[$385>>2]|0;
  $387 = (_bitshift64Lshr(($383|0),($386|0),46)|0);
  $388 = tempRet0;
  $389 = $387 & 262140;
  $390 = (($380) + ($389)|0);
  $391 = (_bitshift64Lshr(($383|0),($386|0),24)|0);
  $392 = tempRet0;
  $393 = $391 & 255;
  $394 = (($390) + ($393)|0);
  $395 = HEAP32[$11>>2]|0;
  $396 = (($395) + 1)|0;
  $397 = $396 >> 1;
  $398 = (($394) + ($397)|0);
  $399 = (($398) + ($395)|0);
  $400 = $399;
  $401 = ((($fd)) + 288|0);
  $402 = ((($348)) + 36|0);
  $403 = ((($348)) + 32|0);
  $404 = ((($c)) + 340|0);
  $405 = ((($s)) + 92|0);
  $406 = ((($s)) + 96|0);
  $407 = ((($s)) + 100|0);
  $408 = ((($s)) + 88|0);
  $409 = ((($s)) + 104|0);
  $410 = ((($s)) + 108|0);
  $411 = ((($s)) + 112|0);
  $412 = ((($s)) + 116|0);
  $aux$0$i36 = $399;$rg$0$i34 = 0;$tmp$0$i35 = $378;
  L74: while(1) {
   $414 = $aux$0$i36;
   $415 = (($414) - ($400))|0;
   $416 = ($415|0)<($344|0);
   if (!($416)) {
    label = 220;
    break;
   }
   $417 = HEAP8[$aux$0$i36>>0]|0;
   switch ($417<<24>>24) {
   case 0:  {
    label = 220;
    break L74;
    break;
   }
   case 82:  {
    $418 = ((($aux$0$i36)) + 1|0);
    $419 = HEAP8[$418>>0]|0;
    $420 = ($419<<24>>24)==(71);
    if ($420) {
     $421 = ((($aux$0$i36)) + 2|0);
     $422 = HEAP8[$421>>0]|0;
     $423 = ($422<<24>>24)==(90);
     if ($423) {
      $426 = 82;$aux$1$i37 = $aux$0$i36;
      while(1) {
       $424 = ((($aux$1$i37)) + 1|0);
       $425 = ($426<<24>>24)==(0);
       if ($425) {
        break;
       }
       $$pre214 = HEAP8[$424>>0]|0;
       $426 = $$pre214;$aux$1$i37 = $424;
      }
      $413 = ((($aux$0$i36)) + 3|0);
      $tmp$0$i35$phi = $tmp$0$i35;$aux$0$i36 = $424;$rg$0$i34 = $413;$tmp$0$i35 = $tmp$0$i35$phi;
      continue L74;
     }
    }
    break;
   }
   case 77:  {
    $427 = ((($aux$0$i36)) + 1|0);
    $428 = HEAP8[$427>>0]|0;
    $429 = ($428<<24>>24)==(68);
    if ($429) {
     $430 = ((($aux$0$i36)) + 2|0);
     $431 = HEAP8[$430>>0]|0;
     $432 = ($431<<24>>24)==(90);
     if ($432) {
      $433 = HEAP32[$13>>2]|0;
      $434 = ($433|0)==(0);
      if (!($434)) {
       $435 = HEAP32[$401>>2]|0;
       $436 = ($435|0)==(0);
       if ($436) {
        $437 = HEAP32[$10>>2]|0;
        $438 = $437 & 4;
        $439 = ($438|0)==(0);
        if ($439) {
         $442 = 77;$aux$2$i38 = $aux$0$i36;
         while(1) {
          $440 = ((($aux$2$i38)) + 1|0);
          $441 = ($442<<24>>24)==(0);
          if ($441) {
           $tmp$0$i35$phi = $tmp$0$i35;$rg$0$i34$phi = $rg$0$i34;$aux$0$i36 = $440;$tmp$0$i35 = $tmp$0$i35$phi;$rg$0$i34 = $rg$0$i34$phi;
           continue L74;
          }
          $$pre = HEAP8[$440>>0]|0;
          $442 = $$pre;$aux$2$i38 = $440;
         }
        }
       }
      }
     }
    }
    break;
   }
   case 78:  {
    $443 = ((($aux$0$i36)) + 1|0);
    $444 = HEAP8[$443>>0]|0;
    $445 = ($444<<24>>24)==(77);
    if ($445) {
     $446 = HEAP32[$13>>2]|0;
     $447 = ($446|0)==(0);
     if (!($447)) {
      $448 = HEAP32[$401>>2]|0;
      $449 = ($448|0)==(0);
      if ($449) {
       $450 = HEAP32[$10>>2]|0;
       $451 = $450 & 4;
       $452 = ($451|0)==(0);
       if ($452) {
        $453 = ((($aux$0$i36)) + 2|0);
        $454 = HEAP8[$453>>0]|0;
        $455 = $454 << 24 >> 24;
        switch ($455|0) {
        case 99: case 67: case 65:  {
         $456 = ((($aux$0$i36)) + 4|0);
         $tmp$0$i35$phi = $tmp$0$i35;$rg$0$i34$phi = $rg$0$i34;$aux$0$i36 = $456;$tmp$0$i35 = $tmp$0$i35$phi;$rg$0$i34 = $rg$0$i34$phi;
         continue L74;
         break;
        }
        case 115: case 83:  {
         $457 = ((($aux$0$i36)) + 5|0);
         $tmp$0$i35$phi = $tmp$0$i35;$rg$0$i34$phi = $rg$0$i34;$aux$0$i36 = $457;$tmp$0$i35 = $tmp$0$i35$phi;$rg$0$i34 = $rg$0$i34$phi;
         continue L74;
         break;
        }
        case 102: case 105: case 73:  {
         $458 = ((($aux$0$i36)) + 7|0);
         $tmp$0$i35$phi = $tmp$0$i35;$rg$0$i34$phi = $rg$0$i34;$aux$0$i36 = $458;$tmp$0$i35 = $tmp$0$i35$phi;$rg$0$i34 = $rg$0$i34$phi;
         continue L74;
         break;
        }
        default: {
         label = 79;
         break L74;
        }
        }
       }
      }
     }
    }
    break;
   }
   default: {
   }
   }
   while(1) {
    $459 = HEAP32[$402>>2]|0;
    $460 = HEAP32[$349>>2]|0;
    $461 = (($460) + 3)|0;
    $462 = ($459>>>0)>($461>>>0);
    if ($462) {
     break;
    }
    $463 = ($459|0)==(0);
    $464 = (+($459>>>0));
    $465 = $464 * 1.5;
    $466 = (~~(($465))>>>0);
    $467 = $463 ? 1024 : $466;
    HEAP32[$402>>2] = $467;
    $468 = HEAP32[$403>>2]|0;
    $469 = (_realloc($468,$467)|0);
    HEAP32[$403>>2] = $469;
   }
   $470 = HEAP32[$403>>2]|0;
   $471 = (($470) + ($460)|0);
   ;HEAP8[$471>>0]=HEAP8[$aux$0$i36>>0]|0;HEAP8[$471+1>>0]=HEAP8[$aux$0$i36+1>>0]|0;HEAP8[$471+2>>0]=HEAP8[$aux$0$i36+2>>0]|0;
   $472 = HEAP32[$349>>2]|0;
   $473 = (($472) + 3)|0;
   HEAP32[$349>>2] = $473;
   $474 = HEAP8[$aux$0$i36>>0]|0;
   $475 = $474 << 24 >> 24;
   $476 = $475 << 16;
   $477 = ((($aux$0$i36)) + 1|0);
   $478 = HEAP8[$477>>0]|0;
   $479 = $478 << 24 >> 24;
   $480 = $479 << 8;
   $481 = $476 | $480;
   $482 = ((($aux$0$i36)) + 2|0);
   $483 = HEAP8[$482>>0]|0;
   $484 = $483 << 24 >> 24;
   $485 = $481 | $484;
   $486 = HEAP32[$404>>2]|0;
   _kh_put_s_i2i($486,$485,$r$i29);
   $487 = HEAP32[$r$i29>>2]|0;
   $488 = ($487|0)==(-1);
   if ($488) {
    $$0$i44 = 0;
    break;
   }
   $489 = HEAP8[$aux$0$i36>>0]|0;
   $490 = ($489<<24>>24)==(66);
   L106: do {
    if ($490) {
     $491 = HEAP8[$477>>0]|0;
     switch ($491<<24>>24) {
     case 81:  {
      $492 = HEAP8[$482>>0]|0;
      $493 = ($492<<24>>24)==(90);
      if (!($493)) {
       label = 151;
       break L106;
      }
      $494 = HEAP32[$405>>2]|0;
      $495 = ($494|0)==(0|0);
      if ($495) {
       $496 = (_malloc(48)|0);
       $497 = ($496|0)==(0|0);
       if ($497) {
        label = 88;
        break L74;
       }
       $498 = ((($496)) + 4|0);
       HEAP32[$498>>2] = 0;
       HEAP32[$496>>2] = 0;
       $499 = ((($496)) + 8|0);
       HEAP32[$499>>2] = 4;
       $500 = ((($496)) + 12|0);
       HEAP32[$500>>2] = 3;
       $501 = ((($496)) + 16|0);
       HEAP32[$501>>2] = 0;
       $502 = ((($496)) + 20|0);
       HEAP32[$502>>2] = 0;
       $503 = ((($496)) + 32|0);
       HEAP32[$503>>2] = 0;
       $504 = ((($496)) + 36|0);
       HEAP32[$504>>2] = 0;
       $505 = ((($496)) + 40|0);
       HEAP32[$505>>2] = 0;
       $506 = ((($496)) + 44|0);
       HEAP32[$506>>2] = 7;
       HEAP32[$405>>2] = $496;
       $508 = $496;
      } else {
       $508 = $494;
      }
      while(1) {
       $507 = ((($508)) + 36|0);
       $509 = HEAP32[$507>>2]|0;
       $510 = (+($509>>>0));
       $511 = ((($508)) + 40|0);
       $512 = HEAP32[$511>>2]|0;
       $513 = (+($512>>>0));
       $514 = $513 + $354;
       $515 = !($510 <= $514);
       if ($515) {
        break;
       }
       $516 = ($509|0)==(0);
       $517 = $510 * 1.5;
       $518 = (~~(($517))>>>0);
       $519 = $516 ? 1024 : $518;
       HEAP32[$507>>2] = $519;
       $520 = HEAP32[$405>>2]|0;
       $521 = ((($520)) + 32|0);
       $522 = HEAP32[$521>>2]|0;
       $523 = ((($520)) + 36|0);
       $524 = HEAP32[$523>>2]|0;
       $525 = (_realloc($522,$524)|0);
       $526 = HEAP32[$405>>2]|0;
       $527 = ((($526)) + 32|0);
       HEAP32[$527>>2] = $525;
       $$pre212 = HEAP32[$405>>2]|0;
       $508 = $$pre212;
      }
      $528 = ((($508)) + 32|0);
      $529 = HEAP32[$528>>2]|0;
      $530 = (($529) + ($512)|0);
      $531 = ((($aux$0$i36)) + 3|0);
      $aux$4$i40 = $531;$tmp1$0$i = $530;
      while(1) {
       $532 = ((($aux$4$i40)) + 1|0);
       $533 = HEAP8[$aux$4$i40>>0]|0;
       $534 = ((($tmp1$0$i)) + 1|0);
       HEAP8[$tmp1$0$i>>0] = $533;
       $535 = ($533<<24>>24)==(0);
       if ($535) {
        break;
       } else {
        $aux$4$i40 = $532;$tmp1$0$i = $534;
       }
      }
      $536 = ((($tmp1$0$i)) + 2|0);
      HEAP8[$534>>0] = 9;
      $537 = HEAP32[$405>>2]|0;
      $538 = ((($537)) + 32|0);
      $539 = HEAP32[$538>>2]|0;
      $540 = $536;
      $541 = (($540) - ($539))|0;
      $542 = ((($537)) + 40|0);
      HEAP32[$542>>2] = $541;
      $tmp$0$i35$phi = $tmp$0$i35;$rg$0$i34$phi = $rg$0$i34;$aux$0$i36 = $532;$tmp$0$i35 = $tmp$0$i35$phi;$rg$0$i34 = $rg$0$i34$phi;
      continue L74;
      break;
     }
     case 68:  {
      $543 = HEAP8[$482>>0]|0;
      $544 = ($543<<24>>24)==(90);
      if (!($544)) {
       label = 151;
       break L106;
      }
      $545 = HEAP32[$406>>2]|0;
      $546 = ($545|0)==(0|0);
      if ($546) {
       $547 = (_malloc(48)|0);
       $548 = ($547|0)==(0|0);
       if ($548) {
        label = 98;
        break L74;
       }
       $549 = ((($547)) + 4|0);
       HEAP32[$549>>2] = 0;
       HEAP32[$547>>2] = 0;
       $550 = ((($547)) + 8|0);
       HEAP32[$550>>2] = 4;
       $551 = ((($547)) + 12|0);
       HEAP32[$551>>2] = 4;
       $552 = ((($547)) + 16|0);
       HEAP32[$552>>2] = 0;
       $553 = ((($547)) + 20|0);
       HEAP32[$553>>2] = 0;
       $554 = ((($547)) + 32|0);
       HEAP32[$554>>2] = 0;
       $555 = ((($547)) + 36|0);
       HEAP32[$555>>2] = 0;
       $556 = ((($547)) + 40|0);
       HEAP32[$556>>2] = 0;
       $557 = ((($547)) + 44|0);
       HEAP32[$557>>2] = 7;
       HEAP32[$406>>2] = $547;
       $559 = $547;
      } else {
       $559 = $545;
      }
      while(1) {
       $558 = ((($559)) + 36|0);
       $560 = HEAP32[$558>>2]|0;
       $561 = (+($560>>>0));
       $562 = ((($559)) + 40|0);
       $563 = HEAP32[$562>>2]|0;
       $564 = (+($563>>>0));
       $565 = $564 + $354;
       $566 = !($561 <= $565);
       if ($566) {
        break;
       }
       $567 = ($560|0)==(0);
       $568 = $561 * 1.5;
       $569 = (~~(($568))>>>0);
       $570 = $567 ? 1024 : $569;
       HEAP32[$558>>2] = $570;
       $571 = HEAP32[$406>>2]|0;
       $572 = ((($571)) + 32|0);
       $573 = HEAP32[$572>>2]|0;
       $574 = ((($571)) + 36|0);
       $575 = HEAP32[$574>>2]|0;
       $576 = (_realloc($573,$575)|0);
       $577 = HEAP32[$406>>2]|0;
       $578 = ((($577)) + 32|0);
       HEAP32[$578>>2] = $576;
       $$pre211 = HEAP32[$406>>2]|0;
       $559 = $$pre211;
      }
      $579 = ((($559)) + 32|0);
      $580 = HEAP32[$579>>2]|0;
      $581 = (($580) + ($563)|0);
      $582 = ((($aux$0$i36)) + 3|0);
      $aux$5$i41 = $582;$tmp2$0$i = $581;
      while(1) {
       $583 = ((($aux$5$i41)) + 1|0);
       $584 = HEAP8[$aux$5$i41>>0]|0;
       $585 = ((($tmp2$0$i)) + 1|0);
       HEAP8[$tmp2$0$i>>0] = $584;
       $586 = ($584<<24>>24)==(0);
       if ($586) {
        break;
       } else {
        $aux$5$i41 = $583;$tmp2$0$i = $585;
       }
      }
      $587 = ((($tmp2$0$i)) + 2|0);
      HEAP8[$585>>0] = 9;
      $588 = HEAP32[$406>>2]|0;
      $589 = ((($588)) + 32|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = $587;
      $592 = (($591) - ($590))|0;
      $593 = ((($588)) + 40|0);
      HEAP32[$593>>2] = $592;
      $tmp$0$i35$phi = $tmp$0$i35;$rg$0$i34$phi = $rg$0$i34;$aux$0$i36 = $583;$tmp$0$i35 = $tmp$0$i35$phi;$rg$0$i34 = $rg$0$i34$phi;
      continue L74;
      break;
     }
     case 73:  {
      $594 = HEAP8[$482>>0]|0;
      $595 = ($594<<24>>24)==(90);
      if (!($595)) {
       label = 151;
       break L106;
      }
      $596 = HEAP32[$407>>2]|0;
      $597 = ($596|0)==(0|0);
      if ($597) {
       $598 = (_malloc(48)|0);
       $599 = ($598|0)==(0|0);
       if ($599) {
        label = 108;
        break L74;
       }
       $600 = ((($598)) + 4|0);
       HEAP32[$600>>2] = 0;
       HEAP32[$598>>2] = 0;
       $601 = ((($598)) + 8|0);
       HEAP32[$601>>2] = 4;
       $602 = ((($598)) + 12|0);
       HEAP32[$602>>2] = 5;
       $603 = ((($598)) + 16|0);
       HEAP32[$603>>2] = 0;
       $604 = ((($598)) + 20|0);
       HEAP32[$604>>2] = 0;
       $605 = ((($598)) + 32|0);
       HEAP32[$605>>2] = 0;
       $606 = ((($598)) + 36|0);
       HEAP32[$606>>2] = 0;
       $607 = ((($598)) + 40|0);
       HEAP32[$607>>2] = 0;
       $608 = ((($598)) + 44|0);
       HEAP32[$608>>2] = 7;
       HEAP32[$407>>2] = $598;
       $610 = $598;
      } else {
       $610 = $596;
      }
      while(1) {
       $609 = ((($610)) + 36|0);
       $611 = HEAP32[$609>>2]|0;
       $612 = (+($611>>>0));
       $613 = ((($610)) + 40|0);
       $614 = HEAP32[$613>>2]|0;
       $615 = (+($614>>>0));
       $616 = $615 + $354;
       $617 = !($612 <= $616);
       if ($617) {
        break;
       }
       $618 = ($611|0)==(0);
       $619 = $612 * 1.5;
       $620 = (~~(($619))>>>0);
       $621 = $618 ? 1024 : $620;
       HEAP32[$609>>2] = $621;
       $622 = HEAP32[$407>>2]|0;
       $623 = ((($622)) + 32|0);
       $624 = HEAP32[$623>>2]|0;
       $625 = ((($622)) + 36|0);
       $626 = HEAP32[$625>>2]|0;
       $627 = (_realloc($624,$626)|0);
       $628 = HEAP32[$407>>2]|0;
       $629 = ((($628)) + 32|0);
       HEAP32[$629>>2] = $627;
       $$pre210 = HEAP32[$407>>2]|0;
       $610 = $$pre210;
      }
      $630 = ((($610)) + 32|0);
      $631 = HEAP32[$630>>2]|0;
      $632 = (($631) + ($614)|0);
      $633 = ((($aux$0$i36)) + 3|0);
      $aux$6$i = $633;$tmp3$0$i = $632;
      while(1) {
       $634 = ((($aux$6$i)) + 1|0);
       $635 = HEAP8[$aux$6$i>>0]|0;
       $636 = ((($tmp3$0$i)) + 1|0);
       HEAP8[$tmp3$0$i>>0] = $635;
       $637 = ($635<<24>>24)==(0);
       if ($637) {
        break;
       } else {
        $aux$6$i = $634;$tmp3$0$i = $636;
       }
      }
      $638 = ((($tmp3$0$i)) + 2|0);
      HEAP8[$636>>0] = 9;
      $639 = HEAP32[$407>>2]|0;
      $640 = ((($639)) + 32|0);
      $641 = HEAP32[$640>>2]|0;
      $642 = $638;
      $643 = (($642) - ($641))|0;
      $644 = ((($639)) + 40|0);
      HEAP32[$644>>2] = $643;
      $tmp$0$i35$phi = $tmp$0$i35;$rg$0$i34$phi = $rg$0$i34;$aux$0$i36 = $634;$tmp$0$i35 = $tmp$0$i35$phi;$rg$0$i34 = $rg$0$i34$phi;
      continue L74;
      break;
     }
     default: {
      label = 151;
      break L106;
     }
     }
    } else {
     switch ($489<<24>>24) {
     case 79:  {
      $645 = HEAP8[$477>>0]|0;
      $646 = ($645<<24>>24)==(81);
      if (!($646)) {
       label = 151;
       break L106;
      }
      $647 = HEAP8[$482>>0]|0;
      $648 = ($647<<24>>24)==(90);
      if (!($648)) {
       label = 151;
       break L106;
      }
      $649 = HEAP32[$408>>2]|0;
      $650 = ($649|0)==(0|0);
      if ($650) {
       $651 = (_malloc(48)|0);
       $652 = ($651|0)==(0|0);
       if ($652) {
        label = 120;
        break L74;
       }
       $653 = ((($651)) + 4|0);
       HEAP32[$653>>2] = 0;
       HEAP32[$651>>2] = 0;
       $654 = ((($651)) + 8|0);
       HEAP32[$654>>2] = 4;
       $655 = ((($651)) + 12|0);
       HEAP32[$655>>2] = 2;
       $656 = ((($651)) + 16|0);
       HEAP32[$656>>2] = 0;
       $657 = ((($651)) + 20|0);
       HEAP32[$657>>2] = 0;
       $658 = ((($651)) + 32|0);
       HEAP32[$658>>2] = 0;
       $659 = ((($651)) + 36|0);
       HEAP32[$659>>2] = 0;
       $660 = ((($651)) + 40|0);
       HEAP32[$660>>2] = 0;
       $661 = ((($651)) + 44|0);
       HEAP32[$661>>2] = 7;
       HEAP32[$408>>2] = $651;
       $663 = $651;
      } else {
       $663 = $649;
      }
      while(1) {
       $662 = ((($663)) + 36|0);
       $664 = HEAP32[$662>>2]|0;
       $665 = (+($664>>>0));
       $666 = ((($663)) + 40|0);
       $667 = HEAP32[$666>>2]|0;
       $668 = (+($667>>>0));
       $669 = $668 + $354;
       $670 = !($665 <= $669);
       if ($670) {
        break;
       }
       $671 = ($664|0)==(0);
       $672 = $665 * 1.5;
       $673 = (~~(($672))>>>0);
       $674 = $671 ? 1024 : $673;
       HEAP32[$662>>2] = $674;
       $675 = HEAP32[$408>>2]|0;
       $676 = ((($675)) + 32|0);
       $677 = HEAP32[$676>>2]|0;
       $678 = ((($675)) + 36|0);
       $679 = HEAP32[$678>>2]|0;
       $680 = (_realloc($677,$679)|0);
       $681 = HEAP32[$408>>2]|0;
       $682 = ((($681)) + 32|0);
       HEAP32[$682>>2] = $680;
       $$pre209 = HEAP32[$408>>2]|0;
       $663 = $$pre209;
      }
      $683 = ((($663)) + 32|0);
      $684 = HEAP32[$683>>2]|0;
      $685 = (($684) + ($667)|0);
      $686 = ((($aux$0$i36)) + 3|0);
      $aux$7$i = $686;$tmp4$0$i = $685;
      while(1) {
       $687 = ((($aux$7$i)) + 1|0);
       $688 = HEAP8[$aux$7$i>>0]|0;
       $689 = ((($tmp4$0$i)) + 1|0);
       HEAP8[$tmp4$0$i>>0] = $688;
       $690 = ($688<<24>>24)==(0);
       if ($690) {
        break;
       } else {
        $aux$7$i = $687;$tmp4$0$i = $689;
       }
      }
      $691 = ((($tmp4$0$i)) + 2|0);
      HEAP8[$689>>0] = 9;
      $692 = HEAP32[$408>>2]|0;
      $693 = ((($692)) + 32|0);
      $694 = HEAP32[$693>>2]|0;
      $695 = $691;
      $696 = (($695) - ($694))|0;
      $697 = ((($692)) + 40|0);
      HEAP32[$697>>2] = $696;
      $tmp$0$i35$phi = $tmp$0$i35;$rg$0$i34$phi = $rg$0$i34;$aux$0$i36 = $687;$tmp$0$i35 = $tmp$0$i35$phi;$rg$0$i34 = $rg$0$i34$phi;
      continue L74;
      break;
     }
     case 70:  {
      $698 = HEAP8[$477>>0]|0;
      $699 = ($698<<24>>24)==(90);
      if (!($699)) {
       label = 151;
       break L106;
      }
      $700 = HEAP8[$482>>0]|0;
      $701 = ($700<<24>>24)==(66);
      if (!($701)) {
       label = 151;
       break L106;
      }
      break;
     }
     case 90:  {
      $702 = HEAP8[$477>>0]|0;
      $703 = ($702<<24>>24)==(77);
      if (!($703)) {
       label = 151;
       break L106;
      }
      $704 = HEAP8[$482>>0]|0;
      $705 = ($704<<24>>24)==(66);
      if (!($705)) {
       label = 151;
       break L106;
      }
      break;
     }
     default: {
      $822 = ($489<<24>>24)==(81);
      if (!($822)) {
       $2253 = $822;
       label = 154;
       break L106;
      }
      $823 = HEAP8[$477>>0]|0;
      $824 = ($823<<24>>24)==(50);
      if ($824) {
       label = 162;
       break L106;
      } else {
       $829 = $823;
       label = 158;
       break L106;
      }
     }
     }
     $706 = ((($aux$0$i36)) + 3|0);
     $707 = HEAP8[$706>>0]|0;
     $708 = $707 << 24 >> 24;
     $709 = ((($aux$0$i36)) + 4|0);
     $710 = HEAP8[$709>>0]|0;
     $711 = $710&255;
     $712 = ((($aux$0$i36)) + 5|0);
     $713 = HEAP8[$712>>0]|0;
     $714 = $713&255;
     $715 = $714 << 8;
     $716 = $711 | $715;
     $717 = ((($aux$0$i36)) + 6|0);
     $718 = HEAP8[$717>>0]|0;
     $719 = $718&255;
     $720 = $719 << 16;
     $721 = $716 | $720;
     $722 = ((($aux$0$i36)) + 7|0);
     $723 = HEAP8[$722>>0]|0;
     $724 = $723&255;
     $725 = $724 << 24;
     $726 = $721 | $725;
     $727 = HEAP32[$409>>2]|0;
     $728 = ($727|0)==(0|0);
     if ($728) {
      $729 = (_malloc(48)|0);
      $730 = ($729|0)==(0|0);
      if ($730) {
       label = 133;
       break L74;
      }
      $731 = ((($729)) + 4|0);
      HEAP32[$731>>2] = 0;
      HEAP32[$729>>2] = 0;
      $732 = ((($729)) + 8|0);
      HEAP32[$732>>2] = 4;
      $733 = ((($729)) + 12|0);
      HEAP32[$733>>2] = 6;
      $734 = ((($729)) + 16|0);
      HEAP32[$734>>2] = 0;
      $735 = ((($729)) + 20|0);
      HEAP32[$735>>2] = 0;
      $736 = ((($729)) + 32|0);
      HEAP32[$736>>2] = 0;
      $737 = ((($729)) + 36|0);
      HEAP32[$737>>2] = 0;
      $738 = ((($729)) + 40|0);
      HEAP32[$738>>2] = 0;
      $739 = ((($729)) + 44|0);
      HEAP32[$739>>2] = 7;
      HEAP32[$409>>2] = $729;
      $741 = $729;
     } else {
      $741 = $727;
     }
     while(1) {
      $740 = ((($741)) + 36|0);
      $742 = HEAP32[$740>>2]|0;
      $743 = (+($742>>>0));
      $744 = ((($741)) + 40|0);
      $745 = HEAP32[$744>>2]|0;
      $746 = (+($745>>>0));
      $747 = $746 + $354;
      $748 = !($743 <= $747);
      if ($748) {
       break;
      }
      $749 = ($742|0)==(0);
      $750 = $743 * 1.5;
      $751 = (~~(($750))>>>0);
      $752 = $749 ? 1024 : $751;
      HEAP32[$740>>2] = $752;
      $753 = HEAP32[$409>>2]|0;
      $754 = ((($753)) + 32|0);
      $755 = HEAP32[$754>>2]|0;
      $756 = ((($753)) + 36|0);
      $757 = HEAP32[$756>>2]|0;
      $758 = (_realloc($755,$757)|0);
      $759 = HEAP32[$409>>2]|0;
      $760 = ((($759)) + 32|0);
      HEAP32[$760>>2] = $758;
      $$pre208 = HEAP32[$409>>2]|0;
      $741 = $$pre208;
     }
     $761 = ((($741)) + 32|0);
     $762 = HEAP32[$761>>2]|0;
     $763 = (($762) + ($745)|0);
     switch ($708|0) {
     case 67: case 99:  {
      $blen$0$i42 = $726;
      break;
     }
     case 83: case 115:  {
      $764 = $726 << 1;
      $blen$0$i42 = $764;
      break;
     }
     case 102: case 73: case 105:  {
      $765 = $726 << 2;
      $blen$0$i42 = $765;
      break;
     }
     default: {
      label = 140;
      break L74;
     }
     }
     $766 = (($blen$0$i42) + 5)|0;
     $767 = ($766>>>0)>(127);
     do {
      if ($767) {
       $769 = ($766>>>0)>(16383);
       if (!($769)) {
        $770 = $766 >>> 8;
        $771 = $770 | 128;
        $772 = $771&255;
        HEAP8[$763>>0] = $772;
        $773 = $766&255;
        $774 = ((($763)) + 1|0);
        HEAP8[$774>>0] = $773;
        $812 = 2;
        break;
       }
       $775 = ($766>>>0)>(2097151);
       if (!($775)) {
        $776 = $766 >>> 16;
        $777 = $776 | 192;
        $778 = $777&255;
        HEAP8[$763>>0] = $778;
        $779 = $766 >>> 8;
        $780 = $779&255;
        $781 = ((($763)) + 1|0);
        HEAP8[$781>>0] = $780;
        $782 = $766&255;
        $783 = ((($763)) + 2|0);
        HEAP8[$783>>0] = $782;
        $812 = 3;
        break;
       }
       $784 = ($766>>>0)>(268435455);
       if ($784) {
        $796 = $766 >>> 28;
        $797 = $796 | 240;
        $798 = $797&255;
        HEAP8[$763>>0] = $798;
        $799 = $766 >>> 20;
        $800 = $799&255;
        $801 = ((($763)) + 1|0);
        HEAP8[$801>>0] = $800;
        $802 = $766 >>> 12;
        $803 = $802&255;
        $804 = ((($763)) + 2|0);
        HEAP8[$804>>0] = $803;
        $805 = $766 >>> 4;
        $806 = $805&255;
        $807 = ((($763)) + 3|0);
        HEAP8[$807>>0] = $806;
        $808 = $766 & 15;
        $809 = $808&255;
        $810 = ((($763)) + 4|0);
        HEAP8[$810>>0] = $809;
        $812 = 5;
        break;
       } else {
        $785 = $766 >>> 24;
        $786 = $785 | 224;
        $787 = $786&255;
        HEAP8[$763>>0] = $787;
        $788 = $766 >>> 16;
        $789 = $788&255;
        $790 = ((($763)) + 1|0);
        HEAP8[$790>>0] = $789;
        $791 = $766 >>> 8;
        $792 = $791&255;
        $793 = ((($763)) + 2|0);
        HEAP8[$793>>0] = $792;
        $794 = $766&255;
        $795 = ((($763)) + 3|0);
        HEAP8[$795>>0] = $794;
        $812 = 4;
        break;
       }
      } else {
       $768 = $766&255;
       HEAP8[$763>>0] = $768;
       $812 = 1;
      }
     } while(0);
     $811 = (($763) + ($812)|0);
     _memcpy(($811|0),($706|0),($766|0))|0;
     $813 = (($811) + ($766)|0);
     $814 = (($706) + ($766)|0);
     $815 = HEAP32[$409>>2]|0;
     $816 = ((($815)) + 32|0);
     $817 = HEAP32[$816>>2]|0;
     $818 = $813;
     $819 = (($818) - ($817))|0;
     $820 = ((($815)) + 40|0);
     HEAP32[$820>>2] = $819;
     $tmp$0$i35$phi = $tmp$0$i35;$rg$0$i34$phi = $rg$0$i34;$aux$0$i36 = $814;$tmp$0$i35 = $tmp$0$i35$phi;$rg$0$i34 = $rg$0$i34$phi;
     continue L74;
    }
   } while(0);
   if ((label|0) == 151) {
    label = 0;
    $821 = ($489<<24>>24)==(81);
    $2253 = $821;
    label = 154;
   }
   do {
    if ((label|0) == 154) {
     label = 0;
     $825 = ($489<<24>>24)==(85);
     if ($825) {
      $826 = HEAP8[$477>>0]|0;
      $827 = ($826<<24>>24)==(50);
      if ($827) {
       label = 162;
       break;
      } else {
       $2254 = $2253;
      }
     } else {
      $2254 = $2253;
     }
     if ($2254) {
      $$pr422 = HEAP8[$477>>0]|0;
      $829 = $$pr422;
      label = 158;
     } else {
      label = 159;
     }
    }
   } while(0);
   if ((label|0) == 158) {
    label = 0;
    $828 = ($829<<24>>24)==(84);
    if ($828) {
     label = 162;
    } else {
     label = 159;
    }
   }
   if ((label|0) == 159) {
    label = 0;
    $830 = ($489<<24>>24)==(67);
    if ($830) {
     $831 = HEAP8[$477>>0]|0;
     $832 = ($831<<24>>24)==(81);
     if ($832) {
      label = 162;
     } else {
      $833 = ($489<<24>>24)==(82);
      $2255 = $833;
      label = 176;
     }
    } else {
     label = 172;
    }
   }
   if ((label|0) == 162) {
    label = 0;
    $834 = HEAP8[$482>>0]|0;
    $835 = ($834<<24>>24)==(90);
    if ($835) {
     $836 = HEAP32[$410>>2]|0;
     $837 = ($836|0)==(0|0);
     if ($837) {
      $838 = (_malloc(48)|0);
      $839 = ($838|0)==(0|0);
      if ($839) {
       label = 165;
       break;
      }
      $840 = ((($838)) + 4|0);
      HEAP32[$840>>2] = 0;
      HEAP32[$838>>2] = 0;
      $841 = ((($838)) + 8|0);
      HEAP32[$841>>2] = 4;
      $842 = ((($838)) + 12|0);
      HEAP32[$842>>2] = 7;
      $843 = ((($838)) + 16|0);
      HEAP32[$843>>2] = 0;
      $844 = ((($838)) + 20|0);
      HEAP32[$844>>2] = 0;
      $845 = ((($838)) + 32|0);
      HEAP32[$845>>2] = 0;
      $846 = ((($838)) + 36|0);
      HEAP32[$846>>2] = 0;
      $847 = ((($838)) + 40|0);
      HEAP32[$847>>2] = 0;
      $848 = ((($838)) + 44|0);
      HEAP32[$848>>2] = 7;
      HEAP32[$410>>2] = $838;
      $850 = $838;
     } else {
      $850 = $836;
     }
     while(1) {
      $849 = ((($850)) + 36|0);
      $851 = HEAP32[$849>>2]|0;
      $852 = (+($851>>>0));
      $853 = ((($850)) + 40|0);
      $854 = HEAP32[$853>>2]|0;
      $855 = (+($854>>>0));
      $856 = $855 + $354;
      $857 = !($852 <= $856);
      if ($857) {
       break;
      }
      $858 = ($851|0)==(0);
      $859 = $852 * 1.5;
      $860 = (~~(($859))>>>0);
      $861 = $858 ? 1024 : $860;
      HEAP32[$849>>2] = $861;
      $862 = HEAP32[$410>>2]|0;
      $863 = ((($862)) + 32|0);
      $864 = HEAP32[$863>>2]|0;
      $865 = ((($862)) + 36|0);
      $866 = HEAP32[$865>>2]|0;
      $867 = (_realloc($864,$866)|0);
      $868 = HEAP32[$410>>2]|0;
      $869 = ((($868)) + 32|0);
      HEAP32[$869>>2] = $867;
      $$pre207 = HEAP32[$410>>2]|0;
      $850 = $$pre207;
     }
     $870 = ((($850)) + 32|0);
     $871 = HEAP32[$870>>2]|0;
     $872 = (($871) + ($854)|0);
     $873 = ((($aux$0$i36)) + 3|0);
     $aux$8$i = $873;$tmp6$0$i = $872;
     while(1) {
      $874 = ((($aux$8$i)) + 1|0);
      $875 = HEAP8[$aux$8$i>>0]|0;
      $876 = ((($tmp6$0$i)) + 1|0);
      HEAP8[$tmp6$0$i>>0] = $875;
      $877 = ($875<<24>>24)==(0);
      if ($877) {
       break;
      } else {
       $aux$8$i = $874;$tmp6$0$i = $876;
      }
     }
     $878 = ((($tmp6$0$i)) + 2|0);
     HEAP8[$876>>0] = 9;
     $879 = HEAP32[$410>>2]|0;
     $880 = ((($879)) + 32|0);
     $881 = HEAP32[$880>>2]|0;
     $882 = $878;
     $883 = (($882) - ($881))|0;
     $884 = ((($879)) + 40|0);
     HEAP32[$884>>2] = $883;
     $tmp$0$i35$phi = $tmp$0$i35;$rg$0$i34$phi = $rg$0$i34;$aux$0$i36 = $874;$tmp$0$i35 = $tmp$0$i35$phi;$rg$0$i34 = $rg$0$i34$phi;
     continue;
    } else {
     label = 172;
    }
   }
   L218: do {
    if ((label|0) == 172) {
     label = 0;
     $885 = ($489<<24>>24)==(82);
     if ($885) {
      $886 = HEAP8[$477>>0]|0;
      $887 = ($886<<24>>24)==(50);
      if ($887) {
       label = 181;
       break;
      } else {
       $2257 = $885;
       label = 177;
       break;
      }
     } else {
      $2256 = $885;
     }
     switch ($489<<24>>24) {
     case 67:  {
      $2255 = $2256;
      label = 176;
      break L218;
      break;
     }
     case 69:  {
      break;
     }
     default: {
      $2257 = $2256;
      label = 177;
      break L218;
     }
     }
     $888 = HEAP8[$477>>0]|0;
     $889 = ($888<<24>>24)==(50);
     if ($889) {
      label = 181;
     } else {
      $2257 = $2256;
      label = 177;
     }
    }
   } while(0);
   if ((label|0) == 176) {
    label = 0;
    $890 = HEAP8[$477>>0]|0;
    $891 = ($890<<24>>24)==(83);
    if ($891) {
     label = 181;
    } else {
     $2257 = $2255;
     label = 177;
    }
   }
   do {
    if ((label|0) == 177) {
     label = 0;
     if ($490) {
      $892 = HEAP8[$477>>0]|0;
      $893 = ($892<<24>>24)==(67);
      if ($893) {
       label = 181;
       break;
      }
     }
     if ($2257) {
      $894 = HEAP8[$477>>0]|0;
      $895 = ($894<<24>>24)==(84);
      if ($895) {
       label = 181;
      }
     }
    }
   } while(0);
   if ((label|0) == 181) {
    label = 0;
    $896 = HEAP8[$482>>0]|0;
    $897 = ($896<<24>>24)==(90);
    if ($897) {
     $898 = HEAP32[$411>>2]|0;
     $899 = ($898|0)==(0|0);
     if ($899) {
      $900 = (_malloc(48)|0);
      $901 = ($900|0)==(0|0);
      if ($901) {
       label = 184;
       break;
      }
      $902 = ((($900)) + 4|0);
      HEAP32[$902>>2] = 0;
      HEAP32[$900>>2] = 0;
      $903 = ((($900)) + 8|0);
      HEAP32[$903>>2] = 4;
      $904 = ((($900)) + 12|0);
      HEAP32[$904>>2] = 8;
      $905 = ((($900)) + 16|0);
      HEAP32[$905>>2] = 0;
      $906 = ((($900)) + 20|0);
      HEAP32[$906>>2] = 0;
      $907 = ((($900)) + 32|0);
      HEAP32[$907>>2] = 0;
      $908 = ((($900)) + 36|0);
      HEAP32[$908>>2] = 0;
      $909 = ((($900)) + 40|0);
      HEAP32[$909>>2] = 0;
      $910 = ((($900)) + 44|0);
      HEAP32[$910>>2] = 7;
      HEAP32[$411>>2] = $900;
      $912 = $900;
     } else {
      $912 = $898;
     }
     while(1) {
      $911 = ((($912)) + 36|0);
      $913 = HEAP32[$911>>2]|0;
      $914 = (+($913>>>0));
      $915 = ((($912)) + 40|0);
      $916 = HEAP32[$915>>2]|0;
      $917 = (+($916>>>0));
      $918 = $917 + $354;
      $919 = !($914 <= $918);
      if ($919) {
       break;
      }
      $920 = ($913|0)==(0);
      $921 = $914 * 1.5;
      $922 = (~~(($921))>>>0);
      $923 = $920 ? 1024 : $922;
      HEAP32[$911>>2] = $923;
      $924 = HEAP32[$411>>2]|0;
      $925 = ((($924)) + 32|0);
      $926 = HEAP32[$925>>2]|0;
      $927 = ((($924)) + 36|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (_realloc($926,$928)|0);
      $930 = HEAP32[$411>>2]|0;
      $931 = ((($930)) + 32|0);
      HEAP32[$931>>2] = $929;
      $$pre206 = HEAP32[$411>>2]|0;
      $912 = $$pre206;
     }
     $932 = ((($912)) + 32|0);
     $933 = HEAP32[$932>>2]|0;
     $934 = (($933) + ($916)|0);
     $935 = ((($aux$0$i36)) + 3|0);
     $aux$9$i = $935;$tmp7$0$i = $934;
     while(1) {
      $936 = ((($aux$9$i)) + 1|0);
      $937 = HEAP8[$aux$9$i>>0]|0;
      $938 = ((($tmp7$0$i)) + 1|0);
      HEAP8[$tmp7$0$i>>0] = $937;
      $939 = ($937<<24>>24)==(0);
      if ($939) {
       break;
      } else {
       $aux$9$i = $936;$tmp7$0$i = $938;
      }
     }
     $940 = ((($tmp7$0$i)) + 2|0);
     HEAP8[$938>>0] = 9;
     $941 = HEAP32[$411>>2]|0;
     $942 = ((($941)) + 32|0);
     $943 = HEAP32[$942>>2]|0;
     $944 = $940;
     $945 = (($944) - ($943))|0;
     $946 = ((($941)) + 40|0);
     HEAP32[$946>>2] = $945;
     $tmp$0$i35$phi = $tmp$0$i35;$rg$0$i34$phi = $rg$0$i34;$aux$0$i36 = $936;$tmp$0$i35 = $tmp$0$i35$phi;$rg$0$i34 = $rg$0$i34$phi;
     continue;
    }
   }
   $947 = HEAP8[$482>>0]|0;
   $948 = $947 << 24 >> 24;
   switch ($948|0) {
   case 99: case 67: case 65:  {
    $949 = ((($aux$0$i36)) + 3|0);
    $950 = ((($aux$0$i36)) + 4|0);
    $951 = HEAP8[$949>>0]|0;
    $952 = ((($tmp$0$i35)) + 1|0);
    HEAP8[$tmp$0$i35>>0] = $951;
    $rg$0$i34$phi = $rg$0$i34;$aux$0$i36 = $950;$tmp$0$i35 = $952;$rg$0$i34 = $rg$0$i34$phi;
    continue L74;
    break;
   }
   case 115: case 83:  {
    $953 = ((($aux$0$i36)) + 3|0);
    $954 = ((($aux$0$i36)) + 4|0);
    $955 = HEAP8[$953>>0]|0;
    $956 = ((($tmp$0$i35)) + 1|0);
    HEAP8[$tmp$0$i35>>0] = $955;
    $957 = ((($aux$0$i36)) + 5|0);
    $958 = HEAP8[$954>>0]|0;
    $959 = ((($tmp$0$i35)) + 2|0);
    HEAP8[$956>>0] = $958;
    $rg$0$i34$phi = $rg$0$i34;$aux$0$i36 = $957;$tmp$0$i35 = $959;$rg$0$i34 = $rg$0$i34$phi;
    continue L74;
    break;
   }
   case 102: case 105: case 73:  {
    $960 = ((($aux$0$i36)) + 3|0);
    $961 = ((($aux$0$i36)) + 4|0);
    $962 = HEAP8[$960>>0]|0;
    $963 = ((($tmp$0$i35)) + 1|0);
    HEAP8[$tmp$0$i35>>0] = $962;
    $964 = ((($aux$0$i36)) + 5|0);
    $965 = HEAP8[$961>>0]|0;
    $966 = ((($tmp$0$i35)) + 2|0);
    HEAP8[$963>>0] = $965;
    $967 = ((($aux$0$i36)) + 6|0);
    $968 = HEAP8[$964>>0]|0;
    $969 = ((($tmp$0$i35)) + 3|0);
    HEAP8[$966>>0] = $968;
    $970 = ((($aux$0$i36)) + 7|0);
    $971 = HEAP8[$967>>0]|0;
    $972 = ((($tmp$0$i35)) + 4|0);
    HEAP8[$969>>0] = $971;
    $rg$0$i34$phi = $rg$0$i34;$aux$0$i36 = $970;$tmp$0$i35 = $972;$rg$0$i34 = $rg$0$i34$phi;
    continue L74;
    break;
   }
   case 100:  {
    $973 = ((($aux$0$i36)) + 3|0);
    $974 = ((($aux$0$i36)) + 4|0);
    $975 = HEAP8[$973>>0]|0;
    $976 = ((($tmp$0$i35)) + 1|0);
    HEAP8[$tmp$0$i35>>0] = $975;
    $977 = ((($aux$0$i36)) + 5|0);
    $978 = HEAP8[$974>>0]|0;
    $979 = ((($tmp$0$i35)) + 2|0);
    HEAP8[$976>>0] = $978;
    $980 = ((($aux$0$i36)) + 6|0);
    $981 = HEAP8[$977>>0]|0;
    $982 = ((($tmp$0$i35)) + 3|0);
    HEAP8[$979>>0] = $981;
    $983 = ((($aux$0$i36)) + 7|0);
    $984 = HEAP8[$980>>0]|0;
    $985 = ((($tmp$0$i35)) + 4|0);
    HEAP8[$982>>0] = $984;
    $986 = ((($aux$0$i36)) + 8|0);
    $987 = HEAP8[$983>>0]|0;
    $988 = ((($tmp$0$i35)) + 5|0);
    HEAP8[$985>>0] = $987;
    $989 = ((($aux$0$i36)) + 9|0);
    $990 = HEAP8[$986>>0]|0;
    $991 = ((($tmp$0$i35)) + 6|0);
    HEAP8[$988>>0] = $990;
    $992 = ((($aux$0$i36)) + 10|0);
    $993 = HEAP8[$989>>0]|0;
    $994 = ((($tmp$0$i35)) + 7|0);
    HEAP8[$991>>0] = $993;
    $995 = ((($aux$0$i36)) + 11|0);
    $996 = HEAP8[$992>>0]|0;
    $997 = ((($tmp$0$i35)) + 8|0);
    HEAP8[$994>>0] = $996;
    $rg$0$i34$phi = $rg$0$i34;$aux$0$i36 = $995;$tmp$0$i35 = $997;$rg$0$i34 = $rg$0$i34$phi;
    continue L74;
    break;
   }
   case 72: case 90:  {
    $998 = HEAP32[$412>>2]|0;
    $999 = ($998|0)==(0|0);
    if ($999) {
     $1000 = (_malloc(48)|0);
     $1001 = ($1000|0)==(0|0);
     if ($1001) {
      label = 198;
      break L74;
     }
     $1002 = ((($1000)) + 4|0);
     HEAP32[$1002>>2] = 0;
     HEAP32[$1000>>2] = 0;
     $1003 = ((($1000)) + 8|0);
     HEAP32[$1003>>2] = 4;
     $1004 = ((($1000)) + 12|0);
     HEAP32[$1004>>2] = 9;
     $1005 = ((($1000)) + 16|0);
     HEAP32[$1005>>2] = 0;
     $1006 = ((($1000)) + 20|0);
     HEAP32[$1006>>2] = 0;
     $1007 = ((($1000)) + 32|0);
     HEAP32[$1007>>2] = 0;
     $1008 = ((($1000)) + 36|0);
     HEAP32[$1008>>2] = 0;
     $1009 = ((($1000)) + 40|0);
     HEAP32[$1009>>2] = 0;
     $1010 = ((($1000)) + 44|0);
     HEAP32[$1010>>2] = 7;
     HEAP32[$412>>2] = $1000;
     $1012 = $1000;
    } else {
     $1012 = $998;
    }
    while(1) {
     $1011 = ((($1012)) + 36|0);
     $1013 = HEAP32[$1011>>2]|0;
     $1014 = (+($1013>>>0));
     $1015 = ((($1012)) + 40|0);
     $1016 = HEAP32[$1015>>2]|0;
     $1017 = (+($1016>>>0));
     $1018 = $1017 + $354;
     $1019 = !($1014 <= $1018);
     if ($1019) {
      break;
     }
     $1020 = ($1013|0)==(0);
     $1021 = $1014 * 1.5;
     $1022 = (~~(($1021))>>>0);
     $1023 = $1020 ? 1024 : $1022;
     HEAP32[$1011>>2] = $1023;
     $1024 = HEAP32[$412>>2]|0;
     $1025 = ((($1024)) + 32|0);
     $1026 = HEAP32[$1025>>2]|0;
     $1027 = ((($1024)) + 36|0);
     $1028 = HEAP32[$1027>>2]|0;
     $1029 = (_realloc($1026,$1028)|0);
     $1030 = HEAP32[$412>>2]|0;
     $1031 = ((($1030)) + 32|0);
     HEAP32[$1031>>2] = $1029;
     $$pre205 = HEAP32[$412>>2]|0;
     $1012 = $$pre205;
    }
    $1032 = ((($1012)) + 32|0);
    $1033 = HEAP32[$1032>>2]|0;
    $1034 = (($1033) + ($1016)|0);
    $1035 = ((($aux$0$i36)) + 3|0);
    $aux$10$i = $1035;$tmp8$0$i = $1034;
    while(1) {
     $1036 = ((($aux$10$i)) + 1|0);
     $1037 = HEAP8[$aux$10$i>>0]|0;
     $1038 = ((($tmp8$0$i)) + 1|0);
     HEAP8[$tmp8$0$i>>0] = $1037;
     $1039 = ($1037<<24>>24)==(0);
     if ($1039) {
      break;
     } else {
      $aux$10$i = $1036;$tmp8$0$i = $1038;
     }
    }
    $1040 = ((($tmp8$0$i)) + 2|0);
    HEAP8[$1038>>0] = 9;
    $1041 = HEAP32[$412>>2]|0;
    $1042 = ((($1041)) + 32|0);
    $1043 = HEAP32[$1042>>2]|0;
    $1044 = $1040;
    $1045 = (($1044) - ($1043))|0;
    $1046 = ((($1041)) + 40|0);
    HEAP32[$1046>>2] = $1045;
    $tmp$0$i35$phi = $tmp$0$i35;$rg$0$i34$phi = $rg$0$i34;$aux$0$i36 = $1036;$tmp$0$i35 = $tmp$0$i35$phi;$rg$0$i34 = $rg$0$i34$phi;
    continue L74;
    break;
   }
   case 66:  {
    $1047 = ((($aux$0$i36)) + 3|0);
    $1048 = HEAP8[$1047>>0]|0;
    $1049 = $1048 << 24 >> 24;
    $1050 = ((($aux$0$i36)) + 4|0);
    $1051 = HEAP8[$1050>>0]|0;
    $1052 = $1051&255;
    $1053 = ((($aux$0$i36)) + 5|0);
    $1054 = HEAP8[$1053>>0]|0;
    $1055 = $1054&255;
    $1056 = $1055 << 8;
    $1057 = $1052 | $1056;
    $1058 = ((($aux$0$i36)) + 6|0);
    $1059 = HEAP8[$1058>>0]|0;
    $1060 = $1059&255;
    $1061 = $1060 << 16;
    $1062 = $1057 | $1061;
    $1063 = ((($aux$0$i36)) + 7|0);
    $1064 = HEAP8[$1063>>0]|0;
    $1065 = $1064&255;
    $1066 = $1065 << 24;
    $1067 = $1062 | $1066;
    switch ($1049|0) {
    case 67: case 99:  {
     $blen10$0$i = $1067;
     break;
    }
    case 83: case 115:  {
     $1068 = $1067 << 1;
     $blen10$0$i = $1068;
     break;
    }
    case 102: case 73: case 105:  {
     $1069 = $1067 << 2;
     $blen10$0$i = $1069;
     break;
    }
    default: {
     label = 208;
     break L74;
    }
    }
    $1070 = (($blen10$0$i) + 5)|0;
    $1071 = ($1070>>>0)>(127);
    do {
     if ($1071) {
      $1073 = ($1070>>>0)>(16383);
      if (!($1073)) {
       $1074 = $1070 >>> 8;
       $1075 = $1074 | 128;
       $1076 = $1075&255;
       HEAP8[$tmp$0$i35>>0] = $1076;
       $1077 = $1070&255;
       $1078 = ((($tmp$0$i35)) + 1|0);
       HEAP8[$1078>>0] = $1077;
       $1116 = 2;
       break;
      }
      $1079 = ($1070>>>0)>(2097151);
      if (!($1079)) {
       $1080 = $1070 >>> 16;
       $1081 = $1080 | 192;
       $1082 = $1081&255;
       HEAP8[$tmp$0$i35>>0] = $1082;
       $1083 = $1070 >>> 8;
       $1084 = $1083&255;
       $1085 = ((($tmp$0$i35)) + 1|0);
       HEAP8[$1085>>0] = $1084;
       $1086 = $1070&255;
       $1087 = ((($tmp$0$i35)) + 2|0);
       HEAP8[$1087>>0] = $1086;
       $1116 = 3;
       break;
      }
      $1088 = ($1070>>>0)>(268435455);
      if ($1088) {
       $1100 = $1070 >>> 28;
       $1101 = $1100 | 240;
       $1102 = $1101&255;
       HEAP8[$tmp$0$i35>>0] = $1102;
       $1103 = $1070 >>> 20;
       $1104 = $1103&255;
       $1105 = ((($tmp$0$i35)) + 1|0);
       HEAP8[$1105>>0] = $1104;
       $1106 = $1070 >>> 12;
       $1107 = $1106&255;
       $1108 = ((($tmp$0$i35)) + 2|0);
       HEAP8[$1108>>0] = $1107;
       $1109 = $1070 >>> 4;
       $1110 = $1109&255;
       $1111 = ((($tmp$0$i35)) + 3|0);
       HEAP8[$1111>>0] = $1110;
       $1112 = $1070 & 15;
       $1113 = $1112&255;
       $1114 = ((($tmp$0$i35)) + 4|0);
       HEAP8[$1114>>0] = $1113;
       $1116 = 5;
       break;
      } else {
       $1089 = $1070 >>> 24;
       $1090 = $1089 | 224;
       $1091 = $1090&255;
       HEAP8[$tmp$0$i35>>0] = $1091;
       $1092 = $1070 >>> 16;
       $1093 = $1092&255;
       $1094 = ((($tmp$0$i35)) + 1|0);
       HEAP8[$1094>>0] = $1093;
       $1095 = $1070 >>> 8;
       $1096 = $1095&255;
       $1097 = ((($tmp$0$i35)) + 2|0);
       HEAP8[$1097>>0] = $1096;
       $1098 = $1070&255;
       $1099 = ((($tmp$0$i35)) + 3|0);
       HEAP8[$1099>>0] = $1098;
       $1116 = 4;
       break;
      }
     } else {
      $1072 = $1070&255;
      HEAP8[$tmp$0$i35>>0] = $1072;
      $1116 = 1;
     }
    } while(0);
    $1115 = (($tmp$0$i35) + ($1116)|0);
    _memcpy(($1115|0),($1047|0),($1070|0))|0;
    $1117 = (($1115) + ($1070)|0);
    $1118 = (($1047) + ($1070)|0);
    $rg$0$i34$phi = $rg$0$i34;$aux$0$i36 = $1118;$tmp$0$i35 = $1117;$rg$0$i34 = $rg$0$i34$phi;
    continue L74;
    break;
   }
   default: {
    label = 219;
    break L74;
   }
   }
  }
  switch (label|0) {
   case 79: {
    _fprintf(9772,18152,$vararg_buffer6);
    $$0$i44 = 0;
    break;
   }
   case 88: {
    HEAP32[$405>>2] = 0;
    $$0$i44 = 0;
    break;
   }
   case 98: {
    HEAP32[$406>>2] = 0;
    $$0$i44 = 0;
    break;
   }
   case 108: {
    HEAP32[$407>>2] = 0;
    $$0$i44 = 0;
    break;
   }
   case 120: {
    HEAP32[$408>>2] = 0;
    $$0$i44 = 0;
    break;
   }
   case 133: {
    HEAP32[$409>>2] = 0;
    $$0$i44 = 0;
    break;
   }
   case 140: {
    HEAP32[$vararg_buffer8>>2] = $708;
    _fprintf(9772,18184,$vararg_buffer8);
    $$0$i44 = 0;
    break;
   }
   case 165: {
    HEAP32[$410>>2] = 0;
    $$0$i44 = 0;
    break;
   }
   case 184: {
    HEAP32[$411>>2] = 0;
    $$0$i44 = 0;
    break;
   }
   case 198: {
    HEAP32[$412>>2] = 0;
    $$0$i44 = 0;
    break;
   }
   case 208: {
    HEAP32[$vararg_buffer11>>2] = $1049;
    _fprintf(9772,18184,$vararg_buffer11);
    $$0$i44 = 0;
    break;
   }
   case 219: {
    HEAP32[$vararg_buffer14>>2] = $948;
    _fprintf(9772,18224,$vararg_buffer14);
    $$0$i44 = 0;
    break;
   }
   case 220: {
    while(1) {
     label = 0;
     $1119 = HEAP32[$402>>2]|0;
     $1120 = HEAP32[$349>>2]|0;
     $1121 = (($1120) + 1)|0;
     $1122 = ($1119>>>0)>($1121>>>0);
     if ($1122) {
      break;
     }
     $1123 = ($1119|0)==(0);
     $1124 = (+($1119>>>0));
     $1125 = $1124 * 1.5;
     $1126 = (~~(($1125))>>>0);
     $1127 = $1123 ? 1024 : $1126;
     HEAP32[$402>>2] = $1127;
     $1128 = HEAP32[$403>>2]|0;
     $1129 = (_realloc($1128,$1127)|0);
     HEAP32[$403>>2] = $1129;
     label = 220;
    }
    HEAP32[$349>>2] = $1121;
    $1130 = HEAP32[$403>>2]|0;
    $1131 = (($1130) + ($1120)|0);
    HEAP8[$1131>>0] = 0;
    $1132 = HEAP32[$345>>2]|0;
    $1133 = ((($1132)) + 84|0);
    $1134 = HEAP32[$1133>>2]|0;
    $1135 = HEAP32[$403>>2]|0;
    $1136 = (($1135) + ($350)|0);
    $1137 = HEAP32[$349>>2]|0;
    $1138 = (($1137) - ($350))|0;
    $1139 = (_string_ndup($1134,$1136,$1138)|0);
    $1140 = HEAP32[$345>>2]|0;
    $1141 = ((($1140)) + 80|0);
    $1142 = HEAP32[$1141>>2]|0;
    $1143 = (_kh_put_m_s2i($1142,$1139,$new$i)|0);
    $1144 = HEAP32[$new$i>>2]|0;
    $1145 = ($1144|0)<(0);
    if ($1145) {
     $$0$i44 = 0;
    } else {
     $1146 = ($1144|0)==(0);
     if ($1146) {
      HEAP32[$349>>2] = $350;
     } else {
      $1147 = HEAP32[$345>>2]|0;
      $1148 = ((($1147)) + 72|0);
      $1149 = HEAP32[$1148>>2]|0;
      $1150 = ((($1147)) + 80|0);
      $1151 = HEAP32[$1150>>2]|0;
      $1152 = ((($1151)) + 24|0);
      $1153 = HEAP32[$1152>>2]|0;
      $1154 = (($1153) + ($1143<<2)|0);
      HEAP32[$1154>>2] = $1149;
      $1155 = HEAP32[$345>>2]|0;
      $1156 = ((($1155)) + 72|0);
      $1157 = HEAP32[$1156>>2]|0;
      $1158 = (($1157) + 1)|0;
      HEAP32[$1156>>2] = $1158;
     }
     $1159 = HEAP32[$345>>2]|0;
     $1160 = ((($1159)) + 80|0);
     $1161 = HEAP32[$1160>>2]|0;
     $1162 = ((($1161)) + 24|0);
     $1163 = HEAP32[$1162>>2]|0;
     $1164 = (($1163) + ($1143<<2)|0);
     $1165 = HEAP32[$1164>>2]|0;
     $1166 = ((($cr)) + 68|0);
     HEAP32[$1166>>2] = $1165;
     $1167 = ((($c)) + 280|0);
     $1168 = HEAP32[$1167>>2]|0;
     _cram_stats_add($1168,$1165);
     $1169 = HEAP32[$351>>2]|0;
     $1170 = ((($1169)) + 40|0);
     $1171 = HEAP32[$1170>>2]|0;
     $1172 = ((($cr)) + 56|0);
     HEAP32[$1172>>2] = $1171;
     $1173 = HEAP32[$351>>2]|0;
     $1174 = ((($1173)) + 32|0);
     $1175 = HEAP32[$1174>>2]|0;
     $1176 = (($1175) + ($1171)|0);
     $1177 = $tmp$0$i35;
     $1178 = $1176;
     $1179 = (($1177) - ($1178))|0;
     $1180 = ((($cr)) + 60|0);
     HEAP32[$1180>>2] = $1179;
     $1181 = HEAP32[$351>>2]|0;
     $1182 = ((($1181)) + 32|0);
     $1183 = HEAP32[$1182>>2]|0;
     $1184 = (($1177) - ($1183))|0;
     $1185 = ((($1181)) + 40|0);
     HEAP32[$1185>>2] = $1184;
     $1186 = HEAP32[$351>>2]|0;
     $1187 = ((($1186)) + 40|0);
     $1188 = HEAP32[$1187>>2]|0;
     $1189 = ((($1186)) + 36|0);
     $1190 = HEAP32[$1189>>2]|0;
     $1191 = ($1188>>>0)>($1190>>>0);
     if ($1191) {
      ___assert_fail((18247|0),(18000|0),2491,(18305|0));
      // unreachable;
     } else {
      $$0$i44 = $rg$0$i34;
     }
    }
    break;
   }
  }
  $rg$0 = $$0$i44;
 }
 $1192 = ($rg$0|0)==(0|0);
 do {
  if ($1192) {
   $1212 = HEAP32[$15>>2]|0;
   $$mask1 = $1212 & -256;
   $1213 = ($$mask1|0)==(256);
   if (!($1213)) {
    $1229 = ((($cr)) + 24|0);
    HEAP32[$1229>>2] = -1;
    $1232 = -1;
    break;
   }
   $1214 = ((($fd)) + 16|0);
   $1215 = HEAP32[$1214>>2]|0;
   $1216 = ((($1215)) + 48|0);
   $1217 = HEAP32[$1216>>2]|0;
   $1218 = (_kh_get_m_s2i($1217,18321)|0);
   $1219 = HEAP32[$1217>>2]|0;
   $1220 = ($1218|0)==($1219|0);
   if ($1220) {
    ___assert_fail((18329|0),(18000|0),2651,(18333|0));
    // unreachable;
   }
   $1221 = ((($1217)) + 24|0);
   $1222 = HEAP32[$1221>>2]|0;
   $1223 = (($1222) + ($1218<<2)|0);
   $1224 = HEAP32[$1223>>2]|0;
   $1225 = ((($1215)) + 44|0);
   $1226 = HEAP32[$1225>>2]|0;
   $1227 = (($1226) + (($1224*20)|0)|0);
   $1228 = ($1227|0)==(0|0);
   if ($1228) {
    ___assert_fail((18329|0),(18000|0),2651,(18333|0));
    // unreachable;
   } else {
    $$phi$trans$insert = ((($cr)) + 24|0);
    $$pre223 = HEAP32[$$phi$trans$insert>>2]|0;
    $1232 = $$pre223;
    break;
   }
  } else {
   $1193 = ((($fd)) + 16|0);
   $1194 = HEAP32[$1193>>2]|0;
   $1195 = ((($1194)) + 48|0);
   $1196 = HEAP32[$1195>>2]|0;
   $1197 = (_kh_get_m_s2i($1196,$rg$0)|0);
   $1198 = HEAP32[$1196>>2]|0;
   $1199 = ($1197|0)==($1198|0);
   if ($1199) {
    $1211 = -1;
   } else {
    $1200 = ((($1196)) + 24|0);
    $1201 = HEAP32[$1200>>2]|0;
    $1202 = (($1201) + ($1197<<2)|0);
    $1203 = HEAP32[$1202>>2]|0;
    $1204 = ((($1194)) + 44|0);
    $1205 = HEAP32[$1204>>2]|0;
    $1206 = (($1205) + (($1203*20)|0)|0);
    $1207 = ($1206|0)==(0|0);
    if ($1207) {
     $1211 = -1;
    } else {
     $1208 = (((($1205) + (($1203*20)|0)|0)) + 16|0);
     $1209 = HEAP32[$1208>>2]|0;
     $1211 = $1209;
    }
   }
   $1210 = ((($cr)) + 24|0);
   HEAP32[$1210>>2] = $1211;
   $1232 = $1211;
  }
 } while(0);
 $1230 = ((($c)) + 224|0);
 $1231 = HEAP32[$1230>>2]|0;
 _cram_stats_add($1231,$1232);
 $1233 = HEAP32[$b>>2]|0;
 $1234 = ((($cr)) + 4|0);
 HEAP32[$1234>>2] = $1233;
 $1235 = ((($c)) + 284|0);
 $1236 = HEAP32[$1235>>2]|0;
 _cram_stats_add($1236,$1233);
 $1237 = ((($c)) + 212|0);
 $1238 = HEAP32[$1237>>2]|0;
 $1239 = HEAP32[$10>>2]|0;
 $1240 = $1239 & 4095;
 $1241 = (((($fd)) + 16712|0) + ($1240<<2)|0);
 $1242 = HEAP32[$1241>>2]|0;
 _cram_stats_add($1238,$1242);
 $1243 = ((($fd)) + 288|0);
 $1244 = HEAP32[$1243>>2]|0;
 $1245 = ($1244|0)==(0);
 if ($1245) {
  label = 242;
 } else {
  $1246 = HEAP32[$15>>2]|0;
  $1247 = $1246 >> 8;
  $1248 = ($1247|0)>(2);
  if ($1248) {
   label = 242;
  }
 }
 if ((label|0) == 242) {
  $1249 = ((($cr)) + 12|0);
  $1250 = HEAP32[$1249>>2]|0;
  $1251 = $1250 | 1;
  HEAP32[$1249>>2] = $1251;
 }
 $1252 = HEAP32[$13>>2]|0;
 $1253 = ($1252|0)<(1);
 if ($1253) {
  $1254 = HEAP32[$15>>2]|0;
  $1255 = $1254 >> 8;
  $1256 = ($1255|0)>(2);
  if ($1256) {
   $1257 = ((($cr)) + 12|0);
   $1258 = HEAP32[$1257>>2]|0;
   $1259 = $1258 | 8;
   HEAP32[$1257>>2] = $1259;
  }
 }
 $1260 = ($1252|0)<(0);
 $1261 = $1260 << 31 >> 31;
 $1262 = ((($c)) + 24|0);
 $1263 = $1262;
 $1264 = $1263;
 $1265 = HEAP32[$1264>>2]|0;
 $1266 = (($1263) + 4)|0;
 $1267 = $1266;
 $1268 = HEAP32[$1267>>2]|0;
 $1269 = (_i64Add(($1265|0),($1268|0),($1252|0),($1261|0))|0);
 $1270 = tempRet0;
 $1271 = $1262;
 $1272 = $1271;
 HEAP32[$1272>>2] = $1269;
 $1273 = (($1271) + 4)|0;
 $1274 = $1273;
 HEAP32[$1274>>2] = $1270;
 $1275 = ((($b)) + 4|0);
 $1276 = HEAP32[$1275>>2]|0;
 $1277 = (($1276) + 1)|0;
 $1278 = ((($cr)) + 20|0);
 HEAP32[$1278>>2] = $1277;
 $1279 = ((($c)) + 104|0);
 $1280 = HEAP32[$1279>>2]|0;
 $1281 = ($1280|0)==(0);
 do {
  if (!($1281)) {
   $1282 = ((($s)) + 16|0);
   $1283 = HEAP32[$1282>>2]|0;
   $1284 = ($1277|0)<($1283|0);
   if ($1284) {
    HEAP32[$1279>>2] = 0;
    break;
   } else {
    $1285 = ((($c)) + 220|0);
    $1286 = HEAP32[$1285>>2]|0;
    $1287 = (($1277) - ($1283))|0;
    _cram_stats_add($1286,$1287);
    $1288 = HEAP32[$1278>>2]|0;
    HEAP32[$1282>>2] = $1288;
    break;
   }
  }
 } while(0);
 $1289 = HEAP32[$1278>>2]|0;
 $1290 = ((($c)) + 108|0);
 $1291 = HEAP32[$1290>>2]|0;
 $1292 = ($1289|0)>($1291|0);
 $1293 = $1292 ? $1289 : $1291;
 HEAP32[$1290>>2] = $1293;
 $1294 = ((($s)) + 68|0);
 $1295 = HEAP32[$1294>>2]|0;
 $1296 = ((($1295)) + 40|0);
 $1297 = HEAP32[$1296>>2]|0;
 $1298 = ((($cr)) + 72|0);
 HEAP32[$1298>>2] = $1297;
 $1299 = ((($s)) + 72|0);
 $1300 = HEAP32[$1299>>2]|0;
 $1301 = ((($1300)) + 40|0);
 $1302 = HEAP32[$1301>>2]|0;
 $1303 = ((($cr)) + 76|0);
 HEAP32[$1303>>2] = $1302;
 while(1) {
  $1304 = HEAP32[$1294>>2]|0;
  $1305 = ((($1304)) + 36|0);
  $1306 = HEAP32[$1305>>2]|0;
  $1307 = ((($1304)) + 40|0);
  $1308 = HEAP32[$1307>>2]|0;
  $1309 = HEAP32[$13>>2]|0;
  $1310 = (($1309) + 1)|0;
  $1311 = (($1308) + ($1310))|0;
  $1312 = ($1306>>>0)>($1311>>>0);
  if ($1312) {
   $1332 = $1309;
   break;
  }
  $1313 = ($1306|0)==(0);
  $1314 = (+($1306>>>0));
  $1315 = $1314 * 1.5;
  $1316 = (~~(($1315))>>>0);
  $1317 = $1313 ? 1024 : $1316;
  HEAP32[$1305>>2] = $1317;
  $1318 = HEAP32[$1294>>2]|0;
  $1319 = ((($1318)) + 32|0);
  $1320 = HEAP32[$1319>>2]|0;
  $1321 = ((($1318)) + 36|0);
  $1322 = HEAP32[$1321>>2]|0;
  $1323 = (_realloc($1320,$1322)|0);
  $1324 = HEAP32[$1294>>2]|0;
  $1325 = ((($1324)) + 32|0);
  HEAP32[$1325>>2] = $1323;
 }
 while(1) {
  $1326 = HEAP32[$1299>>2]|0;
  $1327 = ((($1326)) + 36|0);
  $1328 = HEAP32[$1327>>2]|0;
  $1329 = ((($1326)) + 40|0);
  $1330 = HEAP32[$1329>>2]|0;
  $1331 = (($1330) + ($1332))|0;
  $1333 = ($1328>>>0)>($1331>>>0);
  if ($1333) {
   break;
  }
  $1334 = ($1328|0)==(0);
  $1335 = (+($1328>>>0));
  $1336 = $1335 * 1.5;
  $1337 = (~~(($1336))>>>0);
  $1338 = $1334 ? 1024 : $1337;
  HEAP32[$1327>>2] = $1338;
  $1339 = HEAP32[$1299>>2]|0;
  $1340 = ((($1339)) + 32|0);
  $1341 = HEAP32[$1340>>2]|0;
  $1342 = ((($1339)) + 36|0);
  $1343 = HEAP32[$1342>>2]|0;
  $1344 = (_realloc($1341,$1343)|0);
  $1345 = HEAP32[$1299>>2]|0;
  $1346 = ((($1345)) + 32|0);
  HEAP32[$1346>>2] = $1344;
  $$pre224 = HEAP32[$13>>2]|0;
  $1332 = $$pre224;
 }
 $1347 = HEAP32[$1294>>2]|0;
 $1348 = ((($1347)) + 40|0);
 $1349 = HEAP32[$1348>>2]|0;
 $1350 = ((($1347)) + 32|0);
 $1351 = HEAP32[$1350>>2]|0;
 $1352 = (($1351) + ($1349)|0);
 HEAP8[$1352>>0] = 0;
 $1353 = ((($b)) + 40|0);
 $i$0 = 0;
 while(1) {
  $1354 = HEAP32[$13>>2]|0;
  $1355 = ($i$0|0)<($1354|0);
  if (!($1355)) {
   break;
  }
  $1356 = $i$0 >> 1;
  $1357 = HEAP32[$1353>>2]|0;
  $1358 = $2;
  $1359 = $1358;
  $1360 = HEAP32[$1359>>2]|0;
  $1361 = (($1358) + 4)|0;
  $1362 = $1361;
  $1363 = HEAP32[$1362>>2]|0;
  $1364 = (_bitshift64Lshr(($1360|0),($1363|0),46)|0);
  $1365 = tempRet0;
  $1366 = $1364 & 262140;
  $1367 = (($1357) + ($1366)|0);
  $1368 = (_bitshift64Lshr(($1360|0),($1363|0),24)|0);
  $1369 = tempRet0;
  $1370 = $1368 & 255;
  $1371 = (($1367) + ($1370)|0);
  $1372 = (($1371) + ($1356)|0);
  $1373 = HEAP8[$1372>>0]|0;
  $1374 = $1373&255;
  $1375 = $i$0 << 2;
  $1376 = $1375 & 4;
  $1377 = $1376 ^ 4;
  $1378 = $1374 >>> $1377;
  $1379 = $1378 & 15;
  $1380 = (15699 + ($1379)|0);
  $1381 = HEAP8[$1380>>0]|0;
  $1382 = (($1352) + ($i$0)|0);
  HEAP8[$1382>>0] = $1381;
  $1383 = (($i$0) + 1)|0;
  $i$0 = $1383;
 }
 $1384 = HEAP32[$1294>>2]|0;
 $1385 = ((($1384)) + 40|0);
 $1386 = HEAP32[$1385>>2]|0;
 $1387 = (($1386) + ($1354))|0;
 HEAP32[$1385>>2] = $1387;
 $1388 = HEAP32[$1353>>2]|0;
 $1389 = $2;
 $1390 = $1389;
 $1391 = HEAP32[$1390>>2]|0;
 $1392 = (($1389) + 4)|0;
 $1393 = $1392;
 $1394 = HEAP32[$1393>>2]|0;
 $1395 = (_bitshift64Lshr(($1391|0),($1394|0),46)|0);
 $1396 = tempRet0;
 $1397 = $1395 & 262140;
 $1398 = (($1388) + ($1397)|0);
 $1399 = (_bitshift64Lshr(($1391|0),($1394|0),24)|0);
 $1400 = tempRet0;
 $1401 = $1399 & 255;
 $1402 = (($1398) + ($1401)|0);
 $1403 = HEAP32[$11>>2]|0;
 $1404 = (($1403) + 1)|0;
 $1405 = $1404 >> 1;
 $1406 = (($1402) + ($1405)|0);
 $1407 = HEAP32[$10>>2]|0;
 $1408 = $1407 & 4;
 $1409 = ($1408|0)==(0);
 L348: do {
  if ($1409) {
   $1410 = HEAP32[$1278>>2]|0;
   $1411 = (($1410) + -1)|0;
   $1412 = ((($s)) + 36|0);
   $1413 = HEAP32[$1412>>2]|0;
   $1414 = ((($cr)) + 80|0);
   HEAP32[$1414>>2] = $1413;
   $1415 = $2;
   $1416 = $1415;
   $1417 = HEAP32[$1416>>2]|0;
   $1418 = (($1415) + 4)|0;
   $1419 = $1418;
   $1420 = HEAP32[$1419>>2]|0;
   $1421 = (_bitshift64Lshr(($1417|0),($1420|0),48)|0);
   $1422 = tempRet0;
   $1423 = ((($cr)) + 84|0);
   HEAP32[$1423>>2] = $1421;
   $1424 = ((($s)) + 32|0);
   $1425 = ((($s)) + 28|0);
   $1427 = $1413;$1428 = $1421;
   while(1) {
    $1426 = (($1427) + ($1428))|0;
    $1429 = HEAP32[$1424>>2]|0;
    $1430 = ($1426>>>0)<($1429>>>0);
    if ($1430) {
     break;
    }
    $1431 = ($1429|0)==(0);
    $1432 = $1429 << 1;
    $$404 = $1431 ? 1024 : $1432;
    HEAP32[$1424>>2] = $$404;
    $1433 = HEAP32[$1425>>2]|0;
    $1434 = $$404 << 2;
    $1435 = (_realloc($1433,$1434)|0);
    HEAP32[$1425>>2] = $1435;
    $1436 = ($1435|0)==(0|0);
    if ($1436) {
     $$0 = -1;
     label = 426;
     break;
    }
    $$pre226 = HEAP32[$1414>>2]|0;
    $$pre227 = HEAP32[$1423>>2]|0;
    $1427 = $$pre226;$1428 = $$pre227;
   }
   if ((label|0) == 426) {
    STACKTOP = sp;return ($$0|0);
   }
   $1437 = HEAP32[$1425>>2]|0;
   $1438 = HEAP32[$1353>>2]|0;
   $1439 = $2;
   $1440 = $1439;
   $1441 = HEAP32[$1440>>2]|0;
   $1442 = (($1439) + 4)|0;
   $1443 = $1442;
   $1444 = HEAP32[$1443>>2]|0;
   $1445 = (_bitshift64Lshr(($1441|0),($1444|0),24)|0);
   $1446 = tempRet0;
   $1447 = $1445 & 255;
   $1448 = (($1438) + ($1447)|0);
   $1449 = ((($cr)) + 96|0);
   HEAP32[$1449>>2] = 0;
   $1450 = ((($cr)) + 100|0);
   HEAP32[$1450>>2] = 0;
   $1451 = ((($c)) + 140|0);
   $1452 = ((($f$i)) + 4|0);
   $1453 = ((($f$i)) + 8|0);
   $1454 = ((($c)) + 276|0);
   $1455 = ((($f$i)) + 12|0);
   $1456 = ((($c)) + 272|0);
   $1457 = ((($c)) + 200|0);
   $1458 = ((($f$i46)) + 4|0);
   $1459 = ((($f$i46)) + 8|0);
   $1460 = ((($f$i46)) + 12|0);
   $1461 = ((($f$i47)) + 4|0);
   $1462 = ((($f$i47)) + 8|0);
   $1463 = ((($c)) + 268|0);
   $1464 = ((($f$i48)) + 4|0);
   $1465 = ((($f$i48)) + 8|0);
   $1466 = ((($c)) + 288|0);
   $1467 = ((($f$i49)) + 4|0);
   $1468 = ((($f$i49)) + 8|0);
   $1469 = ((($s)) + 76|0);
   $1470 = ((($f$i49)) + 12|0);
   $1471 = ((($f$i50)) + 4|0);
   $1472 = ((($f$i50)) + 8|0);
   $1473 = ((($s)) + 80|0);
   $1474 = ((($f$i50)) + 12|0);
   $1475 = ((($cr)) + 12|0);
   $1476 = ((($f$i52)) + 4|0);
   $1477 = ((($f$i52)) + 8|0);
   $1478 = ((($c)) + 296|0);
   $1479 = ((($f$i53)) + 4|0);
   $1480 = ((($f$i53)) + 8|0);
   $1481 = ((($c)) + 292|0);
   $1483 = $1428;$apos$0 = $1411;$i$1 = 0;$spos$0 = 0;
   L357: while(1) {
    $1482 = ($i$1|0)<($1483|0);
    if (!($1482)) {
     label = 365;
     break;
    }
    $1484 = (($1448) + ($i$1<<2)|0);
    $1485 = HEAP32[$1484>>2]|0;
    $1486 = $1485 & 15;
    $1487 = $1485 >>> 4;
    $1488 = (($1437) + ($i$1<<2)|0);
    HEAP32[$1488>>2] = $1485;
    L360: do {
     switch ($1486|0) {
     case 8: case 7: case 0:  {
      $1489 = HEAP32[$1243>>2]|0;
      $1490 = ($1489|0)==(0);
      if ($1490) {
       $1491 = HEAP32[$13>>2]|0;
       $1492 = ($1491|0)==(0);
       if ($1492) {
        $1563 = $1491;$apos$1 = $apos$0;$l$1 = 0;$spos$1 = $spos$0;
       } else {
        $1493 = (($1487) + ($apos$0))|0;
        $1494 = HEAP32[$1451>>2]|0;
        $1495 = ($1493>>>0)<($1494>>>0);
        $1496 = (($1494) - ($apos$0))|0;
        $$405 = $1495 ? $1487 : $1496;
        $1497 = (($1352) + ($spos$0)|0);
        $1498 = (($1) + ($apos$0)|0);
        $1499 = (($1406) + ($spos$0)|0);
        $1500 = ($$405|0)>($1491|0);
        if ($1500) {
         label = 269;
         break L357;
        } else {
         $l$0 = 0;
        }
        while(1) {
         $1501 = ($l$0|0)<($$405|0);
         if (!($1501)) {
          break;
         }
         $1502 = (($1498) + ($l$0)|0);
         $1503 = HEAP8[$1502>>0]|0;
         $1504 = (($1497) + ($l$0)|0);
         $1505 = HEAP8[$1504>>0]|0;
         $1506 = ($1503<<24>>24)==($1505<<24>>24);
         if (!($1506)) {
          $1507 = ($1505<<24>>24)==(0);
          if ($1507) {
           break;
          }
          $1508 = (($spos$0) + ($l$0))|0;
          $1509 = (($1499) + ($l$0)|0);
          $1510 = HEAP8[$1509>>0]|0;
          $1511 = $1505&255;
          $1512 = (((($fd)) + 33352|0) + ($1511)|0);
          $1513 = HEAP8[$1512>>0]|0;
          $1514 = ($1513&255)<(4);
          do {
           if ($1514) {
            $$pre252 = $1503&255;
            $$pre$phi253Z2D = $$pre252;
            label = 277;
           } else {
            $1515 = ($1513&255)<(5);
            if ($1515) {
             $1516 = $1503&255;
             $1517 = (((($fd)) + 33352|0) + ($1516)|0);
             $1518 = HEAP8[$1517>>0]|0;
             $1519 = ($1518&255)<(4);
             if ($1519) {
              $$pre$phi253Z2D = $1516;
              label = 277;
              break;
             }
            }
            $1527 = (($1508) + 1)|0;
            HEAP32[$f$i>>2] = $1527;
            HEAP32[$1452>>2] = 66;
            $1528 = $1505 << 24 >> 24;
            HEAP32[$1453>>2] = $1528;
            $1529 = $1510 << 24 >> 24;
            HEAP32[$1455>>2] = $1529;
            $1530 = HEAP32[$1456>>2]|0;
            _cram_stats_add($1530,$1528);
            $1531 = HEAP32[$1457>>2]|0;
            _cram_stats_add($1531,$1529);
            while(1) {
             $1532 = HEAP32[$1299>>2]|0;
             $1533 = ((($1532)) + 36|0);
             $1534 = HEAP32[$1533>>2]|0;
             $1535 = ((($1532)) + 40|0);
             $1536 = HEAP32[$1535>>2]|0;
             $1537 = (($1536) + 1)|0;
             $1538 = ($1534>>>0)>($1537>>>0);
             if ($1538) {
              break;
             }
             $1539 = ($1534|0)==(0);
             $1540 = (+($1534>>>0));
             $1541 = $1540 * 1.5;
             $1542 = (~~(($1541))>>>0);
             $1543 = $1539 ? 1024 : $1542;
             HEAP32[$1533>>2] = $1543;
             $1544 = HEAP32[$1299>>2]|0;
             $1545 = ((($1544)) + 32|0);
             $1546 = HEAP32[$1545>>2]|0;
             $1547 = ((($1544)) + 36|0);
             $1548 = HEAP32[$1547>>2]|0;
             $1549 = (_realloc($1546,$1548)|0);
             $1550 = HEAP32[$1299>>2]|0;
             $1551 = ((($1550)) + 32|0);
             HEAP32[$1551>>2] = $1549;
            }
            HEAP32[$1535>>2] = $1537;
            $1552 = HEAP32[$1299>>2]|0;
            $1553 = ((($1552)) + 32|0);
            $1554 = HEAP32[$1553>>2]|0;
            $1555 = (($1554) + ($1536)|0);
            HEAP8[$1555>>0] = $1510;
           }
          } while(0);
          if ((label|0) == 277) {
           label = 0;
           $1520 = (($1508) + 1)|0;
           HEAP32[$f$i>>2] = $1520;
           HEAP32[$1452>>2] = 88;
           $1521 = $1511 & 31;
           $1522 = $$pre$phi253Z2D & 31;
           $1523 = ((((($fd)) + 33608|0) + ($1522<<5)|0) + ($1521)|0);
           $1524 = HEAP8[$1523>>0]|0;
           $1525 = $1524 << 24 >> 24;
           HEAP32[$1453>>2] = $1525;
           $1526 = HEAP32[$1454>>2]|0;
           _cram_stats_add($1526,$1525);
          }
          $1556 = (_cram_add_feature($c,$s,$cr,$f$i)|0);
          $1557 = ($1556|0)==(0);
          if (!($1557)) {
           $$0 = -1;
           label = 426;
           break L357;
          }
         }
         $1558 = (($l$0) + 1)|0;
         $l$0 = $1558;
        }
        $1559 = (($spos$0) + ($l$0))|0;
        $1560 = (($apos$0) + ($l$0))|0;
        $apos$1$ph = $1560;$l$1$ph = $l$0;$spos$1$ph = $1559;
        label = 285;
       }
      } else {
       $apos$1$ph = $apos$0;$l$1$ph = 0;$spos$1$ph = $spos$0;
       label = 285;
      }
      if ((label|0) == 285) {
       label = 0;
       $$pr = HEAP32[$13>>2]|0;
       $1563 = $$pr;$apos$1 = $apos$1$ph;$l$1 = $l$1$ph;$spos$1 = $spos$1$ph;
      }
      $1561 = ($1487>>>0)>($l$1>>>0);
      if ($1561) {
       $1562 = ($1563|0)==(0);
       if (!($1562)) {
        $1564 = HEAP32[$1243>>2]|0;
        $1565 = ($1564|0)==(0);
        L392: do {
         if ($1565) {
          $l$3 = $l$1;$spos$4 = $spos$1;
          while(1) {
           $1589 = ($l$3>>>0)<($1487>>>0);
           if (!($1589)) {
            $spos$5 = $spos$4;
            break L392;
           }
           $1590 = (($1352) + ($spos$4)|0);
           $1591 = HEAP8[$1590>>0]|0;
           $1592 = ($1591<<24>>24)==(0);
           if ($1592) {
            $spos$5 = $spos$4;
            break L392;
           }
           $1593 = (($1406) + ($spos$4)|0);
           $1594 = HEAP8[$1593>>0]|0;
           $1595 = (_cram_add_base($c,$s,$cr,$spos$4,$1591,$1594)|0);
           $1596 = ($1595|0)==(0);
           if (!($1596)) {
            $$0 = -1;
            label = 426;
            break L357;
           }
           $1597 = (($l$3) + 1)|0;
           $1598 = (($spos$4) + 1)|0;
           $l$3 = $1597;$spos$4 = $1598;
          }
         } else {
          $1566 = HEAP32[$15>>2]|0;
          $$mask26 = $1566 & -256;
          $1567 = ($$mask26|0)==(768);
          if ($1567) {
           $1568 = (($1487) - ($l$1))|0;
           $1569 = (($1352) + ($spos$1)|0);
           $1570 = (($spos$1) + 1)|0;
           HEAP32[$f$i46>>2] = $1570;
           HEAP32[$1458>>2] = 98;
           $1571 = HEAP32[$1294>>2]|0;
           $1572 = ((($1571)) + 32|0);
           $1573 = HEAP32[$1572>>2]|0;
           $1574 = $1569;
           $1575 = (($1574) - ($1573))|0;
           HEAP32[$1459>>2] = $1575;
           HEAP32[$1460>>2] = $1568;
           $1576 = (_cram_add_feature($c,$s,$cr,$f$i46)|0);
           $1577 = ($1576|0)==(0);
           if (!($1577)) {
            $$0 = -1;
            label = 426;
            break L357;
           }
           $1578 = (($spos$1) + ($1568))|0;
           $spos$5 = $1578;
           break;
          } else {
           $l$2 = $l$1;$spos$2 = $spos$1;
          }
          while(1) {
           $1579 = ($l$2>>>0)<($1487>>>0);
           if (!($1579)) {
            $spos$5 = $spos$2;
            break L392;
           }
           $1580 = (($1352) + ($spos$2)|0);
           $1581 = HEAP8[$1580>>0]|0;
           $1582 = ($1581<<24>>24)==(0);
           if ($1582) {
            $spos$5 = $spos$2;
            break L392;
           }
           $1583 = (($1406) + ($spos$2)|0);
           $1584 = HEAP8[$1583>>0]|0;
           $1585 = (_cram_add_base($c,$s,$cr,$spos$2,$1581,$1584)|0);
           $1586 = ($1585|0)==(0);
           if (!($1586)) {
            $$0 = -1;
            label = 426;
            break L357;
           }
           $1587 = (($l$2) + 1)|0;
           $1588 = (($spos$2) + 1)|0;
           $l$2 = $1587;$spos$2 = $1588;
          }
         }
        } while(0);
        $1599 = (($apos$1) + ($1487))|0;
        $apos$4 = $1599;$spos$14 = $spos$5;
        break L360;
       }
      } else {
       $1601 = $1563;
       $1600 = ($1601|0)==(0);
       if (!($1600)) {
        $apos$4 = $apos$1;$spos$14 = $spos$1;
        break L360;
       }
      }
      $1602 = (($apos$1) + ($1487))|0;
      $1603 = (($spos$1) + ($1487))|0;
      $apos$4 = $1602;$spos$14 = $1603;
      break;
     }
     case 2:  {
      $1604 = (($spos$0) + 1)|0;
      HEAP32[$f$i47>>2] = $1604;
      HEAP32[$1461>>2] = 68;
      HEAP32[$1462>>2] = $1487;
      $1605 = HEAP32[$1463>>2]|0;
      _cram_stats_add($1605,$1487);
      $1606 = (_cram_add_feature($c,$s,$cr,$f$i47)|0);
      $1607 = ($1606|0)==(0);
      if (!($1607)) {
       $$0 = -1;
       label = 426;
       break L357;
      }
      $1608 = (($apos$0) + ($1487))|0;
      $apos$4 = $1608;$spos$14 = $spos$0;
      break;
     }
     case 3:  {
      $1609 = (($spos$0) + 1)|0;
      HEAP32[$f$i48>>2] = $1609;
      HEAP32[$1464>>2] = 78;
      HEAP32[$1465>>2] = $1487;
      $1610 = HEAP32[$1466>>2]|0;
      _cram_stats_add($1610,$1487);
      $1611 = (_cram_add_feature($c,$s,$cr,$f$i48)|0);
      $1612 = ($1611|0)==(0);
      if (!($1612)) {
       $$0 = -1;
       label = 426;
       break L357;
      }
      $1613 = (($apos$0) + ($1487))|0;
      $apos$4 = $1613;$spos$14 = $spos$0;
      break;
     }
     case 1:  {
      $1614 = HEAP32[$13>>2]|0;
      $1615 = ($1614|0)==(0);
      $1616 = (($1352) + ($spos$0)|0);
      $$406 = $1615 ? 0 : $1616;
      $1617 = (($spos$0) + 1)|0;
      HEAP32[$f$i49>>2] = $1617;
      $1618 = ($1487|0)==(1);
      if ($1618) {
       $1619 = ($$406|0)==(0|0);
       if ($1619) {
        $1622 = 78;
       } else {
        $1620 = HEAP8[$$406>>0]|0;
        $1622 = $1620;
       }
       HEAP32[$1467>>2] = 105;
       $1621 = $1622 << 24 >> 24;
       HEAP32[$1468>>2] = $1621;
       $1623 = HEAP32[$1456>>2]|0;
       _cram_stats_add($1623,$1621);
      } else {
       HEAP32[$1467>>2] = 73;
       HEAP32[$1468>>2] = $1487;
       $1624 = HEAP32[$1469>>2]|0;
       $1625 = ((($1624)) + 40|0);
       $1626 = HEAP32[$1625>>2]|0;
       HEAP32[$1470>>2] = $1626;
       $1627 = ($$406|0)==(0|0);
       L421: do {
        if ($1627) {
         $1628 = $1485 >>> 4;
         $i$0$i = 0;
         while(1) {
          $exitcond392 = ($i$0$i|0)==($1628|0);
          if ($exitcond392) {
           break L421;
          }
          while(1) {
           $1655 = HEAP32[$1469>>2]|0;
           $1656 = ((($1655)) + 36|0);
           $1657 = HEAP32[$1656>>2]|0;
           $1658 = ((($1655)) + 40|0);
           $1659 = HEAP32[$1658>>2]|0;
           $1660 = (($1659) + 1)|0;
           $1661 = ($1657>>>0)>($1660>>>0);
           if ($1661) {
            break;
           }
           $1662 = ($1657|0)==(0);
           $1663 = (+($1657>>>0));
           $1664 = $1663 * 1.5;
           $1665 = (~~(($1664))>>>0);
           $1666 = $1662 ? 1024 : $1665;
           HEAP32[$1656>>2] = $1666;
           $1667 = HEAP32[$1469>>2]|0;
           $1668 = ((($1667)) + 32|0);
           $1669 = HEAP32[$1668>>2]|0;
           $1670 = ((($1667)) + 36|0);
           $1671 = HEAP32[$1670>>2]|0;
           $1672 = (_realloc($1669,$1671)|0);
           $1673 = HEAP32[$1469>>2]|0;
           $1674 = ((($1673)) + 32|0);
           HEAP32[$1674>>2] = $1672;
          }
          HEAP32[$1658>>2] = $1660;
          $1675 = HEAP32[$1469>>2]|0;
          $1676 = ((($1675)) + 32|0);
          $1677 = HEAP32[$1676>>2]|0;
          $1678 = (($1677) + ($1659)|0);
          HEAP8[$1678>>0] = 78;
          $1679 = (($i$0$i) + 1)|0;
          $i$0$i = $1679;
         }
        } else {
         $1630 = $1624;$1633 = $1626;
         while(1) {
          $1629 = ((($1630)) + 36|0);
          $1631 = HEAP32[$1629>>2]|0;
          $1632 = (($1633) + ($1487))|0;
          $1634 = ($1631>>>0)>($1632>>>0);
          if ($1634) {
           break;
          }
          $1635 = ($1631|0)==(0);
          $1636 = (+($1631>>>0));
          $1637 = $1636 * 1.5;
          $1638 = (~~(($1637))>>>0);
          $1639 = $1635 ? 1024 : $1638;
          HEAP32[$1629>>2] = $1639;
          $1640 = HEAP32[$1469>>2]|0;
          $1641 = ((($1640)) + 32|0);
          $1642 = HEAP32[$1641>>2]|0;
          $1643 = ((($1640)) + 36|0);
          $1644 = HEAP32[$1643>>2]|0;
          $1645 = (_realloc($1642,$1644)|0);
          $1646 = HEAP32[$1469>>2]|0;
          $1647 = ((($1646)) + 32|0);
          HEAP32[$1647>>2] = $1645;
          $$pre241 = HEAP32[$1469>>2]|0;
          $$phi$trans$insert242 = ((($$pre241)) + 40|0);
          $$pre243 = HEAP32[$$phi$trans$insert242>>2]|0;
          $1630 = $$pre241;$1633 = $$pre243;
         }
         $1648 = ((($1630)) + 32|0);
         $1649 = HEAP32[$1648>>2]|0;
         $1650 = (($1649) + ($1633)|0);
         _memcpy(($1650|0),($$406|0),($1487|0))|0;
         $1651 = HEAP32[$1469>>2]|0;
         $1652 = ((($1651)) + 40|0);
         $1653 = HEAP32[$1652>>2]|0;
         $1654 = (($1653) + ($1487))|0;
         HEAP32[$1652>>2] = $1654;
        }
       } while(0);
       while(1) {
        $1680 = HEAP32[$1469>>2]|0;
        $1681 = ((($1680)) + 36|0);
        $1682 = HEAP32[$1681>>2]|0;
        $1683 = ((($1680)) + 40|0);
        $1684 = HEAP32[$1683>>2]|0;
        $1685 = (($1684) + 1)|0;
        $1686 = ($1682>>>0)>($1685>>>0);
        if ($1686) {
         break;
        }
        $1687 = ($1682|0)==(0);
        $1688 = (+($1682>>>0));
        $1689 = $1688 * 1.5;
        $1690 = (~~(($1689))>>>0);
        $1691 = $1687 ? 1024 : $1690;
        HEAP32[$1681>>2] = $1691;
        $1692 = HEAP32[$1469>>2]|0;
        $1693 = ((($1692)) + 32|0);
        $1694 = HEAP32[$1693>>2]|0;
        $1695 = ((($1692)) + 36|0);
        $1696 = HEAP32[$1695>>2]|0;
        $1697 = (_realloc($1694,$1696)|0);
        $1698 = HEAP32[$1469>>2]|0;
        $1699 = ((($1698)) + 32|0);
        HEAP32[$1699>>2] = $1697;
       }
       HEAP32[$1683>>2] = $1685;
       $1700 = HEAP32[$1469>>2]|0;
       $1701 = ((($1700)) + 32|0);
       $1702 = HEAP32[$1701>>2]|0;
       $1703 = (($1702) + ($1684)|0);
       HEAP8[$1703>>0] = 0;
      }
      $1704 = (_cram_add_feature($c,$s,$cr,$f$i49)|0);
      $1705 = ($1704|0)==(0);
      if (!($1705)) {
       $$0 = -1;
       label = 426;
       break L357;
      }
      $1706 = HEAP32[$1243>>2]|0;
      $1707 = ($1706|0)==(0);
      if (!($1707)) {
       $1708 = HEAP32[$13>>2]|0;
       $1709 = ($1708|0)==(0);
       if (!($1709)) {
        $1710 = $1485 >>> 4;
        $l$4 = 0;$spos$8 = $spos$0;
        while(1) {
         $exitcond393 = ($l$4|0)==($1710|0);
         if ($exitcond393) {
          break;
         }
         $1711 = (($1406) + ($spos$8)|0);
         $1712 = HEAP8[$1711>>0]|0;
         _cram_add_quality($c,$s,$cr,$spos$8,$1712);
         $1713 = (($l$4) + 1)|0;
         $1714 = (($spos$8) + 1)|0;
         $l$4 = $1713;$spos$8 = $1714;
        }
        $1879 = (($spos$0) + ($1710))|0;
        $apos$4 = $apos$0;$spos$14 = $1879;
        break L360;
       }
      }
      $1715 = (($spos$0) + ($1487))|0;
      $apos$4 = $apos$0;$spos$14 = $1715;
      break;
     }
     case 4:  {
      $1716 = HEAP32[$13>>2]|0;
      $1717 = ($1716|0)==(0);
      $1718 = (($1352) + ($spos$0)|0);
      $$407 = $1717 ? 0 : $1718;
      $1719 = HEAP32[$15>>2]|0;
      $1720 = (($spos$0) + 1)|0;
      HEAP32[$f$i50>>2] = $1720;
      HEAP32[$1471>>2] = 83;
      HEAP32[$1472>>2] = $1487;
      $$mask414 = $1719 & -256;
      $cond = ($$mask414|0)==(256);
      if ($cond) {
       $1721 = HEAP32[$1469>>2]|0;
       $1722 = ((($1721)) + 40|0);
       $1723 = HEAP32[$1722>>2]|0;
       HEAP32[$1474>>2] = $1723;
       $1725 = $1721;$1728 = $1723;
       while(1) {
        $1724 = ((($1725)) + 36|0);
        $1726 = HEAP32[$1724>>2]|0;
        $1727 = (($1728) + ($1487))|0;
        $1729 = ($1726>>>0)>($1727>>>0);
        if ($1729) {
         break;
        }
        $1730 = ($1726|0)==(0);
        $1731 = (+($1726>>>0));
        $1732 = $1731 * 1.5;
        $1733 = (~~(($1732))>>>0);
        $1734 = $1730 ? 1024 : $1733;
        HEAP32[$1724>>2] = $1734;
        $1735 = HEAP32[$1469>>2]|0;
        $1736 = ((($1735)) + 32|0);
        $1737 = HEAP32[$1736>>2]|0;
        $1738 = ((($1735)) + 36|0);
        $1739 = HEAP32[$1738>>2]|0;
        $1740 = (_realloc($1737,$1739)|0);
        $1741 = HEAP32[$1469>>2]|0;
        $1742 = ((($1741)) + 32|0);
        HEAP32[$1742>>2] = $1740;
        $$pre235 = HEAP32[$1469>>2]|0;
        $$phi$trans$insert236 = ((($$pre235)) + 40|0);
        $$pre237 = HEAP32[$$phi$trans$insert236>>2]|0;
        $1725 = $$pre235;$1728 = $$pre237;
       }
       $1743 = ((($1725)) + 32|0);
       $1744 = HEAP32[$1743>>2]|0;
       $1745 = (($1744) + ($1728)|0);
       _memcpy(($1745|0),($$407|0),($1487|0))|0;
       $1746 = HEAP32[$1469>>2]|0;
       $1747 = ((($1746)) + 40|0);
       $1748 = HEAP32[$1747>>2]|0;
       $1749 = (($1748) + ($1487))|0;
       HEAP32[$1747>>2] = $1749;
       while(1) {
        $1750 = HEAP32[$1469>>2]|0;
        $1751 = ((($1750)) + 36|0);
        $1752 = HEAP32[$1751>>2]|0;
        $1753 = ((($1750)) + 40|0);
        $1754 = HEAP32[$1753>>2]|0;
        $1755 = (($1754) + 1)|0;
        $1756 = ($1752>>>0)>($1755>>>0);
        if ($1756) {
         break;
        }
        $1757 = ($1752|0)==(0);
        $1758 = (+($1752>>>0));
        $1759 = $1758 * 1.5;
        $1760 = (~~(($1759))>>>0);
        $1761 = $1757 ? 1024 : $1760;
        HEAP32[$1751>>2] = $1761;
        $1762 = HEAP32[$1469>>2]|0;
        $1763 = ((($1762)) + 32|0);
        $1764 = HEAP32[$1763>>2]|0;
        $1765 = ((($1762)) + 36|0);
        $1766 = HEAP32[$1765>>2]|0;
        $1767 = (_realloc($1764,$1766)|0);
        $1768 = HEAP32[$1469>>2]|0;
        $1769 = ((($1768)) + 32|0);
        HEAP32[$1769>>2] = $1767;
       }
       HEAP32[$1753>>2] = $1755;
       $1770 = HEAP32[$1469>>2]|0;
       $1771 = ((($1770)) + 32|0);
       $1772 = HEAP32[$1771>>2]|0;
       $1773 = (($1772) + ($1754)|0);
       HEAP8[$1773>>0] = 0;
      } else {
       $1774 = HEAP32[$1473>>2]|0;
       $1775 = ((($1774)) + 40|0);
       $1776 = HEAP32[$1775>>2]|0;
       HEAP32[$1474>>2] = $1776;
       $1777 = ($$407|0)==(0|0);
       L459: do {
        if ($1777) {
         $1778 = $1485 >>> 4;
         $i$0$i51 = 0;
         while(1) {
          $exitcond = ($i$0$i51|0)==($1778|0);
          if ($exitcond) {
           break L459;
          }
          while(1) {
           $1805 = HEAP32[$1473>>2]|0;
           $1806 = ((($1805)) + 36|0);
           $1807 = HEAP32[$1806>>2]|0;
           $1808 = ((($1805)) + 40|0);
           $1809 = HEAP32[$1808>>2]|0;
           $1810 = (($1809) + 1)|0;
           $1811 = ($1807>>>0)>($1810>>>0);
           if ($1811) {
            break;
           }
           $1812 = ($1807|0)==(0);
           $1813 = (+($1807>>>0));
           $1814 = $1813 * 1.5;
           $1815 = (~~(($1814))>>>0);
           $1816 = $1812 ? 1024 : $1815;
           HEAP32[$1806>>2] = $1816;
           $1817 = HEAP32[$1473>>2]|0;
           $1818 = ((($1817)) + 32|0);
           $1819 = HEAP32[$1818>>2]|0;
           $1820 = ((($1817)) + 36|0);
           $1821 = HEAP32[$1820>>2]|0;
           $1822 = (_realloc($1819,$1821)|0);
           $1823 = HEAP32[$1473>>2]|0;
           $1824 = ((($1823)) + 32|0);
           HEAP32[$1824>>2] = $1822;
          }
          HEAP32[$1808>>2] = $1810;
          $1825 = HEAP32[$1473>>2]|0;
          $1826 = ((($1825)) + 32|0);
          $1827 = HEAP32[$1826>>2]|0;
          $1828 = (($1827) + ($1809)|0);
          HEAP8[$1828>>0] = 78;
          $1829 = (($i$0$i51) + 1)|0;
          $i$0$i51 = $1829;
         }
        } else {
         $1780 = $1774;$1783 = $1776;
         while(1) {
          $1779 = ((($1780)) + 36|0);
          $1781 = HEAP32[$1779>>2]|0;
          $1782 = (($1783) + ($1487))|0;
          $1784 = ($1781>>>0)>($1782>>>0);
          if ($1784) {
           break;
          }
          $1785 = ($1781|0)==(0);
          $1786 = (+($1781>>>0));
          $1787 = $1786 * 1.5;
          $1788 = (~~(($1787))>>>0);
          $1789 = $1785 ? 1024 : $1788;
          HEAP32[$1779>>2] = $1789;
          $1790 = HEAP32[$1473>>2]|0;
          $1791 = ((($1790)) + 32|0);
          $1792 = HEAP32[$1791>>2]|0;
          $1793 = ((($1790)) + 36|0);
          $1794 = HEAP32[$1793>>2]|0;
          $1795 = (_realloc($1792,$1794)|0);
          $1796 = HEAP32[$1473>>2]|0;
          $1797 = ((($1796)) + 32|0);
          HEAP32[$1797>>2] = $1795;
          $$pre238 = HEAP32[$1473>>2]|0;
          $$phi$trans$insert239 = ((($$pre238)) + 40|0);
          $$pre240 = HEAP32[$$phi$trans$insert239>>2]|0;
          $1780 = $$pre238;$1783 = $$pre240;
         }
         $1798 = ((($1780)) + 32|0);
         $1799 = HEAP32[$1798>>2]|0;
         $1800 = (($1799) + ($1783)|0);
         _memcpy(($1800|0),($$407|0),($1487|0))|0;
         $1801 = HEAP32[$1473>>2]|0;
         $1802 = ((($1801)) + 40|0);
         $1803 = HEAP32[$1802>>2]|0;
         $1804 = (($1803) + ($1487))|0;
         HEAP32[$1802>>2] = $1804;
        }
       } while(0);
       while(1) {
        $1830 = HEAP32[$1473>>2]|0;
        $1831 = ((($1830)) + 36|0);
        $1832 = HEAP32[$1831>>2]|0;
        $1833 = ((($1830)) + 40|0);
        $1834 = HEAP32[$1833>>2]|0;
        $1835 = (($1834) + 1)|0;
        $1836 = ($1832>>>0)>($1835>>>0);
        if ($1836) {
         break;
        }
        $1837 = ($1832|0)==(0);
        $1838 = (+($1832>>>0));
        $1839 = $1838 * 1.5;
        $1840 = (~~(($1839))>>>0);
        $1841 = $1837 ? 1024 : $1840;
        HEAP32[$1831>>2] = $1841;
        $1842 = HEAP32[$1473>>2]|0;
        $1843 = ((($1842)) + 32|0);
        $1844 = HEAP32[$1843>>2]|0;
        $1845 = ((($1842)) + 36|0);
        $1846 = HEAP32[$1845>>2]|0;
        $1847 = (_realloc($1844,$1846)|0);
        $1848 = HEAP32[$1473>>2]|0;
        $1849 = ((($1848)) + 32|0);
        HEAP32[$1849>>2] = $1847;
       }
       HEAP32[$1833>>2] = $1835;
       $1850 = HEAP32[$1473>>2]|0;
       $1851 = ((($1850)) + 32|0);
       $1852 = HEAP32[$1851>>2]|0;
       $1853 = (($1852) + ($1834)|0);
       HEAP8[$1853>>0] = 0;
      }
      $1854 = (_cram_add_feature($c,$s,$cr,$f$i50)|0);
      $1855 = ($1854|0)==(0);
      if (!($1855)) {
       $$0 = -1;
       label = 426;
       break L357;
      }
      $1856 = HEAP32[$1243>>2]|0;
      $1857 = ($1856|0)==(0);
      if (!($1857)) {
       $1858 = HEAP32[$1475>>2]|0;
       $1859 = $1858 & 1;
       $1860 = ($1859|0)==(0);
       if ($1860) {
        $1861 = HEAP32[$13>>2]|0;
        $1862 = ($1861|0)==(0);
        $1863 = $1485 >>> 4;
        if ($1862) {
         $l$6 = 0;$spos$11 = $spos$0;
         while(1) {
          $exitcond391 = ($l$6|0)==($1863|0);
          if ($exitcond391) {
           break;
          }
          _cram_add_quality($c,$s,$cr,$spos$11,-1);
          $1868 = (($l$6) + 1)|0;
          $1869 = (($spos$11) + 1)|0;
          $l$6 = $1868;$spos$11 = $1869;
         }
         $1880 = (($spos$0) + ($1863))|0;
         $apos$4 = $apos$0;$spos$14 = $1880;
         break L360;
        } else {
         $l$5 = 0;$spos$10 = $spos$0;
         while(1) {
          $exitcond390 = ($l$5|0)==($1863|0);
          if ($exitcond390) {
           break;
          }
          $1864 = (($1406) + ($spos$10)|0);
          $1865 = HEAP8[$1864>>0]|0;
          _cram_add_quality($c,$s,$cr,$spos$10,$1865);
          $1866 = (($l$5) + 1)|0;
          $1867 = (($spos$10) + 1)|0;
          $l$5 = $1866;$spos$10 = $1867;
         }
         $1881 = (($spos$0) + ($1863))|0;
         $apos$4 = $apos$0;$spos$14 = $1881;
         break L360;
        }
       }
      }
      $1870 = (($spos$0) + ($1487))|0;
      $apos$4 = $apos$0;$spos$14 = $1870;
      break;
     }
     case 5:  {
      $1871 = (($spos$0) + 1)|0;
      HEAP32[$f$i52>>2] = $1871;
      HEAP32[$1476>>2] = 72;
      HEAP32[$1477>>2] = $1487;
      $1872 = HEAP32[$1478>>2]|0;
      _cram_stats_add($1872,$1487);
      $1873 = (_cram_add_feature($c,$s,$cr,$f$i52)|0);
      $1874 = ($1873|0)==(0);
      if ($1874) {
       $apos$4 = $apos$0;$spos$14 = $spos$0;
      } else {
       $$0 = -1;
       label = 426;
       break L357;
      }
      break;
     }
     case 6:  {
      $1875 = (($spos$0) + 1)|0;
      HEAP32[$f$i53>>2] = $1875;
      HEAP32[$1479>>2] = 80;
      HEAP32[$1480>>2] = $1487;
      $1876 = HEAP32[$1481>>2]|0;
      _cram_stats_add($1876,$1487);
      $1877 = (_cram_add_feature($c,$s,$cr,$f$i53)|0);
      $1878 = ($1877|0)==(0);
      if ($1878) {
       $apos$4 = $apos$0;$spos$14 = $spos$0;
      } else {
       $$0 = -1;
       label = 426;
       break L357;
      }
      break;
     }
     default: {
      $apos$4 = $apos$0;$spos$14 = $spos$0;
     }
     }
    } while(0);
    $1882 = (($i$1) + 1)|0;
    $$pre228 = HEAP32[$1423>>2]|0;
    $1483 = $$pre228;$apos$0 = $apos$4;$i$1 = $1882;$spos$0 = $spos$14;
   }
   if ((label|0) == 269) {
    _fprintf(9772,18350,$vararg_buffer17);
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 365) {
    $1883 = HEAP32[$13>>2]|0;
    $1884 = ($1883|0)==(0);
    $1885 = ($spos$0|0)==($1883|0);
    $or$cond = $1884 | $1885;
    if (!($or$cond)) {
     _fprintf(9772,18350,$vararg_buffer19);
     $$0 = -1;
     STACKTOP = sp;return ($$0|0);
    }
    $1886 = HEAP32[$1243>>2]|0;
    $1887 = ($1886|0)==(0);
    if ($1887) {
     $1888 = HEAP32[$1451>>2]|0;
     $1889 = ($apos$0|0)<($1888|0);
     $apos$0$ = $1889 ? $apos$0 : $1888;
     $1891 = $apos$0$;
    } else {
     $1891 = $apos$0;
    }
    $1890 = ((($cr)) + 88|0);
    HEAP32[$1890>>2] = $1891;
    $1892 = ((($c)) + 256|0);
    $1893 = HEAP32[$1892>>2]|0;
    $1894 = HEAP32[$1450>>2]|0;
    _cram_stats_add($1893,$1894);
    $$pr420 = HEAP32[$13>>2]|0;
    $$pre$phi246Z2D = $1475;$1915 = $$pr420;$fake_qual$0 = $spos$0;
    break;
   }
   else if ((label|0) == 426) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $1895 = ((($cr)) + 12|0);
   $1896 = HEAP32[$1895>>2]|0;
   $1897 = $1896 | 1;
   HEAP32[$1895>>2] = $1897;
   $1898 = ((($cr)) + 80|0);
   HEAP32[$1898>>2] = 0;
   $1899 = ((($cr)) + 84|0);
   HEAP32[$1899>>2] = 0;
   $1900 = ((($cr)) + 100|0);
   HEAP32[$1900>>2] = 0;
   $1901 = HEAP32[$1278>>2]|0;
   $1902 = ((($cr)) + 88|0);
   HEAP32[$1902>>2] = $1901;
   $1903 = ((($c)) + 272|0);
   $i$2 = 0;
   while(1) {
    $1904 = HEAP32[$13>>2]|0;
    $1905 = ($i$2|0)<($1904|0);
    if (!($1905)) {
     $$pre$phi246Z2D = $1895;$1915 = $1904;$fake_qual$0 = 0;
     break L348;
    }
    $1906 = HEAP32[$1903>>2]|0;
    $1907 = (($1352) + ($i$2)|0);
    $1908 = HEAP8[$1907>>0]|0;
    $1909 = $1908 << 24 >> 24;
    _cram_stats_add($1906,$1909);
    $1910 = (($i$2) + 1)|0;
    $i$2 = $1910;
   }
  }
 } while(0);
 $1911 = HEAP32[$$pre$phi246Z2D>>2]|0;
 $1912 = $1911 & 1;
 $1913 = ($1912|0)==(0);
 $1914 = ($1915|0)==(0);
 if ($1913) {
  if ($1914) {
   $1988 = ($fake_qual$0|0)>(-1);
   if ($1988) {
    $1994 = $fake_qual$0;
   } else {
    $1989 = ((($cr)) + 88|0);
    $1990 = HEAP32[$1989>>2]|0;
    $1991 = HEAP32[$1278>>2]|0;
    $1992 = (($1990) - ($1991))|0;
    $1993 = (($1992) + 1)|0;
    $1994 = $1993;
   }
   HEAP32[$13>>2] = $1994;
   $1997 = $1994;
  } else {
   $1997 = $1915;
  }
 } else {
  if ($1914) {
   HEAP32[$13>>2] = $fake_qual$0;
   $1922 = $fake_qual$0;
   while(1) {
    $1916 = HEAP32[$1299>>2]|0;
    $1917 = ((($1916)) + 36|0);
    $1918 = HEAP32[$1917>>2]|0;
    $1919 = ((($1916)) + 40|0);
    $1920 = HEAP32[$1919>>2]|0;
    $1921 = (($1920) + ($1922))|0;
    $1923 = ($1918>>>0)>($1921>>>0);
    if ($1923) {
     break;
    }
    $1924 = ($1918|0)==(0);
    $1925 = (+($1918>>>0));
    $1926 = $1925 * 1.5;
    $1927 = (~~(($1926))>>>0);
    $1928 = $1924 ? 1024 : $1927;
    HEAP32[$1917>>2] = $1928;
    $1929 = HEAP32[$1299>>2]|0;
    $1930 = ((($1929)) + 32|0);
    $1931 = HEAP32[$1930>>2]|0;
    $1932 = ((($1929)) + 36|0);
    $1933 = HEAP32[$1932>>2]|0;
    $1934 = (_realloc($1931,$1933)|0);
    $1935 = HEAP32[$1299>>2]|0;
    $1936 = ((($1935)) + 32|0);
    HEAP32[$1936>>2] = $1934;
    $$pre230 = HEAP32[$13>>2]|0;
    $1922 = $$pre230;
   }
   $1937 = ((($1916)) + 32|0);
   $1938 = HEAP32[$1937>>2]|0;
   $1939 = (($1938) + ($1920)|0);
   _memset(($1939|0),-1,($1922|0))|0;
  } else {
   $1946 = $1915;
   while(1) {
    $1940 = HEAP32[$1299>>2]|0;
    $1941 = ((($1940)) + 36|0);
    $1942 = HEAP32[$1941>>2]|0;
    $1943 = ((($1940)) + 40|0);
    $1944 = HEAP32[$1943>>2]|0;
    $1945 = (($1944) + ($1946))|0;
    $1947 = ($1942>>>0)>($1945>>>0);
    if ($1947) {
     break;
    }
    $1948 = ($1942|0)==(0);
    $1949 = (+($1942>>>0));
    $1950 = $1949 * 1.5;
    $1951 = (~~(($1950))>>>0);
    $1952 = $1948 ? 1024 : $1951;
    HEAP32[$1941>>2] = $1952;
    $1953 = HEAP32[$1299>>2]|0;
    $1954 = ((($1953)) + 32|0);
    $1955 = HEAP32[$1954>>2]|0;
    $1956 = ((($1953)) + 36|0);
    $1957 = HEAP32[$1956>>2]|0;
    $1958 = (_realloc($1955,$1957)|0);
    $1959 = HEAP32[$1299>>2]|0;
    $1960 = ((($1959)) + 32|0);
    HEAP32[$1960>>2] = $1958;
    $$pre229 = HEAP32[$13>>2]|0;
    $1946 = $$pre229;
   }
   $1961 = ((($1940)) + 32|0);
   $1962 = HEAP32[$1961>>2]|0;
   $1963 = (($1962) + ($1944)|0);
   $1964 = HEAP32[$1353>>2]|0;
   $1965 = $2;
   $1966 = $1965;
   $1967 = HEAP32[$1966>>2]|0;
   $1968 = (($1965) + 4)|0;
   $1969 = $1968;
   $1970 = HEAP32[$1969>>2]|0;
   $1971 = (_bitshift64Lshr(($1967|0),($1970|0),46)|0);
   $1972 = tempRet0;
   $1973 = $1971 & 262140;
   $1974 = (($1964) + ($1973)|0);
   $1975 = (_bitshift64Lshr(($1967|0),($1970|0),24)|0);
   $1976 = tempRet0;
   $1977 = $1975 & 255;
   $1978 = (($1974) + ($1977)|0);
   $1979 = HEAP32[$11>>2]|0;
   $1980 = (($1979) + 1)|0;
   $1981 = $1980 >> 1;
   $1982 = (($1978) + ($1981)|0);
   _memcpy(($1963|0),($1982|0),($1946|0))|0;
  }
  $1983 = HEAP32[$13>>2]|0;
  $1984 = HEAP32[$1299>>2]|0;
  $1985 = ((($1984)) + 40|0);
  $1986 = HEAP32[$1985>>2]|0;
  $1987 = (($1986) + ($1983))|0;
  HEAP32[$1985>>2] = $1987;
  $$pre231 = HEAP32[$13>>2]|0;
  $1997 = $$pre231;
 }
 $1995 = ((($c)) + 252|0);
 $1996 = HEAP32[$1995>>2]|0;
 _cram_stats_add($1996,$1997);
 $1998 = HEAP32[$10>>2]|0;
 $1999 = $1998 >>> 8;
 $$lobit = $1999 & 1;
 $2000 = $1998 & 1;
 $2001 = ($2000|0)==(0);
 do {
  if ($2001) {
   HEAP32[$new>>2] = 1;
   label = 416;
  } else {
   $2002 = ((($s)) + 120|0);
   $2003 = HEAP32[$2002>>2]|0;
   $2004 = HEAP32[$1353>>2]|0;
   $2005 = $2;
   $2006 = $2005;
   $2007 = HEAP32[$2006>>2]|0;
   $2008 = (($2005) + 4)|0;
   $2009 = $2008;
   $2010 = HEAP32[$2009>>2]|0;
   $2011 = (_bitshift64Lshr(($2007|0),($2010|0),24)|0);
   $2012 = tempRet0;
   $2013 = $2011 & 255;
   $2014 = (_string_ndup($2003,$2004,$2013)|0);
   $2015 = ($2014|0)==(0|0);
   if ($2015) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $2016 = (((($s)) + 124|0) + ($$lobit<<2)|0);
   $2017 = HEAP32[$2016>>2]|0;
   $2018 = (_kh_put_m_s2i($2017,$2014,$new)|0);
   $2019 = HEAP32[$new>>2]|0;
   $2020 = ($2019|0)==(-1);
   if ($2020) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $2021 = ($2019|0)>(0);
   if ($2021) {
    $2022 = HEAP32[$2016>>2]|0;
    $2023 = ((($2022)) + 24|0);
    $2024 = HEAP32[$2023>>2]|0;
    $2025 = (($2024) + ($2018<<2)|0);
    HEAP32[$2025>>2] = $rnum;
    label = 416;
    break;
   }
   $2026 = ($2019|0)==(0);
   if ($2026) {
    $2027 = HEAP32[$2016>>2]|0;
    $2028 = ((($2027)) + 24|0);
    $2029 = HEAP32[$2028>>2]|0;
    $2030 = (($2029) + ($2018<<2)|0);
    $2031 = HEAP32[$2030>>2]|0;
    $2032 = ((($s)) + 24|0);
    $2033 = HEAP32[$2032>>2]|0;
    $2034 = HEAP32[$1278>>2]|0;
    $2035 = (((($2033) + (($2031*108)|0)|0)) + 20|0);
    $2036 = HEAP32[$2035>>2]|0;
    $2037 = ($2034|0)<($2036|0);
    $$408 = $2037 ? $2034 : $2036;
    $2038 = ((($cr)) + 88|0);
    $2039 = HEAP32[$2038>>2]|0;
    $2040 = (((($2033) + (($2031*108)|0)|0)) + 88|0);
    $2041 = HEAP32[$2040>>2]|0;
    $2042 = ($2039|0)>($2041|0);
    $2043 = $2042 ? $2039 : $2041;
    if ($2037) {
     $sign$2 = 1;
    } else {
     $2044 = ($2034|0)>($2036|0);
     if ($2044) {
      $sign$2 = -1;
     } else {
      $2045 = HEAP32[$10>>2]|0;
      $2046 = $2045 >>> 5;
      $2047 = $2046 & 2;
      $2048 = (($2047) + -1)|0;
      $sign$2 = $2048;
     }
    }
    $2049 = ((($b)) + 28|0);
    $2050 = HEAP32[$2049>>2]|0;
    $2051 = (($2043) - ($$408))|0;
    $2052 = (($2051) + 1)|0;
    $2053 = Math_imul($sign$2, $2052)|0;
    $2054 = ($2050|0)==($2053|0);
    if ($2054) {
     $2055 = ((($b)) + 24|0);
     $2056 = HEAP32[$2055>>2]|0;
     $2057 = ($2056|0)>(-1);
     $2058 = (($2056) + 1)|0;
     $$410 = $2057 ? $2058 : 0;
     $2059 = ($$410|0)==($2036|0);
     if ($2059) {
      $2060 = $2;
      $2061 = $2060;
      $2062 = HEAP32[$2061>>2]|0;
      $2063 = (($2060) + 4)|0;
      $2064 = $2063;
      $2065 = HEAP32[$2064>>2]|0;
      $2066 = (_bitshift64Lshr(($2062|0),($2065|0),35)|0);
      $2067 = tempRet0;
      $2068 = (((($2033) + (($2031*108)|0)|0)) + 8|0);
      $2069 = HEAP32[$2068>>2]|0;
      $2070 = $2069 >>> 2;
      $2071 = $2066 ^ $2070;
      $2072 = $2071 & 1;
      $2073 = ($2072|0)==(0);
      if ($2073) {
       $2074 = (_bitshift64Lshr(($2062|0),($2065|0),37)|0);
       $2075 = tempRet0;
       $2076 = $2069 >>> 4;
       $2077 = $2074 ^ $2076;
       $2078 = $2077 & 1;
       $2079 = ($2078|0)==(0);
       if ($2079) {
        $2080 = (((($2033) + (($2031*108)|0)|0)) + 4|0);
        $2081 = HEAP32[$2080>>2]|0;
        $2082 = HEAP32[$1234>>2]|0;
        $2083 = ($2081|0)==($2082|0);
        if ($2083) {
         $2084 = (((($2033) + (($2031*108)|0)|0)) + 48|0);
         $2085 = HEAP32[$2084>>2]|0;
         $2086 = (0 - ($sign$2))|0;
         $2087 = Math_imul($2052, $2086)|0;
         $2088 = ($2085|0)==($2087|0);
         if ($2088) {
          $2089 = (((($2033) + (($2031*108)|0)|0)) + 44|0);
          $2090 = HEAP32[$2089>>2]|0;
          $2091 = ($2090|0)==($2034|0);
          if (!($2091)) {
           label = 416;
           break;
          }
          $2092 = $2069 >>> 3;
          $2093 = (((($2033) + (($2031*108)|0)|0)) + 104|0);
          $2094 = HEAP32[$2093>>2]|0;
          $2095 = $2094 >>> 1;
          $2096 = $2092 ^ $2095;
          $2097 = $2096 & 1;
          $2098 = ($2097|0)==(0);
          if (!($2098)) {
           label = 416;
           break;
          }
          $2099 = $2069 >>> 5;
          $2100 = $2099 ^ $2094;
          $2101 = $2100 & 1;
          $2102 = ($2101|0)==(0);
          if (!($2102)) {
           label = 416;
           break;
          }
          $2103 = HEAP32[$10>>2]|0;
          $2104 = $2103 | $2069;
          $2105 = $2104 & 2048;
          $2106 = ($2105|0)==(0);
          if (!($2106)) {
           label = 416;
           break;
          }
          $2107 = ((($fd)) + 34772|0);
          $2108 = HEAP32[$2107>>2]|0;
          $2109 = ($2108|0)==(0);
          if ($2109) {
           $$pre254 = (((($2033) + (($2031*108)|0)|0)) + 12|0);
           $$pre$phi255Z2D = $$pre254;
          } else {
           $2110 = HEAP32[$$pre$phi246Z2D>>2]|0;
           $2111 = ($2110|0)<(0);
           if (!($2111)) {
            label = 416;
            break;
           }
           $2112 = (((($2033) + (($2031*108)|0)|0)) + 12|0);
           $2113 = HEAP32[$2112>>2]|0;
           $2114 = ($2113|0)<(0);
           if ($2114) {
            $$pre$phi255Z2D = $2112;
           } else {
            label = 416;
            break;
           }
          }
          $2115 = ((($cr)) + 44|0);
          HEAP32[$2115>>2] = $2036;
          $2116 = ((($cr)) + 48|0);
          HEAP32[$2116>>2] = $2050;
          $2117 = HEAP32[$2068>>2]|0;
          $2118 = $2117 >>> 2;
          $2119 = $2118 & 2;
          $2120 = $2117 >>> 5;
          $$lobit22 = $2120 & 1;
          $2121 = $2119 | $$lobit22;
          $2122 = ((($cr)) + 104|0);
          HEAP32[$2122>>2] = $2121;
          $2123 = HEAP32[$$pre$phi255Z2D>>2]|0;
          $2124 = $2123 & 1073741824;
          $2125 = ($2124|0)==(0);
          if (!($2125)) {
           $2126 = ((($c)) + 244|0);
           $2127 = HEAP32[$2126>>2]|0;
           $2128 = HEAP32[$2089>>2]|0;
           _cram_stats_del($2127,$2128);
           $2129 = ((($c)) + 236|0);
           $2130 = HEAP32[$2129>>2]|0;
           $2131 = HEAP32[$2093>>2]|0;
           _cram_stats_del($2130,$2131);
           $2132 = ((($c)) + 240|0);
           $2133 = HEAP32[$2132>>2]|0;
           $2134 = HEAP32[$2084>>2]|0;
           _cram_stats_del($2133,$2134);
           $2135 = ((($c)) + 232|0);
           $2136 = HEAP32[$2135>>2]|0;
           $2137 = (((($2033) + (($2031*108)|0)|0)) + 40|0);
           $2138 = HEAP32[$2137>>2]|0;
           _cram_stats_del($2136,$2138);
          }
          $2139 = HEAP32[$$pre$phi246Z2D>>2]|0;
          $2140 = $2139 & -3;
          HEAP32[$$pre$phi246Z2D>>2] = $2140;
          $2141 = ((($c)) + 216|0);
          $2142 = HEAP32[$2141>>2]|0;
          $2143 = $2139 & 13;
          _cram_stats_add($2142,$2143);
          $2144 = HEAP32[$$pre$phi255Z2D>>2]|0;
          $2145 = $2144 & 1073741824;
          $2146 = ($2145|0)==(0);
          if ($2146) {
           $2152 = $2144;
          } else {
           $2147 = HEAP32[$2141>>2]|0;
           $2148 = $2144 & 15;
           _cram_stats_del($2147,$2148);
           $2149 = HEAP32[$$pre$phi255Z2D>>2]|0;
           $2150 = $2149 & -1073741825;
           HEAP32[$$pre$phi255Z2D>>2] = $2150;
           $2152 = $2150;
          }
          $2151 = $2152 & -7;
          $2153 = $2151 | 4;
          HEAP32[$$pre$phi255Z2D>>2] = $2153;
          $2154 = HEAP32[$2141>>2]|0;
          $2155 = $2153 & 13;
          _cram_stats_add($2154,$2155);
          $2156 = HEAP32[$2016>>2]|0;
          $2157 = ((($2156)) + 24|0);
          $2158 = HEAP32[$2157>>2]|0;
          $2159 = (($2158) + ($2018<<2)|0);
          $2160 = HEAP32[$2159>>2]|0;
          $2161 = (($2160) + 1)|0;
          $2162 = (($rnum) - ($2161))|0;
          $2163 = (((($2033) + (($2031*108)|0)|0)) + 36|0);
          HEAP32[$2163>>2] = $2162;
          $2164 = ((($c)) + 248|0);
          $2165 = HEAP32[$2164>>2]|0;
          _cram_stats_add($2165,$2162);
          $2166 = HEAP32[$2016>>2]|0;
          $2167 = ((($2166)) + 24|0);
          $2168 = HEAP32[$2167>>2]|0;
          $2169 = (($2168) + ($2018<<2)|0);
          HEAP32[$2169>>2] = $rnum;
          $$pre247 = ((($b)) + 20|0);
          $$pre$phi248Z2D = $$pre247;
         } else {
          label = 416;
         }
        } else {
         label = 416;
        }
       } else {
        label = 416;
       }
      } else {
       label = 416;
      }
     } else {
      label = 416;
     }
    } else {
     label = 416;
    }
   } else {
    label = 416;
   }
  }
 } while(0);
 if ((label|0) == 416) {
  $2170 = ((($cr)) + 104|0);
  HEAP32[$2170>>2] = 0;
  $2171 = $2;
  $2172 = $2171;
  $2173 = HEAP32[$2172>>2]|0;
  $2174 = (($2171) + 4)|0;
  $2175 = $2174;
  $2176 = HEAP32[$2175>>2]|0;
  $2177 = $2176 & 8;
  $2178 = (0)==(0);
  $2179 = ($2177|0)==(0);
  $2180 = $2178 & $2179;
  if ($2180) {
   $2188 = $2176;$2193 = 0;$2258 = $2173;
  } else {
   HEAP32[$2170>>2] = 2;
   $2181 = $2;
   $2182 = $2181;
   $2183 = HEAP32[$2182>>2]|0;
   $2184 = (($2181) + 4)|0;
   $2185 = $2184;
   $2186 = HEAP32[$2185>>2]|0;
   $2188 = $2186;$2193 = 2;$2258 = $2183;
  }
  $2187 = $2188 & 32;
  $2189 = (0)==(0);
  $2190 = ($2187|0)==(0);
  $2191 = $2189 & $2190;
  if ($2191) {
   $2196 = $2193;
  } else {
   $2192 = $2193 | 1;
   HEAP32[$2170>>2] = $2192;
   $2196 = $2192;
  }
  $2194 = ((($c)) + 236|0);
  $2195 = HEAP32[$2194>>2]|0;
  _cram_stats_add($2195,$2196);
  $2197 = ((($b)) + 24|0);
  $2198 = HEAP32[$2197>>2]|0;
  $2199 = ($2198|0)>(-1);
  $2200 = (($2198) + 1)|0;
  $$413 = $2199 ? $2200 : 0;
  $2201 = ((($cr)) + 44|0);
  HEAP32[$2201>>2] = $$413;
  $2202 = ((($c)) + 244|0);
  $2203 = HEAP32[$2202>>2]|0;
  _cram_stats_add($2203,$$413);
  $2204 = ((($b)) + 28|0);
  $2205 = HEAP32[$2204>>2]|0;
  $2206 = ((($cr)) + 48|0);
  HEAP32[$2206>>2] = $2205;
  $2207 = ((($c)) + 240|0);
  $2208 = HEAP32[$2207>>2]|0;
  _cram_stats_add($2208,$2205);
  $2209 = HEAP32[$$pre$phi246Z2D>>2]|0;
  $2210 = $2209 | 2;
  HEAP32[$$pre$phi246Z2D>>2] = $2210;
  $2211 = ((($c)) + 216|0);
  $2212 = HEAP32[$2211>>2]|0;
  $2213 = $2210 & 15;
  _cram_stats_add($2212,$2213);
  $2214 = ((($c)) + 232|0);
  $2215 = HEAP32[$2214>>2]|0;
  $2216 = ((($b)) + 20|0);
  $2217 = HEAP32[$2216>>2]|0;
  _cram_stats_add($2215,$2217);
  $2218 = HEAP32[$$pre$phi246Z2D>>2]|0;
  $2219 = $2218 | 1073741824;
  HEAP32[$$pre$phi246Z2D>>2] = $2219;
  $$pre$phi248Z2D = $2216;
 }
 $2220 = $2;
 $2221 = $2220;
 $2222 = HEAP32[$2221>>2]|0;
 $2223 = (($2220) + 4)|0;
 $2224 = $2223;
 $2225 = HEAP32[$2224>>2]|0;
 $2226 = (_bitshift64Lshr(($2222|0),($2225|0),16)|0);
 $2227 = tempRet0;
 $2228 = $2226 & 255;
 $2229 = ((($cr)) + 92|0);
 HEAP32[$2229>>2] = $2228;
 $2230 = ((($c)) + 228|0);
 $2231 = HEAP32[$2230>>2]|0;
 _cram_stats_add($2231,$2228);
 $2232 = HEAP32[$$pre$phi248Z2D>>2]|0;
 $2233 = ((($cr)) + 40|0);
 HEAP32[$2233>>2] = $2232;
 $2234 = $2;
 $2235 = $2234;
 $2236 = HEAP32[$2235>>2]|0;
 $2237 = (($2234) + 4)|0;
 $2238 = $2237;
 $2239 = HEAP32[$2238>>2]|0;
 $2240 = $2239 & 4;
 $2241 = (0)==(0);
 $2242 = ($2240|0)==(0);
 $2243 = $2241 & $2242;
 if (!($2243)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2244 = ((($c)) + 128|0);
 $2245 = HEAP32[$2244>>2]|0;
 $2246 = HEAP32[$1278>>2]|0;
 $2247 = ($2245|0)>($2246|0);
 if ($2247) {
  HEAP32[$2244>>2] = $2246;
 }
 $2248 = ((($c)) + 132|0);
 $2249 = HEAP32[$2248>>2]|0;
 $2250 = ((($cr)) + 88|0);
 $2251 = HEAP32[$2250>>2]|0;
 $2252 = ($2249|0)<($2251|0);
 if (!($2252)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$2248>>2] = $2251;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _kh_put_s_i2i($h,$key,$ret) {
 $h = $h|0;
 $key = $key|0;
 $ret = $ret|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $i$0 = 0, $i$1 = 0, $i$1$site$2 = 0, $i$13 = 0;
 var $or$cond = 0, $site$0 = 0, $site$0$i$0 = 0, $site$24 = 0, $step$0 = 0, $storemerge1 = 0, $x$0 = 0, $x$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($h)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($h)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 do {
  if (!($4)) {
   $5 = HEAP32[$h>>2]|0;
   $6 = ((($h)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7 << 1;
   $9 = ($5>>>0)>($8>>>0);
   if ($9) {
    $10 = (($5) + -1)|0;
    $11 = (_kh_resize_s_i2i($h,$10)|0);
    $12 = ($11|0)<(0);
    if (!($12)) {
     break;
    }
    HEAP32[$ret>>2] = -1;
    return;
   } else {
    $13 = (($5) + 1)|0;
    $14 = (_kh_resize_s_i2i($h,$13)|0);
    $15 = ($14|0)<(0);
    if (!($15)) {
     break;
    }
    HEAP32[$ret>>2] = -1;
    return;
   }
  }
 } while(0);
 $16 = HEAP32[$h>>2]|0;
 $17 = (($16) + -1)|0;
 $18 = $17 & $key;
 $19 = $18 >>> 4;
 $20 = ((($h)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($19<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $18 << 1;
 $25 = $24 & 30;
 $26 = 2 << $25;
 $27 = $23 & $26;
 $28 = ($27|0)==(0);
 do {
  if ($28) {
   $29 = ((($h)) + 20|0);
   $i$0 = $18;$site$0 = $16;$step$0 = 0;
   while(1) {
    $30 = $i$0 >>> 4;
    $31 = (($21) + ($30<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $i$0 << 1;
    $34 = $33 & 30;
    $35 = 2 << $34;
    $36 = $32 & $35;
    $37 = ($36|0)==(0);
    if (!($37)) {
     $i$13 = $i$0;$site$24 = $site$0;
     break;
    }
    $38 = 1 << $34;
    $39 = $32 & $38;
    $40 = ($39|0)==(0);
    if ($40) {
     $41 = HEAP32[$29>>2]|0;
     $42 = (($41) + ($i$0<<2)|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==($key|0);
     if ($44) {
      $i$13 = $i$0;$site$24 = $site$0;
      break;
     }
    }
    $site$0$i$0 = $40 ? $site$0 : $i$0;
    $45 = (($step$0) + 1)|0;
    $46 = (($i$0) + ($45))|0;
    $47 = $46 & $17;
    $48 = ($47|0)==($18|0);
    if ($48) {
     $i$1 = $18;$x$0 = $site$0$i$0;
     label = 13;
     break;
    } else {
     $i$0 = $47;$site$0 = $site$0$i$0;$step$0 = $45;
    }
   }
   if ((label|0) == 13) {
    $49 = ($x$0|0)==($16|0);
    if ($49) {
     $i$13 = $i$1;$site$24 = $x$0;
    } else {
     $x$3 = $x$0;
     break;
    }
   }
   $50 = $i$13 >>> 4;
   $51 = (($21) + ($50<<2)|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $i$13 << 1;
   $54 = $53 & 30;
   $55 = 2 << $54;
   $56 = $52 & $55;
   $57 = ($56|0)==(0);
   $58 = ($site$24|0)==($16|0);
   $or$cond = $57 | $58;
   $i$1$site$2 = $or$cond ? $i$13 : $site$24;
   $x$3 = $i$1$site$2;
  } else {
   $x$3 = $18;
  }
 } while(0);
 $59 = $x$3 >>> 4;
 $60 = (($21) + ($59<<2)|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $x$3 << 1;
 $63 = $62 & 30;
 $64 = 2 << $63;
 $65 = $61 & $64;
 $66 = ($65|0)==(0);
 if ($66) {
  $81 = 1 << $63;
  $82 = $61 & $81;
  $83 = ($82|0)==(0);
  if ($83) {
   $storemerge1 = 0;
  } else {
   $84 = ((($h)) + 20|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = (($85) + ($x$3<<2)|0);
   HEAP32[$86>>2] = $key;
   $87 = 3 << $63;
   $88 = $87 ^ -1;
   $89 = HEAP32[$20>>2]|0;
   $90 = (($89) + ($59<<2)|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $91 & $88;
   HEAP32[$90>>2] = $92;
   $93 = ((($h)) + 4|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = (($94) + 1)|0;
   HEAP32[$93>>2] = $95;
   $storemerge1 = 2;
  }
 } else {
  $67 = ((($h)) + 20|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + ($x$3<<2)|0);
  HEAP32[$69>>2] = $key;
  $70 = 3 << $63;
  $71 = $70 ^ -1;
  $72 = HEAP32[$20>>2]|0;
  $73 = (($72) + ($59<<2)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $74 & $71;
  HEAP32[$73>>2] = $75;
  $76 = ((($h)) + 4|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + 1)|0;
  HEAP32[$76>>2] = $78;
  $79 = HEAP32[$0>>2]|0;
  $80 = (($79) + 1)|0;
  HEAP32[$0>>2] = $80;
  $storemerge1 = 1;
 }
 HEAP32[$ret>>2] = $storemerge1;
 return;
}
function _kh_resize_s_i2i($h,$new_n_buckets) {
 $h = $h|0;
 $new_n_buckets = $new_n_buckets|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $i$0 = 0, $j$1 = 0, $key$0 = 0, $key$0$pn = 0, $phitmp = 0, $phitmp2 = 0, $step$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($new_n_buckets) + -1)|0;
 $1 = $0 >>> 1;
 $2 = $0 | $1;
 $3 = $2 >>> 2;
 $4 = $2 | $3;
 $5 = $4 >>> 4;
 $6 = $4 | $5;
 $7 = $6 >>> 8;
 $8 = $6 | $7;
 $9 = $8 >>> 16;
 $10 = $8 | $9;
 $11 = (($10) + 1)|0;
 $12 = ($11>>>0)<(4);
 $$ = $12 ? 4 : $11;
 $13 = ((($h)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($$>>>0));
 $16 = $15 * 0.77000000000000001;
 $17 = $16 + 0.5;
 $18 = (~~(($17))>>>0);
 $19 = ($14>>>0)<($18>>>0);
 if (!($19)) {
  $$0 = 0;
  return ($$0|0);
 }
 $20 = ($$>>>0)<(16);
 $21 = $$ >>> 4;
 $phitmp = $21 << 2;
 $22 = $20 ? 4 : $phitmp;
 $23 = (_malloc($22)|0);
 $24 = ($23|0)==(0|0);
 if ($24) {
  $$0 = -1;
  return ($$0|0);
 }
 $25 = $$ >>> 4;
 $phitmp2 = $25 << 2;
 $26 = $20 ? 4 : $phitmp2;
 _memset(($23|0),-86,($26|0))|0;
 $27 = HEAP32[$h>>2]|0;
 $28 = ($27>>>0)<($$>>>0);
 $29 = ((($h)) + 20|0);
 do {
  if ($28) {
   $30 = HEAP32[$29>>2]|0;
   $31 = $$ << 2;
   $32 = (_realloc($30,$31)|0);
   $33 = ($32|0)==(0|0);
   if (!($33)) {
    HEAP32[$29>>2] = $32;
    break;
   }
   _free($23);
   $$0 = -1;
   return ($$0|0);
  }
 } while(0);
 $34 = ((($h)) + 16|0);
 $35 = (($$) + -1)|0;
 $j$1 = 0;
 while(1) {
  $36 = HEAP32[$h>>2]|0;
  $37 = ($j$1|0)==($36|0);
  if ($37) {
   break;
  }
  $38 = $j$1 >>> 4;
  $39 = HEAP32[$34>>2]|0;
  $40 = (($39) + ($38<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $j$1 << 1;
  $43 = $42 & 30;
  $44 = 3 << $43;
  $45 = $41 & $44;
  $46 = ($45|0)==(0);
  if ($46) {
   $47 = HEAP32[$29>>2]|0;
   $48 = (($47) + ($j$1<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = 1 << $43;
   $51 = $41 | $50;
   HEAP32[$40>>2] = $51;
   $key$0 = $49;
   while(1) {
    $key$0$pn = $key$0;$step$0 = 0;
    while(1) {
     $i$0 = $key$0$pn & $35;
     $52 = $i$0 >>> 4;
     $53 = (($23) + ($52<<2)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = $i$0 << 1;
     $56 = $55 & 30;
     $57 = 2 << $56;
     $58 = $54 & $57;
     $59 = ($58|0)==(0);
     if (!($59)) {
      break;
     }
     $60 = (($step$0) + 1)|0;
     $61 = (($i$0) + ($60))|0;
     $key$0$pn = $61;$step$0 = $60;
    }
    $62 = $57 ^ -1;
    $63 = $54 & $62;
    HEAP32[$53>>2] = $63;
    $64 = HEAP32[$h>>2]|0;
    $65 = ($i$0>>>0)<($64>>>0);
    if (!($65)) {
     break;
    }
    $66 = HEAP32[$34>>2]|0;
    $67 = (($66) + ($52<<2)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = 3 << $56;
    $70 = $68 & $69;
    $71 = ($70|0)==(0);
    if (!($71)) {
     break;
    }
    $72 = HEAP32[$29>>2]|0;
    $73 = (($72) + ($i$0<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    HEAP32[$73>>2] = $key$0;
    $75 = 1 << $56;
    $76 = HEAP32[$34>>2]|0;
    $77 = (($76) + ($52<<2)|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = $78 | $75;
    HEAP32[$77>>2] = $79;
    $key$0 = $74;
   }
   $80 = HEAP32[$29>>2]|0;
   $81 = (($80) + ($i$0<<2)|0);
   HEAP32[$81>>2] = $key$0;
  }
  $82 = (($j$1) + 1)|0;
  $j$1 = $82;
 }
 $83 = ($j$1>>>0)>($$>>>0);
 if ($83) {
  $84 = HEAP32[$29>>2]|0;
  $85 = $$ << 2;
  $86 = (_realloc($84,$85)|0);
  HEAP32[$29>>2] = $86;
 }
 $87 = HEAP32[$34>>2]|0;
 _free($87);
 HEAP32[$34>>2] = $23;
 HEAP32[$h>>2] = $$;
 $88 = HEAP32[$13>>2]|0;
 $89 = ((($h)) + 8|0);
 HEAP32[$89>>2] = $88;
 $90 = ((($h)) + 12|0);
 HEAP32[$90>>2] = $18;
 $$0 = 0;
 return ($$0|0);
}
function _kh_put_m_s2i($h,$key,$ret) {
 $h = $h|0;
 $key = $key|0;
 $ret = $ret|0;
 var $$0 = 0, $$0$i = 0, $$014$i = 0, $$05$i = 0, $$lcssa$i = 0, $$lcssa2$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $h$0$i = 0, $h$1$i = 0, $i$0 = 0, $i$1 = 0, $i$1$site$2 = 0, $i$16 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond3$i = 0, $s$pn$i = 0, $site$0 = 0, $site$0$i$0 = 0, $site$27 = 0, $step$0 = 0, $storemerge1 = 0, $x$0 = 0, $x$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($h)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($h)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 do {
  if (!($4)) {
   $5 = HEAP32[$h>>2]|0;
   $6 = ((($h)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7 << 1;
   $9 = ($5>>>0)>($8>>>0);
   if ($9) {
    $10 = (($5) + -1)|0;
    $11 = (_kh_resize_m_s2i($h,$10)|0);
    $12 = ($11|0)<(0);
    if (!($12)) {
     break;
    }
    HEAP32[$ret>>2] = -1;
    $13 = HEAP32[$h>>2]|0;
    $$0 = $13;
    return ($$0|0);
   } else {
    $14 = (($5) + 1)|0;
    $15 = (_kh_resize_m_s2i($h,$14)|0);
    $16 = ($15|0)<(0);
    if (!($16)) {
     break;
    }
    HEAP32[$ret>>2] = -1;
    $17 = HEAP32[$h>>2]|0;
    $$0 = $17;
    return ($$0|0);
   }
  }
 } while(0);
 $18 = HEAP32[$h>>2]|0;
 $19 = (($18) + -1)|0;
 $20 = HEAP8[$key>>0]|0;
 $21 = $20 << 24 >> 24;
 $22 = ($20<<24>>24)==(0);
 L11: do {
  if ($22) {
   $h$1$i = $21;
  } else {
   $h$0$i = $21;$s$pn$i = $key;
   while(1) {
    $$0$i = ((($s$pn$i)) + 1|0);
    $23 = HEAP8[$$0$i>>0]|0;
    $24 = ($23<<24>>24)==(0);
    if ($24) {
     $h$1$i = $h$0$i;
     break L11;
    }
    $25 = ($h$0$i*31)|0;
    $26 = $23 << 24 >> 24;
    $27 = (($25) + ($26))|0;
    $h$0$i = $27;$s$pn$i = $$0$i;
   }
  }
 } while(0);
 $28 = $h$1$i & $19;
 $29 = $28 >>> 4;
 $30 = ((($h)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($29<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $28 << 1;
 $35 = $34 & 30;
 $36 = 2 << $35;
 $37 = $33 & $36;
 $38 = ($37|0)==(0);
 do {
  if ($38) {
   $39 = ((($h)) + 20|0);
   $i$0 = $28;$site$0 = $18;$step$0 = 0;
   while(1) {
    $40 = $i$0 >>> 4;
    $41 = (($31) + ($40<<2)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $i$0 << 1;
    $44 = $43 & 30;
    $45 = 2 << $44;
    $46 = $42 & $45;
    $47 = ($46|0)==(0);
    if (!($47)) {
     $i$16 = $i$0;$site$27 = $site$0;
     break;
    }
    $48 = 1 << $44;
    $49 = $42 & $48;
    $50 = ($49|0)==(0);
    if ($50) {
     $51 = HEAP32[$39>>2]|0;
     $52 = (($51) + ($i$0<<2)|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = HEAP8[$53>>0]|0;
     $55 = ($54<<24>>24)!=($20<<24>>24);
     $56 = ($54<<24>>24)==(0);
     $or$cond3$i = $56 | $55;
     if ($or$cond3$i) {
      $$lcssa$i = $54;$$lcssa2$i = $20;
     } else {
      $$014$i = $53;$$05$i = $key;
      while(1) {
       $57 = ((($$014$i)) + 1|0);
       $58 = ((($$05$i)) + 1|0);
       $59 = HEAP8[$57>>0]|0;
       $60 = HEAP8[$58>>0]|0;
       $61 = ($59<<24>>24)!=($60<<24>>24);
       $62 = ($59<<24>>24)==(0);
       $or$cond$i = $62 | $61;
       if ($or$cond$i) {
        $$lcssa$i = $59;$$lcssa2$i = $60;
        break;
       } else {
        $$014$i = $57;$$05$i = $58;
       }
      }
     }
     $63 = ($$lcssa$i<<24>>24)==($$lcssa2$i<<24>>24);
     if ($63) {
      $i$16 = $i$0;$site$27 = $site$0;
      break;
     }
    }
    $site$0$i$0 = $50 ? $site$0 : $i$0;
    $64 = (($step$0) + 1)|0;
    $65 = (($i$0) + ($64))|0;
    $66 = $65 & $19;
    $67 = ($66|0)==($28|0);
    if ($67) {
     $i$1 = $28;$x$0 = $site$0$i$0;
     label = 18;
     break;
    } else {
     $i$0 = $66;$site$0 = $site$0$i$0;$step$0 = $64;
    }
   }
   if ((label|0) == 18) {
    $68 = ($x$0|0)==($18|0);
    if ($68) {
     $i$16 = $i$1;$site$27 = $x$0;
    } else {
     $x$3 = $x$0;
     break;
    }
   }
   $69 = $i$16 >>> 4;
   $70 = (($31) + ($69<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $i$16 << 1;
   $73 = $72 & 30;
   $74 = 2 << $73;
   $75 = $71 & $74;
   $76 = ($75|0)==(0);
   $77 = ($site$27|0)==($18|0);
   $or$cond = $76 | $77;
   $i$1$site$2 = $or$cond ? $i$16 : $site$27;
   $x$3 = $i$1$site$2;
  } else {
   $x$3 = $28;
  }
 } while(0);
 $78 = $x$3 >>> 4;
 $79 = (($31) + ($78<<2)|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $x$3 << 1;
 $82 = $81 & 30;
 $83 = 2 << $82;
 $84 = $80 & $83;
 $85 = ($84|0)==(0);
 if ($85) {
  $100 = 1 << $82;
  $101 = $80 & $100;
  $102 = ($101|0)==(0);
  if ($102) {
   $storemerge1 = 0;
  } else {
   $103 = ((($h)) + 20|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (($104) + ($x$3<<2)|0);
   HEAP32[$105>>2] = $key;
   $106 = 3 << $82;
   $107 = $106 ^ -1;
   $108 = HEAP32[$30>>2]|0;
   $109 = (($108) + ($78<<2)|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $110 & $107;
   HEAP32[$109>>2] = $111;
   $112 = ((($h)) + 4|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = (($113) + 1)|0;
   HEAP32[$112>>2] = $114;
   $storemerge1 = 2;
  }
 } else {
  $86 = ((($h)) + 20|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($87) + ($x$3<<2)|0);
  HEAP32[$88>>2] = $key;
  $89 = 3 << $82;
  $90 = $89 ^ -1;
  $91 = HEAP32[$30>>2]|0;
  $92 = (($91) + ($78<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $93 & $90;
  HEAP32[$92>>2] = $94;
  $95 = ((($h)) + 4|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) + 1)|0;
  HEAP32[$95>>2] = $97;
  $98 = HEAP32[$0>>2]|0;
  $99 = (($98) + 1)|0;
  HEAP32[$0>>2] = $99;
  $storemerge1 = 1;
 }
 HEAP32[$ret>>2] = $storemerge1;
 $$0 = $x$3;
 return ($$0|0);
}
function _kh_resize_m_s2i($h,$new_n_buckets) {
 $h = $h|0;
 $new_n_buckets = $new_n_buckets|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$pn = 0, $$pre$phi5Z2D = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $h$0$i = 0;
 var $i$0 = 0, $j$1 = 0, $key$0 = 0, $phitmp = 0, $phitmp10 = 0, $s$pn$i = 0, $step$0 = 0, $val$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($new_n_buckets) + -1)|0;
 $1 = $0 >>> 1;
 $2 = $0 | $1;
 $3 = $2 >>> 2;
 $4 = $2 | $3;
 $5 = $4 >>> 4;
 $6 = $4 | $5;
 $7 = $6 >>> 8;
 $8 = $6 | $7;
 $9 = $8 >>> 16;
 $10 = $8 | $9;
 $11 = (($10) + 1)|0;
 $12 = ($11>>>0)<(4);
 $$ = $12 ? 4 : $11;
 $13 = ((($h)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($$>>>0));
 $16 = $15 * 0.77000000000000001;
 $17 = $16 + 0.5;
 $18 = (~~(($17))>>>0);
 $19 = ($14>>>0)<($18>>>0);
 if (!($19)) {
  $$0 = 0;
  return ($$0|0);
 }
 $20 = ($$>>>0)<(16);
 $21 = $$ >>> 4;
 $phitmp10 = $21 << 2;
 $22 = $20 ? 4 : $phitmp10;
 $23 = (_malloc($22)|0);
 $24 = ($23|0)==(0|0);
 if ($24) {
  $$0 = -1;
  return ($$0|0);
 }
 $25 = $$ >>> 4;
 $phitmp = $25 << 2;
 $26 = $20 ? 4 : $phitmp;
 _memset(($23|0),-86,($26|0))|0;
 $27 = HEAP32[$h>>2]|0;
 $28 = ($27>>>0)<($$>>>0);
 $29 = ((($h)) + 20|0);
 do {
  if ($28) {
   $30 = HEAP32[$29>>2]|0;
   $31 = $$ << 2;
   $32 = (_realloc($30,$31)|0);
   $33 = ($32|0)==(0|0);
   if ($33) {
    _free($23);
    $$0 = -1;
    return ($$0|0);
   }
   HEAP32[$29>>2] = $32;
   $34 = ((($h)) + 24|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (_realloc($35,$31)|0);
   $37 = ($36|0)==(0|0);
   if (!($37)) {
    HEAP32[$34>>2] = $36;
    $$pre$phi5Z2D = $34;
    break;
   }
   _free($23);
   $$0 = -1;
   return ($$0|0);
  } else {
   $$pre4 = ((($h)) + 24|0);
   $$pre$phi5Z2D = $$pre4;
  }
 } while(0);
 $38 = ((($h)) + 16|0);
 $39 = (($$) + -1)|0;
 $j$1 = 0;
 while(1) {
  $40 = HEAP32[$h>>2]|0;
  $41 = ($j$1|0)==($40|0);
  if ($41) {
   break;
  }
  $42 = $j$1 >>> 4;
  $43 = HEAP32[$38>>2]|0;
  $44 = (($43) + ($42<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $j$1 << 1;
  $47 = $46 & 30;
  $48 = 3 << $47;
  $49 = $45 & $48;
  $50 = ($49|0)==(0);
  if ($50) {
   $51 = HEAP32[$29>>2]|0;
   $52 = (($51) + ($j$1<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = HEAP32[$$pre$phi5Z2D>>2]|0;
   $55 = (($54) + ($j$1<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = 1 << $47;
   $58 = $45 | $57;
   HEAP32[$44>>2] = $58;
   $key$0 = $53;$val$0 = $56;
   while(1) {
    $59 = HEAP8[$key$0>>0]|0;
    $60 = $59 << 24 >> 24;
    $61 = ($59<<24>>24)==(0);
    L26: do {
     if ($61) {
      $$pn = $60;$step$0 = 0;
     } else {
      $h$0$i = $60;$s$pn$i = $key$0;
      while(1) {
       $$0$i = ((($s$pn$i)) + 1|0);
       $62 = HEAP8[$$0$i>>0]|0;
       $63 = ($62<<24>>24)==(0);
       if ($63) {
        $$pn = $h$0$i;$step$0 = 0;
        break L26;
       }
       $64 = ($h$0$i*31)|0;
       $65 = $62 << 24 >> 24;
       $66 = (($64) + ($65))|0;
       $h$0$i = $66;$s$pn$i = $$0$i;
      }
     }
    } while(0);
    while(1) {
     $i$0 = $$pn & $39;
     $67 = $i$0 >>> 4;
     $68 = (($23) + ($67<<2)|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $i$0 << 1;
     $71 = $70 & 30;
     $72 = 2 << $71;
     $73 = $69 & $72;
     $74 = ($73|0)==(0);
     if (!($74)) {
      break;
     }
     $75 = (($step$0) + 1)|0;
     $76 = (($i$0) + ($75))|0;
     $$pn = $76;$step$0 = $75;
    }
    $77 = $72 ^ -1;
    $78 = $69 & $77;
    HEAP32[$68>>2] = $78;
    $79 = HEAP32[$h>>2]|0;
    $80 = ($i$0>>>0)<($79>>>0);
    if (!($80)) {
     break;
    }
    $81 = HEAP32[$38>>2]|0;
    $82 = (($81) + ($67<<2)|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = 3 << $71;
    $85 = $83 & $84;
    $86 = ($85|0)==(0);
    if (!($86)) {
     break;
    }
    $87 = HEAP32[$29>>2]|0;
    $88 = (($87) + ($i$0<<2)|0);
    $89 = HEAP32[$88>>2]|0;
    HEAP32[$88>>2] = $key$0;
    $90 = HEAP32[$$pre$phi5Z2D>>2]|0;
    $91 = (($90) + ($i$0<<2)|0);
    $92 = HEAP32[$91>>2]|0;
    HEAP32[$91>>2] = $val$0;
    $93 = 1 << $71;
    $94 = HEAP32[$38>>2]|0;
    $95 = (($94) + ($67<<2)|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $96 | $93;
    HEAP32[$95>>2] = $97;
    $key$0 = $89;$val$0 = $92;
   }
   $98 = HEAP32[$29>>2]|0;
   $99 = (($98) + ($i$0<<2)|0);
   HEAP32[$99>>2] = $key$0;
   $100 = HEAP32[$$pre$phi5Z2D>>2]|0;
   $101 = (($100) + ($i$0<<2)|0);
   HEAP32[$101>>2] = $val$0;
  }
  $102 = (($j$1) + 1)|0;
  $j$1 = $102;
 }
 $103 = ($j$1>>>0)>($$>>>0);
 if ($103) {
  $104 = HEAP32[$29>>2]|0;
  $105 = $$ << 2;
  $106 = (_realloc($104,$105)|0);
  HEAP32[$29>>2] = $106;
  $107 = HEAP32[$$pre$phi5Z2D>>2]|0;
  $108 = (_realloc($107,$105)|0);
  HEAP32[$$pre$phi5Z2D>>2] = $108;
 }
 $109 = HEAP32[$38>>2]|0;
 _free($109);
 HEAP32[$38>>2] = $23;
 HEAP32[$h>>2] = $$;
 $110 = HEAP32[$13>>2]|0;
 $111 = ((($h)) + 8|0);
 HEAP32[$111>>2] = $110;
 $112 = ((($h)) + 12|0);
 HEAP32[$112>>2] = $18;
 $$0 = 0;
 return ($$0|0);
}
function _cram_add_feature($c,$s,$r,$f) {
 $c = $c|0;
 $s = $s|0;
 $r = $r|0;
 $f = $f|0;
 var $$ = 0, $$0 = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($s)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)<($3|0);
 if (!($4)) {
  $5 = ($3|0)==(0);
  $6 = $3 << 1;
  $$ = $5 ? 1024 : $6;
  HEAP32[$2>>2] = $$;
  $7 = ((($s)) + 40|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $$ << 4;
  $10 = (_realloc($8,$9)|0);
  HEAP32[$7>>2] = $10;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $$0 = -1;
   return ($$0|0);
  }
 }
 $12 = ((($r)) + 100|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$12>>2] = $14;
 $15 = ($13|0)==(0);
 if ($15) {
  $16 = HEAP32[$0>>2]|0;
  $17 = ((($r)) + 96|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($c)) + 264|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$f>>2]|0;
  _cram_stats_add($19,$20);
  $$pre = ((($s)) + 40|0);
  $$pre$phiZ2D = $$pre;
 } else {
  $21 = ((($c)) + 264|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[$f>>2]|0;
  $24 = ((($r)) + 96|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($14))|0;
  $27 = (($26) + -2)|0;
  $28 = ((($s)) + 40|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($27<<4)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($23) - ($31))|0;
  _cram_stats_add($22,$32);
  $$pre$phiZ2D = $28;
 }
 $33 = ((($c)) + 260|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($f)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 _cram_stats_add($34,$36);
 $37 = HEAP32[$0>>2]|0;
 $38 = (($37) + 1)|0;
 HEAP32[$0>>2] = $38;
 $39 = HEAP32[$$pre$phiZ2D>>2]|0;
 $40 = (($39) + ($37<<4)|0);
 ;HEAP32[$40>>2]=HEAP32[$f>>2]|0;HEAP32[$40+4>>2]=HEAP32[$f+4>>2]|0;HEAP32[$40+8>>2]=HEAP32[$f+8>>2]|0;HEAP32[$40+12>>2]=HEAP32[$f+12>>2]|0;
 $$0 = 0;
 return ($$0|0);
}
function _cram_add_base($c,$s,$r,$pos,$base,$qual) {
 $c = $c|0;
 $s = $s|0;
 $r = $r|0;
 $pos = $pos|0;
 $base = $base|0;
 $qual = $qual|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 $0 = (($pos) + 1)|0;
 HEAP32[$f>>2] = $0;
 $1 = ((($f)) + 4|0);
 HEAP32[$1>>2] = 66;
 $2 = $base << 24 >> 24;
 $3 = ((($f)) + 8|0);
 HEAP32[$3>>2] = $2;
 $4 = $qual << 24 >> 24;
 $5 = ((($f)) + 12|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($c)) + 272|0);
 $7 = HEAP32[$6>>2]|0;
 _cram_stats_add($7,$2);
 $8 = ((($c)) + 200|0);
 $9 = HEAP32[$8>>2]|0;
 _cram_stats_add($9,$4);
 $10 = ((($s)) + 72|0);
 while(1) {
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($11)) + 40|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 1)|0;
  $17 = ($13>>>0)>($16>>>0);
  if ($17) {
   break;
  }
  $18 = ($13|0)==(0);
  $19 = (+($13>>>0));
  $20 = $19 * 1.5;
  $21 = (~~(($20))>>>0);
  $22 = $18 ? 1024 : $21;
  HEAP32[$12>>2] = $22;
  $23 = HEAP32[$10>>2]|0;
  $24 = ((($23)) + 32|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($23)) + 36|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (_realloc($25,$27)|0);
  $29 = HEAP32[$10>>2]|0;
  $30 = ((($29)) + 32|0);
  HEAP32[$30>>2] = $28;
 }
 HEAP32[$14>>2] = $16;
 $31 = HEAP32[$10>>2]|0;
 $32 = ((($31)) + 32|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + ($15)|0);
 HEAP8[$34>>0] = $qual;
 $35 = (_cram_add_feature($c,$s,$r,$f)|0);
 STACKTOP = sp;return ($35|0);
}
function _cram_add_quality($c,$s,$r,$pos,$qual) {
 $c = $c|0;
 $s = $s|0;
 $r = $r|0;
 $pos = $pos|0;
 $qual = $qual|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 $0 = (($pos) + 1)|0;
 HEAP32[$f>>2] = $0;
 $1 = ((($f)) + 4|0);
 HEAP32[$1>>2] = 81;
 $2 = $qual << 24 >> 24;
 $3 = ((($f)) + 8|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($c)) + 200|0);
 $5 = HEAP32[$4>>2]|0;
 _cram_stats_add($5,$2);
 $6 = ((($s)) + 72|0);
 while(1) {
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 36|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($7)) + 40|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 1)|0;
  $13 = ($9>>>0)>($12>>>0);
  if ($13) {
   break;
  }
  $14 = ($9|0)==(0);
  $15 = (+($9>>>0));
  $16 = $15 * 1.5;
  $17 = (~~(($16))>>>0);
  $18 = $14 ? 1024 : $17;
  HEAP32[$8>>2] = $18;
  $19 = HEAP32[$6>>2]|0;
  $20 = ((($19)) + 32|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($19)) + 36|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_realloc($21,$23)|0);
  $25 = HEAP32[$6>>2]|0;
  $26 = ((($25)) + 32|0);
  HEAP32[$26>>2] = $24;
 }
 HEAP32[$10>>2] = $12;
 $27 = HEAP32[$6>>2]|0;
 $28 = ((($27)) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + ($11)|0);
 HEAP8[$30>>0] = $qual;
 (_cram_add_feature($c,$s,$r,$f)|0);
 STACKTOP = sp;return;
}
function _cram_index_free_recurse($e) {
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($e)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $i$0 = 0;
 while(1) {
  $3 = HEAP32[$e>>2]|0;
  $4 = ($i$0|0)<($3|0);
  if (!($4)) {
   break;
  }
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + (($i$0*48)|0)|0);
  _cram_index_free_recurse($6);
  $7 = (($i$0) + 1)|0;
  $i$0 = $7;
 }
 $8 = HEAP32[$0>>2]|0;
 _free($8);
 return;
}
function _itf8_decode_crc($fd,$val_p,$crc) {
 $fd = $fd|0;
 $val_p = $val_p|0;
 $crc = $crc|0;
 var $$0 = 0, $$pn = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = HEAP32[$fd>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 do {
  if ($5) {
   $$pn = $4;
  } else {
   $6 = (_refill_buffer($0)|0);
   $7 = ($6|0)>(0);
   if ($7) {
    $8 = HEAP32[$3>>2]|0;
    $$pn = $8;
    break;
   } else {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $storemerge = ((($$pn)) + 1|0);
 HEAP32[$3>>2] = $storemerge;
 $$sink = HEAP8[$$pn>>0]|0;
 $9 = $$sink&255;
 HEAP8[$c>>0] = $$sink;
 $10 = $9 >>> 4;
 $11 = (440 + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (504 + ($10<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $9 & $14;
 switch ($12|0) {
 case 0:  {
  HEAP32[$val_p>>2] = $15;
  $16 = HEAP32[$crc>>2]|0;
  $17 = (_crc32($16,$c,1)|0);
  HEAP32[$crc>>2] = $17;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 1:  {
  $18 = $15 << 8;
  $19 = HEAP32[$fd>>2]|0;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($19)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($21>>>0)>($23>>>0);
  if ($24) {
   $25 = ((($23)) + 1|0);
   HEAP32[$22>>2] = $25;
   $26 = HEAP8[$23>>0]|0;
   $27 = $26&255;
   $35 = $27;
  } else {
   $28 = (_refill_buffer($19)|0);
   $29 = ($28|0)>(0);
   if ($29) {
    $30 = HEAP32[$22>>2]|0;
    $31 = ((($30)) + 1|0);
    HEAP32[$22>>2] = $31;
    $32 = HEAP8[$30>>0]|0;
    $33 = $32&255;
    $35 = $33;
   } else {
    $35 = -1;
   }
  }
  $34 = $35&255;
  $36 = ((($c)) + 1|0);
  HEAP8[$36>>0] = $34;
  $37 = $35 & 255;
  $38 = $18 | $37;
  HEAP32[$val_p>>2] = $38;
  $39 = HEAP32[$crc>>2]|0;
  $40 = (_crc32($39,$c,2)|0);
  HEAP32[$crc>>2] = $40;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 2:  {
  $41 = $15 << 8;
  $42 = HEAP32[$fd>>2]|0;
  $43 = ((($42)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($42)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($44>>>0)>($46>>>0);
  if ($47) {
   $48 = ((($46)) + 1|0);
   HEAP32[$45>>2] = $48;
   $49 = HEAP8[$46>>0]|0;
   $50 = $49&255;
   $58 = $50;
  } else {
   $51 = (_refill_buffer($42)|0);
   $52 = ($51|0)>(0);
   if ($52) {
    $53 = HEAP32[$45>>2]|0;
    $54 = ((($53)) + 1|0);
    HEAP32[$45>>2] = $54;
    $55 = HEAP8[$53>>0]|0;
    $56 = $55&255;
    $58 = $56;
   } else {
    $58 = -1;
   }
  }
  $57 = $58&255;
  $59 = ((($c)) + 1|0);
  HEAP8[$59>>0] = $57;
  $60 = $58 & 255;
  $61 = $41 | $60;
  $62 = $61 << 8;
  $63 = HEAP32[$fd>>2]|0;
  $64 = ((($63)) + 8|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ((($63)) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($65>>>0)>($67>>>0);
  if ($68) {
   $69 = ((($67)) + 1|0);
   HEAP32[$66>>2] = $69;
   $70 = HEAP8[$67>>0]|0;
   $71 = $70&255;
   $79 = $71;
  } else {
   $72 = (_refill_buffer($63)|0);
   $73 = ($72|0)>(0);
   if ($73) {
    $74 = HEAP32[$66>>2]|0;
    $75 = ((($74)) + 1|0);
    HEAP32[$66>>2] = $75;
    $76 = HEAP8[$74>>0]|0;
    $77 = $76&255;
    $79 = $77;
   } else {
    $79 = -1;
   }
  }
  $78 = $79&255;
  $80 = ((($c)) + 2|0);
  HEAP8[$80>>0] = $78;
  $81 = $79 & 255;
  $82 = $62 | $81;
  HEAP32[$val_p>>2] = $82;
  $83 = HEAP32[$crc>>2]|0;
  $84 = (_crc32($83,$c,3)|0);
  HEAP32[$crc>>2] = $84;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 3:  {
  $85 = $15 << 8;
  $86 = HEAP32[$fd>>2]|0;
  $87 = ((($86)) + 8|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ((($86)) + 4|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)>($90>>>0);
  if ($91) {
   $92 = ((($90)) + 1|0);
   HEAP32[$89>>2] = $92;
   $93 = HEAP8[$90>>0]|0;
   $94 = $93&255;
   $102 = $94;
  } else {
   $95 = (_refill_buffer($86)|0);
   $96 = ($95|0)>(0);
   if ($96) {
    $97 = HEAP32[$89>>2]|0;
    $98 = ((($97)) + 1|0);
    HEAP32[$89>>2] = $98;
    $99 = HEAP8[$97>>0]|0;
    $100 = $99&255;
    $102 = $100;
   } else {
    $102 = -1;
   }
  }
  $101 = $102&255;
  $103 = ((($c)) + 1|0);
  HEAP8[$103>>0] = $101;
  $104 = $102 & 255;
  $105 = $85 | $104;
  $106 = $105 << 8;
  $107 = HEAP32[$fd>>2]|0;
  $108 = ((($107)) + 8|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ((($107)) + 4|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($109>>>0)>($111>>>0);
  if ($112) {
   $113 = ((($111)) + 1|0);
   HEAP32[$110>>2] = $113;
   $114 = HEAP8[$111>>0]|0;
   $115 = $114&255;
   $123 = $115;
  } else {
   $116 = (_refill_buffer($107)|0);
   $117 = ($116|0)>(0);
   if ($117) {
    $118 = HEAP32[$110>>2]|0;
    $119 = ((($118)) + 1|0);
    HEAP32[$110>>2] = $119;
    $120 = HEAP8[$118>>0]|0;
    $121 = $120&255;
    $123 = $121;
   } else {
    $123 = -1;
   }
  }
  $122 = $123&255;
  $124 = ((($c)) + 2|0);
  HEAP8[$124>>0] = $122;
  $125 = $123 & 255;
  $126 = $106 | $125;
  $127 = $126 << 8;
  $128 = HEAP32[$fd>>2]|0;
  $129 = ((($128)) + 8|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = ((($128)) + 4|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = ($130>>>0)>($132>>>0);
  if ($133) {
   $134 = ((($132)) + 1|0);
   HEAP32[$131>>2] = $134;
   $135 = HEAP8[$132>>0]|0;
   $136 = $135&255;
   $144 = $136;
  } else {
   $137 = (_refill_buffer($128)|0);
   $138 = ($137|0)>(0);
   if ($138) {
    $139 = HEAP32[$131>>2]|0;
    $140 = ((($139)) + 1|0);
    HEAP32[$131>>2] = $140;
    $141 = HEAP8[$139>>0]|0;
    $142 = $141&255;
    $144 = $142;
   } else {
    $144 = -1;
   }
  }
  $143 = $144&255;
  $145 = ((($c)) + 3|0);
  HEAP8[$145>>0] = $143;
  $146 = $144 & 255;
  $147 = $127 | $146;
  HEAP32[$val_p>>2] = $147;
  $148 = HEAP32[$crc>>2]|0;
  $149 = (_crc32($148,$c,4)|0);
  HEAP32[$crc>>2] = $149;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 4:  {
  $150 = $15 << 8;
  $151 = HEAP32[$fd>>2]|0;
  $152 = ((($151)) + 8|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = ((($151)) + 4|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = ($153>>>0)>($155>>>0);
  if ($156) {
   $157 = ((($155)) + 1|0);
   HEAP32[$154>>2] = $157;
   $158 = HEAP8[$155>>0]|0;
   $159 = $158&255;
   $167 = $159;
  } else {
   $160 = (_refill_buffer($151)|0);
   $161 = ($160|0)>(0);
   if ($161) {
    $162 = HEAP32[$154>>2]|0;
    $163 = ((($162)) + 1|0);
    HEAP32[$154>>2] = $163;
    $164 = HEAP8[$162>>0]|0;
    $165 = $164&255;
    $167 = $165;
   } else {
    $167 = -1;
   }
  }
  $166 = $167&255;
  $168 = ((($c)) + 1|0);
  HEAP8[$168>>0] = $166;
  $169 = $167 & 255;
  $170 = $150 | $169;
  $171 = $170 << 8;
  $172 = HEAP32[$fd>>2]|0;
  $173 = ((($172)) + 8|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = ((($172)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = ($174>>>0)>($176>>>0);
  if ($177) {
   $178 = ((($176)) + 1|0);
   HEAP32[$175>>2] = $178;
   $179 = HEAP8[$176>>0]|0;
   $180 = $179&255;
   $188 = $180;
  } else {
   $181 = (_refill_buffer($172)|0);
   $182 = ($181|0)>(0);
   if ($182) {
    $183 = HEAP32[$175>>2]|0;
    $184 = ((($183)) + 1|0);
    HEAP32[$175>>2] = $184;
    $185 = HEAP8[$183>>0]|0;
    $186 = $185&255;
    $188 = $186;
   } else {
    $188 = -1;
   }
  }
  $187 = $188&255;
  $189 = ((($c)) + 2|0);
  HEAP8[$189>>0] = $187;
  $190 = $188 & 255;
  $191 = $171 | $190;
  $192 = $191 << 8;
  $193 = HEAP32[$fd>>2]|0;
  $194 = ((($193)) + 8|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = ((($193)) + 4|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = ($195>>>0)>($197>>>0);
  if ($198) {
   $199 = ((($197)) + 1|0);
   HEAP32[$196>>2] = $199;
   $200 = HEAP8[$197>>0]|0;
   $201 = $200&255;
   $209 = $201;
  } else {
   $202 = (_refill_buffer($193)|0);
   $203 = ($202|0)>(0);
   if ($203) {
    $204 = HEAP32[$196>>2]|0;
    $205 = ((($204)) + 1|0);
    HEAP32[$196>>2] = $205;
    $206 = HEAP8[$204>>0]|0;
    $207 = $206&255;
    $209 = $207;
   } else {
    $209 = -1;
   }
  }
  $208 = $209&255;
  $210 = ((($c)) + 3|0);
  HEAP8[$210>>0] = $208;
  $211 = $209 & 255;
  $212 = $192 | $211;
  $213 = $212 << 4;
  $214 = HEAP32[$fd>>2]|0;
  $215 = ((($214)) + 8|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = ((($214)) + 4|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = ($216>>>0)>($218>>>0);
  if ($219) {
   $220 = ((($218)) + 1|0);
   HEAP32[$217>>2] = $220;
   $221 = HEAP8[$218>>0]|0;
   $222 = $221&255;
   $230 = $222;
  } else {
   $223 = (_refill_buffer($214)|0);
   $224 = ($223|0)>(0);
   if ($224) {
    $225 = HEAP32[$217>>2]|0;
    $226 = ((($225)) + 1|0);
    HEAP32[$217>>2] = $226;
    $227 = HEAP8[$225>>0]|0;
    $228 = $227&255;
    $230 = $228;
   } else {
    $230 = -1;
   }
  }
  $229 = $230&255;
  $231 = ((($c)) + 4|0);
  HEAP8[$231>>0] = $229;
  $232 = $230 & 15;
  $233 = $213 | $232;
  HEAP32[$val_p>>2] = $233;
  $234 = HEAP32[$crc>>2]|0;
  $235 = (_crc32($234,$c,5)|0);
  HEAP32[$crc>>2] = $235;
  $$0 = 5;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $$0 = 5;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function _itf8_encode($fd,$val) {
 $fd = $fd|0;
 $val = $val|0;
 var $$ = 0, $$0$i$i$i = 0, $$0$i$i1 = 0, $$cast = 0, $$in = 0, $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $buffer$0$i = 0, $not$ = 0, $remaining$0$i$i = 0, $src$0$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $0 = ($val>>>0)>(127);
 do {
  if ($0) {
   $2 = ($val>>>0)>(16383);
   if (!($2)) {
    $3 = $val >>> 8;
    $4 = $3 | 128;
    $5 = $4&255;
    HEAP8[$buf>>0] = $5;
    $6 = $val&255;
    $7 = ((($buf)) + 1|0);
    HEAP8[$7>>0] = $6;
    $$pre$phiZ2D = $buf;$51 = 2;
    break;
   }
   $8 = ($val>>>0)>(2097151);
   if (!($8)) {
    $9 = $val >>> 16;
    $10 = $9 | 192;
    $11 = $10&255;
    HEAP8[$buf>>0] = $11;
    $12 = $val >>> 8;
    $13 = $12&255;
    $14 = ((($buf)) + 1|0);
    HEAP8[$14>>0] = $13;
    $15 = $val&255;
    $16 = ((($buf)) + 2|0);
    HEAP8[$16>>0] = $15;
    $$pre$phiZ2D = $buf;$51 = 3;
    break;
   }
   $17 = ($val>>>0)>(268435455);
   if ($17) {
    $29 = $val >>> 28;
    $30 = $29 | 240;
    $31 = $30&255;
    HEAP8[$buf>>0] = $31;
    $32 = $val >>> 20;
    $33 = $32&255;
    $34 = ((($buf)) + 1|0);
    HEAP8[$34>>0] = $33;
    $35 = $val >>> 12;
    $36 = $35&255;
    $37 = ((($buf)) + 2|0);
    HEAP8[$37>>0] = $36;
    $38 = $val >>> 4;
    $39 = $38&255;
    $40 = ((($buf)) + 3|0);
    HEAP8[$40>>0] = $39;
    $41 = $val & 15;
    $42 = $41&255;
    $43 = ((($buf)) + 4|0);
    HEAP8[$43>>0] = $42;
    $$pre$phiZ2D = $buf;$51 = 5;
    break;
   } else {
    $18 = $val >>> 24;
    $19 = $18 | 224;
    $20 = $19&255;
    HEAP8[$buf>>0] = $20;
    $21 = $val >>> 16;
    $22 = $21&255;
    $23 = ((($buf)) + 1|0);
    HEAP8[$23>>0] = $22;
    $24 = $val >>> 8;
    $25 = $24&255;
    $26 = ((($buf)) + 2|0);
    HEAP8[$26>>0] = $25;
    $27 = $val&255;
    $28 = ((($buf)) + 3|0);
    HEAP8[$28>>0] = $27;
    $$pre$phiZ2D = $buf;$51 = 4;
    break;
   }
  } else {
   $1 = $val&255;
   HEAP8[$buf>>0] = $1;
   $$pre$phiZ2D = $buf;$51 = 1;
  }
 } while(0);
 $44 = HEAP32[$fd>>2]|0;
 $45 = ((($44)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($44)) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) - ($48))|0;
 $50 = ($49>>>0)>($51>>>0);
 $52 = $48;
 $$ = $50 ? $51 : $49;
 _memcpy(($52|0),($$pre$phiZ2D|0),($$|0))|0;
 $53 = HEAP32[$47>>2]|0;
 $54 = (($53) + ($$)|0);
 HEAP32[$47>>2] = $54;
 $55 = ($51|0)==($$|0);
 if ($55) {
  $104 = $51;
  $not$ = ($104|0)!=($51|0);
  $105 = $not$ << 31 >> 31;
  STACKTOP = sp;return ($105|0);
 }
 $56 = HEAP32[$45>>2]|0;
 $57 = HEAP32[$44>>2]|0;
 $58 = (($56) - ($57))|0;
 $$cast = $57;
 $59 = ((($44)) + 16|0);
 $60 = ((($44)) + 20|0);
 $$in = $54;$buffer$0$i = $$cast;
 while(1) {
  $61 = ($buffer$0$i>>>0)<($$in>>>0);
  if (!($61)) {
   break;
  }
  $62 = $$in;
  $63 = HEAP32[$59>>2]|0;
  $64 = ((($63)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $buffer$0$i;
  $67 = (($62) - ($66))|0;
  $68 = (FUNCTION_TABLE_iiii[$65 & 127]($44,$buffer$0$i,$67)|0);
  $69 = ($68|0)<(0);
  if ($69) {
   label = 14;
   break;
  }
  $75 = (($buffer$0$i) + ($68)|0);
  $76 = HEAP32[$60>>2]|0;
  $77 = (($76) + ($68))|0;
  HEAP32[$60>>2] = $77;
  $$pre = HEAP32[$47>>2]|0;
  $$in = $$pre;$buffer$0$i = $75;
 }
 if ((label|0) == 14) {
  $70 = HEAP32[6773]|0;
  $71 = ($70|0)==(0|0);
  if ($71) {
   $$0$i$i1 = 27136;
  } else {
   $72 = (_pthread_self()|0);
   $73 = ((($72)) + 64|0);
   $74 = HEAP32[$73>>2]|0;
   $$0$i$i1 = $74;
  }
  $78 = HEAP32[$$0$i$i1>>2]|0;
  $79 = ((($44)) + 28|0);
  HEAP32[$79>>2] = $78;
  $104 = $68;
  $not$ = ($104|0)!=($51|0);
  $105 = $not$ << 31 >> 31;
  STACKTOP = sp;return ($105|0);
 }
 $80 = HEAP32[$44>>2]|0;
 HEAP32[$47>>2] = $80;
 $81 = (($buf) + ($$)|0);
 $82 = (($51) - ($$))|0;
 $remaining$0$i$i = $82;$src$0$i$i = $81;
 while(1) {
  $83 = $remaining$0$i$i << 1;
  $84 = ($83>>>0)<($58>>>0);
  if ($84) {
   label = 25;
   break;
  }
  $85 = HEAP32[$59>>2]|0;
  $86 = ((($85)) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (FUNCTION_TABLE_iiii[$87 & 127]($44,$src$0$i$i,$remaining$0$i$i)|0);
  $89 = ($88|0)<(0);
  if ($89) {
   break;
  }
  $97 = HEAP32[$60>>2]|0;
  $98 = (($97) + ($88))|0;
  HEAP32[$60>>2] = $98;
  $99 = (($src$0$i$i) + ($88)|0);
  $100 = (($remaining$0$i$i) - ($88))|0;
  $remaining$0$i$i = $100;$src$0$i$i = $99;
 }
 if ((label|0) == 25) {
  $101 = HEAP32[$47>>2]|0;
  _memcpy(($101|0),($src$0$i$i|0),($remaining$0$i$i|0))|0;
  $102 = HEAP32[$47>>2]|0;
  $103 = (($102) + ($remaining$0$i$i)|0);
  HEAP32[$47>>2] = $103;
  $104 = $51;
  $not$ = ($104|0)!=($51|0);
  $105 = $not$ << 31 >> 31;
  STACKTOP = sp;return ($105|0);
 }
 $90 = HEAP32[6773]|0;
 $91 = ($90|0)==(0|0);
 if ($91) {
  $$0$i$i$i = 27136;
 } else {
  $92 = (_pthread_self()|0);
  $93 = ((($92)) + 64|0);
  $94 = HEAP32[$93>>2]|0;
  $$0$i$i$i = $94;
 }
 $95 = HEAP32[$$0$i$i$i>>2]|0;
 $96 = ((($44)) + 28|0);
 HEAP32[$96>>2] = $95;
 $104 = $88;
 $not$ = ($104|0)!=($51|0);
 $105 = $not$ << 31 >> 31;
 STACKTOP = sp;return ($105|0);
}
function _ltf8_put($cp,$0,$1) {
 $cp = $cp|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(127);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if (!($6)) {
  $7 = $0&255;
  HEAP8[$cp>>0] = $7;
  $$0 = 1;
  return ($$0|0);
 }
 $8 = ($1>>>0)>(0);
 $9 = ($0>>>0)>(16383);
 $10 = ($1|0)==(0);
 $11 = $10 & $9;
 $12 = $8 | $11;
 if (!($12)) {
  $13 = (_bitshift64Lshr(($0|0),($1|0),8)|0);
  $14 = tempRet0;
  $15 = $13 | 128;
  $16 = $15&255;
  $17 = ((($cp)) + 1|0);
  HEAP8[$cp>>0] = $16;
  $18 = $0&255;
  HEAP8[$17>>0] = $18;
  $$0 = 2;
  return ($$0|0);
 }
 $19 = ($1>>>0)>(0);
 $20 = ($0>>>0)>(2097151);
 $21 = ($1|0)==(0);
 $22 = $21 & $20;
 $23 = $19 | $22;
 if (!($23)) {
  $24 = (_bitshift64Lshr(($0|0),($1|0),16)|0);
  $25 = tempRet0;
  $26 = $24 | 192;
  $27 = $26&255;
  $28 = ((($cp)) + 1|0);
  HEAP8[$cp>>0] = $27;
  $29 = (_bitshift64Lshr(($0|0),($1|0),8)|0);
  $30 = tempRet0;
  $31 = $29&255;
  $32 = ((($cp)) + 2|0);
  HEAP8[$28>>0] = $31;
  $33 = $0&255;
  HEAP8[$32>>0] = $33;
  $$0 = 3;
  return ($$0|0);
 }
 $34 = ($1>>>0)>(0);
 $35 = ($0>>>0)>(268435455);
 $36 = ($1|0)==(0);
 $37 = $36 & $35;
 $38 = $34 | $37;
 if (!($38)) {
  $39 = (_bitshift64Lshr(($0|0),($1|0),24)|0);
  $40 = tempRet0;
  $41 = $39 | 224;
  $42 = $41&255;
  $43 = ((($cp)) + 1|0);
  HEAP8[$cp>>0] = $42;
  $44 = (_bitshift64Lshr(($0|0),($1|0),16)|0);
  $45 = tempRet0;
  $46 = $44&255;
  $47 = ((($cp)) + 2|0);
  HEAP8[$43>>0] = $46;
  $48 = (_bitshift64Lshr(($0|0),($1|0),8)|0);
  $49 = tempRet0;
  $50 = $48&255;
  $51 = ((($cp)) + 3|0);
  HEAP8[$47>>0] = $50;
  $52 = $0&255;
  HEAP8[$51>>0] = $52;
  $$0 = 4;
  return ($$0|0);
 }
 $53 = ($1>>>0)>(7);
 $54 = ($0>>>0)>(4294967295);
 $55 = ($1|0)==(7);
 $56 = $55 & $54;
 $57 = $53 | $56;
 if (!($57)) {
  $58 = $1 | 240;
  $59 = $58&255;
  $60 = ((($cp)) + 1|0);
  HEAP8[$cp>>0] = $59;
  $61 = (_bitshift64Lshr(($0|0),($1|0),24)|0);
  $62 = tempRet0;
  $63 = $61&255;
  $64 = ((($cp)) + 2|0);
  HEAP8[$60>>0] = $63;
  $65 = (_bitshift64Lshr(($0|0),($1|0),16)|0);
  $66 = tempRet0;
  $67 = $65&255;
  $68 = ((($cp)) + 3|0);
  HEAP8[$64>>0] = $67;
  $69 = (_bitshift64Lshr(($0|0),($1|0),8)|0);
  $70 = tempRet0;
  $71 = $69&255;
  $72 = ((($cp)) + 4|0);
  HEAP8[$68>>0] = $71;
  $73 = $0&255;
  HEAP8[$72>>0] = $73;
  $$0 = 5;
  return ($$0|0);
 }
 $74 = ($1>>>0)>(1023);
 $75 = ($0>>>0)>(4294967295);
 $76 = ($1|0)==(1023);
 $77 = $76 & $75;
 $78 = $74 | $77;
 if (!($78)) {
  $79 = (_bitshift64Lshr(($0|0),($1|0),40)|0);
  $80 = tempRet0;
  $81 = $79 | 248;
  $82 = $81&255;
  $83 = ((($cp)) + 1|0);
  HEAP8[$cp>>0] = $82;
  $84 = $1&255;
  $85 = ((($cp)) + 2|0);
  HEAP8[$83>>0] = $84;
  $86 = (_bitshift64Lshr(($0|0),($1|0),24)|0);
  $87 = tempRet0;
  $88 = $86&255;
  $89 = ((($cp)) + 3|0);
  HEAP8[$85>>0] = $88;
  $90 = (_bitshift64Lshr(($0|0),($1|0),16)|0);
  $91 = tempRet0;
  $92 = $90&255;
  $93 = ((($cp)) + 4|0);
  HEAP8[$89>>0] = $92;
  $94 = (_bitshift64Lshr(($0|0),($1|0),8)|0);
  $95 = tempRet0;
  $96 = $94&255;
  $97 = ((($cp)) + 5|0);
  HEAP8[$93>>0] = $96;
  $98 = $0&255;
  HEAP8[$97>>0] = $98;
  $$0 = 6;
  return ($$0|0);
 }
 $99 = ($1>>>0)>(131071);
 $100 = ($0>>>0)>(4294967295);
 $101 = ($1|0)==(131071);
 $102 = $101 & $100;
 $103 = $99 | $102;
 if (!($103)) {
  $104 = (_bitshift64Lshr(($0|0),($1|0),48)|0);
  $105 = tempRet0;
  $106 = $104 | 252;
  $107 = $106&255;
  $108 = ((($cp)) + 1|0);
  HEAP8[$cp>>0] = $107;
  $109 = (_bitshift64Lshr(($0|0),($1|0),40)|0);
  $110 = tempRet0;
  $111 = $109&255;
  $112 = ((($cp)) + 2|0);
  HEAP8[$108>>0] = $111;
  $113 = $1&255;
  $114 = ((($cp)) + 3|0);
  HEAP8[$112>>0] = $113;
  $115 = (_bitshift64Lshr(($0|0),($1|0),24)|0);
  $116 = tempRet0;
  $117 = $115&255;
  $118 = ((($cp)) + 4|0);
  HEAP8[$114>>0] = $117;
  $119 = (_bitshift64Lshr(($0|0),($1|0),16)|0);
  $120 = tempRet0;
  $121 = $119&255;
  $122 = ((($cp)) + 5|0);
  HEAP8[$118>>0] = $121;
  $123 = (_bitshift64Lshr(($0|0),($1|0),8)|0);
  $124 = tempRet0;
  $125 = $123&255;
  $126 = ((($cp)) + 6|0);
  HEAP8[$122>>0] = $125;
  $127 = $0&255;
  HEAP8[$126>>0] = $127;
  $$0 = 7;
  return ($$0|0);
 }
 $128 = ($1>>>0)>(16777215);
 $129 = ($0>>>0)>(4294967295);
 $130 = ($1|0)==(16777215);
 $131 = $130 & $129;
 $132 = $128 | $131;
 if ($132) {
  $161 = ((($cp)) + 1|0);
  HEAP8[$cp>>0] = -1;
  $162 = (_bitshift64Lshr(($0|0),($1|0),56)|0);
  $163 = tempRet0;
  $164 = $162&255;
  $165 = ((($cp)) + 2|0);
  HEAP8[$161>>0] = $164;
  $166 = (_bitshift64Lshr(($0|0),($1|0),48)|0);
  $167 = tempRet0;
  $168 = $166&255;
  $169 = ((($cp)) + 3|0);
  HEAP8[$165>>0] = $168;
  $170 = (_bitshift64Lshr(($0|0),($1|0),40)|0);
  $171 = tempRet0;
  $172 = $170&255;
  $173 = ((($cp)) + 4|0);
  HEAP8[$169>>0] = $172;
  $174 = $1&255;
  $175 = ((($cp)) + 5|0);
  HEAP8[$173>>0] = $174;
  $176 = (_bitshift64Lshr(($0|0),($1|0),24)|0);
  $177 = tempRet0;
  $178 = $176&255;
  $179 = ((($cp)) + 6|0);
  HEAP8[$175>>0] = $178;
  $180 = (_bitshift64Lshr(($0|0),($1|0),16)|0);
  $181 = tempRet0;
  $182 = $180&255;
  $183 = ((($cp)) + 7|0);
  HEAP8[$179>>0] = $182;
  $184 = (_bitshift64Lshr(($0|0),($1|0),8)|0);
  $185 = tempRet0;
  $186 = $184&255;
  $187 = ((($cp)) + 8|0);
  HEAP8[$183>>0] = $186;
  $188 = $0&255;
  HEAP8[$187>>0] = $188;
  $$0 = 9;
  return ($$0|0);
 } else {
  $133 = (_bitshift64Lshr(($0|0),($1|0),56)|0);
  $134 = tempRet0;
  $135 = $133 | 254;
  $136 = $135&255;
  $137 = ((($cp)) + 1|0);
  HEAP8[$cp>>0] = $136;
  $138 = (_bitshift64Lshr(($0|0),($1|0),48)|0);
  $139 = tempRet0;
  $140 = $138&255;
  $141 = ((($cp)) + 2|0);
  HEAP8[$137>>0] = $140;
  $142 = (_bitshift64Lshr(($0|0),($1|0),40)|0);
  $143 = tempRet0;
  $144 = $142&255;
  $145 = ((($cp)) + 3|0);
  HEAP8[$141>>0] = $144;
  $146 = $1&255;
  $147 = ((($cp)) + 4|0);
  HEAP8[$145>>0] = $146;
  $148 = (_bitshift64Lshr(($0|0),($1|0),24)|0);
  $149 = tempRet0;
  $150 = $148&255;
  $151 = ((($cp)) + 5|0);
  HEAP8[$147>>0] = $150;
  $152 = (_bitshift64Lshr(($0|0),($1|0),16)|0);
  $153 = tempRet0;
  $154 = $152&255;
  $155 = ((($cp)) + 6|0);
  HEAP8[$151>>0] = $154;
  $156 = (_bitshift64Lshr(($0|0),($1|0),8)|0);
  $157 = tempRet0;
  $158 = $156&255;
  $159 = ((($cp)) + 7|0);
  HEAP8[$155>>0] = $158;
  $160 = $0&255;
  HEAP8[$159>>0] = $160;
  $$0 = 8;
  return ($$0|0);
 }
 return (0)|0;
}
function _ltf8_decode_crc($fd,$val_p,$crc) {
 $fd = $fd|0;
 $val_p = $val_p|0;
 $crc = $crc|0;
 var $$0 = 0, $$mask1 = 0, $$mask10 = 0, $$mask11 = 0, $$mask12 = 0, $$mask13 = 0, $$mask14 = 0, $$mask15 = 0, $$mask16 = 0, $$mask17 = 0, $$mask18 = 0, $$mask19 = 0, $$mask2 = 0, $$mask20 = 0, $$mask21 = 0, $$mask23 = 0, $$mask24 = 0, $$mask25 = 0, $$mask26 = 0, $$mask27 = 0;
 var $$mask29 = 0, $$mask3 = 0, $$mask30 = 0, $$mask31 = 0, $$mask32 = 0, $$mask34 = 0, $$mask35 = 0, $$mask36 = 0, $$mask38 = 0, $$mask39 = 0, $$mask4 = 0, $$mask41 = 0, $$mask5 = 0, $$mask6 = 0, $$mask7 = 0, $$mask8 = 0, $$mask9 = 0, $$pn = 0, $$sink = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $c = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = HEAP32[$fd>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 do {
  if ($5) {
   $$pn = $4;
   label = 5;
  } else {
   $6 = (_refill_buffer($0)|0);
   $7 = ($6|0)>(0);
   if ($7) {
    $8 = HEAP32[$3>>2]|0;
    $$pn = $8;
    label = 5;
    break;
   } else {
    HEAP8[$c>>0] = -1;
    $665 = 255;$666 = 0;
    break;
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $storemerge = ((($$pn)) + 1|0);
  HEAP32[$3>>2] = $storemerge;
  $$sink = HEAP8[$$pn>>0]|0;
  $9 = $$sink&255;
  HEAP8[$c>>0] = $$sink;
  $10 = ($$sink<<24>>24)>(-1);
  if ($10) {
   $11 = $val_p;
   $12 = $11;
   HEAP32[$12>>2] = $9;
   $13 = (($11) + 4)|0;
   $14 = $13;
   HEAP32[$14>>2] = 0;
   $15 = HEAP32[$crc>>2]|0;
   $16 = (_crc32($15,$c,1)|0);
   HEAP32[$crc>>2] = $16;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $17 = ($$sink&255)<(192);
  if ($17) {
   $18 = (_bitshift64Shl(($9|0),0,8)|0);
   $19 = tempRet0;
   $20 = HEAP32[$fd>>2]|0;
   $21 = ((($20)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($20)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($22>>>0)>($24>>>0);
   if ($25) {
    $26 = ((($24)) + 1|0);
    HEAP32[$23>>2] = $26;
    $27 = HEAP8[$24>>0]|0;
    $28 = $27&255;
    $36 = $28;
   } else {
    $29 = (_refill_buffer($20)|0);
    $30 = ($29|0)>(0);
    if ($30) {
     $31 = HEAP32[$23>>2]|0;
     $32 = ((($31)) + 1|0);
     HEAP32[$23>>2] = $32;
     $33 = HEAP8[$31>>0]|0;
     $34 = $33&255;
     $36 = $34;
    } else {
     $36 = -1;
    }
   }
   $35 = $36&255;
   $37 = ((($c)) + 1|0);
   HEAP8[$37>>0] = $35;
   $$mask41 = $36 & 255;
   $38 = $18 & 16128;
   $39 = $38 | $$mask41;
   $40 = $val_p;
   $41 = $40;
   HEAP32[$41>>2] = $39;
   $42 = (($40) + 4)|0;
   $43 = $42;
   HEAP32[$43>>2] = 0;
   $44 = HEAP32[$crc>>2]|0;
   $45 = (_crc32($44,$c,2)|0);
   HEAP32[$crc>>2] = $45;
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
  }
  $46 = ($$sink&255)<(224);
  if ($46) {
   $47 = (_bitshift64Shl(($9|0),0,8)|0);
   $48 = tempRet0;
   $49 = HEAP32[$fd>>2]|0;
   $50 = ((($49)) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($49)) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($51>>>0)>($53>>>0);
   if ($54) {
    $55 = ((($53)) + 1|0);
    HEAP32[$52>>2] = $55;
    $56 = HEAP8[$53>>0]|0;
    $57 = $56&255;
    $65 = $57;
   } else {
    $58 = (_refill_buffer($49)|0);
    $59 = ($58|0)>(0);
    if ($59) {
     $60 = HEAP32[$52>>2]|0;
     $61 = ((($60)) + 1|0);
     HEAP32[$52>>2] = $61;
     $62 = HEAP8[$60>>0]|0;
     $63 = $62&255;
     $65 = $63;
    } else {
     $65 = -1;
    }
   }
   $64 = $65&255;
   $66 = ((($c)) + 1|0);
   HEAP8[$66>>0] = $64;
   $$mask38 = $65 & 255;
   $67 = $47 | $$mask38;
   $68 = (_bitshift64Shl(($67|0),($48|0),8)|0);
   $69 = tempRet0;
   $70 = HEAP32[$fd>>2]|0;
   $71 = ((($70)) + 8|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($70)) + 4|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($72>>>0)>($74>>>0);
   if ($75) {
    $76 = ((($74)) + 1|0);
    HEAP32[$73>>2] = $76;
    $77 = HEAP8[$74>>0]|0;
    $78 = $77&255;
    $86 = $78;
   } else {
    $79 = (_refill_buffer($70)|0);
    $80 = ($79|0)>(0);
    if ($80) {
     $81 = HEAP32[$73>>2]|0;
     $82 = ((($81)) + 1|0);
     HEAP32[$73>>2] = $82;
     $83 = HEAP8[$81>>0]|0;
     $84 = $83&255;
     $86 = $84;
    } else {
     $86 = -1;
    }
   }
   $85 = $86&255;
   $87 = ((($c)) + 2|0);
   HEAP8[$87>>0] = $85;
   $$mask39 = $86 & 255;
   $88 = $68 & 2096896;
   $89 = $88 | $$mask39;
   $90 = $val_p;
   $91 = $90;
   HEAP32[$91>>2] = $89;
   $92 = (($90) + 4)|0;
   $93 = $92;
   HEAP32[$93>>2] = 0;
   $94 = HEAP32[$crc>>2]|0;
   $95 = (_crc32($94,$c,3)|0);
   HEAP32[$crc>>2] = $95;
   $$0 = 3;
   STACKTOP = sp;return ($$0|0);
  }
  $96 = ($$sink&255)<(240);
  if ($96) {
   $97 = (_bitshift64Shl(($9|0),0,8)|0);
   $98 = tempRet0;
   $99 = HEAP32[$fd>>2]|0;
   $100 = ((($99)) + 8|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($99)) + 4|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($101>>>0)>($103>>>0);
   if ($104) {
    $105 = ((($103)) + 1|0);
    HEAP32[$102>>2] = $105;
    $106 = HEAP8[$103>>0]|0;
    $107 = $106&255;
    $115 = $107;
   } else {
    $108 = (_refill_buffer($99)|0);
    $109 = ($108|0)>(0);
    if ($109) {
     $110 = HEAP32[$102>>2]|0;
     $111 = ((($110)) + 1|0);
     HEAP32[$102>>2] = $111;
     $112 = HEAP8[$110>>0]|0;
     $113 = $112&255;
     $115 = $113;
    } else {
     $115 = -1;
    }
   }
   $114 = $115&255;
   $116 = ((($c)) + 1|0);
   HEAP8[$116>>0] = $114;
   $$mask34 = $115 & 255;
   $117 = $97 | $$mask34;
   $118 = (_bitshift64Shl(($117|0),($98|0),8)|0);
   $119 = tempRet0;
   $120 = HEAP32[$fd>>2]|0;
   $121 = ((($120)) + 8|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = ((($120)) + 4|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($122>>>0)>($124>>>0);
   if ($125) {
    $126 = ((($124)) + 1|0);
    HEAP32[$123>>2] = $126;
    $127 = HEAP8[$124>>0]|0;
    $128 = $127&255;
    $136 = $128;
   } else {
    $129 = (_refill_buffer($120)|0);
    $130 = ($129|0)>(0);
    if ($130) {
     $131 = HEAP32[$123>>2]|0;
     $132 = ((($131)) + 1|0);
     HEAP32[$123>>2] = $132;
     $133 = HEAP8[$131>>0]|0;
     $134 = $133&255;
     $136 = $134;
    } else {
     $136 = -1;
    }
   }
   $135 = $136&255;
   $137 = ((($c)) + 2|0);
   HEAP8[$137>>0] = $135;
   $$mask35 = $136 & 255;
   $138 = $118 | $$mask35;
   $139 = (_bitshift64Shl(($138|0),($119|0),8)|0);
   $140 = tempRet0;
   $141 = HEAP32[$fd>>2]|0;
   $142 = ((($141)) + 8|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = ((($141)) + 4|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ($143>>>0)>($145>>>0);
   if ($146) {
    $147 = ((($145)) + 1|0);
    HEAP32[$144>>2] = $147;
    $148 = HEAP8[$145>>0]|0;
    $149 = $148&255;
    $157 = $149;
   } else {
    $150 = (_refill_buffer($141)|0);
    $151 = ($150|0)>(0);
    if ($151) {
     $152 = HEAP32[$144>>2]|0;
     $153 = ((($152)) + 1|0);
     HEAP32[$144>>2] = $153;
     $154 = HEAP8[$152>>0]|0;
     $155 = $154&255;
     $157 = $155;
    } else {
     $157 = -1;
    }
   }
   $156 = $157&255;
   $158 = ((($c)) + 3|0);
   HEAP8[$158>>0] = $156;
   $$mask36 = $157 & 255;
   $159 = $139 & 268435200;
   $160 = $159 | $$mask36;
   $161 = $val_p;
   $162 = $161;
   HEAP32[$162>>2] = $160;
   $163 = (($161) + 4)|0;
   $164 = $163;
   HEAP32[$164>>2] = 0;
   $165 = HEAP32[$crc>>2]|0;
   $166 = (_crc32($165,$c,4)|0);
   HEAP32[$crc>>2] = $166;
   $$0 = 4;
   STACKTOP = sp;return ($$0|0);
  }
  $167 = ($$sink&255)<(248);
  if ($167) {
   $168 = (_bitshift64Shl(($9|0),0,8)|0);
   $169 = tempRet0;
   $170 = HEAP32[$fd>>2]|0;
   $171 = ((($170)) + 8|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = ((($170)) + 4|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = ($172>>>0)>($174>>>0);
   if ($175) {
    $176 = ((($174)) + 1|0);
    HEAP32[$173>>2] = $176;
    $177 = HEAP8[$174>>0]|0;
    $178 = $177&255;
    $186 = $178;
   } else {
    $179 = (_refill_buffer($170)|0);
    $180 = ($179|0)>(0);
    if ($180) {
     $181 = HEAP32[$173>>2]|0;
     $182 = ((($181)) + 1|0);
     HEAP32[$173>>2] = $182;
     $183 = HEAP8[$181>>0]|0;
     $184 = $183&255;
     $186 = $184;
    } else {
     $186 = -1;
    }
   }
   $185 = $186&255;
   $187 = ((($c)) + 1|0);
   HEAP8[$187>>0] = $185;
   $$mask29 = $186 & 255;
   $188 = $168 | $$mask29;
   $189 = (_bitshift64Shl(($188|0),($169|0),8)|0);
   $190 = tempRet0;
   $191 = HEAP32[$fd>>2]|0;
   $192 = ((($191)) + 8|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = ((($191)) + 4|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = ($193>>>0)>($195>>>0);
   if ($196) {
    $197 = ((($195)) + 1|0);
    HEAP32[$194>>2] = $197;
    $198 = HEAP8[$195>>0]|0;
    $199 = $198&255;
    $207 = $199;
   } else {
    $200 = (_refill_buffer($191)|0);
    $201 = ($200|0)>(0);
    if ($201) {
     $202 = HEAP32[$194>>2]|0;
     $203 = ((($202)) + 1|0);
     HEAP32[$194>>2] = $203;
     $204 = HEAP8[$202>>0]|0;
     $205 = $204&255;
     $207 = $205;
    } else {
     $207 = -1;
    }
   }
   $206 = $207&255;
   $208 = ((($c)) + 2|0);
   HEAP8[$208>>0] = $206;
   $$mask30 = $207 & 255;
   $209 = $189 | $$mask30;
   $210 = (_bitshift64Shl(($209|0),($190|0),8)|0);
   $211 = tempRet0;
   $212 = HEAP32[$fd>>2]|0;
   $213 = ((($212)) + 8|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = ((($212)) + 4|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = ($214>>>0)>($216>>>0);
   if ($217) {
    $218 = ((($216)) + 1|0);
    HEAP32[$215>>2] = $218;
    $219 = HEAP8[$216>>0]|0;
    $220 = $219&255;
    $228 = $220;
   } else {
    $221 = (_refill_buffer($212)|0);
    $222 = ($221|0)>(0);
    if ($222) {
     $223 = HEAP32[$215>>2]|0;
     $224 = ((($223)) + 1|0);
     HEAP32[$215>>2] = $224;
     $225 = HEAP8[$223>>0]|0;
     $226 = $225&255;
     $228 = $226;
    } else {
     $228 = -1;
    }
   }
   $227 = $228&255;
   $229 = ((($c)) + 3|0);
   HEAP8[$229>>0] = $227;
   $$mask31 = $228 & 255;
   $230 = $210 | $$mask31;
   $231 = (_bitshift64Shl(($230|0),($211|0),8)|0);
   $232 = tempRet0;
   $233 = HEAP32[$fd>>2]|0;
   $234 = ((($233)) + 8|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = ((($233)) + 4|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = ($235>>>0)>($237>>>0);
   if ($238) {
    $239 = ((($237)) + 1|0);
    HEAP32[$236>>2] = $239;
    $240 = HEAP8[$237>>0]|0;
    $241 = $240&255;
    $249 = $241;
   } else {
    $242 = (_refill_buffer($233)|0);
    $243 = ($242|0)>(0);
    if ($243) {
     $244 = HEAP32[$236>>2]|0;
     $245 = ((($244)) + 1|0);
     HEAP32[$236>>2] = $245;
     $246 = HEAP8[$244>>0]|0;
     $247 = $246&255;
     $249 = $247;
    } else {
     $249 = -1;
    }
   }
   $248 = $249&255;
   $250 = ((($c)) + 4|0);
   HEAP8[$250>>0] = $248;
   $$mask32 = $249 & 255;
   $251 = $231 & -256;
   $252 = $232 & 7;
   $253 = $251 | $$mask32;
   $254 = $val_p;
   $255 = $254;
   HEAP32[$255>>2] = $253;
   $256 = (($254) + 4)|0;
   $257 = $256;
   HEAP32[$257>>2] = $252;
   $258 = HEAP32[$crc>>2]|0;
   $259 = (_crc32($258,$c,5)|0);
   HEAP32[$crc>>2] = $259;
   $$0 = 5;
   STACKTOP = sp;return ($$0|0);
  }
  $260 = ($$sink&255)<(252);
  if ($260) {
   $261 = (_bitshift64Shl(($9|0),0,8)|0);
   $262 = tempRet0;
   $263 = HEAP32[$fd>>2]|0;
   $264 = ((($263)) + 8|0);
   $265 = HEAP32[$264>>2]|0;
   $266 = ((($263)) + 4|0);
   $267 = HEAP32[$266>>2]|0;
   $268 = ($265>>>0)>($267>>>0);
   if ($268) {
    $269 = ((($267)) + 1|0);
    HEAP32[$266>>2] = $269;
    $270 = HEAP8[$267>>0]|0;
    $271 = $270&255;
    $279 = $271;
   } else {
    $272 = (_refill_buffer($263)|0);
    $273 = ($272|0)>(0);
    if ($273) {
     $274 = HEAP32[$266>>2]|0;
     $275 = ((($274)) + 1|0);
     HEAP32[$266>>2] = $275;
     $276 = HEAP8[$274>>0]|0;
     $277 = $276&255;
     $279 = $277;
    } else {
     $279 = -1;
    }
   }
   $278 = $279&255;
   $280 = ((($c)) + 1|0);
   HEAP8[$280>>0] = $278;
   $$mask23 = $279 & 255;
   $281 = $261 | $$mask23;
   $282 = (_bitshift64Shl(($281|0),($262|0),8)|0);
   $283 = tempRet0;
   $284 = HEAP32[$fd>>2]|0;
   $285 = ((($284)) + 8|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = ((($284)) + 4|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = ($286>>>0)>($288>>>0);
   if ($289) {
    $290 = ((($288)) + 1|0);
    HEAP32[$287>>2] = $290;
    $291 = HEAP8[$288>>0]|0;
    $292 = $291&255;
    $300 = $292;
   } else {
    $293 = (_refill_buffer($284)|0);
    $294 = ($293|0)>(0);
    if ($294) {
     $295 = HEAP32[$287>>2]|0;
     $296 = ((($295)) + 1|0);
     HEAP32[$287>>2] = $296;
     $297 = HEAP8[$295>>0]|0;
     $298 = $297&255;
     $300 = $298;
    } else {
     $300 = -1;
    }
   }
   $299 = $300&255;
   $301 = ((($c)) + 2|0);
   HEAP8[$301>>0] = $299;
   $$mask24 = $300 & 255;
   $302 = $282 | $$mask24;
   $303 = (_bitshift64Shl(($302|0),($283|0),8)|0);
   $304 = tempRet0;
   $305 = HEAP32[$fd>>2]|0;
   $306 = ((($305)) + 8|0);
   $307 = HEAP32[$306>>2]|0;
   $308 = ((($305)) + 4|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = ($307>>>0)>($309>>>0);
   if ($310) {
    $311 = ((($309)) + 1|0);
    HEAP32[$308>>2] = $311;
    $312 = HEAP8[$309>>0]|0;
    $313 = $312&255;
    $321 = $313;
   } else {
    $314 = (_refill_buffer($305)|0);
    $315 = ($314|0)>(0);
    if ($315) {
     $316 = HEAP32[$308>>2]|0;
     $317 = ((($316)) + 1|0);
     HEAP32[$308>>2] = $317;
     $318 = HEAP8[$316>>0]|0;
     $319 = $318&255;
     $321 = $319;
    } else {
     $321 = -1;
    }
   }
   $320 = $321&255;
   $322 = ((($c)) + 3|0);
   HEAP8[$322>>0] = $320;
   $$mask25 = $321 & 255;
   $323 = $303 | $$mask25;
   $324 = (_bitshift64Shl(($323|0),($304|0),8)|0);
   $325 = tempRet0;
   $326 = HEAP32[$fd>>2]|0;
   $327 = ((($326)) + 8|0);
   $328 = HEAP32[$327>>2]|0;
   $329 = ((($326)) + 4|0);
   $330 = HEAP32[$329>>2]|0;
   $331 = ($328>>>0)>($330>>>0);
   if ($331) {
    $332 = ((($330)) + 1|0);
    HEAP32[$329>>2] = $332;
    $333 = HEAP8[$330>>0]|0;
    $334 = $333&255;
    $342 = $334;
   } else {
    $335 = (_refill_buffer($326)|0);
    $336 = ($335|0)>(0);
    if ($336) {
     $337 = HEAP32[$329>>2]|0;
     $338 = ((($337)) + 1|0);
     HEAP32[$329>>2] = $338;
     $339 = HEAP8[$337>>0]|0;
     $340 = $339&255;
     $342 = $340;
    } else {
     $342 = -1;
    }
   }
   $341 = $342&255;
   $343 = ((($c)) + 4|0);
   HEAP8[$343>>0] = $341;
   $$mask26 = $342 & 255;
   $344 = $324 | $$mask26;
   $345 = (_bitshift64Shl(($344|0),($325|0),8)|0);
   $346 = tempRet0;
   $347 = HEAP32[$fd>>2]|0;
   $348 = ((($347)) + 8|0);
   $349 = HEAP32[$348>>2]|0;
   $350 = ((($347)) + 4|0);
   $351 = HEAP32[$350>>2]|0;
   $352 = ($349>>>0)>($351>>>0);
   if ($352) {
    $353 = ((($351)) + 1|0);
    HEAP32[$350>>2] = $353;
    $354 = HEAP8[$351>>0]|0;
    $355 = $354&255;
    $363 = $355;
   } else {
    $356 = (_refill_buffer($347)|0);
    $357 = ($356|0)>(0);
    if ($357) {
     $358 = HEAP32[$350>>2]|0;
     $359 = ((($358)) + 1|0);
     HEAP32[$350>>2] = $359;
     $360 = HEAP8[$358>>0]|0;
     $361 = $360&255;
     $363 = $361;
    } else {
     $363 = -1;
    }
   }
   $362 = $363&255;
   $364 = ((($c)) + 5|0);
   HEAP8[$364>>0] = $362;
   $$mask27 = $363 & 255;
   $365 = $345 & -256;
   $366 = $346 & 1023;
   $367 = $365 | $$mask27;
   $368 = $val_p;
   $369 = $368;
   HEAP32[$369>>2] = $367;
   $370 = (($368) + 4)|0;
   $371 = $370;
   HEAP32[$371>>2] = $366;
   $372 = HEAP32[$crc>>2]|0;
   $373 = (_crc32($372,$c,6)|0);
   HEAP32[$crc>>2] = $373;
   $$0 = 6;
   STACKTOP = sp;return ($$0|0);
  }
  $374 = ($$sink&255)<(254);
  if ($374) {
   $375 = (_bitshift64Shl(($9|0),0,8)|0);
   $376 = tempRet0;
   $377 = HEAP32[$fd>>2]|0;
   $378 = ((($377)) + 8|0);
   $379 = HEAP32[$378>>2]|0;
   $380 = ((($377)) + 4|0);
   $381 = HEAP32[$380>>2]|0;
   $382 = ($379>>>0)>($381>>>0);
   if ($382) {
    $383 = ((($381)) + 1|0);
    HEAP32[$380>>2] = $383;
    $384 = HEAP8[$381>>0]|0;
    $385 = $384&255;
    $393 = $385;
   } else {
    $386 = (_refill_buffer($377)|0);
    $387 = ($386|0)>(0);
    if ($387) {
     $388 = HEAP32[$380>>2]|0;
     $389 = ((($388)) + 1|0);
     HEAP32[$380>>2] = $389;
     $390 = HEAP8[$388>>0]|0;
     $391 = $390&255;
     $393 = $391;
    } else {
     $393 = -1;
    }
   }
   $392 = $393&255;
   $394 = ((($c)) + 1|0);
   HEAP8[$394>>0] = $392;
   $$mask16 = $393 & 255;
   $395 = $375 | $$mask16;
   $396 = (_bitshift64Shl(($395|0),($376|0),8)|0);
   $397 = tempRet0;
   $398 = HEAP32[$fd>>2]|0;
   $399 = ((($398)) + 8|0);
   $400 = HEAP32[$399>>2]|0;
   $401 = ((($398)) + 4|0);
   $402 = HEAP32[$401>>2]|0;
   $403 = ($400>>>0)>($402>>>0);
   if ($403) {
    $404 = ((($402)) + 1|0);
    HEAP32[$401>>2] = $404;
    $405 = HEAP8[$402>>0]|0;
    $406 = $405&255;
    $414 = $406;
   } else {
    $407 = (_refill_buffer($398)|0);
    $408 = ($407|0)>(0);
    if ($408) {
     $409 = HEAP32[$401>>2]|0;
     $410 = ((($409)) + 1|0);
     HEAP32[$401>>2] = $410;
     $411 = HEAP8[$409>>0]|0;
     $412 = $411&255;
     $414 = $412;
    } else {
     $414 = -1;
    }
   }
   $413 = $414&255;
   $415 = ((($c)) + 2|0);
   HEAP8[$415>>0] = $413;
   $$mask17 = $414 & 255;
   $416 = $396 | $$mask17;
   $417 = (_bitshift64Shl(($416|0),($397|0),8)|0);
   $418 = tempRet0;
   $419 = HEAP32[$fd>>2]|0;
   $420 = ((($419)) + 8|0);
   $421 = HEAP32[$420>>2]|0;
   $422 = ((($419)) + 4|0);
   $423 = HEAP32[$422>>2]|0;
   $424 = ($421>>>0)>($423>>>0);
   if ($424) {
    $425 = ((($423)) + 1|0);
    HEAP32[$422>>2] = $425;
    $426 = HEAP8[$423>>0]|0;
    $427 = $426&255;
    $435 = $427;
   } else {
    $428 = (_refill_buffer($419)|0);
    $429 = ($428|0)>(0);
    if ($429) {
     $430 = HEAP32[$422>>2]|0;
     $431 = ((($430)) + 1|0);
     HEAP32[$422>>2] = $431;
     $432 = HEAP8[$430>>0]|0;
     $433 = $432&255;
     $435 = $433;
    } else {
     $435 = -1;
    }
   }
   $434 = $435&255;
   $436 = ((($c)) + 3|0);
   HEAP8[$436>>0] = $434;
   $$mask18 = $435 & 255;
   $437 = $417 | $$mask18;
   $438 = (_bitshift64Shl(($437|0),($418|0),8)|0);
   $439 = tempRet0;
   $440 = HEAP32[$fd>>2]|0;
   $441 = ((($440)) + 8|0);
   $442 = HEAP32[$441>>2]|0;
   $443 = ((($440)) + 4|0);
   $444 = HEAP32[$443>>2]|0;
   $445 = ($442>>>0)>($444>>>0);
   if ($445) {
    $446 = ((($444)) + 1|0);
    HEAP32[$443>>2] = $446;
    $447 = HEAP8[$444>>0]|0;
    $448 = $447&255;
    $456 = $448;
   } else {
    $449 = (_refill_buffer($440)|0);
    $450 = ($449|0)>(0);
    if ($450) {
     $451 = HEAP32[$443>>2]|0;
     $452 = ((($451)) + 1|0);
     HEAP32[$443>>2] = $452;
     $453 = HEAP8[$451>>0]|0;
     $454 = $453&255;
     $456 = $454;
    } else {
     $456 = -1;
    }
   }
   $455 = $456&255;
   $457 = ((($c)) + 4|0);
   HEAP8[$457>>0] = $455;
   $$mask19 = $456 & 255;
   $458 = $438 | $$mask19;
   $459 = (_bitshift64Shl(($458|0),($439|0),8)|0);
   $460 = tempRet0;
   $461 = HEAP32[$fd>>2]|0;
   $462 = ((($461)) + 8|0);
   $463 = HEAP32[$462>>2]|0;
   $464 = ((($461)) + 4|0);
   $465 = HEAP32[$464>>2]|0;
   $466 = ($463>>>0)>($465>>>0);
   if ($466) {
    $467 = ((($465)) + 1|0);
    HEAP32[$464>>2] = $467;
    $468 = HEAP8[$465>>0]|0;
    $469 = $468&255;
    $477 = $469;
   } else {
    $470 = (_refill_buffer($461)|0);
    $471 = ($470|0)>(0);
    if ($471) {
     $472 = HEAP32[$464>>2]|0;
     $473 = ((($472)) + 1|0);
     HEAP32[$464>>2] = $473;
     $474 = HEAP8[$472>>0]|0;
     $475 = $474&255;
     $477 = $475;
    } else {
     $477 = -1;
    }
   }
   $476 = $477&255;
   $478 = ((($c)) + 5|0);
   HEAP8[$478>>0] = $476;
   $$mask20 = $477 & 255;
   $479 = $459 | $$mask20;
   $480 = (_bitshift64Shl(($479|0),($460|0),8)|0);
   $481 = tempRet0;
   $482 = HEAP32[$fd>>2]|0;
   $483 = ((($482)) + 8|0);
   $484 = HEAP32[$483>>2]|0;
   $485 = ((($482)) + 4|0);
   $486 = HEAP32[$485>>2]|0;
   $487 = ($484>>>0)>($486>>>0);
   if ($487) {
    $488 = ((($486)) + 1|0);
    HEAP32[$485>>2] = $488;
    $489 = HEAP8[$486>>0]|0;
    $490 = $489&255;
    $498 = $490;
   } else {
    $491 = (_refill_buffer($482)|0);
    $492 = ($491|0)>(0);
    if ($492) {
     $493 = HEAP32[$485>>2]|0;
     $494 = ((($493)) + 1|0);
     HEAP32[$485>>2] = $494;
     $495 = HEAP8[$493>>0]|0;
     $496 = $495&255;
     $498 = $496;
    } else {
     $498 = -1;
    }
   }
   $497 = $498&255;
   $499 = ((($c)) + 6|0);
   HEAP8[$499>>0] = $497;
   $$mask21 = $498 & 255;
   $500 = $480 & -256;
   $501 = $481 & 131071;
   $502 = $500 | $$mask21;
   $503 = $val_p;
   $504 = $503;
   HEAP32[$504>>2] = $502;
   $505 = (($503) + 4)|0;
   $506 = $505;
   HEAP32[$506>>2] = $501;
   $507 = HEAP32[$crc>>2]|0;
   $508 = (_crc32($507,$c,7)|0);
   HEAP32[$crc>>2] = $508;
   $$0 = 7;
   STACKTOP = sp;return ($$0|0);
  }
  $509 = ($$sink<<24>>24)==(-1);
  if ($509) {
   $665 = $9;$666 = 0;
  } else {
   $510 = (_bitshift64Shl(($9|0),0,8)|0);
   $511 = tempRet0;
   $512 = HEAP32[$fd>>2]|0;
   $513 = ((($512)) + 8|0);
   $514 = HEAP32[$513>>2]|0;
   $515 = ((($512)) + 4|0);
   $516 = HEAP32[$515>>2]|0;
   $517 = ($514>>>0)>($516>>>0);
   if ($517) {
    $518 = ((($516)) + 1|0);
    HEAP32[$515>>2] = $518;
    $519 = HEAP8[$516>>0]|0;
    $520 = $519&255;
    $528 = $520;
   } else {
    $521 = (_refill_buffer($512)|0);
    $522 = ($521|0)>(0);
    if ($522) {
     $523 = HEAP32[$515>>2]|0;
     $524 = ((($523)) + 1|0);
     HEAP32[$515>>2] = $524;
     $525 = HEAP8[$523>>0]|0;
     $526 = $525&255;
     $528 = $526;
    } else {
     $528 = -1;
    }
   }
   $527 = $528&255;
   $529 = ((($c)) + 1|0);
   HEAP8[$529>>0] = $527;
   $$mask9 = $528 & 255;
   $530 = $510 | $$mask9;
   $531 = (_bitshift64Shl(($530|0),($511|0),8)|0);
   $532 = tempRet0;
   $533 = HEAP32[$fd>>2]|0;
   $534 = ((($533)) + 8|0);
   $535 = HEAP32[$534>>2]|0;
   $536 = ((($533)) + 4|0);
   $537 = HEAP32[$536>>2]|0;
   $538 = ($535>>>0)>($537>>>0);
   if ($538) {
    $539 = ((($537)) + 1|0);
    HEAP32[$536>>2] = $539;
    $540 = HEAP8[$537>>0]|0;
    $541 = $540&255;
    $549 = $541;
   } else {
    $542 = (_refill_buffer($533)|0);
    $543 = ($542|0)>(0);
    if ($543) {
     $544 = HEAP32[$536>>2]|0;
     $545 = ((($544)) + 1|0);
     HEAP32[$536>>2] = $545;
     $546 = HEAP8[$544>>0]|0;
     $547 = $546&255;
     $549 = $547;
    } else {
     $549 = -1;
    }
   }
   $548 = $549&255;
   $550 = ((($c)) + 2|0);
   HEAP8[$550>>0] = $548;
   $$mask10 = $549 & 255;
   $551 = $531 | $$mask10;
   $552 = (_bitshift64Shl(($551|0),($532|0),8)|0);
   $553 = tempRet0;
   $554 = HEAP32[$fd>>2]|0;
   $555 = ((($554)) + 8|0);
   $556 = HEAP32[$555>>2]|0;
   $557 = ((($554)) + 4|0);
   $558 = HEAP32[$557>>2]|0;
   $559 = ($556>>>0)>($558>>>0);
   if ($559) {
    $560 = ((($558)) + 1|0);
    HEAP32[$557>>2] = $560;
    $561 = HEAP8[$558>>0]|0;
    $562 = $561&255;
    $570 = $562;
   } else {
    $563 = (_refill_buffer($554)|0);
    $564 = ($563|0)>(0);
    if ($564) {
     $565 = HEAP32[$557>>2]|0;
     $566 = ((($565)) + 1|0);
     HEAP32[$557>>2] = $566;
     $567 = HEAP8[$565>>0]|0;
     $568 = $567&255;
     $570 = $568;
    } else {
     $570 = -1;
    }
   }
   $569 = $570&255;
   $571 = ((($c)) + 3|0);
   HEAP8[$571>>0] = $569;
   $$mask11 = $570 & 255;
   $572 = $552 | $$mask11;
   $573 = (_bitshift64Shl(($572|0),($553|0),8)|0);
   $574 = tempRet0;
   $575 = HEAP32[$fd>>2]|0;
   $576 = ((($575)) + 8|0);
   $577 = HEAP32[$576>>2]|0;
   $578 = ((($575)) + 4|0);
   $579 = HEAP32[$578>>2]|0;
   $580 = ($577>>>0)>($579>>>0);
   if ($580) {
    $581 = ((($579)) + 1|0);
    HEAP32[$578>>2] = $581;
    $582 = HEAP8[$579>>0]|0;
    $583 = $582&255;
    $591 = $583;
   } else {
    $584 = (_refill_buffer($575)|0);
    $585 = ($584|0)>(0);
    if ($585) {
     $586 = HEAP32[$578>>2]|0;
     $587 = ((($586)) + 1|0);
     HEAP32[$578>>2] = $587;
     $588 = HEAP8[$586>>0]|0;
     $589 = $588&255;
     $591 = $589;
    } else {
     $591 = -1;
    }
   }
   $590 = $591&255;
   $592 = ((($c)) + 4|0);
   HEAP8[$592>>0] = $590;
   $$mask12 = $591 & 255;
   $593 = $573 | $$mask12;
   $594 = (_bitshift64Shl(($593|0),($574|0),8)|0);
   $595 = tempRet0;
   $596 = HEAP32[$fd>>2]|0;
   $597 = ((($596)) + 8|0);
   $598 = HEAP32[$597>>2]|0;
   $599 = ((($596)) + 4|0);
   $600 = HEAP32[$599>>2]|0;
   $601 = ($598>>>0)>($600>>>0);
   if ($601) {
    $602 = ((($600)) + 1|0);
    HEAP32[$599>>2] = $602;
    $603 = HEAP8[$600>>0]|0;
    $604 = $603&255;
    $612 = $604;
   } else {
    $605 = (_refill_buffer($596)|0);
    $606 = ($605|0)>(0);
    if ($606) {
     $607 = HEAP32[$599>>2]|0;
     $608 = ((($607)) + 1|0);
     HEAP32[$599>>2] = $608;
     $609 = HEAP8[$607>>0]|0;
     $610 = $609&255;
     $612 = $610;
    } else {
     $612 = -1;
    }
   }
   $611 = $612&255;
   $613 = ((($c)) + 5|0);
   HEAP8[$613>>0] = $611;
   $$mask13 = $612 & 255;
   $614 = $594 | $$mask13;
   $615 = (_bitshift64Shl(($614|0),($595|0),8)|0);
   $616 = tempRet0;
   $617 = HEAP32[$fd>>2]|0;
   $618 = ((($617)) + 8|0);
   $619 = HEAP32[$618>>2]|0;
   $620 = ((($617)) + 4|0);
   $621 = HEAP32[$620>>2]|0;
   $622 = ($619>>>0)>($621>>>0);
   if ($622) {
    $623 = ((($621)) + 1|0);
    HEAP32[$620>>2] = $623;
    $624 = HEAP8[$621>>0]|0;
    $625 = $624&255;
    $633 = $625;
   } else {
    $626 = (_refill_buffer($617)|0);
    $627 = ($626|0)>(0);
    if ($627) {
     $628 = HEAP32[$620>>2]|0;
     $629 = ((($628)) + 1|0);
     HEAP32[$620>>2] = $629;
     $630 = HEAP8[$628>>0]|0;
     $631 = $630&255;
     $633 = $631;
    } else {
     $633 = -1;
    }
   }
   $632 = $633&255;
   $634 = ((($c)) + 6|0);
   HEAP8[$634>>0] = $632;
   $$mask14 = $633 & 255;
   $635 = $615 | $$mask14;
   $636 = (_bitshift64Shl(($635|0),($616|0),8)|0);
   $637 = tempRet0;
   $638 = HEAP32[$fd>>2]|0;
   $639 = ((($638)) + 8|0);
   $640 = HEAP32[$639>>2]|0;
   $641 = ((($638)) + 4|0);
   $642 = HEAP32[$641>>2]|0;
   $643 = ($640>>>0)>($642>>>0);
   if ($643) {
    $644 = ((($642)) + 1|0);
    HEAP32[$641>>2] = $644;
    $645 = HEAP8[$642>>0]|0;
    $646 = $645&255;
    $654 = $646;
   } else {
    $647 = (_refill_buffer($638)|0);
    $648 = ($647|0)>(0);
    if ($648) {
     $649 = HEAP32[$641>>2]|0;
     $650 = ((($649)) + 1|0);
     HEAP32[$641>>2] = $650;
     $651 = HEAP8[$649>>0]|0;
     $652 = $651&255;
     $654 = $652;
    } else {
     $654 = -1;
    }
   }
   $653 = $654&255;
   $655 = ((($c)) + 7|0);
   HEAP8[$655>>0] = $653;
   $$mask15 = $654 & 255;
   $656 = $636 & -256;
   $657 = $637 & 16777215;
   $658 = $656 | $$mask15;
   $659 = $val_p;
   $660 = $659;
   HEAP32[$660>>2] = $658;
   $661 = (($659) + 4)|0;
   $662 = $661;
   HEAP32[$662>>2] = $657;
   $663 = HEAP32[$crc>>2]|0;
   $664 = (_crc32($663,$c,8)|0);
   HEAP32[$crc>>2] = $664;
   $$0 = 8;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $667 = (_bitshift64Shl(($665|0),($666|0),8)|0);
 $668 = tempRet0;
 $669 = HEAP32[$fd>>2]|0;
 $670 = ((($669)) + 8|0);
 $671 = HEAP32[$670>>2]|0;
 $672 = ((($669)) + 4|0);
 $673 = HEAP32[$672>>2]|0;
 $674 = ($671>>>0)>($673>>>0);
 if ($674) {
  $675 = ((($673)) + 1|0);
  HEAP32[$672>>2] = $675;
  $676 = HEAP8[$673>>0]|0;
  $677 = $676&255;
  $685 = $677;
 } else {
  $678 = (_refill_buffer($669)|0);
  $679 = ($678|0)>(0);
  if ($679) {
   $680 = HEAP32[$672>>2]|0;
   $681 = ((($680)) + 1|0);
   HEAP32[$672>>2] = $681;
   $682 = HEAP8[$680>>0]|0;
   $683 = $682&255;
   $685 = $683;
  } else {
   $685 = -1;
  }
 }
 $684 = $685&255;
 $686 = ((($c)) + 1|0);
 HEAP8[$686>>0] = $684;
 $$mask1 = $685 & 255;
 $687 = $667 | $$mask1;
 $688 = (_bitshift64Shl(($687|0),($668|0),8)|0);
 $689 = tempRet0;
 $690 = HEAP32[$fd>>2]|0;
 $691 = ((($690)) + 8|0);
 $692 = HEAP32[$691>>2]|0;
 $693 = ((($690)) + 4|0);
 $694 = HEAP32[$693>>2]|0;
 $695 = ($692>>>0)>($694>>>0);
 if ($695) {
  $696 = ((($694)) + 1|0);
  HEAP32[$693>>2] = $696;
  $697 = HEAP8[$694>>0]|0;
  $698 = $697&255;
  $706 = $698;
 } else {
  $699 = (_refill_buffer($690)|0);
  $700 = ($699|0)>(0);
  if ($700) {
   $701 = HEAP32[$693>>2]|0;
   $702 = ((($701)) + 1|0);
   HEAP32[$693>>2] = $702;
   $703 = HEAP8[$701>>0]|0;
   $704 = $703&255;
   $706 = $704;
  } else {
   $706 = -1;
  }
 }
 $705 = $706&255;
 $707 = ((($c)) + 2|0);
 HEAP8[$707>>0] = $705;
 $$mask2 = $706 & 255;
 $708 = $688 | $$mask2;
 $709 = (_bitshift64Shl(($708|0),($689|0),8)|0);
 $710 = tempRet0;
 $711 = HEAP32[$fd>>2]|0;
 $712 = ((($711)) + 8|0);
 $713 = HEAP32[$712>>2]|0;
 $714 = ((($711)) + 4|0);
 $715 = HEAP32[$714>>2]|0;
 $716 = ($713>>>0)>($715>>>0);
 if ($716) {
  $717 = ((($715)) + 1|0);
  HEAP32[$714>>2] = $717;
  $718 = HEAP8[$715>>0]|0;
  $719 = $718&255;
  $727 = $719;
 } else {
  $720 = (_refill_buffer($711)|0);
  $721 = ($720|0)>(0);
  if ($721) {
   $722 = HEAP32[$714>>2]|0;
   $723 = ((($722)) + 1|0);
   HEAP32[$714>>2] = $723;
   $724 = HEAP8[$722>>0]|0;
   $725 = $724&255;
   $727 = $725;
  } else {
   $727 = -1;
  }
 }
 $726 = $727&255;
 $728 = ((($c)) + 3|0);
 HEAP8[$728>>0] = $726;
 $$mask3 = $727 & 255;
 $729 = $709 | $$mask3;
 $730 = (_bitshift64Shl(($729|0),($710|0),8)|0);
 $731 = tempRet0;
 $732 = HEAP32[$fd>>2]|0;
 $733 = ((($732)) + 8|0);
 $734 = HEAP32[$733>>2]|0;
 $735 = ((($732)) + 4|0);
 $736 = HEAP32[$735>>2]|0;
 $737 = ($734>>>0)>($736>>>0);
 if ($737) {
  $738 = ((($736)) + 1|0);
  HEAP32[$735>>2] = $738;
  $739 = HEAP8[$736>>0]|0;
  $740 = $739&255;
  $748 = $740;
 } else {
  $741 = (_refill_buffer($732)|0);
  $742 = ($741|0)>(0);
  if ($742) {
   $743 = HEAP32[$735>>2]|0;
   $744 = ((($743)) + 1|0);
   HEAP32[$735>>2] = $744;
   $745 = HEAP8[$743>>0]|0;
   $746 = $745&255;
   $748 = $746;
  } else {
   $748 = -1;
  }
 }
 $747 = $748&255;
 $749 = ((($c)) + 4|0);
 HEAP8[$749>>0] = $747;
 $$mask4 = $748 & 255;
 $750 = $730 | $$mask4;
 $751 = (_bitshift64Shl(($750|0),($731|0),8)|0);
 $752 = tempRet0;
 $753 = HEAP32[$fd>>2]|0;
 $754 = ((($753)) + 8|0);
 $755 = HEAP32[$754>>2]|0;
 $756 = ((($753)) + 4|0);
 $757 = HEAP32[$756>>2]|0;
 $758 = ($755>>>0)>($757>>>0);
 if ($758) {
  $759 = ((($757)) + 1|0);
  HEAP32[$756>>2] = $759;
  $760 = HEAP8[$757>>0]|0;
  $761 = $760&255;
  $769 = $761;
 } else {
  $762 = (_refill_buffer($753)|0);
  $763 = ($762|0)>(0);
  if ($763) {
   $764 = HEAP32[$756>>2]|0;
   $765 = ((($764)) + 1|0);
   HEAP32[$756>>2] = $765;
   $766 = HEAP8[$764>>0]|0;
   $767 = $766&255;
   $769 = $767;
  } else {
   $769 = -1;
  }
 }
 $768 = $769&255;
 $770 = ((($c)) + 5|0);
 HEAP8[$770>>0] = $768;
 $$mask5 = $769 & 255;
 $771 = $751 | $$mask5;
 $772 = (_bitshift64Shl(($771|0),($752|0),8)|0);
 $773 = tempRet0;
 $774 = HEAP32[$fd>>2]|0;
 $775 = ((($774)) + 8|0);
 $776 = HEAP32[$775>>2]|0;
 $777 = ((($774)) + 4|0);
 $778 = HEAP32[$777>>2]|0;
 $779 = ($776>>>0)>($778>>>0);
 if ($779) {
  $780 = ((($778)) + 1|0);
  HEAP32[$777>>2] = $780;
  $781 = HEAP8[$778>>0]|0;
  $782 = $781&255;
  $790 = $782;
 } else {
  $783 = (_refill_buffer($774)|0);
  $784 = ($783|0)>(0);
  if ($784) {
   $785 = HEAP32[$777>>2]|0;
   $786 = ((($785)) + 1|0);
   HEAP32[$777>>2] = $786;
   $787 = HEAP8[$785>>0]|0;
   $788 = $787&255;
   $790 = $788;
  } else {
   $790 = -1;
  }
 }
 $789 = $790&255;
 $791 = ((($c)) + 6|0);
 HEAP8[$791>>0] = $789;
 $$mask6 = $790 & 255;
 $792 = $772 | $$mask6;
 $793 = (_bitshift64Shl(($792|0),($773|0),8)|0);
 $794 = tempRet0;
 $795 = HEAP32[$fd>>2]|0;
 $796 = ((($795)) + 8|0);
 $797 = HEAP32[$796>>2]|0;
 $798 = ((($795)) + 4|0);
 $799 = HEAP32[$798>>2]|0;
 $800 = ($797>>>0)>($799>>>0);
 if ($800) {
  $801 = ((($799)) + 1|0);
  HEAP32[$798>>2] = $801;
  $802 = HEAP8[$799>>0]|0;
  $803 = $802&255;
  $811 = $803;
 } else {
  $804 = (_refill_buffer($795)|0);
  $805 = ($804|0)>(0);
  if ($805) {
   $806 = HEAP32[$798>>2]|0;
   $807 = ((($806)) + 1|0);
   HEAP32[$798>>2] = $807;
   $808 = HEAP8[$806>>0]|0;
   $809 = $808&255;
   $811 = $809;
  } else {
   $811 = -1;
  }
 }
 $810 = $811&255;
 $812 = ((($c)) + 7|0);
 HEAP8[$812>>0] = $810;
 $$mask7 = $811 & 255;
 $813 = $793 | $$mask7;
 $814 = (_bitshift64Shl(($813|0),($794|0),8)|0);
 $815 = tempRet0;
 $816 = HEAP32[$fd>>2]|0;
 $817 = ((($816)) + 8|0);
 $818 = HEAP32[$817>>2]|0;
 $819 = ((($816)) + 4|0);
 $820 = HEAP32[$819>>2]|0;
 $821 = ($818>>>0)>($820>>>0);
 if ($821) {
  $822 = ((($820)) + 1|0);
  HEAP32[$819>>2] = $822;
  $823 = HEAP8[$820>>0]|0;
  $824 = $823&255;
  $832 = $824;
 } else {
  $825 = (_refill_buffer($816)|0);
  $826 = ($825|0)>(0);
  if ($826) {
   $827 = HEAP32[$819>>2]|0;
   $828 = ((($827)) + 1|0);
   HEAP32[$819>>2] = $828;
   $829 = HEAP8[$827>>0]|0;
   $830 = $829&255;
   $832 = $830;
  } else {
   $832 = -1;
  }
 }
 $831 = $832&255;
 $833 = ((($c)) + 8|0);
 HEAP8[$833>>0] = $831;
 $$mask8 = $832 & 255;
 $834 = $814 | $$mask8;
 $835 = HEAP32[$crc>>2]|0;
 $836 = (_crc32($835,$c,9)|0);
 HEAP32[$crc>>2] = $836;
 $837 = $val_p;
 $838 = $837;
 HEAP32[$838>>2] = $834;
 $839 = (($837) + 4)|0;
 $840 = $839;
 HEAP32[$840>>2] = $815;
 $$0 = 9;
 STACKTOP = sp;return ($$0|0);
}
function _itf8_put_blk($blk,$val) {
 $blk = $blk|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $0 = ($val>>>0)>(127);
 do {
  if ($0) {
   $2 = ($val>>>0)>(16383);
   if (!($2)) {
    $3 = $val >>> 8;
    $4 = $3 | 128;
    $5 = $4&255;
    HEAP8[$buf>>0] = $5;
    $6 = $val&255;
    $7 = ((($buf)) + 1|0);
    HEAP8[$7>>0] = $6;
    $50 = 2;
    break;
   }
   $8 = ($val>>>0)>(2097151);
   if (!($8)) {
    $9 = $val >>> 16;
    $10 = $9 | 192;
    $11 = $10&255;
    HEAP8[$buf>>0] = $11;
    $12 = $val >>> 8;
    $13 = $12&255;
    $14 = ((($buf)) + 1|0);
    HEAP8[$14>>0] = $13;
    $15 = $val&255;
    $16 = ((($buf)) + 2|0);
    HEAP8[$16>>0] = $15;
    $50 = 3;
    break;
   }
   $17 = ($val>>>0)>(268435455);
   if ($17) {
    $29 = $val >>> 28;
    $30 = $29 | 240;
    $31 = $30&255;
    HEAP8[$buf>>0] = $31;
    $32 = $val >>> 20;
    $33 = $32&255;
    $34 = ((($buf)) + 1|0);
    HEAP8[$34>>0] = $33;
    $35 = $val >>> 12;
    $36 = $35&255;
    $37 = ((($buf)) + 2|0);
    HEAP8[$37>>0] = $36;
    $38 = $val >>> 4;
    $39 = $38&255;
    $40 = ((($buf)) + 3|0);
    HEAP8[$40>>0] = $39;
    $41 = $val & 15;
    $42 = $41&255;
    $43 = ((($buf)) + 4|0);
    HEAP8[$43>>0] = $42;
    $50 = 5;
    break;
   } else {
    $18 = $val >>> 24;
    $19 = $18 | 224;
    $20 = $19&255;
    HEAP8[$buf>>0] = $20;
    $21 = $val >>> 16;
    $22 = $21&255;
    $23 = ((($buf)) + 1|0);
    HEAP8[$23>>0] = $22;
    $24 = $val >>> 8;
    $25 = $24&255;
    $26 = ((($buf)) + 2|0);
    HEAP8[$26>>0] = $25;
    $27 = $val&255;
    $28 = ((($buf)) + 3|0);
    HEAP8[$28>>0] = $27;
    $50 = 4;
    break;
   }
  } else {
   $1 = $val&255;
   HEAP8[$buf>>0] = $1;
   $50 = 1;
  }
 } while(0);
 $44 = ((($blk)) + 36|0);
 $45 = ((($blk)) + 40|0);
 $46 = ((($blk)) + 32|0);
 while(1) {
  $47 = HEAP32[$44>>2]|0;
  $48 = HEAP32[$45>>2]|0;
  $49 = (($48) + ($50))|0;
  $51 = ($47>>>0)>($49>>>0);
  if ($51) {
   break;
  }
  $52 = ($47|0)==(0);
  $53 = (+($47>>>0));
  $54 = $53 * 1.5;
  $55 = (~~(($54))>>>0);
  $56 = $52 ? 1024 : $55;
  HEAP32[$44>>2] = $56;
  $57 = HEAP32[$46>>2]|0;
  $58 = (_realloc($57,$56)|0);
  HEAP32[$46>>2] = $58;
 }
 $59 = HEAP32[$46>>2]|0;
 $60 = (($59) + ($48)|0);
 _memcpy(($60|0),($buf|0),($50|0))|0;
 $61 = HEAP32[$45>>2]|0;
 $62 = (($61) + ($50))|0;
 HEAP32[$45>>2] = $62;
 STACKTOP = sp;return ($50|0);
}
function _cram_read_block($fd) {
 $fd = $fd|0;
 var $$ = 0, $$0 = 0, $$7 = 0, $$8 = 0, $$9 = 0, $$pn = 0, $$pn11 = 0, $$sink = 0, $$sink6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c = 0, $crc = 0, $i$i = 0, $storemerge = 0, $storemerge10 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $i$i = sp + 8|0;
 $c = sp + 12|0;
 $crc = sp + 4|0;
 $0 = (_malloc(48)|0);
 HEAP32[$crc>>2] = 0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$fd>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)>($6>>>0);
 do {
  if ($7) {
   $$pn = $6;
  } else {
   $8 = (_refill_buffer($2)|0);
   $9 = ($8|0)>(0);
   if ($9) {
    $10 = HEAP32[$5>>2]|0;
    $$pn = $10;
    break;
   }
   _free($0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $storemerge = ((($$pn)) + 1|0);
 HEAP32[$5>>2] = $storemerge;
 $$sink = HEAP8[$$pn>>0]|0;
 $11 = $$sink&255;
 HEAP32[$0>>2] = $11;
 HEAP8[$c>>0] = $$sink;
 $12 = (_crc32(0,$c,1)|0);
 HEAP32[$crc>>2] = $12;
 $13 = HEAP32[$fd>>2]|0;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($13)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($15>>>0)>($17>>>0);
 do {
  if ($18) {
   $$pn11 = $17;
  } else {
   $19 = (_refill_buffer($13)|0);
   $20 = ($19|0)>(0);
   if ($20) {
    $21 = HEAP32[$16>>2]|0;
    $$pn11 = $21;
    break;
   }
   _free($0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $storemerge10 = ((($$pn11)) + 1|0);
 HEAP32[$16>>2] = $storemerge10;
 $$sink6 = HEAP8[$$pn11>>0]|0;
 $22 = $$sink6&255;
 $23 = ((($0)) + 8|0);
 HEAP32[$23>>2] = $22;
 HEAP8[$c>>0] = $$sink6;
 $24 = (_crc32($12,$c,1)|0);
 HEAP32[$crc>>2] = $24;
 $25 = ((($0)) + 12|0);
 $26 = (_itf8_decode_crc($fd,$25,$crc)|0);
 $27 = ($26|0)==(-1);
 if ($27) {
  _free($0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $28 = ((($0)) + 16|0);
 $29 = (_itf8_decode_crc($fd,$28,$crc)|0);
 $30 = ($29|0)==(-1);
 if ($30) {
  _free($0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = ((($0)) + 20|0);
 $32 = (_itf8_decode_crc($fd,$31,$crc)|0);
 $33 = ($32|0)==(-1);
 if ($33) {
  _free($0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = HEAP32[$0>>2]|0;
 $35 = ($34|0)==(0);
 if ($35) {
  $36 = HEAP32[$31>>2]|0;
  $37 = ((($0)) + 36|0);
  HEAP32[$37>>2] = $36;
  $38 = (_malloc($36)|0);
  $39 = ((($0)) + 32|0);
  HEAP32[$39>>2] = $38;
  $40 = ($38|0)==(0|0);
  if ($40) {
   _free($0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $41 = HEAP32[$31>>2]|0;
  $42 = HEAP32[$fd>>2]|0;
  $43 = ((($42)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($42)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($44) - ($46))|0;
  $48 = ($47>>>0)>($41>>>0);
  $49 = $46;
  $$ = $48 ? $41 : $47;
  _memcpy(($38|0),($49|0),($$|0))|0;
  $50 = HEAP32[$45>>2]|0;
  $51 = (($50) + ($$)|0);
  HEAP32[$45>>2] = $51;
  $52 = ($$|0)==($41|0);
  if ($52) {
   $55 = $41;
  } else {
   $53 = (_hread2($42,$38,$41,$$)|0);
   $55 = $53;
  }
  $54 = ($41|0)==($55|0);
  if (!($54)) {
   $56 = HEAP32[$39>>2]|0;
   _free($56);
   _free($0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $57 = HEAP32[$28>>2]|0;
  $58 = ((($0)) + 36|0);
  HEAP32[$58>>2] = $57;
  $59 = (_malloc($57)|0);
  $60 = ((($0)) + 32|0);
  HEAP32[$60>>2] = $59;
  $61 = ($59|0)==(0|0);
  if ($61) {
   _free($0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $62 = HEAP32[$28>>2]|0;
  $63 = HEAP32[$fd>>2]|0;
  $64 = ((($63)) + 8|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ((($63)) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($65) - ($67))|0;
  $69 = ($68>>>0)>($62>>>0);
  $70 = $67;
  $$7 = $69 ? $62 : $68;
  _memcpy(($59|0),($70|0),($$7|0))|0;
  $71 = HEAP32[$66>>2]|0;
  $72 = (($71) + ($$7)|0);
  HEAP32[$66>>2] = $72;
  $73 = ($$7|0)==($62|0);
  if ($73) {
   $76 = $62;
  } else {
   $74 = (_hread2($63,$59,$62,$$7)|0);
   $76 = $74;
  }
  $75 = ($62|0)==($76|0);
  if (!($75)) {
   $77 = HEAP32[$60>>2]|0;
   _free($77);
   _free($0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $78 = ((($fd)) + 8|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 >> 8;
 $81 = ($80|0)>(2);
 if ($81) {
  $82 = ((($0)) + 24|0);
  $83 = HEAP32[$fd>>2]|0;
  $84 = ((($83)) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ((($83)) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($85) - ($87))|0;
  $89 = ($88>>>0)>(4);
  $90 = $87;
  $$8 = $89 ? 4 : $88;
  _memcpy(($i$i|0),($90|0),($$8|0))|0;
  $91 = HEAP32[$86>>2]|0;
  $92 = (($91) + ($$8)|0);
  HEAP32[$86>>2] = $92;
  $93 = ($$8|0)==(4);
  if (!($93)) {
   $94 = (_hread2($83,$i$i,4,$$8)|0);
   $95 = ($94|0)==(4);
   if (!($95)) {
    _free($0);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $96 = HEAP32[$i$i>>2]|0;
  HEAP32[$82>>2] = $96;
  $97 = HEAP32[$crc>>2]|0;
  $98 = ((($0)) + 32|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ($99|0)==(0|0);
  $$9 = $100 ? 27693 : $99;
  $101 = ((($0)) + 36|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (_crc32($97,$$9,$102)|0);
  HEAP32[$crc>>2] = $103;
  $104 = HEAP32[$82>>2]|0;
  $105 = ($103|0)==($104|0);
  if (!($105)) {
   _fprintf(9772,18544,$vararg_buffer);
   $106 = HEAP32[$98>>2]|0;
   _free($106);
   _free($0);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $107 = HEAP32[$0>>2]|0;
 $108 = ((($0)) + 4|0);
 HEAP32[$108>>2] = $107;
 $109 = ((($0)) + 28|0);
 HEAP32[$109>>2] = 0;
 $110 = ((($0)) + 40|0);
 HEAP32[$110>>2] = 0;
 $111 = ((($0)) + 44|0);
 HEAP32[$111>>2] = 7;
 $$0 = $0;
 STACKTOP = sp;return ($$0|0);
}
function _cram_write_block($fd,$b) {
 $fd = $fd|0;
 $b = $b|0;
 var $$ = 0, $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i2 = 0, $$0$i$i$i$i22 = 0, $$0$i$i$i10 = 0, $$0$i$i$i15 = 0, $$0$i$i1$i = 0, $$0$i$i26 = 0, $$0$i$i29 = 0, $$64 = 0, $$65 = 0, $$67 = 0, $$cast = 0, $$cast33 = 0, $$cast34 = 0, $$in = 0, $$in60 = 0, $$in61 = 0, $$in62 = 0;
 var $$in63 = 0, $$pre = 0, $$pre47 = 0, $$pre48 = 0, $$pre49 = 0, $$pre50 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer$0$i = 0, $buffer$0$i$i = 0, $buffer$0$i$i$i = 0, $buffer$0$i$i$i1 = 0, $buffer$0$i28 = 0, $dat = 0, $remaining$0$i$i = 0, $remaining$0$i$i$i = 0, $remaining$0$i$i14 = 0, $src$0$i$i = 0, $src$0$i$i$i = 0;
 var $src$0$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $dat = sp + 4|0;
 $1 = HEAP32[$b>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = ((($b)) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($b)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($4|0)==($6|0);
  if (!($7)) {
   ___assert_fail((18565|0),(18618|0),1029,(18633|0));
   // unreachable;
  }
 }
 $8 = HEAP32[$fd>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($8)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10>>>0)<($12>>>0);
 do {
  if ($13) {
   $14 = $1&255;
   $15 = ((($10)) + 1|0);
   HEAP32[$9>>2] = $15;
   HEAP8[$10>>0] = $14;
  } else {
   $16 = HEAP32[$8>>2]|0;
   $17 = ((($8)) + 16|0);
   $18 = ((($8)) + 20|0);
   $$in = $10;$buffer$0$i$i$i = $16;
   while(1) {
    $19 = ($buffer$0$i$i$i>>>0)<($$in>>>0);
    if (!($19)) {
     label = 13;
     break;
    }
    $20 = $$in;
    $21 = HEAP32[$17>>2]|0;
    $22 = ((($21)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $buffer$0$i$i$i;
    $25 = (($20) - ($24))|0;
    $26 = (FUNCTION_TABLE_iiii[$23 & 127]($8,$buffer$0$i$i$i,$25)|0);
    $27 = ($26|0)<(0);
    if ($27) {
     break;
    }
    $33 = (($buffer$0$i$i$i) + ($26)|0);
    $34 = HEAP32[$18>>2]|0;
    $35 = (($34) + ($26))|0;
    HEAP32[$18>>2] = $35;
    $$pre = HEAP32[$9>>2]|0;
    $$in = $$pre;$buffer$0$i$i$i = $33;
   }
   if ((label|0) == 13) {
    $38 = HEAP32[$8>>2]|0;
    $39 = $1&255;
    $40 = ((($38)) + 1|0);
    HEAP32[$9>>2] = $40;
    HEAP8[$38>>0] = $39;
    break;
   }
   $28 = HEAP32[6773]|0;
   $29 = ($28|0)==(0|0);
   if ($29) {
    $$0$i$i$i$i = 27136;
   } else {
    $30 = (_pthread_self()|0);
    $31 = ((($30)) + 64|0);
    $32 = HEAP32[$31>>2]|0;
    $$0$i$i$i$i = $32;
   }
   $36 = HEAP32[$$0$i$i$i$i>>2]|0;
   $37 = ((($8)) + 28|0);
   HEAP32[$37>>2] = $36;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $41 = ($1|0)==(-1);
 if ($41) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $42 = ((($b)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$fd>>2]|0;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($44)) + 12|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($46>>>0)<($48>>>0);
 do {
  if ($49) {
   $50 = $43&255;
   $51 = ((($46)) + 1|0);
   HEAP32[$45>>2] = $51;
   HEAP8[$46>>0] = $50;
  } else {
   $52 = HEAP32[$44>>2]|0;
   $53 = ((($44)) + 16|0);
   $54 = ((($44)) + 20|0);
   $$in60 = $46;$buffer$0$i$i$i1 = $52;
   while(1) {
    $55 = ($buffer$0$i$i$i1>>>0)<($$in60>>>0);
    if (!($55)) {
     label = 24;
     break;
    }
    $56 = $$in60;
    $57 = HEAP32[$53>>2]|0;
    $58 = ((($57)) + 4|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $buffer$0$i$i$i1;
    $61 = (($56) - ($60))|0;
    $62 = (FUNCTION_TABLE_iiii[$59 & 127]($44,$buffer$0$i$i$i1,$61)|0);
    $63 = ($62|0)<(0);
    if ($63) {
     break;
    }
    $69 = (($buffer$0$i$i$i1) + ($62)|0);
    $70 = HEAP32[$54>>2]|0;
    $71 = (($70) + ($62))|0;
    HEAP32[$54>>2] = $71;
    $$pre47 = HEAP32[$45>>2]|0;
    $$in60 = $$pre47;$buffer$0$i$i$i1 = $69;
   }
   if ((label|0) == 24) {
    $74 = HEAP32[$44>>2]|0;
    $75 = $43&255;
    $76 = ((($74)) + 1|0);
    HEAP32[$45>>2] = $76;
    HEAP8[$74>>0] = $75;
    break;
   }
   $64 = HEAP32[6773]|0;
   $65 = ($64|0)==(0|0);
   if ($65) {
    $$0$i$i$i$i2 = 27136;
   } else {
    $66 = (_pthread_self()|0);
    $67 = ((($66)) + 64|0);
    $68 = HEAP32[$67>>2]|0;
    $$0$i$i$i$i2 = $68;
   }
   $72 = HEAP32[$$0$i$i$i$i2>>2]|0;
   $73 = ((($44)) + 28|0);
   HEAP32[$73>>2] = $72;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $77 = ($43|0)==(-1);
 if ($77) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $78 = ((($b)) + 12|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (_itf8_encode($fd,$79)|0);
 $81 = ($80|0)==(-1);
 if ($81) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $82 = ((($b)) + 16|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = (_itf8_encode($fd,$83)|0);
 $85 = ($84|0)==(-1);
 if ($85) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $86 = ((($b)) + 20|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = (_itf8_encode($fd,$87)|0);
 $89 = ($88|0)==(-1);
 if ($89) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $90 = HEAP32[$b>>2]|0;
 $91 = ($90|0)==(0);
 if ($91) {
  $92 = HEAP32[$86>>2]|0;
  $93 = HEAP32[$fd>>2]|0;
  $94 = ((($b)) + 32|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = ((($93)) + 12|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ((($93)) + 4|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($97) - ($99))|0;
  $101 = ($100>>>0)>($92>>>0);
  $102 = $99;
  $$ = $101 ? $92 : $100;
  _memcpy(($102|0),($95|0),($$|0))|0;
  $103 = HEAP32[$98>>2]|0;
  $104 = (($103) + ($$)|0);
  HEAP32[$98>>2] = $104;
  $105 = ($92|0)==($$|0);
  do {
   if ($105) {
    $155 = $92;
   } else {
    $106 = HEAP32[$96>>2]|0;
    $107 = HEAP32[$93>>2]|0;
    $108 = (($106) - ($107))|0;
    $$cast34 = $107;
    $109 = ((($93)) + 16|0);
    $110 = ((($93)) + 20|0);
    $$in63 = $104;$buffer$0$i = $$cast34;
    while(1) {
     $111 = ($buffer$0$i>>>0)<($$in63>>>0);
     if (!($111)) {
      break;
     }
     $112 = $$in63;
     $113 = HEAP32[$109>>2]|0;
     $114 = ((($113)) + 4|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = $buffer$0$i;
     $117 = (($112) - ($116))|0;
     $118 = (FUNCTION_TABLE_iiii[$115 & 127]($93,$buffer$0$i,$117)|0);
     $119 = ($118|0)<(0);
     if ($119) {
      label = 34;
      break;
     }
     $125 = (($buffer$0$i) + ($118)|0);
     $126 = HEAP32[$110>>2]|0;
     $127 = (($126) + ($118))|0;
     HEAP32[$110>>2] = $127;
     $$pre49 = HEAP32[$98>>2]|0;
     $$in63 = $$pre49;$buffer$0$i = $125;
    }
    if ((label|0) == 34) {
     $120 = HEAP32[6773]|0;
     $121 = ($120|0)==(0|0);
     if ($121) {
      $$0$i$i26 = 27136;
     } else {
      $122 = (_pthread_self()|0);
      $123 = ((($122)) + 64|0);
      $124 = HEAP32[$123>>2]|0;
      $$0$i$i26 = $124;
     }
     $128 = HEAP32[$$0$i$i26>>2]|0;
     $129 = ((($93)) + 28|0);
     HEAP32[$129>>2] = $128;
     $155 = $118;
     break;
    }
    $130 = HEAP32[$93>>2]|0;
    HEAP32[$98>>2] = $130;
    $131 = (($95) + ($$)|0);
    $132 = (($92) - ($$))|0;
    $remaining$0$i$i = $132;$src$0$i$i = $131;
    while(1) {
     $133 = $remaining$0$i$i << 1;
     $134 = ($133>>>0)<($108>>>0);
     if ($134) {
      label = 45;
      break;
     }
     $135 = HEAP32[$109>>2]|0;
     $136 = ((($135)) + 4|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = (FUNCTION_TABLE_iiii[$137 & 127]($93,$src$0$i$i,$remaining$0$i$i)|0);
     $139 = ($138|0)<(0);
     if ($139) {
      break;
     }
     $147 = HEAP32[$110>>2]|0;
     $148 = (($147) + ($138))|0;
     HEAP32[$110>>2] = $148;
     $149 = (($src$0$i$i) + ($138)|0);
     $150 = (($remaining$0$i$i) - ($138))|0;
     $remaining$0$i$i = $150;$src$0$i$i = $149;
    }
    if ((label|0) == 45) {
     $151 = HEAP32[$98>>2]|0;
     _memcpy(($151|0),($src$0$i$i|0),($remaining$0$i$i|0))|0;
     $152 = HEAP32[$98>>2]|0;
     $153 = (($152) + ($remaining$0$i$i)|0);
     HEAP32[$98>>2] = $153;
     $155 = $92;
     break;
    }
    $140 = HEAP32[6773]|0;
    $141 = ($140|0)==(0|0);
    if ($141) {
     $$0$i$i$i10 = 27136;
    } else {
     $142 = (_pthread_self()|0);
     $143 = ((($142)) + 64|0);
     $144 = HEAP32[$143>>2]|0;
     $$0$i$i$i10 = $144;
    }
    $145 = HEAP32[$$0$i$i$i10>>2]|0;
    $146 = ((($93)) + 28|0);
    HEAP32[$146>>2] = $145;
    $155 = $138;
   }
  } while(0);
  $154 = ($92|0)==($155|0);
  if (!($154)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $156 = HEAP32[$82>>2]|0;
  $157 = HEAP32[$fd>>2]|0;
  $158 = ((($b)) + 32|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = ((($157)) + 12|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = ((($157)) + 4|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($161) - ($163))|0;
  $165 = ($164>>>0)>($156>>>0);
  $166 = $163;
  $$64 = $165 ? $156 : $164;
  _memcpy(($166|0),($159|0),($$64|0))|0;
  $167 = HEAP32[$162>>2]|0;
  $168 = (($167) + ($$64)|0);
  HEAP32[$162>>2] = $168;
  $169 = ($156|0)==($$64|0);
  do {
   if ($169) {
    $219 = $156;
   } else {
    $170 = HEAP32[$160>>2]|0;
    $171 = HEAP32[$157>>2]|0;
    $172 = (($170) - ($171))|0;
    $$cast = $171;
    $173 = ((($157)) + 16|0);
    $174 = ((($157)) + 20|0);
    $$in61 = $168;$buffer$0$i28 = $$cast;
    while(1) {
     $175 = ($buffer$0$i28>>>0)<($$in61>>>0);
     if (!($175)) {
      break;
     }
     $176 = $$in61;
     $177 = HEAP32[$173>>2]|0;
     $178 = ((($177)) + 4|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = $buffer$0$i28;
     $181 = (($176) - ($180))|0;
     $182 = (FUNCTION_TABLE_iiii[$179 & 127]($157,$buffer$0$i28,$181)|0);
     $183 = ($182|0)<(0);
     if ($183) {
      label = 51;
      break;
     }
     $189 = (($buffer$0$i28) + ($182)|0);
     $190 = HEAP32[$174>>2]|0;
     $191 = (($190) + ($182))|0;
     HEAP32[$174>>2] = $191;
     $$pre48 = HEAP32[$162>>2]|0;
     $$in61 = $$pre48;$buffer$0$i28 = $189;
    }
    if ((label|0) == 51) {
     $184 = HEAP32[6773]|0;
     $185 = ($184|0)==(0|0);
     if ($185) {
      $$0$i$i29 = 27136;
     } else {
      $186 = (_pthread_self()|0);
      $187 = ((($186)) + 64|0);
      $188 = HEAP32[$187>>2]|0;
      $$0$i$i29 = $188;
     }
     $192 = HEAP32[$$0$i$i29>>2]|0;
     $193 = ((($157)) + 28|0);
     HEAP32[$193>>2] = $192;
     $219 = $182;
     break;
    }
    $194 = HEAP32[$157>>2]|0;
    HEAP32[$162>>2] = $194;
    $195 = (($159) + ($$64)|0);
    $196 = (($156) - ($$64))|0;
    $remaining$0$i$i14 = $196;$src$0$i$i13 = $195;
    while(1) {
     $197 = $remaining$0$i$i14 << 1;
     $198 = ($197>>>0)<($172>>>0);
     if ($198) {
      label = 62;
      break;
     }
     $199 = HEAP32[$173>>2]|0;
     $200 = ((($199)) + 4|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = (FUNCTION_TABLE_iiii[$201 & 127]($157,$src$0$i$i13,$remaining$0$i$i14)|0);
     $203 = ($202|0)<(0);
     if ($203) {
      break;
     }
     $211 = HEAP32[$174>>2]|0;
     $212 = (($211) + ($202))|0;
     HEAP32[$174>>2] = $212;
     $213 = (($src$0$i$i13) + ($202)|0);
     $214 = (($remaining$0$i$i14) - ($202))|0;
     $remaining$0$i$i14 = $214;$src$0$i$i13 = $213;
    }
    if ((label|0) == 62) {
     $215 = HEAP32[$162>>2]|0;
     _memcpy(($215|0),($src$0$i$i13|0),($remaining$0$i$i14|0))|0;
     $216 = HEAP32[$162>>2]|0;
     $217 = (($216) + ($remaining$0$i$i14)|0);
     HEAP32[$162>>2] = $217;
     $219 = $156;
     break;
    }
    $204 = HEAP32[6773]|0;
    $205 = ($204|0)==(0|0);
    if ($205) {
     $$0$i$i$i15 = 27136;
    } else {
     $206 = (_pthread_self()|0);
     $207 = ((($206)) + 64|0);
     $208 = HEAP32[$207>>2]|0;
     $$0$i$i$i15 = $208;
    }
    $209 = HEAP32[$$0$i$i$i15>>2]|0;
    $210 = ((($157)) + 28|0);
    HEAP32[$210>>2] = $209;
    $219 = $202;
   }
  } while(0);
  $218 = ($156|0)==($219|0);
  if (!($218)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $220 = ((($fd)) + 8|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = $221 >> 8;
 $223 = ($222|0)>(2);
 if (!($223)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $224 = HEAP32[$b>>2]|0;
 $225 = $224&255;
 $226 = ((($dat)) + 1|0);
 HEAP8[$dat>>0] = $225;
 $227 = HEAP32[$42>>2]|0;
 $228 = $227&255;
 $229 = ((($dat)) + 2|0);
 HEAP8[$226>>0] = $228;
 $230 = HEAP32[$78>>2]|0;
 $231 = ($230>>>0)>(127);
 do {
  if ($231) {
   $233 = ($230>>>0)>(16383);
   if (!($233)) {
    $234 = $230 >>> 8;
    $235 = $234 | 128;
    $236 = $235&255;
    HEAP8[$229>>0] = $236;
    $237 = $230&255;
    $238 = ((($dat)) + 3|0);
    HEAP8[$238>>0] = $237;
    $276 = 2;
    break;
   }
   $239 = ($230>>>0)>(2097151);
   if (!($239)) {
    $240 = $230 >>> 16;
    $241 = $240 | 192;
    $242 = $241&255;
    HEAP8[$229>>0] = $242;
    $243 = $230 >>> 8;
    $244 = $243&255;
    $245 = ((($dat)) + 3|0);
    HEAP8[$245>>0] = $244;
    $246 = $230&255;
    $247 = ((($dat)) + 4|0);
    HEAP8[$247>>0] = $246;
    $276 = 3;
    break;
   }
   $248 = ($230>>>0)>(268435455);
   if ($248) {
    $260 = $230 >>> 28;
    $261 = $260 | 240;
    $262 = $261&255;
    HEAP8[$229>>0] = $262;
    $263 = $230 >>> 20;
    $264 = $263&255;
    $265 = ((($dat)) + 3|0);
    HEAP8[$265>>0] = $264;
    $266 = $230 >>> 12;
    $267 = $266&255;
    $268 = ((($dat)) + 4|0);
    HEAP8[$268>>0] = $267;
    $269 = $230 >>> 4;
    $270 = $269&255;
    $271 = ((($dat)) + 5|0);
    HEAP8[$271>>0] = $270;
    $272 = $230 & 15;
    $273 = $272&255;
    $274 = ((($dat)) + 6|0);
    HEAP8[$274>>0] = $273;
    $276 = 5;
    break;
   } else {
    $249 = $230 >>> 24;
    $250 = $249 | 224;
    $251 = $250&255;
    HEAP8[$229>>0] = $251;
    $252 = $230 >>> 16;
    $253 = $252&255;
    $254 = ((($dat)) + 3|0);
    HEAP8[$254>>0] = $253;
    $255 = $230 >>> 8;
    $256 = $255&255;
    $257 = ((($dat)) + 4|0);
    HEAP8[$257>>0] = $256;
    $258 = $230&255;
    $259 = ((($dat)) + 5|0);
    HEAP8[$259>>0] = $258;
    $276 = 4;
    break;
   }
  } else {
   $232 = $230&255;
   HEAP8[$229>>0] = $232;
   $276 = 1;
  }
 } while(0);
 $275 = (($229) + ($276)|0);
 $277 = HEAP32[$82>>2]|0;
 $278 = ($277>>>0)>(127);
 do {
  if ($278) {
   $280 = ($277>>>0)>(16383);
   if (!($280)) {
    $281 = $277 >>> 8;
    $282 = $281 | 128;
    $283 = $282&255;
    HEAP8[$275>>0] = $283;
    $284 = $277&255;
    $285 = ((($275)) + 1|0);
    HEAP8[$285>>0] = $284;
    $323 = 2;
    break;
   }
   $286 = ($277>>>0)>(2097151);
   if (!($286)) {
    $287 = $277 >>> 16;
    $288 = $287 | 192;
    $289 = $288&255;
    HEAP8[$275>>0] = $289;
    $290 = $277 >>> 8;
    $291 = $290&255;
    $292 = ((($275)) + 1|0);
    HEAP8[$292>>0] = $291;
    $293 = $277&255;
    $294 = ((($275)) + 2|0);
    HEAP8[$294>>0] = $293;
    $323 = 3;
    break;
   }
   $295 = ($277>>>0)>(268435455);
   if ($295) {
    $307 = $277 >>> 28;
    $308 = $307 | 240;
    $309 = $308&255;
    HEAP8[$275>>0] = $309;
    $310 = $277 >>> 20;
    $311 = $310&255;
    $312 = ((($275)) + 1|0);
    HEAP8[$312>>0] = $311;
    $313 = $277 >>> 12;
    $314 = $313&255;
    $315 = ((($275)) + 2|0);
    HEAP8[$315>>0] = $314;
    $316 = $277 >>> 4;
    $317 = $316&255;
    $318 = ((($275)) + 3|0);
    HEAP8[$318>>0] = $317;
    $319 = $277 & 15;
    $320 = $319&255;
    $321 = ((($275)) + 4|0);
    HEAP8[$321>>0] = $320;
    $323 = 5;
    break;
   } else {
    $296 = $277 >>> 24;
    $297 = $296 | 224;
    $298 = $297&255;
    HEAP8[$275>>0] = $298;
    $299 = $277 >>> 16;
    $300 = $299&255;
    $301 = ((($275)) + 1|0);
    HEAP8[$301>>0] = $300;
    $302 = $277 >>> 8;
    $303 = $302&255;
    $304 = ((($275)) + 2|0);
    HEAP8[$304>>0] = $303;
    $305 = $277&255;
    $306 = ((($275)) + 3|0);
    HEAP8[$306>>0] = $305;
    $323 = 4;
    break;
   }
  } else {
   $279 = $277&255;
   HEAP8[$275>>0] = $279;
   $323 = 1;
  }
 } while(0);
 $322 = (($275) + ($323)|0);
 $324 = HEAP32[$86>>2]|0;
 $325 = ($324>>>0)>(127);
 do {
  if ($325) {
   $327 = ($324>>>0)>(16383);
   if (!($327)) {
    $328 = $324 >>> 8;
    $329 = $328 | 128;
    $330 = $329&255;
    HEAP8[$322>>0] = $330;
    $331 = $324&255;
    $332 = ((($322)) + 1|0);
    HEAP8[$332>>0] = $331;
    $370 = 2;
    break;
   }
   $333 = ($324>>>0)>(2097151);
   if (!($333)) {
    $334 = $324 >>> 16;
    $335 = $334 | 192;
    $336 = $335&255;
    HEAP8[$322>>0] = $336;
    $337 = $324 >>> 8;
    $338 = $337&255;
    $339 = ((($322)) + 1|0);
    HEAP8[$339>>0] = $338;
    $340 = $324&255;
    $341 = ((($322)) + 2|0);
    HEAP8[$341>>0] = $340;
    $370 = 3;
    break;
   }
   $342 = ($324>>>0)>(268435455);
   if ($342) {
    $354 = $324 >>> 28;
    $355 = $354 | 240;
    $356 = $355&255;
    HEAP8[$322>>0] = $356;
    $357 = $324 >>> 20;
    $358 = $357&255;
    $359 = ((($322)) + 1|0);
    HEAP8[$359>>0] = $358;
    $360 = $324 >>> 12;
    $361 = $360&255;
    $362 = ((($322)) + 2|0);
    HEAP8[$362>>0] = $361;
    $363 = $324 >>> 4;
    $364 = $363&255;
    $365 = ((($322)) + 3|0);
    HEAP8[$365>>0] = $364;
    $366 = $324 & 15;
    $367 = $366&255;
    $368 = ((($322)) + 4|0);
    HEAP8[$368>>0] = $367;
    $370 = 5;
    break;
   } else {
    $343 = $324 >>> 24;
    $344 = $343 | 224;
    $345 = $344&255;
    HEAP8[$322>>0] = $345;
    $346 = $324 >>> 16;
    $347 = $346&255;
    $348 = ((($322)) + 1|0);
    HEAP8[$348>>0] = $347;
    $349 = $324 >>> 8;
    $350 = $349&255;
    $351 = ((($322)) + 2|0);
    HEAP8[$351>>0] = $350;
    $352 = $324&255;
    $353 = ((($322)) + 3|0);
    HEAP8[$353>>0] = $352;
    $370 = 4;
    break;
   }
  } else {
   $326 = $324&255;
   HEAP8[$322>>0] = $326;
   $370 = 1;
  }
 } while(0);
 $369 = (($322) + ($370)|0);
 $371 = $369;
 $372 = $dat;
 $373 = (($371) - ($372))|0;
 $374 = (_crc32(0,$dat,$373)|0);
 $375 = ($224|0)==(0);
 $376 = ((($b)) + 32|0);
 $377 = HEAP32[$376>>2]|0;
 $378 = ($377|0)==(0|0);
 $$65 = $378 ? 27693 : $377;
 if ($375) {
  $379 = (_crc32($374,$$65,$324)|0);
  $380 = ((($b)) + 24|0);
  HEAP32[$380>>2] = $379;
  $383 = $379;
 } else {
  $381 = (_crc32($374,$$65,$277)|0);
  $382 = ((($b)) + 24|0);
  HEAP32[$382>>2] = $381;
  $383 = $381;
 }
 HEAP32[$0>>2] = $383;
 $384 = HEAP32[$fd>>2]|0;
 $385 = ((($384)) + 12|0);
 $386 = HEAP32[$385>>2]|0;
 $387 = ((($384)) + 4|0);
 $388 = HEAP32[$387>>2]|0;
 $389 = (($386) - ($388))|0;
 $390 = ($389>>>0)>(4);
 $391 = $388;
 $$67 = $390 ? 4 : $389;
 _memcpy(($391|0),($0|0),($$67|0))|0;
 $392 = HEAP32[$387>>2]|0;
 $393 = (($392) + ($$67)|0);
 HEAP32[$387>>2] = $393;
 $394 = ($$67|0)==(4);
 do {
  if (!($394)) {
   $395 = HEAP32[$385>>2]|0;
   $396 = HEAP32[$384>>2]|0;
   $397 = (($395) - ($396))|0;
   $$cast33 = $396;
   $398 = ((($384)) + 16|0);
   $399 = ((($384)) + 20|0);
   $$in62 = $393;$buffer$0$i$i = $$cast33;
   while(1) {
    $400 = ($buffer$0$i$i>>>0)<($$in62>>>0);
    if (!($400)) {
     label = 103;
     break;
    }
    $401 = $$in62;
    $402 = HEAP32[$398>>2]|0;
    $403 = ((($402)) + 4|0);
    $404 = HEAP32[$403>>2]|0;
    $405 = $buffer$0$i$i;
    $406 = (($401) - ($405))|0;
    $407 = (FUNCTION_TABLE_iiii[$404 & 127]($384,$buffer$0$i$i,$406)|0);
    $408 = ($407|0)<(0);
    if ($408) {
     label = 99;
     break;
    }
    $414 = (($buffer$0$i$i) + ($407)|0);
    $415 = HEAP32[$399>>2]|0;
    $416 = (($415) + ($407))|0;
    HEAP32[$399>>2] = $416;
    $$pre50 = HEAP32[$387>>2]|0;
    $$in62 = $$pre50;$buffer$0$i$i = $414;
   }
   if ((label|0) == 99) {
    $409 = HEAP32[6773]|0;
    $410 = ($409|0)==(0|0);
    if ($410) {
     $$0$i$i1$i = 27136;
    } else {
     $411 = (_pthread_self()|0);
     $412 = ((($411)) + 64|0);
     $413 = HEAP32[$412>>2]|0;
     $$0$i$i1$i = $413;
    }
    $417 = HEAP32[$$0$i$i1$i>>2]|0;
    $418 = ((($384)) + 28|0);
    HEAP32[$418>>2] = $417;
   }
   else if ((label|0) == 103) {
    $419 = HEAP32[$384>>2]|0;
    HEAP32[$387>>2] = $419;
    $420 = (($0) + ($$67)|0);
    $421 = (4 - ($$67))|0;
    $remaining$0$i$i$i = $421;$src$0$i$i$i = $420;
    while(1) {
     $422 = $remaining$0$i$i$i << 1;
     $423 = ($422>>>0)<($397>>>0);
     if ($423) {
      label = 110;
      break;
     }
     $424 = HEAP32[$398>>2]|0;
     $425 = ((($424)) + 4|0);
     $426 = HEAP32[$425>>2]|0;
     $427 = (FUNCTION_TABLE_iiii[$426 & 127]($384,$src$0$i$i$i,$remaining$0$i$i$i)|0);
     $428 = ($427|0)<(0);
     if ($428) {
      break;
     }
     $436 = HEAP32[$399>>2]|0;
     $437 = (($436) + ($427))|0;
     HEAP32[$399>>2] = $437;
     $438 = (($src$0$i$i$i) + ($427)|0);
     $439 = (($remaining$0$i$i$i) - ($427))|0;
     $remaining$0$i$i$i = $439;$src$0$i$i$i = $438;
    }
    if ((label|0) == 110) {
     $440 = HEAP32[$387>>2]|0;
     _memcpy(($440|0),($src$0$i$i$i|0),($remaining$0$i$i$i|0))|0;
     $441 = HEAP32[$387>>2]|0;
     $442 = (($441) + ($remaining$0$i$i$i)|0);
     HEAP32[$387>>2] = $442;
     break;
    }
    $429 = HEAP32[6773]|0;
    $430 = ($429|0)==(0|0);
    if ($430) {
     $$0$i$i$i$i22 = 27136;
    } else {
     $431 = (_pthread_self()|0);
     $432 = ((($431)) + 64|0);
     $433 = HEAP32[$432>>2]|0;
     $$0$i$i$i$i22 = $433;
    }
    $434 = HEAP32[$$0$i$i$i$i22>>2]|0;
    $435 = ((($384)) + 28|0);
    HEAP32[$435>>2] = $434;
   }
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _cram_uncompress_block($b) {
 $b = $b|0;
 var $$0 = 0, $$0$i2 = 0, $$0$i27$i = 0, $$pre = 0, $$pre41 = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $8 = 0.0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $D$i$i = 0;
 var $R$i$i$sroa$0$0 = 0, $R$i$i$sroa$16$0 = 0, $R$i$i$sroa$28$0 = 0, $R$i$i$sroa$40$0 = 0, $cp$0$i$i = 0, $cp$0$i11$i = 0, $cp$1$i$i = 0, $cp$1$i12$i = 0, $cp$2$i$i = 0, $cp$3$i17$i = 0, $cp$4$i$i = 0, $cp$6$i$i = 0, $data$0$i = 0, $data_alloc$0$i = 0, $exitcond = 0, $i$0$i$i = 0, $i$0$i18$i = 0, $i$2$i$i = 0, $i$3$i$i = 0, $i4$i$i$sroa$0$0 = 0;
 var $i4$i$i$sroa$0$1 = 0, $i4$i$i$sroa$18$0 = 0, $i4$i$i$sroa$18$1 = 0, $i4$i$i$sroa$31$0 = 0, $i4$i$i$sroa$31$1 = 0, $i4$i$i$sroa$44$0 = 0, $i4$i$i$sroa$44$1 = 0, $i4$i$i$sroa$44$2 = 0, $j$0$i$i = 0, $j$0$i10$i = 0, $j$2$i$i = 0, $j$2$i16$i = 0, $l0$0$i$i = 0, $l1$0$i$i = 0, $l2$0$i$i = 0, $l3$0$i$i = 0, $l3$1$i$i = 0, $or$cond = 0, $out_buf$0$i$i6 = 0, $out_buf$0$i$i7 = 0;
 var $ptr$0$i$i$i = 0, $ptr$0$i$i$i$i = 0, $ptr$0$i$i$i24$i = 0, $ptr$0$i$i10$i$i = 0, $ptr$0$i$i14$i$i = 0, $ptr$0$i$i18$i$i = 0, $ptr$0$i$i2$i$i = 0, $ptr$0$i$i20$i = 0, $ptr$0$i$i6$i$i = 0, $ptr$0$i10$i$i = 0, $ptr$0$i2$i$i = 0, $ptr$0$i22$i$i = 0, $ptr$0$i26$i$i = 0, $ptr$0$i30$i$i = 0, $ptr$0$i6$i$i = 0, $ptr$i$i$0 = 0, $ptr$i$i$1 = 0, $ptr$i$i$2 = 0, $ptr$i$i$3 = 0, $ptr$i$i$4 = 0;
 var $ptr$i$i$5 = 0, $ptr$i$i$6 = 0, $ptr$i5$i$0 = 0, $ptr$i5$i$1 = 0, $ptr$i5$i$2 = 0, $ptr$i5$i$3 = 0, $ptr$i5$i$4 = 0, $ptr$i5$i$5 = 0, $ptr$i5$i$6 = 0, $ptr$i5$i$7 = 0, $rans3$i$i$0 = 0, $rle$0$i$i = 0, $rle$2$i$i = 0, $rle_i$0$i$i = 0, $rle_i$2$i$i = 0, $rle_j$0$i$i = 0, $rle_j$2$i$i = 0, $s$i = 0, $syms$0$i$i5 = 0, $syms$i$i = 0;
 var $uncomp_size$0 = 0, $usize2$3 = 0, $usize2$4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $x$0$i$i$i = 0, $x$0$i$i$i$i = 0, $x$0$i$i$i23$i = 0, $x$0$i$i1$i$i = 0, $x$0$i$i13$i$i = 0, $x$0$i$i17$i$i = 0, $x$0$i$i19$i = 0, $x$0$i$i5$i$i = 0, $x$0$i$i9$i$i = 0, $x$0$i1$i$i = 0, $x$0$i21$i$i = 0, $x$0$i25$i$i = 0, $x$0$i29$i$i = 0;
 var $x$0$i5$i$i = 0, $x$0$i9$i = 0, $x$0$i9$i$i = 0, $x$1$i$i$i = 0, $x$1$i$i$i$i = 0, $x$1$i$i21$i = 0, $x$1$i11$i$i = 0, $x$1$i23$i$i = 0, $x$1$i27$i$i = 0, $x$1$i3$i$i = 0, $x$1$i31$i$i = 0, $x$1$i7$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3168|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $D$i$i = sp + 88|0;
 $syms$i$i = sp + 2144|0;
 $s$i = sp + 32|0;
 $0 = ((($b)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  HEAP32[$b>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$b>>2]|0;
 switch ($3|0) {
 case 1:  {
  $4 = ((($b)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($b)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (+($7>>>0));
  $9 = $8 * 1.2;
  $10 = $9 + 100.0;
  $11 = (~~(($10)));
  $12 = (_malloc($11)|0);
  $13 = ($12|0)==(0|0);
  do {
   if (!($13)) {
    $14 = ((($s$i)) + 32|0);
    HEAP32[$14>>2] = 0;
    $15 = ((($s$i)) + 36|0);
    HEAP32[$15>>2] = 0;
    $16 = ((($s$i)) + 40|0);
    HEAP32[$16>>2] = 0;
    HEAP32[$s$i>>2] = $5;
    $17 = ((($s$i)) + 4|0);
    HEAP32[$17>>2] = $7;
    $18 = ((($s$i)) + 8|0);
    HEAP32[$18>>2] = 0;
    $19 = ((($s$i)) + 12|0);
    HEAP32[$19>>2] = $12;
    $20 = ((($s$i)) + 16|0);
    HEAP32[$20>>2] = $11;
    $21 = ((($s$i)) + 20|0);
    HEAP32[$21>>2] = 0;
    $22 = (_inflateInit2_($s$i,47,18486)|0);
    $23 = ($22|0)==(0);
    if ($23) {
     $data$0$i = $12;$data_alloc$0$i = $11;
    } else {
     $24 = ((($s$i)) + 24|0);
     $25 = HEAP32[$24>>2]|0;
     HEAP32[$vararg_buffer>>2] = $25;
     _fprintf(9772,18492,$vararg_buffer);
     _free($12);
     break;
    }
    L13: while(1) {
     $26 = HEAP32[$17>>2]|0;
     $27 = ($26|0)==(0);
     if ($27) {
      label = 13;
      break;
     }
     $28 = HEAP32[$21>>2]|0;
     $29 = (($data$0$i) + ($28)|0);
     HEAP32[$19>>2] = $29;
     $30 = (_inflate($s$i,0)|0);
     switch ($30|0) {
     case 1:  {
      label = 13;
      break L13;
      break;
     }
     case 0:  {
      break;
     }
     default: {
      label = 9;
      break L13;
     }
     }
     $33 = HEAP32[$17>>2]|0;
     $34 = (+($33>>>0));
     $35 = HEAP32[$18>>2]|0;
     $36 = (+($35>>>0));
     $37 = $34 / $36;
     $38 = HEAP32[$21>>2]|0;
     $39 = (+($38>>>0));
     $40 = $37 * $39;
     $41 = $40 + 100.0;
     $42 = (~~(($41)));
     $43 = (($data_alloc$0$i) + ($42))|0;
     $44 = (_realloc($data$0$i,$43)|0);
     $45 = ($44|0)==(0|0);
     if ($45) {
      label = 11;
      break;
     }
     $46 = HEAP32[$20>>2]|0;
     $47 = (($46) + ($42))|0;
     HEAP32[$20>>2] = $47;
     $data$0$i = $44;$data_alloc$0$i = $43;
    }
    if ((label|0) == 9) {
     $31 = ((($s$i)) + 24|0);
     $32 = HEAP32[$31>>2]|0;
     HEAP32[$vararg_buffer1>>2] = $32;
     _fprintf(9772,18520,$vararg_buffer1);
     _free($data$0$i);
     break;
    }
    else if ((label|0) == 11) {
     _free($data$0$i);
     break;
    }
    else if ((label|0) == 13) {
     $48 = ((($s$i)) + 28|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49|0)==(0|0);
     do {
      if ($50) {
       $51 = HEAP32[$21>>2]|0;
       $uncomp_size$0 = $51;
      } else {
       $52 = HEAP32[$15>>2]|0;
       $53 = ($52|0)==(0|0);
       if ($53) {
        $54 = HEAP32[$21>>2]|0;
        $uncomp_size$0 = $54;
        break;
       }
       $55 = ((($49)) + 52|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = ($56|0)==(0|0);
       if ($57) {
        $60 = $52;$61 = $49;
       } else {
        $58 = HEAP32[$16>>2]|0;
        FUNCTION_TABLE_vii[$52 & 127]($58,$56);
        $$pre41 = HEAP32[$15>>2]|0;
        $$pre42 = HEAP32[$48>>2]|0;
        $60 = $$pre41;$61 = $$pre42;
       }
       $59 = HEAP32[$16>>2]|0;
       FUNCTION_TABLE_vii[$60 & 127]($59,$61);
       HEAP32[$48>>2] = 0;
       $62 = HEAP32[$21>>2]|0;
       $63 = ($data$0$i|0)==(0|0);
       if ($63) {
        $$0 = -1;
        STACKTOP = sp;return ($$0|0);
       } else {
        $uncomp_size$0 = $62;
       }
      }
     } while(0);
     $64 = HEAP32[$0>>2]|0;
     $65 = ($uncomp_size$0|0)==($64|0);
     if ($65) {
      $66 = HEAP32[$4>>2]|0;
      _free($66);
      HEAP32[$4>>2] = $data$0$i;
      $67 = ((($b)) + 36|0);
      HEAP32[$67>>2] = $uncomp_size$0;
      HEAP32[$b>>2] = 0;
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     } else {
      _free($data$0$i);
      $$0 = -1;
      STACKTOP = sp;return ($$0|0);
     }
    }
   }
  } while(0);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 2:  {
  _fprintf(9772,18650,$vararg_buffer4);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 3:  {
  _fprintf(9772,18734,$vararg_buffer6);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 4:  {
  $68 = ((($b)) + 32|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($b)) + 16|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($71>>>0)<(9);
  if ($72) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $73 = HEAP8[$69>>0]|0;
  $74 = ($73<<24>>24)==(0);
  if ($74) {
   $397 = ((($69)) + 9|0);
   _memset(($D$i$i|0),0,2052)|0;
   $398 = HEAP8[$69>>0]|0;
   $399 = ($398<<24>>24)==(0);
   do {
    if ($399) {
     $400 = ((($69)) + 1|0);
     $401 = HEAP8[$400>>0]|0;
     $402 = $401&255;
     $403 = ((($69)) + 2|0);
     $404 = HEAP8[$403>>0]|0;
     $405 = $404&255;
     $406 = $405 << 8;
     $407 = $402 | $406;
     $408 = ((($69)) + 3|0);
     $409 = HEAP8[$408>>0]|0;
     $410 = $409&255;
     $411 = $410 << 16;
     $412 = $407 | $411;
     $413 = ((($69)) + 4|0);
     $414 = HEAP8[$413>>0]|0;
     $415 = $414&255;
     $416 = $415 << 24;
     $417 = $412 | $416;
     $418 = ((($69)) + 5|0);
     $419 = HEAP8[$418>>0]|0;
     $420 = $419&255;
     $421 = ((($69)) + 6|0);
     $422 = HEAP8[$421>>0]|0;
     $423 = $422&255;
     $424 = $423 << 8;
     $425 = $420 | $424;
     $426 = ((($69)) + 7|0);
     $427 = HEAP8[$426>>0]|0;
     $428 = $427&255;
     $429 = $428 << 16;
     $430 = $425 | $429;
     $431 = ((($69)) + 8|0);
     $432 = HEAP8[$431>>0]|0;
     $433 = $432&255;
     $434 = $433 << 24;
     $435 = $430 | $434;
     $436 = (($71) + -9)|0;
     $437 = ($417|0)==($436|0);
     if ($437) {
      $438 = (_malloc($435)|0);
      $439 = ($438|0)==(0|0);
      if ($439) {
       $$0$i27$i = 0;$usize2$3 = 0;
      } else {
       $440 = ((($69)) + 10|0);
       $441 = HEAP8[$397>>0]|0;
       $442 = $441&255;
       $443 = ((($D$i$i)) + 2048|0);
       $cp$0$i11$i = $440;$j$0$i10$i = $442;$rle$0$i$i = 0;$x$0$i9$i = 0;
       while(1) {
        $444 = ((($cp$0$i11$i)) + 1|0);
        $445 = HEAP8[$cp$0$i11$i>>0]|0;
        $446 = $445&255;
        $447 = (($D$i$i) + ($j$0$i10$i<<3)|0);
        HEAP32[$447>>2] = $446;
        $448 = ($445<<24>>24)<(0);
        if ($448) {
         $449 = $446 & 127;
         HEAP32[$447>>2] = $449;
         $450 = $446 << 8;
         $451 = $450 & 32512;
         $452 = ((($cp$0$i11$i)) + 2|0);
         $453 = HEAP8[$444>>0]|0;
         $454 = $453&255;
         $455 = $451 | $454;
         HEAP32[$447>>2] = $455;
         $460 = $455;$cp$1$i12$i = $452;
        } else {
         $460 = $446;$cp$1$i12$i = $444;
        }
        $456 = (((($D$i$i) + ($j$0$i10$i<<3)|0)) + 4|0);
        HEAP32[$456>>2] = $x$0$i9$i;
        $457 = ($x$0$i9$i>>>0)<(65537);
        if (!($457)) {
         label = 88;
         break;
        }
        $458 = (65536 - ($x$0$i9$i))|0;
        $459 = ($458>>>0)<($460>>>0);
        if ($459) {
         label = 90;
         break;
        }
        $461 = $x$0$i9$i&65535;
        $462 = (($syms$i$i) + ($j$0$i10$i<<2)|0);
        HEAP16[$462>>1] = $461;
        $463 = $460&65535;
        $464 = (((($syms$i$i) + ($j$0$i10$i<<2)|0)) + 2|0);
        HEAP16[$464>>1] = $463;
        $465 = HEAP32[$443>>2]|0;
        $466 = ($465|0)==(0|0);
        if ($466) {
         $467 = (_malloc(4096)|0);
         HEAP32[$443>>2] = $467;
         $$pre = HEAP32[$447>>2]|0;
         $469 = $467;$471 = $$pre;
        } else {
         $469 = $465;$471 = $460;
        }
        $468 = (($469) + ($x$0$i9$i)|0);
        $470 = $j$0$i10$i&255;
        _memset(($468|0),($470|0),($471|0))|0;
        $472 = (($x$0$i9$i) + ($471))|0;
        $473 = ($rle$0$i$i|0)==(0);
        if ($473) {
         $474 = (($j$0$i10$i) + 1)|0;
         $475 = HEAP8[$cp$1$i12$i>>0]|0;
         $476 = $475&255;
         $477 = ($474|0)==($476|0);
         $478 = ((($cp$1$i12$i)) + 1|0);
         if ($477) {
          $479 = ((($cp$1$i12$i)) + 2|0);
          $480 = HEAP8[$478>>0]|0;
          $481 = $480&255;
          $cp$3$i17$i = $479;$j$2$i16$i = $474;$rle$2$i$i = $481;
         } else {
          $cp$3$i17$i = $478;$j$2$i16$i = $476;$rle$2$i$i = 0;
         }
        } else {
         $482 = (($rle$0$i$i) + -1)|0;
         $483 = (($j$0$i10$i) + 1)|0;
         $cp$3$i17$i = $cp$1$i12$i;$j$2$i16$i = $483;$rle$2$i$i = $482;
        }
        $484 = ($j$2$i16$i|0)==(0);
        if ($484) {
         label = 98;
         break;
        } else {
         $cp$0$i11$i = $cp$3$i17$i;$j$0$i10$i = $j$2$i16$i;$rle$0$i$i = $rle$2$i$i;$x$0$i9$i = $472;
        }
       }
       if ((label|0) == 88) {
        ___assert_fail((20891|0),(20758|0),259,(20910|0));
        // unreachable;
       }
       else if ((label|0) == 90) {
        ___assert_fail((20928|0),(20758|0),260,(20910|0));
        // unreachable;
       }
       else if ((label|0) == 98) {
        $485 = ($472|0)<(4096);
        if (!($485)) {
         ___assert_fail((20954|0),(20722|0),260,(20966|0));
         // unreachable;
        }
        $486 = HEAP8[$cp$3$i17$i>>0]|0;
        $487 = $486&255;
        $488 = ((($cp$3$i17$i)) + 1|0);
        $489 = HEAP8[$488>>0]|0;
        $490 = $489&255;
        $491 = $490 << 8;
        $492 = $487 | $491;
        $493 = ((($cp$3$i17$i)) + 2|0);
        $494 = HEAP8[$493>>0]|0;
        $495 = $494&255;
        $496 = $495 << 16;
        $497 = $492 | $496;
        $498 = ((($cp$3$i17$i)) + 3|0);
        $499 = HEAP8[$498>>0]|0;
        $500 = $499&255;
        $501 = $500 << 24;
        $502 = $497 | $501;
        $503 = ((($cp$3$i17$i)) + 4|0);
        $504 = HEAP8[$503>>0]|0;
        $505 = $504&255;
        $506 = ((($cp$3$i17$i)) + 5|0);
        $507 = HEAP8[$506>>0]|0;
        $508 = $507&255;
        $509 = $508 << 8;
        $510 = $505 | $509;
        $511 = ((($cp$3$i17$i)) + 6|0);
        $512 = HEAP8[$511>>0]|0;
        $513 = $512&255;
        $514 = $513 << 16;
        $515 = $510 | $514;
        $516 = ((($cp$3$i17$i)) + 7|0);
        $517 = HEAP8[$516>>0]|0;
        $518 = $517&255;
        $519 = $518 << 24;
        $520 = $515 | $519;
        $521 = ((($cp$3$i17$i)) + 8|0);
        $522 = HEAP8[$521>>0]|0;
        $523 = $522&255;
        $524 = ((($cp$3$i17$i)) + 9|0);
        $525 = HEAP8[$524>>0]|0;
        $526 = $525&255;
        $527 = $526 << 8;
        $528 = $523 | $527;
        $529 = ((($cp$3$i17$i)) + 10|0);
        $530 = HEAP8[$529>>0]|0;
        $531 = $530&255;
        $532 = $531 << 16;
        $533 = $528 | $532;
        $534 = ((($cp$3$i17$i)) + 11|0);
        $535 = HEAP8[$534>>0]|0;
        $536 = $535&255;
        $537 = $536 << 24;
        $538 = $533 | $537;
        $539 = ((($cp$3$i17$i)) + 12|0);
        $540 = HEAP8[$539>>0]|0;
        $541 = $540&255;
        $542 = ((($cp$3$i17$i)) + 13|0);
        $543 = HEAP8[$542>>0]|0;
        $544 = $543&255;
        $545 = $544 << 8;
        $546 = $541 | $545;
        $547 = ((($cp$3$i17$i)) + 14|0);
        $548 = HEAP8[$547>>0]|0;
        $549 = $548&255;
        $550 = $549 << 16;
        $551 = $546 | $550;
        $552 = ((($cp$3$i17$i)) + 15|0);
        $553 = HEAP8[$552>>0]|0;
        $554 = $553&255;
        $555 = $554 << 24;
        $556 = $551 | $555;
        $557 = ((($cp$3$i17$i)) + 16|0);
        $558 = $435 & -4;
        $i$0$i18$i = 0;$i4$i$i$sroa$0$1 = $502;$i4$i$i$sroa$18$1 = $520;$i4$i$i$sroa$31$1 = $538;$i4$i$i$sroa$44$2 = $556;$ptr$i5$i$0 = $557;
        while(1) {
         $559 = ($i$0$i18$i|0)<($558|0);
         if (!($559)) {
          break;
         }
         $560 = $i4$i$i$sroa$0$1 & 4095;
         $561 = $i4$i$i$sroa$18$1 & 4095;
         $562 = $i4$i$i$sroa$31$1 & 4095;
         $563 = $i4$i$i$sroa$44$2 & 4095;
         $564 = (($469) + ($560)|0);
         $565 = HEAP8[$564>>0]|0;
         $566 = (($469) + ($561)|0);
         $567 = HEAP8[$566>>0]|0;
         $568 = (($469) + ($562)|0);
         $569 = HEAP8[$568>>0]|0;
         $570 = (($469) + ($563)|0);
         $571 = HEAP8[$570>>0]|0;
         $572 = (($438) + ($i$0$i18$i)|0);
         HEAP8[$572>>0] = $565;
         $573 = $i$0$i18$i | 1;
         $574 = (($438) + ($573)|0);
         HEAP8[$574>>0] = $567;
         $575 = $i$0$i18$i | 2;
         $576 = (($438) + ($575)|0);
         HEAP8[$576>>0] = $569;
         $577 = $i$0$i18$i | 3;
         $578 = (($438) + ($577)|0);
         HEAP8[$578>>0] = $571;
         $579 = $565&255;
         $580 = (((($syms$i$i) + ($579<<2)|0)) + 2|0);
         $581 = HEAP16[$580>>1]|0;
         $582 = $581&65535;
         $583 = $i4$i$i$sroa$0$1 >>> 12;
         $584 = Math_imul($582, $583)|0;
         $585 = $567&255;
         $586 = (((($syms$i$i) + ($585<<2)|0)) + 2|0);
         $587 = HEAP16[$586>>1]|0;
         $588 = $587&65535;
         $589 = $i4$i$i$sroa$18$1 >>> 12;
         $590 = Math_imul($588, $589)|0;
         $591 = $569&255;
         $592 = (((($syms$i$i) + ($591<<2)|0)) + 2|0);
         $593 = HEAP16[$592>>1]|0;
         $594 = $593&65535;
         $595 = $i4$i$i$sroa$31$1 >>> 12;
         $596 = Math_imul($594, $595)|0;
         $597 = $571&255;
         $598 = (((($syms$i$i) + ($597<<2)|0)) + 2|0);
         $599 = HEAP16[$598>>1]|0;
         $600 = $599&65535;
         $601 = $i4$i$i$sroa$44$2 >>> 12;
         $602 = Math_imul($600, $601)|0;
         $603 = (($syms$i$i) + ($579<<2)|0);
         $604 = HEAP16[$603>>1]|0;
         $605 = $604&65535;
         $606 = (($560) - ($605))|0;
         $607 = (($584) + ($606))|0;
         $608 = (($syms$i$i) + ($585<<2)|0);
         $609 = HEAP16[$608>>1]|0;
         $610 = $609&65535;
         $611 = (($561) - ($610))|0;
         $612 = (($590) + ($611))|0;
         $613 = (($syms$i$i) + ($591<<2)|0);
         $614 = HEAP16[$613>>1]|0;
         $615 = $614&65535;
         $616 = (($562) - ($615))|0;
         $617 = (($596) + ($616))|0;
         $618 = (($syms$i$i) + ($597<<2)|0);
         $619 = HEAP16[$618>>1]|0;
         $620 = $619&65535;
         $621 = (($563) - ($620))|0;
         $622 = (($602) + ($621))|0;
         $623 = ($607>>>0)<(8388608);
         if ($623) {
          $ptr$0$i30$i$i = $ptr$i5$i$0;$x$0$i29$i$i = $607;
          while(1) {
           $624 = $x$0$i29$i$i << 8;
           $625 = ((($ptr$0$i30$i$i)) + 1|0);
           $626 = HEAP8[$ptr$0$i30$i$i>>0]|0;
           $627 = $626&255;
           $628 = $624 | $627;
           $629 = ($628>>>0)<(8388608);
           if ($629) {
            $ptr$0$i30$i$i = $625;$x$0$i29$i$i = $628;
           } else {
            $ptr$i5$i$1 = $625;$x$1$i31$i$i = $628;
            break;
           }
          }
         } else {
          $ptr$i5$i$1 = $ptr$i5$i$0;$x$1$i31$i$i = $607;
         }
         $630 = ($612>>>0)<(8388608);
         if ($630) {
          $ptr$0$i26$i$i = $ptr$i5$i$1;$x$0$i25$i$i = $612;
          while(1) {
           $631 = $x$0$i25$i$i << 8;
           $632 = ((($ptr$0$i26$i$i)) + 1|0);
           $633 = HEAP8[$ptr$0$i26$i$i>>0]|0;
           $634 = $633&255;
           $635 = $631 | $634;
           $636 = ($635>>>0)<(8388608);
           if ($636) {
            $ptr$0$i26$i$i = $632;$x$0$i25$i$i = $635;
           } else {
            $ptr$i5$i$2 = $632;$x$1$i27$i$i = $635;
            break;
           }
          }
         } else {
          $ptr$i5$i$2 = $ptr$i5$i$1;$x$1$i27$i$i = $612;
         }
         $637 = ($617>>>0)<(8388608);
         if ($637) {
          $ptr$0$i22$i$i = $ptr$i5$i$2;$x$0$i21$i$i = $617;
          while(1) {
           $638 = $x$0$i21$i$i << 8;
           $639 = ((($ptr$0$i22$i$i)) + 1|0);
           $640 = HEAP8[$ptr$0$i22$i$i>>0]|0;
           $641 = $640&255;
           $642 = $638 | $641;
           $643 = ($642>>>0)<(8388608);
           if ($643) {
            $ptr$0$i22$i$i = $639;$x$0$i21$i$i = $642;
           } else {
            $ptr$i5$i$3 = $639;$x$1$i23$i$i = $642;
            break;
           }
          }
         } else {
          $ptr$i5$i$3 = $ptr$i5$i$2;$x$1$i23$i$i = $617;
         }
         $644 = ($622>>>0)<(8388608);
         if ($644) {
          $ptr$0$i$i20$i = $ptr$i5$i$3;$x$0$i$i19$i = $622;
          while(1) {
           $645 = $x$0$i$i19$i << 8;
           $646 = ((($ptr$0$i$i20$i)) + 1|0);
           $647 = HEAP8[$ptr$0$i$i20$i>>0]|0;
           $648 = $647&255;
           $649 = $645 | $648;
           $650 = ($649>>>0)<(8388608);
           if ($650) {
            $ptr$0$i$i20$i = $646;$x$0$i$i19$i = $649;
           } else {
            $ptr$i5$i$4 = $646;$x$1$i$i21$i = $649;
            break;
           }
          }
         } else {
          $ptr$i5$i$4 = $ptr$i5$i$3;$x$1$i$i21$i = $622;
         }
         $651 = (($i$0$i18$i) + 4)|0;
         $i$0$i18$i = $651;$i4$i$i$sroa$0$1 = $x$1$i31$i$i;$i4$i$i$sroa$18$1 = $x$1$i27$i$i;$i4$i$i$sroa$31$1 = $x$1$i23$i$i;$i4$i$i$sroa$44$2 = $x$1$i$i21$i;$ptr$i5$i$0 = $ptr$i5$i$4;
        }
        $652 = $420 & 3;
        switch ($652|0) {
        case 3:  {
         $720 = $i4$i$i$sroa$0$1 & 4095;
         $721 = (($469) + ($720)|0);
         $722 = HEAP8[$721>>0]|0;
         $723 = $722&255;
         $724 = (($syms$i$i) + ($723<<2)|0);
         $725 = HEAP16[$724>>1]|0;
         $726 = $725&65535;
         $727 = (((($syms$i$i) + ($723<<2)|0)) + 2|0);
         $728 = HEAP16[$727>>1]|0;
         $729 = $728&65535;
         $730 = $i4$i$i$sroa$0$1 >>> 12;
         $731 = Math_imul($730, $729)|0;
         $732 = (($731) + ($720))|0;
         $733 = (($732) - ($726))|0;
         $734 = ($733>>>0)<(8388608);
         if ($734) {
          $ptr$0$i$i6$i$i = $ptr$i5$i$0;$x$0$i$i5$i$i = $733;
          while(1) {
           $735 = $x$0$i$i5$i$i << 8;
           $736 = ((($ptr$0$i$i6$i$i)) + 1|0);
           $737 = HEAP8[$ptr$0$i$i6$i$i>>0]|0;
           $738 = $737&255;
           $739 = $735 | $738;
           $740 = ($739>>>0)<(8388608);
           if ($740) {
            $ptr$0$i$i6$i$i = $736;$x$0$i$i5$i$i = $739;
           } else {
            $ptr$i5$i$6 = $736;
            break;
           }
          }
         } else {
          $ptr$i5$i$6 = $ptr$i5$i$0;
         }
         $741 = (($438) + ($558)|0);
         HEAP8[$741>>0] = $722;
         $742 = $i4$i$i$sroa$18$1 & 4095;
         $743 = (($469) + ($742)|0);
         $744 = HEAP8[$743>>0]|0;
         $745 = $744&255;
         $746 = (($syms$i$i) + ($745<<2)|0);
         $747 = HEAP16[$746>>1]|0;
         $748 = $747&65535;
         $749 = (((($syms$i$i) + ($745<<2)|0)) + 2|0);
         $750 = HEAP16[$749>>1]|0;
         $751 = $750&65535;
         $752 = $i4$i$i$sroa$18$1 >>> 12;
         $753 = Math_imul($752, $751)|0;
         $754 = (($753) + ($742))|0;
         $755 = (($754) - ($748))|0;
         $756 = ($755>>>0)<(8388608);
         if ($756) {
          $ptr$0$i$i2$i$i = $ptr$i5$i$6;$x$0$i$i1$i$i = $755;
          while(1) {
           $757 = $x$0$i$i1$i$i << 8;
           $758 = ((($ptr$0$i$i2$i$i)) + 1|0);
           $759 = HEAP8[$ptr$0$i$i2$i$i>>0]|0;
           $760 = $759&255;
           $761 = $757 | $760;
           $762 = ($761>>>0)<(8388608);
           if ($762) {
            $ptr$0$i$i2$i$i = $758;$x$0$i$i1$i$i = $761;
           } else {
            $ptr$i5$i$7 = $758;
            break;
           }
          }
         } else {
          $ptr$i5$i$7 = $ptr$i5$i$6;
         }
         $763 = $558 | 1;
         $764 = (($438) + ($763)|0);
         HEAP8[$764>>0] = $744;
         $765 = $i4$i$i$sroa$31$1 & 4095;
         $766 = (($469) + ($765)|0);
         $767 = HEAP8[$766>>0]|0;
         $768 = $767&255;
         $769 = (($syms$i$i) + ($768<<2)|0);
         $770 = HEAP16[$769>>1]|0;
         $771 = $770&65535;
         $772 = (((($syms$i$i) + ($768<<2)|0)) + 2|0);
         $773 = HEAP16[$772>>1]|0;
         $774 = $773&65535;
         $775 = $i4$i$i$sroa$31$1 >>> 12;
         $776 = Math_imul($775, $774)|0;
         $777 = (($776) + ($765))|0;
         $778 = (($777) - ($771))|0;
         $779 = ($778>>>0)<(8388608);
         if ($779) {
          $ptr$0$i$i$i24$i = $ptr$i5$i$7;$x$0$i$i$i23$i = $778;
          while(1) {
           $780 = $x$0$i$i$i23$i << 8;
           $781 = ((($ptr$0$i$i$i24$i)) + 1|0);
           $782 = HEAP8[$ptr$0$i$i$i24$i>>0]|0;
           $783 = $782&255;
           $784 = $780 | $783;
           $785 = ($784>>>0)<(8388608);
           if ($785) {
            $ptr$0$i$i$i24$i = $781;$x$0$i$i$i23$i = $784;
           } else {
            break;
           }
          }
         }
         $786 = $558 | 2;
         $787 = (($438) + ($786)|0);
         HEAP8[$787>>0] = $767;
         break;
        }
        case 1:  {
         $653 = $i4$i$i$sroa$0$1 & 4095;
         $654 = (($469) + ($653)|0);
         $655 = HEAP8[$654>>0]|0;
         $656 = $655&255;
         $657 = (($syms$i$i) + ($656<<2)|0);
         $658 = HEAP16[$657>>1]|0;
         $659 = $658&65535;
         $660 = (((($syms$i$i) + ($656<<2)|0)) + 2|0);
         $661 = HEAP16[$660>>1]|0;
         $662 = $661&65535;
         $663 = $i4$i$i$sroa$0$1 >>> 12;
         $664 = Math_imul($663, $662)|0;
         $665 = (($664) + ($653))|0;
         $666 = (($665) - ($659))|0;
         $667 = ($666>>>0)<(8388608);
         if ($667) {
          $ptr$0$i$i18$i$i = $ptr$i5$i$0;$x$0$i$i17$i$i = $666;
          while(1) {
           $668 = $x$0$i$i17$i$i << 8;
           $669 = ((($ptr$0$i$i18$i$i)) + 1|0);
           $670 = HEAP8[$ptr$0$i$i18$i$i>>0]|0;
           $671 = $670&255;
           $672 = $668 | $671;
           $673 = ($672>>>0)<(8388608);
           if ($673) {
            $ptr$0$i$i18$i$i = $669;$x$0$i$i17$i$i = $672;
           } else {
            break;
           }
          }
         }
         $674 = (($438) + ($558)|0);
         HEAP8[$674>>0] = $655;
         break;
        }
        case 2:  {
         $675 = $i4$i$i$sroa$0$1 & 4095;
         $676 = (($469) + ($675)|0);
         $677 = HEAP8[$676>>0]|0;
         $678 = $677&255;
         $679 = (($syms$i$i) + ($678<<2)|0);
         $680 = HEAP16[$679>>1]|0;
         $681 = $680&65535;
         $682 = (((($syms$i$i) + ($678<<2)|0)) + 2|0);
         $683 = HEAP16[$682>>1]|0;
         $684 = $683&65535;
         $685 = $i4$i$i$sroa$0$1 >>> 12;
         $686 = Math_imul($685, $684)|0;
         $687 = (($686) + ($675))|0;
         $688 = (($687) - ($681))|0;
         $689 = ($688>>>0)<(8388608);
         if ($689) {
          $ptr$0$i$i14$i$i = $ptr$i5$i$0;$x$0$i$i13$i$i = $688;
          while(1) {
           $690 = $x$0$i$i13$i$i << 8;
           $691 = ((($ptr$0$i$i14$i$i)) + 1|0);
           $692 = HEAP8[$ptr$0$i$i14$i$i>>0]|0;
           $693 = $692&255;
           $694 = $690 | $693;
           $695 = ($694>>>0)<(8388608);
           if ($695) {
            $ptr$0$i$i14$i$i = $691;$x$0$i$i13$i$i = $694;
           } else {
            $ptr$i5$i$5 = $691;
            break;
           }
          }
         } else {
          $ptr$i5$i$5 = $ptr$i5$i$0;
         }
         $696 = (($438) + ($558)|0);
         HEAP8[$696>>0] = $677;
         $697 = $i4$i$i$sroa$18$1 & 4095;
         $698 = (($469) + ($697)|0);
         $699 = HEAP8[$698>>0]|0;
         $700 = $699&255;
         $701 = (($syms$i$i) + ($700<<2)|0);
         $702 = HEAP16[$701>>1]|0;
         $703 = $702&65535;
         $704 = (((($syms$i$i) + ($700<<2)|0)) + 2|0);
         $705 = HEAP16[$704>>1]|0;
         $706 = $705&65535;
         $707 = $i4$i$i$sroa$18$1 >>> 12;
         $708 = Math_imul($707, $706)|0;
         $709 = (($708) + ($697))|0;
         $710 = (($709) - ($703))|0;
         $711 = ($710>>>0)<(8388608);
         if ($711) {
          $ptr$0$i$i10$i$i = $ptr$i5$i$5;$x$0$i$i9$i$i = $710;
          while(1) {
           $712 = $x$0$i$i9$i$i << 8;
           $713 = ((($ptr$0$i$i10$i$i)) + 1|0);
           $714 = HEAP8[$ptr$0$i$i10$i$i>>0]|0;
           $715 = $714&255;
           $716 = $712 | $715;
           $717 = ($716>>>0)<(8388608);
           if ($717) {
            $ptr$0$i$i10$i$i = $713;$x$0$i$i9$i$i = $716;
           } else {
            break;
           }
          }
         }
         $718 = $558 | 1;
         $719 = (($438) + ($718)|0);
         HEAP8[$719>>0] = $699;
         break;
        }
        default: {
        }
        }
        $788 = ($469|0)==(0|0);
        if ($788) {
         $$0$i27$i = $438;$usize2$3 = $435;
         break;
        }
        _free($469);
        $$0$i27$i = $438;$usize2$3 = $435;
        break;
       }
      }
     } else {
      $$0$i27$i = 0;$usize2$3 = 0;
     }
    } else {
     $$0$i27$i = 0;$usize2$3 = 0;
    }
   } while(0);
   $$0$i2 = $$0$i27$i;$usize2$4 = $usize2$3;
  } else {
   $75 = ((($69)) + 9|0);
   $76 = ($73<<24>>24)==(1);
   if (!($76)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $77 = ((($69)) + 1|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78&255;
   $80 = ((($69)) + 2|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = $81&255;
   $83 = $82 << 8;
   $84 = $79 | $83;
   $85 = ((($69)) + 3|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = $86&255;
   $88 = $87 << 16;
   $89 = $84 | $88;
   $90 = ((($69)) + 4|0);
   $91 = HEAP8[$90>>0]|0;
   $92 = $91&255;
   $93 = $92 << 24;
   $94 = $89 | $93;
   $95 = ((($69)) + 5|0);
   $96 = HEAP8[$95>>0]|0;
   $97 = $96&255;
   $98 = ((($69)) + 6|0);
   $99 = HEAP8[$98>>0]|0;
   $100 = $99&255;
   $101 = $100 << 8;
   $102 = $97 | $101;
   $103 = ((($69)) + 7|0);
   $104 = HEAP8[$103>>0]|0;
   $105 = $104&255;
   $106 = $105 << 16;
   $107 = $102 | $106;
   $108 = ((($69)) + 8|0);
   $109 = HEAP8[$108>>0]|0;
   $110 = $109&255;
   $111 = $110 << 24;
   $112 = $107 | $111;
   $113 = (($71) + -9)|0;
   $114 = ($94|0)==($113|0);
   if (!($114)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $115 = (_malloc(525312)|0);
   $116 = ($115|0)==(0|0);
   if ($116) {
    $out_buf$0$i$i7 = 0;$syms$0$i$i5 = 0;
   } else {
    $117 = ((($115)) + -4|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = $118 & 3;
    $120 = ($119|0)==(0);
    if (!($120)) {
     _memset(($115|0),0,525312)|0;
    }
    $121 = (_malloc(262144)|0);
    $122 = ($121|0)==(0|0);
    L139: do {
     if ($122) {
      $out_buf$0$i$i6 = 0;
     } else {
      $123 = ((($69)) + 10|0);
      $124 = HEAP8[$75>>0]|0;
      $125 = $124&255;
      $cp$0$i$i = $123;$i$0$i$i = $125;$rle_i$0$i$i = 0;
      L141: while(1) {
       $126 = ((($cp$0$i$i)) + 1|0);
       $127 = HEAP8[$cp$0$i$i>>0]|0;
       $128 = $127&255;
       $129 = (((($115) + (($i$0$i$i*2052)|0)|0)) + 2048|0);
       $143 = 0;$cp$1$i$i = $126;$j$0$i$i = $128;$rle_j$0$i$i = 0;
       while(1) {
        $130 = ((($cp$1$i$i)) + 1|0);
        $131 = HEAP8[$cp$1$i$i>>0]|0;
        $132 = $131&255;
        $133 = ((($115) + (($i$0$i$i*2052)|0)|0) + ($j$0$i$i<<3)|0);
        HEAP32[$133>>2] = $132;
        $134 = ($131<<24>>24)<(0);
        if ($134) {
         $135 = $132 & 127;
         HEAP32[$133>>2] = $135;
         $136 = $132 << 8;
         $137 = $136 & 32512;
         $138 = ((($cp$1$i$i)) + 2|0);
         $139 = HEAP8[$130>>0]|0;
         $140 = $139&255;
         $141 = $137 | $140;
         HEAP32[$133>>2] = $141;
         $145 = $141;$cp$2$i$i = $138;
        } else {
         $145 = $132;$cp$2$i$i = $130;
        }
        $142 = ((((($115) + (($i$0$i$i*2052)|0)|0) + ($j$0$i$i<<3)|0)) + 4|0);
        HEAP32[$142>>2] = $143;
        $144 = ($145|0)==(0);
        if ($144) {
         HEAP32[$133>>2] = 4096;
         $149 = 4096;
        } else {
         $149 = $145;
        }
        $146 = ($143>>>0)<(65537);
        if (!($146)) {
         label = 41;
         break L141;
        }
        $147 = (65536 - ($143))|0;
        $148 = ($147>>>0)<($149>>>0);
        if ($148) {
         label = 43;
         break L141;
        }
        $150 = $143&65535;
        $151 = ((($121) + ($i$0$i$i<<10)|0) + ($j$0$i$i<<2)|0);
        HEAP16[$151>>1] = $150;
        $152 = $149&65535;
        $153 = ((((($121) + ($i$0$i$i<<10)|0) + ($j$0$i$i<<2)|0)) + 2|0);
        HEAP16[$153>>1] = $152;
        $154 = HEAP32[$129>>2]|0;
        $155 = ($154|0)==(0|0);
        if ($155) {
         $156 = (_malloc(4096)|0);
         HEAP32[$129>>2] = $156;
         $157 = ($156|0)==(0|0);
         if ($157) {
          $out_buf$0$i$i6 = 0;
          break L139;
         } else {
          $159 = $156;
         }
        } else {
         $159 = $154;
        }
        $158 = (($159) + ($143)|0);
        $160 = $j$0$i$i&255;
        $161 = HEAP32[$133>>2]|0;
        _memset(($158|0),($160|0),($161|0))|0;
        $162 = HEAP32[$133>>2]|0;
        $163 = (($143) + ($162))|0;
        $164 = ($163|0)<(4097);
        if (!($164)) {
         label = 47;
         break L141;
        }
        $165 = ($rle_j$0$i$i|0)==(0);
        do {
         if ($165) {
          $166 = (($j$0$i$i) + 1)|0;
          $167 = HEAP8[$cp$2$i$i>>0]|0;
          $168 = $167&255;
          $169 = ($166|0)==($168|0);
          $170 = ((($cp$2$i$i)) + 1|0);
          if (!($169)) {
           $cp$4$i$i = $170;$j$2$i$i = $168;$rle_j$2$i$i = 0;
           break;
          }
          $171 = ((($cp$2$i$i)) + 2|0);
          $172 = HEAP8[$170>>0]|0;
          $173 = $172&255;
          $cp$4$i$i = $171;$j$2$i$i = $166;$rle_j$2$i$i = $173;
         } else {
          $174 = (($rle_j$0$i$i) + -1)|0;
          $175 = (($j$0$i$i) + 1)|0;
          $cp$4$i$i = $cp$2$i$i;$j$2$i$i = $175;$rle_j$2$i$i = $174;
         }
        } while(0);
        $176 = ($j$2$i$i|0)==(0);
        if ($176) {
         break;
        } else {
         $143 = $163;$cp$1$i$i = $cp$4$i$i;$j$0$i$i = $j$2$i$i;$rle_j$0$i$i = $rle_j$2$i$i;
        }
       }
       $177 = ($rle_i$0$i$i|0)==(0);
       if ($177) {
        $178 = (($i$0$i$i) + 1)|0;
        $179 = HEAP8[$cp$4$i$i>>0]|0;
        $180 = $179&255;
        $181 = ($178|0)==($180|0);
        $182 = ((($cp$4$i$i)) + 1|0);
        if ($181) {
         $183 = ((($cp$4$i$i)) + 2|0);
         $184 = HEAP8[$182>>0]|0;
         $185 = $184&255;
         $cp$6$i$i = $183;$i$2$i$i = $178;$rle_i$2$i$i = $185;
        } else {
         $cp$6$i$i = $182;$i$2$i$i = $180;$rle_i$2$i$i = 0;
        }
       } else {
        $186 = (($rle_i$0$i$i) + -1)|0;
        $187 = (($i$0$i$i) + 1)|0;
        $cp$6$i$i = $cp$4$i$i;$i$2$i$i = $187;$rle_i$2$i$i = $186;
       }
       $188 = ($i$2$i$i|0)==(0);
       if ($188) {
        label = 58;
        break;
       } else {
        $cp$0$i$i = $cp$6$i$i;$i$0$i$i = $i$2$i$i;$rle_i$0$i$i = $rle_i$2$i$i;
       }
      }
      if ((label|0) == 41) {
       ___assert_fail((20891|0),(20758|0),259,(20910|0));
       // unreachable;
      }
      else if ((label|0) == 43) {
       ___assert_fail((20928|0),(20758|0),260,(20910|0));
       // unreachable;
      }
      else if ((label|0) == 47) {
       ___assert_fail((21023|0),(20722|0),618,(21036|0));
       // unreachable;
      }
      else if ((label|0) == 58) {
       $189 = HEAP8[$cp$6$i$i>>0]|0;
       $190 = ((($cp$6$i$i)) + 1|0);
       $191 = HEAP8[$190>>0]|0;
       $192 = ((($cp$6$i$i)) + 2|0);
       $193 = HEAP8[$192>>0]|0;
       $194 = ((($cp$6$i$i)) + 3|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = ((($cp$6$i$i)) + 4|0);
       $197 = HEAP8[$196>>0]|0;
       $198 = ((($cp$6$i$i)) + 5|0);
       $199 = HEAP8[$198>>0]|0;
       $200 = ((($cp$6$i$i)) + 6|0);
       $201 = HEAP8[$200>>0]|0;
       $202 = ((($cp$6$i$i)) + 7|0);
       $203 = HEAP8[$202>>0]|0;
       $204 = ((($cp$6$i$i)) + 8|0);
       $205 = HEAP8[$204>>0]|0;
       $206 = ((($cp$6$i$i)) + 9|0);
       $207 = HEAP8[$206>>0]|0;
       $208 = ((($cp$6$i$i)) + 10|0);
       $209 = HEAP8[$208>>0]|0;
       $210 = ((($cp$6$i$i)) + 11|0);
       $211 = HEAP8[$210>>0]|0;
       $212 = ((($cp$6$i$i)) + 12|0);
       $213 = HEAP8[$212>>0]|0;
       $214 = ((($cp$6$i$i)) + 13|0);
       $215 = HEAP8[$214>>0]|0;
       $216 = ((($cp$6$i$i)) + 14|0);
       $217 = HEAP8[$216>>0]|0;
       $218 = ((($cp$6$i$i)) + 15|0);
       $219 = HEAP8[$218>>0]|0;
       $220 = $112 >> 2;
       $221 = (_malloc($112)|0);
       $222 = ($221|0)==(0|0);
       if ($222) {
        $out_buf$0$i$i6 = 0;
        break;
       }
       $223 = ($220*3)|0;
       $224 = $220 << 1;
       $225 = ((($cp$6$i$i)) + 16|0);
       $226 = $213&255;
       $227 = $215&255;
       $228 = $227 << 8;
       $229 = $226 | $228;
       $230 = $217&255;
       $231 = $230 << 16;
       $232 = $229 | $231;
       $233 = $219&255;
       $234 = $233 << 24;
       $235 = $232 | $234;
       $236 = $205&255;
       $237 = $207&255;
       $238 = $237 << 8;
       $239 = $236 | $238;
       $240 = $209&255;
       $241 = $240 << 16;
       $242 = $239 | $241;
       $243 = $211&255;
       $244 = $243 << 24;
       $245 = $242 | $244;
       $246 = $197&255;
       $247 = $199&255;
       $248 = $247 << 8;
       $249 = $246 | $248;
       $250 = $201&255;
       $251 = $250 << 16;
       $252 = $249 | $251;
       $253 = $203&255;
       $254 = $253 << 24;
       $255 = $252 | $254;
       $256 = $189&255;
       $257 = $191&255;
       $258 = $257 << 8;
       $259 = $256 | $258;
       $260 = $193&255;
       $261 = $260 << 16;
       $262 = $259 | $261;
       $263 = $195&255;
       $264 = $263 << 24;
       $265 = $262 | $264;
       $R$i$i$sroa$0$0 = $265;$R$i$i$sroa$16$0 = $255;$R$i$i$sroa$28$0 = $245;$R$i$i$sroa$40$0 = $235;$i4$i$i$sroa$0$0 = 0;$i4$i$i$sroa$18$0 = $220;$i4$i$i$sroa$31$0 = $224;$i4$i$i$sroa$44$0 = $223;$l0$0$i$i = 0;$l1$0$i$i = 0;$l2$0$i$i = 0;$l3$0$i$i = 0;$ptr$i$i$0 = $225;
       while(1) {
        $266 = ($i4$i$i$sroa$0$0|0)<($220|0);
        if (!($266)) {
         $i4$i$i$sroa$44$1 = $i4$i$i$sroa$44$0;$l3$1$i$i = $l3$0$i$i;$ptr$i$i$5 = $ptr$i$i$0;$rans3$i$i$0 = $R$i$i$sroa$40$0;
         break;
        }
        $267 = $R$i$i$sroa$0$0 & 4095;
        $268 = $R$i$i$sroa$16$0 & 4095;
        $269 = $R$i$i$sroa$28$0 & 4095;
        $270 = $R$i$i$sroa$40$0 & 4095;
        $271 = (((($115) + (($l0$0$i$i*2052)|0)|0)) + 2048|0);
        $272 = HEAP32[$271>>2]|0;
        $273 = (($272) + ($267)|0);
        $274 = HEAP8[$273>>0]|0;
        $275 = (((($115) + (($l1$0$i$i*2052)|0)|0)) + 2048|0);
        $276 = HEAP32[$275>>2]|0;
        $277 = (($276) + ($268)|0);
        $278 = HEAP8[$277>>0]|0;
        $279 = (((($115) + (($l2$0$i$i*2052)|0)|0)) + 2048|0);
        $280 = HEAP32[$279>>2]|0;
        $281 = (($280) + ($269)|0);
        $282 = HEAP8[$281>>0]|0;
        $283 = (((($115) + (($l3$0$i$i*2052)|0)|0)) + 2048|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = (($284) + ($270)|0);
        $286 = HEAP8[$285>>0]|0;
        $287 = (($221) + ($i4$i$i$sroa$0$0)|0);
        HEAP8[$287>>0] = $274;
        $288 = (($221) + ($i4$i$i$sroa$18$0)|0);
        HEAP8[$288>>0] = $278;
        $289 = (($221) + ($i4$i$i$sroa$31$0)|0);
        HEAP8[$289>>0] = $282;
        $290 = (($221) + ($i4$i$i$sroa$44$0)|0);
        HEAP8[$290>>0] = $286;
        $291 = $274&255;
        $292 = ((((($121) + ($l0$0$i$i<<10)|0) + ($291<<2)|0)) + 2|0);
        $293 = HEAP16[$292>>1]|0;
        $294 = $293&65535;
        $295 = $R$i$i$sroa$0$0 >>> 12;
        $296 = Math_imul($294, $295)|0;
        $297 = $278&255;
        $298 = ((((($121) + ($l1$0$i$i<<10)|0) + ($297<<2)|0)) + 2|0);
        $299 = HEAP16[$298>>1]|0;
        $300 = $299&65535;
        $301 = $R$i$i$sroa$16$0 >>> 12;
        $302 = Math_imul($300, $301)|0;
        $303 = $282&255;
        $304 = ((((($121) + ($l2$0$i$i<<10)|0) + ($303<<2)|0)) + 2|0);
        $305 = HEAP16[$304>>1]|0;
        $306 = $305&65535;
        $307 = $R$i$i$sroa$28$0 >>> 12;
        $308 = Math_imul($306, $307)|0;
        $309 = $286&255;
        $310 = ((((($121) + ($l3$0$i$i<<10)|0) + ($309<<2)|0)) + 2|0);
        $311 = HEAP16[$310>>1]|0;
        $312 = $311&65535;
        $313 = $R$i$i$sroa$40$0 >>> 12;
        $314 = Math_imul($312, $313)|0;
        $315 = ((($121) + ($l0$0$i$i<<10)|0) + ($291<<2)|0);
        $316 = HEAP16[$315>>1]|0;
        $317 = $316&65535;
        $318 = (($267) - ($317))|0;
        $319 = (($296) + ($318))|0;
        $320 = ((($121) + ($l1$0$i$i<<10)|0) + ($297<<2)|0);
        $321 = HEAP16[$320>>1]|0;
        $322 = $321&65535;
        $323 = (($268) - ($322))|0;
        $324 = (($302) + ($323))|0;
        $325 = ((($121) + ($l2$0$i$i<<10)|0) + ($303<<2)|0);
        $326 = HEAP16[$325>>1]|0;
        $327 = $326&65535;
        $328 = (($269) - ($327))|0;
        $329 = (($308) + ($328))|0;
        $330 = ((($121) + ($l3$0$i$i<<10)|0) + ($309<<2)|0);
        $331 = HEAP16[$330>>1]|0;
        $332 = $331&65535;
        $333 = (($270) - ($332))|0;
        $334 = (($314) + ($333))|0;
        $335 = ($319>>>0)<(8388608);
        if ($335) {
         $ptr$0$i$i$i = $ptr$i$i$0;$x$0$i$i$i = $319;
         while(1) {
          $336 = $x$0$i$i$i << 8;
          $337 = ((($ptr$0$i$i$i)) + 1|0);
          $338 = HEAP8[$ptr$0$i$i$i>>0]|0;
          $339 = $338&255;
          $340 = $336 | $339;
          $341 = ($340>>>0)<(8388608);
          if ($341) {
           $ptr$0$i$i$i = $337;$x$0$i$i$i = $340;
          } else {
           $ptr$i$i$1 = $337;$x$1$i$i$i = $340;
           break;
          }
         }
        } else {
         $ptr$i$i$1 = $ptr$i$i$0;$x$1$i$i$i = $319;
        }
        $342 = ($324>>>0)<(8388608);
        if ($342) {
         $ptr$0$i10$i$i = $ptr$i$i$1;$x$0$i9$i$i = $324;
         while(1) {
          $343 = $x$0$i9$i$i << 8;
          $344 = ((($ptr$0$i10$i$i)) + 1|0);
          $345 = HEAP8[$ptr$0$i10$i$i>>0]|0;
          $346 = $345&255;
          $347 = $343 | $346;
          $348 = ($347>>>0)<(8388608);
          if ($348) {
           $ptr$0$i10$i$i = $344;$x$0$i9$i$i = $347;
          } else {
           $ptr$i$i$2 = $344;$x$1$i11$i$i = $347;
           break;
          }
         }
        } else {
         $ptr$i$i$2 = $ptr$i$i$1;$x$1$i11$i$i = $324;
        }
        $349 = ($329>>>0)<(8388608);
        if ($349) {
         $ptr$0$i6$i$i = $ptr$i$i$2;$x$0$i5$i$i = $329;
         while(1) {
          $350 = $x$0$i5$i$i << 8;
          $351 = ((($ptr$0$i6$i$i)) + 1|0);
          $352 = HEAP8[$ptr$0$i6$i$i>>0]|0;
          $353 = $352&255;
          $354 = $350 | $353;
          $355 = ($354>>>0)<(8388608);
          if ($355) {
           $ptr$0$i6$i$i = $351;$x$0$i5$i$i = $354;
          } else {
           $ptr$i$i$3 = $351;$x$1$i7$i$i = $354;
           break;
          }
         }
        } else {
         $ptr$i$i$3 = $ptr$i$i$2;$x$1$i7$i$i = $329;
        }
        $356 = ($334>>>0)<(8388608);
        if ($356) {
         $ptr$0$i2$i$i = $ptr$i$i$3;$x$0$i1$i$i = $334;
         while(1) {
          $357 = $x$0$i1$i$i << 8;
          $358 = ((($ptr$0$i2$i$i)) + 1|0);
          $359 = HEAP8[$ptr$0$i2$i$i>>0]|0;
          $360 = $359&255;
          $361 = $357 | $360;
          $362 = ($361>>>0)<(8388608);
          if ($362) {
           $ptr$0$i2$i$i = $358;$x$0$i1$i$i = $361;
          } else {
           $ptr$i$i$4 = $358;$x$1$i3$i$i = $361;
           break;
          }
         }
        } else {
         $ptr$i$i$4 = $ptr$i$i$3;$x$1$i3$i$i = $334;
        }
        $363 = (($i4$i$i$sroa$0$0) + 1)|0;
        $364 = (($i4$i$i$sroa$18$0) + 1)|0;
        $365 = (($i4$i$i$sroa$31$0) + 1)|0;
        $366 = (($i4$i$i$sroa$44$0) + 1)|0;
        $R$i$i$sroa$0$0 = $x$1$i$i$i;$R$i$i$sroa$16$0 = $x$1$i11$i$i;$R$i$i$sroa$28$0 = $x$1$i7$i$i;$R$i$i$sroa$40$0 = $x$1$i3$i$i;$i4$i$i$sroa$0$0 = $363;$i4$i$i$sroa$18$0 = $364;$i4$i$i$sroa$31$0 = $365;$i4$i$i$sroa$44$0 = $366;$l0$0$i$i = $291;$l1$0$i$i = $297;$l2$0$i$i = $303;$l3$0$i$i = $309;$ptr$i$i$0 = $ptr$i$i$4;
       }
       while(1) {
        $367 = ($i4$i$i$sroa$44$1|0)<($112|0);
        if (!($367)) {
         $out_buf$0$i$i6 = $221;
         break L139;
        }
        $368 = $rans3$i$i$0 & 4095;
        $369 = (((($115) + (($l3$1$i$i*2052)|0)|0)) + 2048|0);
        $370 = HEAP32[$369>>2]|0;
        $371 = (($370) + ($368)|0);
        $372 = HEAP8[$371>>0]|0;
        $373 = (($221) + ($i4$i$i$sroa$44$1)|0);
        HEAP8[$373>>0] = $372;
        $374 = $372&255;
        $375 = ((($121) + ($l3$1$i$i<<10)|0) + ($374<<2)|0);
        $376 = HEAP16[$375>>1]|0;
        $377 = $376&65535;
        $378 = ((((($121) + ($l3$1$i$i<<10)|0) + ($374<<2)|0)) + 2|0);
        $379 = HEAP16[$378>>1]|0;
        $380 = $379&65535;
        $381 = $rans3$i$i$0 >>> 12;
        $382 = Math_imul($381, $380)|0;
        $383 = (($382) + ($368))|0;
        $384 = (($383) - ($377))|0;
        $385 = ($384>>>0)<(8388608);
        if ($385) {
         $ptr$0$i$i$i$i = $ptr$i$i$5;$x$0$i$i$i$i = $384;
         while(1) {
          $386 = $x$0$i$i$i$i << 8;
          $387 = ((($ptr$0$i$i$i$i)) + 1|0);
          $388 = HEAP8[$ptr$0$i$i$i$i>>0]|0;
          $389 = $388&255;
          $390 = $386 | $389;
          $391 = ($390>>>0)<(8388608);
          if ($391) {
           $ptr$0$i$i$i$i = $387;$x$0$i$i$i$i = $390;
          } else {
           $ptr$i$i$6 = $387;$x$1$i$i$i$i = $390;
           break;
          }
         }
        } else {
         $ptr$i$i$6 = $ptr$i$i$5;$x$1$i$i$i$i = $384;
        }
        $392 = (($i4$i$i$sroa$44$1) + 1)|0;
        $i4$i$i$sroa$44$1 = $392;$l3$1$i$i = $374;$ptr$i$i$5 = $ptr$i$i$6;$rans3$i$i$0 = $x$1$i$i$i$i;
       }
      }
     }
    } while(0);
    $i$3$i$i = 0;
    while(1) {
     $exitcond = ($i$3$i$i|0)==(256);
     if ($exitcond) {
      break;
     }
     $393 = (((($115) + (($i$3$i$i*2052)|0)|0)) + 2048|0);
     $394 = HEAP32[$393>>2]|0;
     $395 = ($394|0)==(0|0);
     if (!($395)) {
      _free($394);
     }
     $396 = (($i$3$i$i) + 1)|0;
     $i$3$i$i = $396;
    }
    _free($115);
    $out_buf$0$i$i7 = $out_buf$0$i$i6;$syms$0$i$i5 = $121;
   }
   _free($syms$0$i$i5);
   $$0$i2 = $out_buf$0$i$i7;$usize2$4 = $112;
  }
  $789 = ($$0$i2|0)!=(0|0);
  $790 = ($1|0)==($usize2$4|0);
  $or$cond = $789 & $790;
  if (!($or$cond)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $791 = HEAP32[$68>>2]|0;
  _free($791);
  HEAP32[$68>>2] = $$0$i2;
  $792 = ((($b)) + 36|0);
  HEAP32[$792>>2] = $1;
  HEAP32[$b>>2] = 0;
  HEAP32[$0>>2] = $1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 0:  {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function _cram_compress_block($fd,$b,$metrics,$method,$level) {
 $fd = $fd|0;
 $b = $b|0;
 $metrics = $metrics|0;
 $method = $method|0;
 $level = $level|0;
 var $$ = 0, $$$ = 0, $$0 = 0, $$0$i = 0, $$02 = 0, $$12 = 0, $$1234 = 0, $$15 = 0, $$1540 = 0, $$18 = 0, $$1843 = 0, $$2 = 0, $$21 = 0, $$3 = 0, $$6 = 0, $$622 = 0, $$9 = 0, $$928 = 0, $$method_best$7 = 0, $$not = 0;
 var $$not46 = 0, $$not48 = 0, $$not50 = 0, $$not52 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0.0;
 var $149 = 0.0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0;
 var $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $best_method$0 = 0, $best_method$1 = 0, $best_method$2 = 0, $best_method$3 = 0, $best_method$4 = 0, $best_method$581518263039 = 0, $best_method$5815182631 = 0, $best_method$58151827 = 0, $best_method$581519 = 0, $best_method$59 = 0, $best_sz$0 = 0, $best_sz$1 = 0, $best_sz$2 = 0, $best_sz$3 = 0, $best_sz$4 = 0, $best_sz$510132024323642 = 0, $best_sz$5101320243237 = 0, $best_sz$51013202433 = 0, $best_sz$510132025 = 0, $best_sz$5101321 = 0;
 var $best_sz$511 = 0, $c_best$1 = 0, $c_best$3 = 0, $c_best$5 = 0, $c_best$7 = 0, $comp_size = 0, $method_best$1 = 0, $method_best$3 = 0, $method_best$5 = 0, $method_best$7 = 0, $or$cond = 0, $or$cond44 = 0, $or$cond45 = 0, $or$cond47 = 0, $or$cond49 = 0, $or$cond51 = 0, $or$cond53 = 0, $out_size_i$i = 0, $sz_best$1 = 0, $sz_best$3 = 0;
 var $sz_best$5 = 0, $sz_best$7 = 0, $sz_bzip2$0 = 0, $sz_gz_def = 0, $sz_gz_rle = 0, $sz_lzma$0 = 0, $sz_rans0$0 = 0, $sz_rans1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $out_size_i$i = sp + 40|0;
 $comp_size = sp + 36|0;
 $sz_gz_rle = sp + 32|0;
 $sz_gz_def = sp + 28|0;
 $sz_rans1 = sp + 24|0;
 HEAP32[$comp_size>>2] = 0;
 $0 = HEAP32[$b>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($method|0)==(-1);
 if ($2) {
  $3 = ((($fd)) + 296|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  $$ = $5 ? 2 : 6;
  $6 = ((($fd)) + 304|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  $9 = $$ | 8;
  $$$ = $8 ? $$ : $9;
  $$2 = $$$;
 } else {
  $$2 = $method;
 }
 $10 = ($level|0)==(-1);
 if ($10) {
  $11 = ((($fd)) + 76|0);
  $12 = HEAP32[$11>>2]|0;
  $$02 = $12;
 } else {
  $$02 = $level;
 }
 $13 = ($$2|0)==(0);
 $14 = ($$02|0)==(0);
 $or$cond = $13 | $14;
 if (!($or$cond)) {
  $15 = ((($b)) + 20|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0);
  if (!($17)) {
   $21 = ($metrics|0)==(0|0);
   do {
    if ($21) {
     $298 = ((($b)) + 32|0);
     $299 = HEAP32[$298>>2]|0;
     $300 = (_cram_compress_by_method($299,$16,$comp_size,1,$$02,1)|0);
     $301 = ($300|0)==(0|0);
     if (!($301)) {
      $302 = HEAP32[$298>>2]|0;
      _free($302);
      HEAP32[$298>>2] = $300;
      $303 = HEAP32[$comp_size>>2]|0;
      $304 = ((($b)) + 16|0);
      HEAP32[$304>>2] = $303;
      HEAP32[$b>>2] = 1;
      break;
     }
     _fprintf(9772,18923,$vararg_buffer);
     $$0 = -1;
     STACKTOP = sp;return ($$0|0);
    } else {
     $22 = ((($fd)) + 34676|0);
     (_pthread_mutex_lock(($22|0))|0);
     $23 = HEAP32[$metrics>>2]|0;
     $24 = ($23|0)>(0);
     if (!($24)) {
      $25 = ((($metrics)) + 4|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (($26) + -1)|0;
      HEAP32[$25>>2] = $27;
      $28 = ($26|0)<(2);
      if (!($28)) {
       $286 = ((($metrics)) + 36|0);
       $287 = HEAP32[$286>>2]|0;
       $288 = ((($metrics)) + 32|0);
       $289 = HEAP32[$288>>2]|0;
       (_pthread_mutex_unlock(($22|0))|0);
       $290 = ((($b)) + 32|0);
       $291 = HEAP32[$290>>2]|0;
       $292 = HEAP32[$15>>2]|0;
       $293 = (_cram_compress_by_method($291,$292,$comp_size,$289,$$02,$287)|0);
       $294 = ($293|0)==(0|0);
       if ($294) {
        $$0 = -1;
        STACKTOP = sp;return ($$0|0);
       } else {
        $295 = HEAP32[$290>>2]|0;
        _free($295);
        HEAP32[$290>>2] = $293;
        $296 = HEAP32[$comp_size>>2]|0;
        $297 = ((($b)) + 16|0);
        HEAP32[$297>>2] = $296;
        HEAP32[$b>>2] = $289;
        break;
       }
      }
     }
     HEAP32[$sz_gz_rle>>2] = 0;
     HEAP32[$sz_gz_def>>2] = 0;
     HEAP32[$sz_rans1>>2] = 0;
     $29 = ((($metrics)) + 64|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==(0);
     if ($31) {
      HEAP32[$29>>2] = $$2;
      $$3 = $$2;
     } else {
      $$3 = $30;
     }
     $32 = ((($metrics)) + 4|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)==(0);
     if ($34) {
      HEAP32[$32>>2] = 50;
      HEAP32[$metrics>>2] = 3;
      $35 = ((($metrics)) + 8|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = (($36|0) / 2)&-1;
      HEAP32[$35>>2] = $37;
      $38 = ((($metrics)) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = (($39|0) / 2)&-1;
      HEAP32[$38>>2] = $40;
      $41 = ((($metrics)) + 16|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (($42|0) / 2)&-1;
      HEAP32[$41>>2] = $43;
      $44 = ((($metrics)) + 20|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = (($45|0) / 2)&-1;
      HEAP32[$44>>2] = $46;
      $47 = ((($metrics)) + 24|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = (($48|0) / 2)&-1;
      HEAP32[$47>>2] = $49;
      $50 = ((($metrics)) + 28|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = (($51|0) / 2)&-1;
      HEAP32[$50>>2] = $52;
     }
     (_pthread_mutex_unlock(($22|0))|0);
     $53 = $$3 & 2048;
     $54 = ($53|0)==(0);
     do {
      if ($54) {
       $121 = 0;$c_best$1 = 0;$method_best$1 = 0;$sz_best$1 = 2147483647;
      } else {
       $55 = ((($b)) + 32|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = HEAP32[$15>>2]|0;
       $58 = (_cram_compress_by_method($56,$57,$sz_gz_rle,1,1,3)|0);
       $59 = ($58|0)==(0|0);
       if ($59) {
        $62 = HEAP32[$15>>2]|0;
        $63 = $62 << 1;
        $64 = (($63) + 1000)|0;
        HEAP32[$sz_gz_rle>>2] = $64;
        $121 = $64;$c_best$1 = 0;$method_best$1 = 0;$sz_best$1 = 2147483647;
        break;
       }
       $60 = HEAP32[$sz_gz_rle>>2]|0;
       $61 = ($60>>>0)<(2147483647);
       if ($61) {
        $121 = $60;$c_best$1 = $58;$method_best$1 = 11;$sz_best$1 = $60;
       } else {
        _free($58);
        $121 = $60;$c_best$1 = 0;$method_best$1 = 0;$sz_best$1 = 2147483647;
       }
      }
     } while(0);
     $65 = $$3 & 2;
     $66 = ($65|0)==(0);
     do {
      if ($66) {
       $125 = 0;$c_best$3 = $c_best$1;$method_best$3 = $method_best$1;$sz_best$3 = $sz_best$1;
      } else {
       $67 = ((($b)) + 32|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = HEAP32[$15>>2]|0;
       $70 = (_cram_compress_by_method($68,$69,$sz_gz_def,1,$$02,1)|0);
       $71 = ($70|0)==(0|0);
       if ($71) {
        $75 = HEAP32[$15>>2]|0;
        $76 = $75 << 1;
        $77 = (($76) + 1000)|0;
        HEAP32[$sz_gz_def>>2] = $77;
        $125 = $77;$c_best$3 = $c_best$1;$method_best$3 = $method_best$1;$sz_best$3 = $sz_best$1;
        break;
       }
       $72 = HEAP32[$sz_gz_def>>2]|0;
       $73 = ($sz_best$1>>>0)>($72>>>0);
       if (!($73)) {
        _free($70);
        $125 = $72;$c_best$3 = $c_best$1;$method_best$3 = $method_best$1;$sz_best$3 = $sz_best$1;
        break;
       }
       $74 = ($c_best$1|0)==(0|0);
       if ($74) {
        $125 = $72;$c_best$3 = $70;$method_best$3 = 1;$sz_best$3 = $72;
       } else {
        _free($c_best$1);
        $125 = $72;$c_best$3 = $70;$method_best$3 = 1;$sz_best$3 = $72;
       }
      }
     } while(0);
     $78 = $$3 & 16;
     $79 = ($78|0)==(0);
     do {
      if ($79) {
       $c_best$5 = $c_best$3;$method_best$5 = $method_best$3;$sz_best$5 = $sz_best$3;$sz_rans0$0 = 0;
      } else {
       $80 = ((($b)) + 32|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = HEAP32[$15>>2]|0;
       $83 = (_rans_compress_O0($81,$82,$out_size_i$i)|0);
       $84 = HEAP32[$out_size_i$i>>2]|0;
       $85 = ($83|0)==(0|0);
       if ($85) {
        $88 = HEAP32[$15>>2]|0;
        $89 = $88 << 1;
        $90 = (($89) + 1000)|0;
        $c_best$5 = $c_best$3;$method_best$5 = $method_best$3;$sz_best$5 = $sz_best$3;$sz_rans0$0 = $90;
        break;
       }
       $86 = ($sz_best$3>>>0)>($84>>>0);
       if (!($86)) {
        _free($83);
        $c_best$5 = $c_best$3;$method_best$5 = $method_best$3;$sz_best$5 = $sz_best$3;$sz_rans0$0 = $84;
        break;
       }
       $87 = ($c_best$3|0)==(0|0);
       if ($87) {
        $c_best$5 = $83;$method_best$5 = 4;$sz_best$5 = $84;$sz_rans0$0 = $84;
       } else {
        _free($c_best$3);
        $c_best$5 = $83;$method_best$5 = 4;$sz_best$5 = $84;$sz_rans0$0 = $84;
       }
      }
     } while(0);
     $91 = $$3 & 1024;
     $92 = ($91|0)==(0);
     do {
      if ($92) {
       $132 = 0;$c_best$7 = $c_best$5;$method_best$7 = $method_best$5;$sz_best$7 = $sz_best$5;
      } else {
       $93 = ((($b)) + 32|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = HEAP32[$15>>2]|0;
       $96 = (_cram_compress_by_method($94,$95,$sz_rans1,10,0,0)|0);
       $97 = ($96|0)==(0|0);
       if ($97) {
        $101 = HEAP32[$15>>2]|0;
        $102 = $101 << 1;
        $103 = (($102) + 1000)|0;
        HEAP32[$sz_rans1>>2] = $103;
        $132 = $103;$c_best$7 = $c_best$5;$method_best$7 = $method_best$5;$sz_best$7 = $sz_best$5;
        break;
       }
       $98 = HEAP32[$sz_rans1>>2]|0;
       $99 = ($sz_best$5>>>0)>($98>>>0);
       if (!($99)) {
        _free($96);
        $132 = $98;$c_best$7 = $c_best$5;$method_best$7 = $method_best$5;$sz_best$7 = $sz_best$5;
        break;
       }
       $100 = ($c_best$5|0)==(0|0);
       if ($100) {
        $132 = $98;$c_best$7 = $96;$method_best$7 = 10;$sz_best$7 = $98;
       } else {
        _free($c_best$5);
        $132 = $98;$c_best$7 = $96;$method_best$7 = 10;$sz_best$7 = $98;
       }
      }
     } while(0);
     $104 = $$3 & 4;
     $105 = ($104|0)==(0);
     if ($105) {
      $sz_bzip2$0 = 0;
     } else {
      $106 = HEAP32[$15>>2]|0;
      $107 = $106 << 1;
      $108 = (($107) + 1000)|0;
      $sz_bzip2$0 = $108;
     }
     $109 = $$3 & 8;
     $110 = ($109|0)==(0);
     if ($110) {
      $sz_lzma$0 = 0;
     } else {
      $111 = HEAP32[$15>>2]|0;
      $112 = $111 << 1;
      $113 = (($112) + 1000)|0;
      $sz_lzma$0 = $113;
     }
     $114 = ((($b)) + 32|0);
     $115 = HEAP32[$114>>2]|0;
     _free($115);
     HEAP32[$114>>2] = $c_best$7;
     $116 = ($method_best$7|0)==(11);
     $$method_best$7 = $116 ? 1 : $method_best$7;
     HEAP32[$b>>2] = $$method_best$7;
     $117 = ((($b)) + 16|0);
     HEAP32[$117>>2] = $sz_best$7;
     (_pthread_mutex_lock(($22|0))|0);
     $118 = ((($metrics)) + 8|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = (($119) + ($121))|0;
     HEAP32[$118>>2] = $120;
     $122 = ((($metrics)) + 12|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = (($123) + ($125))|0;
     HEAP32[$122>>2] = $124;
     $126 = ((($metrics)) + 16|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($127) + ($sz_rans0$0))|0;
     HEAP32[$126>>2] = $128;
     $129 = ((($metrics)) + 20|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($130) + ($132))|0;
     HEAP32[$129>>2] = $131;
     $133 = ((($metrics)) + 24|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = (($134) + ($sz_bzip2$0))|0;
     HEAP32[$133>>2] = $135;
     $136 = ((($metrics)) + 28|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = (($137) + ($sz_lzma$0))|0;
     HEAP32[$136>>2] = $138;
     $139 = HEAP32[$metrics>>2]|0;
     $140 = (($139) + -1)|0;
     HEAP32[$metrics>>2] = $140;
     $141 = ($140|0)==(0);
     if ($141) {
      $142 = ((($fd)) + 76|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = ($143|0)<(4);
      do {
       if ($144) {
        $145 = (+($131|0));
        $146 = $145 * 1.02;
        $147 = (~~(($146)));
        HEAP32[$129>>2] = $147;
        $148 = (+($124|0));
        $149 = $148 * 1.04;
        $150 = (~~(($149)));
        HEAP32[$122>>2] = $150;
        $151 = (+($135|0));
        $152 = $151 * 1.0800000000000001;
        $153 = (~~(($152)));
        HEAP32[$133>>2] = $153;
        $154 = (+($138|0));
        $155 = $154 * 1.1000000000000001;
        $156 = (~~(($155)));
        HEAP32[$136>>2] = $156;
        $172 = $150;$175 = $147;$177 = $153;$179 = $156;
       } else {
        $157 = ($143|0)<(7);
        if (!($157)) {
         $172 = $124;$175 = $131;$177 = $135;$179 = $138;
         break;
        }
        $158 = (+($131|0));
        $159 = $158 * 1.01;
        $160 = (~~(($159)));
        HEAP32[$129>>2] = $160;
        $161 = (+($124|0));
        $162 = $161 * 1.02;
        $163 = (~~(($162)));
        HEAP32[$122>>2] = $163;
        $164 = (+($135|0));
        $165 = $164 * 1.03;
        $166 = (~~(($165)));
        HEAP32[$133>>2] = $166;
        $167 = (+($138|0));
        $168 = $167 * 1.05;
        $169 = (~~(($168)));
        HEAP32[$136>>2] = $169;
        $172 = $163;$175 = $160;$177 = $166;$179 = $169;
       }
      } while(0);
      $170 = ($120|0)==(2147483647);
      $or$cond44 = $54 | $170;
      $best_method$0 = $or$cond44 ? 0 : 11;
      $best_sz$0 = $or$cond44 ? 2147483647 : $120;
      $$not = $66 ^ 1;
      $171 = ($best_sz$0|0)>($172|0);
      $or$cond45 = $171 & $$not;
      $best_method$1 = $or$cond45 ? 1 : $best_method$0;
      $best_sz$1 = $or$cond45 ? $172 : $best_sz$0;
      $$not46 = $79 ^ 1;
      $173 = ($best_sz$1|0)>($128|0);
      $or$cond47 = $173 & $$not46;
      $best_method$2 = $or$cond47 ? 4 : $best_method$1;
      $best_sz$2 = $or$cond47 ? $128 : $best_sz$1;
      $$not48 = $92 ^ 1;
      $174 = ($best_sz$2|0)>($175|0);
      $or$cond49 = $174 & $$not48;
      $best_method$3 = $or$cond49 ? 10 : $best_method$2;
      $best_sz$3 = $or$cond49 ? $175 : $best_sz$2;
      $$not50 = $105 ^ 1;
      $176 = ($best_sz$3|0)>($177|0);
      $or$cond51 = $176 & $$not50;
      $best_method$4 = $or$cond51 ? 2 : $best_method$3;
      $best_sz$4 = $or$cond51 ? $177 : $best_sz$3;
      $$not52 = $110 ^ 1;
      $178 = ($best_sz$4|0)>($179|0);
      $or$cond53 = $178 & $$not52;
      do {
       if ($or$cond53) {
        $best_method$59 = 3;$best_sz$511 = $179;
        label = 54;
       } else {
        $180 = ($best_method$4|0)==(11);
        if (!($180)) {
         $best_method$59 = $best_method$4;$best_sz$511 = $best_sz$4;
         label = 54;
         break;
        }
        $181 = ((($metrics)) + 32|0);
        HEAP32[$181>>2] = 1;
        $182 = ((($metrics)) + 36|0);
        HEAP32[$182>>2] = 3;
        $183 = ((($metrics)) + 40|0);
        HEAP32[$183>>2] = 0;
        $184 = ((($metrics)) + 72|0);
        HEAPF64[$184>>3] = 0.0;
        $$622 = $$3;$best_method$581519 = 11;$best_sz$5101321 = $best_sz$4;
        label = 60;
       }
      } while(0);
      do {
       if ((label|0) == 54) {
        $185 = ((($metrics)) + 32|0);
        HEAP32[$185>>2] = $best_method$59;
        $186 = ((($metrics)) + 36|0);
        HEAP32[$186>>2] = 1;
        $187 = ($best_sz$511|0)<($120|0);
        do {
         if ($187) {
          $188 = ((($metrics)) + 40|0);
          $189 = HEAP32[$188>>2]|0;
          $190 = (($189) + 1)|0;
          HEAP32[$188>>2] = $190;
          $191 = ($189|0)>(2);
          if (!($191)) {
           $$6 = $$3;
           break;
          }
          $192 = (+($120|0));
          $193 = (+($best_sz$511|0));
          $194 = $192 / $193;
          $195 = $194 + -1.0;
          $196 = ((($metrics)) + 72|0);
          $197 = +HEAPF64[$196>>3];
          $198 = $197 + $195;
          HEAPF64[$196>>3] = $198;
          $199 = !($198 >= 0.20000000000000001);
          if ($199) {
           $$6 = $$3;
           break;
          }
          $200 = $$3 & -2049;
          $$6 = $200;
         } else {
          $$6 = $$3;
         }
        } while(0);
        $201 = ($best_method$59|0)==(1);
        if (!($201)) {
         $$622 = $$6;$best_method$581519 = $best_method$59;$best_sz$5101321 = $best_sz$511;
         label = 60;
         break;
        }
        $202 = ((($metrics)) + 44|0);
        HEAP32[$202>>2] = 0;
        $203 = ((($metrics)) + 80|0);
        HEAPF64[$203>>3] = 0.0;
        $$928 = $$6;$best_method$58151827 = 1;$best_sz$510132025 = $best_sz$511;
        label = 66;
       }
      } while(0);
      do {
       if ((label|0) == 60) {
        $204 = ($best_sz$5101321|0)<($172|0);
        do {
         if ($204) {
          $205 = ((($metrics)) + 44|0);
          $206 = HEAP32[$205>>2]|0;
          $207 = (($206) + 1)|0;
          HEAP32[$205>>2] = $207;
          $208 = ($206|0)>(2);
          if (!($208)) {
           $$9 = $$622;
           break;
          }
          $209 = (+($172|0));
          $210 = (+($best_sz$5101321|0));
          $211 = $209 / $210;
          $212 = $211 + -1.0;
          $213 = ((($metrics)) + 80|0);
          $214 = +HEAPF64[$213>>3];
          $215 = $214 + $212;
          HEAPF64[$213>>3] = $215;
          $216 = !($215 >= 0.20000000000000001);
          if ($216) {
           $$9 = $$622;
           break;
          }
          $217 = $$622 & -3;
          $$9 = $217;
         } else {
          $$9 = $$622;
         }
        } while(0);
        $218 = ($best_method$581519|0)==(4);
        if (!($218)) {
         $$928 = $$9;$best_method$58151827 = $best_method$581519;$best_sz$510132025 = $best_sz$5101321;
         label = 66;
         break;
        }
        $219 = ((($metrics)) + 48|0);
        HEAP32[$219>>2] = 0;
        $220 = ((($metrics)) + 88|0);
        HEAPF64[$220>>3] = 0.0;
        $$1234 = $$9;$best_method$5815182631 = 4;$best_sz$51013202433 = $best_sz$5101321;
        label = 72;
       }
      } while(0);
      do {
       if ((label|0) == 66) {
        $221 = ($best_sz$510132025|0)<($128|0);
        do {
         if ($221) {
          $222 = ((($metrics)) + 48|0);
          $223 = HEAP32[$222>>2]|0;
          $224 = (($223) + 1)|0;
          HEAP32[$222>>2] = $224;
          $225 = ($223|0)>(2);
          if (!($225)) {
           $$12 = $$928;
           break;
          }
          $226 = (+($128|0));
          $227 = (+($best_sz$510132025|0));
          $228 = $226 / $227;
          $229 = $228 + -1.0;
          $230 = ((($metrics)) + 88|0);
          $231 = +HEAPF64[$230>>3];
          $232 = $231 + $229;
          HEAPF64[$230>>3] = $232;
          $233 = !($232 >= 0.20000000000000001);
          if ($233) {
           $$12 = $$928;
           break;
          }
          $234 = $$928 & -17;
          $$12 = $234;
         } else {
          $$12 = $$928;
         }
        } while(0);
        $235 = ($best_method$58151827|0)==(10);
        if (!($235)) {
         $$1234 = $$12;$best_method$5815182631 = $best_method$58151827;$best_sz$51013202433 = $best_sz$510132025;
         label = 72;
         break;
        }
        $236 = ((($metrics)) + 52|0);
        HEAP32[$236>>2] = 0;
        $237 = ((($metrics)) + 96|0);
        HEAPF64[$237>>3] = 0.0;
        $$1540 = $$12;$best_method$581518263039 = 10;$best_sz$5101320243237 = $best_sz$510132025;
        label = 78;
       }
      } while(0);
      do {
       if ((label|0) == 72) {
        $238 = ($best_sz$51013202433|0)<($175|0);
        do {
         if ($238) {
          $239 = ((($metrics)) + 52|0);
          $240 = HEAP32[$239>>2]|0;
          $241 = (($240) + 1)|0;
          HEAP32[$239>>2] = $241;
          $242 = ($240|0)>(2);
          if (!($242)) {
           $$15 = $$1234;
           break;
          }
          $243 = (+($175|0));
          $244 = (+($best_sz$51013202433|0));
          $245 = $243 / $244;
          $246 = $245 + -1.0;
          $247 = ((($metrics)) + 96|0);
          $248 = +HEAPF64[$247>>3];
          $249 = $248 + $246;
          HEAPF64[$247>>3] = $249;
          $250 = !($249 >= 0.20000000000000001);
          if ($250) {
           $$15 = $$1234;
           break;
          }
          $251 = $$1234 & -1025;
          $$15 = $251;
         } else {
          $$15 = $$1234;
         }
        } while(0);
        $252 = ($best_method$5815182631|0)==(2);
        if (!($252)) {
         $$1540 = $$15;$best_method$581518263039 = $best_method$5815182631;$best_sz$5101320243237 = $best_sz$51013202433;
         label = 78;
         break;
        }
        $253 = ((($metrics)) + 56|0);
        HEAP32[$253>>2] = 0;
        $254 = ((($metrics)) + 104|0);
        HEAPF64[$254>>3] = 0.0;
        $$1843 = $$15;$best_sz$510132024323642 = $best_sz$51013202433;
        label = 84;
       }
      } while(0);
      do {
       if ((label|0) == 78) {
        $255 = ($best_sz$5101320243237|0)<($177|0);
        do {
         if ($255) {
          $256 = ((($metrics)) + 56|0);
          $257 = HEAP32[$256>>2]|0;
          $258 = (($257) + 1)|0;
          HEAP32[$256>>2] = $258;
          $259 = ($257|0)>(2);
          if (!($259)) {
           $$18 = $$1540;
           break;
          }
          $260 = (+($177|0));
          $261 = (+($best_sz$5101320243237|0));
          $262 = $260 / $261;
          $263 = $262 + -1.0;
          $264 = ((($metrics)) + 104|0);
          $265 = +HEAPF64[$264>>3];
          $266 = $265 + $263;
          HEAPF64[$264>>3] = $266;
          $267 = !($266 >= 0.20000000000000001);
          if ($267) {
           $$18 = $$1540;
           break;
          }
          $268 = $$1540 & -5;
          $$18 = $268;
         } else {
          $$18 = $$1540;
         }
        } while(0);
        $269 = ($best_method$581518263039|0)==(3);
        if (!($269)) {
         $$1843 = $$18;$best_sz$510132024323642 = $best_sz$5101320243237;
         label = 84;
         break;
        }
        $270 = ((($metrics)) + 60|0);
        HEAP32[$270>>2] = 0;
        $271 = ((($metrics)) + 112|0);
        HEAPF64[$271>>3] = 0.0;
        $$21 = $$18;
       }
      } while(0);
      do {
       if ((label|0) == 84) {
        $272 = ($best_sz$510132024323642|0)<($179|0);
        if (!($272)) {
         $$21 = $$1843;
         break;
        }
        $273 = ((($metrics)) + 60|0);
        $274 = HEAP32[$273>>2]|0;
        $275 = (($274) + 1)|0;
        HEAP32[$273>>2] = $275;
        $276 = ($274|0)>(2);
        if (!($276)) {
         $$21 = $$1843;
         break;
        }
        $277 = (+($179|0));
        $278 = (+($best_sz$510132024323642|0));
        $279 = $277 / $278;
        $280 = $279 + -1.0;
        $281 = ((($metrics)) + 112|0);
        $282 = +HEAPF64[$281>>3];
        $283 = $282 + $280;
        HEAPF64[$281>>3] = $283;
        $284 = !($283 >= 0.20000000000000001);
        if ($284) {
         $$21 = $$1843;
         break;
        }
        $285 = $$1843 & -9;
        $$21 = $285;
       }
      } while(0);
      HEAP32[$29>>2] = $$21;
     }
     (_pthread_mutex_unlock(($22|0))|0);
    }
   } while(0);
   $305 = ((($fd)) + 272|0);
   $306 = HEAP32[$305>>2]|0;
   $307 = ($306|0)==(0);
   if (!($307)) {
    $308 = ((($b)) + 12|0);
    $309 = HEAP32[$308>>2]|0;
    $310 = HEAP32[$15>>2]|0;
    $311 = ((($b)) + 16|0);
    $312 = HEAP32[$311>>2]|0;
    $313 = HEAP32[$b>>2]|0;
    switch ($313|0) {
    case 0:  {
     $$0$i = 18944;
     break;
    }
    case 1:  {
     $$0$i = 18948;
     break;
    }
    case 2:  {
     $$0$i = 18953;
     break;
    }
    case 3:  {
     $$0$i = 18959;
     break;
    }
    case 4:  {
     $$0$i = 18964;
     break;
    }
    case 10:  {
     $$0$i = 18970;
     break;
    }
    case 11:  {
     $$0$i = 18976;
     break;
    }
    default: {
     $$0$i = 22689;
    }
    }
    HEAP32[$vararg_buffer1>>2] = $309;
    $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr3>>2] = $310;
    $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
    HEAP32[$vararg_ptr4>>2] = $312;
    $vararg_ptr5 = ((($vararg_buffer1)) + 12|0);
    HEAP32[$vararg_ptr5>>2] = $$0$i;
    _fprintf(9772,18985,$vararg_buffer1);
   }
   $314 = HEAP32[$b>>2]|0;
   $315 = ($314|0)==(10);
   if (!($315)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$b>>2] = 4;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 HEAP32[$b>>2] = 0;
 $18 = ((($b)) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($b)) + 16|0);
 HEAP32[$20>>2] = $19;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _cram_compress_by_method($in,$in_size,$out_size,$method,$level,$strat) {
 $in = $in|0;
 $in_size = $in_size|0;
 $out_size = $out_size|0;
 $method = $method|0;
 $level = $level|0;
 $strat = $strat|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$cast = 0, $$m$0$i$i = 0, $$pre$phiZ2D = 0, $0 = 0.0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0.0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F$0$i$i = 0, $M$0$i$i = 0, $M$2$i$i = 0, $T$0$i$i = 0, $cdata_pos$0$i = 0, $cp$0$i$i = 0;
 var $cp$2$i$i = 0, $cp$3$i$i = 0, $cp$5$i$i = 0, $cp$6$i$i = 0, $cp$7$i$i = 0, $cp$8$i$i = 0, $exitcond = 0, $exitcond128 = 0, $i$0$i$i = 0, $i$1$i$i = 0, $i0$0$i$i = 0, $i1$0$i$i = 0, $i2$0$i$i = 0, $i3$0$i$i = 0, $i3$1$i$i = 0, $j$0$i$i = 0, $j$0$i$i$M$0$i$i = 0, $j$1$i$i = 0, $l0$0$i$i = 0, $l1$0$i$i = 0;
 var $l2$0$i$i = 0, $l3$0$i$i = 0, $l3$1$i$i = 0, $last_i$0$i$i = 0, $m$0$i$i = 0, $m$2$i$i = 0, $out_buf$0$i$i = 0, $out_size_i = 0, $out_size_i1 = 0, $ptr$0$i$i$i = 0, $ptr$0$i11$i$i = 0, $ptr$0$i15$i$i = 0, $ptr$0$i19$i$i = 0, $ptr$0$i23$i$i = 0, $ptr$0$i27$i$i = 0, $ptr$0$i3$i$i = 0, $ptr$0$i31$i$i = 0, $ptr$0$i7$i$i = 0, $ptr$i$i$0 = 0, $ptr$i$i$1 = 0;
 var $ptr$i$i$10 = 0, $ptr$i$i$2 = 0, $ptr$i$i$3 = 0, $ptr$i$i$4 = 0, $ptr$i$i$5 = 0, $ptr$i$i$6 = 0, $ptr$i$i$7 = 0, $ptr$i$i$8 = 0, $ptr$i$i$9 = 0, $rans0$i$i$0 = 0, $rans1$i$i$0 = 0, $rans2$i$i$0 = 0, $rans3$i$i$0 = 0, $rans3$i$i$1 = 0, $rle_i$0$i$i = 0, $rle_i$1$i$i = 0, $rle_i$1$in$i$i = 0, $rle_i$3$i$i = 0, $rle_i$4$i$i = 0, $rle_j$0$i$i = 0;
 var $rle_j$1$i$i = 0, $rle_j$1$in$i$i = 0, $rle_j$3$i$i = 0, $rle_j$4$i$i = 0, $s$i = 0, $shift$0$i$i$i = 0, $storemerge = 0, $t2$0$i$i = 0, $t2$1$i$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $x$0$i$i = 0, $x$0$i$i$i = 0, $x$0$i10$i$i = 0, $x$0$i14$i$i = 0, $x$0$i18$i$i = 0, $x$0$i2$i$i = 0;
 var $x$0$i22$i$i = 0, $x$0$i26$i$i = 0, $x$0$i30$i$i = 0, $x$0$i6$i$i = 0, $x$1$i$i = 0, $x$1$i$i$i = 0, $x$1$i12$i$i = 0, $x$1$i16$i$i = 0, $x$1$i20$i$i = 0, $x$1$i24$i$i = 0, $x$1$i28$i$i = 0, $x$1$i32$i$i = 0, $x$1$i4$i$i = 0, $x$1$i8$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $s$i = sp + 48|0;
 $out_size_i = sp + 40|0;
 $out_size_i1 = sp + 36|0;
 switch ($method|0) {
 case 1:  {
  $0 = (+($in_size>>>0));
  $1 = $0 * 1.05;
  $2 = $1 + 100.0;
  $3 = (~~(($2)));
  $4 = (_malloc($3)|0);
  $5 = ($4|0)==(0|0);
  do {
   if ($5) {
    $$0$i = 0;
   } else {
    $6 = ((($s$i)) + 32|0);
    HEAP32[$6>>2] = 0;
    $7 = ((($s$i)) + 36|0);
    HEAP32[$7>>2] = 0;
    $8 = ((($s$i)) + 40|0);
    HEAP32[$8>>2] = 0;
    HEAP32[$s$i>>2] = $in;
    $9 = ((($s$i)) + 4|0);
    HEAP32[$9>>2] = $in_size;
    $10 = ((($s$i)) + 8|0);
    HEAP32[$10>>2] = 0;
    $11 = ((($s$i)) + 12|0);
    HEAP32[$11>>2] = $4;
    $12 = ((($s$i)) + 16|0);
    HEAP32[$12>>2] = $3;
    $13 = ((($s$i)) + 20|0);
    HEAP32[$13>>2] = 0;
    $14 = ((($s$i)) + 44|0);
    HEAP32[$14>>2] = 0;
    $15 = (_deflateInit2_($s$i,$level,8,31,9,$strat,18486,56)|0);
    $16 = ($15|0)==(0);
    if ($16) {
     $cdata_pos$0$i = 0;
    } else {
     $17 = ((($s$i)) + 24|0);
     $18 = HEAP32[$17>>2]|0;
     HEAP32[$vararg_buffer>>2] = $18;
     _fprintf(9772,18817,$vararg_buffer);
     $$0$i = 0;
     break;
    }
    while(1) {
     $19 = HEAP32[$9>>2]|0;
     $20 = ($19|0)==(0);
     if ($20) {
      break;
     }
     $21 = (($4) + ($cdata_pos$0$i)|0);
     HEAP32[$11>>2] = $21;
     $22 = (($3) - ($cdata_pos$0$i))|0;
     HEAP32[$12>>2] = $22;
     $23 = ($3|0)>($cdata_pos$0$i|0);
     if (!($23)) {
      label = 7;
      break;
     }
     $24 = (_deflate($s$i,0)|0);
     $25 = ($24|0)==(0);
     if (!($25)) {
      label = 9;
      break;
     }
     $28 = HEAP32[$12>>2]|0;
     $29 = (($3) - ($28))|0;
     $cdata_pos$0$i = $29;
    }
    if ((label|0) == 7) {
     _fprintf(9772,18846,$vararg_buffer1);
     $$0$i = 0;
     break;
    }
    else if ((label|0) == 9) {
     $26 = ((($s$i)) + 24|0);
     $27 = HEAP32[$26>>2]|0;
     HEAP32[$vararg_buffer3>>2] = $27;
     _fprintf(9772,18899,$vararg_buffer3);
    }
    $30 = (_deflate($s$i,4)|0);
    $31 = ($30|0)==(1);
    if (!($31)) {
     $32 = ((($s$i)) + 24|0);
     $33 = HEAP32[$32>>2]|0;
     HEAP32[$vararg_buffer6>>2] = $33;
     _fprintf(9772,18899,$vararg_buffer6);
    }
    $34 = HEAP32[$13>>2]|0;
    HEAP32[$out_size>>2] = $34;
    $35 = (_deflateEnd($s$i)|0);
    $36 = ($35|0)==(0);
    if ($36) {
     $$0$i = $4;
    } else {
     $37 = ((($s$i)) + 24|0);
     $38 = HEAP32[$37>>2]|0;
     HEAP32[$vararg_buffer9>>2] = $38;
     _fprintf(9772,18899,$vararg_buffer9);
     $$0$i = $4;
    }
   }
  } while(0);
  $$0 = $$0$i;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 10:  {
  $41 = ($in_size>>>0)<(4);
  if ($41) {
   $42 = (_rans_compress_O0($in,$in_size,$out_size_i1)|0);
   $$0$i$i = $42;
  } else {
   $43 = (_malloc(1048576)|0);
   $44 = ($43|0)==(0|0);
   do {
    if ($44) {
     $F$0$i$i = 0;$T$0$i$i = 0;$out_buf$0$i$i = 0;
    } else {
     $45 = (_malloc(262144)|0);
     $46 = ($45|0)==(0|0);
     if ($46) {
      $F$0$i$i = 0;$T$0$i$i = 0;$out_buf$0$i$i = 0;
     } else {
      $47 = ((($45)) + -4|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = $48 & 3;
      $50 = ($49|0)==(0);
      if (!($50)) {
       _memset(($45|0),0,262144)|0;
      }
      $51 = (_malloc(1024)|0);
      $52 = ($51|0)==(0|0);
      if ($52) {
       $F$0$i$i = $45;$T$0$i$i = 0;$out_buf$0$i$i = 0;
      } else {
       $53 = ((($51)) + -4|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = $54 & 3;
       $56 = ($55|0)==(0);
       if (!($56)) {
        _memset(($51|0),0,1024)|0;
       }
       $57 = (+($in_size>>>0));
       $58 = $57 * 1.05;
       $59 = $58 + 198147.0;
       $60 = $59 + 9.0;
       $61 = (~~(($60))>>>0);
       $62 = (_malloc($61)|0);
       $63 = ($62|0)==(0|0);
       if ($63) {
        $F$0$i$i = $45;$T$0$i$i = $51;$out_buf$0$i$i = 0;
       } else {
        $64 = (~~(($58)));
        $65 = (($62) + ($64)|0);
        $66 = ((($65)) + 198147|0);
        $67 = ((($66)) + 9|0);
        $i$0$i$i = 0;$last_i$0$i$i = 0;
        while(1) {
         $exitcond128 = ($i$0$i$i|0)==($in_size|0);
         if ($exitcond128) {
          break;
         }
         $68 = (($in) + ($i$0$i$i)|0);
         $69 = HEAP8[$68>>0]|0;
         $70 = $69&255;
         $71 = ((($45) + ($last_i$0$i$i<<10)|0) + ($70<<2)|0);
         $72 = HEAP32[$71>>2]|0;
         $73 = (($72) + 1)|0;
         HEAP32[$71>>2] = $73;
         $74 = (($51) + ($last_i$0$i$i<<2)|0);
         $75 = HEAP32[$74>>2]|0;
         $76 = (($75) + 1)|0;
         HEAP32[$74>>2] = $76;
         $77 = (($i$0$i$i) + 1)|0;
         $i$0$i$i = $77;$last_i$0$i$i = $70;
        }
        $78 = ((($62)) + 9|0);
        $79 = $in_size >>> 2;
        $80 = (($in) + ($79)|0);
        $81 = HEAP8[$80>>0]|0;
        $82 = $81&255;
        $83 = (($45) + ($82<<2)|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = (($84) + 1)|0;
        HEAP32[$83>>2] = $85;
        $86 = $79 << 1;
        $87 = (($in) + ($86)|0);
        $88 = HEAP8[$87>>0]|0;
        $89 = $88&255;
        $90 = (($45) + ($89<<2)|0);
        $91 = HEAP32[$90>>2]|0;
        $92 = (($91) + 1)|0;
        HEAP32[$90>>2] = $92;
        $93 = ($79*3)|0;
        $94 = (($in) + ($93)|0);
        $95 = HEAP8[$94>>0]|0;
        $96 = $95&255;
        $97 = (($45) + ($96<<2)|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = (($98) + 1)|0;
        HEAP32[$97>>2] = $99;
        $100 = HEAP32[$51>>2]|0;
        $101 = (($100) + 3)|0;
        HEAP32[$51>>2] = $101;
        $cp$0$i$i = $78;$i$1$i$i = 0;$rle_i$0$i$i = 0;
        L41: while(1) {
         $102 = ($i$1$i$i|0)<(256);
         if (!($102)) {
          label = 74;
          break;
         }
         $103 = (($51) + ($i$1$i$i<<2)|0);
         $104 = HEAP32[$103>>2]|0;
         $105 = ($104|0)==(0);
         if ($105) {
          $cp$8$i$i = $cp$0$i$i;$rle_i$4$i$i = $rle_i$0$i$i;
         } else {
          $106 = (+($104|0));
          $107 = 4096.0 / $106;
          $M$0$i$i = 0;$j$0$i$i = 0;$m$0$i$i = 0;$t2$0$i$i = 0;
          while(1) {
           $exitcond = ($j$0$i$i|0)==(256);
           if ($exitcond) {
            break;
           }
           $108 = ((($45) + ($i$1$i$i<<10)|0) + ($j$0$i$i<<2)|0);
           $109 = HEAP32[$108>>2]|0;
           $110 = ($109|0)==(0);
           if ($110) {
            $M$2$i$i = $M$0$i$i;$m$2$i$i = $m$0$i$i;$t2$1$i$i = $t2$0$i$i;
           } else {
            $111 = ($m$0$i$i|0)<($109|0);
            $j$0$i$i$M$0$i$i = $111 ? $j$0$i$i : $M$0$i$i;
            $$m$0$i$i = $111 ? $109 : $m$0$i$i;
            $112 = (+($109|0));
            $113 = $112 * $107;
            $114 = (~~(($113)));
            $115 = ($114|0)==(0);
            $storemerge = $115 ? 1 : $114;
            HEAP32[$108>>2] = $storemerge;
            $116 = (($t2$0$i$i) + ($storemerge))|0;
            $M$2$i$i = $j$0$i$i$M$0$i$i;$m$2$i$i = $$m$0$i$i;$t2$1$i$i = $116;
           }
           $117 = (($j$0$i$i) + 1)|0;
           $M$0$i$i = $M$2$i$i;$j$0$i$i = $117;$m$0$i$i = $m$2$i$i;$t2$0$i$i = $t2$1$i$i;
          }
          $118 = (($t2$0$i$i) + 1)|0;
          $119 = ($118|0)<(4096);
          if ($119) {
           $120 = (4095 - ($t2$0$i$i))|0;
           $121 = ((($45) + ($i$1$i$i<<10)|0) + ($M$0$i$i<<2)|0);
           $122 = HEAP32[$121>>2]|0;
           $123 = (($122) + ($120))|0;
           HEAP32[$121>>2] = $123;
          } else {
           $124 = (($t2$0$i$i) + -4095)|0;
           $125 = ((($45) + ($i$1$i$i<<10)|0) + ($M$0$i$i<<2)|0);
           $126 = HEAP32[$125>>2]|0;
           $127 = (($126) - ($124))|0;
           HEAP32[$125>>2] = $127;
          }
          $128 = ($rle_i$0$i$i|0)==(0);
          if ($128) {
           $130 = $i$1$i$i&255;
           $131 = ((($cp$0$i$i)) + 1|0);
           HEAP8[$cp$0$i$i>>0] = $130;
           $132 = ($i$1$i$i|0)==(0);
           if ($132) {
            $cp$2$i$i = $131;$rle_i$3$i$i = 0;
           } else {
            $133 = (($i$1$i$i) + -1)|0;
            $134 = (($51) + ($133<<2)|0);
            $135 = HEAP32[$134>>2]|0;
            $136 = ($135|0)==(0);
            if ($136) {
             $cp$2$i$i = $131;$rle_i$3$i$i = 0;
            } else {
             $rle_i$1$in$i$i = $i$1$i$i;
             while(1) {
              $rle_i$1$i$i = (($rle_i$1$in$i$i) + 1)|0;
              $137 = ($rle_i$1$i$i>>>0)<(256);
              if (!($137)) {
               break;
              }
              $138 = (($51) + ($rle_i$1$i$i<<2)|0);
              $139 = HEAP32[$138>>2]|0;
              $140 = ($139|0)==(0);
              if ($140) {
               break;
              } else {
               $rle_i$1$in$i$i = $rle_i$1$i$i;
              }
             }
             $141 = (($i$1$i$i) + 1)|0;
             $142 = (($rle_i$1$i$i) - ($141))|0;
             $143 = $142&255;
             $144 = ((($cp$0$i$i)) + 2|0);
             HEAP8[$131>>0] = $143;
             $cp$2$i$i = $144;$rle_i$3$i$i = $142;
            }
           }
          } else {
           $129 = (($rle_i$0$i$i) + -1)|0;
           $cp$2$i$i = $cp$0$i$i;$rle_i$3$i$i = $129;
          }
          $cp$3$i$i = $cp$2$i$i;$j$1$i$i = 0;$rle_j$0$i$i = 0;$x$0$i$i = 0;
          while(1) {
           $145 = ($j$1$i$i|0)<(256);
           if (!($145)) {
            break;
           }
           $146 = ((($45) + ($i$1$i$i<<10)|0) + ($j$1$i$i<<2)|0);
           $147 = HEAP32[$146>>2]|0;
           $148 = ($147|0)==(0);
           if ($148) {
            $cp$7$i$i = $cp$3$i$i;$rle_j$4$i$i = $rle_j$0$i$i;$x$1$i$i = $x$0$i$i;
           } else {
            $149 = ($rle_j$0$i$i|0)==(0);
            do {
             if ($149) {
              $151 = $j$1$i$i&255;
              $152 = ((($cp$3$i$i)) + 1|0);
              HEAP8[$cp$3$i$i>>0] = $151;
              $153 = ($j$1$i$i|0)==(0);
              if ($153) {
               $cp$5$i$i = $152;$rle_j$3$i$i = 0;
               break;
              }
              $154 = (($j$1$i$i) + -1)|0;
              $155 = ((($45) + ($i$1$i$i<<10)|0) + ($154<<2)|0);
              $156 = HEAP32[$155>>2]|0;
              $157 = ($156|0)==(0);
              if ($157) {
               $cp$5$i$i = $152;$rle_j$3$i$i = 0;
               break;
              } else {
               $rle_j$1$in$i$i = $j$1$i$i;
              }
              while(1) {
               $rle_j$1$i$i = (($rle_j$1$in$i$i) + 1)|0;
               $158 = ($rle_j$1$i$i>>>0)<(256);
               if (!($158)) {
                break;
               }
               $159 = ((($45) + ($i$1$i$i<<10)|0) + ($rle_j$1$i$i<<2)|0);
               $160 = HEAP32[$159>>2]|0;
               $161 = ($160|0)==(0);
               if ($161) {
                break;
               } else {
                $rle_j$1$in$i$i = $rle_j$1$i$i;
               }
              }
              $162 = (($j$1$i$i) + 1)|0;
              $163 = (($rle_j$1$i$i) - ($162))|0;
              $164 = $163&255;
              $165 = ((($cp$3$i$i)) + 2|0);
              HEAP8[$152>>0] = $164;
              $cp$5$i$i = $165;$rle_j$3$i$i = $163;
             } else {
              $150 = (($rle_j$0$i$i) + -1)|0;
              $cp$5$i$i = $cp$3$i$i;$rle_j$3$i$i = $150;
             }
            } while(0);
            $166 = HEAP32[$146>>2]|0;
            $167 = ($166|0)<(128);
            if ($167) {
             $168 = $166&255;
             $169 = ((($cp$5$i$i)) + 1|0);
             HEAP8[$cp$5$i$i>>0] = $168;
             $cp$6$i$i = $169;
            } else {
             $170 = $166 >>> 8;
             $171 = $170 | 128;
             $172 = $171&255;
             $173 = ((($cp$5$i$i)) + 1|0);
             HEAP8[$cp$5$i$i>>0] = $172;
             $174 = HEAP32[$146>>2]|0;
             $175 = $174&255;
             $176 = ((($cp$5$i$i)) + 2|0);
             HEAP8[$173>>0] = $175;
             $cp$6$i$i = $176;
            }
            $177 = HEAP32[$146>>2]|0;
            $178 = ($x$0$i$i>>>0)<(4097);
            if (!($178)) {
             label = 62;
             break L41;
            }
            $179 = (4096 - ($x$0$i$i))|0;
            $180 = ($179>>>0)<($177>>>0);
            if ($180) {
             label = 64;
             break L41;
            }
            $181 = $177 << 19;
            $182 = ((($43) + ($i$1$i$i<<12)|0) + ($j$1$i$i<<4)|0);
            HEAP32[$182>>2] = $181;
            $183 = (4096 - ($177))|0;
            $184 = $183&65535;
            $185 = ((((($43) + ($i$1$i$i<<12)|0) + ($j$1$i$i<<4)|0)) + 12|0);
            HEAP16[$185>>1] = $184;
            $186 = ($177>>>0)<(2);
            if ($186) {
             $187 = ((((($43) + ($i$1$i$i<<12)|0) + ($j$1$i$i<<4)|0)) + 4|0);
             HEAP32[$187>>2] = -1;
             $188 = ((((($43) + ($i$1$i$i<<12)|0) + ($j$1$i$i<<4)|0)) + 14|0);
             HEAP16[$188>>1] = 0;
             $189 = (($x$0$i$i) + 4095)|0;
             $190 = ((((($43) + ($i$1$i$i<<12)|0) + ($j$1$i$i<<4)|0)) + 8|0);
             HEAP32[$190>>2] = $189;
             $$pre$phiZ2D = $188;$209 = 0;
            } else {
             $shift$0$i$i$i = 0;
             while(1) {
              $191 = 1 << $shift$0$i$i$i;
              $192 = ($191>>>0)<($177>>>0);
              if (!($192)) {
               break;
              }
              $193 = (($shift$0$i$i$i) + 1)|0;
              $shift$0$i$i$i = $193;
             }
             $194 = (($shift$0$i$i$i) + 31)|0;
             $195 = (_bitshift64Shl(1,0,($194|0))|0);
             $196 = tempRet0;
             $197 = (_i64Add(($195|0),($196|0),($177|0),0)|0);
             $198 = tempRet0;
             $199 = (_i64Add(($197|0),($198|0),-1,-1)|0);
             $200 = tempRet0;
             $201 = (___udivdi3(($199|0),($200|0),($177|0),0)|0);
             $202 = tempRet0;
             $203 = ((((($43) + ($i$1$i$i<<12)|0) + ($j$1$i$i<<4)|0)) + 4|0);
             HEAP32[$203>>2] = $201;
             $204 = (($shift$0$i$i$i) + 65535)|0;
             $205 = $204&65535;
             $206 = ((((($43) + ($i$1$i$i<<12)|0) + ($j$1$i$i<<4)|0)) + 14|0);
             HEAP16[$206>>1] = $205;
             $207 = ((((($43) + ($i$1$i$i<<12)|0) + ($j$1$i$i<<4)|0)) + 8|0);
             HEAP32[$207>>2] = $x$0$i$i;
             $$pre$phiZ2D = $206;$209 = $204;
            }
            $208 = (($209) + 32)|0;
            $210 = $208&65535;
            HEAP16[$$pre$phiZ2D>>1] = $210;
            $211 = HEAP32[$146>>2]|0;
            $212 = (($x$0$i$i) + ($211))|0;
            $cp$7$i$i = $cp$6$i$i;$rle_j$4$i$i = $rle_j$3$i$i;$x$1$i$i = $212;
           }
           $213 = (($j$1$i$i) + 1)|0;
           $cp$3$i$i = $cp$7$i$i;$j$1$i$i = $213;$rle_j$0$i$i = $rle_j$4$i$i;$x$0$i$i = $x$1$i$i;
          }
          $214 = ((($cp$3$i$i)) + 1|0);
          HEAP8[$cp$3$i$i>>0] = 0;
          $cp$8$i$i = $214;$rle_i$4$i$i = $rle_i$3$i$i;
         }
         $215 = (($i$1$i$i) + 1)|0;
         $cp$0$i$i = $cp$8$i$i;$i$1$i$i = $215;$rle_i$0$i$i = $rle_i$4$i$i;
        }
        if ((label|0) == 62) {
         ___assert_fail((20795|0),(20758|0),186,(20777|0));
         // unreachable;
        }
        else if ((label|0) == 64) {
         ___assert_fail((20823|0),(20758|0),187,(20777|0));
         // unreachable;
        }
        else if ((label|0) == 74) {
         $216 = ((($cp$0$i$i)) + 1|0);
         HEAP8[$cp$0$i$i>>0] = 0;
         $217 = $216;
         $218 = $62;
         $219 = (($217) - ($218))|0;
         $220 = ($219>>>0)<(198147);
         if (!($220)) {
          ___assert_fail((20985|0),(20722|0),483,(21006|0));
          // unreachable;
         }
         $221 = (($79) + -2)|0;
         $222 = (($86) + -2)|0;
         $223 = (($93) + -2)|0;
         $224 = (($79) + -1)|0;
         $225 = (($in) + ($224)|0);
         $226 = HEAP8[$225>>0]|0;
         $227 = (($86) + -1)|0;
         $228 = (($in) + ($227)|0);
         $229 = HEAP8[$228>>0]|0;
         $230 = (($93) + -1)|0;
         $231 = (($in) + ($230)|0);
         $232 = HEAP8[$231>>0]|0;
         $233 = (($in_size) + -1)|0;
         $234 = (($in) + ($233)|0);
         $235 = HEAP8[$234>>0]|0;
         $236 = (($in_size) + -2)|0;
         $237 = $79 << 2;
         $238 = (($237) + -2)|0;
         $i3$0$i$i = $236;$l3$0$i$i = $235;$ptr$i$i$0 = $67;$rans3$i$i$0 = 8388608;
         while(1) {
          $239 = ($i3$0$i$i|0)>($238|0);
          if (!($239)) {
           $i0$0$i$i = $221;$i1$0$i$i = $222;$i2$0$i$i = $223;$i3$1$i$i = $i3$0$i$i;$l0$0$i$i = $226;$l1$0$i$i = $229;$l2$0$i$i = $232;$l3$1$i$i = $l3$0$i$i;$ptr$i$i$2 = $ptr$i$i$0;$rans0$i$i$0 = 8388608;$rans1$i$i$0 = 8388608;$rans2$i$i$0 = 8388608;$rans3$i$i$1 = $rans3$i$i$0;
           break;
          }
          $240 = (($in) + ($i3$0$i$i)|0);
          $241 = HEAP8[$240>>0]|0;
          $242 = $l3$0$i$i&255;
          $243 = $241&255;
          $244 = ((($43) + ($243<<12)|0) + ($242<<4)|0);
          $245 = HEAP32[$244>>2]|0;
          $246 = ($245|0)==(0);
          if ($246) {
           label = 79;
           break;
          }
          $247 = ($rans3$i$i$0>>>0)<($245>>>0);
          if ($247) {
           $ptr$i$i$1 = $ptr$i$i$0;$x$1$i$i$i = $rans3$i$i$0;
          } else {
           $ptr$0$i$i$i = $ptr$i$i$0;$x$0$i$i$i = $rans3$i$i$0;
           while(1) {
            $248 = $x$0$i$i$i&255;
            $249 = ((($ptr$0$i$i$i)) + -1|0);
            HEAP8[$249>>0] = $248;
            $250 = $x$0$i$i$i >>> 8;
            $251 = ($250>>>0)<($245>>>0);
            if ($251) {
             $ptr$i$i$1 = $249;$x$1$i$i$i = $250;
             break;
            } else {
             $ptr$0$i$i$i = $249;$x$0$i$i$i = $250;
            }
           }
          }
          $252 = ((((($43) + ($243<<12)|0) + ($242<<4)|0)) + 4|0);
          $253 = HEAP32[$252>>2]|0;
          $254 = (___muldi3(($x$1$i$i$i|0),0,($253|0),0)|0);
          $255 = tempRet0;
          $256 = ((((($43) + ($243<<12)|0) + ($242<<4)|0)) + 14|0);
          $257 = HEAP16[$256>>1]|0;
          $258 = $257&65535;
          $259 = (_bitshift64Lshr(($254|0),($255|0),($258|0))|0);
          $260 = tempRet0;
          $261 = ((((($43) + ($243<<12)|0) + ($242<<4)|0)) + 8|0);
          $262 = HEAP32[$261>>2]|0;
          $263 = (($x$1$i$i$i) + ($262))|0;
          $264 = ((((($43) + ($243<<12)|0) + ($242<<4)|0)) + 12|0);
          $265 = HEAP16[$264>>1]|0;
          $266 = $265&65535;
          $267 = Math_imul($259, $266)|0;
          $268 = (($263) + ($267))|0;
          $269 = (($i3$0$i$i) + -1)|0;
          $i3$0$i$i = $269;$l3$0$i$i = $241;$ptr$i$i$0 = $ptr$i$i$1;$rans3$i$i$0 = $268;
         }
         if ((label|0) == 79) {
          ___assert_fail((20858|0),(20758|0),271,(20874|0));
          // unreachable;
         }
         while(1) {
          $270 = ($i0$0$i$i|0)>(-1);
          $271 = $l3$1$i$i&255;
          if (!($270)) {
           label = 101;
           break;
          }
          $272 = (($in) + ($i3$1$i$i)|0);
          $273 = HEAP8[$272>>0]|0;
          $274 = $273&255;
          $275 = $l2$0$i$i&255;
          $276 = (($in) + ($i2$0$i$i)|0);
          $277 = HEAP8[$276>>0]|0;
          $278 = $277&255;
          $279 = $l1$0$i$i&255;
          $280 = (($in) + ($i1$0$i$i)|0);
          $281 = HEAP8[$280>>0]|0;
          $282 = $281&255;
          $283 = $l0$0$i$i&255;
          $284 = (($in) + ($i0$0$i$i)|0);
          $285 = HEAP8[$284>>0]|0;
          $286 = $285&255;
          $287 = ((($43) + ($274<<12)|0) + ($271<<4)|0);
          $288 = HEAP32[$287>>2]|0;
          $289 = ($288|0)==(0);
          if ($289) {
           label = 85;
           break;
          }
          $290 = ($rans3$i$i$1>>>0)<($288>>>0);
          if ($290) {
           $ptr$i$i$3 = $ptr$i$i$2;$x$1$i4$i$i = $rans3$i$i$1;
          } else {
           $ptr$0$i3$i$i = $ptr$i$i$2;$x$0$i2$i$i = $rans3$i$i$1;
           while(1) {
            $291 = $x$0$i2$i$i&255;
            $292 = ((($ptr$0$i3$i$i)) + -1|0);
            HEAP8[$292>>0] = $291;
            $293 = $x$0$i2$i$i >>> 8;
            $294 = ($293>>>0)<($288>>>0);
            if ($294) {
             $ptr$i$i$3 = $292;$x$1$i4$i$i = $293;
             break;
            } else {
             $ptr$0$i3$i$i = $292;$x$0$i2$i$i = $293;
            }
           }
          }
          $295 = ((((($43) + ($274<<12)|0) + ($271<<4)|0)) + 4|0);
          $296 = HEAP32[$295>>2]|0;
          $297 = (___muldi3(($x$1$i4$i$i|0),0,($296|0),0)|0);
          $298 = tempRet0;
          $299 = ((((($43) + ($274<<12)|0) + ($271<<4)|0)) + 14|0);
          $300 = HEAP16[$299>>1]|0;
          $301 = $300&65535;
          $302 = (_bitshift64Lshr(($297|0),($298|0),($301|0))|0);
          $303 = tempRet0;
          $304 = ((((($43) + ($274<<12)|0) + ($271<<4)|0)) + 8|0);
          $305 = HEAP32[$304>>2]|0;
          $306 = (($x$1$i4$i$i) + ($305))|0;
          $307 = ((((($43) + ($274<<12)|0) + ($271<<4)|0)) + 12|0);
          $308 = HEAP16[$307>>1]|0;
          $309 = $308&65535;
          $310 = Math_imul($302, $309)|0;
          $311 = (($306) + ($310))|0;
          $312 = ((($43) + ($278<<12)|0) + ($275<<4)|0);
          $313 = HEAP32[$312>>2]|0;
          $314 = ($313|0)==(0);
          if ($314) {
           label = 89;
           break;
          }
          $315 = ($rans2$i$i$0>>>0)<($313>>>0);
          if ($315) {
           $ptr$i$i$4 = $ptr$i$i$3;$x$1$i8$i$i = $rans2$i$i$0;
          } else {
           $ptr$0$i7$i$i = $ptr$i$i$3;$x$0$i6$i$i = $rans2$i$i$0;
           while(1) {
            $316 = $x$0$i6$i$i&255;
            $317 = ((($ptr$0$i7$i$i)) + -1|0);
            HEAP8[$317>>0] = $316;
            $318 = $x$0$i6$i$i >>> 8;
            $319 = ($318>>>0)<($313>>>0);
            if ($319) {
             $ptr$i$i$4 = $317;$x$1$i8$i$i = $318;
             break;
            } else {
             $ptr$0$i7$i$i = $317;$x$0$i6$i$i = $318;
            }
           }
          }
          $320 = ((((($43) + ($278<<12)|0) + ($275<<4)|0)) + 4|0);
          $321 = HEAP32[$320>>2]|0;
          $322 = (___muldi3(($x$1$i8$i$i|0),0,($321|0),0)|0);
          $323 = tempRet0;
          $324 = ((((($43) + ($278<<12)|0) + ($275<<4)|0)) + 14|0);
          $325 = HEAP16[$324>>1]|0;
          $326 = $325&65535;
          $327 = (_bitshift64Lshr(($322|0),($323|0),($326|0))|0);
          $328 = tempRet0;
          $329 = ((((($43) + ($278<<12)|0) + ($275<<4)|0)) + 8|0);
          $330 = HEAP32[$329>>2]|0;
          $331 = (($x$1$i8$i$i) + ($330))|0;
          $332 = ((((($43) + ($278<<12)|0) + ($275<<4)|0)) + 12|0);
          $333 = HEAP16[$332>>1]|0;
          $334 = $333&65535;
          $335 = Math_imul($327, $334)|0;
          $336 = (($331) + ($335))|0;
          $337 = ((($43) + ($282<<12)|0) + ($279<<4)|0);
          $338 = HEAP32[$337>>2]|0;
          $339 = ($338|0)==(0);
          if ($339) {
           label = 93;
           break;
          }
          $340 = ($rans1$i$i$0>>>0)<($338>>>0);
          if ($340) {
           $ptr$i$i$5 = $ptr$i$i$4;$x$1$i12$i$i = $rans1$i$i$0;
          } else {
           $ptr$0$i11$i$i = $ptr$i$i$4;$x$0$i10$i$i = $rans1$i$i$0;
           while(1) {
            $341 = $x$0$i10$i$i&255;
            $342 = ((($ptr$0$i11$i$i)) + -1|0);
            HEAP8[$342>>0] = $341;
            $343 = $x$0$i10$i$i >>> 8;
            $344 = ($343>>>0)<($338>>>0);
            if ($344) {
             $ptr$i$i$5 = $342;$x$1$i12$i$i = $343;
             break;
            } else {
             $ptr$0$i11$i$i = $342;$x$0$i10$i$i = $343;
            }
           }
          }
          $345 = ((((($43) + ($282<<12)|0) + ($279<<4)|0)) + 4|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = (___muldi3(($x$1$i12$i$i|0),0,($346|0),0)|0);
          $348 = tempRet0;
          $349 = ((((($43) + ($282<<12)|0) + ($279<<4)|0)) + 14|0);
          $350 = HEAP16[$349>>1]|0;
          $351 = $350&65535;
          $352 = (_bitshift64Lshr(($347|0),($348|0),($351|0))|0);
          $353 = tempRet0;
          $354 = ((((($43) + ($282<<12)|0) + ($279<<4)|0)) + 8|0);
          $355 = HEAP32[$354>>2]|0;
          $356 = (($x$1$i12$i$i) + ($355))|0;
          $357 = ((((($43) + ($282<<12)|0) + ($279<<4)|0)) + 12|0);
          $358 = HEAP16[$357>>1]|0;
          $359 = $358&65535;
          $360 = Math_imul($352, $359)|0;
          $361 = (($356) + ($360))|0;
          $362 = ((($43) + ($286<<12)|0) + ($283<<4)|0);
          $363 = HEAP32[$362>>2]|0;
          $364 = ($363|0)==(0);
          if ($364) {
           label = 97;
           break;
          }
          $365 = ($rans0$i$i$0>>>0)<($363>>>0);
          if ($365) {
           $ptr$i$i$6 = $ptr$i$i$5;$x$1$i16$i$i = $rans0$i$i$0;
          } else {
           $ptr$0$i15$i$i = $ptr$i$i$5;$x$0$i14$i$i = $rans0$i$i$0;
           while(1) {
            $366 = $x$0$i14$i$i&255;
            $367 = ((($ptr$0$i15$i$i)) + -1|0);
            HEAP8[$367>>0] = $366;
            $368 = $x$0$i14$i$i >>> 8;
            $369 = ($368>>>0)<($363>>>0);
            if ($369) {
             $ptr$i$i$6 = $367;$x$1$i16$i$i = $368;
             break;
            } else {
             $ptr$0$i15$i$i = $367;$x$0$i14$i$i = $368;
            }
           }
          }
          $370 = ((((($43) + ($286<<12)|0) + ($283<<4)|0)) + 4|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = (___muldi3(($x$1$i16$i$i|0),0,($371|0),0)|0);
          $373 = tempRet0;
          $374 = ((((($43) + ($286<<12)|0) + ($283<<4)|0)) + 14|0);
          $375 = HEAP16[$374>>1]|0;
          $376 = $375&65535;
          $377 = (_bitshift64Lshr(($372|0),($373|0),($376|0))|0);
          $378 = tempRet0;
          $379 = ((((($43) + ($286<<12)|0) + ($283<<4)|0)) + 8|0);
          $380 = HEAP32[$379>>2]|0;
          $381 = (($x$1$i16$i$i) + ($380))|0;
          $382 = ((((($43) + ($286<<12)|0) + ($283<<4)|0)) + 12|0);
          $383 = HEAP16[$382>>1]|0;
          $384 = $383&65535;
          $385 = Math_imul($377, $384)|0;
          $386 = (($381) + ($385))|0;
          $387 = (($i0$0$i$i) + -1)|0;
          $388 = (($i1$0$i$i) + -1)|0;
          $389 = (($i2$0$i$i) + -1)|0;
          $390 = (($i3$1$i$i) + -1)|0;
          $i0$0$i$i = $387;$i1$0$i$i = $388;$i2$0$i$i = $389;$i3$1$i$i = $390;$l0$0$i$i = $285;$l1$0$i$i = $281;$l2$0$i$i = $277;$l3$1$i$i = $273;$ptr$i$i$2 = $ptr$i$i$6;$rans0$i$i$0 = $386;$rans1$i$i$0 = $361;$rans2$i$i$0 = $336;$rans3$i$i$1 = $311;
         }
         if ((label|0) == 85) {
          ___assert_fail((20858|0),(20758|0),271,(20874|0));
          // unreachable;
         }
         else if ((label|0) == 89) {
          ___assert_fail((20858|0),(20758|0),271,(20874|0));
          // unreachable;
         }
         else if ((label|0) == 93) {
          ___assert_fail((20858|0),(20758|0),271,(20874|0));
          // unreachable;
         }
         else if ((label|0) == 97) {
          ___assert_fail((20858|0),(20758|0),271,(20874|0));
          // unreachable;
         }
         else if ((label|0) == 101) {
          $391 = (($43) + ($271<<4)|0);
          $392 = HEAP32[$391>>2]|0;
          $393 = ($392|0)==(0);
          if ($393) {
           ___assert_fail((20858|0),(20758|0),271,(20874|0));
           // unreachable;
          }
          $394 = ($rans3$i$i$1>>>0)<($392>>>0);
          if ($394) {
           $ptr$i$i$7 = $ptr$i$i$2;$x$1$i20$i$i = $rans3$i$i$1;
          } else {
           $ptr$0$i19$i$i = $ptr$i$i$2;$x$0$i18$i$i = $rans3$i$i$1;
           while(1) {
            $395 = $x$0$i18$i$i&255;
            $396 = ((($ptr$0$i19$i$i)) + -1|0);
            HEAP8[$396>>0] = $395;
            $397 = $x$0$i18$i$i >>> 8;
            $398 = ($397>>>0)<($392>>>0);
            if ($398) {
             $ptr$i$i$7 = $396;$x$1$i20$i$i = $397;
             break;
            } else {
             $ptr$0$i19$i$i = $396;$x$0$i18$i$i = $397;
            }
           }
          }
          $399 = (((($43) + ($271<<4)|0)) + 4|0);
          $400 = HEAP32[$399>>2]|0;
          $401 = (___muldi3(($x$1$i20$i$i|0),0,($400|0),0)|0);
          $402 = tempRet0;
          $403 = (((($43) + ($271<<4)|0)) + 14|0);
          $404 = HEAP16[$403>>1]|0;
          $405 = $404&65535;
          $406 = (_bitshift64Lshr(($401|0),($402|0),($405|0))|0);
          $407 = tempRet0;
          $408 = (((($43) + ($271<<4)|0)) + 8|0);
          $409 = HEAP32[$408>>2]|0;
          $410 = (($x$1$i20$i$i) + ($409))|0;
          $411 = (((($43) + ($271<<4)|0)) + 12|0);
          $412 = HEAP16[$411>>1]|0;
          $413 = $412&65535;
          $414 = Math_imul($406, $413)|0;
          $415 = (($410) + ($414))|0;
          $416 = $l2$0$i$i&255;
          $417 = (($43) + ($416<<4)|0);
          $418 = HEAP32[$417>>2]|0;
          $419 = ($418|0)==(0);
          if ($419) {
           ___assert_fail((20858|0),(20758|0),271,(20874|0));
           // unreachable;
          }
          $420 = ($rans2$i$i$0>>>0)<($418>>>0);
          if ($420) {
           $ptr$i$i$8 = $ptr$i$i$7;$x$1$i24$i$i = $rans2$i$i$0;
          } else {
           $ptr$0$i23$i$i = $ptr$i$i$7;$x$0$i22$i$i = $rans2$i$i$0;
           while(1) {
            $421 = $x$0$i22$i$i&255;
            $422 = ((($ptr$0$i23$i$i)) + -1|0);
            HEAP8[$422>>0] = $421;
            $423 = $x$0$i22$i$i >>> 8;
            $424 = ($423>>>0)<($418>>>0);
            if ($424) {
             $ptr$i$i$8 = $422;$x$1$i24$i$i = $423;
             break;
            } else {
             $ptr$0$i23$i$i = $422;$x$0$i22$i$i = $423;
            }
           }
          }
          $425 = (((($43) + ($416<<4)|0)) + 4|0);
          $426 = HEAP32[$425>>2]|0;
          $427 = (___muldi3(($x$1$i24$i$i|0),0,($426|0),0)|0);
          $428 = tempRet0;
          $429 = (((($43) + ($416<<4)|0)) + 14|0);
          $430 = HEAP16[$429>>1]|0;
          $431 = $430&65535;
          $432 = (_bitshift64Lshr(($427|0),($428|0),($431|0))|0);
          $433 = tempRet0;
          $434 = (((($43) + ($416<<4)|0)) + 8|0);
          $435 = HEAP32[$434>>2]|0;
          $436 = (($x$1$i24$i$i) + ($435))|0;
          $437 = (((($43) + ($416<<4)|0)) + 12|0);
          $438 = HEAP16[$437>>1]|0;
          $439 = $438&65535;
          $440 = Math_imul($432, $439)|0;
          $441 = (($436) + ($440))|0;
          $442 = $l1$0$i$i&255;
          $443 = (($43) + ($442<<4)|0);
          $444 = HEAP32[$443>>2]|0;
          $445 = ($444|0)==(0);
          if ($445) {
           ___assert_fail((20858|0),(20758|0),271,(20874|0));
           // unreachable;
          }
          $446 = ($rans1$i$i$0>>>0)<($444>>>0);
          if ($446) {
           $ptr$i$i$9 = $ptr$i$i$8;$x$1$i28$i$i = $rans1$i$i$0;
          } else {
           $ptr$0$i27$i$i = $ptr$i$i$8;$x$0$i26$i$i = $rans1$i$i$0;
           while(1) {
            $447 = $x$0$i26$i$i&255;
            $448 = ((($ptr$0$i27$i$i)) + -1|0);
            HEAP8[$448>>0] = $447;
            $449 = $x$0$i26$i$i >>> 8;
            $450 = ($449>>>0)<($444>>>0);
            if ($450) {
             $ptr$i$i$9 = $448;$x$1$i28$i$i = $449;
             break;
            } else {
             $ptr$0$i27$i$i = $448;$x$0$i26$i$i = $449;
            }
           }
          }
          $451 = (((($43) + ($442<<4)|0)) + 4|0);
          $452 = HEAP32[$451>>2]|0;
          $453 = (___muldi3(($x$1$i28$i$i|0),0,($452|0),0)|0);
          $454 = tempRet0;
          $455 = (((($43) + ($442<<4)|0)) + 14|0);
          $456 = HEAP16[$455>>1]|0;
          $457 = $456&65535;
          $458 = (_bitshift64Lshr(($453|0),($454|0),($457|0))|0);
          $459 = tempRet0;
          $460 = (((($43) + ($442<<4)|0)) + 8|0);
          $461 = HEAP32[$460>>2]|0;
          $462 = (($x$1$i28$i$i) + ($461))|0;
          $463 = (((($43) + ($442<<4)|0)) + 12|0);
          $464 = HEAP16[$463>>1]|0;
          $465 = $464&65535;
          $466 = Math_imul($458, $465)|0;
          $467 = (($462) + ($466))|0;
          $468 = $l0$0$i$i&255;
          $469 = (($43) + ($468<<4)|0);
          $470 = HEAP32[$469>>2]|0;
          $471 = ($470|0)==(0);
          if ($471) {
           ___assert_fail((20858|0),(20758|0),271,(20874|0));
           // unreachable;
          }
          $472 = ($rans0$i$i$0>>>0)<($470>>>0);
          if ($472) {
           $ptr$i$i$10 = $ptr$i$i$9;$x$1$i32$i$i = $rans0$i$i$0;
          } else {
           $ptr$0$i31$i$i = $ptr$i$i$9;$x$0$i30$i$i = $rans0$i$i$0;
           while(1) {
            $473 = $x$0$i30$i$i&255;
            $474 = ((($ptr$0$i31$i$i)) + -1|0);
            HEAP8[$474>>0] = $473;
            $475 = $x$0$i30$i$i >>> 8;
            $476 = ($475>>>0)<($470>>>0);
            if ($476) {
             $ptr$i$i$10 = $474;$x$1$i32$i$i = $475;
             break;
            } else {
             $ptr$0$i31$i$i = $474;$x$0$i30$i$i = $475;
            }
           }
          }
          $477 = (((($43) + ($468<<4)|0)) + 4|0);
          $478 = HEAP32[$477>>2]|0;
          $479 = (___muldi3(($x$1$i32$i$i|0),0,($478|0),0)|0);
          $480 = tempRet0;
          $481 = (((($43) + ($468<<4)|0)) + 14|0);
          $482 = HEAP16[$481>>1]|0;
          $483 = $482&65535;
          $484 = (_bitshift64Lshr(($479|0),($480|0),($483|0))|0);
          $485 = tempRet0;
          $486 = (((($43) + ($468<<4)|0)) + 8|0);
          $487 = HEAP32[$486>>2]|0;
          $488 = (($x$1$i32$i$i) + ($487))|0;
          $489 = (((($43) + ($468<<4)|0)) + 12|0);
          $490 = HEAP16[$489>>1]|0;
          $491 = $490&65535;
          $492 = Math_imul($484, $491)|0;
          $493 = (($488) + ($492))|0;
          $494 = ((($ptr$i$i$10)) + -4|0);
          $495 = $415&255;
          HEAP8[$494>>0] = $495;
          $496 = $415 >>> 8;
          $497 = $496&255;
          $498 = ((($ptr$i$i$10)) + -3|0);
          HEAP8[$498>>0] = $497;
          $499 = $415 >>> 16;
          $500 = $499&255;
          $501 = ((($ptr$i$i$10)) + -2|0);
          HEAP8[$501>>0] = $500;
          $502 = $415 >>> 24;
          $503 = $502&255;
          $504 = ((($ptr$i$i$10)) + -1|0);
          HEAP8[$504>>0] = $503;
          $505 = ((($ptr$i$i$10)) + -8|0);
          $506 = $441&255;
          HEAP8[$505>>0] = $506;
          $507 = $441 >>> 8;
          $508 = $507&255;
          $509 = ((($ptr$i$i$10)) + -7|0);
          HEAP8[$509>>0] = $508;
          $510 = $441 >>> 16;
          $511 = $510&255;
          $512 = ((($ptr$i$i$10)) + -6|0);
          HEAP8[$512>>0] = $511;
          $513 = $441 >>> 24;
          $514 = $513&255;
          $515 = ((($ptr$i$i$10)) + -5|0);
          HEAP8[$515>>0] = $514;
          $516 = ((($ptr$i$i$10)) + -12|0);
          $517 = $467&255;
          HEAP8[$516>>0] = $517;
          $518 = $467 >>> 8;
          $519 = $518&255;
          $520 = ((($ptr$i$i$10)) + -11|0);
          HEAP8[$520>>0] = $519;
          $521 = $467 >>> 16;
          $522 = $521&255;
          $523 = ((($ptr$i$i$10)) + -10|0);
          HEAP8[$523>>0] = $522;
          $524 = $467 >>> 24;
          $525 = $524&255;
          $526 = ((($ptr$i$i$10)) + -9|0);
          HEAP8[$526>>0] = $525;
          $527 = ((($ptr$i$i$10)) + -16|0);
          $528 = $493&255;
          HEAP8[$527>>0] = $528;
          $529 = $493 >>> 8;
          $530 = $529&255;
          $531 = ((($ptr$i$i$10)) + -15|0);
          HEAP8[$531>>0] = $530;
          $532 = $493 >>> 16;
          $533 = $532&255;
          $534 = ((($ptr$i$i$10)) + -14|0);
          HEAP8[$534>>0] = $533;
          $535 = $493 >>> 24;
          $536 = $535&255;
          $537 = ((($ptr$i$i$10)) + -13|0);
          HEAP8[$537>>0] = $536;
          $$cast = $527;
          $538 = $67;
          $539 = (($538) - ($$cast))|0;
          $540 = (($539) + ($219))|0;
          HEAP32[$out_size_i1>>2] = $540;
          $541 = ((($62)) + 1|0);
          HEAP8[$62>>0] = 1;
          $542 = (($540) + 247)|0;
          $543 = $542&255;
          $544 = ((($62)) + 2|0);
          HEAP8[$541>>0] = $543;
          $545 = (($540) + 65527)|0;
          $546 = $545 >>> 8;
          $547 = $546&255;
          $548 = ((($62)) + 3|0);
          HEAP8[$544>>0] = $547;
          $549 = (($540) + 16777207)|0;
          $550 = $549 >>> 16;
          $551 = $550&255;
          $552 = ((($62)) + 4|0);
          HEAP8[$548>>0] = $551;
          $553 = (($540) + -9)|0;
          $554 = $553 >>> 24;
          $555 = $554&255;
          $556 = ((($62)) + 5|0);
          HEAP8[$552>>0] = $555;
          $557 = $in_size&255;
          $558 = ((($62)) + 6|0);
          HEAP8[$556>>0] = $557;
          $559 = $in_size >>> 8;
          $560 = $559&255;
          $561 = ((($62)) + 7|0);
          HEAP8[$558>>0] = $560;
          $562 = $in_size >>> 16;
          $563 = $562&255;
          $564 = ((($62)) + 8|0);
          HEAP8[$561>>0] = $563;
          $565 = $in_size >>> 24;
          $566 = $565&255;
          HEAP8[$564>>0] = $566;
          _memmove(($216|0),($527|0),($539|0))|0;
          $F$0$i$i = $45;$T$0$i$i = $51;$out_buf$0$i$i = $62;
          break;
         }
        }
       }
      }
     }
    }
   } while(0);
   _free($43);
   _free($F$0$i$i);
   _free($T$0$i$i);
   $$0$i$i = $out_buf$0$i$i;
  }
  $567 = HEAP32[$out_size_i1>>2]|0;
  HEAP32[$out_size>>2] = $567;
  $$0 = $$0$i$i;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 4:  {
  $39 = (_rans_compress_O0($in,$in_size,$out_size_i)|0);
  $40 = HEAP32[$out_size_i>>2]|0;
  HEAP32[$out_size>>2] = $40;
  $$0 = $39;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function _refs_free($r) {
 $r = $r|0;
 var $$pre = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$i = 0, $k$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($r)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[$0>>2] = $2;
 $3 = ($1|0)>(1);
 if ($3) {
  return;
 }
 $4 = HEAP32[$r>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 4|0);
  $7 = ((($4)) + 8|0);
  $i$0$i = 0;
  while(1) {
   $8 = HEAP32[$6>>2]|0;
   $9 = ($i$0$i>>>0)<($8>>>0);
   if (!($9)) {
    break;
   }
   $10 = HEAP32[$7>>2]|0;
   $11 = (($10) + ($i$0$i<<3)|0);
   $12 = HEAP32[$11>>2]|0;
   _free($12);
   $13 = (($i$0$i) + 1)|0;
   $i$0$i = $13;
  }
  $14 = HEAP32[$7>>2]|0;
  _free($14);
  _free($4);
 }
 $15 = ((($r)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  $19 = $16;$k$0 = 0;
  while(1) {
   $18 = HEAP32[$19>>2]|0;
   $20 = ($k$0|0)==($18|0);
   if ($20) {
    break;
   }
   $21 = $k$0 >>> 4;
   $22 = ((($19)) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + ($21<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $k$0 << 1;
   $27 = $26 & 30;
   $28 = 3 << $27;
   $29 = $25 & $28;
   $30 = ($29|0)==(0);
   if ($30) {
    $31 = ((($19)) + 24|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($32) + ($k$0<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(0|0);
    if ($35) {
     $$pre = $19;
    } else {
     _ref_entry_free_seq($34);
     _free($34);
     $$pre$pre = HEAP32[$15>>2]|0;
     $$pre = $$pre$pre;
    }
   } else {
    $$pre = $19;
   }
   $36 = (($k$0) + 1)|0;
   $19 = $$pre;$k$0 = $36;
  }
  $37 = ($19|0)==(0|0);
  if (!($37)) {
   $38 = ((($19)) + 20|0);
   $39 = HEAP32[$38>>2]|0;
   _free($39);
   $40 = ((($19)) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   _free($41);
   $42 = ((($19)) + 24|0);
   $43 = HEAP32[$42>>2]|0;
   _free($43);
   _free($19);
  }
 }
 $44 = ((($r)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0|0);
 if (!($46)) {
  _free($45);
 }
 $47 = ((($r)) + 20|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)==(0|0);
 if (!($49)) {
  (_bgzf_close($48)|0);
 }
 $50 = ((($r)) + 28|0);
 (_pthread_mutex_destroy(($50|0))|0);
 _free($r);
 return;
}
function _ref_entry_free_seq($e) {
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($e)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _mfflush($1);
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   (_fclose($3)|0);
  }
  $5 = ((($1)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   _free($6);
  }
  _free($1);
 }
 $8 = ((($e)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = HEAP32[$0>>2]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   _free($9);
  }
 }
 HEAP32[$8>>2] = 0;
 HEAP32[$0>>2] = 0;
 return;
}
function _kh_get_refs($h,$key) {
 $h = $h|0;
 $key = $key|0;
 var $$0 = 0, $$0$i = 0, $$014$i = 0, $$05$i = 0, $$lcssa$i = 0, $$lcssa2$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h$0$i = 0, $h$1$i = 0, $i$0 = 0, $i$0$ = 0, $or$cond$i = 0, $or$cond3$i = 0, $s$pn$i = 0, $step$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$h>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (($0) + -1)|0;
 $3 = HEAP8[$key>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = ($3<<24>>24)==(0);
 L4: do {
  if ($5) {
   $h$1$i = $4;
  } else {
   $h$0$i = $4;$s$pn$i = $key;
   while(1) {
    $$0$i = ((($s$pn$i)) + 1|0);
    $6 = HEAP8[$$0$i>>0]|0;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $h$1$i = $h$0$i;
     break L4;
    }
    $8 = ($h$0$i*31)|0;
    $9 = $6 << 24 >> 24;
    $10 = (($8) + ($9))|0;
    $h$0$i = $10;$s$pn$i = $$0$i;
   }
  }
 } while(0);
 $11 = $h$1$i & $2;
 $12 = ((($h)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($h)) + 20|0);
 $i$0 = $11;$step$0 = 0;
 while(1) {
  $15 = $i$0 >>> 4;
  $16 = (($13) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $i$0 << 1;
  $19 = $18 & 30;
  $20 = 2 << $19;
  $21 = $17 & $20;
  $22 = ($21|0)==(0);
  if (!($22)) {
   label = 12;
   break;
  }
  $23 = 1 << $19;
  $24 = $17 & $23;
  $25 = ($24|0)==(0);
  if ($25) {
   $26 = HEAP32[$14>>2]|0;
   $27 = (($26) + ($i$0<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = HEAP8[$28>>0]|0;
   $30 = ($29<<24>>24)!=($3<<24>>24);
   $31 = ($29<<24>>24)==(0);
   $or$cond3$i = $31 | $30;
   if ($or$cond3$i) {
    $$lcssa$i = $29;$$lcssa2$i = $3;
   } else {
    $$014$i = $28;$$05$i = $key;
    while(1) {
     $32 = ((($$014$i)) + 1|0);
     $33 = ((($$05$i)) + 1|0);
     $34 = HEAP8[$32>>0]|0;
     $35 = HEAP8[$33>>0]|0;
     $36 = ($34<<24>>24)!=($35<<24>>24);
     $37 = ($34<<24>>24)==(0);
     $or$cond$i = $37 | $36;
     if ($or$cond$i) {
      $$lcssa$i = $34;$$lcssa2$i = $35;
      break;
     } else {
      $$014$i = $32;$$05$i = $33;
     }
    }
   }
   $38 = ($$lcssa$i<<24>>24)==($$lcssa2$i<<24>>24);
   if ($38) {
    label = 12;
    break;
   }
  }
  $39 = (($step$0) + 1)|0;
  $40 = (($i$0) + ($39))|0;
  $41 = $40 & $2;
  $42 = ($41|0)==($11|0);
  if ($42) {
   $$0 = $0;
   label = 13;
   break;
  } else {
   $i$0 = $41;$step$0 = $39;
  }
 }
 if ((label|0) == 12) {
  $43 = 3 << $19;
  $44 = $17 & $43;
  $45 = ($44|0)==(0);
  $i$0$ = $45 ? $i$0 : $0;
  return ($i$0$|0);
 }
 else if ((label|0) == 13) {
  return ($$0|0);
 }
 return (0)|0;
}
function _kh_resize_refs($h,$new_n_buckets) {
 $h = $h|0;
 $new_n_buckets = $new_n_buckets|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$pn = 0, $$pre$phi5Z2D = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $h$0$i = 0;
 var $i$0 = 0, $j$1 = 0, $key$0 = 0, $phitmp = 0, $phitmp10 = 0, $s$pn$i = 0, $step$0 = 0, $val$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($new_n_buckets) + -1)|0;
 $1 = $0 >>> 1;
 $2 = $0 | $1;
 $3 = $2 >>> 2;
 $4 = $2 | $3;
 $5 = $4 >>> 4;
 $6 = $4 | $5;
 $7 = $6 >>> 8;
 $8 = $6 | $7;
 $9 = $8 >>> 16;
 $10 = $8 | $9;
 $11 = (($10) + 1)|0;
 $12 = ($11>>>0)<(4);
 $$ = $12 ? 4 : $11;
 $13 = ((($h)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($$>>>0));
 $16 = $15 * 0.77000000000000001;
 $17 = $16 + 0.5;
 $18 = (~~(($17))>>>0);
 $19 = ($14>>>0)<($18>>>0);
 if (!($19)) {
  $$0 = 0;
  return ($$0|0);
 }
 $20 = ($$>>>0)<(16);
 $21 = $$ >>> 4;
 $phitmp10 = $21 << 2;
 $22 = $20 ? 4 : $phitmp10;
 $23 = (_malloc($22)|0);
 $24 = ($23|0)==(0|0);
 if ($24) {
  $$0 = -1;
  return ($$0|0);
 }
 $25 = $$ >>> 4;
 $phitmp = $25 << 2;
 $26 = $20 ? 4 : $phitmp;
 _memset(($23|0),-86,($26|0))|0;
 $27 = HEAP32[$h>>2]|0;
 $28 = ($27>>>0)<($$>>>0);
 $29 = ((($h)) + 20|0);
 do {
  if ($28) {
   $30 = HEAP32[$29>>2]|0;
   $31 = $$ << 2;
   $32 = (_realloc($30,$31)|0);
   $33 = ($32|0)==(0|0);
   if ($33) {
    _free($23);
    $$0 = -1;
    return ($$0|0);
   }
   HEAP32[$29>>2] = $32;
   $34 = ((($h)) + 24|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (_realloc($35,$31)|0);
   $37 = ($36|0)==(0|0);
   if (!($37)) {
    HEAP32[$34>>2] = $36;
    $$pre$phi5Z2D = $34;
    break;
   }
   _free($23);
   $$0 = -1;
   return ($$0|0);
  } else {
   $$pre4 = ((($h)) + 24|0);
   $$pre$phi5Z2D = $$pre4;
  }
 } while(0);
 $38 = ((($h)) + 16|0);
 $39 = (($$) + -1)|0;
 $j$1 = 0;
 while(1) {
  $40 = HEAP32[$h>>2]|0;
  $41 = ($j$1|0)==($40|0);
  if ($41) {
   break;
  }
  $42 = $j$1 >>> 4;
  $43 = HEAP32[$38>>2]|0;
  $44 = (($43) + ($42<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $j$1 << 1;
  $47 = $46 & 30;
  $48 = 3 << $47;
  $49 = $45 & $48;
  $50 = ($49|0)==(0);
  if ($50) {
   $51 = HEAP32[$29>>2]|0;
   $52 = (($51) + ($j$1<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = HEAP32[$$pre$phi5Z2D>>2]|0;
   $55 = (($54) + ($j$1<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = 1 << $47;
   $58 = $45 | $57;
   HEAP32[$44>>2] = $58;
   $key$0 = $53;$val$0 = $56;
   while(1) {
    $59 = HEAP8[$key$0>>0]|0;
    $60 = $59 << 24 >> 24;
    $61 = ($59<<24>>24)==(0);
    L26: do {
     if ($61) {
      $$pn = $60;$step$0 = 0;
     } else {
      $h$0$i = $60;$s$pn$i = $key$0;
      while(1) {
       $$0$i = ((($s$pn$i)) + 1|0);
       $62 = HEAP8[$$0$i>>0]|0;
       $63 = ($62<<24>>24)==(0);
       if ($63) {
        $$pn = $h$0$i;$step$0 = 0;
        break L26;
       }
       $64 = ($h$0$i*31)|0;
       $65 = $62 << 24 >> 24;
       $66 = (($64) + ($65))|0;
       $h$0$i = $66;$s$pn$i = $$0$i;
      }
     }
    } while(0);
    while(1) {
     $i$0 = $$pn & $39;
     $67 = $i$0 >>> 4;
     $68 = (($23) + ($67<<2)|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $i$0 << 1;
     $71 = $70 & 30;
     $72 = 2 << $71;
     $73 = $69 & $72;
     $74 = ($73|0)==(0);
     if (!($74)) {
      break;
     }
     $75 = (($step$0) + 1)|0;
     $76 = (($i$0) + ($75))|0;
     $$pn = $76;$step$0 = $75;
    }
    $77 = $72 ^ -1;
    $78 = $69 & $77;
    HEAP32[$68>>2] = $78;
    $79 = HEAP32[$h>>2]|0;
    $80 = ($i$0>>>0)<($79>>>0);
    if (!($80)) {
     break;
    }
    $81 = HEAP32[$38>>2]|0;
    $82 = (($81) + ($67<<2)|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = 3 << $71;
    $85 = $83 & $84;
    $86 = ($85|0)==(0);
    if (!($86)) {
     break;
    }
    $87 = HEAP32[$29>>2]|0;
    $88 = (($87) + ($i$0<<2)|0);
    $89 = HEAP32[$88>>2]|0;
    HEAP32[$88>>2] = $key$0;
    $90 = HEAP32[$$pre$phi5Z2D>>2]|0;
    $91 = (($90) + ($i$0<<2)|0);
    $92 = HEAP32[$91>>2]|0;
    HEAP32[$91>>2] = $val$0;
    $93 = 1 << $71;
    $94 = HEAP32[$38>>2]|0;
    $95 = (($94) + ($67<<2)|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $96 | $93;
    HEAP32[$95>>2] = $97;
    $key$0 = $89;$val$0 = $92;
   }
   $98 = HEAP32[$29>>2]|0;
   $99 = (($98) + ($i$0<<2)|0);
   HEAP32[$99>>2] = $key$0;
   $100 = HEAP32[$$pre$phi5Z2D>>2]|0;
   $101 = (($100) + ($i$0<<2)|0);
   HEAP32[$101>>2] = $val$0;
  }
  $102 = (($j$1) + 1)|0;
  $j$1 = $102;
 }
 $103 = ($j$1>>>0)>($$>>>0);
 if ($103) {
  $104 = HEAP32[$29>>2]|0;
  $105 = $$ << 2;
  $106 = (_realloc($104,$105)|0);
  HEAP32[$29>>2] = $106;
  $107 = HEAP32[$$pre$phi5Z2D>>2]|0;
  $108 = (_realloc($107,$105)|0);
  HEAP32[$$pre$phi5Z2D>>2] = $108;
 }
 $109 = HEAP32[$38>>2]|0;
 _free($109);
 HEAP32[$38>>2] = $23;
 HEAP32[$h>>2] = $$;
 $110 = HEAP32[$13>>2]|0;
 $111 = ((($h)) + 8|0);
 HEAP32[$111>>2] = $110;
 $112 = ((($h)) + 12|0);
 HEAP32[$112>>2] = $18;
 $$0 = 0;
 return ($$0|0);
}
function _expand_cache_path($path,$dir,$fn) {
 $path = $path|0;
 $dir = $dir|0;
 $fn = $fn|0;
 var $$0 = 0, $$0$be = 0, $$0$i = 0, $$0$i10 = 0, $$0$i143 = 0, $$0$i161 = 0, $$0$i60 = 0, $$0$i78 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i169 = 0, $$0$lcssa$i$i17 = 0, $$0$lcssa$i$i38 = 0, $$0$lcssa$i$i90 = 0, $$0$ph = 0, $$0$ph$be = 0, $$01 = 0, $$01$be = 0, $$01$lcssa$i = 0, $$01$lcssa$i$i = 0, $$01$lcssa$i$i170 = 0;
 var $$01$lcssa$i$i18 = 0, $$01$lcssa$i131 = 0, $$01$lcssa$i149 = 0, $$01$lcssa$i48 = 0, $$01$lcssa$i66 = 0, $$01$ph = 0, $$01$ph$be = 0, $$0115$i$i = 0, $$0115$i$i14 = 0, $$0115$i$i166 = 0, $$014$i = 0, $$014$i128 = 0, $$014$i146 = 0, $$014$i45 = 0, $$014$i63 = 0, $$016$i$i = 0, $$016$i$i13 = 0, $$016$i$i165 = 0, $$02$lcssa$i = 0, $$02$ph = 0;
 var $$02$ph$be = 0, $$0211$i = 0, $$031$i$i = 0, $$031$i$i83 = 0, $$04$lcssa$i$i = 0, $$04$lcssa$i$i91 = 0, $$0430$i$i = 0, $$0430$i$i84 = 0, $$06$lcssa$i$i = 0, $$06$lcssa$i$i92 = 0, $$0629$i$i = 0, $$0629$i$i85 = 0, $$1$i = 0, $$1$lcssa$i = 0, $$1$lcssa$i$i = 0, $$1$lcssa$i$i110 = 0, $$1$lcssa$i139 = 0, $$1$lcssa$i157 = 0, $$1$lcssa$i56 = 0, $$1$lcssa$i74 = 0;
 var $$1$ph$i$i = 0, $$1$ph$i$i181 = 0, $$1$ph$i$i29 = 0, $$117$i$i = 0, $$117$i$i102 = 0, $$12$ph$i$i = 0, $$12$ph$i$i180 = 0, $$12$ph$i$i28 = 0, $$128$i$i = 0, $$128$i$i185 = 0, $$128$i$i33 = 0, $$15$ph$i$i = 0, $$15$ph$i$i113 = 0, $$1511$i$i = 0, $$1511$i$i118 = 0, $$17$ph$i$i = 0, $$17$ph$i$i112 = 0, $$1710$i$i = 0, $$1710$i$i119 = 0, $$19$i$i = 0;
 var $$19$i$i184 = 0, $$19$i$i32 = 0, $$2$ph$i$i = 0, $$2$ph$i$i114 = 0, $$212$i$i = 0, $$212$i$i117 = 0, $$28$i$i = 0, $$28$i$i124 = 0, $$3$i$i = 0, $$3$i$i125 = 0, $$4 = 0, $$lcssa$i$i = 0, $$lcssa$i$i89 = 0, $$off = 0, $$pn = 0, $$pn$i = 0, $$pn$i142 = 0, $$pn$i160 = 0, $$pn$i59 = 0, $$pn$i77 = 0;
 var $$pn15$i = 0, $$pn15$i135 = 0, $$pn15$i153 = 0, $$pn15$i52 = 0, $$pn15$i70 = 0, $$pre = 0, $$pre$i = 0, $$pre$i136 = 0, $$pre$i154 = 0, $$pre$i53 = 0, $$pre$i71 = 0, $$pre256 = 0, $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $f$i = 0, $not$ = 0, $or$cond$i$i = 0, $or$cond$i$i87 = 0, $or$cond28$i$i = 0;
 var $or$cond28$i$i80 = 0, $w$0$i = 0, $w$0$i133 = 0, $w$0$i151 = 0, $w$0$i50 = 0, $w$0$i68 = 0, $w$0$lcssa$i = 0, $w$08$i = 0, $wd$0$lcssa$i$i = 0, $wd$0$lcssa$i$i109 = 0, $wd$0$lcssa$i$i178 = 0, $wd$0$lcssa$i$i26 = 0, $wd$0$lcssa$i$i40 = 0, $wd$010$i$i = 0, $wd$010$i$i174 = 0, $wd$010$i$i22 = 0, $wd$018$i$i = 0, $wd$018$i$i101 = 0, $ws$0$lcssa$i$i = 0, $ws$0$lcssa$i$i108 = 0;
 var $ws$0$lcssa$i$i177 = 0, $ws$0$lcssa$i$i25 = 0, $ws$0$lcssa$i$i39 = 0, $ws$011$i$i = 0, $ws$011$i$i173 = 0, $ws$011$i$i21 = 0, $ws$019$i$i = 0, $ws$019$i$i100 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 $0 = ((($f$i)) + 4|0);
 $1 = ((($f$i)) + 44|0);
 $2 = ((($f$i)) + 8|0);
 $3 = ((($f$i)) + 76|0);
 $4 = ((($f$i)) + 104|0);
 $5 = ((($f$i)) + 108|0);
 $6 = ((($f$i)) + 100|0);
 $$0$ph = $path;$$01$ph = $dir;$$02$ph = $fn;
 L1: while(1) {
  $7 = $$02$ph;
  $8 = $7 & 3;
  $9 = ($8|0)==(0);
  $$0 = $$0$ph;$$01 = $$01$ph;
  while(1) {
   $10 = $$01;
   $11 = $10 & 3;
   $12 = ($11|0)==(0);
   L5: do {
    if ($12) {
     $$02$lcssa$i = $$01;
     label = 6;
    } else {
     $$0211$i = $$01;
     while(1) {
      $13 = HEAP8[$$0211$i>>0]|0;
      switch ($13<<24>>24) {
      case 0: case 37:  {
       $$0$i = $$0211$i;$41 = $13;
       break L5;
       break;
      }
      default: {
      }
      }
      $14 = ((($$0211$i)) + 1|0);
      $15 = $14;
      $16 = $15 & 3;
      $17 = ($16|0)==(0);
      if ($17) {
       $$02$lcssa$i = $14;
       label = 6;
       break L5;
      } else {
       $$0211$i = $14;
      }
     }
    }
   } while(0);
   L9: do {
    if ((label|0) == 6) {
     label = 0;
     $18 = HEAP32[$$02$lcssa$i>>2]|0;
     $19 = (($18) + -16843009)|0;
     $20 = $18 & -2139062144;
     $21 = $20 ^ -2139062144;
     $22 = $21 & $19;
     $23 = ($22|0)==(0);
     L11: do {
      if ($23) {
       $25 = $18;$w$08$i = $$02$lcssa$i;
       while(1) {
        $24 = $25 ^ 623191333;
        $26 = (($24) + -16843009)|0;
        $27 = $25 & -2139062144;
        $28 = $27 ^ -2139062144;
        $29 = $28 & $26;
        $30 = ($29|0)==(0);
        if (!($30)) {
         $w$0$lcssa$i = $w$08$i;
         break L11;
        }
        $31 = ((($w$08$i)) + 4|0);
        $32 = HEAP32[$31>>2]|0;
        $33 = (($32) + -16843009)|0;
        $34 = $32 & -2139062144;
        $35 = $34 ^ -2139062144;
        $36 = $35 & $33;
        $37 = ($36|0)==(0);
        if ($37) {
         $25 = $32;$w$08$i = $31;
        } else {
         $w$0$lcssa$i = $31;
         break;
        }
       }
      } else {
       $w$0$lcssa$i = $$02$lcssa$i;
      }
     } while(0);
     $$1$i = $w$0$lcssa$i;
     while(1) {
      $38 = HEAP8[$$1$i>>0]|0;
      $39 = ((($$1$i)) + 1|0);
      switch ($38<<24>>24) {
      case 0: case 37:  {
       $$0$i = $$1$i;$41 = $38;
       break L9;
       break;
      }
      default: {
       $$1$i = $39;
      }
      }
     }
    }
   } while(0);
   $40 = ($$0$i|0)==(0|0);
   $not$ = ($41<<24>>24)!=(37);
   $42 = $40 | $not$;
   if ($42) {
    break L1;
   }
   $43 = $$0$i;
   $44 = (($43) - ($10))|0;
   $45 = $$0;
   $46 = $10 ^ $45;
   $47 = $46 & 3;
   $48 = ($47|0)==(0);
   L20: do {
    if ($48) {
     $49 = ($11|0)!=(0);
     $50 = ($$0$i|0)!=($$01|0);
     $or$cond28$i$i80 = $50 & $49;
     if ($or$cond28$i$i80) {
      $$031$i$i83 = $44;$$0430$i$i84 = $$01;$$0629$i$i85 = $$0;
      while(1) {
       $51 = HEAP8[$$0430$i$i84>>0]|0;
       HEAP8[$$0629$i$i85>>0] = $51;
       $52 = ($51<<24>>24)==(0);
       if ($52) {
        $$28$i$i124 = $$0629$i$i85;$$3$i$i125 = $$031$i$i83;
        break L20;
       }
       $53 = (($$031$i$i83) + -1)|0;
       $54 = ((($$0430$i$i84)) + 1|0);
       $55 = ((($$0629$i$i85)) + 1|0);
       $56 = $54;
       $57 = $56 & 3;
       $58 = ($57|0)!=(0);
       $59 = ($53|0)!=(0);
       $or$cond$i$i87 = $59 & $58;
       if ($or$cond$i$i87) {
        $$031$i$i83 = $53;$$0430$i$i84 = $54;$$0629$i$i85 = $55;
       } else {
        $$0$lcssa$i$i90 = $53;$$04$lcssa$i$i91 = $54;$$06$lcssa$i$i92 = $55;$$lcssa$i$i89 = $59;
        break;
       }
      }
     } else {
      $$0$lcssa$i$i90 = $44;$$04$lcssa$i$i91 = $$01;$$06$lcssa$i$i92 = $$0;$$lcssa$i$i89 = $50;
     }
     if ($$lcssa$i$i89) {
      $$pre = HEAP8[$$04$lcssa$i$i91>>0]|0;
      $60 = ($$pre<<24>>24)==(0);
      if ($60) {
       $$28$i$i124 = $$06$lcssa$i$i92;$$3$i$i125 = $$0$lcssa$i$i90;
      } else {
       $61 = ($$0$lcssa$i$i90>>>0)>(3);
       L29: do {
        if ($61) {
         $$117$i$i102 = $$0$lcssa$i$i90;$wd$018$i$i101 = $$06$lcssa$i$i92;$ws$019$i$i100 = $$04$lcssa$i$i91;
         while(1) {
          $62 = HEAP32[$ws$019$i$i100>>2]|0;
          $63 = (($62) + -16843009)|0;
          $64 = $62 & -2139062144;
          $65 = $64 ^ -2139062144;
          $66 = $65 & $63;
          $67 = ($66|0)==(0);
          if (!($67)) {
           $$1$lcssa$i$i110 = $$117$i$i102;$wd$0$lcssa$i$i109 = $wd$018$i$i101;$ws$0$lcssa$i$i108 = $ws$019$i$i100;
           break L29;
          }
          HEAP32[$wd$018$i$i101>>2] = $62;
          $68 = (($$117$i$i102) + -4)|0;
          $69 = ((($ws$019$i$i100)) + 4|0);
          $70 = ((($wd$018$i$i101)) + 4|0);
          $71 = ($68>>>0)>(3);
          if ($71) {
           $$117$i$i102 = $68;$wd$018$i$i101 = $70;$ws$019$i$i100 = $69;
          } else {
           $$1$lcssa$i$i110 = $68;$wd$0$lcssa$i$i109 = $70;$ws$0$lcssa$i$i108 = $69;
           break;
          }
         }
        } else {
         $$1$lcssa$i$i110 = $$0$lcssa$i$i90;$wd$0$lcssa$i$i109 = $$06$lcssa$i$i92;$ws$0$lcssa$i$i108 = $$04$lcssa$i$i91;
        }
       } while(0);
       $$15$ph$i$i113 = $ws$0$lcssa$i$i108;$$17$ph$i$i112 = $wd$0$lcssa$i$i109;$$2$ph$i$i114 = $$1$lcssa$i$i110;
       label = 22;
      }
     } else {
      $$28$i$i124 = $$06$lcssa$i$i92;$$3$i$i125 = 0;
     }
    } else {
     $$15$ph$i$i113 = $$01;$$17$ph$i$i112 = $$0;$$2$ph$i$i114 = $44;
     label = 22;
    }
   } while(0);
   L34: do {
    if ((label|0) == 22) {
     label = 0;
     $72 = ($$2$ph$i$i114|0)==(0);
     if ($72) {
      $$28$i$i124 = $$17$ph$i$i112;$$3$i$i125 = 0;
     } else {
      $$1511$i$i118 = $$15$ph$i$i113;$$1710$i$i119 = $$17$ph$i$i112;$$212$i$i117 = $$2$ph$i$i114;
      while(1) {
       $73 = HEAP8[$$1511$i$i118>>0]|0;
       HEAP8[$$1710$i$i119>>0] = $73;
       $74 = ($73<<24>>24)==(0);
       if ($74) {
        $$28$i$i124 = $$1710$i$i119;$$3$i$i125 = $$212$i$i117;
        break L34;
       }
       $75 = (($$212$i$i117) + -1)|0;
       $76 = ((($$1511$i$i118)) + 1|0);
       $77 = ((($$1710$i$i119)) + 1|0);
       $78 = ($75|0)==(0);
       if ($78) {
        $$28$i$i124 = $77;$$3$i$i125 = 0;
        break;
       } else {
        $$1511$i$i118 = $76;$$1710$i$i119 = $77;$$212$i$i117 = $75;
       }
      }
     }
    }
   } while(0);
   _memset(($$28$i$i124|0),0,($$3$i$i125|0))|0;
   $79 = (($$0) + ($44)|0);
   $80 = ((($$0$i)) + 1|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = ($81<<24>>24)==(115);
   if ($82) {
    label = 26;
    break;
   }
   $$off = (($81) + -48)<<24>>24;
   $153 = ($$off&255)<(10);
   if ($153) {
    HEAP32[$f$i>>2] = 0;
    HEAP32[$0>>2] = $80;
    HEAP32[$1>>2] = $80;
    $154 = ($80|0)<(0|0);
    $155 = ((($$0$i)) + -2147483648|0);
    $$sink$i = $154 ? (-1) : $155;
    HEAP32[$2>>2] = $$sink$i;
    HEAP32[$3>>2] = -1;
    HEAP32[$4>>2] = 0;
    $156 = $$sink$i;
    $157 = $80;
    $158 = (($156) - ($157))|0;
    HEAP32[$5>>2] = $158;
    HEAP32[$6>>2] = $156;
    $159 = (___intscan($f$i,10,1,-2147483648,0)|0);
    $160 = tempRet0;
    $161 = HEAP32[$5>>2]|0;
    $162 = HEAP32[$0>>2]|0;
    $163 = HEAP32[$2>>2]|0;
    $164 = (($162) + ($161))|0;
    $165 = (($164) - ($163))|0;
    $166 = (($80) + ($165)|0);
    L43: do {
     if ($9) {
      $$01$lcssa$i66 = $$02$ph;
      label = 57;
     } else {
      $$014$i63 = $$02$ph;$339 = $7;
      while(1) {
       $167 = HEAP8[$$014$i63>>0]|0;
       $168 = ($167<<24>>24)==(0);
       if ($168) {
        $$pn$i77 = $339;
        break L43;
       }
       $169 = ((($$014$i63)) + 1|0);
       $170 = $169;
       $171 = $170 & 3;
       $172 = ($171|0)==(0);
       if ($172) {
        $$01$lcssa$i66 = $169;
        label = 57;
        break;
       } else {
        $$014$i63 = $169;$339 = $170;
       }
      }
     }
    } while(0);
    if ((label|0) == 57) {
     label = 0;
     $w$0$i68 = $$01$lcssa$i66;
     while(1) {
      $173 = HEAP32[$w$0$i68>>2]|0;
      $174 = (($173) + -16843009)|0;
      $175 = $173 & -2139062144;
      $176 = $175 ^ -2139062144;
      $177 = $176 & $174;
      $178 = ($177|0)==(0);
      $179 = ((($w$0$i68)) + 4|0);
      if ($178) {
       $w$0$i68 = $179;
      } else {
       break;
      }
     }
     $180 = $173&255;
     $181 = ($180<<24>>24)==(0);
     if ($181) {
      $$1$lcssa$i74 = $w$0$i68;
     } else {
      $$pn15$i70 = $w$0$i68;
      while(1) {
       $182 = ((($$pn15$i70)) + 1|0);
       $$pre$i71 = HEAP8[$182>>0]|0;
       $183 = ($$pre$i71<<24>>24)==(0);
       if ($183) {
        $$1$lcssa$i74 = $182;
        break;
       } else {
        $$pn15$i70 = $182;
       }
      }
     }
     $184 = $$1$lcssa$i74;
     $$pn$i77 = $184;
    }
    $$0$i78 = (($$pn$i77) - ($7))|0;
    $185 = ($159>>>0)<($$0$i78>>>0);
    if ($185) {
     $212 = $159;
    } else {
     L59: do {
      if ($9) {
       $$01$lcssa$i48 = $$02$ph;
       label = 66;
      } else {
       $$014$i45 = $$02$ph;$340 = $7;
       while(1) {
        $186 = HEAP8[$$014$i45>>0]|0;
        $187 = ($186<<24>>24)==(0);
        if ($187) {
         $$pn$i59 = $340;
         break L59;
        }
        $188 = ((($$014$i45)) + 1|0);
        $189 = $188;
        $190 = $189 & 3;
        $191 = ($190|0)==(0);
        if ($191) {
         $$01$lcssa$i48 = $188;
         label = 66;
         break;
        } else {
         $$014$i45 = $188;$340 = $189;
        }
       }
      }
     } while(0);
     if ((label|0) == 66) {
      label = 0;
      $w$0$i50 = $$01$lcssa$i48;
      while(1) {
       $192 = HEAP32[$w$0$i50>>2]|0;
       $193 = (($192) + -16843009)|0;
       $194 = $192 & -2139062144;
       $195 = $194 ^ -2139062144;
       $196 = $195 & $193;
       $197 = ($196|0)==(0);
       $198 = ((($w$0$i50)) + 4|0);
       if ($197) {
        $w$0$i50 = $198;
       } else {
        break;
       }
      }
      $199 = $192&255;
      $200 = ($199<<24>>24)==(0);
      if ($200) {
       $$1$lcssa$i56 = $w$0$i50;
      } else {
       $$pn15$i52 = $w$0$i50;
       while(1) {
        $201 = ((($$pn15$i52)) + 1|0);
        $$pre$i53 = HEAP8[$201>>0]|0;
        $202 = ($$pre$i53<<24>>24)==(0);
        if ($202) {
         $$1$lcssa$i56 = $201;
         break;
        } else {
         $$pn15$i52 = $201;
        }
       }
      }
      $203 = $$1$lcssa$i56;
      $$pn$i59 = $203;
     }
     $$0$i60 = (($$pn$i59) - ($7))|0;
     $212 = $$0$i60;
    }
    $204 = HEAP8[$166>>0]|0;
    $205 = ($204<<24>>24)==(115);
    if ($205) {
     label = 73;
     break;
    }
    $243 = ((($79)) + 1|0);
    HEAP8[$79>>0] = 37;
    $244 = HEAP8[$80>>0]|0;
    HEAP8[$243>>0] = $244;
   } else {
    $245 = ((($79)) + 1|0);
    HEAP8[$79>>0] = 37;
    $246 = HEAP8[$80>>0]|0;
    HEAP8[$245>>0] = $246;
   }
   $247 = ((($79)) + 1|0);
   $$0$be = ((($247)) + 1|0);
   $$01$be = ((($$0$i)) + 2|0);
   $$0 = $$0$be;$$01 = $$01$be;
  }
  if ((label|0) == 26) {
   label = 0;
   $83 = $79;
   $84 = $7 ^ $83;
   $85 = $84 & 3;
   $86 = ($85|0)==(0);
   L100: do {
    if ($86) {
     if ($9) {
      $$0$lcssa$i$i169 = $$02$ph;$$01$lcssa$i$i170 = $79;
     } else {
      $$0115$i$i166 = $79;$$016$i$i165 = $$02$ph;
      while(1) {
       $87 = HEAP8[$$016$i$i165>>0]|0;
       HEAP8[$$0115$i$i166>>0] = $87;
       $88 = ($87<<24>>24)==(0);
       if ($88) {
        break L100;
       }
       $89 = ((($$016$i$i165)) + 1|0);
       $90 = ((($$0115$i$i166)) + 1|0);
       $91 = $89;
       $92 = $91 & 3;
       $93 = ($92|0)==(0);
       if ($93) {
        $$0$lcssa$i$i169 = $89;$$01$lcssa$i$i170 = $90;
        break;
       } else {
        $$0115$i$i166 = $90;$$016$i$i165 = $89;
       }
      }
     }
     $94 = HEAP32[$$0$lcssa$i$i169>>2]|0;
     $95 = (($94) + -16843009)|0;
     $96 = $94 & -2139062144;
     $97 = $96 ^ -2139062144;
     $98 = $97 & $95;
     $99 = ($98|0)==(0);
     if ($99) {
      $102 = $94;$wd$010$i$i174 = $$01$lcssa$i$i170;$ws$011$i$i173 = $$0$lcssa$i$i169;
      while(1) {
       $100 = ((($ws$011$i$i173)) + 4|0);
       $101 = ((($wd$010$i$i174)) + 4|0);
       HEAP32[$wd$010$i$i174>>2] = $102;
       $103 = HEAP32[$100>>2]|0;
       $104 = (($103) + -16843009)|0;
       $105 = $103 & -2139062144;
       $106 = $105 ^ -2139062144;
       $107 = $106 & $104;
       $108 = ($107|0)==(0);
       if ($108) {
        $102 = $103;$wd$010$i$i174 = $101;$ws$011$i$i173 = $100;
       } else {
        $wd$0$lcssa$i$i178 = $101;$ws$0$lcssa$i$i177 = $100;
        break;
       }
      }
     } else {
      $wd$0$lcssa$i$i178 = $$01$lcssa$i$i170;$ws$0$lcssa$i$i177 = $$0$lcssa$i$i169;
     }
     $$1$ph$i$i181 = $ws$0$lcssa$i$i177;$$12$ph$i$i180 = $wd$0$lcssa$i$i178;
     label = 33;
    } else {
     $$1$ph$i$i181 = $$02$ph;$$12$ph$i$i180 = $79;
     label = 33;
    }
   } while(0);
   if ((label|0) == 33) {
    label = 0;
    $109 = HEAP8[$$1$ph$i$i181>>0]|0;
    HEAP8[$$12$ph$i$i180>>0] = $109;
    $110 = ($109<<24>>24)==(0);
    if (!($110)) {
     $$128$i$i185 = $$12$ph$i$i180;$$19$i$i184 = $$1$ph$i$i181;
     while(1) {
      $111 = ((($$19$i$i184)) + 1|0);
      $112 = ((($$128$i$i185)) + 1|0);
      $113 = HEAP8[$111>>0]|0;
      HEAP8[$112>>0] = $113;
      $114 = ($113<<24>>24)==(0);
      if ($114) {
       break;
      } else {
       $$128$i$i185 = $112;$$19$i$i184 = $111;
      }
     }
    }
   }
   L116: do {
    if ($9) {
     $$01$lcssa$i149 = $$02$ph;
     label = 38;
    } else {
     $$014$i146 = $$02$ph;$337 = $7;
     while(1) {
      $115 = HEAP8[$$014$i146>>0]|0;
      $116 = ($115<<24>>24)==(0);
      if ($116) {
       $$pn$i160 = $337;
       break L116;
      }
      $117 = ((($$014$i146)) + 1|0);
      $118 = $117;
      $119 = $118 & 3;
      $120 = ($119|0)==(0);
      if ($120) {
       $$01$lcssa$i149 = $117;
       label = 38;
       break;
      } else {
       $$014$i146 = $117;$337 = $118;
      }
     }
    }
   } while(0);
   if ((label|0) == 38) {
    label = 0;
    $w$0$i151 = $$01$lcssa$i149;
    while(1) {
     $121 = HEAP32[$w$0$i151>>2]|0;
     $122 = (($121) + -16843009)|0;
     $123 = $121 & -2139062144;
     $124 = $123 ^ -2139062144;
     $125 = $124 & $122;
     $126 = ($125|0)==(0);
     $127 = ((($w$0$i151)) + 4|0);
     if ($126) {
      $w$0$i151 = $127;
     } else {
      break;
     }
    }
    $128 = $121&255;
    $129 = ($128<<24>>24)==(0);
    if ($129) {
     $$1$lcssa$i157 = $w$0$i151;
    } else {
     $$pn15$i153 = $w$0$i151;
     while(1) {
      $130 = ((($$pn15$i153)) + 1|0);
      $$pre$i154 = HEAP8[$130>>0]|0;
      $131 = ($$pre$i154<<24>>24)==(0);
      if ($131) {
       $$1$lcssa$i157 = $130;
       break;
      } else {
       $$pn15$i153 = $130;
      }
     }
    }
    $132 = $$1$lcssa$i157;
    $$pn$i160 = $132;
   }
   $$0$i161 = (($$pn$i160) - ($7))|0;
   $133 = (($79) + ($$0$i161)|0);
   L130: do {
    if ($9) {
     $$01$lcssa$i131 = $$02$ph;
     label = 46;
    } else {
     $$014$i128 = $$02$ph;$338 = $7;
     while(1) {
      $134 = HEAP8[$$014$i128>>0]|0;
      $135 = ($134<<24>>24)==(0);
      if ($135) {
       $$pn$i142 = $338;
       break L130;
      }
      $136 = ((($$014$i128)) + 1|0);
      $137 = $136;
      $138 = $137 & 3;
      $139 = ($138|0)==(0);
      if ($139) {
       $$01$lcssa$i131 = $136;
       label = 46;
       break;
      } else {
       $$014$i128 = $136;$338 = $137;
      }
     }
    }
   } while(0);
   if ((label|0) == 46) {
    label = 0;
    $w$0$i133 = $$01$lcssa$i131;
    while(1) {
     $140 = HEAP32[$w$0$i133>>2]|0;
     $141 = (($140) + -16843009)|0;
     $142 = $140 & -2139062144;
     $143 = $142 ^ -2139062144;
     $144 = $143 & $141;
     $145 = ($144|0)==(0);
     $146 = ((($w$0$i133)) + 4|0);
     if ($145) {
      $w$0$i133 = $146;
     } else {
      break;
     }
    }
    $147 = $140&255;
    $148 = ($147<<24>>24)==(0);
    if ($148) {
     $$1$lcssa$i139 = $w$0$i133;
    } else {
     $$pn15$i135 = $w$0$i133;
     while(1) {
      $149 = ((($$pn15$i135)) + 1|0);
      $$pre$i136 = HEAP8[$149>>0]|0;
      $150 = ($$pre$i136<<24>>24)==(0);
      if ($150) {
       $$1$lcssa$i139 = $149;
       break;
      } else {
       $$pn15$i135 = $149;
      }
     }
    }
    $151 = $$1$lcssa$i139;
    $$pn$i142 = $151;
   }
   $$0$i143 = (($$pn$i142) - ($7))|0;
   $152 = ((($$0$i)) + 2|0);
   $$0$ph$be = $133;$$01$ph$be = $152;$$pn = $$0$i143;
  }
  else if ((label|0) == 73) {
   label = 0;
   $206 = $79;
   $207 = $7 ^ $206;
   $208 = $207 & 3;
   $209 = ($208|0)==(0);
   L79: do {
    if ($209) {
     $210 = ($8|0)!=(0);
     $211 = ($212|0)!=(0);
     $or$cond28$i$i = $211 & $210;
     if ($or$cond28$i$i) {
      $$031$i$i = $212;$$0430$i$i = $$02$ph;$$0629$i$i = $79;
      while(1) {
       $213 = HEAP8[$$0430$i$i>>0]|0;
       HEAP8[$$0629$i$i>>0] = $213;
       $214 = ($213<<24>>24)==(0);
       if ($214) {
        $$28$i$i = $$0629$i$i;$$3$i$i = $$031$i$i;
        break L79;
       }
       $215 = (($$031$i$i) + -1)|0;
       $216 = ((($$0430$i$i)) + 1|0);
       $217 = ((($$0629$i$i)) + 1|0);
       $218 = $216;
       $219 = $218 & 3;
       $220 = ($219|0)!=(0);
       $221 = ($215|0)!=(0);
       $or$cond$i$i = $221 & $220;
       if ($or$cond$i$i) {
        $$031$i$i = $215;$$0430$i$i = $216;$$0629$i$i = $217;
       } else {
        $$0$lcssa$i$i38 = $215;$$04$lcssa$i$i = $216;$$06$lcssa$i$i = $217;$$lcssa$i$i = $221;
        break;
       }
      }
     } else {
      $$0$lcssa$i$i38 = $212;$$04$lcssa$i$i = $$02$ph;$$06$lcssa$i$i = $79;$$lcssa$i$i = $211;
     }
     if ($$lcssa$i$i) {
      $$pre256 = HEAP8[$$04$lcssa$i$i>>0]|0;
      $222 = ($$pre256<<24>>24)==(0);
      if ($222) {
       $$28$i$i = $$06$lcssa$i$i;$$3$i$i = $$0$lcssa$i$i38;
      } else {
       $223 = ($$0$lcssa$i$i38>>>0)>(3);
       L88: do {
        if ($223) {
         $$117$i$i = $$0$lcssa$i$i38;$wd$018$i$i = $$06$lcssa$i$i;$ws$019$i$i = $$04$lcssa$i$i;
         while(1) {
          $224 = HEAP32[$ws$019$i$i>>2]|0;
          $225 = (($224) + -16843009)|0;
          $226 = $224 & -2139062144;
          $227 = $226 ^ -2139062144;
          $228 = $227 & $225;
          $229 = ($228|0)==(0);
          if (!($229)) {
           $$1$lcssa$i$i = $$117$i$i;$wd$0$lcssa$i$i40 = $wd$018$i$i;$ws$0$lcssa$i$i39 = $ws$019$i$i;
           break L88;
          }
          HEAP32[$wd$018$i$i>>2] = $224;
          $230 = (($$117$i$i) + -4)|0;
          $231 = ((($ws$019$i$i)) + 4|0);
          $232 = ((($wd$018$i$i)) + 4|0);
          $233 = ($230>>>0)>(3);
          if ($233) {
           $$117$i$i = $230;$wd$018$i$i = $232;$ws$019$i$i = $231;
          } else {
           $$1$lcssa$i$i = $230;$wd$0$lcssa$i$i40 = $232;$ws$0$lcssa$i$i39 = $231;
           break;
          }
         }
        } else {
         $$1$lcssa$i$i = $$0$lcssa$i$i38;$wd$0$lcssa$i$i40 = $$06$lcssa$i$i;$ws$0$lcssa$i$i39 = $$04$lcssa$i$i;
        }
       } while(0);
       $$15$ph$i$i = $ws$0$lcssa$i$i39;$$17$ph$i$i = $wd$0$lcssa$i$i40;$$2$ph$i$i = $$1$lcssa$i$i;
       label = 83;
      }
     } else {
      $$28$i$i = $$06$lcssa$i$i;$$3$i$i = 0;
     }
    } else {
     $$15$ph$i$i = $$02$ph;$$17$ph$i$i = $79;$$2$ph$i$i = $212;
     label = 83;
    }
   } while(0);
   L93: do {
    if ((label|0) == 83) {
     label = 0;
     $234 = ($$2$ph$i$i|0)==(0);
     if ($234) {
      $$28$i$i = $$17$ph$i$i;$$3$i$i = 0;
     } else {
      $$1511$i$i = $$15$ph$i$i;$$1710$i$i = $$17$ph$i$i;$$212$i$i = $$2$ph$i$i;
      while(1) {
       $235 = HEAP8[$$1511$i$i>>0]|0;
       HEAP8[$$1710$i$i>>0] = $235;
       $236 = ($235<<24>>24)==(0);
       if ($236) {
        $$28$i$i = $$1710$i$i;$$3$i$i = $$212$i$i;
        break L93;
       }
       $237 = (($$212$i$i) + -1)|0;
       $238 = ((($$1511$i$i)) + 1|0);
       $239 = ((($$1710$i$i)) + 1|0);
       $240 = ($237|0)==(0);
       if ($240) {
        $$28$i$i = $239;$$3$i$i = 0;
        break;
       } else {
        $$1511$i$i = $238;$$1710$i$i = $239;$$212$i$i = $237;
       }
      }
     }
    }
   } while(0);
   _memset(($$28$i$i|0),0,($$3$i$i|0))|0;
   $241 = (($79) + ($212)|0);
   HEAP8[$241>>0] = 0;
   $242 = ((($166)) + 1|0);
   $$0$ph$be = $241;$$01$ph$be = $242;$$pn = $212;
  }
  $$02$ph$be = (($$02$ph) + ($$pn)|0);
  $$0$ph = $$0$ph$be;$$01$ph = $$01$ph$be;$$02$ph = $$02$ph$be;
 }
 $248 = $$0;
 $249 = $10 ^ $248;
 $250 = $249 & 3;
 $251 = ($250|0)==(0);
 L146: do {
  if ($251) {
   if ($12) {
    $$0$lcssa$i$i17 = $$01;$$01$lcssa$i$i18 = $$0;
   } else {
    $$0115$i$i14 = $$0;$$016$i$i13 = $$01;
    while(1) {
     $252 = HEAP8[$$016$i$i13>>0]|0;
     HEAP8[$$0115$i$i14>>0] = $252;
     $253 = ($252<<24>>24)==(0);
     if ($253) {
      break L146;
     }
     $254 = ((($$016$i$i13)) + 1|0);
     $255 = ((($$0115$i$i14)) + 1|0);
     $256 = $254;
     $257 = $256 & 3;
     $258 = ($257|0)==(0);
     if ($258) {
      $$0$lcssa$i$i17 = $254;$$01$lcssa$i$i18 = $255;
      break;
     } else {
      $$0115$i$i14 = $255;$$016$i$i13 = $254;
     }
    }
   }
   $259 = HEAP32[$$0$lcssa$i$i17>>2]|0;
   $260 = (($259) + -16843009)|0;
   $261 = $259 & -2139062144;
   $262 = $261 ^ -2139062144;
   $263 = $262 & $260;
   $264 = ($263|0)==(0);
   if ($264) {
    $267 = $259;$wd$010$i$i22 = $$01$lcssa$i$i18;$ws$011$i$i21 = $$0$lcssa$i$i17;
    while(1) {
     $265 = ((($ws$011$i$i21)) + 4|0);
     $266 = ((($wd$010$i$i22)) + 4|0);
     HEAP32[$wd$010$i$i22>>2] = $267;
     $268 = HEAP32[$265>>2]|0;
     $269 = (($268) + -16843009)|0;
     $270 = $268 & -2139062144;
     $271 = $270 ^ -2139062144;
     $272 = $271 & $269;
     $273 = ($272|0)==(0);
     if ($273) {
      $267 = $268;$wd$010$i$i22 = $266;$ws$011$i$i21 = $265;
     } else {
      $wd$0$lcssa$i$i26 = $266;$ws$0$lcssa$i$i25 = $265;
      break;
     }
    }
   } else {
    $wd$0$lcssa$i$i26 = $$01$lcssa$i$i18;$ws$0$lcssa$i$i25 = $$0$lcssa$i$i17;
   }
   $$1$ph$i$i29 = $ws$0$lcssa$i$i25;$$12$ph$i$i28 = $wd$0$lcssa$i$i26;
   label = 97;
  } else {
   $$1$ph$i$i29 = $$01;$$12$ph$i$i28 = $$0;
   label = 97;
  }
 } while(0);
 if ((label|0) == 97) {
  $274 = HEAP8[$$1$ph$i$i29>>0]|0;
  HEAP8[$$12$ph$i$i28>>0] = $274;
  $275 = ($274<<24>>24)==(0);
  if (!($275)) {
   $$128$i$i33 = $$12$ph$i$i28;$$19$i$i32 = $$1$ph$i$i29;
   while(1) {
    $276 = ((($$19$i$i32)) + 1|0);
    $277 = ((($$128$i$i33)) + 1|0);
    $278 = HEAP8[$276>>0]|0;
    HEAP8[$277>>0] = $278;
    $279 = ($278<<24>>24)==(0);
    if ($279) {
     break;
    } else {
     $$128$i$i33 = $277;$$19$i$i32 = $276;
    }
   }
  }
 }
 L162: do {
  if ($12) {
   $$01$lcssa$i = $$01;
   label = 102;
  } else {
   $$014$i = $$01;$341 = $10;
   while(1) {
    $280 = HEAP8[$$014$i>>0]|0;
    $281 = ($280<<24>>24)==(0);
    if ($281) {
     $$pn$i = $341;
     break L162;
    }
    $282 = ((($$014$i)) + 1|0);
    $283 = $282;
    $284 = $283 & 3;
    $285 = ($284|0)==(0);
    if ($285) {
     $$01$lcssa$i = $282;
     label = 102;
     break;
    } else {
     $$014$i = $282;$341 = $283;
    }
   }
  }
 } while(0);
 if ((label|0) == 102) {
  $w$0$i = $$01$lcssa$i;
  while(1) {
   $286 = HEAP32[$w$0$i>>2]|0;
   $287 = (($286) + -16843009)|0;
   $288 = $286 & -2139062144;
   $289 = $288 ^ -2139062144;
   $290 = $289 & $287;
   $291 = ($290|0)==(0);
   $292 = ((($w$0$i)) + 4|0);
   if ($291) {
    $w$0$i = $292;
   } else {
    break;
   }
  }
  $293 = $286&255;
  $294 = ($293<<24>>24)==(0);
  if ($294) {
   $$1$lcssa$i = $w$0$i;
  } else {
   $$pn15$i = $w$0$i;
   while(1) {
    $295 = ((($$pn15$i)) + 1|0);
    $$pre$i = HEAP8[$295>>0]|0;
    $296 = ($$pre$i<<24>>24)==(0);
    if ($296) {
     $$1$lcssa$i = $295;
     break;
    } else {
     $$pn15$i = $295;
    }
   }
  }
  $297 = $$1$lcssa$i;
  $$pn$i = $297;
 }
 $$0$i10 = (($$pn$i) - ($10))|0;
 $298 = (($$0) + ($$0$i10)|0);
 $299 = HEAP8[$$02$ph>>0]|0;
 $300 = ($299<<24>>24)==(0);
 if ($300) {
  $$4 = $298;
 } else {
  $301 = ((($298)) + -1|0);
  $302 = HEAP8[$301>>0]|0;
  $303 = ($302<<24>>24)==(47);
  if ($303) {
   $$4 = $298;
  } else {
   $304 = ((($298)) + 1|0);
   HEAP8[$298>>0] = 47;
   $$4 = $304;
  }
 }
 $305 = $$4;
 $306 = $7 ^ $305;
 $307 = $306 & 3;
 $308 = ($307|0)==(0);
 if ($308) {
  L182: do {
   if ($9) {
    $$0$lcssa$i$i = $$02$ph;$$01$lcssa$i$i = $$4;
   } else {
    $$0115$i$i = $$4;$$016$i$i = $$02$ph;
    while(1) {
     $309 = HEAP8[$$016$i$i>>0]|0;
     HEAP8[$$0115$i$i>>0] = $309;
     $310 = ($309<<24>>24)==(0);
     if ($310) {
      break;
     }
     $311 = ((($$016$i$i)) + 1|0);
     $312 = ((($$0115$i$i)) + 1|0);
     $313 = $311;
     $314 = $313 & 3;
     $315 = ($314|0)==(0);
     if ($315) {
      $$0$lcssa$i$i = $311;$$01$lcssa$i$i = $312;
      break L182;
     } else {
      $$0115$i$i = $312;$$016$i$i = $311;
     }
    }
    STACKTOP = sp;return;
   }
  } while(0);
  $316 = HEAP32[$$0$lcssa$i$i>>2]|0;
  $317 = (($316) + -16843009)|0;
  $318 = $316 & -2139062144;
  $319 = $318 ^ -2139062144;
  $320 = $319 & $317;
  $321 = ($320|0)==(0);
  if ($321) {
   $324 = $316;$wd$010$i$i = $$01$lcssa$i$i;$ws$011$i$i = $$0$lcssa$i$i;
   while(1) {
    $322 = ((($ws$011$i$i)) + 4|0);
    $323 = ((($wd$010$i$i)) + 4|0);
    HEAP32[$wd$010$i$i>>2] = $324;
    $325 = HEAP32[$322>>2]|0;
    $326 = (($325) + -16843009)|0;
    $327 = $325 & -2139062144;
    $328 = $327 ^ -2139062144;
    $329 = $328 & $326;
    $330 = ($329|0)==(0);
    if ($330) {
     $324 = $325;$wd$010$i$i = $323;$ws$011$i$i = $322;
    } else {
     $wd$0$lcssa$i$i = $323;$ws$0$lcssa$i$i = $322;
     break;
    }
   }
  } else {
   $wd$0$lcssa$i$i = $$01$lcssa$i$i;$ws$0$lcssa$i$i = $$0$lcssa$i$i;
  }
  $$1$ph$i$i = $ws$0$lcssa$i$i;$$12$ph$i$i = $wd$0$lcssa$i$i;
 } else {
  $$1$ph$i$i = $$02$ph;$$12$ph$i$i = $$4;
 }
 $331 = HEAP8[$$1$ph$i$i>>0]|0;
 HEAP8[$$12$ph$i$i>>0] = $331;
 $332 = ($331<<24>>24)==(0);
 if ($332) {
  STACKTOP = sp;return;
 } else {
  $$128$i$i = $$12$ph$i$i;$$19$i$i = $$1$ph$i$i;
 }
 while(1) {
  $333 = ((($$19$i$i)) + 1|0);
  $334 = ((($$128$i$i)) + 1|0);
  $335 = HEAP8[$333>>0]|0;
  HEAP8[$334>>0] = $335;
  $336 = ($335<<24>>24)==(0);
  if ($336) {
   break;
  } else {
   $$128$i$i = $334;$$19$i$i = $333;
  }
 }
 STACKTOP = sp;return;
}
function _mkdir_prefix($path,$mode) {
 $path = $path|0;
 $mode = $mode|0;
 var $$0$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i11 = 0, $$0$i$i$i2 = 0, $$0$i$i$i4 = 0, $$0$i$i$i7 = 0, $$01$i$i = 0, $$01$lcssa$i = 0, $$014$i = 0, $$1$lcssa$i = 0, $$pn$i = 0, $$pn15$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $buf$i = 0, $phitmp = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $w$0$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer14 = sp + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $buf$i = sp + 40|0;
 $0 = $path;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa$i = $path;
   label = 4;
  } else {
   $$014$i = $path;$73 = $0;
   while(1) {
    $3 = HEAP8[$$014$i>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn$i = $73;
     break L1;
    }
    $5 = ((($$014$i)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa$i = $5;
     label = 4;
     break;
    } else {
     $$014$i = $5;$73 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0$i = $$01$lcssa$i;
  while(1) {
   $9 = HEAP32[$w$0$i>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0$i)) + 4|0);
   if ($14) {
    $w$0$i = $15;
   } else {
    break;
   }
  }
  $16 = $9&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa$i = $w$0$i;
  } else {
   $$pn15$i = $w$0$i;
   while(1) {
    $18 = ((($$pn15$i)) + 1|0);
    $$pre$i = HEAP8[$18>>0]|0;
    $19 = ($$pre$i<<24>>24)==(0);
    if ($19) {
     $$1$lcssa$i = $18;
     break;
    } else {
     $$pn15$i = $18;
    }
   }
  }
  $20 = $$1$lcssa$i;
  $$pn$i = $20;
 }
 $$0$i = (($$pn$i) - ($0))|0;
 $21 = (($$0$i) + 1)|0;
 $$01$i$i = $21;
 while(1) {
  $22 = (($$01$i$i) + -1)|0;
  $23 = ($$01$i$i|0)==(0);
  if ($23) {
   label = 40;
   break;
  }
  $24 = (($path) + ($22)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = ($25<<24>>24)==(47);
  if ($26) {
   break;
  } else {
   $$01$i$i = $22;
  }
 }
 if ((label|0) == 40) {
  STACKTOP = sp;return;
 }
 $27 = ($24|0)==(0|0);
 if ($27) {
  STACKTOP = sp;return;
 }
 HEAP8[$24>>0] = 0;
 HEAP32[$vararg_buffer>>2] = $path;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $buf$i;
 $28 = (___syscall195(195,($vararg_buffer|0))|0);
 $29 = ($28>>>0)>(4294963200);
 if ($29) {
  $30 = (0 - ($28))|0;
  $31 = HEAP32[6773]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $$0$i$i$i$i = 27136;
  } else {
   $33 = (_pthread_self()|0);
   $34 = ((($33)) + 64|0);
   $35 = HEAP32[$34>>2]|0;
   $$0$i$i$i$i = $35;
  }
  HEAP32[$$0$i$i$i$i>>2] = $30;
  label = 18;
 } else {
  $36 = ($28|0)==(0);
  if ($36) {
   $37 = ((($buf$i)) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $38 & 61440;
   $phitmp = ($39|0)==(16384);
   if ($phitmp) {
    HEAP8[$24>>0] = 47;
    STACKTOP = sp;return;
   }
  } else {
   label = 18;
  }
 }
 if ((label|0) == 18) {
 }
 HEAP32[$vararg_buffer2>>2] = $path;
 $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $mode;
 $40 = (___syscall39(39,($vararg_buffer2|0))|0);
 $41 = ($40>>>0)>(4294963200);
 if ($41) {
  $42 = (0 - ($40))|0;
  $43 = HEAP32[6773]|0;
  $44 = ($43|0)==(0|0);
  if ($44) {
   $$0$i$i$i2 = 27136;
  } else {
   $45 = (_pthread_self()|0);
   $46 = ((($45)) + 64|0);
   $47 = HEAP32[$46>>2]|0;
   $$0$i$i$i2 = $47;
  }
  HEAP32[$$0$i$i$i2>>2] = $42;
 } else {
  $48 = ($40|0)==(0);
  if ($48) {
   HEAP32[$vararg_buffer6>>2] = $path;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $mode;
   $49 = (___syscall15(15,($vararg_buffer6|0))|0);
   $50 = ($49>>>0)>(4294963200);
   if ($50) {
    $51 = (0 - ($49))|0;
    $52 = HEAP32[6773]|0;
    $53 = ($52|0)==(0|0);
    if ($53) {
     $$0$i$i$i4 = 27136;
    } else {
     $54 = (_pthread_self()|0);
     $55 = ((($54)) + 64|0);
     $56 = HEAP32[$55>>2]|0;
     $$0$i$i$i4 = $56;
    }
    HEAP32[$$0$i$i$i4>>2] = $51;
   }
   HEAP8[$24>>0] = 47;
   STACKTOP = sp;return;
  }
 }
 _mkdir_prefix($path,$mode);
 HEAP32[$vararg_buffer10>>2] = $path;
 $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
 HEAP32[$vararg_ptr13>>2] = $mode;
 $57 = (___syscall39(39,($vararg_buffer10|0))|0);
 $58 = ($57>>>0)>(4294963200);
 if ($58) {
  $59 = (0 - ($57))|0;
  $60 = HEAP32[6773]|0;
  $61 = ($60|0)==(0|0);
  if ($61) {
   $$0$i$i$i11 = 27136;
  } else {
   $62 = (_pthread_self()|0);
   $63 = ((($62)) + 64|0);
   $64 = HEAP32[$63>>2]|0;
   $$0$i$i$i11 = $64;
  }
  HEAP32[$$0$i$i$i11>>2] = $59;
 }
 HEAP32[$vararg_buffer14>>2] = $path;
 $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
 HEAP32[$vararg_ptr17>>2] = $mode;
 $65 = (___syscall15(15,($vararg_buffer14|0))|0);
 $66 = ($65>>>0)>(4294963200);
 if ($66) {
  $67 = (0 - ($65))|0;
  $68 = HEAP32[6773]|0;
  $69 = ($68|0)==(0|0);
  if ($69) {
   $$0$i$i$i7 = 27136;
  } else {
   $70 = (_pthread_self()|0);
   $71 = ((($70)) + 64|0);
   $72 = HEAP32[$71>>2]|0;
   $$0$i$i$i7 = $72;
  }
  HEAP32[$$0$i$i$i7>>2] = $67;
 }
 HEAP8[$24>>0] = 47;
 STACKTOP = sp;return;
}
function _cram_ref_decr($r,$id) {
 $r = $r|0;
 $id = $id|0;
 var $$phi$trans$insert = 0, $$phi$trans$insert1 = 0, $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($r)) + 28|0);
 (_pthread_mutex_lock(($0|0))|0);
 $1 = ($id|0)<(0);
 $$phi$trans$insert = ((($r)) + 8|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 $$phi$trans$insert1 = (($$pre) + ($id<<2)|0);
 $$pre2 = HEAP32[$$phi$trans$insert1>>2]|0;
 if (!($1)) {
  $2 = ((($$pre2)) + 40|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $17 = ((($$pre2)) + 32|0);
   $18 = $17;
   $19 = $18;
   $20 = HEAP32[$19>>2]|0;
   $21 = (($18) + 4)|0;
   $22 = $21;
   $23 = HEAP32[$22>>2]|0;
   $24 = (_i64Add(($20|0),($23|0),-1,-1)|0);
   $25 = tempRet0;
   $26 = $17;
   $27 = $26;
   HEAP32[$27>>2] = $24;
   $28 = (($26) + 4)|0;
   $29 = $28;
   HEAP32[$29>>2] = $25;
   $30 = ($23|0)<(0);
   $31 = ($20>>>0)<(2);
   $32 = ($23|0)==(0);
   $33 = $32 & $31;
   $34 = $30 | $33;
   if (!($34)) {
    (_pthread_mutex_unlock(($0|0))|0);
    return;
   }
   $35 = HEAP32[$$phi$trans$insert>>2]|0;
   $36 = (($35) + ($id<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($37)) + 32|0);
   $39 = $38;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($39) + 4)|0;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = ($41|0)==(0);
   $46 = ($44|0)==(0);
   $47 = $45 & $46;
   if (!($47)) {
    ___assert_fail((19177|0),(18618|0),2417,(19156|0));
    // unreachable;
   }
   $48 = ((($r)) + 60|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)>(-1);
   if ($50) {
    $51 = (($35) + ($49<<2)|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ((($52)) + 32|0);
    $54 = $53;
    $55 = $54;
    $56 = HEAP32[$55>>2]|0;
    $57 = (($54) + 4)|0;
    $58 = $57;
    $59 = HEAP32[$58>>2]|0;
    $60 = ($59|0)<(0);
    $61 = ($56>>>0)<(1);
    $62 = ($59|0)==(0);
    $63 = $62 & $61;
    $64 = $60 | $63;
    if ($64) {
     $65 = ((($52)) + 40|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ($66|0)==(0|0);
     if (!($67)) {
      _ref_entry_free_seq($52);
      $68 = HEAP32[$48>>2]|0;
      $69 = HEAP32[$$phi$trans$insert>>2]|0;
      $70 = (($69) + ($68<<2)|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = ((($71)) + 8|0);
      $73 = $72;
      $74 = $73;
      HEAP32[$74>>2] = 0;
      $75 = (($73) + 4)|0;
      $76 = $75;
      HEAP32[$76>>2] = 0;
     }
    }
   }
   HEAP32[$48>>2] = $id;
   (_pthread_mutex_unlock(($0|0))|0);
   return;
  }
 }
 $5 = ((($$pre2)) + 32|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)>(-1);
 $13 = ($8>>>0)>(4294967295);
 $14 = ($11|0)==(-1);
 $15 = $14 & $13;
 $16 = $12 | $15;
 if ($16) {
  (_pthread_mutex_unlock(($0|0))|0);
  return;
 } else {
  ___assert_fail((19130|0),(18618|0),2412,(19156|0));
  // unreachable;
 }
}
function _bgzf_open_ref($fn,$is_md5) {
 $fn = $fn|0;
 $is_md5 = $is_md5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i5$i = 0, $$0$i$i1 = 0, $$0$i$i19 = 0, $$0$i$i7$i = 0, $$0$i1$i = 0, $$0$i1$i$i = 0, $$0$i52$i$i = 0, $$0$i67$i$i = 0, $$0$i9$i = 0, $$01$i$i$i = 0, $$01$i110$i$i = 0, $$01$i128$i$i = 0, $$01$i26$i$i = 0, $$01$i47$i$i = 0, $$01$i94$i$i = 0, $$01$lcssa$i$i = 0, $$01$lcssa$i$i$i = 0;
 var $$01$lcssa$i$i7 = 0, $$014$i$i = 0, $$014$i$i$i = 0, $$014$i$i$i$i = 0, $$014$i$i4 = 0, $$02$i$i$i = 0, $$02$i109$i$i = 0, $$02$i127$i$i = 0, $$02$i25$i$i = 0, $$02$i46$i$i = 0, $$02$i93$i$i = 0, $$05$i$i$i$i = 0, $$1$lcssa$i$i = 0, $$1$lcssa$i$i$i = 0, $$1$lcssa$i$i15 = 0, $$202 = 0, $$211 = 0, $$in = 0, $$in195 = 0, $$in197 = 0;
 var $$in199 = 0, $$in200 = 0, $$in201 = 0, $$l2$0$i$i = 0, $$lcssa$i$i$i$i = 0, $$lcssa2$i$i$i$i = 0, $$mask = 0, $$mask196 = 0, $$mask198 = 0, $$phi$trans$insert = 0, $$phi$trans$insert106 = 0, $$phi$trans$insert109 = 0, $$pn$i$i = 0, $$pn$i$i$i = 0, $$pn$i$i18 = 0, $$pn15$i$i = 0, $$pn15$i$i$i = 0, $$pn15$i$i11 = 0, $$pre = 0, $$pre$i$i = 0;
 var $$pre$i$i$i = 0, $$pre$i$i12 = 0, $$pre$phi125Z2D = 0, $$pre$phi127Z2D = 0, $$pre108 = 0, $$pre111 = 0, $$pre113 = 0, $$pre114 = 0, $$pre115 = 0, $$pre116 = 0, $$pre117 = 0, $$pre118 = 0, $$pre121 = 0, $$pre123 = 0, $$pre6$i$i$i = 0, $$pre6$i107$i$i = 0, $$pre6$i125$i$i = 0, $$pre6$i23$i$i = 0, $$pre6$i44$i$i = 0, $$pre6$i91$i$i = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $85$phi = 0, $86 = 0;
 var $87 = 0, $88 = 0, $88$phi = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $92$phi = 0, $93 = 0, $93$phi = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0$i$i = 0, $fai_file = 0, $h$0$i$i$i$i = 0;
 var $h$1$i$i$i$i = 0, $i$0$i = 0, $i$0$i$i = 0, $i$0$i$i$i = 0, $i$0$i$i6$i = 0, $i$0$i$i6$i$ = 0, $i$0$i104$i$i = 0, $i$0$i122$i$i = 0, $i$0$i20$i$i = 0, $i$0$i4$i = 0, $i$0$i41$i$i = 0, $i$0$i88$i$i = 0, $i$03$i$i = 0, $i$03$i$i$i = 0, $i$03$i12$i = 0, $i$03$i55$i$i = 0, $i$03$i70$i$i = 0, $i$1$i$i$i = 0, $i$1$i111$i$i = 0, $i$1$i129$i$i = 0;
 var $i$1$i27$i$i = 0, $i$1$i48$i$i = 0, $i$1$i95$i$i = 0, $i$12$i$i = 0, $i$12$i$i$i = 0, $i$12$i16$i = 0, $i$12$i59$i$i = 0, $i$12$i74$i$i = 0, $l1$0$i$i = 0, $l2$0$i$i = 0, $line_blen$0$i$i = 0, $line_blen$0$i$i$phi = 0, $line_len$0$i$i = 0, $line_len$0$i$i$phi = 0, $name$i$i$sroa$0$0$ph = 0, $name$i$i$sroa$11$0 = 0, $name$i$i$sroa$11$0$phi = 0, $name$i$i$sroa$11$1$ph = 0, $name$i$i$sroa$11$2 = 0, $name$i$i$sroa$11$3 = 0;
 var $name$i$i$sroa$11$4 = 0, $name$i$i$sroa$15$0 = 0, $name$i$i$sroa$15$0$phi = 0, $name$i$i$sroa$15$1$ph = 0, $name$i$i$sroa$15$2 = 0, $name$i$i$sroa$15$3 = 0, $name$i$i$sroa$15$4 = 0, $name$i$i$sroa$15$5 = 0, $or$cond = 0, $or$cond$i$i$i$i = 0, $or$cond203 = 0, $or$cond204 = 0, $or$cond206 = 0, $or$cond208 = 0, $or$cond210 = 0, $or$cond3$i$i$i$i = 0, $or$cond37 = 0, $or$cond39 = 0, $s$0$lcssa$i$i = 0, $s$0$lcssa$i$i$i = 0;
 var $s$0$lcssa$i22$i = 0, $s$0$lcssa$i65$i$i = 0, $s$0$lcssa$i80$i$i = 0, $s$01$i$i = 0, $s$01$i$i$i = 0, $s$01$i17$i = 0, $s$01$i60$i$i = 0, $s$01$i75$i$i = 0, $s$1$i$i = 0, $s$1$i$i$i = 0, $s$1$i19$i = 0, $s$1$i62$i$i = 0, $s$1$i77$i$i = 0, $s$pn$i$i$i$i = 0, $state$0$i$i = 0, $state$1$i$i = 0, $step$0$i$i$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0;
 var $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer27 = 0, $vararg_buffer33 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0, $vararg_buffer55 = 0, $vararg_buffer61 = 0, $vararg_buffer67 = 0, $vararg_buffer8 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0;
 var $vararg_ptr32 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $vararg_ptr38 = 0, $vararg_ptr4 = 0, $vararg_ptr51 = 0, $vararg_ptr52 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0, $vararg_ptr58 = 0, $vararg_ptr59 = 0, $vararg_ptr60 = 0, $vararg_ptr64 = 0, $vararg_ptr65 = 0, $vararg_ptr66 = 0, $w$0$i$i = 0, $w$0$i$i$i = 0, $w$0$i$i9 = 0, $x$i = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer67 = sp + 232|0;
 $vararg_buffer61 = sp + 216|0;
 $vararg_buffer55 = sp + 200|0;
 $vararg_buffer48 = sp + 168|0;
 $vararg_buffer45 = sp + 160|0;
 $vararg_buffer42 = sp + 152|0;
 $vararg_buffer39 = sp + 144|0;
 $vararg_buffer33 = sp + 128|0;
 $vararg_buffer27 = sp + 112|0;
 $vararg_buffer21 = sp + 96|0;
 $vararg_buffer19 = sp + 88|0;
 $vararg_buffer16 = sp + 80|0;
 $vararg_buffer13 = sp + 72|0;
 $vararg_buffer11 = sp + 64|0;
 $vararg_buffer8 = sp + 56|0;
 $vararg_buffer5 = sp + 48|0;
 $vararg_buffer1 = sp + 40|0;
 $vararg_buffer = sp + 32|0;
 $x$i = sp + 24|0;
 $0 = sp + 16|0;
 $1 = sp + 8|0;
 $2 = sp;
 $fai_file = sp + 240|0;
 $3 = ($is_md5|0)==(0);
 do {
  if ($3) {
   HEAP32[$vararg_buffer>>2] = $fn;
   _snprintf($fai_file,4096,21878,$vararg_buffer);
   HEAP32[$vararg_buffer1>>2] = $fai_file;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = 4;
   $4 = (___syscall33(33,($vararg_buffer1|0))|0);
   $5 = ($4>>>0)>(4294963200);
   if ($5) {
    $6 = (0 - ($4))|0;
    $7 = HEAP32[6773]|0;
    $8 = ($7|0)==(0|0);
    if ($8) {
     $$0$i$i = 27136;
    } else {
     $9 = (_pthread_self()|0);
     $10 = ((($9)) + 64|0);
     $11 = HEAP32[$10>>2]|0;
     $$0$i$i = $11;
    }
    HEAP32[$$0$i$i>>2] = $6;
   } else {
    $12 = ($4|0)==(0);
    if ($12) {
     break;
    }
   }
   $13 = $fn;
   $14 = $13 & 3;
   $15 = ($14|0)==(0);
   L10: do {
    if ($15) {
     $$01$lcssa$i$i = $fn;
     label = 10;
    } else {
     $$014$i$i = $fn;$790 = $13;
     while(1) {
      $16 = HEAP8[$$014$i$i>>0]|0;
      $17 = ($16<<24>>24)==(0);
      if ($17) {
       $$pn$i$i = $790;
       break L10;
      }
      $18 = ((($$014$i$i)) + 1|0);
      $19 = $18;
      $20 = $19 & 3;
      $21 = ($20|0)==(0);
      if ($21) {
       $$01$lcssa$i$i = $18;
       label = 10;
       break;
      } else {
       $$014$i$i = $18;$790 = $19;
      }
     }
    }
   } while(0);
   if ((label|0) == 10) {
    $w$0$i$i = $$01$lcssa$i$i;
    while(1) {
     $22 = HEAP32[$w$0$i$i>>2]|0;
     $23 = (($22) + -16843009)|0;
     $24 = $22 & -2139062144;
     $25 = $24 ^ -2139062144;
     $26 = $25 & $23;
     $27 = ($26|0)==(0);
     $28 = ((($w$0$i$i)) + 4|0);
     if ($27) {
      $w$0$i$i = $28;
     } else {
      break;
     }
    }
    $29 = $22&255;
    $30 = ($29<<24>>24)==(0);
    if ($30) {
     $$1$lcssa$i$i = $w$0$i$i;
    } else {
     $$pn15$i$i = $w$0$i$i;
     while(1) {
      $31 = ((($$pn15$i$i)) + 1|0);
      $$pre$i$i = HEAP8[$31>>0]|0;
      $32 = ($$pre$i$i<<24>>24)==(0);
      if ($32) {
       $$1$lcssa$i$i = $31;
       break;
      } else {
       $$pn15$i$i = $31;
      }
     }
    }
    $33 = $$1$lcssa$i$i;
    $$pn$i$i = $33;
   }
   $$0$i$i1 = (($$pn$i$i) - ($13))|0;
   $34 = (($$0$i$i1) + 5)|0;
   $35 = (_malloc($34)|0);
   $36 = ($35|0)==(0|0);
   if (!($36)) {
    $37 = ((($35)) + -4|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $38 & 3;
    $40 = ($39|0)==(0);
    if (!($40)) {
     _memset(($35|0),0,($34|0))|0;
    }
   }
   HEAP32[$vararg_buffer5>>2] = $fn;
   (_sprintf($35,21878,$vararg_buffer5)|0);
   $41 = (_bgzf_open($fn,21885)|0);
   $42 = ($41|0)==(0|0);
   if ($42) {
    HEAP32[$vararg_buffer8>>2] = $fn;
    _fprintf(9772,21887,$vararg_buffer8);
    _free($35);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $43 = HEAP32[$41>>2]|0;
   $44 = $43 & 1610612736;
   $45 = ($44|0)==(0);
   do {
    if (!($45)) {
     $46 = ((($41)) + 60|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47|0)==(0|0);
     if (!($48)) {
      $49 = ((($47)) + 8|0);
      $50 = HEAP32[$49>>2]|0;
      _free($50);
      $51 = HEAP32[$46>>2]|0;
      _free($51);
      HEAP32[$46>>2] = 0;
      $52 = ((($41)) + 64|0);
      HEAP32[$52>>2] = 0;
     }
     $53 = (_malloc(24)|0);
     $54 = ($53|0)==(0|0);
     if ($54) {
      HEAP32[$46>>2] = 0;
      break;
     }
     $55 = ((($53)) + -4|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $56 & 3;
     $58 = ($57|0)==(0);
     if (!($58)) {
      dest=$53; stop=dest+24|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
     }
     HEAP32[$46>>2] = $53;
     $59 = ((($41)) + 64|0);
     HEAP32[$59>>2] = 1;
    }
   } while(0);
   $60 = (_malloc(20)|0);
   $61 = ($60|0)==(0|0);
   if (!($61)) {
    $62 = ((($60)) + -4|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $63 & 3;
    $65 = ($64|0)==(0);
    if (!($65)) {
     dest=$60; stop=dest+20|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    }
   }
   $66 = (_malloc(28)|0);
   $67 = ($66|0)==(0|0);
   if (!($67)) {
    $68 = ((($66)) + -4|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $69 & 3;
    $71 = ($70|0)==(0);
    if (!($71)) {
     dest=$66; stop=dest+28|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    }
   }
   $72 = ((($60)) + 16|0);
   HEAP32[$72>>2] = $66;
   $73 = ((($41)) + 32|0);
   $85 = -1;$88 = -1;$92 = 0;$93 = 0;$line_blen$0$i$i = -1;$line_len$0$i$i = -1;$name$i$i$sroa$11$0 = 0;$name$i$i$sroa$15$0 = 0;$state$0$i$i = 0;
   L52: while(1) {
    $74 = (_bgzf_getc($41)|0);
    $75 = ($74|0)>(-1);
    if (!($75)) {
     label = 68;
     break;
    }
    L55: do {
     switch ($74|0) {
     case 10:  {
      switch ($state$0$i$i|0) {
      case 2:  {
       $name$i$i$sroa$15$0$phi = $name$i$i$sroa$15$0;$name$i$i$sroa$11$0$phi = $name$i$i$sroa$11$0;$line_len$0$i$i$phi = $line_len$0$i$i;$line_blen$0$i$i$phi = $line_blen$0$i$i;$93$phi = $93;$92$phi = $92;$88$phi = $88;$85$phi = $85;$state$0$i$i = 2;$name$i$i$sroa$15$0 = $name$i$i$sroa$15$0$phi;$name$i$i$sroa$11$0 = $name$i$i$sroa$11$0$phi;$line_len$0$i$i = $line_len$0$i$i$phi;$line_blen$0$i$i = $line_blen$0$i$i$phi;$93 = $93$phi;$92 = $92$phi;$88 = $88$phi;$85 = $85$phi;
       continue L52;
       break;
      }
      case 3:  {
       label = 58;
       break L52;
       break;
      }
      case 1:  {
       $76 = $73;
       $77 = $76;
       $78 = HEAP32[$77>>2]|0;
       $79 = (($76) + 4)|0;
       $80 = $79;
       $81 = HEAP32[$80>>2]|0;
       $82 = (_bitshift64Ashr(0,($78|0),32)|0);
       $83 = tempRet0;
       $name$i$i$sroa$15$0$phi = $name$i$i$sroa$15$0;$name$i$i$sroa$11$0$phi = $name$i$i$sroa$11$0;$line_len$0$i$i$phi = $line_len$0$i$i;$line_blen$0$i$i$phi = $line_blen$0$i$i;$88$phi = $88;$85$phi = $85;$92 = $82;$93 = $83;$state$0$i$i = 1;$name$i$i$sroa$15$0 = $name$i$i$sroa$15$0$phi;$name$i$i$sroa$11$0 = $name$i$i$sroa$11$0$phi;$line_len$0$i$i = $line_len$0$i$i$phi;$line_blen$0$i$i = $line_blen$0$i$i$phi;$88 = $88$phi;$85 = $85$phi;
       continue L52;
       break;
      }
      case 0:  {
       $84 = ($85|0)<(0);
       $$202 = $84 ? 0 : 2;
       $name$i$i$sroa$15$0$phi = $name$i$i$sroa$15$0;$name$i$i$sroa$11$0$phi = $name$i$i$sroa$11$0;$line_len$0$i$i$phi = $line_len$0$i$i;$line_blen$0$i$i$phi = $line_blen$0$i$i;$93$phi = $93;$92$phi = $92;$88$phi = $88;$85$phi = $85;$state$0$i$i = $$202;$name$i$i$sroa$15$0 = $name$i$i$sroa$15$0$phi;$name$i$i$sroa$11$0 = $name$i$i$sroa$11$0$phi;$line_len$0$i$i = $line_len$0$i$i$phi;$line_blen$0$i$i = $line_blen$0$i$i$phi;$93 = $93$phi;$92 = $92$phi;$88 = $88$phi;$85 = $85$phi;
       continue L52;
       break;
      }
      default: {
       $state$1$i$i = $state$0$i$i;
       break L55;
      }
      }
      break;
     }
     case 62:  {
      $86 = ($85|0)>(-1);
      $87 = ($88>>>0)>(4294967295);
      $89 = ($85|0)==(-1);
      $90 = $89 & $87;
      $91 = $86 | $90;
      if ($91) {
       $94 = (_fai_insert_index($60,$name$i$i$sroa$15$0,$88,$85,$line_len$0$i$i,$line_blen$0$i$i,$92,$93)|0);
       $95 = ($94|0)==(0);
       if ($95) {
        $name$i$i$sroa$0$0$ph = 0;$name$i$i$sroa$11$1$ph = $name$i$i$sroa$11$0;$name$i$i$sroa$15$1$ph = $name$i$i$sroa$15$0;
       } else {
        $name$i$i$sroa$15$5 = $name$i$i$sroa$15$0;
        label = 70;
        break L52;
       }
      } else {
       $name$i$i$sroa$0$0$ph = 0;$name$i$i$sroa$11$1$ph = $name$i$i$sroa$11$0;$name$i$i$sroa$15$1$ph = $name$i$i$sroa$15$0;
      }
      L65: while(1) {
       $96 = ($name$i$i$sroa$0$0$ph|0)!=(0);
       $97 = (($name$i$i$sroa$0$0$ph) + 1)|0;
       $98 = ($name$i$i$sroa$11$1$ph>>>0)<($97>>>0);
       $99 = $name$i$i$sroa$0$0$ph >>> 1;
       $100 = $name$i$i$sroa$0$0$ph | $99;
       $101 = $100 >>> 2;
       $102 = $100 | $101;
       $103 = $102 >>> 4;
       $104 = $102 | $103;
       $105 = $104 >>> 8;
       $106 = $104 | $105;
       $107 = $106 >>> 16;
       $108 = $106 | $107;
       $109 = (($108) + 1)|0;
       L67: while(1) {
        $110 = (_bgzf_getc($41)|0);
        $111 = ($110|0)>(-1);
        if (!($111)) {
         break L65;
        }
        switch ($110|0) {
        case 9: case 10: case 11: case 12: case 13: case 32:  {
         $116 = ($110|0)==(10);
         $or$cond39 = $96 | $116;
         if ($or$cond39) {
          break L65;
         } else {
          continue L67;
         }
         break;
        }
        default: {
        }
        }
        if (!($98)) {
         $name$i$i$sroa$11$2 = $name$i$i$sroa$11$1$ph;$name$i$i$sroa$15$2 = $name$i$i$sroa$15$1$ph;
         break;
        }
        $112 = (_realloc($name$i$i$sroa$15$1$ph,$109)|0);
        $113 = ($112|0)==(0|0);
        if (!($113)) {
         $name$i$i$sroa$11$2 = $109;$name$i$i$sroa$15$2 = $112;
         break;
        }
       }
       $114 = $110&255;
       $115 = (($name$i$i$sroa$15$2) + ($name$i$i$sroa$0$0$ph)|0);
       HEAP8[$115>>0] = $114;
       $name$i$i$sroa$0$0$ph = $97;$name$i$i$sroa$11$1$ph = $name$i$i$sroa$11$2;$name$i$i$sroa$15$1$ph = $name$i$i$sroa$15$2;
      }
      $117 = (($name$i$i$sroa$0$0$ph) + 2)|0;
      $118 = ($name$i$i$sroa$11$1$ph>>>0)<($117>>>0);
      if ($118) {
       $119 = $97 >>> 1;
       $120 = $97 | $119;
       $121 = $120 >>> 2;
       $122 = $120 | $121;
       $123 = $122 >>> 4;
       $124 = $122 | $123;
       $125 = $124 >>> 8;
       $126 = $124 | $125;
       $127 = $126 >>> 16;
       $128 = $126 | $127;
       $129 = (($128) + 1)|0;
       $130 = (_realloc($name$i$i$sroa$15$1$ph,$129)|0);
       $131 = ($130|0)==(0|0);
       if ($131) {
        $name$i$i$sroa$11$4 = $name$i$i$sroa$11$1$ph;$name$i$i$sroa$15$4 = $name$i$i$sroa$15$1$ph;
       } else {
        $name$i$i$sroa$11$3 = $129;$name$i$i$sroa$15$3 = $130;
        label = 51;
       }
      } else {
       $name$i$i$sroa$11$3 = $name$i$i$sroa$11$1$ph;$name$i$i$sroa$15$3 = $name$i$i$sroa$15$1$ph;
       label = 51;
      }
      if ((label|0) == 51) {
       label = 0;
       $132 = (($name$i$i$sroa$15$3) + ($name$i$i$sroa$0$0$ph)|0);
       HEAP8[$132>>0] = 0;
       $name$i$i$sroa$11$4 = $name$i$i$sroa$11$3;$name$i$i$sroa$15$4 = $name$i$i$sroa$15$3;
      }
      $133 = ($110|0)<(0);
      if ($133) {
       label = 53;
       break L52;
      }
      $134 = ($110|0)==(10);
      if (!($134)) {
       while(1) {
        $135 = (_bgzf_getc($41)|0);
        $136 = ($135|0)>(-1);
        $137 = ($135|0)!=(10);
        $or$cond37 = $136 & $137;
        if (!($or$cond37)) {
         break;
        }
       }
      }
      $138 = $73;
      $139 = $138;
      $140 = HEAP32[$139>>2]|0;
      $141 = (($138) + 4)|0;
      $142 = $141;
      $143 = HEAP32[$142>>2]|0;
      $144 = (_bitshift64Ashr(0,($140|0),32)|0);
      $145 = tempRet0;
      $line_len$0$i$i$phi = $line_len$0$i$i;$line_blen$0$i$i$phi = $line_blen$0$i$i;$85 = 0;$88 = 0;$92 = $144;$93 = $145;$name$i$i$sroa$11$0 = $name$i$i$sroa$11$4;$name$i$i$sroa$15$0 = $name$i$i$sroa$15$4;$state$0$i$i = 1;$line_len$0$i$i = $line_len$0$i$i$phi;$line_blen$0$i$i = $line_blen$0$i$i$phi;
      continue L52;
      break;
     }
     default: {
      switch ($state$0$i$i|0) {
      case 3:  {
       label = 58;
       break L52;
       break;
      }
      case 2:  {
       break;
      }
      default: {
       $state$1$i$i = $state$0$i$i;
       break L55;
      }
      }
      $state$1$i$i = 3;
     }
     }
    } while(0);
    $c$0$i$i = $74;$l1$0$i$i = 0;$l2$0$i$i = 0;
    while(1) {
     $146 = (($l1$0$i$i) + 1)|0;
     $147 = (($c$0$i$i) + -33)|0;
     $148 = ($147>>>0)<(94);
     $149 = $148&1;
     $$l2$0$i$i = (($l2$0$i$i) + ($149))|0;
     $150 = (_bgzf_getc($41)|0);
     $151 = ($150|0)>(-1);
     $152 = ($150|0)!=(10);
     $or$cond = $151 & $152;
     if ($or$cond) {
      $c$0$i$i = $150;$l1$0$i$i = $146;$l2$0$i$i = $$l2$0$i$i;
     } else {
      break;
     }
    }
    $153 = ($state$1$i$i|0)==(3);
    if ($153) {
     $154 = ($$l2$0$i$i|0)==(0);
     if ($154) {
      $name$i$i$sroa$15$0$phi = $name$i$i$sroa$15$0;$name$i$i$sroa$11$0$phi = $name$i$i$sroa$11$0;$line_len$0$i$i$phi = $line_len$0$i$i;$line_blen$0$i$i$phi = $line_blen$0$i$i;$93$phi = $93;$92$phi = $92;$88$phi = $88;$85$phi = $85;$state$0$i$i = 3;$name$i$i$sroa$15$0 = $name$i$i$sroa$15$0$phi;$name$i$i$sroa$11$0 = $name$i$i$sroa$11$0$phi;$line_len$0$i$i = $line_len$0$i$i$phi;$line_blen$0$i$i = $line_blen$0$i$i$phi;$93 = $93$phi;$92 = $92$phi;$88 = $88$phi;$85 = $85$phi;
      continue;
     } else {
      label = 64;
      break;
     }
    }
    $155 = (($l1$0$i$i) + 2)|0;
    $156 = ($$l2$0$i$i|0)<(0);
    $157 = $156 << 31 >> 31;
    $158 = (_i64Add(($88|0),($85|0),($$l2$0$i$i|0),($157|0))|0);
    $159 = tempRet0;
    $160 = ($state$1$i$i|0)==(1);
    if ($160) {
     $name$i$i$sroa$15$0$phi = $name$i$i$sroa$15$0;$name$i$i$sroa$11$0$phi = $name$i$i$sroa$11$0;$93$phi = $93;$92$phi = $92;$85 = $159;$88 = $158;$line_blen$0$i$i = $$l2$0$i$i;$line_len$0$i$i = $155;$state$0$i$i = 0;$name$i$i$sroa$15$0 = $name$i$i$sroa$15$0$phi;$name$i$i$sroa$11$0 = $name$i$i$sroa$11$0$phi;$93 = $93$phi;$92 = $92$phi;
     continue;
    }
    $161 = ($state$1$i$i|0)==(0);
    if (!($161)) {
     $name$i$i$sroa$15$0$phi = $name$i$i$sroa$15$0;$name$i$i$sroa$11$0$phi = $name$i$i$sroa$11$0;$line_len$0$i$i$phi = $line_len$0$i$i;$line_blen$0$i$i$phi = $line_blen$0$i$i;$93$phi = $93;$92$phi = $92;$85 = $159;$88 = $158;$state$0$i$i = $state$1$i$i;$name$i$i$sroa$15$0 = $name$i$i$sroa$15$0$phi;$name$i$i$sroa$11$0 = $name$i$i$sroa$11$0$phi;$line_len$0$i$i = $line_len$0$i$i$phi;$line_blen$0$i$i = $line_blen$0$i$i$phi;$93 = $93$phi;$92 = $92$phi;
     continue;
    }
    $162 = ($155|0)==($line_len$0$i$i|0);
    $163 = ($$l2$0$i$i|0)==($line_blen$0$i$i|0);
    $or$cond203 = $162 & $163;
    $$211 = $or$cond203 ? 0 : 2;
    $name$i$i$sroa$15$0$phi = $name$i$i$sroa$15$0;$name$i$i$sroa$11$0$phi = $name$i$i$sroa$11$0;$line_len$0$i$i$phi = $line_len$0$i$i;$line_blen$0$i$i$phi = $line_blen$0$i$i;$93$phi = $93;$92$phi = $92;$85 = $159;$88 = $158;$state$0$i$i = $$211;$name$i$i$sroa$15$0 = $name$i$i$sroa$15$0$phi;$name$i$i$sroa$11$0 = $name$i$i$sroa$11$0$phi;$line_len$0$i$i = $line_len$0$i$i$phi;$line_blen$0$i$i = $line_blen$0$i$i$phi;$93 = $93$phi;$92 = $92$phi;
   }
   if ((label|0) == 53) {
    _fprintf(9772,21681,$vararg_buffer11);
    $name$i$i$sroa$15$5 = $name$i$i$sroa$15$4;
    label = 70;
   }
   else if ((label|0) == 58) {
    HEAP32[$vararg_buffer13>>2] = $name$i$i$sroa$15$0;
    _fprintf(9772,21730,$vararg_buffer13);
    $name$i$i$sroa$15$5 = $name$i$i$sroa$15$0;
    label = 70;
   }
   else if ((label|0) == 64) {
    HEAP32[$vararg_buffer16>>2] = $name$i$i$sroa$15$0;
    _fprintf(9772,21800,$vararg_buffer16);
    $name$i$i$sroa$15$5 = $name$i$i$sroa$15$0;
    label = 70;
   }
   else if ((label|0) == 68) {
    $164 = ($85|0)>(-1);
    $165 = ($88>>>0)>(4294967295);
    $166 = ($85|0)==(-1);
    $167 = $166 & $165;
    $168 = $164 | $167;
    if ($168) {
     $169 = (_fai_insert_index($60,$name$i$i$sroa$15$0,$88,$85,$line_len$0$i$i,$line_blen$0$i$i,$92,$93)|0);
     $170 = ($169|0)==(0);
     if ($170) {
      _free($name$i$i$sroa$15$0);
      $171 = ($60|0)==(0|0);
      if (!($171)) {
       $176 = HEAP32[$41>>2]|0;
       $177 = $176 & 1610612736;
       $178 = ($177|0)==(0);
       L100: do {
        if (!($178)) {
         $179 = (_bgzf_flush($41)|0);
         $180 = ($179|0)==(0);
         L102: do {
          if ($180) {
           $181 = ((($41)) + 60|0);
           $182 = HEAP32[$181>>2]|0;
           $183 = ($182|0)==(0|0);
           if ($183) {
            ___assert_fail((15142|0),(14205|0),1601,(15150|0));
            // unreachable;
           }
           L107: do {
            if ($15) {
             $$01$lcssa$i$i$i = $fn;
             label = 82;
            } else {
             $$014$i$i$i = $fn;$791 = $13;
             while(1) {
              $184 = HEAP8[$$014$i$i$i>>0]|0;
              $185 = ($184<<24>>24)==(0);
              if ($185) {
               $$pn$i$i$i = $791;
               break L107;
              }
              $186 = ((($$014$i$i$i)) + 1|0);
              $187 = $186;
              $188 = $187 & 3;
              $189 = ($188|0)==(0);
              if ($189) {
               $$01$lcssa$i$i$i = $186;
               label = 82;
               break;
              } else {
               $$014$i$i$i = $186;$791 = $187;
              }
             }
            }
           } while(0);
           if ((label|0) == 82) {
            $w$0$i$i$i = $$01$lcssa$i$i$i;
            while(1) {
             $190 = HEAP32[$w$0$i$i$i>>2]|0;
             $191 = (($190) + -16843009)|0;
             $192 = $190 & -2139062144;
             $193 = $192 ^ -2139062144;
             $194 = $193 & $191;
             $195 = ($194|0)==(0);
             $196 = ((($w$0$i$i$i)) + 4|0);
             if ($195) {
              $w$0$i$i$i = $196;
             } else {
              break;
             }
            }
            $197 = $190&255;
            $198 = ($197<<24>>24)==(0);
            if ($198) {
             $$1$lcssa$i$i$i = $w$0$i$i$i;
            } else {
             $$pn15$i$i$i = $w$0$i$i$i;
             while(1) {
              $199 = ((($$pn15$i$i$i)) + 1|0);
              $$pre$i$i$i = HEAP8[$199>>0]|0;
              $200 = ($$pre$i$i$i<<24>>24)==(0);
              if ($200) {
               $$1$lcssa$i$i$i = $199;
               break;
              } else {
               $$pn15$i$i$i = $199;
              }
             }
            }
            $201 = $$1$lcssa$i$i$i;
            $$pn$i$i$i = $201;
           }
           $$0$i$i$i = (($$pn$i$i$i) - ($13))|0;
           $202 = (($$0$i$i$i) + 5)|0;
           $203 = (_malloc($202)|0);
           $204 = ($203|0)==(0|0);
           if (!($204)) {
            _memcpy(($203|0),($fn|0),($$0$i$i$i|0))|0;
            $205 = (($203) + ($$0$i$i$i)|0);
            ;HEAP8[$205>>0]=HEAP8[21990>>0]|0;HEAP8[$205+1>>0]=HEAP8[21990+1>>0]|0;HEAP8[$205+2>>0]=HEAP8[21990+2>>0]|0;HEAP8[$205+3>>0]=HEAP8[21990+3>>0]|0;HEAP8[$205+4>>0]=HEAP8[21990+4>>0]|0;
            $206 = (_fopen($203,22072)|0);
            _free($203);
            $207 = ($206|0)==(0|0);
            if ($207) {
             $208 = HEAP32[6773]|0;
             $209 = ($208|0)==(0|0);
             if ($209) {
              $$0$i1$i$i = 27136;
             } else {
              $210 = (_pthread_self()|0);
              $211 = ((($210)) + 64|0);
              $212 = HEAP32[$211>>2]|0;
              $$0$i1$i$i = $212;
             }
             $213 = HEAP32[$$0$i1$i$i>>2]|0;
             $i$03$i$i$i = 0;
             while(1) {
              $215 = (24836 + ($i$03$i$i$i)|0);
              $216 = HEAP8[$215>>0]|0;
              $217 = $216&255;
              $218 = ($217|0)==($213|0);
              if ($218) {
               label = 92;
               break;
              }
              $219 = (($i$03$i$i$i) + 1)|0;
              $220 = ($219|0)==(87);
              if ($220) {
               $i$12$i$i$i = 87;$s$01$i$i$i = 24924;
               label = 95;
               break;
              } else {
               $i$03$i$i$i = $219;
              }
             }
             if ((label|0) == 92) {
              $214 = ($i$03$i$i$i|0)==(0);
              if ($214) {
               $s$0$lcssa$i$i$i = 24924;
              } else {
               $i$12$i$i$i = $i$03$i$i$i;$s$01$i$i$i = 24924;
               label = 95;
              }
             }
             if ((label|0) == 95) {
              while(1) {
               label = 0;
               $s$1$i$i$i = $s$01$i$i$i;
               while(1) {
                $221 = HEAP8[$s$1$i$i$i>>0]|0;
                $222 = ($221<<24>>24)==(0);
                $223 = ((($s$1$i$i$i)) + 1|0);
                if ($222) {
                 break;
                } else {
                 $s$1$i$i$i = $223;
                }
               }
               $224 = (($i$12$i$i$i) + -1)|0;
               $225 = ($224|0)==(0);
               if ($225) {
                $s$0$lcssa$i$i$i = $223;
                break;
               } else {
                $i$12$i$i$i = $224;$s$01$i$i$i = $223;
                label = 95;
               }
              }
             }
             HEAP32[$vararg_buffer21>>2] = 15150;
             $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
             HEAP32[$vararg_ptr24>>2] = $fn;
             $vararg_ptr25 = ((($vararg_buffer21)) + 8|0);
             HEAP32[$vararg_ptr25>>2] = 21990;
             $vararg_ptr26 = ((($vararg_buffer21)) + 12|0);
             HEAP32[$vararg_ptr26>>2] = $s$0$lcssa$i$i$i;
             _fprintf(9772,15166,$vararg_buffer21);
             break;
            }
            $226 = HEAP32[$181>>2]|0;
            $227 = HEAP32[$226>>2]|0;
            $228 = (($227) + -1)|0;
            $229 = ($228|0)<(0);
            $230 = $229 << 31 >> 31;
            $231 = $2;
            $232 = $231;
            HEAP32[$232>>2] = $228;
            $233 = (($231) + 4)|0;
            $234 = $233;
            HEAP32[$234>>2] = $230;
            $$phi$trans$insert = ((($206)) + 76|0);
            $$pre = HEAP32[$$phi$trans$insert>>2]|0;
            $235 = ($$pre|0)>(-1);
            $236 = ((($206)) + 16|0);
            $237 = HEAP32[$236>>2]|0;
            $238 = ($237|0)==(0|0);
            L140: do {
             if ($235) {
              do {
               if ($238) {
                $285 = ((($206)) + 74|0);
                $286 = HEAP8[$285>>0]|0;
                $287 = $286 << 24 >> 24;
                $288 = (($287) + 255)|0;
                $289 = $288 | $287;
                $290 = $289&255;
                HEAP8[$285>>0] = $290;
                $291 = HEAP32[$206>>2]|0;
                $292 = $291 & 8;
                $293 = ($292|0)==(0);
                if ($293) {
                 $295 = ((($206)) + 8|0);
                 HEAP32[$295>>2] = 0;
                 $296 = ((($206)) + 4|0);
                 HEAP32[$296>>2] = 0;
                 $297 = ((($206)) + 44|0);
                 $298 = HEAP32[$297>>2]|0;
                 $299 = ((($206)) + 28|0);
                 HEAP32[$299>>2] = $298;
                 $300 = ((($206)) + 20|0);
                 HEAP32[$300>>2] = $298;
                 $301 = $298;
                 $302 = ((($206)) + 48|0);
                 $303 = HEAP32[$302>>2]|0;
                 $304 = (($301) + ($303)|0);
                 HEAP32[$236>>2] = $304;
                 $$in201 = $304;$$pre$phi125Z2D = $300;$307 = $298;
                 break;
                } else {
                 $294 = $291 | 32;
                 HEAP32[$206>>2] = $294;
                 label = 127;
                 break L140;
                }
               } else {
                $$phi$trans$insert109 = ((($206)) + 20|0);
                $$pre111 = HEAP32[$$phi$trans$insert109>>2]|0;
                $$in201 = $237;$$pre$phi125Z2D = $$phi$trans$insert109;$307 = $$pre111;
               }
              } while(0);
              $305 = $$in201;
              $306 = (($305) - ($307))|0;
              $308 = ($306>>>0)<(8);
              $309 = $307;
              if ($308) {
               $310 = ((($206)) + 36|0);
               $311 = HEAP32[$310>>2]|0;
               $312 = (FUNCTION_TABLE_iiii[$311 & 127]($206,$2,8)|0);
               $332 = $312;
               label = 126;
               break;
              }
              $313 = ((($206)) + 75|0);
              $314 = HEAP8[$313>>0]|0;
              $315 = ($314<<24>>24)>(-1);
              L152: do {
               if ($315) {
                $i$0$i104$i$i = 8;
                while(1) {
                 $316 = ($i$0$i104$i$i|0)==(0);
                 if ($316) {
                  $$01$i110$i$i = 8;$$02$i109$i$i = $2;$327 = $309;$i$1$i111$i$i = 0;
                  break L152;
                 }
                 $317 = (($i$0$i104$i$i) + -1)|0;
                 $318 = (($2) + ($317)|0);
                 $319 = HEAP8[$318>>0]|0;
                 $320 = ($319<<24>>24)==(10);
                 if ($320) {
                  break;
                 } else {
                  $i$0$i104$i$i = $317;
                 }
                }
                $321 = ((($206)) + 36|0);
                $322 = HEAP32[$321>>2]|0;
                $323 = (FUNCTION_TABLE_iiii[$322 & 127]($206,$2,$i$0$i104$i$i)|0);
                $324 = ($323>>>0)<($i$0$i104$i$i>>>0);
                if ($324) {
                 $332 = $i$0$i104$i$i;
                 label = 126;
                 break L140;
                }
                $325 = (($2) + ($i$0$i104$i$i)|0);
                $326 = (8 - ($i$0$i104$i$i))|0;
                $$pre6$i107$i$i = HEAP32[$$pre$phi125Z2D>>2]|0;
                $$01$i110$i$i = $326;$$02$i109$i$i = $325;$327 = $$pre6$i107$i$i;$i$1$i111$i$i = $i$0$i104$i$i;
               } else {
                $$01$i110$i$i = 8;$$02$i109$i$i = $2;$327 = $309;$i$1$i111$i$i = 0;
               }
              } while(0);
              _memcpy(($327|0),($$02$i109$i$i|0),($$01$i110$i$i|0))|0;
              $328 = HEAP32[$$pre$phi125Z2D>>2]|0;
              $329 = (($328) + ($$01$i110$i$i)|0);
              HEAP32[$$pre$phi125Z2D>>2] = $329;
              $330 = (($i$1$i111$i$i) + ($$01$i110$i$i))|0;
              $332 = $330;
              label = 126;
             } else {
              do {
               if ($238) {
                $239 = ((($206)) + 74|0);
                $240 = HEAP8[$239>>0]|0;
                $241 = $240 << 24 >> 24;
                $242 = (($241) + 255)|0;
                $243 = $242 | $241;
                $244 = $243&255;
                HEAP8[$239>>0] = $244;
                $245 = HEAP32[$206>>2]|0;
                $246 = $245 & 8;
                $247 = ($246|0)==(0);
                if ($247) {
                 $249 = ((($206)) + 8|0);
                 HEAP32[$249>>2] = 0;
                 $250 = ((($206)) + 4|0);
                 HEAP32[$250>>2] = 0;
                 $251 = ((($206)) + 44|0);
                 $252 = HEAP32[$251>>2]|0;
                 $253 = ((($206)) + 28|0);
                 HEAP32[$253>>2] = $252;
                 $254 = ((($206)) + 20|0);
                 HEAP32[$254>>2] = $252;
                 $255 = $252;
                 $256 = ((($206)) + 48|0);
                 $257 = HEAP32[$256>>2]|0;
                 $258 = (($255) + ($257)|0);
                 HEAP32[$236>>2] = $258;
                 $$in = $258;$$pre$phi127Z2D = $254;$261 = $252;
                 break;
                } else {
                 $248 = $245 | 32;
                 HEAP32[$206>>2] = $248;
                 label = 127;
                 break L140;
                }
               } else {
                $$phi$trans$insert106 = ((($206)) + 20|0);
                $$pre108 = HEAP32[$$phi$trans$insert106>>2]|0;
                $$in = $237;$$pre$phi127Z2D = $$phi$trans$insert106;$261 = $$pre108;
               }
              } while(0);
              $259 = $$in;
              $260 = (($259) - ($261))|0;
              $262 = ($260>>>0)<(8);
              $263 = $261;
              if ($262) {
               $264 = ((($206)) + 36|0);
               $265 = HEAP32[$264>>2]|0;
               $266 = (FUNCTION_TABLE_iiii[$265 & 127]($206,$2,8)|0);
               $332 = $266;
               label = 126;
               break;
              }
              $267 = ((($206)) + 75|0);
              $268 = HEAP8[$267>>0]|0;
              $269 = ($268<<24>>24)>(-1);
              L170: do {
               if ($269) {
                $i$0$i$i$i = 8;
                while(1) {
                 $270 = ($i$0$i$i$i|0)==(0);
                 if ($270) {
                  $$01$i$i$i = 8;$$02$i$i$i = $2;$281 = $263;$i$1$i$i$i = 0;
                  break L170;
                 }
                 $271 = (($i$0$i$i$i) + -1)|0;
                 $272 = (($2) + ($271)|0);
                 $273 = HEAP8[$272>>0]|0;
                 $274 = ($273<<24>>24)==(10);
                 if ($274) {
                  break;
                 } else {
                  $i$0$i$i$i = $271;
                 }
                }
                $275 = ((($206)) + 36|0);
                $276 = HEAP32[$275>>2]|0;
                $277 = (FUNCTION_TABLE_iiii[$276 & 127]($206,$2,$i$0$i$i$i)|0);
                $278 = ($277>>>0)<($i$0$i$i$i>>>0);
                if ($278) {
                 $332 = $i$0$i$i$i;
                 label = 126;
                 break L140;
                }
                $279 = (($2) + ($i$0$i$i$i)|0);
                $280 = (8 - ($i$0$i$i$i))|0;
                $$pre6$i$i$i = HEAP32[$$pre$phi127Z2D>>2]|0;
                $$01$i$i$i = $280;$$02$i$i$i = $279;$281 = $$pre6$i$i$i;$i$1$i$i$i = $i$0$i$i$i;
               } else {
                $$01$i$i$i = 8;$$02$i$i$i = $2;$281 = $263;$i$1$i$i$i = 0;
               }
              } while(0);
              _memcpy(($281|0),($$02$i$i$i|0),($$01$i$i$i|0))|0;
              $282 = HEAP32[$$pre$phi127Z2D>>2]|0;
              $283 = (($282) + ($$01$i$i$i)|0);
              HEAP32[$$pre$phi127Z2D>>2] = $283;
              $284 = (($i$1$i$i$i) + ($$01$i$i$i))|0;
              $332 = $284;
              label = 126;
             }
            } while(0);
            do {
             if ((label|0) == 126) {
              $331 = ($332|0)==(8);
              $$mask = $332 & -8;
              $333 = ($$mask|0)==(8);
              $or$cond206 = $331 | $333;
              if (!($or$cond206)) {
               label = 127;
               break;
              }
              $334 = ((($206)) + 16|0);
              $335 = ((($206)) + 74|0);
              $336 = ((($206)) + 8|0);
              $337 = ((($206)) + 4|0);
              $338 = ((($206)) + 44|0);
              $339 = ((($206)) + 28|0);
              $340 = ((($206)) + 20|0);
              $341 = ((($206)) + 48|0);
              $342 = ((($206)) + 36|0);
              $343 = ((($206)) + 75|0);
              $i$0$i$i = 1;
              L180: while(1) {
               $344 = HEAP32[$181>>2]|0;
               $345 = HEAP32[$344>>2]|0;
               $346 = ($i$0$i$i|0)<($345|0);
               if (!($346)) {
                label = 189;
                break;
               }
               $347 = ((($344)) + 8|0);
               $348 = HEAP32[$347>>2]|0;
               $349 = (((($348) + ($i$0$i$i<<4)|0)) + 8|0);
               $350 = $349;
               $351 = $350;
               $352 = HEAP32[$351>>2]|0;
               $353 = (($350) + 4)|0;
               $354 = $353;
               $355 = HEAP32[$354>>2]|0;
               $356 = $1;
               $357 = $356;
               HEAP32[$357>>2] = $352;
               $358 = (($356) + 4)|0;
               $359 = $358;
               HEAP32[$359>>2] = $355;
               $$pre113 = HEAP32[$$phi$trans$insert>>2]|0;
               $360 = ($$pre113|0)>(-1);
               $361 = HEAP32[$334>>2]|0;
               $362 = ($361|0)==(0|0);
               L183: do {
                if ($360) {
                 if ($362) {
                  $399 = HEAP8[$335>>0]|0;
                  $400 = $399 << 24 >> 24;
                  $401 = (($400) + 255)|0;
                  $402 = $401 | $400;
                  $403 = $402&255;
                  HEAP8[$335>>0] = $403;
                  $404 = HEAP32[$206>>2]|0;
                  $405 = $404 & 8;
                  $406 = ($405|0)==(0);
                  if (!($406)) {
                   label = 147;
                   break L180;
                  }
                  HEAP32[$336>>2] = 0;
                  HEAP32[$337>>2] = 0;
                  $408 = HEAP32[$338>>2]|0;
                  HEAP32[$339>>2] = $408;
                  HEAP32[$340>>2] = $408;
                  $409 = $408;
                  $410 = HEAP32[$341>>2]|0;
                  $411 = (($409) + ($410)|0);
                  HEAP32[$334>>2] = $411;
                  $$in200 = $411;$414 = $408;
                 } else {
                  $$pre115 = HEAP32[$340>>2]|0;
                  $$in200 = $361;$414 = $$pre115;
                 }
                 $412 = $$in200;
                 $413 = (($412) - ($414))|0;
                 $415 = ($413>>>0)<(8);
                 $416 = $414;
                 if ($415) {
                  $417 = HEAP32[$342>>2]|0;
                  $418 = (FUNCTION_TABLE_iiii[$417 & 127]($206,$1,8)|0);
                  $436 = $418;
                  break;
                 }
                 $419 = HEAP8[$343>>0]|0;
                 $420 = ($419<<24>>24)>(-1);
                 L193: do {
                  if ($420) {
                   $i$0$i122$i$i = 8;
                   while(1) {
                    $421 = ($i$0$i122$i$i|0)==(0);
                    if ($421) {
                     $$01$i128$i$i = 8;$$02$i127$i$i = $1;$431 = $416;$i$1$i129$i$i = 0;
                     break L193;
                    }
                    $422 = (($i$0$i122$i$i) + -1)|0;
                    $423 = (($1) + ($422)|0);
                    $424 = HEAP8[$423>>0]|0;
                    $425 = ($424<<24>>24)==(10);
                    if ($425) {
                     break;
                    } else {
                     $i$0$i122$i$i = $422;
                    }
                   }
                   $426 = HEAP32[$342>>2]|0;
                   $427 = (FUNCTION_TABLE_iiii[$426 & 127]($206,$1,$i$0$i122$i$i)|0);
                   $428 = ($427>>>0)<($i$0$i122$i$i>>>0);
                   if ($428) {
                    $436 = $i$0$i122$i$i;
                    break L183;
                   }
                   $429 = (($1) + ($i$0$i122$i$i)|0);
                   $430 = (8 - ($i$0$i122$i$i))|0;
                   $$pre6$i125$i$i = HEAP32[$340>>2]|0;
                   $$01$i128$i$i = $430;$$02$i127$i$i = $429;$431 = $$pre6$i125$i$i;$i$1$i129$i$i = $i$0$i122$i$i;
                  } else {
                   $$01$i128$i$i = 8;$$02$i127$i$i = $1;$431 = $416;$i$1$i129$i$i = 0;
                  }
                 } while(0);
                 _memcpy(($431|0),($$02$i127$i$i|0),($$01$i128$i$i|0))|0;
                 $432 = HEAP32[$340>>2]|0;
                 $433 = (($432) + ($$01$i128$i$i)|0);
                 HEAP32[$340>>2] = $433;
                 $434 = (($i$1$i129$i$i) + ($$01$i128$i$i))|0;
                 $436 = $434;
                } else {
                 if ($362) {
                  $363 = HEAP8[$335>>0]|0;
                  $364 = $363 << 24 >> 24;
                  $365 = (($364) + 255)|0;
                  $366 = $365 | $364;
                  $367 = $366&255;
                  HEAP8[$335>>0] = $367;
                  $368 = HEAP32[$206>>2]|0;
                  $369 = $368 & 8;
                  $370 = ($369|0)==(0);
                  if (!($370)) {
                   label = 134;
                   break L180;
                  }
                  HEAP32[$336>>2] = 0;
                  HEAP32[$337>>2] = 0;
                  $372 = HEAP32[$338>>2]|0;
                  HEAP32[$339>>2] = $372;
                  HEAP32[$340>>2] = $372;
                  $373 = $372;
                  $374 = HEAP32[$341>>2]|0;
                  $375 = (($373) + ($374)|0);
                  HEAP32[$334>>2] = $375;
                  $$in195 = $375;$378 = $372;
                 } else {
                  $$pre114 = HEAP32[$340>>2]|0;
                  $$in195 = $361;$378 = $$pre114;
                 }
                 $376 = $$in195;
                 $377 = (($376) - ($378))|0;
                 $379 = ($377>>>0)<(8);
                 $380 = $378;
                 if ($379) {
                  $381 = HEAP32[$342>>2]|0;
                  $382 = (FUNCTION_TABLE_iiii[$381 & 127]($206,$1,8)|0);
                  $436 = $382;
                  break;
                 }
                 $383 = HEAP8[$343>>0]|0;
                 $384 = ($383<<24>>24)>(-1);
                 L209: do {
                  if ($384) {
                   $i$0$i20$i$i = 8;
                   while(1) {
                    $385 = ($i$0$i20$i$i|0)==(0);
                    if ($385) {
                     $$01$i26$i$i = 8;$$02$i25$i$i = $1;$395 = $380;$i$1$i27$i$i = 0;
                     break L209;
                    }
                    $386 = (($i$0$i20$i$i) + -1)|0;
                    $387 = (($1) + ($386)|0);
                    $388 = HEAP8[$387>>0]|0;
                    $389 = ($388<<24>>24)==(10);
                    if ($389) {
                     break;
                    } else {
                     $i$0$i20$i$i = $386;
                    }
                   }
                   $390 = HEAP32[$342>>2]|0;
                   $391 = (FUNCTION_TABLE_iiii[$390 & 127]($206,$1,$i$0$i20$i$i)|0);
                   $392 = ($391>>>0)<($i$0$i20$i$i>>>0);
                   if ($392) {
                    $436 = $i$0$i20$i$i;
                    break L183;
                   }
                   $393 = (($1) + ($i$0$i20$i$i)|0);
                   $394 = (8 - ($i$0$i20$i$i))|0;
                   $$pre6$i23$i$i = HEAP32[$340>>2]|0;
                   $$01$i26$i$i = $394;$$02$i25$i$i = $393;$395 = $$pre6$i23$i$i;$i$1$i27$i$i = $i$0$i20$i$i;
                  } else {
                   $$01$i26$i$i = 8;$$02$i25$i$i = $1;$395 = $380;$i$1$i27$i$i = 0;
                  }
                 } while(0);
                 _memcpy(($395|0),($$02$i25$i$i|0),($$01$i26$i$i|0))|0;
                 $396 = HEAP32[$340>>2]|0;
                 $397 = (($396) + ($$01$i26$i$i)|0);
                 HEAP32[$340>>2] = $397;
                 $398 = (($i$1$i27$i$i) + ($$01$i26$i$i))|0;
                 $436 = $398;
                }
               } while(0);
               $435 = ($436|0)==(8);
               $$mask196 = $436 & -8;
               $437 = ($$mask196|0)==(8);
               $or$cond208 = $435 | $437;
               if (!($or$cond208)) {
                label = 158;
                break;
               }
               $438 = HEAP32[$181>>2]|0;
               $439 = ((($438)) + 8|0);
               $440 = HEAP32[$439>>2]|0;
               $441 = (($440) + ($i$0$i$i<<4)|0);
               $442 = $441;
               $443 = $442;
               $444 = HEAP32[$443>>2]|0;
               $445 = (($442) + 4)|0;
               $446 = $445;
               $447 = HEAP32[$446>>2]|0;
               $448 = $0;
               $449 = $448;
               HEAP32[$449>>2] = $444;
               $450 = (($448) + 4)|0;
               $451 = $450;
               HEAP32[$451>>2] = $447;
               $$pre116 = HEAP32[$$phi$trans$insert>>2]|0;
               $452 = ($$pre116|0)>(-1);
               $453 = HEAP32[$334>>2]|0;
               $454 = ($453|0)==(0|0);
               L218: do {
                if ($452) {
                 if ($454) {
                  $491 = HEAP8[$335>>0]|0;
                  $492 = $491 << 24 >> 24;
                  $493 = (($492) + 255)|0;
                  $494 = $493 | $492;
                  $495 = $494&255;
                  HEAP8[$335>>0] = $495;
                  $496 = HEAP32[$206>>2]|0;
                  $497 = $496 & 8;
                  $498 = ($497|0)==(0);
                  if (!($498)) {
                   label = 176;
                   break L180;
                  }
                  HEAP32[$336>>2] = 0;
                  HEAP32[$337>>2] = 0;
                  $500 = HEAP32[$338>>2]|0;
                  HEAP32[$339>>2] = $500;
                  HEAP32[$340>>2] = $500;
                  $501 = $500;
                  $502 = HEAP32[$341>>2]|0;
                  $503 = (($501) + ($502)|0);
                  HEAP32[$334>>2] = $503;
                  $$in199 = $503;$506 = $500;
                 } else {
                  $$pre118 = HEAP32[$340>>2]|0;
                  $$in199 = $453;$506 = $$pre118;
                 }
                 $504 = $$in199;
                 $505 = (($504) - ($506))|0;
                 $507 = ($505>>>0)<(8);
                 $508 = $506;
                 if ($507) {
                  $509 = HEAP32[$342>>2]|0;
                  $510 = (FUNCTION_TABLE_iiii[$509 & 127]($206,$0,8)|0);
                  $528 = $510;
                  break;
                 }
                 $511 = HEAP8[$343>>0]|0;
                 $512 = ($511<<24>>24)>(-1);
                 L228: do {
                  if ($512) {
                   $i$0$i88$i$i = 8;
                   while(1) {
                    $513 = ($i$0$i88$i$i|0)==(0);
                    if ($513) {
                     $$01$i94$i$i = 8;$$02$i93$i$i = $0;$523 = $508;$i$1$i95$i$i = 0;
                     break L228;
                    }
                    $514 = (($i$0$i88$i$i) + -1)|0;
                    $515 = (($0) + ($514)|0);
                    $516 = HEAP8[$515>>0]|0;
                    $517 = ($516<<24>>24)==(10);
                    if ($517) {
                     break;
                    } else {
                     $i$0$i88$i$i = $514;
                    }
                   }
                   $518 = HEAP32[$342>>2]|0;
                   $519 = (FUNCTION_TABLE_iiii[$518 & 127]($206,$0,$i$0$i88$i$i)|0);
                   $520 = ($519>>>0)<($i$0$i88$i$i>>>0);
                   if ($520) {
                    $528 = $i$0$i88$i$i;
                    break L218;
                   }
                   $521 = (($0) + ($i$0$i88$i$i)|0);
                   $522 = (8 - ($i$0$i88$i$i))|0;
                   $$pre6$i91$i$i = HEAP32[$340>>2]|0;
                   $$01$i94$i$i = $522;$$02$i93$i$i = $521;$523 = $$pre6$i91$i$i;$i$1$i95$i$i = $i$0$i88$i$i;
                  } else {
                   $$01$i94$i$i = 8;$$02$i93$i$i = $0;$523 = $508;$i$1$i95$i$i = 0;
                  }
                 } while(0);
                 _memcpy(($523|0),($$02$i93$i$i|0),($$01$i94$i$i|0))|0;
                 $524 = HEAP32[$340>>2]|0;
                 $525 = (($524) + ($$01$i94$i$i)|0);
                 HEAP32[$340>>2] = $525;
                 $526 = (($i$1$i95$i$i) + ($$01$i94$i$i))|0;
                 $528 = $526;
                } else {
                 if ($454) {
                  $455 = HEAP8[$335>>0]|0;
                  $456 = $455 << 24 >> 24;
                  $457 = (($456) + 255)|0;
                  $458 = $457 | $456;
                  $459 = $458&255;
                  HEAP8[$335>>0] = $459;
                  $460 = HEAP32[$206>>2]|0;
                  $461 = $460 & 8;
                  $462 = ($461|0)==(0);
                  if (!($462)) {
                   label = 163;
                   break L180;
                  }
                  HEAP32[$336>>2] = 0;
                  HEAP32[$337>>2] = 0;
                  $464 = HEAP32[$338>>2]|0;
                  HEAP32[$339>>2] = $464;
                  HEAP32[$340>>2] = $464;
                  $465 = $464;
                  $466 = HEAP32[$341>>2]|0;
                  $467 = (($465) + ($466)|0);
                  HEAP32[$334>>2] = $467;
                  $$in197 = $467;$470 = $464;
                 } else {
                  $$pre117 = HEAP32[$340>>2]|0;
                  $$in197 = $453;$470 = $$pre117;
                 }
                 $468 = $$in197;
                 $469 = (($468) - ($470))|0;
                 $471 = ($469>>>0)<(8);
                 $472 = $470;
                 if ($471) {
                  $473 = HEAP32[$342>>2]|0;
                  $474 = (FUNCTION_TABLE_iiii[$473 & 127]($206,$0,8)|0);
                  $528 = $474;
                  break;
                 }
                 $475 = HEAP8[$343>>0]|0;
                 $476 = ($475<<24>>24)>(-1);
                 L244: do {
                  if ($476) {
                   $i$0$i41$i$i = 8;
                   while(1) {
                    $477 = ($i$0$i41$i$i|0)==(0);
                    if ($477) {
                     $$01$i47$i$i = 8;$$02$i46$i$i = $0;$487 = $472;$i$1$i48$i$i = 0;
                     break L244;
                    }
                    $478 = (($i$0$i41$i$i) + -1)|0;
                    $479 = (($0) + ($478)|0);
                    $480 = HEAP8[$479>>0]|0;
                    $481 = ($480<<24>>24)==(10);
                    if ($481) {
                     break;
                    } else {
                     $i$0$i41$i$i = $478;
                    }
                   }
                   $482 = HEAP32[$342>>2]|0;
                   $483 = (FUNCTION_TABLE_iiii[$482 & 127]($206,$0,$i$0$i41$i$i)|0);
                   $484 = ($483>>>0)<($i$0$i41$i$i>>>0);
                   if ($484) {
                    $528 = $i$0$i41$i$i;
                    break L218;
                   }
                   $485 = (($0) + ($i$0$i41$i$i)|0);
                   $486 = (8 - ($i$0$i41$i$i))|0;
                   $$pre6$i44$i$i = HEAP32[$340>>2]|0;
                   $$01$i47$i$i = $486;$$02$i46$i$i = $485;$487 = $$pre6$i44$i$i;$i$1$i48$i$i = $i$0$i41$i$i;
                  } else {
                   $$01$i47$i$i = 8;$$02$i46$i$i = $0;$487 = $472;$i$1$i48$i$i = 0;
                  }
                 } while(0);
                 _memcpy(($487|0),($$02$i46$i$i|0),($$01$i47$i$i|0))|0;
                 $488 = HEAP32[$340>>2]|0;
                 $489 = (($488) + ($$01$i47$i$i)|0);
                 HEAP32[$340>>2] = $489;
                 $490 = (($i$1$i48$i$i) + ($$01$i47$i$i))|0;
                 $528 = $490;
                }
               } while(0);
               $527 = ($528|0)==(8);
               $$mask198 = $528 & -8;
               $529 = ($$mask198|0)==(8);
               $or$cond210 = $527 | $529;
               if (!($or$cond210)) {
                label = 187;
                break;
               }
               $530 = (($i$0$i$i) + 1)|0;
               $i$0$i$i = $530;
              }
              if ((label|0) == 134) {
               $371 = $368 | 32;
               HEAP32[$206>>2] = $371;
               label = 158;
              }
              else if ((label|0) == 147) {
               $407 = $404 | 32;
               HEAP32[$206>>2] = $407;
               label = 158;
              }
              else if ((label|0) == 163) {
               $463 = $460 | 32;
               HEAP32[$206>>2] = $463;
               label = 187;
              }
              else if ((label|0) == 176) {
               $499 = $496 | 32;
               HEAP32[$206>>2] = $499;
               label = 187;
              }
              else if ((label|0) == 189) {
               $531 = (_fclose($206)|0);
               $532 = ($531|0)<(0);
               if (!($532)) {
                break L100;
               }
               $533 = HEAP32[6773]|0;
               $534 = ($533|0)==(0|0);
               if ($534) {
                $$0$i52$i$i = 27136;
               } else {
                $535 = (_pthread_self()|0);
                $536 = ((($535)) + 64|0);
                $537 = HEAP32[$536>>2]|0;
                $$0$i52$i$i = $537;
               }
               $538 = HEAP32[$$0$i52$i$i>>2]|0;
               $i$03$i55$i$i = 0;
               while(1) {
                $540 = (24836 + ($i$03$i55$i$i)|0);
                $541 = HEAP8[$540>>0]|0;
                $542 = $541&255;
                $543 = ($542|0)==($538|0);
                if ($543) {
                 label = 193;
                 break;
                }
                $544 = (($i$03$i55$i$i) + 1)|0;
                $545 = ($544|0)==(87);
                if ($545) {
                 $i$12$i59$i$i = 87;$s$01$i60$i$i = 24924;
                 label = 196;
                 break;
                } else {
                 $i$03$i55$i$i = $544;
                }
               }
               if ((label|0) == 193) {
                $539 = ($i$03$i55$i$i|0)==(0);
                if ($539) {
                 $s$0$lcssa$i65$i$i = 24924;
                } else {
                 $i$12$i59$i$i = $i$03$i55$i$i;$s$01$i60$i$i = 24924;
                 label = 196;
                }
               }
               if ((label|0) == 196) {
                while(1) {
                 label = 0;
                 $s$1$i62$i$i = $s$01$i60$i$i;
                 while(1) {
                  $546 = HEAP8[$s$1$i62$i$i>>0]|0;
                  $547 = ($546<<24>>24)==(0);
                  $548 = ((($s$1$i62$i$i)) + 1|0);
                  if ($547) {
                   break;
                  } else {
                   $s$1$i62$i$i = $548;
                  }
                 }
                 $549 = (($i$12$i59$i$i) + -1)|0;
                 $550 = ($549|0)==(0);
                 if ($550) {
                  $s$0$lcssa$i65$i$i = $548;
                  break;
                 } else {
                  $i$12$i59$i$i = $549;$s$01$i60$i$i = $548;
                  label = 196;
                 }
                }
               }
               HEAP32[$vararg_buffer27>>2] = 15150;
               $vararg_ptr30 = ((($vararg_buffer27)) + 4|0);
               HEAP32[$vararg_ptr30>>2] = $fn;
               $vararg_ptr31 = ((($vararg_buffer27)) + 8|0);
               HEAP32[$vararg_ptr31>>2] = 21990;
               $vararg_ptr32 = ((($vararg_buffer27)) + 12|0);
               HEAP32[$vararg_ptr32>>2] = $s$0$lcssa$i65$i$i;
               _fprintf(9772,15199,$vararg_buffer27);
               break L102;
              }
              if ((label|0) == 158) {
               break;
              }
              else if ((label|0) == 187) {
               break;
              }
             }
            } while(0);
            if ((label|0) == 127) {
            }
            $551 = HEAP32[6773]|0;
            $552 = ($551|0)==(0|0);
            if ($552) {
             $$0$i67$i$i = 27136;
            } else {
             $553 = (_pthread_self()|0);
             $554 = ((($553)) + 64|0);
             $555 = HEAP32[$554>>2]|0;
             $$0$i67$i$i = $555;
            }
            $556 = HEAP32[$$0$i67$i$i>>2]|0;
            $i$03$i70$i$i = 0;
            while(1) {
             $558 = (24836 + ($i$03$i70$i$i)|0);
             $559 = HEAP8[$558>>0]|0;
             $560 = $559&255;
             $561 = ($560|0)==($556|0);
             if ($561) {
              label = 203;
              break;
             }
             $562 = (($i$03$i70$i$i) + 1)|0;
             $563 = ($562|0)==(87);
             if ($563) {
              $i$12$i74$i$i = 87;$s$01$i75$i$i = 24924;
              label = 206;
              break;
             } else {
              $i$03$i70$i$i = $562;
             }
            }
            if ((label|0) == 203) {
             $557 = ($i$03$i70$i$i|0)==(0);
             if ($557) {
              $s$0$lcssa$i80$i$i = 24924;
             } else {
              $i$12$i74$i$i = $i$03$i70$i$i;$s$01$i75$i$i = 24924;
              label = 206;
             }
            }
            if ((label|0) == 206) {
             while(1) {
              label = 0;
              $s$1$i77$i$i = $s$01$i75$i$i;
              while(1) {
               $564 = HEAP8[$s$1$i77$i$i>>0]|0;
               $565 = ($564<<24>>24)==(0);
               $566 = ((($s$1$i77$i$i)) + 1|0);
               if ($565) {
                break;
               } else {
                $s$1$i77$i$i = $566;
               }
              }
              $567 = (($i$12$i74$i$i) + -1)|0;
              $568 = ($567|0)==(0);
              if ($568) {
               $s$0$lcssa$i80$i$i = $566;
               break;
              } else {
               $i$12$i74$i$i = $567;$s$01$i75$i$i = $566;
               label = 206;
              }
             }
            }
            HEAP32[$vararg_buffer33>>2] = 15150;
            $vararg_ptr36 = ((($vararg_buffer33)) + 4|0);
            HEAP32[$vararg_ptr36>>2] = $fn;
            $vararg_ptr37 = ((($vararg_buffer33)) + 8|0);
            HEAP32[$vararg_ptr37>>2] = 21990;
            $vararg_ptr38 = ((($vararg_buffer33)) + 12|0);
            HEAP32[$vararg_ptr38>>2] = $s$0$lcssa$i80$i$i;
            _fprintf(9772,15235,$vararg_buffer33);
            (_fclose($206)|0);
           }
          }
         } while(0);
         HEAP32[$vararg_buffer39>>2] = $fn;
         _fprintf(9772,21995,$vararg_buffer39);
         _fai_destroy($60);
         _free($35);
         $$0 = 0;
         STACKTOP = sp;return ($$0|0);
        }
       } while(0);
       $569 = (_bgzf_close($41)|0);
       $570 = ($569|0)<(0);
       if ($570) {
        HEAP32[$vararg_buffer42>>2] = $fn;
        _fprintf(9772,22039,$vararg_buffer42);
        _fai_destroy($60);
        _free($35);
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $571 = (_fopen($35,22072)|0);
       $572 = ($571|0)==(0|0);
       if ($572) {
        HEAP32[$vararg_buffer45>>2] = $35;
        _fprintf(9772,22075,$vararg_buffer45);
        _fai_destroy($60);
        _free($35);
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $573 = ((($60)) + 4|0);
       $574 = ((($60)) + 16|0);
       $575 = ((($60)) + 12|0);
       $i$0$i4$i = 0;
       while(1) {
        $576 = HEAP32[$573>>2]|0;
        $577 = ($i$0$i4$i|0)<($576|0);
        if (!($577)) {
         break;
        }
        $578 = HEAP32[$574>>2]|0;
        $579 = HEAP32[$575>>2]|0;
        $580 = (($579) + ($i$0$i4$i<<2)|0);
        $581 = HEAP32[$580>>2]|0;
        $582 = HEAP32[$578>>2]|0;
        $583 = ($582|0)==(0);
        L310: do {
         if ($583) {
          $$0$i$i7$i = 0;
         } else {
          $584 = (($582) + -1)|0;
          $585 = HEAP8[$581>>0]|0;
          $586 = $585 << 24 >> 24;
          $587 = ($585<<24>>24)==(0);
          L312: do {
           if ($587) {
            $h$1$i$i$i$i = $586;
           } else {
            $h$0$i$i$i$i = $586;$s$pn$i$i$i$i = $581;
            while(1) {
             $$0$i$i$i5$i = ((($s$pn$i$i$i$i)) + 1|0);
             $588 = HEAP8[$$0$i$i$i5$i>>0]|0;
             $589 = ($588<<24>>24)==(0);
             if ($589) {
              $h$1$i$i$i$i = $h$0$i$i$i$i;
              break L312;
             }
             $590 = ($h$0$i$i$i$i*31)|0;
             $591 = $588 << 24 >> 24;
             $592 = (($590) + ($591))|0;
             $h$0$i$i$i$i = $592;$s$pn$i$i$i$i = $$0$i$i$i5$i;
            }
           }
          } while(0);
          $593 = $h$1$i$i$i$i & $584;
          $594 = ((($578)) + 16|0);
          $595 = HEAP32[$594>>2]|0;
          $596 = ((($578)) + 20|0);
          $i$0$i$i6$i = $593;$step$0$i$i$i = 0;
          while(1) {
           $597 = $i$0$i$i6$i >>> 4;
           $598 = (($595) + ($597<<2)|0);
           $599 = HEAP32[$598>>2]|0;
           $600 = $i$0$i$i6$i << 1;
           $601 = $600 & 30;
           $602 = 2 << $601;
           $603 = $599 & $602;
           $604 = ($603|0)==(0);
           if (!($604)) {
            break;
           }
           $605 = 1 << $601;
           $606 = $599 & $605;
           $607 = ($606|0)==(0);
           if ($607) {
            $608 = HEAP32[$596>>2]|0;
            $609 = (($608) + ($i$0$i$i6$i<<2)|0);
            $610 = HEAP32[$609>>2]|0;
            $611 = HEAP8[$610>>0]|0;
            $612 = ($611<<24>>24)!=($585<<24>>24);
            $613 = ($611<<24>>24)==(0);
            $or$cond3$i$i$i$i = $613 | $612;
            if ($or$cond3$i$i$i$i) {
             $$lcssa$i$i$i$i = $611;$$lcssa2$i$i$i$i = $585;
            } else {
             $$014$i$i$i$i = $610;$$05$i$i$i$i = $581;
             while(1) {
              $614 = ((($$014$i$i$i$i)) + 1|0);
              $615 = ((($$05$i$i$i$i)) + 1|0);
              $616 = HEAP8[$614>>0]|0;
              $617 = HEAP8[$615>>0]|0;
              $618 = ($616<<24>>24)!=($617<<24>>24);
              $619 = ($616<<24>>24)==(0);
              $or$cond$i$i$i$i = $619 | $618;
              if ($or$cond$i$i$i$i) {
               $$lcssa$i$i$i$i = $616;$$lcssa2$i$i$i$i = $617;
               break;
              } else {
               $$014$i$i$i$i = $614;$$05$i$i$i$i = $615;
              }
             }
            }
            $620 = ($$lcssa$i$i$i$i<<24>>24)==($$lcssa2$i$i$i$i<<24>>24);
            if ($620) {
             break;
            }
           }
           $621 = (($step$0$i$i$i) + 1)|0;
           $622 = (($i$0$i$i6$i) + ($621))|0;
           $623 = $622 & $584;
           $624 = ($623|0)==($593|0);
           if ($624) {
            $$0$i$i7$i = $582;
            break L310;
           } else {
            $i$0$i$i6$i = $623;$step$0$i$i$i = $621;
           }
          }
          $625 = 3 << $601;
          $626 = $599 & $625;
          $627 = ($626|0)==(0);
          $i$0$i$i6$i$ = $627 ? $i$0$i$i6$i : $582;
          $$0$i$i7$i = $i$0$i$i6$i$;
         }
        } while(0);
        $628 = ((($578)) + 24|0);
        $629 = HEAP32[$628>>2]|0;
        $630 = (($629) + (($$0$i$i7$i*24)|0)|0);
        $631 = HEAP32[$630>>2]|0;
        $632 = (((($629) + (($$0$i$i7$i*24)|0)|0)) + 4|0);
        $633 = HEAP32[$632>>2]|0;
        $634 = (((($629) + (($$0$i$i7$i*24)|0)|0)) + 8|0);
        $635 = $634;
        $636 = $635;
        $637 = HEAP32[$636>>2]|0;
        $638 = (($635) + 4)|0;
        $639 = $638;
        $640 = HEAP32[$639>>2]|0;
        $641 = (((($629) + (($$0$i$i7$i*24)|0)|0)) + 16|0);
        $642 = $641;
        $643 = $642;
        $644 = HEAP32[$643>>2]|0;
        $645 = (($642) + 4)|0;
        $646 = $645;
        $647 = HEAP32[$646>>2]|0;
        HEAP32[$vararg_buffer48>>2] = $581;
        $vararg_ptr51 = ((($vararg_buffer48)) + 8|0);
        $648 = $vararg_ptr51;
        $649 = $648;
        HEAP32[$649>>2] = $637;
        $650 = (($648) + 4)|0;
        $651 = $650;
        HEAP32[$651>>2] = $640;
        $vararg_ptr52 = ((($vararg_buffer48)) + 16|0);
        $652 = $vararg_ptr52;
        $653 = $652;
        HEAP32[$653>>2] = $644;
        $654 = (($652) + 4)|0;
        $655 = $654;
        HEAP32[$655>>2] = $647;
        $vararg_ptr53 = ((($vararg_buffer48)) + 24|0);
        HEAP32[$vararg_ptr53>>2] = $633;
        $vararg_ptr54 = ((($vararg_buffer48)) + 28|0);
        HEAP32[$vararg_ptr54>>2] = $631;
        _fprintf($571,21858,$vararg_buffer48);
        $656 = (($i$0$i4$i) + 1)|0;
        $i$0$i4$i = $656;
       }
       (_fclose($571)|0);
       _free($35);
       _fai_destroy($60);
       break;
      }
     } else {
      $name$i$i$sroa$15$5 = $name$i$i$sroa$15$0;
      label = 70;
     }
    } else {
     $name$i$i$sroa$15$5 = $name$i$i$sroa$15$0;
     label = 70;
    }
   }
   if ((label|0) == 70) {
    _free($name$i$i$sroa$15$5);
    _fai_destroy($60);
   }
   $172 = HEAP32[$41>>2]|0;
   $173 = $172 & 1610612736;
   $174 = ($173|0)!=(0);
   $175 = ($172|0)<(0);
   $or$cond204 = $174 & $175;
   if ($or$cond204) {
    _fprintf(9772,21931,$vararg_buffer19);
   }
   (_bgzf_close($41)|0);
   _free($35);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $657 = (_bgzf_open($fn,21885)|0);
 $658 = ($657|0)==(0|0);
 if ($658) {
  _perror($fn);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $659 = HEAP32[$657>>2]|0;
 $660 = $659 & 1610612736;
 $661 = ($660|0)==(536870912);
 if (!($661)) {
  $$0 = $657;
  STACKTOP = sp;return ($$0|0);
 }
 $662 = $fn;
 $663 = $662 & 3;
 $664 = ($663|0)==(0);
 L348: do {
  if ($664) {
   $$01$lcssa$i$i7 = $fn;
   label = 237;
  } else {
   $$014$i$i4 = $fn;$792 = $662;
   while(1) {
    $665 = HEAP8[$$014$i$i4>>0]|0;
    $666 = ($665<<24>>24)==(0);
    if ($666) {
     $$pn$i$i18 = $792;
     break L348;
    }
    $667 = ((($$014$i$i4)) + 1|0);
    $668 = $667;
    $669 = $668 & 3;
    $670 = ($669|0)==(0);
    if ($670) {
     $$01$lcssa$i$i7 = $667;
     label = 237;
     break;
    } else {
     $$014$i$i4 = $667;$792 = $668;
    }
   }
  }
 } while(0);
 if ((label|0) == 237) {
  $w$0$i$i9 = $$01$lcssa$i$i7;
  while(1) {
   $671 = HEAP32[$w$0$i$i9>>2]|0;
   $672 = (($671) + -16843009)|0;
   $673 = $671 & -2139062144;
   $674 = $673 ^ -2139062144;
   $675 = $674 & $672;
   $676 = ($675|0)==(0);
   $677 = ((($w$0$i$i9)) + 4|0);
   if ($676) {
    $w$0$i$i9 = $677;
   } else {
    break;
   }
  }
  $678 = $671&255;
  $679 = ($678<<24>>24)==(0);
  if ($679) {
   $$1$lcssa$i$i15 = $w$0$i$i9;
  } else {
   $$pn15$i$i11 = $w$0$i$i9;
   while(1) {
    $680 = ((($$pn15$i$i11)) + 1|0);
    $$pre$i$i12 = HEAP8[$680>>0]|0;
    $681 = ($$pre$i$i12<<24>>24)==(0);
    if ($681) {
     $$1$lcssa$i$i15 = $680;
     break;
    } else {
     $$pn15$i$i11 = $680;
    }
   }
  }
  $682 = $$1$lcssa$i$i15;
  $$pn$i$i18 = $682;
 }
 $$0$i$i19 = (($$pn$i$i18) - ($662))|0;
 $683 = (($$0$i$i19) + 5)|0;
 $684 = (_malloc($683)|0);
 $685 = ($684|0)==(0|0);
 do {
  if (!($685)) {
   _memcpy(($684|0),($fn|0),($$0$i$i19|0))|0;
   $686 = (($684) + ($$0$i$i19)|0);
   ;HEAP8[$686>>0]=HEAP8[21990>>0]|0;HEAP8[$686+1>>0]=HEAP8[21990+1>>0]|0;HEAP8[$686+2>>0]=HEAP8[21990+2>>0]|0;HEAP8[$686+3>>0]=HEAP8[21990+3>>0]|0;HEAP8[$686+4>>0]=HEAP8[21990+4>>0]|0;
   $687 = (_fopen($684,15271)|0);
   _free($684);
   $688 = ($687|0)==(0|0);
   if ($688) {
    $689 = HEAP32[6773]|0;
    $690 = ($689|0)==(0|0);
    if ($690) {
     $$0$i1$i = 27136;
    } else {
     $691 = (_pthread_self()|0);
     $692 = ((($691)) + 64|0);
     $693 = HEAP32[$692>>2]|0;
     $$0$i1$i = $693;
    }
    $694 = HEAP32[$$0$i1$i>>2]|0;
    $i$03$i$i = 0;
    while(1) {
     $696 = (24836 + ($i$03$i$i)|0);
     $697 = HEAP8[$696>>0]|0;
     $698 = $697&255;
     $699 = ($698|0)==($694|0);
     if ($699) {
      label = 247;
      break;
     }
     $700 = (($i$03$i$i) + 1)|0;
     $701 = ($700|0)==(87);
     if ($701) {
      $i$12$i$i = 87;$s$01$i$i = 24924;
      label = 250;
      break;
     } else {
      $i$03$i$i = $700;
     }
    }
    if ((label|0) == 247) {
     $695 = ($i$03$i$i|0)==(0);
     if ($695) {
      $s$0$lcssa$i$i = 24924;
     } else {
      $i$12$i$i = $i$03$i$i;$s$01$i$i = 24924;
      label = 250;
     }
    }
    if ((label|0) == 250) {
     while(1) {
      label = 0;
      $s$1$i$i = $s$01$i$i;
      while(1) {
       $702 = HEAP8[$s$1$i$i>>0]|0;
       $703 = ($702<<24>>24)==(0);
       $704 = ((($s$1$i$i)) + 1|0);
       if ($703) {
        break;
       } else {
        $s$1$i$i = $704;
       }
      }
      $705 = (($i$12$i$i) + -1)|0;
      $706 = ($705|0)==(0);
      if ($706) {
       $s$0$lcssa$i$i = $704;
       break;
      } else {
       $i$12$i$i = $705;$s$01$i$i = $704;
       label = 250;
      }
     }
    }
    HEAP32[$vararg_buffer55>>2] = 15274;
    $vararg_ptr58 = ((($vararg_buffer55)) + 4|0);
    HEAP32[$vararg_ptr58>>2] = $fn;
    $vararg_ptr59 = ((($vararg_buffer55)) + 8|0);
    HEAP32[$vararg_ptr59>>2] = 21990;
    $vararg_ptr60 = ((($vararg_buffer55)) + 12|0);
    HEAP32[$vararg_ptr60>>2] = $s$0$lcssa$i$i;
    _fprintf(9772,15166,$vararg_buffer55);
    break;
   }
   $707 = (_malloc(24)|0);
   $708 = ($707|0)==(0|0);
   L382: do {
    if ($708) {
     $713 = ((($657)) + 60|0);
     HEAP32[$713>>2] = 0;
    } else {
     $709 = ((($707)) + -4|0);
     $710 = HEAP32[$709>>2]|0;
     $711 = $710 & 3;
     $712 = ($711|0)==(0);
     if (!($712)) {
      dest=$707; stop=dest+24|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
     }
     $714 = ((($657)) + 60|0);
     HEAP32[$714>>2] = $707;
     $715 = (_fread($x$i,8,1,$687)|0);
     $716 = ($715|0)==(1);
     if ($716) {
      $717 = $x$i;
      $718 = $717;
      $719 = HEAP32[$718>>2]|0;
      $720 = (($717) + 4)|0;
      $721 = $720;
      $722 = HEAP32[$721>>2]|0;
      $$pre121 = HEAP32[$714>>2]|0;
      $723 = (_i64Add(($719|0),($722|0),1,0)|0);
      $724 = tempRet0;
      $725 = ((($$pre121)) + 4|0);
      HEAP32[$725>>2] = $723;
      $726 = HEAP32[$714>>2]|0;
      HEAP32[$726>>2] = $723;
      $727 = HEAP32[$714>>2]|0;
      $728 = ((($727)) + 4|0);
      $729 = HEAP32[$728>>2]|0;
      $730 = $729 << 4;
      $731 = (_malloc($730)|0);
      $732 = HEAP32[$714>>2]|0;
      $733 = ((($732)) + 8|0);
      HEAP32[$733>>2] = $731;
      $734 = HEAP32[$714>>2]|0;
      $735 = ((($734)) + 8|0);
      $736 = HEAP32[$735>>2]|0;
      $737 = ($736|0)==(0|0);
      if (!($737)) {
       $738 = $736;
       $739 = $738;
       HEAP32[$739>>2] = 0;
       $740 = (($738) + 4)|0;
       $741 = $740;
       HEAP32[$741>>2] = 0;
       $742 = HEAP32[$714>>2]|0;
       $743 = ((($742)) + 8|0);
       $744 = HEAP32[$743>>2]|0;
       $745 = ((($744)) + 8|0);
       $746 = $745;
       $747 = $746;
       HEAP32[$747>>2] = 0;
       $748 = (($746) + 4)|0;
       $749 = $748;
       HEAP32[$749>>2] = 0;
       $i$0$i = 1;
       while(1) {
        $750 = HEAP32[$714>>2]|0;
        $751 = HEAP32[$750>>2]|0;
        $752 = ($i$0$i|0)<($751|0);
        if (!($752)) {
         break;
        }
        $753 = ((($750)) + 8|0);
        $754 = HEAP32[$753>>2]|0;
        $755 = (((($754) + ($i$0$i<<4)|0)) + 8|0);
        $756 = (_fread($755,8,1,$687)|0);
        $757 = ($756|0)==(1);
        if (!($757)) {
         break L382;
        }
        $$pre123 = HEAP32[$714>>2]|0;
        $758 = ((($$pre123)) + 8|0);
        $759 = HEAP32[$758>>2]|0;
        $760 = (($759) + ($i$0$i<<4)|0);
        $761 = (_fread($760,8,1,$687)|0);
        $762 = ($761|0)==(1);
        if (!($762)) {
         break L382;
        }
        $763 = (($i$0$i) + 1)|0;
        $i$0$i = $763;
       }
       $764 = (_fclose($687)|0);
       $765 = ($764|0)==(0);
       if ($765) {
        $$0 = $657;
        STACKTOP = sp;return ($$0|0);
       }
      }
     }
    }
   } while(0);
   $766 = HEAP32[6773]|0;
   $767 = ($766|0)==(0|0);
   if ($767) {
    $$0$i9$i = 27136;
   } else {
    $768 = (_pthread_self()|0);
    $769 = ((($768)) + 64|0);
    $770 = HEAP32[$769>>2]|0;
    $$0$i9$i = $770;
   }
   $771 = HEAP32[$$0$i9$i>>2]|0;
   $i$03$i12$i = 0;
   while(1) {
    $773 = (24836 + ($i$03$i12$i)|0);
    $774 = HEAP8[$773>>0]|0;
    $775 = $774&255;
    $776 = ($775|0)==($771|0);
    if ($776) {
     label = 269;
     break;
    }
    $777 = (($i$03$i12$i) + 1)|0;
    $778 = ($777|0)==(87);
    if ($778) {
     $i$12$i16$i = 87;$s$01$i17$i = 24924;
     label = 272;
     break;
    } else {
     $i$03$i12$i = $777;
    }
   }
   if ((label|0) == 269) {
    $772 = ($i$03$i12$i|0)==(0);
    if ($772) {
     $s$0$lcssa$i22$i = 24924;
    } else {
     $i$12$i16$i = $i$03$i12$i;$s$01$i17$i = 24924;
     label = 272;
    }
   }
   if ((label|0) == 272) {
    while(1) {
     label = 0;
     $s$1$i19$i = $s$01$i17$i;
     while(1) {
      $779 = HEAP8[$s$1$i19$i>>0]|0;
      $780 = ($779<<24>>24)==(0);
      $781 = ((($s$1$i19$i)) + 1|0);
      if ($780) {
       break;
      } else {
       $s$1$i19$i = $781;
      }
     }
     $782 = (($i$12$i16$i) + -1)|0;
     $783 = ($782|0)==(0);
     if ($783) {
      $s$0$lcssa$i22$i = $781;
      break;
     } else {
      $i$12$i16$i = $782;$s$01$i17$i = $781;
      label = 272;
     }
    }
   }
   HEAP32[$vararg_buffer61>>2] = 15274;
   $vararg_ptr64 = ((($vararg_buffer61)) + 4|0);
   HEAP32[$vararg_ptr64>>2] = $fn;
   $vararg_ptr65 = ((($vararg_buffer61)) + 8|0);
   HEAP32[$vararg_ptr65>>2] = 21990;
   $vararg_ptr66 = ((($vararg_buffer61)) + 12|0);
   HEAP32[$vararg_ptr66>>2] = $s$0$lcssa$i22$i;
   _fprintf(9772,15290,$vararg_buffer61);
   (_fclose($687)|0);
   $784 = ((($657)) + 60|0);
   $785 = HEAP32[$784>>2]|0;
   $786 = ($785|0)==(0|0);
   if (!($786)) {
    $787 = ((($785)) + 8|0);
    $788 = HEAP32[$787>>2]|0;
    _free($788);
    $789 = HEAP32[$784>>2]|0;
    _free($789);
    HEAP32[$784>>2] = 0;
   }
  }
 } while(0);
 HEAP32[$vararg_buffer67>>2] = $fn;
 _fprintf(9772,19250,$vararg_buffer67);
 (_bgzf_close($657)|0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _load_ref_portion($fp,$e,$start,$end) {
 $fp = $fp|0;
 $e = $e|0;
 $start = $start|0;
 $end = $end|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i3 = 0, $$off016 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $i$0 = 0, $i1$0 = 0, $ihi$0$i = 0;
 var $ihi$0$i$ph = 0, $ilo$0$i$ph = 0, $j$0 = 0, $j$1 = 0, $or$cond = 0, $start$end = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($end|0)<($start|0);
 $start$end = $0 ? $start : $end;
 $1 = ((($e)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $42 = (($start) + -1)|0;
  $43 = (($start$end) + -1)|0;
  $44 = ($43|0)<(0);
  $45 = $44 << 31 >> 31;
  $$off016 = $42;$46 = $43;$47 = $45;
 } else {
  $4 = ((($e)) + 16|0);
  $5 = $4;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($start) + -1)|0;
  $12 = ((($e)) + 24|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11|0) / ($13|0))&-1;
  $15 = Math_imul($14, $2)|0;
  $16 = (_i64Add(($7|0),($10|0),($15|0),0)|0);
  $17 = tempRet0;
  $18 = (($11|0) % ($13|0))&-1;
  $19 = (_i64Add(($16|0),($17|0),($18|0),0)|0);
  $20 = tempRet0;
  $21 = ((($e)) + 16|0);
  $22 = $21;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + 4)|0;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($start$end) + -1)|0;
  $29 = ((($e)) + 24|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($28|0) / ($30|0))&-1;
  $32 = Math_imul($31, $2)|0;
  $33 = ($32|0)<(0);
  $34 = $33 << 31 >> 31;
  $35 = (_i64Add(($24|0),($27|0),($32|0),($34|0))|0);
  $36 = tempRet0;
  $37 = (($28|0) % ($30|0))&-1;
  $38 = ($37|0)<(0);
  $39 = $38 << 31 >> 31;
  $40 = (_i64Add(($35|0),($36|0),($37|0),($39|0))|0);
  $41 = tempRet0;
  $$off016 = $19;$46 = $40;$47 = $41;
 }
 $48 = (_i64Subtract(($46|0),($47|0),($$off016|0),0)|0);
 $49 = tempRet0;
 $50 = (_i64Add(($48|0),($49|0),1,0)|0);
 $51 = tempRet0;
 $52 = HEAP32[$fp>>2]|0;
 $53 = $52 & 1610612736;
 $54 = ($53|0)==(0);
 do {
  if ($54) {
   $55 = ((($fp)) + 52|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (_hseek($56,$$off016,0)|0);
   $58 = ($57|0)<(0);
   if ($58) {
    $59 = HEAP32[$fp>>2]|0;
    $60 = $59 & 65531;
    $61 = $60 | 4;
    $62 = $59 & -65536;
    $63 = $62 | $61;
    HEAP32[$fp>>2] = $63;
    label = 26;
    break;
   }
   $64 = ((($fp)) + 8|0);
   HEAP32[$64>>2] = 0;
   $65 = ($$off016|0)<(0);
   $66 = $65 << 31 >> 31;
   $67 = ((($fp)) + 24|0);
   $68 = $67;
   $69 = $68;
   HEAP32[$69>>2] = $$off016;
   $70 = (($68) + 4)|0;
   $71 = $70;
   HEAP32[$71>>2] = $66;
   $72 = ((($fp)) + 16|0);
   HEAP32[$72>>2] = 0;
   $73 = (_bgzf_read_block($fp)|0);
   $74 = ($73|0)<(0);
   if ($74) {
    $75 = HEAP32[$fp>>2]|0;
    $76 = $75 & 65531;
    $77 = $76 | 4;
    $78 = $75 & -65536;
    $79 = $78 | $77;
    HEAP32[$fp>>2] = $79;
    label = 26;
    break;
   } else {
    $80 = ((($fp)) + 32|0);
    $81 = $80;
    $82 = $81;
    HEAP32[$82>>2] = $$off016;
    $83 = (($81) + 4)|0;
    $84 = $83;
    HEAP32[$84>>2] = $66;
    break;
   }
  } else {
   $85 = ((($fp)) + 60|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ($86|0)==(0|0);
   if ($87) {
    $88 = $52 & 65531;
    $89 = $88 | 4;
    $90 = $52 & -65536;
    $91 = $90 | $89;
    HEAP32[$fp>>2] = $91;
    label = 26;
    break;
   }
   $92 = HEAP32[$86>>2]|0;
   $93 = (($92) + -1)|0;
   $94 = ($$off016|0)<(0);
   $95 = $94 << 31 >> 31;
   $ihi$0$i$ph = $93;$ilo$0$i$ph = 0;
   L17: while(1) {
    $ihi$0$i = $ihi$0$i$ph;
    while(1) {
     $96 = ($ilo$0$i$ph|0)>($ihi$0$i|0);
     if ($96) {
      break L17;
     }
     $97 = (($ilo$0$i$ph) + ($ihi$0$i))|0;
     $98 = (+($97|0));
     $99 = $98 * 0.5;
     $100 = (~~(($99)));
     $101 = ((($86)) + 8|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (($102) + ($100<<4)|0);
     $104 = $103;
     $105 = $104;
     $106 = HEAP32[$105>>2]|0;
     $107 = (($104) + 4)|0;
     $108 = $107;
     $109 = HEAP32[$108>>2]|0;
     $110 = ($95>>>0)<($109>>>0);
     $111 = ($$off016>>>0)<($106>>>0);
     $112 = ($95|0)==($109|0);
     $113 = $112 & $111;
     $114 = $110 | $113;
     if (!($114)) {
      break;
     }
     $115 = (($100) + -1)|0;
     $ihi$0$i = $115;
    }
    $116 = (($100) + 1)|0;
    $ihi$0$i$ph = $ihi$0$i;$ilo$0$i$ph = $116;
   }
   $$phi$trans$insert = ((($86)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $117 = (($ilo$0$i$ph) + -1)|0;
   $118 = ((($fp)) + 52|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (((($$pre) + ($117<<4)|0)) + 8|0);
   $121 = $120;
   $122 = $121;
   $123 = HEAP32[$122>>2]|0;
   $124 = (($121) + 4)|0;
   $125 = $124;
   $126 = HEAP32[$125>>2]|0;
   $127 = (_hseek($119,$123,0)|0);
   $128 = ($127|0)<(0);
   if ($128) {
    $129 = HEAP32[$fp>>2]|0;
    $130 = $129 & 65531;
    $131 = $130 | 4;
    $132 = $129 & -65536;
    $133 = $132 | $131;
    HEAP32[$fp>>2] = $133;
    label = 26;
    break;
   }
   $134 = ((($fp)) + 8|0);
   HEAP32[$134>>2] = 0;
   $135 = HEAP32[$85>>2]|0;
   $136 = ((($135)) + 8|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = (((($137) + ($117<<4)|0)) + 8|0);
   $139 = $138;
   $140 = $139;
   $141 = HEAP32[$140>>2]|0;
   $142 = (($139) + 4)|0;
   $143 = $142;
   $144 = HEAP32[$143>>2]|0;
   $145 = ((($fp)) + 24|0);
   $146 = $145;
   $147 = $146;
   HEAP32[$147>>2] = $141;
   $148 = (($146) + 4)|0;
   $149 = $148;
   HEAP32[$149>>2] = $144;
   $150 = ((($fp)) + 16|0);
   HEAP32[$150>>2] = 0;
   $151 = (_bgzf_read_block($fp)|0);
   $152 = ($151|0)<(0);
   if ($152) {
    $153 = HEAP32[$fp>>2]|0;
    $154 = $153 & 65531;
    $155 = $154 | 4;
    $156 = $153 & -65536;
    $157 = $156 | $155;
    HEAP32[$fp>>2] = $157;
    label = 26;
    break;
   }
   $158 = HEAP32[$85>>2]|0;
   $159 = ((($158)) + 8|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = (($160) + ($117<<4)|0);
   $162 = $161;
   $163 = $162;
   $164 = HEAP32[$163>>2]|0;
   $165 = (($162) + 4)|0;
   $166 = $165;
   $167 = HEAP32[$166>>2]|0;
   $168 = ($$off016|0)==($164|0);
   $169 = ($95|0)==($167|0);
   $170 = $168 & $169;
   if (!($170)) {
    $171 = (_i64Subtract(($$off016|0),0,($164|0),($167|0))|0);
    $172 = tempRet0;
    HEAP32[$150>>2] = $171;
    $173 = HEAP32[$134>>2]|0;
    $174 = ($171|0)>($173|0);
    if ($174) {
     ___assert_fail((15323|0),(14205|0),1773,(15360|0));
     // unreachable;
    }
   }
   $175 = ((($fp)) + 32|0);
   $176 = $175;
   $177 = $176;
   HEAP32[$177>>2] = $$off016;
   $178 = (($176) + 4)|0;
   $179 = $178;
   HEAP32[$179>>2] = $95;
  }
 } while(0);
 if ((label|0) == 26) {
  _perror(19286);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $180 = ($50|0)==(0);
 if ($180) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $181 = (_malloc($50)|0);
 $182 = ($181|0)==(0|0);
 if ($182) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $183 = (_bgzf_read($fp,$181,$50)|0);
 $184 = ($50|0)==($183|0);
 if (!($184)) {
  _perror(19317);
  _free($181);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $185 = (($start$end) - ($start))|0;
 $186 = (($185) + 1)|0;
 $187 = ($50|0)==($186|0);
 if ($187) {
  $i1$0 = 0;
  while(1) {
   $202 = ($i1$0|0)<($50|0);
   if (!($202)) {
    $$0 = $181;
    break;
   }
   $203 = (($181) + ($i1$0)|0);
   $204 = HEAP8[$203>>0]|0;
   $205 = $204&255;
   $206 = (($205) + -97)|0;
   $207 = ($206>>>0)<(26);
   $208 = $205 & 95;
   $$0$i$i3 = $207 ? $208 : $205;
   $209 = $$0$i$i3&255;
   HEAP8[$203>>0] = $209;
   $210 = (($i1$0) + 1)|0;
   $i1$0 = $210;
  }
  STACKTOP = sp;return ($$0|0);
 } else {
  $i$0 = 0;$j$0 = 0;
 }
 while(1) {
  $188 = ($i$0|0)<($50|0);
  if (!($188)) {
   break;
  }
  $189 = (($181) + ($i$0)|0);
  $190 = HEAP8[$189>>0]|0;
  $191 = ($190<<24>>24)<(33);
  $192 = ($190<<24>>24)==(127);
  $or$cond = $191 | $192;
  if ($or$cond) {
   $j$1 = $j$0;
  } else {
   $193 = $190&255;
   $194 = (($193) + -97)|0;
   $195 = ($194>>>0)<(26);
   $196 = $193 & 95;
   $$0$i$i = $195 ? $196 : $193;
   $197 = $$0$i$i&255;
   $198 = (($j$0) + 1)|0;
   $199 = (($181) + ($j$0)|0);
   HEAP8[$199>>0] = $197;
   $j$1 = $198;
  }
  $200 = (($i$0) + 1)|0;
  $i$0 = $200;$j$0 = $j$1;
 }
 $201 = ($j$0|0)==($186|0);
 if ($201) {
  $$0 = $181;
  STACKTOP = sp;return ($$0|0);
 }
 _fprintf(9772,19347,$vararg_buffer);
 _free($181);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _cram_get_ref($fd,$id,$start,$end) {
 $fd = $fd|0;
 $id = $id|0;
 $start = $start|0;
 $end = $end|0;
 var $$0 = 0, $$01 = 0, $$014$i = 0, $$014$i$i = 0, $$02 = 0, $$02$ = 0, $$05$i = 0, $$05$i$i = 0, $$2 = 0, $$cast = 0, $$cast$i = 0, $$lcssa$i = 0, $$lcssa$i$i = 0, $$lcssa2$i = 0, $$lcssa2$i$i = 0, $$phi$trans$insert19 = 0, $$pre = 0, $$pre15 = 0, $$pre16 = 0, $$pre20 = 0;
 var $$pre22 = 0, $$pre23 = 0, $$pre28 = 0, $$pre29 = 0, $$pre30 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cp$0 = 0, $or$cond = 0, $or$cond$i = 0;
 var $or$cond$i$i = 0, $or$cond3$i = 0, $or$cond3$i$i = 0, $or$cond50 = 0, $or$cond52 = 0, $r$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($id|0)==(-1);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ((($fd)) + 34704|0);
 (_pthread_mutex_lock(($1|0))|0);
 $2 = ((($fd)) + 34656|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = ((($fd)) + 308|0);
  HEAP32[$5>>2] = 1;
 }
 $6 = ((($fd)) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)>($id|0);
 if (!($10)) {
  HEAP32[$vararg_buffer>>2] = $id;
  _fprintf(9772,19374,$vararg_buffer);
  (_pthread_mutex_unlock(($1|0))|0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($7|0)==(0|0);
 if (!($11)) {
  $12 = ((($7)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($id<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   $17 = ((($7)) + 28|0);
   (_pthread_mutex_lock(($17|0))|0);
   $18 = ((($15)) + 8|0);
   $19 = $18;
   $20 = $19;
   $21 = HEAP32[$20>>2]|0;
   $22 = (($19) + 4)|0;
   $23 = $22;
   $24 = HEAP32[$23>>2]|0;
   $25 = ($21|0)==(0);
   $26 = ($24|0)==(0);
   $27 = $25 & $26;
   if ($27) {
    $28 = (_cram_populate_ref($fd,$id,$15)|0);
    $29 = ($28|0)==(-1);
    if ($29) {
     HEAP32[$vararg_buffer4>>2] = $id;
     _fprintf(9772,20001,$vararg_buffer4);
     $30 = HEAP32[$6>>2]|0;
     $31 = ((($30)) + 28|0);
     (_pthread_mutex_unlock(($31|0))|0);
     (_pthread_mutex_unlock(($1|0))|0);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $32 = HEAP32[$6>>2]|0;
    $33 = ((($32)) + 8|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($34) + ($id<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = HEAP32[$2>>2]|0;
    $38 = ($37|0)==(0);
    $39 = ($id|0)<(0);
    $or$cond = $38 | $39;
    if ($or$cond) {
     $r$0 = $36;
    } else {
     $40 = ((($36)) + 40|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==(0|0);
     if ($42) {
      $r$0 = $36;
     } else {
      $43 = ((($32)) + 60|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==($id|0);
      if ($45) {
       HEAP32[$43>>2] = -1;
       $$pre = HEAP32[$35>>2]|0;
       $47 = $$pre;
      } else {
       $47 = $36;
      }
      $46 = ((($47)) + 32|0);
      $48 = $46;
      $49 = $48;
      $50 = HEAP32[$49>>2]|0;
      $51 = (($48) + 4)|0;
      $52 = $51;
      $53 = HEAP32[$52>>2]|0;
      $54 = (_i64Add(($50|0),($53|0),1,0)|0);
      $55 = tempRet0;
      $56 = $46;
      $57 = $56;
      HEAP32[$57>>2] = $54;
      $58 = (($56) + 4)|0;
      $59 = $58;
      HEAP32[$59>>2] = $55;
      $r$0 = $36;
     }
    }
   } else {
    $r$0 = $15;
   }
   $60 = ($end|0)<(1);
   $61 = ((($r$0)) + 8|0);
   $62 = $61;
   $63 = $62;
   $64 = HEAP32[$63>>2]|0;
   $65 = (($62) + 4)|0;
   $66 = $65;
   $67 = HEAP32[$66>>2]|0;
   $$02 = $60 ? $64 : $end;
   $68 = ($$02|0)<(0);
   $69 = $68 << 31 >> 31;
   $70 = ($69|0)<($67|0);
   $71 = ($$02>>>0)<($64>>>0);
   $72 = ($69|0)==($67|0);
   $73 = $72 & $71;
   $74 = $70 | $73;
   $$02$ = $74 ? $$02 : $64;
   $75 = ($start|0)>(0);
   if (!($75)) {
    ___assert_fail((20041|0),(18618|0),2680,(20052|0));
    // unreachable;
   }
   $76 = (($$02$) - ($start))|0;
   $77 = (+($76|0));
   $78 = (+($64>>>0)) + (4294967296.0*(+($67|0)));
   $79 = $78 * 0.5;
   $80 = !($77 >= $79);
   $81 = ((($fd)) + 308|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($82|0)==(0);
   $or$cond50 = $80 & $83;
   $$2 = $or$cond50 ? $$02$ : $64;
   $$01 = $or$cond50 ? $start : 1;
   $84 = ($82|0)==(0);
   $85 = $or$cond50 | $84;
   if ($85) {
    $86 = ((($r$0)) + 40|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    if ($88) {
     $89 = ($$01|0)==(1);
     $90 = ($$2|0)<(0);
     $91 = $90 << 31 >> 31;
     $92 = ($$2|0)==($64|0);
     $93 = ($91|0)==($67|0);
     $94 = $92 & $93;
     $or$cond52 = $89 & $94;
     if (!($or$cond52)) {
      $287 = ($id|0)<(0);
      if ($287) {
       $288 = ((($fd)) + 56|0);
       $289 = HEAP32[$288>>2]|0;
       $290 = ($289|0)==(0|0);
       if (!($290)) {
        _free($289);
        HEAP32[$288>>2] = 0;
       }
       $291 = ((($fd)) + 52|0);
       HEAP32[$291>>2] = 0;
       $292 = ((($fd)) + 60|0);
       HEAP32[$292>>2] = $id;
       $293 = HEAP32[$6>>2]|0;
       $294 = ((($293)) + 28|0);
       (_pthread_mutex_unlock(($294|0))|0);
       (_pthread_mutex_unlock(($1|0))|0);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      $295 = HEAP32[$6>>2]|0;
      $296 = ((($295)) + 16|0);
      $297 = HEAP32[$296>>2]|0;
      $298 = ((($r$0)) + 4|0);
      $299 = HEAP32[$298>>2]|0;
      $300 = HEAP8[$297>>0]|0;
      $301 = HEAP8[$299>>0]|0;
      $302 = ($300<<24>>24)!=($301<<24>>24);
      $303 = ($300<<24>>24)==(0);
      $or$cond3$i = $303 | $302;
      $304 = $299;
      if ($or$cond3$i) {
       $$lcssa$i = $300;$$lcssa2$i = $301;
      } else {
       $$014$i = $297;$$05$i = $299;
       while(1) {
        $305 = ((($$014$i)) + 1|0);
        $306 = ((($$05$i)) + 1|0);
        $307 = HEAP8[$305>>0]|0;
        $308 = HEAP8[$306>>0]|0;
        $309 = ($307<<24>>24)!=($308<<24>>24);
        $310 = ($307<<24>>24)==(0);
        $or$cond$i = $310 | $309;
        if ($or$cond$i) {
         $$lcssa$i = $307;$$lcssa2$i = $308;
         break;
        } else {
         $$014$i = $305;$$05$i = $306;
        }
       }
      }
      $311 = ($$lcssa$i<<24>>24)==($$lcssa2$i<<24>>24);
      $312 = ((($295)) + 20|0);
      $313 = HEAP32[$312>>2]|0;
      do {
       if ($311) {
        $314 = ($313|0)==(0|0);
        if ($314) {
         $320 = $295;$321 = $304;
         label = 69;
        } else {
         $333 = $313;
        }
       } else {
        $316 = $313;
        $315 = ($316|0)==(0|0);
        if ($315) {
         $320 = $295;$321 = $304;
         label = 69;
        } else {
         $317 = (_bgzf_close($316)|0);
         $318 = ($317|0)==(0);
         if ($318) {
          $$pre15 = HEAP32[$298>>2]|0;
          $$pre16 = HEAP32[$6>>2]|0;
          $320 = $$pre16;$321 = $$pre15;
          label = 69;
          break;
         } else {
          $$0 = 0;
          STACKTOP = sp;return ($$0|0);
         }
        }
       }
      } while(0);
      do {
       if ((label|0) == 69) {
        $319 = ((($320)) + 16|0);
        HEAP32[$319>>2] = $321;
        $322 = HEAP32[$6>>2]|0;
        $323 = ((($322)) + 16|0);
        $324 = HEAP32[$323>>2]|0;
        $325 = ((($r$0)) + 48|0);
        $326 = HEAP32[$325>>2]|0;
        $327 = (_bgzf_open_ref($324,$326)|0);
        $328 = HEAP32[$6>>2]|0;
        $329 = ((($328)) + 20|0);
        HEAP32[$329>>2] = $327;
        $330 = ($327|0)==(0|0);
        $331 = HEAP32[$6>>2]|0;
        if (!($330)) {
         $$phi$trans$insert19 = ((($331)) + 20|0);
         $$pre20 = HEAP32[$$phi$trans$insert19>>2]|0;
         $333 = $$pre20;
         break;
        }
        $332 = ((($331)) + 28|0);
        (_pthread_mutex_unlock(($332|0))|0);
        (_pthread_mutex_unlock(($1|0))|0);
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
      } while(0);
      $334 = (_load_ref_portion($333,$r$0,$$01,$$2)|0);
      $335 = ((($fd)) + 52|0);
      HEAP32[$335>>2] = $334;
      $336 = ($334|0)==(0|0);
      if ($336) {
       $337 = HEAP32[$6>>2]|0;
       $338 = ((($337)) + 28|0);
       (_pthread_mutex_unlock(($338|0))|0);
       (_pthread_mutex_unlock(($1|0))|0);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      $339 = $334;
      $340 = ((($fd)) + 56|0);
      $341 = HEAP32[$340>>2]|0;
      $342 = ($341|0)==(0|0);
      if ($342) {
       $346 = $339;
      } else {
       _free($341);
       $$pre22 = HEAP32[$335>>2]|0;
       $346 = $$pre22;
      }
      $343 = ((($fd)) + 60|0);
      HEAP32[$343>>2] = $id;
      $344 = ((($fd)) + 64|0);
      HEAP32[$344>>2] = $$01;
      $345 = ((($fd)) + 68|0);
      HEAP32[$345>>2] = $$2;
      HEAP32[$340>>2] = $346;
      $$cast = $346;
      $347 = HEAP32[$6>>2]|0;
      $348 = ((($347)) + 28|0);
      (_pthread_mutex_unlock(($348|0))|0);
      (_pthread_mutex_unlock(($1|0))|0);
      $349 = (($$cast) + ($start)|0);
      $350 = (0 - ($$01))|0;
      $351 = (($349) + ($350)|0);
      $$0 = $351;
      STACKTOP = sp;return ($$0|0);
     }
    }
   }
   $95 = ($id|0)>(-1);
   if ($95) {
    $96 = ((($r$0)) + 40|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    $99 = HEAP32[$6>>2]|0;
    if ($98) {
     $124 = ((($r$0)) + 48|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ((($99)) + 8|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($127) + ($id<<2)|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ((($129)) + 8|0);
     $131 = $130;
     $132 = $131;
     $133 = HEAP32[$132>>2]|0;
     $134 = (($131) + 4)|0;
     $135 = $134;
     $136 = HEAP32[$135>>2]|0;
     $137 = ((($129)) + 40|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($138|0)==(0|0);
     L71: do {
      if ($139) {
       $140 = ((($129)) + 32|0);
       $141 = $140;
       $142 = $141;
       $143 = HEAP32[$142>>2]|0;
       $144 = (($141) + 4)|0;
       $145 = $144;
       $146 = HEAP32[$145>>2]|0;
       $147 = ($143|0)==(0);
       $148 = ($146|0)==(0);
       $149 = $147 & $148;
       if (!($149)) {
        ___assert_fail((19203|0),(18618|0),2525,(19217|0));
        // unreachable;
       }
       $150 = ((($99)) + 56|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = ($151|0)==(0|0);
       do {
        if (!($152)) {
         $153 = ((($151)) + 32|0);
         $154 = $153;
         $155 = $154;
         $156 = HEAP32[$155>>2]|0;
         $157 = (($154) + 4)|0;
         $158 = $157;
         $159 = HEAP32[$158>>2]|0;
         $160 = ($159|0)>(0);
         $161 = ($156>>>0)>(0);
         $162 = ($159|0)==(0);
         $163 = $162 & $161;
         $164 = $160 | $163;
         if (!($164)) {
          ___assert_fail((19231|0),(18618|0),2535,(19217|0));
          // unreachable;
         }
         $165 = (_i64Add(($156|0),($159|0),-1,-1)|0);
         $166 = tempRet0;
         $167 = $153;
         $168 = $167;
         HEAP32[$168>>2] = $165;
         $169 = (($167) + 4)|0;
         $170 = $169;
         HEAP32[$170>>2] = $166;
         $171 = ($159|0)<(0);
         $172 = ($156>>>0)<(2);
         $173 = ($159|0)==(0);
         $174 = $173 & $172;
         $175 = $171 | $174;
         if ($175) {
          $176 = HEAP32[$150>>2]|0;
          $177 = ((($176)) + 40|0);
          $178 = HEAP32[$177>>2]|0;
          $179 = ($178|0)==(0|0);
          if ($179) {
           break;
          }
          _ref_entry_free_seq($176);
         }
        }
       } while(0);
       $180 = ((($99)) + 16|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ((($129)) + 4|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = HEAP8[$181>>0]|0;
       $185 = HEAP8[$183>>0]|0;
       $186 = ($184<<24>>24)!=($185<<24>>24);
       $187 = ($184<<24>>24)==(0);
       $or$cond3$i$i = $187 | $186;
       $188 = $183;
       if ($or$cond3$i$i) {
        $$lcssa$i$i = $184;$$lcssa2$i$i = $185;
       } else {
        $$014$i$i = $181;$$05$i$i = $183;
        while(1) {
         $189 = ((($$014$i$i)) + 1|0);
         $190 = ((($$05$i$i)) + 1|0);
         $191 = HEAP8[$189>>0]|0;
         $192 = HEAP8[$190>>0]|0;
         $193 = ($191<<24>>24)!=($192<<24>>24);
         $194 = ($191<<24>>24)==(0);
         $or$cond$i$i = $194 | $193;
         if ($or$cond$i$i) {
          $$lcssa$i$i = $191;$$lcssa2$i$i = $192;
          break;
         } else {
          $$014$i$i = $189;$$05$i$i = $190;
         }
        }
       }
       $195 = ($$lcssa$i$i<<24>>24)==($$lcssa2$i$i<<24>>24);
       $196 = ((($99)) + 20|0);
       $197 = HEAP32[$196>>2]|0;
       do {
        if ($195) {
         $198 = ($197|0)==(0|0);
         if ($198) {
          $203 = $188;
          label = 44;
         } else {
          $206 = $197;
         }
        } else {
         $200 = $197;
         $199 = ($200|0)==(0|0);
         if ($199) {
          $203 = $188;
          label = 44;
          break;
         }
         $201 = (_bgzf_close($200)|0);
         $202 = ($201|0)==(0);
         if (!($202)) {
          label = 48;
          break L71;
         }
         $$pre28 = HEAP32[$182>>2]|0;
         $203 = $$pre28;
         label = 44;
        }
       } while(0);
       if ((label|0) == 44) {
        HEAP32[$180>>2] = $203;
        $$cast$i = $203;
        $204 = (_bgzf_open_ref($$cast$i,$125)|0);
        HEAP32[$196>>2] = $204;
        $205 = ($204|0)==(0|0);
        if ($205) {
         label = 48;
         break;
        } else {
         $206 = $204;
        }
       }
       $207 = (_load_ref_portion($206,$129,1,$133)|0);
       $208 = ($207|0)==(0|0);
       if ($208) {
        label = 48;
       } else {
        HEAP32[$137>>2] = $207;
        $209 = ((($129)) + 44|0);
        HEAP32[$209>>2] = 0;
        $210 = $140;
        $211 = $210;
        $212 = HEAP32[$211>>2]|0;
        $213 = (($210) + 4)|0;
        $214 = $213;
        $215 = HEAP32[$214>>2]|0;
        $216 = (_i64Add(($212|0),($215|0),1,0)|0);
        $217 = tempRet0;
        $218 = $140;
        $219 = $218;
        HEAP32[$219>>2] = $216;
        $220 = (($218) + 4)|0;
        $221 = $220;
        HEAP32[$221>>2] = $217;
        HEAP32[$150>>2] = $129;
        $222 = $140;
        $223 = $222;
        $224 = HEAP32[$223>>2]|0;
        $225 = (($222) + 4)|0;
        $226 = $225;
        $227 = HEAP32[$226>>2]|0;
        $228 = (_i64Add(($224|0),($227|0),1,0)|0);
        $229 = tempRet0;
        $230 = $140;
        $231 = $230;
        HEAP32[$231>>2] = $228;
        $232 = (($230) + 4)|0;
        $233 = $232;
        HEAP32[$233>>2] = $229;
       }
      } else {
       $234 = ($129|0)==(0|0);
       if ($234) {
        label = 48;
       }
      }
     } while(0);
     if ((label|0) == 48) {
      $235 = HEAP32[$6>>2]|0;
      $236 = ((($235)) + 28|0);
      (_pthread_mutex_unlock(($236|0))|0);
      (_pthread_mutex_unlock(($1|0))|0);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     $237 = HEAP32[$2>>2]|0;
     $238 = ($237|0)==(0);
     if (!($238)) {
      $239 = HEAP32[$6>>2]|0;
      $240 = ($id|0)<(0);
      if (!($240)) {
       $241 = ((($239)) + 8|0);
       $242 = HEAP32[$241>>2]|0;
       $243 = (($242) + ($id<<2)|0);
       $244 = HEAP32[$243>>2]|0;
       $245 = ((($244)) + 40|0);
       $246 = HEAP32[$245>>2]|0;
       $247 = ($246|0)==(0|0);
       if (!($247)) {
        $248 = ((($239)) + 60|0);
        $249 = HEAP32[$248>>2]|0;
        $250 = ($249|0)==($id|0);
        if ($250) {
         HEAP32[$248>>2] = -1;
         $$pre29 = HEAP32[$243>>2]|0;
         $252 = $$pre29;
        } else {
         $252 = $244;
        }
        $251 = ((($252)) + 32|0);
        $253 = $251;
        $254 = $253;
        $255 = HEAP32[$254>>2]|0;
        $256 = (($253) + 4)|0;
        $257 = $256;
        $258 = HEAP32[$257>>2]|0;
        $259 = (_i64Add(($255|0),($258|0),1,0)|0);
        $260 = tempRet0;
        $261 = $251;
        $262 = $261;
        HEAP32[$262>>2] = $259;
        $263 = (($261) + 4)|0;
        $264 = $263;
        HEAP32[$264>>2] = $260;
       }
      }
     }
    } else {
     $100 = ((($99)) + 8|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = (($101) + ($id<<2)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ((($103)) + 40|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = ($105|0)==(0|0);
     if (!($106)) {
      $107 = ((($99)) + 60|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = ($108|0)==($id|0);
      if ($109) {
       HEAP32[$107>>2] = -1;
       $$pre23 = HEAP32[$102>>2]|0;
       $111 = $$pre23;
      } else {
       $111 = $103;
      }
      $110 = ((($111)) + 32|0);
      $112 = $110;
      $113 = $112;
      $114 = HEAP32[$113>>2]|0;
      $115 = (($112) + 4)|0;
      $116 = $115;
      $117 = HEAP32[$116>>2]|0;
      $118 = (_i64Add(($114|0),($117|0),1,0)|0);
      $119 = tempRet0;
      $120 = $110;
      $121 = $120;
      HEAP32[$121>>2] = $118;
      $122 = (($120) + 4)|0;
      $123 = $122;
      HEAP32[$123>>2] = $119;
     }
    }
    $265 = ((($fd)) + 52|0);
    HEAP32[$265>>2] = 0;
    $266 = ((($fd)) + 64|0);
    HEAP32[$266>>2] = 1;
    $267 = $61;
    $268 = $267;
    $269 = HEAP32[$268>>2]|0;
    $270 = (($267) + 4)|0;
    $271 = $270;
    $272 = HEAP32[$271>>2]|0;
    $273 = ((($fd)) + 68|0);
    HEAP32[$273>>2] = $269;
    $274 = ((($fd)) + 60|0);
    HEAP32[$274>>2] = $id;
    $275 = HEAP32[$6>>2]|0;
    $276 = ((($275)) + 8|0);
    $277 = HEAP32[$276>>2]|0;
    $278 = (($277) + ($id<<2)|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = ((($279)) + 40|0);
    $281 = HEAP32[$280>>2]|0;
    $282 = (($281) + ($start)|0);
    $283 = ((($282)) + -1|0);
    $286 = $275;$cp$0 = $283;
   } else {
    $284 = ((($fd)) + 52|0);
    HEAP32[$284>>2] = 0;
    $$pre30 = HEAP32[$6>>2]|0;
    $286 = $$pre30;$cp$0 = 0;
   }
   $285 = ((($286)) + 28|0);
   (_pthread_mutex_unlock(($285|0))|0);
   (_pthread_mutex_unlock(($1|0))|0);
   $$0 = $cp$0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 HEAP32[$vararg_buffer1>>2] = $id;
 _fprintf(9772,19374,$vararg_buffer1);
 (_pthread_mutex_unlock(($1|0))|0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _cram_populate_ref($fd,$id,$r) {
 $fd = $fd|0;
 $id = $id|0;
 $r = $r|0;
 var $$$i$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i$i = 0, $$0$i$i$i$i$i$i = 0, $$0$i$i$i$i$i$i$i$i = 0, $$0$i$i$i$i112 = 0, $$0$i$i$i$i9 = 0, $$0$i$i$i$i91 = 0, $$0$i$i$i11 = 0, $$0$i$i$i121 = 0, $$0$i$i$i144 = 0, $$0$i$i$i148 = 0, $$0$i$i$i152 = 0, $$0$i$i$i156 = 0, $$0$i$i$i159 = 0, $$0$i$i$i162 = 0, $$0$i$i$i7$i = 0, $$0$i$i119 = 0;
 var $$0$i$i140 = 0, $$0$i$i166 = 0, $$0$i$i169 = 0, $$0$i$i173 = 0, $$0$i$i188 = 0, $$0$i$i27$i = 0, $$0$i$i29 = 0, $$0$i$i3$i = 0, $$0$i$i35$i = 0, $$0$i$i63 = 0, $$0$i$i88 = 0, $$0$i1$i120 = 0, $$0$i1$i142 = 0, $$0$i1$i168 = 0, $$0$i1$i171 = 0, $$0$i1$i190 = 0, $$0$i102$i$i$i$i = 0, $$0$i117 = 0, $$0$i176 = 0, $$0$i181 = 0;
 var $$0$i19$i$i$i$i = 0, $$0$i38$i$i$i$i = 0, $$0$i59$i$i$i$i = 0, $$0$i65$ph = 0, $$0$i78$i$i$i$i = 0, $$0$i97$i$i$i$i = 0, $$0$lcssa42$i$i = 0, $$01$i = 0, $$01$i31 = 0, $$01$lcssa$i$i = 0, $$01$lcssa$i$i$i = 0, $$01$lcssa$i$i15$i = 0, $$01$lcssa$i$i17 = 0, $$01$lcssa$i$i51 = 0, $$01$lcssa$i$i76 = 0, $$014$i$i = 0, $$014$i$i$i = 0, $$014$i$i101 = 0, $$014$i$i12$i = 0, $$014$i$i14 = 0;
 var $$014$i$i37$i = 0, $$014$i$i49 = 0, $$014$i$i73 = 0, $$014$i5$i = 0, $$02$lcssa$i25$i$i$i$i = 0, $$02$lcssa$i46$i$i$i$i = 0, $$02$lcssa$i6$i$i$i$i = 0, $$02$lcssa$i65$i$i$i$i = 0, $$02$lcssa$i84$i$i$i$i = 0, $$0211$i22$i$i$i$i = 0, $$0211$i3$i$i$i$i = 0, $$0211$i43$i$i$i$i = 0, $$0211$i62$i$i$i$i = 0, $$0211$i81$i$i$i$i = 0, $$031$i$i = 0, $$04$lcssa43$i$i = 0, $$0430$i$i = 0, $$05$i$i = 0, $$05$i$i$i = 0, $$05$i$i100 = 0;
 var $$06$lcssa44$i$i = 0, $$0629$i$i = 0, $$08$i = 0, $$08$i$i = 0, $$08$i$i37 = 0, $$08$i131 = 0, $$08$i20$i = 0, $$08$i21$i = 0, $$08$i5$i = 0, $$08$i6$i = 0, $$08$in$i = 0, $$08$in$i$i = 0, $$08$in$i$i34 = 0, $$08$in$i128 = 0, $$08$in$i17$i = 0, $$08$in$i18$i = 0, $$08$in$i2$i = 0, $$08$in$i3$i = 0, $$1$i = 0, $$1$i15$i$i$i$i = 0;
 var $$1$i34$i$i$i$i = 0, $$1$i55$i$i$i$i = 0, $$1$i74$i$i$i$i = 0, $$1$i93$i$i$i$i = 0, $$1$lcssa$i$i = 0, $$1$lcssa$i$i$i = 0, $$1$lcssa$i$i23$i = 0, $$1$lcssa$i$i25 = 0, $$1$lcssa$i$i59 = 0, $$1$lcssa$i$i6 = 0, $$1$lcssa$i$i84 = 0, $$117$i$i = 0, $$12$i = 0, $$1511$i$i = 0, $$1710$i$i = 0, $$212$i$i = 0, $$28$i$i = 0, $$3$i$i = 0, $$447$ = 0, $$447$$ = 0;
 var $$447$$$ = 0, $$447$$$$ = 0, $$452 = 0, $$452457 = 0, $$452459 = 0, $$454 = 0, $$455 = 0, $$456 = 0, $$cast = 0, $$in = 0, $$in445 = 0, $$lcssa$i$i$i = 0, $$lcssa$i$i106 = 0, $$lcssa2$i$i$i = 0, $$lcssa2$i$i105 = 0, $$lobit2$i$i$i$i$i$i = 0, $$lobit2$i$i$i$i$i$i$in$in = 0, $$phi$trans$insert = 0, $$pn$i$i = 0, $$pn$i$i$i = 0;
 var $$pn$i$i26$i = 0, $$pn$i$i28 = 0, $$pn$i$i62 = 0, $$pn$i$i87 = 0, $$pn15$i$i = 0, $$pn15$i$i$i = 0, $$pn15$i$i19$i = 0, $$pn15$i$i21 = 0, $$pn15$i$i55 = 0, $$pn15$i$i80 = 0, $$pre = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i20$i = 0, $$pre$i$i22 = 0, $$pre$i$i56 = 0, $$pre$i$i81 = 0, $$pre$phi335Z2D = 0, $$pre$phi342Z2D = 0, $$pre$phiZ2D = 0;
 var $$pre322 = 0, $$pre323 = 0, $$pre324 = 0, $$pre325 = 0, $$pre327 = 0, $$pre328 = 0, $$pre329 = 0, $$pre330 = 0, $$pre331 = 0, $$pre331$pre = 0, $$pre333 = 0, $$pre339 = 0, $$pre341 = 0, $$sink$i$i = 0, $$sink$i30$i = 0, $$sink$i32$i = 0, $$sink$i34$i = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0;
 var $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0;
 var $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0;
 var $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0;
 var $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0;
 var $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0;
 var $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0;
 var $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0;
 var $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0;
 var $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0;
 var $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0;
 var $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0;
 var $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0;
 var $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0;
 var $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0;
 var $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0;
 var $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0;
 var $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0;
 var $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0;
 var $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0;
 var $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0;
 var $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0;
 var $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0;
 var $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0;
 var $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0;
 var $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0;
 var $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0;
 var $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0;
 var $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0;
 var $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0;
 var $1540 = 0, $1541 = 0, $1542 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var $allocated$0$i$i$i$i$i = 0, $allocated$1$i$i$i$i$i = 0, $allocated$2$i$i$i$i$i = 0, $buf$i = 0, $buf$i$i = 0, $buf$i$i$i = 0, $buf$i111 = 0, $buffer$0$i = 0, $buffer$0$i183 = 0, $bufsize$0$i$i$i$i$i = 0, $cache = 0, $cache_root = 0, $cp$i$0 = 0, $cp$i$1 = 0, $cp$i$2 = 0, $cp$i$3 = 0, $data$0$i$i$i$i$i = 0, $data$1$i$i$i$i$i = 0, $data$2$i$i$i$i$i = 0, $ele$0$i = 0;
 var $ele$0$i32 = 0, $ele2$0$i = 0, $err$0$i = 0, $err$1$i = 0, $exitcond = 0, $exitcond444 = 0, $extra$0 = 0, $f$i$i = 0, $f$i29$i = 0, $f$i31$i = 0, $f$i33$i = 0, $fai_fn$i = 0, $h$0$i = 0, $h$0$i$i$i = 0, $h$1$i$i$i = 0, $i$0$i = 0, $i$0$i$i = 0, $i$0$i108 = 0, $i$0$i110 = 0, $i$0$i126 = 0;
 var $i$1$i$i = 0, $i$1$i$i$site$2$i$i = 0, $i$1$i$i460 = 0, $id$0$i = 0, $id_alloc$0$i = 0, $id_alloc$1$i = 0, $l$06$i = 0, $l$06$i$i = 0, $l$06$i$i36 = 0, $l$06$i130 = 0, $l$06$i19$i = 0, $l$06$i20$i = 0, $l$06$i4$i = 0, $l$06$i5$i = 0, $line$i = 0, $local_cache$1 = 0, $md5_buf1 = 0, $md5_buf2 = 0, $not$192 = 0, $not$193 = 0;
 var $not$194 = 0, $not$195 = 0, $not$196 = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i$i$i = 0, $or$cond$i$i102 = 0, $or$cond$i$i38 = 0, $or$cond$i$i4 = 0, $or$cond$i$i94 = 0, $or$cond$i132 = 0, $or$cond$i21$i = 0, $or$cond$i22$i = 0, $or$cond$i6$i = 0, $or$cond$i7$i = 0, $or$cond3$i$i$i = 0, $or$cond3$i$i98 = 0;
 var $or$cond4$i = 0, $or$cond4$i$i = 0, $or$cond4$i$i39 = 0, $or$cond4$i133 = 0, $or$cond4$i22$i = 0, $or$cond4$i23$i = 0, $or$cond4$i7$i = 0, $or$cond4$i8$i = 0, $or$cond453 = 0, $path = 0, $path_tmp = 0, $pt$i = 0, $r$0$i = 0, $r$0$lcssa$i = 0, $r$0$lcssa$i$i = 0, $r$0$lcssa$i$i44 = 0, $r$0$lcssa$i12$i = 0, $r$0$lcssa$i13$i = 0, $r$0$lcssa$i138 = 0, $r$0$lcssa$i27$i = 0;
 var $r$0$lcssa$i28$i = 0, $r$07$i = 0, $r$07$i$i = 0, $r$07$i$i35 = 0, $r$07$i129 = 0, $r$07$i18$i = 0, $r$07$i19$i = 0, $r$07$i3$i = 0, $r$07$i4$i = 0, $r$1$i = 0, $r$1$i225 = 0, $ref_path$0 = 0, $remaining$0$i$i = 0, $req$0$i$i = 0, $s$pn$i$i$i = 0, $sb = 0, $sb$i = 0, $sb$i$i$i$i$i = 0, $site$0$i$i = 0, $site$0$i$i$i$0$i$i = 0;
 var $site$2$i$i461 = 0, $src$0$i$i = 0, $step$0$i$i = 0, $storemerge$i = 0, $storemerge$i$pn = 0, $storemerge446 = 0, $storemerge446$in = 0, $tag$0$i = 0, $tag$0$i69 = 0, $tag$0$in$i = 0, $tag$0$in$i68 = 0, $thrid$0 = 0, $used$0$i$i$i$i$i = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0;
 var $vararg_buffer28 = 0, $vararg_buffer32 = 0, $vararg_buffer36 = 0, $vararg_buffer40 = 0, $vararg_buffer44 = 0, $vararg_buffer48 = 0, $vararg_buffer53 = 0, $vararg_buffer56 = 0, $vararg_buffer58 = 0, $vararg_buffer6 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer68 = 0, $vararg_buffer74 = 0, $vararg_buffer77 = 0, $vararg_buffer80 = 0, $vararg_buffer83 = 0, $vararg_buffer86 = 0, $vararg_buffer90 = 0, $vararg_buffer94 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0, $vararg_ptr27 = 0, $vararg_ptr31 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr43 = 0, $vararg_ptr47 = 0, $vararg_ptr5 = 0, $vararg_ptr51 = 0, $vararg_ptr52 = 0, $vararg_ptr61 = 0, $vararg_ptr71 = 0, $vararg_ptr72 = 0, $vararg_ptr73 = 0, $vararg_ptr89 = 0, $vararg_ptr9 = 0, $vararg_ptr93 = 0, $w$0$i$i = 0;
 var $w$0$i$i$i = 0, $w$0$i$i17$i = 0, $w$0$i$i19 = 0, $w$0$i$i53 = 0, $w$0$i$i78 = 0, $w$0$lcssa$i13$i$i$i$i = 0, $w$0$lcssa$i32$i$i$i$i = 0, $w$0$lcssa$i53$i$i$i$i = 0, $w$0$lcssa$i72$i$i$i$i = 0, $w$0$lcssa$i91$i$i$i$i = 0, $w$08$i28$i$i$i$i = 0, $w$08$i49$i$i$i$i = 0, $w$08$i68$i$i$i$i = 0, $w$08$i87$i$i$i$i = 0, $w$08$i9$i$i$i$i = 0, $wd$0$lcssa$i$i = 0, $wd$018$i$i = 0, $ws$0$lcssa$i$i = 0, $ws$019$i$i = 0, $x$0$i = 0;
 var $x$0$i$i = 0, $x$3$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 29952|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer94 = sp + 224|0;
 $vararg_buffer90 = sp + 216|0;
 $vararg_buffer86 = sp + 208|0;
 $vararg_buffer83 = sp + 200|0;
 $vararg_buffer80 = sp + 192|0;
 $vararg_buffer77 = sp + 184|0;
 $vararg_buffer74 = sp + 176|0;
 $vararg_buffer68 = sp + 160|0;
 $vararg_buffer65 = sp + 152|0;
 $vararg_buffer62 = sp + 144|0;
 $vararg_buffer58 = sp + 136|0;
 $vararg_buffer56 = sp + 128|0;
 $vararg_buffer53 = sp + 120|0;
 $vararg_buffer48 = sp + 104|0;
 $vararg_buffer44 = sp + 96|0;
 $vararg_buffer40 = sp + 88|0;
 $vararg_buffer36 = sp + 80|0;
 $vararg_buffer32 = sp + 72|0;
 $vararg_buffer28 = sp + 64|0;
 $vararg_buffer24 = sp + 56|0;
 $vararg_buffer20 = sp + 48|0;
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $buf$i111 = sp + 1140|0;
 $pt$i = sp + 1136|0;
 $f$i33$i = sp + 1024|0;
 $f$i31$i = sp + 912|0;
 $f$i29$i = sp + 800|0;
 $f$i$i = sp + 688|0;
 $sb$i = sp + 608|0;
 $fai_fn$i = sp + 25848|0;
 $line$i = sp + 17656|0;
 $sb$i$i$i$i$i = sp + 532|0;
 $buf$i$i$i = sp + 456|0;
 $buf$i = sp + 380|0;
 $buf$i$i = sp + 304|0;
 $path = sp + 13560|0;
 $path_tmp = sp + 9464|0;
 $cache = sp + 5368|0;
 $cache_root = sp + 1272|0;
 $sb = sp + 228|0;
 $md5_buf1 = sp + 1256|0;
 $md5_buf2 = sp + 1216|0;
 $0 = (_getenv((19404|0))|0);
 $1 = (_getenv((19413|0))|0);
 $2 = ((($fd)) + 272|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  HEAP32[$vararg_buffer>>2] = $fd;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $id;
  _fprintf(9772,19423,$vararg_buffer);
 }
 HEAP8[$cache_root>>0] = 0;
 $5 = ($0|0)==(0|0);
 if ($5) {
  label = 5;
 } else {
  $6 = HEAP8[$0>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   label = 5;
  } else {
   $local_cache$1 = $1;$ref_path$0 = $0;
  }
 }
 do {
  if ((label|0) == 5) {
   $8 = ($1|0)==(0|0);
   if (!($8)) {
    $9 = HEAP8[$1>>0]|0;
    $10 = ($9<<24>>24)==(0);
    if (!($10)) {
     $local_cache$1 = $1;$ref_path$0 = 19458;
     break;
    }
   }
   $11 = (_getenv((19498|0))|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    label = 9;
   } else {
    $13 = HEAP8[$11>>0]|0;
    $14 = ($13<<24>>24)==(0);
    if ($14) {
     label = 9;
    } else {
     $$0$i = $11;$extra$0 = 27693;
    }
   }
   do {
    if ((label|0) == 9) {
     $15 = (_getenv((19513|0))|0);
     $16 = ($15|0)==(0|0);
     if (!($16)) {
      $17 = HEAP8[$15>>0]|0;
      $18 = ($17<<24>>24)==(0);
      if (!($18)) {
       $$0$i = $15;$extra$0 = 19518;
       break;
      }
     }
     $19 = (_getenv((19526|0))|0);
     $20 = ($19|0)==(0|0);
     if (!($20)) {
      $21 = HEAP8[$19>>0]|0;
      $22 = ($21<<24>>24)==(0);
      if (!($22)) {
       $$0$i = $19;$extra$0 = 27693;
       break;
      }
     }
     $23 = (_getenv((19533|0))|0);
     $24 = ($23|0)==(0|0);
     if (!($24)) {
      $25 = HEAP8[$23>>0]|0;
      $26 = ($25<<24>>24)==(0);
      if (!($26)) {
       $$0$i = $23;$extra$0 = 27693;
       break;
      }
     }
     $$0$i = 19538;$extra$0 = 27693;
    }
   } while(0);
   HEAP32[$vararg_buffer2>>2] = $$0$i;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $extra$0;
   _snprintf($cache_root,4096,19543,$vararg_buffer2);
   HEAP32[$vararg_buffer6>>2] = $$0$i;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $extra$0;
   _snprintf($cache,4096,19556,$vararg_buffer6);
   $27 = HEAP32[$2>>2]|0;
   $28 = ($27|0)==(0);
   if ($28) {
    $local_cache$1 = $cache;$ref_path$0 = 19458;
   } else {
    HEAP32[$vararg_buffer10>>2] = $cache;
    _fprintf(9772,19583,$vararg_buffer10);
    $local_cache$1 = $cache;$ref_path$0 = 19458;
   }
  }
 } while(0);
 $29 = HEAP32[$r>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = ((($fd)) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 36|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (_kh_get_m_s2i($34,$29)|0);
 $36 = HEAP32[$34>>2]|0;
 $37 = ($35|0)==($36|0);
 if ($37) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $38 = ((($34)) + 24|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + ($35<<2)|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($32)) + 32|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (((($43) + ($41<<4)|0)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0|0);
 if ($46) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $47 = ((($45)) + 8|0);
 $tag$0$in$i = $47;
 while(1) {
  $tag$0$i = HEAP32[$tag$0$in$i>>2]|0;
  $48 = ($tag$0$i|0)==(0|0);
  if ($48) {
   $tag$0$in$i68 = $47;
   break;
  }
  $49 = ((($tag$0$i)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP8[$50>>0]|0;
  $52 = ($51<<24>>24)==(77);
  if ($52) {
   $53 = ((($50)) + 1|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = ($54<<24>>24)==(53);
   if ($55) {
    label = 26;
    break;
   }
  }
  $tag$0$in$i = $tag$0$i;
 }
 do {
  if ((label|0) == 26) {
   $56 = HEAP32[$2>>2]|0;
   $57 = ($56|0)==(0);
   if (!($57)) {
    $58 = ((($50)) + 3|0);
    HEAP32[$vararg_buffer13>>2] = $58;
    _fprintf(9772,19611,$vararg_buffer13);
   }
   $59 = ($local_cache$1|0)==(0|0);
   if ($59) {
    label = 31;
   } else {
    $60 = HEAP8[$local_cache$1>>0]|0;
    $61 = ($60<<24>>24)==(0);
    if ($61) {
     label = 31;
    } else {
     $62 = HEAP32[$49>>2]|0;
     $63 = ((($62)) + 3|0);
     _expand_cache_path($path,$local_cache$1,$63);
     $$pre$phi335Z2D = $path;
     label = 88;
    }
   }
   do {
    if ((label|0) == 31) {
     $64 = HEAP32[$49>>2]|0;
     $65 = ((($64)) + 3|0);
     $66 = ($ref_path$0|0)==(0|0);
     if ($66) {
      $67 = (_getenv((20698|0))|0);
      $$01$i = $67;
     } else {
      $$01$i = $ref_path$0;
     }
     $68 = (_tokenise_search_path($$01$i)|0);
     $69 = ($68|0)==(0|0);
     if (!($69)) {
      $70 = ((($buf$i$i)) + 12|0);
      $ele$0$i = $68;
      L56: while(1) {
       $71 = HEAP8[$ele$0$i>>0]|0;
       switch ($71<<24>>24) {
       case 0:  {
        label = 66;
        break L56;
        break;
       }
       case 124:  {
        $72 = ((($ele$0$i)) + 1|0);
        $$pre = HEAP8[$72>>0]|0;
        $111 = $72;$74 = $$pre;
        break;
       }
       default: {
        $111 = $ele$0$i;$74 = $71;
       }
       }
       $73 = ($74<<24>>24)==(0);
       L61: do {
        if ($73) {
         $86 = 0;$r$0$lcssa$i$i = 20706;
        } else {
         $$08$in$i$i = 4;$79 = $74;$l$06$i$i = $111;$r$07$i$i = 20706;
         while(1) {
          $$08$i$i = (($$08$in$i$i) + -1)|0;
          $75 = HEAP8[$r$07$i$i>>0]|0;
          $76 = ($75<<24>>24)!=(0);
          $77 = ($$08$i$i|0)!=(0);
          $or$cond$i$i = $77 & $76;
          $78 = ($79<<24>>24)==($75<<24>>24);
          $or$cond4$i$i = $78 & $or$cond$i$i;
          if (!($or$cond4$i$i)) {
           $86 = $79;$r$0$lcssa$i$i = $r$07$i$i;
           break L61;
          }
          $80 = ((($l$06$i$i)) + 1|0);
          $81 = ((($r$07$i$i)) + 1|0);
          $82 = HEAP8[$80>>0]|0;
          $83 = ($82<<24>>24)==(0);
          if ($83) {
           $86 = 0;$r$0$lcssa$i$i = $81;
           break;
          } else {
           $$08$in$i$i = $$08$i$i;$79 = $82;$l$06$i$i = $80;$r$07$i$i = $81;
          }
         }
        }
       } while(0);
       $84 = HEAP8[$r$0$lcssa$i$i>>0]|0;
       $85 = ($86<<24>>24)==($84<<24>>24);
       if (!($85)) {
        L68: do {
         if ($73) {
          $98 = 0;$r$0$lcssa$i13$i = 20655;
         } else {
          $$08$in$i3$i = 5;$91 = $74;$l$06$i5$i = $111;$r$07$i4$i = 20655;
          while(1) {
           $$08$i6$i = (($$08$in$i3$i) + -1)|0;
           $87 = HEAP8[$r$07$i4$i>>0]|0;
           $88 = ($87<<24>>24)!=(0);
           $89 = ($$08$i6$i|0)!=(0);
           $or$cond$i7$i = $89 & $88;
           $90 = ($91<<24>>24)==($87<<24>>24);
           $or$cond4$i8$i = $90 & $or$cond$i7$i;
           if (!($or$cond4$i8$i)) {
            $98 = $91;$r$0$lcssa$i13$i = $r$07$i4$i;
            break L68;
           }
           $92 = ((($l$06$i5$i)) + 1|0);
           $93 = ((($r$07$i4$i)) + 1|0);
           $94 = HEAP8[$92>>0]|0;
           $95 = ($94<<24>>24)==(0);
           if ($95) {
            $98 = 0;$r$0$lcssa$i13$i = $93;
            break;
           } else {
            $$08$in$i3$i = $$08$i6$i;$91 = $94;$l$06$i5$i = $92;$r$07$i4$i = $93;
           }
          }
         }
        } while(0);
        $96 = HEAP8[$r$0$lcssa$i13$i>>0]|0;
        $97 = ($98<<24>>24)==($96<<24>>24);
        if (!($97)) {
         L74: do {
          if ($73) {
           $110 = 0;$r$0$lcssa$i28$i = 20661;
          } else {
           $$08$in$i18$i = 4;$103 = $74;$l$06$i20$i = $111;$r$07$i19$i = 20661;
           while(1) {
            $$08$i21$i = (($$08$in$i18$i) + -1)|0;
            $99 = HEAP8[$r$07$i19$i>>0]|0;
            $100 = ($99<<24>>24)!=(0);
            $101 = ($$08$i21$i|0)!=(0);
            $or$cond$i22$i = $101 & $100;
            $102 = ($103<<24>>24)==($99<<24>>24);
            $or$cond4$i23$i = $102 & $or$cond$i22$i;
            if (!($or$cond4$i23$i)) {
             $110 = $103;$r$0$lcssa$i28$i = $r$07$i19$i;
             break L74;
            }
            $104 = ((($l$06$i20$i)) + 1|0);
            $105 = ((($r$07$i19$i)) + 1|0);
            $106 = HEAP8[$104>>0]|0;
            $107 = ($106<<24>>24)==(0);
            if ($107) {
             $110 = 0;$r$0$lcssa$i28$i = $105;
             break;
            } else {
             $$08$in$i18$i = $$08$i21$i;$103 = $106;$l$06$i20$i = $104;$r$07$i19$i = $105;
            }
           }
          }
         } while(0);
         $108 = HEAP8[$r$0$lcssa$i28$i>>0]|0;
         $109 = ($110<<24>>24)==($108<<24>>24);
         if (!($109)) {
          $112 = (_expand_path($65,$111)|0);
          HEAP32[$vararg_buffer16>>2] = $112;
          $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
          HEAP32[$vararg_ptr19>>2] = $buf$i$i;
          $113 = (___syscall195(195,($vararg_buffer16|0))|0);
          $114 = ($113>>>0)>(4294963200);
          do {
           if ($114) {
            $115 = (0 - ($113))|0;
            $116 = HEAP32[6773]|0;
            $117 = ($116|0)==(0|0);
            if ($117) {
             $$0$i$i$i$i$i = 27136;
            } else {
             $118 = (_pthread_self()|0);
             $119 = ((($118)) + 64|0);
             $120 = HEAP32[$119>>2]|0;
             $$0$i$i$i$i$i = $120;
            }
            HEAP32[$$0$i$i$i$i$i>>2] = $115;
            label = 54;
           } else {
            $121 = ($113|0)==(0);
            if (!($121)) {
             label = 54;
             break;
            }
            $122 = HEAP32[$70>>2]|0;
            $123 = $122 & 61440;
            $124 = ($123|0)==(32768);
            if ($124) {
             break L56;
            }
           }
          } while(0);
          if ((label|0) == 54) {
           label = 0;
          }
          _free($112);
         }
        }
       }
       $125 = $ele$0$i;
       $126 = $125 & 3;
       $127 = ($126|0)==(0);
       L91: do {
        if ($127) {
         $$01$lcssa$i$i = $ele$0$i;
         label = 60;
        } else {
         $$014$i$i = $ele$0$i;$1537 = $125;
         while(1) {
          $128 = HEAP8[$$014$i$i>>0]|0;
          $129 = ($128<<24>>24)==(0);
          if ($129) {
           $$pn$i$i = $1537;
           break L91;
          }
          $130 = ((($$014$i$i)) + 1|0);
          $131 = $130;
          $132 = $131 & 3;
          $133 = ($132|0)==(0);
          if ($133) {
           $$01$lcssa$i$i = $130;
           label = 60;
           break;
          } else {
           $$014$i$i = $130;$1537 = $131;
          }
         }
        }
       } while(0);
       if ((label|0) == 60) {
        label = 0;
        $w$0$i$i = $$01$lcssa$i$i;
        while(1) {
         $134 = HEAP32[$w$0$i$i>>2]|0;
         $135 = (($134) + -16843009)|0;
         $136 = $134 & -2139062144;
         $137 = $136 ^ -2139062144;
         $138 = $137 & $135;
         $139 = ($138|0)==(0);
         $140 = ((($w$0$i$i)) + 4|0);
         if ($139) {
          $w$0$i$i = $140;
         } else {
          break;
         }
        }
        $141 = $134&255;
        $142 = ($141<<24>>24)==(0);
        if ($142) {
         $$1$lcssa$i$i = $w$0$i$i;
        } else {
         $$pn15$i$i = $w$0$i$i;
         while(1) {
          $143 = ((($$pn15$i$i)) + 1|0);
          $$pre$i$i = HEAP8[$143>>0]|0;
          $144 = ($$pre$i$i<<24>>24)==(0);
          if ($144) {
           $$1$lcssa$i$i = $143;
           break;
          } else {
           $$pn15$i$i = $143;
          }
         }
        }
        $145 = $$1$lcssa$i$i;
        $$pn$i$i = $145;
       }
       $$0$i$i = (($$pn$i$i) - ($125))|0;
       $146 = (($$0$i$i) + 1)|0;
       $147 = (($ele$0$i) + ($146)|0);
       $ele$0$i = $147;
      }
      if ((label|0) == 66) {
       _free($68);
       break;
      }
      _free($68);
      $148 = ($112|0)==(0|0);
      if (!($148)) {
       $149 = $112;
       $150 = $path;
       $151 = $149 ^ $150;
       $152 = $151 & 3;
       $153 = ($152|0)==(0);
       L109: do {
        if ($153) {
         $154 = $149 & 3;
         $155 = ($154|0)==(0);
         L111: do {
          if ($155) {
           $$0$lcssa42$i$i = 4096;$$04$lcssa43$i$i = $112;$$06$lcssa44$i$i = $path;
          } else {
           $$031$i$i = 4096;$$0430$i$i = $112;$$0629$i$i = $path;
           while(1) {
            $156 = HEAP8[$$0430$i$i>>0]|0;
            HEAP8[$$0629$i$i>>0] = $156;
            $157 = ($156<<24>>24)==(0);
            if ($157) {
             $$0$lcssa42$i$i = $$031$i$i;$$04$lcssa43$i$i = $$0430$i$i;$$06$lcssa44$i$i = $$0629$i$i;
             break L111;
            }
            $158 = (($$031$i$i) + -1)|0;
            $159 = ((($$0430$i$i)) + 1|0);
            $160 = ((($$0629$i$i)) + 1|0);
            $161 = $159;
            $162 = $161 & 3;
            $163 = ($162|0)!=(0);
            $164 = ($158|0)!=(0);
            $or$cond$i$i4 = $164 & $163;
            if ($or$cond$i$i4) {
             $$031$i$i = $158;$$0430$i$i = $159;$$0629$i$i = $160;
            } else {
             break;
            }
           }
           if ($164) {
            $$0$lcssa42$i$i = $158;$$04$lcssa43$i$i = $159;$$06$lcssa44$i$i = $160;
           } else {
            $$28$i$i = $160;$$3$i$i = 0;
            break L109;
           }
          }
         } while(0);
         $165 = HEAP8[$$04$lcssa43$i$i>>0]|0;
         $166 = ($165<<24>>24)==(0);
         if ($166) {
          $$28$i$i = $$06$lcssa44$i$i;$$3$i$i = $$0$lcssa42$i$i;
         } else {
          $167 = ($$0$lcssa42$i$i>>>0)>(3);
          L118: do {
           if ($167) {
            $$117$i$i = $$0$lcssa42$i$i;$wd$018$i$i = $$06$lcssa44$i$i;$ws$019$i$i = $$04$lcssa43$i$i;
            while(1) {
             $168 = HEAP32[$ws$019$i$i>>2]|0;
             $169 = (($168) + -16843009)|0;
             $170 = $168 & -2139062144;
             $171 = $170 ^ -2139062144;
             $172 = $171 & $169;
             $173 = ($172|0)==(0);
             if (!($173)) {
              break;
             }
             HEAP32[$wd$018$i$i>>2] = $168;
             $174 = (($$117$i$i) + -4)|0;
             $175 = ((($ws$019$i$i)) + 4|0);
             $176 = ((($wd$018$i$i)) + 4|0);
             $177 = ($174>>>0)>(3);
             if ($177) {
              $$117$i$i = $174;$wd$018$i$i = $176;$ws$019$i$i = $175;
             } else {
              $$1$lcssa$i$i6 = $174;$wd$0$lcssa$i$i = $176;$ws$0$lcssa$i$i = $175;
              break L118;
             }
            }
            $$1511$i$i = $ws$019$i$i;$$1710$i$i = $wd$018$i$i;$$212$i$i = $$117$i$i;
            label = 79;
            break L109;
           } else {
            $$1$lcssa$i$i6 = $$0$lcssa42$i$i;$wd$0$lcssa$i$i = $$06$lcssa44$i$i;$ws$0$lcssa$i$i = $$04$lcssa43$i$i;
           }
          } while(0);
          $178 = ($$1$lcssa$i$i6|0)==(0);
          if ($178) {
           $$28$i$i = $wd$0$lcssa$i$i;$$3$i$i = 0;
          } else {
           $$1511$i$i = $ws$0$lcssa$i$i;$$1710$i$i = $wd$0$lcssa$i$i;$$212$i$i = $$1$lcssa$i$i6;
           label = 79;
          }
         }
        } else {
         $$1511$i$i = $112;$$1710$i$i = $path;$$212$i$i = 4096;
         label = 79;
        }
       } while(0);
       L124: do {
        if ((label|0) == 79) {
         while(1) {
          label = 0;
          $179 = HEAP8[$$1511$i$i>>0]|0;
          HEAP8[$$1710$i$i>>0] = $179;
          $180 = ($179<<24>>24)==(0);
          if ($180) {
           $$28$i$i = $$1710$i$i;$$3$i$i = $$212$i$i;
           break L124;
          }
          $181 = (($$212$i$i) + -1)|0;
          $182 = ((($$1511$i$i)) + 1|0);
          $183 = ((($$1710$i$i)) + 1|0);
          $184 = ($181|0)==(0);
          if ($184) {
           $$28$i$i = $183;$$3$i$i = 0;
           break;
          } else {
           $$1511$i$i = $182;$$1710$i$i = $183;$$212$i$i = $181;
           label = 79;
          }
         }
        }
       } while(0);
       _memset(($$28$i$i|0),0,($$3$i$i|0))|0;
       _free($112);
       HEAP32[$vararg_buffer20>>2] = $path;
       $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
       HEAP32[$vararg_ptr23>>2] = $buf$i;
       $185 = (___syscall195(195,($vararg_buffer20|0))|0);
       $186 = ($185>>>0)>(4294963200);
       if ($186) {
        $187 = (0 - ($185))|0;
        $188 = HEAP32[6773]|0;
        $189 = ($188|0)==(0|0);
        if ($189) {
         $$0$i$i$i$i9 = 27136;
        } else {
         $190 = (_pthread_self()|0);
         $191 = ((($190)) + 64|0);
         $192 = HEAP32[$191>>2]|0;
         $$0$i$i$i$i9 = $192;
        }
        HEAP32[$$0$i$i$i$i9>>2] = $187;
       } else {
        $193 = ($185|0)==(0);
        if ($193) {
         $194 = ((($buf$i)) + 12|0);
         $195 = HEAP32[$194>>2]|0;
         $196 = $195 & 61440;
         $197 = ($196|0)==(32768);
         if ($197) {
          $$pre$phi335Z2D = $path;
          label = 88;
          break;
         } else {
          break;
         }
        }
       }
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 88) {
     HEAP32[$vararg_buffer24>>2] = $$pre$phi335Z2D;
     $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
     HEAP32[$vararg_ptr27>>2] = $sb;
     $198 = (___syscall195(195,($vararg_buffer24|0))|0);
     $199 = ($198>>>0)>(4294963200);
     if ($199) {
      $200 = (0 - ($198))|0;
      $201 = HEAP32[6773]|0;
      $202 = ($201|0)==(0|0);
      if ($202) {
       $$0$i$i$i11 = 27136;
      } else {
       $203 = (_pthread_self()|0);
       $204 = ((($203)) + 64|0);
       $205 = HEAP32[$204>>2]|0;
       $$0$i$i$i11 = $205;
      }
      HEAP32[$$0$i$i$i11>>2] = $200;
      break;
     }
     $206 = ($198|0)==(0);
     if ($206) {
      $207 = (_bgzf_open($$pre$phi335Z2D,21885)|0);
      $208 = ($207|0)==(0|0);
      if (!($208)) {
       $209 = ((($sb)) + 36|0);
       $210 = HEAP32[$209>>2]|0;
       $211 = ($210|0)<(0);
       $212 = $211 << 31 >> 31;
       $213 = ((($r)) + 8|0);
       $214 = $213;
       $215 = $214;
       HEAP32[$215>>2] = $210;
       $216 = (($214) + 4)|0;
       $217 = $216;
       HEAP32[$217>>2] = $212;
       $218 = ((($r)) + 16|0);
       $219 = ((($fd)) + 48|0);
       ;HEAP32[$218>>2]=0|0;HEAP32[$218+4>>2]=0|0;HEAP32[$218+8>>2]=0|0;HEAP32[$218+12>>2]=0|0;
       $220 = HEAP32[$219>>2]|0;
       $221 = HEAP32[$220>>2]|0;
       $222 = $path;
       $223 = $222 & 3;
       $224 = ($223|0)==(0);
       L147: do {
        if ($224) {
         $$01$lcssa$i$i17 = $$pre$phi335Z2D;
         label = 97;
        } else {
         $$014$i$i14 = $$pre$phi335Z2D;$1538 = $222;
         while(1) {
          $225 = HEAP8[$$014$i$i14>>0]|0;
          $226 = ($225<<24>>24)==(0);
          if ($226) {
           $$pn$i$i28 = $1538;
           break L147;
          }
          $227 = ((($$014$i$i14)) + 1|0);
          $228 = $227;
          $229 = $228 & 3;
          $230 = ($229|0)==(0);
          if ($230) {
           $$01$lcssa$i$i17 = $227;
           label = 97;
           break;
          } else {
           $$014$i$i14 = $227;$1538 = $228;
          }
         }
        }
       } while(0);
       if ((label|0) == 97) {
        $w$0$i$i19 = $$01$lcssa$i$i17;
        while(1) {
         $231 = HEAP32[$w$0$i$i19>>2]|0;
         $232 = (($231) + -16843009)|0;
         $233 = $231 & -2139062144;
         $234 = $233 ^ -2139062144;
         $235 = $234 & $232;
         $236 = ($235|0)==(0);
         $237 = ((($w$0$i$i19)) + 4|0);
         if ($236) {
          $w$0$i$i19 = $237;
         } else {
          break;
         }
        }
        $238 = $231&255;
        $239 = ($238<<24>>24)==(0);
        if ($239) {
         $$1$lcssa$i$i25 = $w$0$i$i19;
        } else {
         $$pn15$i$i21 = $w$0$i$i19;
         while(1) {
          $240 = ((($$pn15$i$i21)) + 1|0);
          $$pre$i$i22 = HEAP8[$240>>0]|0;
          $241 = ($$pre$i$i22<<24>>24)==(0);
          if ($241) {
           $$1$lcssa$i$i25 = $240;
           break;
          } else {
           $$pn15$i$i21 = $240;
          }
         }
        }
        $242 = $$1$lcssa$i$i25;
        $$pn$i$i28 = $242;
       }
       $$0$i$i29 = (($$pn$i$i28) - ($222))|0;
       $243 = (_string_ndup($221,$$pre$phi335Z2D,$$0$i$i29)|0);
       $244 = ((($r)) + 4|0);
       HEAP32[$244>>2] = $243;
       $245 = HEAP32[$219>>2]|0;
       $246 = ((($245)) + 20|0);
       $247 = HEAP32[$246>>2]|0;
       $248 = ($247|0)==(0|0);
       do {
        if ($248) {
         $252 = $245;
        } else {
         $249 = (_bgzf_close($247)|0);
         $250 = ($249|0)==(0);
         if ($250) {
          $$pre322 = HEAP32[$219>>2]|0;
          $252 = $$pre322;
          break;
         } else {
          $$0 = -1;
          STACKTOP = sp;return ($$0|0);
         }
        }
       } while(0);
       $251 = ((($252)) + 20|0);
       HEAP32[$251>>2] = $207;
       $253 = HEAP32[$244>>2]|0;
       $254 = HEAP32[$219>>2]|0;
       $255 = ((($254)) + 16|0);
       HEAP32[$255>>2] = $253;
       $256 = ((($r)) + 48|0);
       HEAP32[$256>>2] = 1;
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   } while(0);
   $257 = HEAP32[$49>>2]|0;
   $258 = ((($257)) + 3|0);
   $259 = ($ref_path$0|0)==(0|0);
   if ($259) {
    $260 = (_getenv((20698|0))|0);
    $$01$i31 = $260;
   } else {
    $$01$i31 = $ref_path$0;
   }
   $261 = (_tokenise_search_path($$01$i31)|0);
   $262 = ($261|0)==(0|0);
   if ($262) {
    $tag$0$in$i68 = $47;
   } else {
    $263 = ((($buf$i$i$i)) + 12|0);
    $264 = ((($sb$i$i$i$i$i)) + 36|0);
    $ele$0$i32 = $261;
    L173: while(1) {
     $265 = HEAP8[$ele$0$i32>>0]|0;
     switch ($265<<24>>24) {
     case 0:  {
      label = 224;
      break L173;
      break;
     }
     case 124:  {
      $266 = ((($ele$0$i32)) + 1|0);
      $$pre323 = HEAP8[$266>>0]|0;
      $268 = $$pre323;$ele2$0$i = $266;
      break;
     }
     default: {
      $268 = $265;$ele2$0$i = $ele$0$i32;
     }
     }
     $267 = ($268<<24>>24)==(0);
     L178: do {
      if ($267) {
       $280 = 0;$r$0$lcssa$i$i44 = 20706;
      } else {
       $$08$in$i$i34 = 4;$273 = $268;$l$06$i$i36 = $ele2$0$i;$r$07$i$i35 = 20706;
       while(1) {
        $$08$i$i37 = (($$08$in$i$i34) + -1)|0;
        $269 = HEAP8[$r$07$i$i35>>0]|0;
        $270 = ($269<<24>>24)!=(0);
        $271 = ($$08$i$i37|0)!=(0);
        $or$cond$i$i38 = $271 & $270;
        $272 = ($273<<24>>24)==($269<<24>>24);
        $or$cond4$i$i39 = $272 & $or$cond$i$i38;
        if (!($or$cond4$i$i39)) {
         $280 = $273;$r$0$lcssa$i$i44 = $r$07$i$i35;
         break L178;
        }
        $274 = ((($l$06$i$i36)) + 1|0);
        $275 = ((($r$07$i$i35)) + 1|0);
        $276 = HEAP8[$274>>0]|0;
        $277 = ($276<<24>>24)==(0);
        if ($277) {
         $280 = 0;$r$0$lcssa$i$i44 = $275;
         break;
        } else {
         $$08$in$i$i34 = $$08$i$i37;$273 = $276;$l$06$i$i36 = $274;$r$07$i$i35 = $275;
        }
       }
      }
     } while(0);
     $278 = HEAP8[$r$0$lcssa$i$i44>>0]|0;
     $279 = ($280<<24>>24)==($278<<24>>24);
     do {
      if ($279) {
       $281 = ((($ele2$0$i)) + 4|0);
       $282 = (_find_file_url($258,$281)|0);
       $283 = ($282|0)==(0|0);
       if (!($283)) {
        label = 117;
        break L173;
       }
      } else {
       L186: do {
        if ($267) {
         $295 = 0;$r$0$lcssa$i12$i = 20655;
        } else {
         $$08$in$i2$i = 5;$288 = $268;$l$06$i4$i = $ele2$0$i;$r$07$i3$i = 20655;
         while(1) {
          $$08$i5$i = (($$08$in$i2$i) + -1)|0;
          $284 = HEAP8[$r$07$i3$i>>0]|0;
          $285 = ($284<<24>>24)!=(0);
          $286 = ($$08$i5$i|0)!=(0);
          $or$cond$i6$i = $286 & $285;
          $287 = ($288<<24>>24)==($284<<24>>24);
          $or$cond4$i7$i = $287 & $or$cond$i6$i;
          if (!($or$cond4$i7$i)) {
           $295 = $288;$r$0$lcssa$i12$i = $r$07$i3$i;
           break L186;
          }
          $289 = ((($l$06$i4$i)) + 1|0);
          $290 = ((($r$07$i3$i)) + 1|0);
          $291 = HEAP8[$289>>0]|0;
          $292 = ($291<<24>>24)==(0);
          if ($292) {
           $295 = 0;$r$0$lcssa$i12$i = $290;
           break;
          } else {
           $$08$in$i2$i = $$08$i5$i;$288 = $291;$l$06$i4$i = $289;$r$07$i3$i = $290;
          }
         }
        }
       } while(0);
       $293 = HEAP8[$r$0$lcssa$i12$i>>0]|0;
       $294 = ($295<<24>>24)==($293<<24>>24);
       if (!($294)) {
        L193: do {
         if ($267) {
          $307 = 0;$r$0$lcssa$i27$i = 20661;
         } else {
          $$08$in$i17$i = 4;$300 = $268;$l$06$i19$i = $ele2$0$i;$r$07$i18$i = 20661;
          while(1) {
           $$08$i20$i = (($$08$in$i17$i) + -1)|0;
           $296 = HEAP8[$r$07$i18$i>>0]|0;
           $297 = ($296<<24>>24)!=(0);
           $298 = ($$08$i20$i|0)!=(0);
           $or$cond$i21$i = $298 & $297;
           $299 = ($300<<24>>24)==($296<<24>>24);
           $or$cond4$i22$i = $299 & $or$cond$i21$i;
           if (!($or$cond4$i22$i)) {
            $307 = $300;$r$0$lcssa$i27$i = $r$07$i18$i;
            break L193;
           }
           $301 = ((($l$06$i19$i)) + 1|0);
           $302 = ((($r$07$i18$i)) + 1|0);
           $303 = HEAP8[$301>>0]|0;
           $304 = ($303<<24>>24)==(0);
           if ($304) {
            $307 = 0;$r$0$lcssa$i27$i = $302;
            break;
           } else {
            $$08$in$i17$i = $$08$i20$i;$300 = $303;$l$06$i19$i = $301;$r$07$i18$i = $302;
           }
          }
         }
        } while(0);
        $305 = HEAP8[$r$0$lcssa$i27$i>>0]|0;
        $306 = ($307<<24>>24)==($305<<24>>24);
        if (!($306)) {
         $310 = (_expand_path($258,$ele2$0$i)|0);
         HEAP32[$vararg_buffer28>>2] = $310;
         $vararg_ptr31 = ((($vararg_buffer28)) + 4|0);
         HEAP32[$vararg_ptr31>>2] = $buf$i$i$i;
         $311 = (___syscall195(195,($vararg_buffer28|0))|0);
         $312 = ($311>>>0)>(4294963200);
         do {
          if ($312) {
           $313 = (0 - ($311))|0;
           $314 = HEAP32[6773]|0;
           $315 = ($314|0)==(0|0);
           if ($315) {
            $$0$i$i$i$i$i$i = 27136;
           } else {
            $316 = (_pthread_self()|0);
            $317 = ((($316)) + 64|0);
            $318 = HEAP32[$317>>2]|0;
            $$0$i$i$i$i$i$i = $318;
           }
           HEAP32[$$0$i$i$i$i$i$i>>2] = $313;
           label = 133;
          } else {
           $319 = ($311|0)==(0);
           if (!($319)) {
            label = 133;
            break;
           }
           $320 = HEAP32[$263>>2]|0;
           $321 = $320 & 61440;
           $322 = ($321|0)==(32768);
           if (!($322)) {
            break;
           }
           $323 = (_fopen($310,20711)|0);
           $324 = ($323|0)==(0|0);
           if ($324) {
            break;
           }
           L208: do {
            if (((((20711) & 3)|0)==(0))) {
             $$02$lcssa$i6$i$i$i$i = 20711;
             label = 139;
            } else {
             $$0211$i3$i$i$i$i = 20711;
             while(1) {
              $325 = HEAP8[$$0211$i3$i$i$i$i>>0]|0;
              switch ($325<<24>>24) {
              case 0: case 119:  {
               $$0$i19$i$i$i$i = $$0211$i3$i$i$i$i;$353 = $325;
               break L208;
               break;
              }
              default: {
              }
              }
              $326 = ((($$0211$i3$i$i$i$i)) + 1|0);
              $327 = $326;
              $328 = $327 & 3;
              $329 = ($328|0)==(0);
              if ($329) {
               $$02$lcssa$i6$i$i$i$i = $326;
               label = 139;
               break L208;
              } else {
               $$0211$i3$i$i$i$i = $326;
              }
             }
            }
           } while(0);
           L212: do {
            if ((label|0) == 139) {
             label = 0;
             $330 = HEAP32[$$02$lcssa$i6$i$i$i$i>>2]|0;
             $331 = (($330) + -16843009)|0;
             $332 = $330 & -2139062144;
             $333 = $332 ^ -2139062144;
             $334 = $333 & $331;
             $335 = ($334|0)==(0);
             L214: do {
              if ($335) {
               $337 = $330;$w$08$i9$i$i$i$i = $$02$lcssa$i6$i$i$i$i;
               while(1) {
                $336 = $337 ^ 2004318071;
                $338 = (($336) + -16843009)|0;
                $339 = $337 & -2139062144;
                $340 = $339 ^ -2139062144;
                $341 = $340 & $338;
                $342 = ($341|0)==(0);
                if (!($342)) {
                 $w$0$lcssa$i13$i$i$i$i = $w$08$i9$i$i$i$i;
                 break L214;
                }
                $343 = ((($w$08$i9$i$i$i$i)) + 4|0);
                $344 = HEAP32[$343>>2]|0;
                $345 = (($344) + -16843009)|0;
                $346 = $344 & -2139062144;
                $347 = $346 ^ -2139062144;
                $348 = $347 & $345;
                $349 = ($348|0)==(0);
                if ($349) {
                 $337 = $344;$w$08$i9$i$i$i$i = $343;
                } else {
                 $w$0$lcssa$i13$i$i$i$i = $343;
                 break;
                }
               }
              } else {
               $w$0$lcssa$i13$i$i$i$i = $$02$lcssa$i6$i$i$i$i;
              }
             } while(0);
             $$1$i15$i$i$i$i = $w$0$lcssa$i13$i$i$i$i;
             while(1) {
              $350 = HEAP8[$$1$i15$i$i$i$i>>0]|0;
              $351 = ((($$1$i15$i$i$i$i)) + 1|0);
              switch ($350<<24>>24) {
              case 0: case 119:  {
               $$0$i19$i$i$i$i = $$1$i15$i$i$i$i;$353 = $350;
               break L212;
               break;
              }
              default: {
               $$1$i15$i$i$i$i = $351;
              }
              }
             }
            }
           } while(0);
           $352 = ($$0$i19$i$i$i$i|0)==(0|0);
           $not$192 = ($353<<24>>24)!=(119);
           $354 = $352 | $not$192;
           $$447$ = $354 ? 1 : 19;
           L222: do {
            if (((((20711) & 3)|0)==(0))) {
             $$02$lcssa$i25$i$i$i$i = 20711;
             label = 147;
            } else {
             $$0211$i22$i$i$i$i = 20711;
             while(1) {
              $355 = HEAP8[$$0211$i22$i$i$i$i>>0]|0;
              switch ($355<<24>>24) {
              case 0: case 97:  {
               $$0$i38$i$i$i$i = $$0211$i22$i$i$i$i;$383 = $355;
               break L222;
               break;
              }
              default: {
              }
              }
              $356 = ((($$0211$i22$i$i$i$i)) + 1|0);
              $357 = $356;
              $358 = $357 & 3;
              $359 = ($358|0)==(0);
              if ($359) {
               $$02$lcssa$i25$i$i$i$i = $356;
               label = 147;
               break L222;
              } else {
               $$0211$i22$i$i$i$i = $356;
              }
             }
            }
           } while(0);
           L226: do {
            if ((label|0) == 147) {
             label = 0;
             $360 = HEAP32[$$02$lcssa$i25$i$i$i$i>>2]|0;
             $361 = (($360) + -16843009)|0;
             $362 = $360 & -2139062144;
             $363 = $362 ^ -2139062144;
             $364 = $363 & $361;
             $365 = ($364|0)==(0);
             L228: do {
              if ($365) {
               $367 = $360;$w$08$i28$i$i$i$i = $$02$lcssa$i25$i$i$i$i;
               while(1) {
                $366 = $367 ^ 1633771873;
                $368 = (($366) + -16843009)|0;
                $369 = $367 & -2139062144;
                $370 = $369 ^ -2139062144;
                $371 = $370 & $368;
                $372 = ($371|0)==(0);
                if (!($372)) {
                 $w$0$lcssa$i32$i$i$i$i = $w$08$i28$i$i$i$i;
                 break L228;
                }
                $373 = ((($w$08$i28$i$i$i$i)) + 4|0);
                $374 = HEAP32[$373>>2]|0;
                $375 = (($374) + -16843009)|0;
                $376 = $374 & -2139062144;
                $377 = $376 ^ -2139062144;
                $378 = $377 & $375;
                $379 = ($378|0)==(0);
                if ($379) {
                 $367 = $374;$w$08$i28$i$i$i$i = $373;
                } else {
                 $w$0$lcssa$i32$i$i$i$i = $373;
                 break;
                }
               }
              } else {
               $w$0$lcssa$i32$i$i$i$i = $$02$lcssa$i25$i$i$i$i;
              }
             } while(0);
             $$1$i34$i$i$i$i = $w$0$lcssa$i32$i$i$i$i;
             while(1) {
              $380 = HEAP8[$$1$i34$i$i$i$i>>0]|0;
              $381 = ((($$1$i34$i$i$i$i)) + 1|0);
              switch ($380<<24>>24) {
              case 0: case 97:  {
               $$0$i38$i$i$i$i = $$1$i34$i$i$i$i;$383 = $380;
               break L226;
               break;
              }
              default: {
               $$1$i34$i$i$i$i = $381;
              }
              }
             }
            }
           } while(0);
           $382 = ($$0$i38$i$i$i$i|0)==(0|0);
           $not$193 = ($383<<24>>24)!=(97);
           $384 = $382 | $not$193;
           $385 = $$447$ | 6;
           $$447$$ = $384 ? $$447$ : $385;
           L236: do {
            if (((((20711) & 3)|0)==(0))) {
             $$02$lcssa$i46$i$i$i$i = 20711;
             label = 155;
            } else {
             $$0211$i43$i$i$i$i = 20711;
             while(1) {
              $386 = HEAP8[$$0211$i43$i$i$i$i>>0]|0;
              switch ($386<<24>>24) {
              case 0: case 98:  {
               $$0$i59$i$i$i$i = $$0211$i43$i$i$i$i;$414 = $386;
               break L236;
               break;
              }
              default: {
              }
              }
              $387 = ((($$0211$i43$i$i$i$i)) + 1|0);
              $388 = $387;
              $389 = $388 & 3;
              $390 = ($389|0)==(0);
              if ($390) {
               $$02$lcssa$i46$i$i$i$i = $387;
               label = 155;
               break L236;
              } else {
               $$0211$i43$i$i$i$i = $387;
              }
             }
            }
           } while(0);
           L240: do {
            if ((label|0) == 155) {
             label = 0;
             $391 = HEAP32[$$02$lcssa$i46$i$i$i$i>>2]|0;
             $392 = (($391) + -16843009)|0;
             $393 = $391 & -2139062144;
             $394 = $393 ^ -2139062144;
             $395 = $394 & $392;
             $396 = ($395|0)==(0);
             L242: do {
              if ($396) {
               $398 = $391;$w$08$i49$i$i$i$i = $$02$lcssa$i46$i$i$i$i;
               while(1) {
                $397 = $398 ^ 1650614882;
                $399 = (($397) + -16843009)|0;
                $400 = $398 & -2139062144;
                $401 = $400 ^ -2139062144;
                $402 = $401 & $399;
                $403 = ($402|0)==(0);
                if (!($403)) {
                 $w$0$lcssa$i53$i$i$i$i = $w$08$i49$i$i$i$i;
                 break L242;
                }
                $404 = ((($w$08$i49$i$i$i$i)) + 4|0);
                $405 = HEAP32[$404>>2]|0;
                $406 = (($405) + -16843009)|0;
                $407 = $405 & -2139062144;
                $408 = $407 ^ -2139062144;
                $409 = $408 & $406;
                $410 = ($409|0)==(0);
                if ($410) {
                 $398 = $405;$w$08$i49$i$i$i$i = $404;
                } else {
                 $w$0$lcssa$i53$i$i$i$i = $404;
                 break;
                }
               }
              } else {
               $w$0$lcssa$i53$i$i$i$i = $$02$lcssa$i46$i$i$i$i;
              }
             } while(0);
             $$1$i55$i$i$i$i = $w$0$lcssa$i53$i$i$i$i;
             while(1) {
              $411 = HEAP8[$$1$i55$i$i$i$i>>0]|0;
              $412 = ((($$1$i55$i$i$i$i)) + 1|0);
              switch ($411<<24>>24) {
              case 0: case 98:  {
               $$0$i59$i$i$i$i = $$1$i55$i$i$i$i;$414 = $411;
               break L240;
               break;
              }
              default: {
               $$1$i55$i$i$i$i = $412;
              }
              }
             }
            }
           } while(0);
           $413 = ($$0$i59$i$i$i$i|0)==(0|0);
           $not$194 = ($414<<24>>24)!=(98);
           $415 = $413 | $not$194;
           $416 = $$447$$ | 8;
           $$447$$$ = $415 ? $$447$$ : $416;
           L250: do {
            if (((((20711) & 3)|0)==(0))) {
             $$02$lcssa$i65$i$i$i$i = 20711;
             label = 163;
            } else {
             $$0211$i62$i$i$i$i = 20711;
             while(1) {
              $417 = HEAP8[$$0211$i62$i$i$i$i>>0]|0;
              switch ($417<<24>>24) {
              case 0: case 120:  {
               $$0$i78$i$i$i$i = $$0211$i62$i$i$i$i;$445 = $417;
               break L250;
               break;
              }
              default: {
              }
              }
              $418 = ((($$0211$i62$i$i$i$i)) + 1|0);
              $419 = $418;
              $420 = $419 & 3;
              $421 = ($420|0)==(0);
              if ($421) {
               $$02$lcssa$i65$i$i$i$i = $418;
               label = 163;
               break L250;
              } else {
               $$0211$i62$i$i$i$i = $418;
              }
             }
            }
           } while(0);
           L254: do {
            if ((label|0) == 163) {
             label = 0;
             $422 = HEAP32[$$02$lcssa$i65$i$i$i$i>>2]|0;
             $423 = (($422) + -16843009)|0;
             $424 = $422 & -2139062144;
             $425 = $424 ^ -2139062144;
             $426 = $425 & $423;
             $427 = ($426|0)==(0);
             L256: do {
              if ($427) {
               $429 = $422;$w$08$i68$i$i$i$i = $$02$lcssa$i65$i$i$i$i;
               while(1) {
                $428 = $429 ^ 2021161080;
                $430 = (($428) + -16843009)|0;
                $431 = $429 & -2139062144;
                $432 = $431 ^ -2139062144;
                $433 = $432 & $430;
                $434 = ($433|0)==(0);
                if (!($434)) {
                 $w$0$lcssa$i72$i$i$i$i = $w$08$i68$i$i$i$i;
                 break L256;
                }
                $435 = ((($w$08$i68$i$i$i$i)) + 4|0);
                $436 = HEAP32[$435>>2]|0;
                $437 = (($436) + -16843009)|0;
                $438 = $436 & -2139062144;
                $439 = $438 ^ -2139062144;
                $440 = $439 & $437;
                $441 = ($440|0)==(0);
                if ($441) {
                 $429 = $436;$w$08$i68$i$i$i$i = $435;
                } else {
                 $w$0$lcssa$i72$i$i$i$i = $435;
                 break;
                }
               }
              } else {
               $w$0$lcssa$i72$i$i$i$i = $$02$lcssa$i65$i$i$i$i;
              }
             } while(0);
             $$1$i74$i$i$i$i = $w$0$lcssa$i72$i$i$i$i;
             while(1) {
              $442 = HEAP8[$$1$i74$i$i$i$i>>0]|0;
              $443 = ((($$1$i74$i$i$i$i)) + 1|0);
              switch ($442<<24>>24) {
              case 0: case 120:  {
               $$0$i78$i$i$i$i = $$1$i74$i$i$i$i;$445 = $442;
               break L254;
               break;
              }
              default: {
               $$1$i74$i$i$i$i = $443;
              }
              }
             }
            }
           } while(0);
           $444 = ($$0$i78$i$i$i$i|0)==(0|0);
           $not$195 = ($445<<24>>24)!=(120);
           $446 = $444 | $not$195;
           L264: do {
            if (((((20711) & 3)|0)==(0))) {
             $$02$lcssa$i84$i$i$i$i = 20711;
             label = 171;
            } else {
             $$0211$i81$i$i$i$i = 20711;
             while(1) {
              $447 = HEAP8[$$0211$i81$i$i$i$i>>0]|0;
              switch ($447<<24>>24) {
              case 0: case 43:  {
               $$0$i97$i$i$i$i = $$0211$i81$i$i$i$i;$475 = $447;
               break L264;
               break;
              }
              default: {
              }
              }
              $448 = ((($$0211$i81$i$i$i$i)) + 1|0);
              $449 = $448;
              $450 = $449 & 3;
              $451 = ($450|0)==(0);
              if ($451) {
               $$02$lcssa$i84$i$i$i$i = $448;
               label = 171;
               break L264;
              } else {
               $$0211$i81$i$i$i$i = $448;
              }
             }
            }
           } while(0);
           L268: do {
            if ((label|0) == 171) {
             label = 0;
             $452 = HEAP32[$$02$lcssa$i84$i$i$i$i>>2]|0;
             $453 = (($452) + -16843009)|0;
             $454 = $452 & -2139062144;
             $455 = $454 ^ -2139062144;
             $456 = $455 & $453;
             $457 = ($456|0)==(0);
             L270: do {
              if ($457) {
               $459 = $452;$w$08$i87$i$i$i$i = $$02$lcssa$i84$i$i$i$i;
               while(1) {
                $458 = $459 ^ 724249387;
                $460 = (($458) + -16843009)|0;
                $461 = $459 & -2139062144;
                $462 = $461 ^ -2139062144;
                $463 = $462 & $460;
                $464 = ($463|0)==(0);
                if (!($464)) {
                 $w$0$lcssa$i91$i$i$i$i = $w$08$i87$i$i$i$i;
                 break L270;
                }
                $465 = ((($w$08$i87$i$i$i$i)) + 4|0);
                $466 = HEAP32[$465>>2]|0;
                $467 = (($466) + -16843009)|0;
                $468 = $466 & -2139062144;
                $469 = $468 ^ -2139062144;
                $470 = $469 & $467;
                $471 = ($470|0)==(0);
                if ($471) {
                 $459 = $466;$w$08$i87$i$i$i$i = $465;
                } else {
                 $w$0$lcssa$i91$i$i$i$i = $465;
                 break;
                }
               }
              } else {
               $w$0$lcssa$i91$i$i$i$i = $$02$lcssa$i84$i$i$i$i;
              }
             } while(0);
             $$1$i93$i$i$i$i = $w$0$lcssa$i91$i$i$i$i;
             while(1) {
              $472 = HEAP8[$$1$i93$i$i$i$i>>0]|0;
              $473 = ((($$1$i93$i$i$i$i)) + 1|0);
              switch ($472<<24>>24) {
              case 0: case 43:  {
               $$0$i97$i$i$i$i = $$1$i93$i$i$i$i;$475 = $472;
               break L268;
               break;
              }
              default: {
               $$1$i93$i$i$i$i = $473;
              }
              }
             }
            }
           } while(0);
           $474 = ($$0$i97$i$i$i$i|0)==(0|0);
           $not$196 = ($475<<24>>24)!=(43);
           $476 = $474 | $not$196;
           $477 = $$447$$$ | 3;
           $$447$$$$ = $476 ? $$447$$$ : $477;
           $478 = (_malloc(32)|0);
           $479 = ($478|0)==(0|0);
           if (!($479)) {
            label = 177;
            break L173;
           }
          }
         } while(0);
         if ((label|0) == 133) {
          label = 0;
         }
         _free($310);
         break;
        }
       }
       $308 = (_find_file_url($258,$ele2$0$i)|0);
       $309 = ($308|0)==(0|0);
       if (!($309)) {
        label = 127;
        break L173;
       }
      }
     } while(0);
     $591 = $ele$0$i32;
     $592 = $591 & 3;
     $593 = ($592|0)==(0);
     L283: do {
      if ($593) {
       $$01$lcssa$i$i51 = $ele$0$i32;
       label = 218;
      } else {
       $$014$i$i49 = $ele$0$i32;$1539 = $591;
       while(1) {
        $594 = HEAP8[$$014$i$i49>>0]|0;
        $595 = ($594<<24>>24)==(0);
        if ($595) {
         $$pn$i$i62 = $1539;
         break L283;
        }
        $596 = ((($$014$i$i49)) + 1|0);
        $597 = $596;
        $598 = $597 & 3;
        $599 = ($598|0)==(0);
        if ($599) {
         $$01$lcssa$i$i51 = $596;
         label = 218;
         break;
        } else {
         $$014$i$i49 = $596;$1539 = $597;
        }
       }
      }
     } while(0);
     if ((label|0) == 218) {
      label = 0;
      $w$0$i$i53 = $$01$lcssa$i$i51;
      while(1) {
       $600 = HEAP32[$w$0$i$i53>>2]|0;
       $601 = (($600) + -16843009)|0;
       $602 = $600 & -2139062144;
       $603 = $602 ^ -2139062144;
       $604 = $603 & $601;
       $605 = ($604|0)==(0);
       $606 = ((($w$0$i$i53)) + 4|0);
       if ($605) {
        $w$0$i$i53 = $606;
       } else {
        break;
       }
      }
      $607 = $600&255;
      $608 = ($607<<24>>24)==(0);
      if ($608) {
       $$1$lcssa$i$i59 = $w$0$i$i53;
      } else {
       $$pn15$i$i55 = $w$0$i$i53;
       while(1) {
        $609 = ((($$pn15$i$i55)) + 1|0);
        $$pre$i$i56 = HEAP8[$609>>0]|0;
        $610 = ($$pre$i$i56<<24>>24)==(0);
        if ($610) {
         $$1$lcssa$i$i59 = $609;
         break;
        } else {
         $$pn15$i$i55 = $609;
        }
       }
      }
      $611 = $$1$lcssa$i$i59;
      $$pn$i$i62 = $611;
     }
     $$0$i$i63 = (($$pn$i$i62) - ($591))|0;
     $612 = (($$0$i$i63) + 1)|0;
     $613 = (($ele$0$i32) + ($612)|0);
     $ele$0$i32 = $613;
    }
    if ((label|0) == 117) {
     _free($261);
     $$0$i65$ph = $282;
    }
    else if ((label|0) == 127) {
     _free($261);
     $$0$i65$ph = $308;
    }
    else if ((label|0) == 177) {
     $480 = ((($478)) + 20|0);
     HEAP32[$480>>2] = 0;
     $481 = ((($478)) + 24|0);
     HEAP32[$481>>2] = 0;
     $482 = ((($478)) + 28|0);
     HEAP32[$482>>2] = 0;
     $483 = ((($478)) + 16|0);
     ;HEAP32[$478>>2]=0|0;HEAP32[$478+4>>2]=0|0;HEAP32[$478+8>>2]=0|0;HEAP32[$478+12>>2]=0|0;
     HEAP32[$483>>2] = 3;
     $484 = $$447$$$$ & 16;
     $485 = ($484|0)==(0);
     do {
      if ($485) {
       $486 = ((($478)) + 4|0);
       $487 = ((($478)) + 20|0);
       $488 = ($310|0)==(0|0);
       do {
        if ($488) {
         $$0$i102$i$i$i$i = 0;$allocated$0$i$i$i$i$i = 0;$bufsize$0$i$i$i$i$i = 8192;$data$0$i$i$i$i$i = 0;
        } else {
         HEAP32[$vararg_buffer32>>2] = $310;
         $vararg_ptr35 = ((($vararg_buffer32)) + 4|0);
         HEAP32[$vararg_ptr35>>2] = $sb$i$i$i$i$i;
         $489 = (___syscall195(195,($vararg_buffer32|0))|0);
         $490 = ($489>>>0)>(4294963200);
         if (!($490)) {
          $497 = HEAP32[$264>>2]|0;
          $498 = (_malloc($497)|0);
          $499 = HEAP32[$264>>2]|0;
          $$0$i102$i$i$i$i = $310;$allocated$0$i$i$i$i$i = $497;$bufsize$0$i$i$i$i$i = $499;$data$0$i$i$i$i$i = $498;
          break;
         }
         $491 = (0 - ($489))|0;
         $492 = HEAP32[6773]|0;
         $493 = ($492|0)==(0|0);
         if ($493) {
          $$0$i$i$i$i$i$i$i$i = 27136;
         } else {
          $494 = (_pthread_self()|0);
          $495 = ((($494)) + 64|0);
          $496 = HEAP32[$495>>2]|0;
          $$0$i$i$i$i$i$i$i$i = $496;
         }
         HEAP32[$$0$i$i$i$i$i$i$i$i>>2] = $491;
         $$0$i102$i$i$i$i = 0;$allocated$0$i$i$i$i$i = 0;$bufsize$0$i$i$i$i$i = 8192;$data$0$i$i$i$i$i = 0;
        }
       } while(0);
       $500 = ((($323)) + 76|0);
       $501 = ($$0$i102$i$i$i$i|0)==(0|0);
       $allocated$1$i$i$i$i$i = $allocated$0$i$i$i$i$i;$data$1$i$i$i$i$i = $data$0$i$i$i$i$i;$used$0$i$i$i$i$i = 0;
       while(1) {
        $502 = (($used$0$i$i$i$i$i) + ($bufsize$0$i$i$i$i$i))|0;
        $503 = ($502>>>0)>($allocated$1$i$i$i$i$i>>>0);
        if ($503) {
         $504 = (($allocated$1$i$i$i$i$i) + ($bufsize$0$i$i$i$i$i))|0;
         $505 = (_realloc($data$1$i$i$i$i$i,$504)|0);
         $allocated$2$i$i$i$i$i = $504;$data$2$i$i$i$i$i = $505;
        } else {
         $allocated$2$i$i$i$i$i = $allocated$1$i$i$i$i$i;$data$2$i$i$i$i$i = $data$1$i$i$i$i$i;
        }
        $506 = (($data$2$i$i$i$i$i) + ($used$0$i$i$i$i$i)|0);
        $507 = (($allocated$2$i$i$i$i$i) - ($used$0$i$i$i$i$i))|0;
        $508 = (_fread($506,1,$507,$323)|0);
        $509 = (($used$0$i$i$i$i$i) + ($508))|0;
        $$lobit2$i$i$i$i$i$i$in$in = HEAP32[$323>>2]|0;
        $$lobit2$i$i$i$i$i$i = $$lobit2$i$i$i$i$i$i$in$in & 16;
        $510 = ($$lobit2$i$i$i$i$i$i|0)==(0);
        if (!($510)) {
         break;
        }
        $511 = HEAP32[$264>>2]|0;
        $512 = ($509>>>0)<($511>>>0);
        $or$cond = $501 | $512;
        if ($or$cond) {
         $allocated$1$i$i$i$i$i = $allocated$2$i$i$i$i$i;$data$1$i$i$i$i$i = $data$2$i$i$i$i$i;$used$0$i$i$i$i$i = $509;
        } else {
         break;
        }
       }
       HEAP32[$487>>2] = $509;
       HEAP32[$486>>2] = $data$2$i$i$i$i$i;
       $513 = HEAP32[$487>>2]|0;
       $514 = ((($478)) + 8|0);
       HEAP32[$514>>2] = $513;
       if (!($384)) {
        HEAP32[$478>>2] = $323;
        $515 = ((($478)) + 16|0);
        $516 = $$447$$$$ | 32;
        $$452459 = $446 ? $$447$$$$ : $516;
        HEAP32[$515>>2] = $$452459;
        label = 202;
        break;
       }
       $517 = HEAP32[$500>>2]|0;
       $518 = ($517|0)>(-1);
       $519 = ((($323)) + 20|0);
       $520 = HEAP32[$519>>2]|0;
       $521 = ((($323)) + 28|0);
       $522 = HEAP32[$521>>2]|0;
       $523 = ($520>>>0)>($522>>>0);
       do {
        if ($518) {
         if ($523) {
          $537 = ((($323)) + 36|0);
          $538 = HEAP32[$537>>2]|0;
          (FUNCTION_TABLE_iiii[$538 & 127]($323,0,0)|0);
          $539 = HEAP32[$519>>2]|0;
          $540 = ($539|0)==(0|0);
          if ($540) {
           break;
          }
         }
         $541 = ((($323)) + 16|0);
         HEAP32[$541>>2] = 0;
         HEAP32[$521>>2] = 0;
         HEAP32[$519>>2] = 0;
         $542 = ((($323)) + 40|0);
         $543 = HEAP32[$542>>2]|0;
         $544 = (FUNCTION_TABLE_iiii[$543 & 127]($323,0,0)|0);
         $545 = ($544|0)<(0);
         if (!($545)) {
          $546 = ((($323)) + 8|0);
          HEAP32[$546>>2] = 0;
          $547 = ((($323)) + 4|0);
          HEAP32[$547>>2] = 0;
          $548 = HEAP32[$323>>2]|0;
          $549 = $548 & -17;
          HEAP32[$323>>2] = $549;
         }
        } else {
         if ($523) {
          $524 = ((($323)) + 36|0);
          $525 = HEAP32[$524>>2]|0;
          (FUNCTION_TABLE_iiii[$525 & 127]($323,0,0)|0);
          $526 = HEAP32[$519>>2]|0;
          $527 = ($526|0)==(0|0);
          if ($527) {
           break;
          }
         }
         $528 = ((($323)) + 16|0);
         HEAP32[$528>>2] = 0;
         HEAP32[$521>>2] = 0;
         HEAP32[$519>>2] = 0;
         $529 = ((($323)) + 40|0);
         $530 = HEAP32[$529>>2]|0;
         $531 = (FUNCTION_TABLE_iiii[$530 & 127]($323,0,0)|0);
         $532 = ($531|0)<(0);
         if (!($532)) {
          $533 = ((($323)) + 8|0);
          HEAP32[$533>>2] = 0;
          $534 = ((($323)) + 4|0);
          HEAP32[$534>>2] = 0;
          $535 = HEAP32[$323>>2]|0;
          $536 = $535 & -17;
          HEAP32[$323>>2] = $536;
         }
        }
       } while(0);
       HEAP32[$478>>2] = $323;
       $550 = ((($478)) + 16|0);
       $551 = $$447$$$$ | 32;
       $$452457 = $446 ? $$447$$$$ : $551;
       HEAP32[$550>>2] = $$452457;
       label = 213;
      } else {
       HEAP32[$478>>2] = $323;
       $552 = ((($478)) + 16|0);
       $553 = $$447$$$$ | 32;
       $$452 = $446 ? $$447$$$$ : $553;
       HEAP32[$552>>2] = $$452;
       if ($384) {
        label = 213;
       } else {
        label = 202;
       }
      }
     } while(0);
     if ((label|0) == 202) {
      $554 = ((($478)) + 20|0);
      $555 = HEAP32[$554>>2]|0;
      $556 = ((($478)) + 28|0);
      HEAP32[$556>>2] = $555;
      $557 = ((($323)) + 76|0);
      $558 = HEAP32[$557>>2]|0;
      $559 = ($558|0)>(-1);
      $560 = ((($323)) + 20|0);
      $561 = HEAP32[$560>>2]|0;
      $562 = ((($323)) + 28|0);
      $563 = HEAP32[$562>>2]|0;
      $564 = ($561>>>0)>($563>>>0);
      do {
       if ($559) {
        if ($564) {
         $578 = ((($323)) + 36|0);
         $579 = HEAP32[$578>>2]|0;
         (FUNCTION_TABLE_iiii[$579 & 127]($323,0,0)|0);
         $580 = HEAP32[$560>>2]|0;
         $581 = ($580|0)==(0|0);
         if ($581) {
          break;
         }
        }
        $582 = ((($323)) + 16|0);
        HEAP32[$582>>2] = 0;
        HEAP32[$562>>2] = 0;
        HEAP32[$560>>2] = 0;
        $583 = ((($323)) + 40|0);
        $584 = HEAP32[$583>>2]|0;
        $585 = (FUNCTION_TABLE_iiii[$584 & 127]($323,0,2)|0);
        $586 = ($585|0)<(0);
        if (!($586)) {
         $587 = ((($323)) + 8|0);
         HEAP32[$587>>2] = 0;
         $588 = ((($323)) + 4|0);
         HEAP32[$588>>2] = 0;
         $589 = HEAP32[$323>>2]|0;
         $590 = $589 & -17;
         HEAP32[$323>>2] = $590;
        }
       } else {
        if ($564) {
         $565 = ((($323)) + 36|0);
         $566 = HEAP32[$565>>2]|0;
         (FUNCTION_TABLE_iiii[$566 & 127]($323,0,0)|0);
         $567 = HEAP32[$560>>2]|0;
         $568 = ($567|0)==(0|0);
         if ($568) {
          break;
         }
        }
        $569 = ((($323)) + 16|0);
        HEAP32[$569>>2] = 0;
        HEAP32[$562>>2] = 0;
        HEAP32[$560>>2] = 0;
        $570 = ((($323)) + 40|0);
        $571 = HEAP32[$570>>2]|0;
        $572 = (FUNCTION_TABLE_iiii[$571 & 127]($323,0,2)|0);
        $573 = ($572|0)<(0);
        if (!($573)) {
         $574 = ((($323)) + 8|0);
         HEAP32[$574>>2] = 0;
         $575 = ((($323)) + 4|0);
         HEAP32[$575>>2] = 0;
         $576 = HEAP32[$323>>2]|0;
         $577 = $576 & -17;
         HEAP32[$323>>2] = $577;
        }
       }
      } while(0);
      _free($310);
     }
     else if ((label|0) == 213) {
      _free($310);
     }
     _free($261);
     $$0$i65$ph = $478;
    }
    else if ((label|0) == 224) {
     _free($261);
     $tag$0$in$i68 = $47;
     break;
    }
    $614 = ((($$0$i65$ph)) + 4|0);
    $615 = HEAP32[$614>>2]|0;
    $616 = ((($$0$i65$ph)) + 20|0);
    $617 = HEAP32[$616>>2]|0;
    _mfflush($$0$i65$ph);
    $618 = ((($$0$i65$ph)) + 16|0);
    $619 = HEAP32[$618>>2]|0;
    $620 = $619 & 64;
    $621 = ($620|0)==(0);
    if ($621) {
     $623 = HEAP32[$$0$i65$ph>>2]|0;
     $624 = ($623|0)==(0|0);
     if (!($624)) {
      (_fclose($623)|0);
      HEAP32[$$0$i65$ph>>2] = 0;
     }
     HEAP32[$614>>2] = 0;
     _free($$0$i65$ph);
     $625 = ((($r)) + 40|0);
     HEAP32[$625>>2] = $615;
     $626 = ($615|0)==(0|0);
     if ($626) {
      $$pre$phiZ2D = $625;
      label = 231;
     } else {
      $627 = ((($r)) + 44|0);
      HEAP32[$627>>2] = 0;
     }
    } else {
     $622 = ((($r)) + 40|0);
     HEAP32[$622>>2] = 0;
     $$pre$phiZ2D = $622;
     label = 231;
    }
    if ((label|0) == 231) {
     $628 = HEAP32[$614>>2]|0;
     HEAP32[$$pre$phiZ2D>>2] = $628;
     $629 = ((($r)) + 44|0);
     HEAP32[$629>>2] = $$0$i65$ph;
    }
    $1214 = ((($r)) + 8|0);
    $1215 = $1214;
    $1216 = $1215;
    HEAP32[$1216>>2] = $617;
    $1217 = (($1215) + 4)|0;
    $1218 = $1217;
    HEAP32[$1218>>2] = 0;
    $1219 = ((($r)) + 48|0);
    HEAP32[$1219>>2] = 1;
    if ($59) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $1220 = HEAP8[$local_cache$1>>0]|0;
    $1221 = ($1220<<24>>24)==(0);
    if ($1221) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $1222 = (___syscall20(20,($vararg_buffer56|0))|0);
    $1223 = (_pthread_self()|0);
    HEAP32[$pt$i>>2] = $1223;
    $h$0$i = 0;$i$0$i110 = 0;
    while(1) {
     $exitcond444 = ($i$0$i110|0)==(4);
     if ($exitcond444) {
      break;
     }
     $1224 = ($h$0$i*31)|0;
     $1225 = (($pt$i) + ($i$0$i110)|0);
     $1226 = HEAP8[$1225>>0]|0;
     $1227 = $1226&255;
     $1228 = (($1224) + ($1227))|0;
     $1229 = (($i$0$i110) + 1)|0;
     $h$0$i = $1228;$i$0$i110 = $1229;
    }
    $1230 = HEAP8[$cache_root>>0]|0;
    $1231 = ($1230<<24>>24)==(0);
    do {
     if (!($1231)) {
      HEAP32[$vararg_buffer58>>2] = $cache_root;
      $vararg_ptr61 = ((($vararg_buffer58)) + 4|0);
      HEAP32[$vararg_ptr61>>2] = $buf$i111;
      $1232 = (___syscall195(195,($vararg_buffer58|0))|0);
      $1233 = ($1232>>>0)>(4294963200);
      if ($1233) {
       $1234 = (0 - ($1232))|0;
       $1235 = HEAP32[6773]|0;
       $1236 = ($1235|0)==(0|0);
       if ($1236) {
        $$0$i$i$i$i112 = 27136;
       } else {
        $1237 = ((($1223)) + 64|0);
        $1238 = HEAP32[$1237>>2]|0;
        $$0$i$i$i$i112 = $1238;
       }
       HEAP32[$$0$i$i$i$i112>>2] = $1234;
       label = 405;
      } else {
       $1239 = ($1232|0)==(0);
       if ($1239) {
        $1240 = ((($buf$i111)) + 12|0);
        $1241 = HEAP32[$1240>>2]|0;
        $1242 = $1241 & 61440;
        $1243 = ($1242|0)==(16384);
        if ($1243) {
         break;
        }
       } else {
        label = 405;
       }
      }
      if ((label|0) == 405) {
      }
      HEAP32[$vararg_buffer62>>2] = $cache_root;
      _fprintf(9772,19770,$vararg_buffer62);
     }
    } while(0);
    $1244 = HEAP32[$49>>2]|0;
    $1245 = ((($1244)) + 3|0);
    _expand_cache_path($path,$local_cache$1,$1245);
    $1246 = HEAP32[$2>>2]|0;
    $1247 = ($1246|0)==(0);
    if (!($1247)) {
     HEAP32[$vararg_buffer65>>2] = $path;
     _fprintf(9772,19885,$vararg_buffer65);
    }
    _mkdir_prefix($path,1023);
    $thrid$0 = $h$0$i;
    while(1) {
     $1248 = (_time((0|0))|0);
     $1249 = (_clock()|0);
     $1250 = $1248 ^ $1249;
     $1251 = (($thrid$0) + 1)|0;
     HEAP32[$vararg_buffer68>>2] = $path;
     $vararg_ptr71 = ((($vararg_buffer68)) + 4|0);
     HEAP32[$vararg_ptr71>>2] = $1222;
     $vararg_ptr72 = ((($vararg_buffer68)) + 8|0);
     HEAP32[$vararg_ptr72>>2] = $1251;
     $vararg_ptr73 = ((($vararg_buffer68)) + 12|0);
     HEAP32[$vararg_ptr73>>2] = $1250;
     (_sprintf($path_tmp,19910,$vararg_buffer68)|0);
     $1252 = (_hopen($path_tmp,19926)|0);
     $1253 = ($1252|0)==(0|0);
     if (!($1253)) {
      break;
     }
     $1254 = HEAP32[6773]|0;
     $1255 = ($1254|0)==(0|0);
     if ($1255) {
      $$0$i117 = 27136;
     } else {
      $1256 = ((($1223)) + 64|0);
      $1257 = HEAP32[$1256>>2]|0;
      $$0$i117 = $1257;
     }
     $1258 = HEAP32[$$0$i117>>2]|0;
     $1259 = ($1258|0)==(17);
     if ($1259) {
      $thrid$0 = $1251;
     } else {
      label = 415;
      break;
     }
    }
    if ((label|0) == 415) {
     _perror($path_tmp);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $1260 = (_malloc(152)|0);
    $1261 = ($1260|0)==(0|0);
    if ($1261) {
     $1278 = HEAP32[6773]|0;
     $1279 = ($1278|0)==(0|0);
     if ($1279) {
      $$0$i$i119 = 27136;
     } else {
      $1280 = ((($1223)) + 64|0);
      $1281 = HEAP32[$1280>>2]|0;
      $$0$i$i119 = $1281;
     }
     $1282 = HEAP32[$$0$i$i119>>2]|0;
     $1283 = ((($1252)) + 16|0);
     $1284 = HEAP32[$1283>>2]|0;
     $1285 = ((($1284)) + 16|0);
     $1286 = HEAP32[$1285>>2]|0;
     (FUNCTION_TABLE_ii[$1286 & 63]($1252)|0);
     $1287 = HEAP32[6773]|0;
     $1288 = ($1287|0)==(0|0);
     if ($1288) {
      $$0$i$i166 = 27136;
     } else {
      $1289 = ((($1223)) + 64|0);
      $1290 = HEAP32[$1289>>2]|0;
      $$0$i$i166 = $1290;
     }
     $1291 = HEAP32[$$0$i$i166>>2]|0;
     $1292 = HEAP32[$1252>>2]|0;
     _free($1292);
     _free($1252);
     $1293 = HEAP32[6773]|0;
     $1294 = ($1293|0)==(0|0);
     if ($1294) {
      $$0$i1$i168 = 27136;
     } else {
      $1295 = ((($1223)) + 64|0);
      $1296 = HEAP32[$1295>>2]|0;
      $$0$i1$i168 = $1296;
     }
     HEAP32[$$0$i1$i168>>2] = $1291;
     $1297 = HEAP32[6773]|0;
     $1298 = ($1297|0)==(0|0);
     if ($1298) {
      $$0$i1$i120 = 27136;
     } else {
      $1299 = ((($1223)) + 64|0);
      $1300 = HEAP32[$1299>>2]|0;
      $$0$i1$i120 = $1300;
     }
     HEAP32[$$0$i1$i120>>2] = $1282;
     HEAP32[$vararg_buffer74>>2] = $path_tmp;
     $1301 = (___syscall10(10,($vararg_buffer74|0))|0);
     $1302 = ($1301>>>0)>(4294963200);
     if (!($1302)) {
      $$0 = -1;
      STACKTOP = sp;return ($$0|0);
     }
     $1303 = (0 - ($1301))|0;
     $1304 = HEAP32[6773]|0;
     $1305 = ($1304|0)==(0|0);
     if ($1305) {
      $$0$i$i$i121 = 27136;
     } else {
      $1306 = ((($1223)) + 64|0);
      $1307 = HEAP32[$1306>>2]|0;
      $$0$i$i$i121 = $1307;
     }
     HEAP32[$$0$i$i$i121>>2] = $1303;
     $$0 = -1;
     STACKTOP = sp;return ($$0|0);
    }
    $1262 = ((($1260)) + 8|0);
    HEAP32[$1262>>2] = 1732584193;
    $1263 = ((($1260)) + 12|0);
    HEAP32[$1263>>2] = -271733879;
    $1264 = ((($1260)) + 16|0);
    HEAP32[$1264>>2] = -1732584194;
    $1265 = ((($1260)) + 20|0);
    HEAP32[$1265>>2] = 271733878;
    HEAP32[$1260>>2] = 0;
    $1266 = ((($1260)) + 4|0);
    HEAP32[$1266>>2] = 0;
    $1267 = ((($r)) + 40|0);
    $1268 = HEAP32[$1267>>2]|0;
    $1269 = $1214;
    $1270 = $1269;
    $1271 = HEAP32[$1270>>2]|0;
    $1272 = (($1269) + 4)|0;
    $1273 = $1272;
    $1274 = HEAP32[$1273>>2]|0;
    $1275 = $1271 & 536870911;
    HEAP32[$1260>>2] = $1275;
    $$pre339 = ((($1260)) + 4|0);
    $1276 = $1271 >>> 29;
    HEAP32[$$pre339>>2] = $1276;
    $1277 = ($1271>>>0)>(63);
    if ($1277) {
     $1308 = $1271 & -64;
     $1309 = (_body($1260,$1268,$1308)|0);
     $1310 = $1271 & 63;
     $$1$i = $1310;$$12$i = $1309;
    } else {
     $$1$i = $1271;$$12$i = $1268;
    }
    $1311 = ((($1260)) + 24|0);
    _memcpy(($1311|0),($$12$i|0),($$1$i|0))|0;
    _hts_md5_final($md5_buf1,$1260);
    _free($1260);
    $i$0$i126 = 0;
    while(1) {
     $exitcond = ($i$0$i126|0)==(16);
     if ($exitcond) {
      break;
     }
     $1312 = (($md5_buf1) + ($i$0$i126)|0);
     $1313 = HEAP8[$1312>>0]|0;
     $1314 = $1313&255;
     $1315 = $1314 >>> 4;
     $1316 = (22117 + ($1315)|0);
     $1317 = HEAP8[$1316>>0]|0;
     $1318 = $i$0$i126 << 1;
     $1319 = (($md5_buf2) + ($1318)|0);
     HEAP8[$1319>>0] = $1317;
     $1320 = $1314 & 15;
     $1321 = (22117 + ($1320)|0);
     $1322 = HEAP8[$1321>>0]|0;
     $1323 = $1318 | 1;
     $1324 = (($md5_buf2) + ($1323)|0);
     HEAP8[$1324>>0] = $1322;
     $1325 = (($i$0$i126) + 1)|0;
     $i$0$i126 = $1325;
    }
    $1326 = ((($md5_buf2)) + 32|0);
    HEAP8[$1326>>0] = 0;
    $1327 = HEAP32[$49>>2]|0;
    $1328 = ((($1327)) + 3|0);
    $1329 = HEAP8[$1328>>0]|0;
    $1330 = ($1329<<24>>24)==(0);
    L428: do {
     if ($1330) {
      $1342 = 0;$r$0$lcssa$i138 = $md5_buf2;
     } else {
      $$08$in$i128 = 32;$1335 = $1329;$l$06$i130 = $1328;$r$07$i129 = $md5_buf2;
      while(1) {
       $$08$i131 = (($$08$in$i128) + -1)|0;
       $1331 = HEAP8[$r$07$i129>>0]|0;
       $1332 = ($1331<<24>>24)!=(0);
       $1333 = ($$08$i131|0)!=(0);
       $or$cond$i132 = $1333 & $1332;
       $1334 = ($1335<<24>>24)==($1331<<24>>24);
       $or$cond4$i133 = $1334 & $or$cond$i132;
       if (!($or$cond4$i133)) {
        $1342 = $1335;$r$0$lcssa$i138 = $r$07$i129;
        break L428;
       }
       $1336 = ((($l$06$i130)) + 1|0);
       $1337 = ((($r$07$i129)) + 1|0);
       $1338 = HEAP8[$1336>>0]|0;
       $1339 = ($1338<<24>>24)==(0);
       if ($1339) {
        $1342 = 0;$r$0$lcssa$i138 = $1337;
        break;
       } else {
        $$08$in$i128 = $$08$i131;$1335 = $1338;$l$06$i130 = $1336;$r$07$i129 = $1337;
       }
      }
     }
    } while(0);
    $1340 = HEAP8[$r$0$lcssa$i138>>0]|0;
    $1341 = ($1342<<24>>24)==($1340<<24>>24);
    if (!($1341)) {
     HEAP32[$vararg_buffer77>>2] = 19983;
     _fprintf(9772,19929,$vararg_buffer77);
     $1343 = HEAP32[6773]|0;
     $1344 = ($1343|0)==(0|0);
     if ($1344) {
      $$0$i$i140 = 27136;
     } else {
      $1345 = ((($1223)) + 64|0);
      $1346 = HEAP32[$1345>>2]|0;
      $$0$i$i140 = $1346;
     }
     $1347 = HEAP32[$$0$i$i140>>2]|0;
     $1348 = ((($1252)) + 16|0);
     $1349 = HEAP32[$1348>>2]|0;
     $1350 = ((($1349)) + 16|0);
     $1351 = HEAP32[$1350>>2]|0;
     (FUNCTION_TABLE_ii[$1351 & 63]($1252)|0);
     $1352 = HEAP32[6773]|0;
     $1353 = ($1352|0)==(0|0);
     if ($1353) {
      $$0$i$i169 = 27136;
     } else {
      $1354 = ((($1223)) + 64|0);
      $1355 = HEAP32[$1354>>2]|0;
      $$0$i$i169 = $1355;
     }
     $1356 = HEAP32[$$0$i$i169>>2]|0;
     $1357 = HEAP32[$1252>>2]|0;
     _free($1357);
     _free($1252);
     $1358 = HEAP32[6773]|0;
     $1359 = ($1358|0)==(0|0);
     if ($1359) {
      $$0$i1$i171 = 27136;
     } else {
      $1360 = ((($1223)) + 64|0);
      $1361 = HEAP32[$1360>>2]|0;
      $$0$i1$i171 = $1361;
     }
     HEAP32[$$0$i1$i171>>2] = $1356;
     $1362 = HEAP32[6773]|0;
     $1363 = ($1362|0)==(0|0);
     if ($1363) {
      $$0$i1$i142 = 27136;
     } else {
      $1364 = ((($1223)) + 64|0);
      $1365 = HEAP32[$1364>>2]|0;
      $$0$i1$i142 = $1365;
     }
     HEAP32[$$0$i1$i142>>2] = $1347;
     HEAP32[$vararg_buffer80>>2] = $path_tmp;
     $1366 = (___syscall10(10,($vararg_buffer80|0))|0);
     $1367 = ($1366>>>0)>(4294963200);
     if (!($1367)) {
      $$0 = -1;
      STACKTOP = sp;return ($$0|0);
     }
     $1368 = (0 - ($1366))|0;
     $1369 = HEAP32[6773]|0;
     $1370 = ($1369|0)==(0|0);
     if ($1370) {
      $$0$i$i$i144 = 27136;
     } else {
      $1371 = ((($1223)) + 64|0);
      $1372 = HEAP32[$1371>>2]|0;
      $$0$i$i$i144 = $1372;
     }
     HEAP32[$$0$i$i$i144>>2] = $1368;
     $$0 = -1;
     STACKTOP = sp;return ($$0|0);
    }
    $1373 = HEAP32[$1267>>2]|0;
    $1374 = $1214;
    $1375 = $1374;
    $1376 = HEAP32[$1375>>2]|0;
    $1377 = (($1374) + 4)|0;
    $1378 = $1377;
    $1379 = HEAP32[$1378>>2]|0;
    $1380 = ((($1252)) + 12|0);
    $1381 = HEAP32[$1380>>2]|0;
    $1382 = ((($1252)) + 4|0);
    $1383 = HEAP32[$1382>>2]|0;
    $1384 = (($1381) - ($1383))|0;
    $1385 = ($1384>>>0)>($1376>>>0);
    $1386 = $1383;
    $$456 = $1385 ? $1376 : $1384;
    _memcpy(($1386|0),($1373|0),($$456|0))|0;
    $1387 = HEAP32[$1382>>2]|0;
    $1388 = (($1387) + ($$456)|0);
    HEAP32[$1382>>2] = $1388;
    $1389 = ($1376|0)==($$456|0);
    do {
     if ($1389) {
      $1437 = $1376;
     } else {
      $1390 = HEAP32[$1380>>2]|0;
      $1391 = HEAP32[$1252>>2]|0;
      $1392 = (($1390) - ($1391))|0;
      $$cast = $1391;
      $1393 = ((($1252)) + 16|0);
      $1394 = ((($1252)) + 20|0);
      $$in = $1388;$buffer$0$i = $$cast;
      while(1) {
       $1395 = ($buffer$0$i>>>0)<($$in>>>0);
       if (!($1395)) {
        break;
       }
       $1396 = $$in;
       $1397 = HEAP32[$1393>>2]|0;
       $1398 = ((($1397)) + 4|0);
       $1399 = HEAP32[$1398>>2]|0;
       $1400 = $buffer$0$i;
       $1401 = (($1396) - ($1400))|0;
       $1402 = (FUNCTION_TABLE_iiii[$1399 & 127]($1252,$buffer$0$i,$1401)|0);
       $1403 = ($1402|0)<(0);
       if ($1403) {
        label = 454;
        break;
       }
       $1408 = (($buffer$0$i) + ($1402)|0);
       $1409 = HEAP32[$1394>>2]|0;
       $1410 = (($1409) + ($1402))|0;
       HEAP32[$1394>>2] = $1410;
       $$pre324 = HEAP32[$1382>>2]|0;
       $$in = $$pre324;$buffer$0$i = $1408;
      }
      if ((label|0) == 454) {
       $1404 = HEAP32[6773]|0;
       $1405 = ($1404|0)==(0|0);
       if ($1405) {
        $$0$i$i173 = 27136;
       } else {
        $1406 = ((($1223)) + 64|0);
        $1407 = HEAP32[$1406>>2]|0;
        $$0$i$i173 = $1407;
       }
       $1411 = HEAP32[$$0$i$i173>>2]|0;
       $1412 = ((($1252)) + 28|0);
       HEAP32[$1412>>2] = $1411;
       $1437 = $1402;
       break;
      }
      $1413 = HEAP32[$1252>>2]|0;
      HEAP32[$1382>>2] = $1413;
      $1414 = (($1373) + ($$456)|0);
      $1415 = (($1376) - ($$456))|0;
      $remaining$0$i$i = $1415;$src$0$i$i = $1414;
      while(1) {
       $1416 = $remaining$0$i$i << 1;
       $1417 = ($1416>>>0)<($1392>>>0);
       if ($1417) {
        label = 465;
        break;
       }
       $1418 = HEAP32[$1393>>2]|0;
       $1419 = ((($1418)) + 4|0);
       $1420 = HEAP32[$1419>>2]|0;
       $1421 = (FUNCTION_TABLE_iiii[$1420 & 127]($1252,$src$0$i$i,$remaining$0$i$i)|0);
       $1422 = ($1421|0)<(0);
       if ($1422) {
        break;
       }
       $1429 = HEAP32[$1394>>2]|0;
       $1430 = (($1429) + ($1421))|0;
       HEAP32[$1394>>2] = $1430;
       $1431 = (($src$0$i$i) + ($1421)|0);
       $1432 = (($remaining$0$i$i) - ($1421))|0;
       $remaining$0$i$i = $1432;$src$0$i$i = $1431;
      }
      if ((label|0) == 465) {
       $1433 = HEAP32[$1382>>2]|0;
       _memcpy(($1433|0),($src$0$i$i|0),($remaining$0$i$i|0))|0;
       $1434 = HEAP32[$1382>>2]|0;
       $1435 = (($1434) + ($remaining$0$i$i)|0);
       HEAP32[$1382>>2] = $1435;
       $1437 = $1376;
       break;
      }
      $1423 = HEAP32[6773]|0;
      $1424 = ($1423|0)==(0|0);
      if ($1424) {
       $$0$i$i$i148 = 27136;
      } else {
       $1425 = ((($1223)) + 64|0);
       $1426 = HEAP32[$1425>>2]|0;
       $$0$i$i$i148 = $1426;
      }
      $1427 = HEAP32[$$0$i$i$i148>>2]|0;
      $1428 = ((($1252)) + 28|0);
      HEAP32[$1428>>2] = $1427;
      $1437 = $1421;
     }
    } while(0);
    $1436 = ($1437|0)<(0);
    $1438 = $1436 << 31 >> 31;
    $1439 = $1214;
    $1440 = $1439;
    $1441 = HEAP32[$1440>>2]|0;
    $1442 = (($1439) + 4)|0;
    $1443 = $1442;
    $1444 = HEAP32[$1443>>2]|0;
    $1445 = ($1437|0)==($1441|0);
    $1446 = ($1438|0)==($1444|0);
    $1447 = $1445 & $1446;
    if (!($1447)) {
     _perror($path);
    }
    $1448 = ((($1252)) + 28|0);
    $1449 = HEAP32[$1448>>2]|0;
    $1450 = HEAP32[$1382>>2]|0;
    $1451 = ((($1252)) + 8|0);
    $1452 = HEAP32[$1451>>2]|0;
    $1453 = ($1450>>>0)>($1452>>>0);
    L481: do {
     if ($1453) {
      $1454 = HEAP32[$1252>>2]|0;
      $1455 = ((($1252)) + 16|0);
      $1456 = ((($1252)) + 20|0);
      $$in445 = $1450;$buffer$0$i183 = $1454;
      while(1) {
       $1457 = ($buffer$0$i183>>>0)<($$in445>>>0);
       if (!($1457)) {
        label = 476;
        break;
       }
       $1458 = $$in445;
       $1459 = HEAP32[$1455>>2]|0;
       $1460 = ((($1459)) + 4|0);
       $1461 = HEAP32[$1460>>2]|0;
       $1462 = $buffer$0$i183;
       $1463 = (($1458) - ($1462))|0;
       $1464 = (FUNCTION_TABLE_iiii[$1461 & 127]($1252,$buffer$0$i183,$1463)|0);
       $1465 = ($1464|0)<(0);
       if ($1465) {
        label = 473;
        break;
       }
       $1470 = (($buffer$0$i183) + ($1464)|0);
       $1471 = HEAP32[$1456>>2]|0;
       $1472 = (($1471) + ($1464))|0;
       HEAP32[$1456>>2] = $1472;
       $$pre325 = HEAP32[$1382>>2]|0;
       $$in445 = $$pre325;$buffer$0$i183 = $1470;
      }
      do {
       if ((label|0) == 473) {
        $1466 = HEAP32[6773]|0;
        $1467 = ($1466|0)==(0|0);
        if ($1467) {
         $storemerge446$in = 27136;
         break;
        }
        $1468 = ((($1223)) + 64|0);
        $1469 = HEAP32[$1468>>2]|0;
        $storemerge446$in = $1469;
       }
       else if ((label|0) == 476) {
        $1473 = HEAP32[$1252>>2]|0;
        HEAP32[$1382>>2] = $1473;
        $1474 = HEAP32[$1455>>2]|0;
        $1475 = ((($1474)) + 12|0);
        $1476 = HEAP32[$1475>>2]|0;
        $1477 = ($1476|0)==(0|0);
        if ($1477) {
         $$pre$phi342Z2D = $1455;$err$0$i = $1449;
         break L481;
        }
        $1478 = (FUNCTION_TABLE_ii[$1476 & 63]($1252)|0);
        $1479 = ($1478|0)<(0);
        if (!($1479)) {
         $$pre$phi342Z2D = $1455;$err$0$i = $1449;
         break L481;
        }
        $1480 = HEAP32[6773]|0;
        $1481 = ($1480|0)==(0|0);
        if ($1481) {
         $storemerge446$in = 27136;
         break;
        }
        $1482 = ((($1223)) + 64|0);
        $1483 = HEAP32[$1482>>2]|0;
        $storemerge446$in = $1483;
       }
      } while(0);
      $storemerge446 = HEAP32[$storemerge446$in>>2]|0;
      HEAP32[$1448>>2] = $storemerge446;
      $$pre$phi342Z2D = $1455;$err$0$i = $storemerge446;
     } else {
      $$pre341 = ((($1252)) + 16|0);
      $$pre$phi342Z2D = $$pre341;$err$0$i = $1449;
     }
    } while(0);
    $1484 = HEAP32[$$pre$phi342Z2D>>2]|0;
    $1485 = ((($1484)) + 16|0);
    $1486 = HEAP32[$1485>>2]|0;
    $1487 = (FUNCTION_TABLE_ii[$1486 & 63]($1252)|0);
    $1488 = ($1487|0)<(0);
    $1489 = HEAP32[6773]|0;
    if ($1488) {
     $1490 = ($1489|0)==(0|0);
     if ($1490) {
      $$0$i181 = 27136;
     } else {
      $1491 = ((($1223)) + 64|0);
      $1492 = HEAP32[$1491>>2]|0;
      $$0$i181 = $1492;
     }
     $1493 = HEAP32[$$0$i181>>2]|0;
     $err$1$i = $1493;
    } else {
     $err$1$i = $err$0$i;
    }
    $1494 = ($1489|0)==(0|0);
    if ($1494) {
     $$0$i$i188 = 27136;
    } else {
     $1495 = ((($1223)) + 64|0);
     $1496 = HEAP32[$1495>>2]|0;
     $$0$i$i188 = $1496;
    }
    $1497 = HEAP32[$$0$i$i188>>2]|0;
    $1498 = HEAP32[$1252>>2]|0;
    _free($1498);
    _free($1252);
    $1499 = HEAP32[6773]|0;
    $1500 = ($1499|0)==(0|0);
    if ($1500) {
     $$0$i1$i190 = 27136;
    } else {
     $1501 = ((($1223)) + 64|0);
     $1502 = HEAP32[$1501>>2]|0;
     $$0$i1$i190 = $1502;
    }
    HEAP32[$$0$i1$i190>>2] = $1497;
    $1503 = ($err$1$i|0)==(0);
    if (!($1503)) {
     $1504 = HEAP32[6773]|0;
     $1505 = ($1504|0)==(0|0);
     if ($1505) {
      $$0$i176 = 27136;
     } else {
      $1506 = ((($1223)) + 64|0);
      $1507 = HEAP32[$1506>>2]|0;
      $$0$i176 = $1507;
     }
     HEAP32[$$0$i176>>2] = $err$1$i;
     HEAP32[$vararg_buffer83>>2] = $path_tmp;
     $1508 = (___syscall10(10,($vararg_buffer83|0))|0);
     $1509 = ($1508>>>0)>(4294963200);
     if (!($1509)) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     $1510 = (0 - ($1508))|0;
     $1511 = HEAP32[6773]|0;
     $1512 = ($1511|0)==(0|0);
     if ($1512) {
      $$0$i$i$i152 = 27136;
     } else {
      $1513 = ((($1223)) + 64|0);
      $1514 = HEAP32[$1513>>2]|0;
      $$0$i$i$i152 = $1514;
     }
     HEAP32[$$0$i$i$i152>>2] = $1510;
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    HEAP32[$vararg_buffer86>>2] = $path_tmp;
    $vararg_ptr89 = ((($vararg_buffer86)) + 4|0);
    HEAP32[$vararg_ptr89>>2] = 292;
    $1515 = (___syscall15(15,($vararg_buffer86|0))|0);
    $1516 = ($1515>>>0)>(4294963200);
    do {
     if ($1516) {
      $1517 = (0 - ($1515))|0;
      $1518 = HEAP32[6773]|0;
      $1519 = ($1518|0)==(0|0);
      if ($1519) {
       $$0$i$i$i156 = 27136;
      } else {
       $1520 = ((($1223)) + 64|0);
       $1521 = HEAP32[$1520>>2]|0;
       $$0$i$i$i156 = $1521;
      }
      HEAP32[$$0$i$i$i156>>2] = $1517;
     } else {
      $1522 = ($1515|0)==(0);
      if (!($1522)) {
       break;
      }
      HEAP32[$vararg_buffer90>>2] = $path_tmp;
      $vararg_ptr93 = ((($vararg_buffer90)) + 4|0);
      HEAP32[$vararg_ptr93>>2] = $path;
      $1523 = (___syscall38(38,($vararg_buffer90|0))|0);
      $1524 = ($1523>>>0)>(4294963200);
      if (!($1524)) {
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      $1525 = (0 - ($1523))|0;
      $1526 = HEAP32[6773]|0;
      $1527 = ($1526|0)==(0|0);
      if ($1527) {
       $$0$i$i$i159 = 27136;
      } else {
       $1528 = ((($1223)) + 64|0);
       $1529 = HEAP32[$1528>>2]|0;
       $$0$i$i$i159 = $1529;
      }
      HEAP32[$$0$i$i$i159>>2] = $1525;
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
    } while(0);
    HEAP32[$vararg_buffer94>>2] = $path_tmp;
    $1530 = (___syscall10(10,($vararg_buffer94|0))|0);
    $1531 = ($1530>>>0)>(4294963200);
    if (!($1531)) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $1532 = (0 - ($1530))|0;
    $1533 = HEAP32[6773]|0;
    $1534 = ($1533|0)==(0|0);
    if ($1534) {
     $$0$i$i$i162 = 27136;
    } else {
     $1535 = ((($1223)) + 64|0);
     $1536 = HEAP32[$1535>>2]|0;
     $$0$i$i$i162 = $1536;
    }
    HEAP32[$$0$i$i$i162>>2] = $1532;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 while(1) {
  $tag$0$i69 = HEAP32[$tag$0$in$i68>>2]|0;
  $630 = ($tag$0$i69|0)==(0|0);
  if ($630) {
   $$0 = -1;
   label = 509;
   break;
  }
  $631 = ((($tag$0$i69)) + 4|0);
  $632 = HEAP32[$631>>2]|0;
  $633 = HEAP8[$632>>0]|0;
  $634 = ($633<<24>>24)==(85);
  if ($634) {
   $635 = ((($632)) + 1|0);
   $636 = HEAP8[$635>>0]|0;
   $637 = ($636<<24>>24)==(82);
   if ($637) {
    break;
   }
  }
  $tag$0$in$i68 = $tag$0$i69;
 }
 if ((label|0) == 509) {
  STACKTOP = sp;return ($$0|0);
 }
 $638 = ((($632)) + 3|0);
 $639 = HEAP8[$638>>0]|0;
 $640 = ($639<<24>>24)==(0);
 L553: do {
  if ($640) {
   $652 = 0;$r$0$lcssa$i = 19628;
  } else {
   $$08$in$i = 5;$645 = $639;$l$06$i = $638;$r$07$i = 19628;
   while(1) {
    $$08$i = (($$08$in$i) + -1)|0;
    $641 = HEAP8[$r$07$i>>0]|0;
    $642 = ($641<<24>>24)!=(0);
    $643 = ($$08$i|0)!=(0);
    $or$cond$i = $643 & $642;
    $644 = ($645<<24>>24)==($641<<24>>24);
    $or$cond4$i = $644 & $or$cond$i;
    if (!($or$cond4$i)) {
     $652 = $645;$r$0$lcssa$i = $r$07$i;
     break L553;
    }
    $646 = ((($l$06$i)) + 1|0);
    $647 = ((($r$07$i)) + 1|0);
    $648 = HEAP8[$646>>0]|0;
    $649 = ($648<<24>>24)==(0);
    if ($649) {
     $652 = 0;$r$0$lcssa$i = $647;
     break;
    } else {
     $$08$in$i = $$08$i;$645 = $648;$l$06$i = $646;$r$07$i = $647;
    }
   }
  }
 } while(0);
 $650 = HEAP8[$r$0$lcssa$i>>0]|0;
 $651 = ($652<<24>>24)==($650<<24>>24);
 $653 = ((($632)) + 8|0);
 $654 = $651 ? $653 : $638;
 $655 = ((($fd)) + 48|0);
 $656 = HEAP32[$655>>2]|0;
 $657 = ((($656)) + 20|0);
 $658 = HEAP32[$657>>2]|0;
 $659 = ($658|0)==(0|0);
 do {
  if ($659) {
   $686 = $656;
  } else {
   $660 = (_bgzf_close($658)|0);
   $661 = ($660|0)==(0);
   if ($661) {
    $662 = HEAP32[$655>>2]|0;
    $663 = ((($662)) + 20|0);
    HEAP32[$663>>2] = 0;
    $$pre327 = HEAP32[$655>>2]|0;
    $686 = $$pre327;
    break;
   } else {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $664 = $654;
 $665 = $664 & 3;
 $666 = ($665|0)==(0);
 L564: do {
  if ($666) {
   $$01$lcssa$i$i76 = $654;
   label = 245;
  } else {
   $$014$i$i73 = $654;$1540 = $664;
   while(1) {
    $667 = HEAP8[$$014$i$i73>>0]|0;
    $668 = ($667<<24>>24)==(0);
    if ($668) {
     $$pn$i$i87 = $1540;
     break L564;
    }
    $669 = ((($$014$i$i73)) + 1|0);
    $670 = $669;
    $671 = $670 & 3;
    $672 = ($671|0)==(0);
    if ($672) {
     $$01$lcssa$i$i76 = $669;
     label = 245;
     break;
    } else {
     $$014$i$i73 = $669;$1540 = $670;
    }
   }
  }
 } while(0);
 if ((label|0) == 245) {
  $w$0$i$i78 = $$01$lcssa$i$i76;
  while(1) {
   $673 = HEAP32[$w$0$i$i78>>2]|0;
   $674 = (($673) + -16843009)|0;
   $675 = $673 & -2139062144;
   $676 = $675 ^ -2139062144;
   $677 = $676 & $674;
   $678 = ($677|0)==(0);
   $679 = ((($w$0$i$i78)) + 4|0);
   if ($678) {
    $w$0$i$i78 = $679;
   } else {
    break;
   }
  }
  $680 = $673&255;
  $681 = ($680<<24>>24)==(0);
  if ($681) {
   $$1$lcssa$i$i84 = $w$0$i$i78;
  } else {
   $$pn15$i$i80 = $w$0$i$i78;
   while(1) {
    $682 = ((($$pn15$i$i80)) + 1|0);
    $$pre$i$i81 = HEAP8[$682>>0]|0;
    $683 = ($$pre$i$i81<<24>>24)==(0);
    if ($683) {
     $$1$lcssa$i$i84 = $682;
     break;
    } else {
     $$pn15$i$i80 = $682;
    }
   }
  }
  $684 = $$1$lcssa$i$i84;
  $$pn$i$i87 = $684;
 }
 $$0$i$i88 = (($$pn$i$i87) - ($664))|0;
 $685 = ($686|0)==(0|0);
 L578: do {
  if ($685) {
   $687 = (_malloc(64)|0);
   $688 = ($687|0)==(0|0);
   if ($688) {
    $r$1$i225 = 0;
    label = 355;
   } else {
    $689 = ((($687)) + -4|0);
    $690 = HEAP32[$689>>2]|0;
    $691 = $690 & 3;
    $692 = ($691|0)==(0);
    if (!($692)) {
     dest=$687; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    }
    $693 = (_malloc(12)|0);
    $694 = ($693|0)==(0|0);
    do {
     if ($694) {
      HEAP32[$687>>2] = 0;
     } else {
      $695 = ((($693)) + 4|0);
      HEAP32[$695>>2] = 0;
      HEAP32[$693>>2] = 8192;
      $696 = ((($693)) + 8|0);
      HEAP32[$696>>2] = 0;
      HEAP32[$687>>2] = $693;
      $697 = ((($687)) + 8|0);
      HEAP32[$697>>2] = 0;
      $698 = ((($687)) + 24|0);
      HEAP32[$698>>2] = 1;
      $699 = ((($687)) + 56|0);
      HEAP32[$699>>2] = 0;
      $700 = ((($687)) + 60|0);
      HEAP32[$700>>2] = -1;
      $701 = (_malloc(28)|0);
      $702 = ($701|0)==(0|0);
      if ($702) {
       $707 = ((($687)) + 4|0);
       HEAP32[$707>>2] = 0;
       break;
      }
      $703 = ((($701)) + -4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = $704 & 3;
      $706 = ($705|0)==(0);
      if (!($706)) {
       dest=$701; stop=dest+28|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      }
      $708 = ((($687)) + 4|0);
      HEAP32[$708>>2] = $701;
      $709 = ((($687)) + 28|0);
      (_pthread_mutex_init(($709|0),(0|0))|0);
      $r$0$i = $687;
      label = 262;
      break L578;
     }
    } while(0);
    _refs_free($687);
    $r$1$i225 = 0;
    label = 355;
   }
  } else {
   $r$0$i = $686;
   label = 262;
  }
 } while(0);
 L594: do {
  if ((label|0) == 262) {
   HEAP32[$vararg_buffer36>>2] = $654;
   $vararg_ptr39 = ((($vararg_buffer36)) + 4|0);
   HEAP32[$vararg_ptr39>>2] = $sb$i;
   $710 = (___syscall195(195,($vararg_buffer36|0))|0);
   $711 = ($710>>>0)>(4294963200);
   do {
    if ($711) {
     $712 = (0 - ($710))|0;
     $713 = HEAP32[6773]|0;
     $714 = ($713|0)==(0|0);
     if ($714) {
      $$0$i$i$i$i91 = 27136;
     } else {
      $715 = (_pthread_self()|0);
      $716 = ((($715)) + 64|0);
      $717 = HEAP32[$716>>2]|0;
      $$0$i$i$i$i91 = $717;
     }
     HEAP32[$$0$i$i$i$i91>>2] = $712;
     $r$1$i = $r$0$i;
    } else {
     $718 = ($710|0)==(0);
     if ($718) {
      $719 = ((($r$0$i)) + 20|0);
      $720 = HEAP32[$719>>2]|0;
      $721 = ($720|0)==(0|0);
      if (!($721)) {
       $722 = (_bgzf_close($720)|0);
       $723 = ($722|0)==(0);
       if (!($723)) {
        $r$1$i = $r$0$i;
        break;
       }
      }
      HEAP32[$719>>2] = 0;
      $724 = HEAP32[$r$0$i>>2]|0;
      L606: do {
       if ($666) {
        $$01$lcssa$i$i$i = $654;
        label = 272;
       } else {
        $$014$i$i$i = $654;$1541 = $664;
        while(1) {
         $725 = HEAP8[$$014$i$i$i>>0]|0;
         $726 = ($725<<24>>24)==(0);
         if ($726) {
          $$pn$i$i$i = $1541;
          break L606;
         }
         $727 = ((($$014$i$i$i)) + 1|0);
         $728 = $727;
         $729 = $728 & 3;
         $730 = ($729|0)==(0);
         if ($730) {
          $$01$lcssa$i$i$i = $727;
          label = 272;
          break;
         } else {
          $$014$i$i$i = $727;$1541 = $728;
         }
        }
       }
      } while(0);
      if ((label|0) == 272) {
       $w$0$i$i$i = $$01$lcssa$i$i$i;
       while(1) {
        $731 = HEAP32[$w$0$i$i$i>>2]|0;
        $732 = (($731) + -16843009)|0;
        $733 = $731 & -2139062144;
        $734 = $733 ^ -2139062144;
        $735 = $734 & $732;
        $736 = ($735|0)==(0);
        $737 = ((($w$0$i$i$i)) + 4|0);
        if ($736) {
         $w$0$i$i$i = $737;
        } else {
         break;
        }
       }
       $738 = $731&255;
       $739 = ($738<<24>>24)==(0);
       if ($739) {
        $$1$lcssa$i$i$i = $w$0$i$i$i;
       } else {
        $$pn15$i$i$i = $w$0$i$i$i;
        while(1) {
         $740 = ((($$pn15$i$i$i)) + 1|0);
         $$pre$i$i$i = HEAP8[$740>>0]|0;
         $741 = ($$pre$i$i$i<<24>>24)==(0);
         if ($741) {
          $$1$lcssa$i$i$i = $740;
          break;
         } else {
          $$pn15$i$i$i = $740;
         }
        }
       }
       $742 = $$1$lcssa$i$i$i;
       $$pn$i$i$i = $742;
      }
      $$0$i$i3$i = (($$pn$i$i$i) - ($664))|0;
      $743 = (_string_ndup($724,$654,$$0$i$i3$i)|0);
      $744 = ((($r$0$i)) + 16|0);
      HEAP32[$744>>2] = $743;
      $745 = ($743|0)==(0|0);
      if ($745) {
       $r$1$i = $r$0$i;
      } else {
       $746 = ($$0$i$i88>>>0)>(4);
       if ($746) {
        $747 = (($$0$i$i88) + -4)|0;
        $748 = (($654) + ($747)|0);
        $749 = HEAP8[$748>>0]|0;
        $750 = ($749<<24>>24)==(46);
        if ($750) {
         $$014$i5$i = $748;$$05$i$i = 19634;
         while(1) {
          $751 = ((($$014$i5$i)) + 1|0);
          $752 = ((($$05$i$i)) + 1|0);
          $753 = HEAP8[$751>>0]|0;
          $754 = HEAP8[$752>>0]|0;
          $755 = ($753<<24>>24)!=($754<<24>>24);
          $756 = ($753<<24>>24)==(0);
          $or$cond$i$i94 = $756 | $755;
          if ($or$cond$i$i94) {
           break;
          } else {
           $$014$i5$i = $751;$$05$i$i = $752;
          }
         }
         $757 = ($753<<24>>24)==($754<<24>>24);
         if ($757) {
          $758 = (($743) + ($747)|0);
          HEAP8[$758>>0] = 0;
          $$pre328 = HEAP32[$744>>2]|0;
          $759 = $$pre328;
         } else {
          $759 = $743;
         }
        } else {
         $759 = $743;
        }
       } else {
        $759 = $743;
       }
       $760 = (_bgzf_open_ref($759,0)|0);
       HEAP32[$719>>2] = $760;
       $761 = ($760|0)==(0|0);
       if ($761) {
        $r$1$i = $r$0$i;
       } else {
        $762 = HEAP32[$744>>2]|0;
        HEAP32[$vararg_buffer40>>2] = 4091;
        $vararg_ptr43 = ((($vararg_buffer40)) + 4|0);
        HEAP32[$vararg_ptr43>>2] = $762;
        (_sprintf($fai_fn$i,19639,$vararg_buffer40)|0);
        HEAP32[$vararg_buffer44>>2] = $fai_fn$i;
        $vararg_ptr47 = ((($vararg_buffer44)) + 4|0);
        HEAP32[$vararg_ptr47>>2] = $sb$i;
        $763 = (___syscall195(195,($vararg_buffer44|0))|0);
        $764 = ($763>>>0)>(4294963200);
        if ($764) {
         $765 = (0 - ($763))|0;
         $766 = HEAP32[6773]|0;
         $767 = ($766|0)==(0|0);
         if ($767) {
          $$0$i$i$i7$i = 27136;
         } else {
          $768 = (_pthread_self()|0);
          $769 = ((($768)) + 64|0);
          $770 = HEAP32[$769>>2]|0;
          $$0$i$i$i7$i = $770;
         }
         HEAP32[$$0$i$i$i7$i>>2] = $765;
         $r$1$i = $r$0$i;
         break;
        }
        $771 = ($763|0)==(0);
        if ($771) {
         $772 = (_fopen($fai_fn$i,21885)|0);
         $773 = ($772|0)==(0|0);
         if ($773) {
          $r$1$i = $r$0$i;
          break;
         }
         $774 = $line$i;
         $775 = $774 & 3;
         $776 = ($775|0)==(0);
         $777 = ((($f$i$i)) + 4|0);
         $778 = ((($f$i$i)) + 44|0);
         $779 = ((($f$i$i)) + 8|0);
         $780 = ((($f$i$i)) + 76|0);
         $781 = ((($f$i$i)) + 104|0);
         $782 = ((($f$i$i)) + 108|0);
         $783 = ((($f$i$i)) + 100|0);
         $784 = ((($f$i29$i)) + 4|0);
         $785 = ((($f$i29$i)) + 44|0);
         $786 = ((($f$i29$i)) + 8|0);
         $787 = ((($f$i29$i)) + 76|0);
         $788 = ((($f$i29$i)) + 104|0);
         $789 = ((($f$i29$i)) + 108|0);
         $790 = ((($f$i29$i)) + 100|0);
         $791 = ((($f$i31$i)) + 4|0);
         $792 = ((($f$i31$i)) + 44|0);
         $793 = ((($f$i31$i)) + 8|0);
         $794 = ((($f$i31$i)) + 76|0);
         $795 = ((($f$i31$i)) + 104|0);
         $796 = ((($f$i31$i)) + 108|0);
         $797 = ((($f$i31$i)) + 100|0);
         $798 = ((($f$i33$i)) + 4|0);
         $799 = ((($f$i33$i)) + 44|0);
         $800 = ((($f$i33$i)) + 8|0);
         $801 = ((($f$i33$i)) + 76|0);
         $802 = ((($f$i33$i)) + 104|0);
         $803 = ((($f$i33$i)) + 108|0);
         $804 = ((($f$i33$i)) + 100|0);
         $805 = ((($r$0$i)) + 4|0);
         $806 = ((($r$0$i)) + 8|0);
         $807 = ((($r$0$i)) + 12|0);
         $id$0$i = 0;$id_alloc$0$i = 0;
         L637: while(1) {
          $808 = (_fgets($line$i,8192,$772)|0);
          $809 = ($808|0)==(0|0);
          if ($809) {
           label = 353;
           break;
          }
          $810 = (_malloc(56)|0);
          $811 = ($810|0)==(0|0);
          if ($811) {
           $1091 = 0;
           break L594;
          } else {
           $storemerge$i = $line$i;
          }
          while(1) {
           $812 = HEAP8[$storemerge$i>>0]|0;
           $813 = ($812<<24>>24)==(0);
           if ($813) {
            break;
           }
           $814 = $812&255;
           $815 = (($814) + -9)|0;
           $notlhs = ($812<<24>>24)!=(32);
           $notrhs = ($815>>>0)>(4);
           $816 = $notrhs & $notlhs;
           if (!($816)) {
            break;
           }
           $817 = ((($storemerge$i)) + 1|0);
           $storemerge$i = $817;
          }
          HEAP8[$storemerge$i>>0] = 0;
          $818 = HEAP32[$r$0$i>>2]|0;
          L645: do {
           if ($776) {
            $$01$lcssa$i$i15$i = $line$i;
            label = 299;
           } else {
            $$014$i$i12$i = $line$i;$1542 = $774;
            while(1) {
             $819 = HEAP8[$$014$i$i12$i>>0]|0;
             $820 = ($819<<24>>24)==(0);
             if ($820) {
              $$pn$i$i26$i = $1542;
              break L645;
             }
             $821 = ((($$014$i$i12$i)) + 1|0);
             $822 = $821;
             $823 = $822 & 3;
             $824 = ($823|0)==(0);
             if ($824) {
              $$01$lcssa$i$i15$i = $821;
              label = 299;
              break;
             } else {
              $$014$i$i12$i = $821;$1542 = $822;
             }
            }
           }
          } while(0);
          if ((label|0) == 299) {
           label = 0;
           $w$0$i$i17$i = $$01$lcssa$i$i15$i;
           while(1) {
            $825 = HEAP32[$w$0$i$i17$i>>2]|0;
            $826 = (($825) + -16843009)|0;
            $827 = $825 & -2139062144;
            $828 = $827 ^ -2139062144;
            $829 = $828 & $826;
            $830 = ($829|0)==(0);
            $831 = ((($w$0$i$i17$i)) + 4|0);
            if ($830) {
             $w$0$i$i17$i = $831;
            } else {
             break;
            }
           }
           $832 = $825&255;
           $833 = ($832<<24>>24)==(0);
           if ($833) {
            $$1$lcssa$i$i23$i = $w$0$i$i17$i;
           } else {
            $$pn15$i$i19$i = $w$0$i$i17$i;
            while(1) {
             $834 = ((($$pn15$i$i19$i)) + 1|0);
             $$pre$i$i20$i = HEAP8[$834>>0]|0;
             $835 = ($$pre$i$i20$i<<24>>24)==(0);
             if ($835) {
              $$1$lcssa$i$i23$i = $834;
              break;
             } else {
              $$pn15$i$i19$i = $834;
             }
            }
           }
           $836 = $$1$lcssa$i$i23$i;
           $$pn$i$i26$i = $836;
          }
          $$0$i$i27$i = (($$pn$i$i26$i) - ($774))|0;
          $837 = (_string_ndup($818,$line$i,$$0$i$i27$i)|0);
          HEAP32[$810>>2] = $837;
          $storemerge$i$pn = $storemerge$i;
          while(1) {
           $cp$i$0 = ((($storemerge$i$pn)) + 1|0);
           $838 = HEAP8[$cp$i$0>>0]|0;
           $839 = ($838<<24>>24)==(0);
           if ($839) {
            break;
           }
           $840 = $838&255;
           $841 = ($838<<24>>24)==(32);
           $842 = (($840) + -9)|0;
           $843 = ($842>>>0)<(5);
           $844 = $841 | $843;
           if ($844) {
            $storemerge$i$pn = $cp$i$0;
           } else {
            break;
           }
          }
          HEAP32[$f$i$i>>2] = 0;
          HEAP32[$777>>2] = $cp$i$0;
          HEAP32[$778>>2] = $cp$i$0;
          $845 = ($cp$i$0|0)<(0|0);
          $846 = ((($storemerge$i$pn)) + -2147483648|0);
          $$sink$i$i = $845 ? (-1) : $846;
          HEAP32[$779>>2] = $$sink$i$i;
          HEAP32[$780>>2] = -1;
          HEAP32[$781>>2] = 0;
          $847 = $$sink$i$i;
          $848 = $cp$i$0;
          $849 = (($847) - ($848))|0;
          HEAP32[$782>>2] = $849;
          HEAP32[$783>>2] = $847;
          $850 = (___intscan($f$i$i,10,1,0,-2147483648)|0);
          $851 = tempRet0;
          $852 = HEAP32[$782>>2]|0;
          $853 = HEAP32[$777>>2]|0;
          $854 = HEAP32[$779>>2]|0;
          $855 = (($853) + ($852))|0;
          $856 = (($855) - ($854))|0;
          $857 = (($cp$i$0) + ($856)|0);
          $858 = ((($810)) + 8|0);
          $859 = $858;
          $860 = $859;
          HEAP32[$860>>2] = $850;
          $861 = (($859) + 4)|0;
          $862 = $861;
          HEAP32[$862>>2] = $851;
          $cp$i$1 = $857;
          while(1) {
           $863 = HEAP8[$cp$i$1>>0]|0;
           $864 = ($863<<24>>24)==(0);
           if ($864) {
            break;
           }
           $865 = $863&255;
           $866 = ($863<<24>>24)==(32);
           $867 = (($865) + -9)|0;
           $868 = ($867>>>0)<(5);
           $869 = $866 | $868;
           if (!($869)) {
            break;
           }
           $870 = ((($cp$i$1)) + 1|0);
           $cp$i$1 = $870;
          }
          HEAP32[$f$i29$i>>2] = 0;
          HEAP32[$784>>2] = $cp$i$1;
          HEAP32[$785>>2] = $cp$i$1;
          $871 = ($cp$i$1|0)<(0|0);
          $872 = ((($cp$i$1)) + 2147483647|0);
          $$sink$i30$i = $871 ? (-1) : $872;
          HEAP32[$786>>2] = $$sink$i30$i;
          HEAP32[$787>>2] = -1;
          HEAP32[$788>>2] = 0;
          $873 = $$sink$i30$i;
          $874 = $cp$i$1;
          $875 = (($873) - ($874))|0;
          HEAP32[$789>>2] = $875;
          HEAP32[$790>>2] = $873;
          $876 = (___intscan($f$i29$i,10,1,0,-2147483648)|0);
          $877 = tempRet0;
          $878 = HEAP32[$789>>2]|0;
          $879 = HEAP32[$784>>2]|0;
          $880 = HEAP32[$786>>2]|0;
          $881 = (($879) + ($878))|0;
          $882 = (($881) - ($880))|0;
          $883 = (($cp$i$1) + ($882)|0);
          $884 = ((($810)) + 16|0);
          $885 = $884;
          $886 = $885;
          HEAP32[$886>>2] = $876;
          $887 = (($885) + 4)|0;
          $888 = $887;
          HEAP32[$888>>2] = $877;
          $cp$i$2 = $883;
          while(1) {
           $889 = HEAP8[$cp$i$2>>0]|0;
           $890 = ($889<<24>>24)==(0);
           if ($890) {
            break;
           }
           $891 = $889&255;
           $892 = ($889<<24>>24)==(32);
           $893 = (($891) + -9)|0;
           $894 = ($893>>>0)<(5);
           $895 = $892 | $894;
           if (!($895)) {
            break;
           }
           $896 = ((($cp$i$2)) + 1|0);
           $cp$i$2 = $896;
          }
          HEAP32[$f$i31$i>>2] = 0;
          HEAP32[$791>>2] = $cp$i$2;
          HEAP32[$792>>2] = $cp$i$2;
          $897 = ($cp$i$2|0)<(0|0);
          $898 = ((($cp$i$2)) + 2147483647|0);
          $$sink$i32$i = $897 ? (-1) : $898;
          HEAP32[$793>>2] = $$sink$i32$i;
          HEAP32[$794>>2] = -1;
          HEAP32[$795>>2] = 0;
          $899 = $$sink$i32$i;
          $900 = $cp$i$2;
          $901 = (($899) - ($900))|0;
          HEAP32[$796>>2] = $901;
          HEAP32[$797>>2] = $899;
          $902 = (___intscan($f$i31$i,10,1,-2147483648,0)|0);
          $903 = tempRet0;
          $904 = HEAP32[$796>>2]|0;
          $905 = HEAP32[$791>>2]|0;
          $906 = HEAP32[$793>>2]|0;
          $907 = (($905) + ($904))|0;
          $908 = (($907) - ($906))|0;
          $909 = (($cp$i$2) + ($908)|0);
          $910 = ((($810)) + 24|0);
          HEAP32[$910>>2] = $902;
          $cp$i$3 = $909;
          while(1) {
           $911 = HEAP8[$cp$i$3>>0]|0;
           $912 = ($911<<24>>24)==(0);
           if ($912) {
            break;
           }
           $913 = $911&255;
           $914 = ($911<<24>>24)==(32);
           $915 = (($913) + -9)|0;
           $916 = ($915>>>0)<(5);
           $917 = $914 | $916;
           if (!($917)) {
            break;
           }
           $918 = ((($cp$i$3)) + 1|0);
           $cp$i$3 = $918;
          }
          HEAP32[$f$i33$i>>2] = 0;
          HEAP32[$798>>2] = $cp$i$3;
          HEAP32[$799>>2] = $cp$i$3;
          $919 = ($cp$i$3|0)<(0|0);
          $920 = ((($cp$i$3)) + 2147483647|0);
          $$sink$i34$i = $919 ? (-1) : $920;
          HEAP32[$800>>2] = $$sink$i34$i;
          HEAP32[$801>>2] = -1;
          HEAP32[$802>>2] = 0;
          $921 = $$sink$i34$i;
          $922 = $cp$i$3;
          $923 = (($921) - ($922))|0;
          HEAP32[$803>>2] = $923;
          HEAP32[$804>>2] = $921;
          $924 = (___intscan($f$i33$i,10,1,-2147483648,0)|0);
          $925 = tempRet0;
          $926 = ((($810)) + 28|0);
          HEAP32[$926>>2] = $924;
          $927 = HEAP32[$744>>2]|0;
          $928 = ((($810)) + 4|0);
          HEAP32[$928>>2] = $927;
          $929 = ((($810)) + 32|0);
          ;HEAP32[$929>>2]=0|0;HEAP32[$929+4>>2]=0|0;HEAP32[$929+8>>2]=0|0;HEAP32[$929+12>>2]=0|0;HEAP32[$929+16>>2]=0|0;
          $930 = HEAP32[$805>>2]|0;
          $931 = HEAP32[$810>>2]|0;
          $932 = ((($930)) + 8|0);
          $933 = HEAP32[$932>>2]|0;
          $934 = ((($930)) + 12|0);
          $935 = HEAP32[$934>>2]|0;
          $936 = ($933>>>0)<($935>>>0);
          do {
           if (!($936)) {
            $937 = HEAP32[$930>>2]|0;
            $938 = ((($930)) + 4|0);
            $939 = HEAP32[$938>>2]|0;
            $940 = $939 << 1;
            $941 = ($937>>>0)>($940>>>0);
            if ($941) {
             $942 = (($937) + -1)|0;
             $943 = (_kh_resize_refs($930,$942)|0);
             $944 = ($943|0)<(0);
             if ($944) {
              label = 340;
              break L637;
             } else {
              break;
             }
            } else {
             $945 = (($937) + 1)|0;
             $946 = (_kh_resize_refs($930,$945)|0);
             $947 = ($946|0)<(0);
             if ($947) {
              label = 340;
              break L637;
             } else {
              break;
             }
            }
           }
          } while(0);
          $948 = HEAP32[$930>>2]|0;
          $949 = (($948) + -1)|0;
          $950 = HEAP8[$931>>0]|0;
          $951 = $950 << 24 >> 24;
          $952 = ($950<<24>>24)==(0);
          L684: do {
           if ($952) {
            $h$1$i$i$i = $951;
           } else {
            $h$0$i$i$i = $951;$s$pn$i$i$i = $931;
            while(1) {
             $$0$i$i35$i = ((($s$pn$i$i$i)) + 1|0);
             $953 = HEAP8[$$0$i$i35$i>>0]|0;
             $954 = ($953<<24>>24)==(0);
             if ($954) {
              $h$1$i$i$i = $h$0$i$i$i;
              break L684;
             }
             $955 = ($h$0$i$i$i*31)|0;
             $956 = $953 << 24 >> 24;
             $957 = (($955) + ($956))|0;
             $h$0$i$i$i = $957;$s$pn$i$i$i = $$0$i$i35$i;
            }
           }
          } while(0);
          $958 = $h$1$i$i$i & $949;
          $959 = $958 >>> 4;
          $960 = ((($930)) + 16|0);
          $961 = HEAP32[$960>>2]|0;
          $962 = (($961) + ($959<<2)|0);
          $963 = HEAP32[$962>>2]|0;
          $964 = $958 << 1;
          $965 = $964 & 30;
          $966 = 2 << $965;
          $967 = $963 & $966;
          $968 = ($967|0)==(0);
          do {
           if ($968) {
            $969 = ((($930)) + 20|0);
            $i$0$i$i = $958;$site$0$i$i = $948;$step$0$i$i = 0;
            while(1) {
             $970 = $i$0$i$i >>> 4;
             $971 = (($961) + ($970<<2)|0);
             $972 = HEAP32[$971>>2]|0;
             $973 = $i$0$i$i << 1;
             $974 = $973 & 30;
             $975 = 2 << $974;
             $976 = $972 & $975;
             $977 = ($976|0)==(0);
             if (!($977)) {
              $i$1$i$i460 = $i$0$i$i;$site$2$i$i461 = $site$0$i$i;
              break;
             }
             $978 = 1 << $974;
             $979 = $972 & $978;
             $980 = ($979|0)==(0);
             if ($980) {
              $981 = HEAP32[$969>>2]|0;
              $982 = (($981) + ($i$0$i$i<<2)|0);
              $983 = HEAP32[$982>>2]|0;
              $984 = HEAP8[$983>>0]|0;
              $985 = ($984<<24>>24)!=($950<<24>>24);
              $986 = ($984<<24>>24)==(0);
              $or$cond3$i$i$i = $986 | $985;
              if ($or$cond3$i$i$i) {
               $$lcssa$i$i$i = $984;$$lcssa2$i$i$i = $950;
              } else {
               $$014$i$i37$i = $983;$$05$i$i$i = $931;
               while(1) {
                $987 = ((($$014$i$i37$i)) + 1|0);
                $988 = ((($$05$i$i$i)) + 1|0);
                $989 = HEAP8[$987>>0]|0;
                $990 = HEAP8[$988>>0]|0;
                $991 = ($989<<24>>24)!=($990<<24>>24);
                $992 = ($989<<24>>24)==(0);
                $or$cond$i$i$i = $992 | $991;
                if ($or$cond$i$i$i) {
                 $$lcssa$i$i$i = $989;$$lcssa2$i$i$i = $990;
                 break;
                } else {
                 $$014$i$i37$i = $987;$$05$i$i$i = $988;
                }
               }
              }
              $993 = ($$lcssa$i$i$i<<24>>24)==($$lcssa2$i$i$i<<24>>24);
              if ($993) {
               $i$1$i$i460 = $i$0$i$i;$site$2$i$i461 = $site$0$i$i;
               break;
              }
             }
             $site$0$i$i$i$0$i$i = $980 ? $site$0$i$i : $i$0$i$i;
             $994 = (($step$0$i$i) + 1)|0;
             $995 = (($i$0$i$i) + ($994))|0;
             $996 = $995 & $949;
             $997 = ($996|0)==($958|0);
             if ($997) {
              $i$1$i$i = $958;$x$0$i$i = $site$0$i$i$i$0$i$i;
              label = 334;
              break;
             } else {
              $i$0$i$i = $996;$site$0$i$i = $site$0$i$i$i$0$i$i;$step$0$i$i = $994;
             }
            }
            if ((label|0) == 334) {
             label = 0;
             $998 = ($x$0$i$i|0)==($948|0);
             if ($998) {
              $i$1$i$i460 = $i$1$i$i;$site$2$i$i461 = $x$0$i$i;
             } else {
              $x$3$i$i = $x$0$i$i;
              break;
             }
            }
            $999 = $i$1$i$i460 >>> 4;
            $1000 = (($961) + ($999<<2)|0);
            $1001 = HEAP32[$1000>>2]|0;
            $1002 = $i$1$i$i460 << 1;
            $1003 = $1002 & 30;
            $1004 = 2 << $1003;
            $1005 = $1001 & $1004;
            $1006 = ($1005|0)==(0);
            $1007 = ($site$2$i$i461|0)==($948|0);
            $or$cond453 = $1006 | $1007;
            $i$1$i$i$site$2$i$i = $or$cond453 ? $i$1$i$i460 : $site$2$i$i461;
            $x$3$i$i = $i$1$i$i$site$2$i$i;
           } else {
            $x$3$i$i = $958;
           }
          } while(0);
          $1008 = $x$3$i$i >>> 4;
          $1009 = (($961) + ($1008<<2)|0);
          $1010 = HEAP32[$1009>>2]|0;
          $1011 = $x$3$i$i << 1;
          $1012 = $1011 & 30;
          $1013 = 2 << $1012;
          $1014 = $1010 & $1013;
          $1015 = ($1014|0)==(0);
          L705: do {
           if ($1015) {
            $1030 = 1 << $1012;
            $1031 = $1010 & $1030;
            $1032 = ($1031|0)==(0);
            if (!($1032)) {
             $1033 = ((($930)) + 20|0);
             $1034 = HEAP32[$1033>>2]|0;
             $1035 = (($1034) + ($x$3$i$i<<2)|0);
             HEAP32[$1035>>2] = $931;
             $1036 = 3 << $1012;
             $1037 = $1036 ^ -1;
             $1038 = HEAP32[$960>>2]|0;
             $1039 = (($1038) + ($1008<<2)|0);
             $1040 = HEAP32[$1039>>2]|0;
             $1041 = $1040 & $1037;
             HEAP32[$1039>>2] = $1041;
             $1042 = ((($930)) + 4|0);
             $1043 = HEAP32[$1042>>2]|0;
             $1044 = (($1043) + 1)|0;
             HEAP32[$1042>>2] = $1044;
             label = 341;
             break;
            }
            $1049 = HEAP32[$805>>2]|0;
            $1050 = ((($1049)) + 24|0);
            $1051 = HEAP32[$1050>>2]|0;
            $1052 = (($1051) + ($x$3$i$i<<2)|0);
            $1053 = HEAP32[$1052>>2]|0;
            $1054 = ($1053|0)==(0|0);
            L710: do {
             if ($1054) {
              $1076 = $1051;
             } else {
              $1055 = ((($1053)) + 32|0);
              $1056 = $1055;
              $1057 = $1056;
              $1058 = HEAP32[$1057>>2]|0;
              $1059 = (($1056) + 4)|0;
              $1060 = $1059;
              $1061 = HEAP32[$1060>>2]|0;
              $1062 = ($1058|0)==(0);
              $1063 = ($1061|0)==(0);
              $1064 = $1062 & $1063;
              do {
               if ($1064) {
                $1065 = ((($1053)) + 8|0);
                $1066 = $1065;
                $1067 = $1066;
                $1068 = HEAP32[$1067>>2]|0;
                $1069 = (($1066) + 4)|0;
                $1070 = $1069;
                $1071 = HEAP32[$1070>>2]|0;
                $1072 = ($1068|0)==(0);
                $1073 = ($1071|0)==(0);
                $1074 = $1072 & $1073;
                if (!($1074)) {
                 break;
                }
                _free($1053);
                $$pre329 = HEAP32[$805>>2]|0;
                $$phi$trans$insert = ((($$pre329)) + 24|0);
                $$pre330 = HEAP32[$$phi$trans$insert>>2]|0;
                $1076 = $$pre330;
                break L710;
               }
              } while(0);
              _free($810);
              break L705;
             }
            } while(0);
            $1075 = (($1076) + ($x$3$i$i<<2)|0);
            HEAP32[$1075>>2] = $810;
           } else {
            $1016 = ((($930)) + 20|0);
            $1017 = HEAP32[$1016>>2]|0;
            $1018 = (($1017) + ($x$3$i$i<<2)|0);
            HEAP32[$1018>>2] = $931;
            $1019 = 3 << $1012;
            $1020 = $1019 ^ -1;
            $1021 = HEAP32[$960>>2]|0;
            $1022 = (($1021) + ($1008<<2)|0);
            $1023 = HEAP32[$1022>>2]|0;
            $1024 = $1023 & $1020;
            HEAP32[$1022>>2] = $1024;
            $1025 = ((($930)) + 4|0);
            $1026 = HEAP32[$1025>>2]|0;
            $1027 = (($1026) + 1)|0;
            HEAP32[$1025>>2] = $1027;
            $1028 = HEAP32[$932>>2]|0;
            $1029 = (($1028) + 1)|0;
            HEAP32[$932>>2] = $1029;
            label = 341;
           }
          } while(0);
          if ((label|0) == 341) {
           label = 0;
           $1045 = HEAP32[$805>>2]|0;
           $1046 = ((($1045)) + 24|0);
           $1047 = HEAP32[$1046>>2]|0;
           $1048 = (($1047) + ($x$3$i$i<<2)|0);
           HEAP32[$1048>>2] = $810;
          }
          $1077 = ($id$0$i|0)<($id_alloc$0$i|0);
          L721: do {
           if ($1077) {
            $id_alloc$1$i = $id_alloc$0$i;
           } else {
            $1078 = ($id_alloc$0$i|0)==(0);
            $1079 = $id_alloc$0$i << 1;
            $$454 = $1078 ? 16 : $1079;
            $1080 = HEAP32[$806>>2]|0;
            $1081 = $$454 << 2;
            $1082 = (_realloc($1080,$1081)|0);
            HEAP32[$806>>2] = $1082;
            $x$0$i = $id$0$i;
            while(1) {
             $1083 = ($x$0$i|0)<($$454|0);
             if (!($1083)) {
              $id_alloc$1$i = $$454;
              break L721;
             }
             $1084 = HEAP32[$806>>2]|0;
             $1085 = (($1084) + ($x$0$i<<2)|0);
             HEAP32[$1085>>2] = 0;
             $1086 = (($x$0$i) + 1)|0;
             $x$0$i = $1086;
            }
           }
          } while(0);
          $1087 = HEAP32[$806>>2]|0;
          $1088 = (($1087) + ($id$0$i<<2)|0);
          HEAP32[$1088>>2] = $810;
          $1089 = (($id$0$i) + 1)|0;
          HEAP32[$807>>2] = $1089;
          $id$0$i = $1089;$id_alloc$0$i = $id_alloc$1$i;
         }
         if ((label|0) == 340) {
          _free($810);
          $1091 = 0;
          break L594;
         }
         else if ((label|0) == 353) {
          (_fclose($772)|0);
          $1091 = $r$0$i;
          break L594;
         }
        } else {
         $r$1$i = $r$0$i;
        }
       }
      }
     } else {
      $r$1$i = $r$0$i;
     }
    }
   } while(0);
   if ($685) {
    $r$1$i225 = $r$1$i;
    label = 355;
   } else {
    $1091 = 0;
   }
  }
 } while(0);
 if ((label|0) == 355) {
  _refs_free($r$1$i225);
  $1091 = 0;
 }
 $1090 = ($1091|0)==(0|0);
 if ($1090) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $1092 = HEAP32[$31>>2]|0;
 $1093 = ($1092|0)==(0|0);
 L737: do {
  if (!($1093)) {
   $1094 = HEAP32[$655>>2]|0;
   $1095 = ($1094|0)==(0|0);
   if (!($1095)) {
    $1096 = ((($1094)) + 4|0);
    $1097 = HEAP32[$1096>>2]|0;
    $1098 = ($1097|0)==(0|0);
    if (!($1098)) {
     $1100 = $1092;$i$0$i = 0;
     L740: while(1) {
      $1099 = ((($1100)) + 28|0);
      $1101 = HEAP32[$1099>>2]|0;
      $1102 = ($i$0$i|0)<($1101|0);
      if (!($1102)) {
       break L737;
      }
      $1103 = ((($1100)) + 32|0);
      $1104 = HEAP32[$1103>>2]|0;
      $1105 = (($1104) + ($i$0$i<<4)|0);
      $1106 = HEAP32[$1105>>2]|0;
      $1107 = HEAP32[$655>>2]|0;
      $1108 = ((($1107)) + 4|0);
      $1109 = HEAP32[$1108>>2]|0;
      $1110 = (_kh_get_refs($1109,$1106)|0);
      $1111 = HEAP32[$1109>>2]|0;
      $1112 = ($1110|0)==($1111|0);
      do {
       if ($1112) {
        $$pre331 = $1100;
       } else {
        $1113 = ((($1109)) + 24|0);
        $1114 = HEAP32[$1113>>2]|0;
        $1115 = (($1114) + ($1110<<2)|0);
        $1116 = HEAP32[$1115>>2]|0;
        $1117 = ($1116|0)==(0|0);
        if ($1117) {
         $$pre331 = $1100;
        } else {
         $1118 = ((($1116)) + 8|0);
         $1119 = $1118;
         $1120 = $1119;
         $1121 = HEAP32[$1120>>2]|0;
         $1122 = (($1119) + 4)|0;
         $1123 = $1122;
         $1124 = HEAP32[$1123>>2]|0;
         $1125 = ($1121|0)==(0);
         $1126 = ($1124|0)==(0);
         $1127 = $1125 & $1126;
         if ($1127) {
          $$pre331 = $1100;
         } else {
          $1128 = (((($1104) + ($i$0$i<<4)|0)) + 4|0);
          $1129 = HEAP32[$1128>>2]|0;
          $1130 = ($1121|0)==($1129|0);
          $1131 = ($1124|0)==(0);
          $1132 = $1130 & $1131;
          if ($1132) {
           $$pre331 = $1100;
           break;
          }
          $1133 = HEAP32[$1116>>2]|0;
          $1134 = HEAP8[$1133>>0]|0;
          $1135 = HEAP8[$1106>>0]|0;
          $1136 = ($1134<<24>>24)!=($1135<<24>>24);
          $1137 = ($1134<<24>>24)==(0);
          $or$cond3$i$i98 = $1137 | $1136;
          if ($or$cond3$i$i98) {
           $$lcssa$i$i106 = $1134;$$lcssa2$i$i105 = $1135;
          } else {
           $$014$i$i101 = $1133;$$05$i$i100 = $1106;
           while(1) {
            $1138 = ((($$014$i$i101)) + 1|0);
            $1139 = ((($$05$i$i100)) + 1|0);
            $1140 = HEAP8[$1138>>0]|0;
            $1141 = HEAP8[$1139>>0]|0;
            $1142 = ($1140<<24>>24)!=($1141<<24>>24);
            $1143 = ($1140<<24>>24)==(0);
            $or$cond$i$i102 = $1143 | $1142;
            if ($or$cond$i$i102) {
             $$lcssa$i$i106 = $1140;$$lcssa2$i$i105 = $1141;
             break;
            } else {
             $$014$i$i101 = $1138;$$05$i$i100 = $1139;
            }
           }
          }
          $1144 = ($$lcssa$i$i106<<24>>24)==($$lcssa2$i$i105<<24>>24);
          if (!($1144)) {
           break L740;
          }
          HEAP32[$vararg_buffer48>>2] = $1133;
          $vararg_ptr51 = ((($vararg_buffer48)) + 4|0);
          HEAP32[$vararg_ptr51>>2] = $1129;
          $vararg_ptr52 = ((($vararg_buffer48)) + 8|0);
          HEAP32[$vararg_ptr52>>2] = $1121;
          _fprintf(9772,19712,$vararg_buffer48);
          $1145 = $1118;
          $1146 = $1145;
          $1147 = HEAP32[$1146>>2]|0;
          $1148 = (($1145) + 4)|0;
          $1149 = $1148;
          $1150 = HEAP32[$1149>>2]|0;
          $1151 = HEAP32[$31>>2]|0;
          $1152 = ((($1151)) + 32|0);
          $1153 = HEAP32[$1152>>2]|0;
          $1154 = (((($1153) + ($i$0$i<<4)|0)) + 4|0);
          HEAP32[$1154>>2] = $1147;
          $$pre331$pre = HEAP32[$31>>2]|0;
          $$pre331 = $$pre331$pre;
         }
        }
       }
      } while(0);
      $1155 = (($i$0$i) + 1)|0;
      $1100 = $$pre331;$i$0$i = $1155;
     }
     ___assert_fail((19648|0),(18618|0),1941,(19694|0));
     // unreachable;
    }
   }
  }
 } while(0);
 HEAP32[$655>>2] = $1091;
 $1156 = ((($1091)) + 20|0);
 $1157 = HEAP32[$1156>>2]|0;
 $1158 = ($1157|0)==(0|0);
 do {
  if ($1158) {
   $1164 = $1091;
  } else {
   $1159 = (_bgzf_close($1157)|0);
   $1160 = ($1159|0)==(0);
   if ($1160) {
    $1161 = HEAP32[$655>>2]|0;
    $1162 = ((($1161)) + 20|0);
    HEAP32[$1162>>2] = 0;
    $$pre333 = HEAP32[$655>>2]|0;
    $1164 = $$pre333;
    break;
   } else {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $1163 = ((($1164)) + 16|0);
 $1165 = HEAP32[$1163>>2]|0;
 $1166 = ($1165|0)==(0|0);
 if ($1166) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $1167 = HEAP32[$31>>2]|0;
 $1168 = ((($1164)) + 8|0);
 $1169 = HEAP32[$1168>>2]|0;
 $1170 = ($1169|0)==(0|0);
 if (!($1170)) {
  _free($1169);
 }
 $1171 = ((($1164)) + 56|0);
 $1172 = HEAP32[$1171>>2]|0;
 $1173 = ($1172|0)==(0|0);
 if (!($1173)) {
  HEAP32[$1171>>2] = 0;
 }
 $1174 = ((($1167)) + 28|0);
 $1175 = HEAP32[$1174>>2]|0;
 $1176 = ($1175|0)==(0);
 if ($1176) {
  $req$0$i$i = 0;
 } else {
  $1177 = $1175 << 2;
  $1178 = ($1175>>>0)>(65535);
  if ($1178) {
   $1179 = (($1177>>>0) / ($1175>>>0))&-1;
   $1180 = ($1179|0)==(4);
   $$$i$i = $1180 ? $1177 : -1;
   $req$0$i$i = $$$i$i;
  } else {
   $req$0$i$i = $1177;
  }
 }
 $1181 = (_malloc($req$0$i$i)|0);
 $1182 = ($1181|0)==(0|0);
 if ($1182) {
  HEAP32[$1168>>2] = 0;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $1183 = ((($1181)) + -4|0);
 $1184 = HEAP32[$1183>>2]|0;
 $1185 = $1184 & 3;
 $1186 = ($1185|0)==(0);
 if (!($1186)) {
  _memset(($1181|0),0,($req$0$i$i|0))|0;
 }
 HEAP32[$1168>>2] = $1181;
 $1187 = HEAP32[$1174>>2]|0;
 $1188 = ((($1164)) + 12|0);
 HEAP32[$1188>>2] = $1187;
 $1189 = ((($1164)) + 4|0);
 $1190 = ((($1167)) + 32|0);
 $i$0$i108 = 0;
 while(1) {
  $1191 = HEAP32[$1174>>2]|0;
  $1192 = ($i$0$i108|0)<($1191|0);
  if (!($1192)) {
   break;
  }
  $1193 = HEAP32[$1189>>2]|0;
  $1194 = HEAP32[$1190>>2]|0;
  $1195 = (($1194) + ($i$0$i108<<4)|0);
  $1196 = HEAP32[$1195>>2]|0;
  $1197 = (_kh_get_refs($1193,$1196)|0);
  $1198 = HEAP32[$1193>>2]|0;
  $1199 = ($1197|0)==($1198|0);
  if ($1199) {
   HEAP32[$vararg_buffer53>>2] = $1196;
   _fprintf(9772,19100,$vararg_buffer53);
  } else {
   $1200 = ((($1193)) + 24|0);
   $1201 = HEAP32[$1200>>2]|0;
   $1202 = (($1201) + ($1197<<2)|0);
   $1203 = HEAP32[$1202>>2]|0;
   $1204 = HEAP32[$1168>>2]|0;
   $1205 = (($1204) + ($i$0$i108<<2)|0);
   HEAP32[$1205>>2] = $1203;
  }
  $1206 = (($i$0$i108) + 1)|0;
  $i$0$i108 = $1206;
 }
 $1207 = HEAP32[$655>>2]|0;
 $1208 = ((($1207)) + 8|0);
 $1209 = HEAP32[$1208>>2]|0;
 $1210 = ($1209|0)==(0|0);
 if ($1210) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $1211 = (($1209) + ($id<<2)|0);
  $1212 = HEAP32[$1211>>2]|0;
  $1213 = ($1212|0)==(0|0);
  $$455 = $1213 << 31 >> 31;
  STACKTOP = sp;return ($$455|0);
 }
 return (0)|0;
}
function _cram_free_container($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$0 = 0, $id$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($c)) + 344|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  _free($2);
 }
 $4 = ((($c)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _free($5);
 }
 $7 = ((($c)) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  _cram_free_compression_header($8);
 }
 $10 = ((($c)) + 56|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 32|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   _free($14);
  }
  _free($11);
 }
 $16 = ((($c)) + 96|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $id$0 = 11;
 } else {
  $19 = ((($c)) + 60|0);
  $i$0 = 0;
  while(1) {
   $20 = HEAP32[$19>>2]|0;
   $21 = ($i$0|0)<($20|0);
   if (!($21)) {
    break;
   }
   $22 = HEAP32[$16>>2]|0;
   $23 = (($22) + ($i$0<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0|0);
   if (!($25)) {
    _cram_free_slice($24);
   }
   $26 = (($i$0) + 1)|0;
   $i$0 = $26;
  }
  $27 = HEAP32[$16>>2]|0;
  _free($27);
  $id$0 = 11;
 }
 while(1) {
  $exitcond = ($id$0|0)==(39);
  if ($exitcond) {
   break;
  }
  $28 = (((($c)) + 152|0) + ($id$0<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0|0);
  if (!($30)) {
   $31 = ((($29)) + 4096|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0|0);
   if (!($33)) {
    $34 = ((($32)) + 20|0);
    $35 = HEAP32[$34>>2]|0;
    _free($35);
    $36 = ((($32)) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    _free($37);
    $38 = ((($32)) + 24|0);
    $39 = HEAP32[$38>>2]|0;
    _free($39);
    _free($32);
   }
   _free($29);
  }
  $40 = (($id$0) + 1)|0;
  $id$0 = $40;
 }
 $41 = ((($c)) + 340|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(0|0);
 if (!($43)) {
  $44 = ((($42)) + 20|0);
  $45 = HEAP32[$44>>2]|0;
  _free($45);
  $46 = ((($42)) + 16|0);
  $47 = HEAP32[$46>>2]|0;
  _free($47);
  $48 = ((($42)) + 24|0);
  $49 = HEAP32[$48>>2]|0;
  _free($49);
  _free($42);
 }
 _free($c);
 return;
}
function _cram_free_compression_header($hdr) {
 $hdr = $hdr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond2 = 0, $exitcond3 = 0, $i$0 = 0, $i$0$i = 0, $i$1 = 0, $i$2 = 0, $m$0 = 0, $m1$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($hdr)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _free($1);
 }
 $3 = ((($hdr)) + 88|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $i$0 = 0;
 } else {
  $6 = ((($4)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  _free($7);
  $8 = ((($4)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  _free($9);
  $10 = ((($4)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  _free($11);
  _free($4);
  $i$0 = 0;
 }
 while(1) {
  $exitcond3 = ($i$0|0)==(32);
  if ($exitcond3) {
   $i$1 = 0;
   break;
  }
  $12 = (((($hdr)) + 92|0) + ($i$0<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $m$0 = $13;
  while(1) {
   $14 = ($m$0|0)==(0|0);
   if ($14) {
    break;
   }
   $15 = ((($m$0)) + 20|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($m$0)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0|0);
   if (!($19)) {
    $20 = ((($18)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    FUNCTION_TABLE_vi[$21 & 127]($18);
   }
   _free($m$0);
   $m$0 = $16;
  }
  $22 = (($i$0) + 1)|0;
  $i$0 = $22;
 }
 while(1) {
  $exitcond2 = ($i$1|0)==(32);
  if ($exitcond2) {
   $i$2 = 0;
   break;
  }
  $23 = (((($hdr)) + 220|0) + ($i$1<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $m1$0 = $24;
  while(1) {
   $25 = ($m1$0|0)==(0|0);
   if ($25) {
    break;
   }
   $26 = ((($m1$0)) + 20|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($m1$0)) + 16|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(0|0);
   if (!($30)) {
    $31 = ((($29)) + 8|0);
    $32 = HEAP32[$31>>2]|0;
    FUNCTION_TABLE_vi[$32 & 127]($29);
   }
   _free($m1$0);
   $m1$0 = $27;
  }
  $33 = (($i$1) + 1)|0;
  $i$1 = $33;
 }
 while(1) {
  $exitcond = ($i$2|0)==(47);
  if ($exitcond) {
   break;
  }
  $34 = (((($hdr)) + 348|0) + ($i$2<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)==(0|0);
  if (!($36)) {
   $37 = ((($35)) + 8|0);
   $38 = HEAP32[$37>>2]|0;
   FUNCTION_TABLE_vi[$38 & 127]($35);
  }
  $39 = (($i$2) + 1)|0;
  $i$2 = $39;
 }
 $40 = ((($hdr)) + 76|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(0|0);
 if (!($42)) {
  _free($41);
 }
 $43 = ((($hdr)) + 68|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0|0);
 if (!($45)) {
  $46 = ((($44)) + 32|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(0|0);
  if (!($48)) {
   _free($47);
  }
  _free($44);
 }
 $49 = ((($hdr)) + 80|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0|0);
 if (!($51)) {
  $52 = ((($50)) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  _free($53);
  $54 = ((($50)) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  _free($55);
  $56 = ((($50)) + 24|0);
  $57 = HEAP32[$56>>2]|0;
  _free($57);
  _free($50);
 }
 $58 = ((($hdr)) + 84|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)==(0|0);
 if ($60) {
  _free($hdr);
  return;
 }
 $61 = ((($59)) + 4|0);
 $62 = ((($59)) + 8|0);
 $i$0$i = 0;
 while(1) {
  $63 = HEAP32[$61>>2]|0;
  $64 = ($i$0$i>>>0)<($63>>>0);
  if (!($64)) {
   break;
  }
  $65 = HEAP32[$62>>2]|0;
  $66 = (($65) + ($i$0$i<<3)|0);
  $67 = HEAP32[$66>>2]|0;
  _free($67);
  $68 = (($i$0$i) + 1)|0;
  $i$0$i = $68;
 }
 $69 = HEAP32[$62>>2]|0;
 _free($69);
 _free($59);
 _free($hdr);
 return;
}
function _cram_free_slice($s) {
 $s = $s|0;
 var $$pre = 0, $$pre$pre = 0, $$pre16 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$0 = 0, $i$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($s)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($2)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   _free($5);
  }
  _free($2);
 }
 $7 = ((($s)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = HEAP32[$s>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $24 = $8;
  } else {
   $13 = $10;$i$0 = 0;
   while(1) {
    $12 = ((($13)) + 32|0);
    $14 = HEAP32[$12>>2]|0;
    $15 = ($i$0|0)<($14|0);
    if (!($15)) {
     break;
    }
    $16 = HEAP32[$7>>2]|0;
    $17 = (($16) + ($i$0<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(0|0);
    if ($19) {
     $$pre = $13;
    } else {
     $20 = ((($18)) + 32|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(0|0);
     if (!($22)) {
      _free($21);
     }
     _free($18);
     $$pre$pre = HEAP32[$s>>2]|0;
     $$pre = $$pre$pre;
    }
    $23 = (($i$0) + 1)|0;
    $13 = $$pre;$i$0 = $23;
   }
   $$pre16 = HEAP32[$7>>2]|0;
   $24 = $$pre16;
  }
  _free($24);
 }
 $25 = ((($s)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  _free($26);
 }
 $28 = HEAP32[$s>>2]|0;
 $29 = ($28|0)==(0|0);
 if (!($29)) {
  $30 = ((($28)) + 40|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0|0);
  if (!($32)) {
   _free($31);
  }
  _free($28);
 }
 $33 = ((($s)) + 68|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0|0);
 if (!($35)) {
  $36 = ((($34)) + 32|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(0|0);
  if (!($38)) {
   _free($37);
  }
  _free($34);
 }
 $39 = ((($s)) + 72|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0|0);
 if (!($41)) {
  $42 = ((($40)) + 32|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)==(0|0);
  if (!($44)) {
   _free($43);
  }
  _free($40);
 }
 $45 = ((($s)) + 64|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(0|0);
 if (!($47)) {
  $48 = ((($46)) + 32|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)==(0|0);
  if (!($50)) {
   _free($49);
  }
  _free($46);
 }
 $51 = ((($s)) + 84|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==(0|0);
 if (!($53)) {
  $54 = ((($52)) + 32|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)==(0|0);
  if (!($56)) {
   _free($55);
  }
  _free($52);
 }
 $57 = ((($s)) + 88|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)==(0|0);
 if (!($59)) {
  $60 = ((($58)) + 32|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)==(0|0);
  if (!($62)) {
   _free($61);
  }
  _free($58);
 }
 $63 = ((($s)) + 92|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)==(0|0);
 if (!($65)) {
  $66 = ((($64)) + 32|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($67|0)==(0|0);
  if (!($68)) {
   _free($67);
  }
  _free($64);
 }
 $69 = ((($s)) + 104|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)==(0|0);
 if (!($71)) {
  $72 = ((($70)) + 32|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($73|0)==(0|0);
  if (!($74)) {
   _free($73);
  }
  _free($70);
 }
 $75 = ((($s)) + 108|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ($76|0)==(0|0);
 if (!($77)) {
  $78 = ((($76)) + 32|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ($79|0)==(0|0);
  if (!($80)) {
   _free($79);
  }
  _free($76);
 }
 $81 = ((($s)) + 112|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ($82|0)==(0|0);
 if (!($83)) {
  $84 = ((($82)) + 32|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)==(0|0);
  if (!($86)) {
   _free($85);
  }
  _free($82);
 }
 $87 = ((($s)) + 116|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($88|0)==(0|0);
 if (!($89)) {
  $90 = ((($88)) + 32|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91|0)==(0|0);
  if (!($92)) {
   _free($91);
  }
  _free($88);
 }
 $93 = ((($s)) + 76|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ($94|0)==(0|0);
 if (!($95)) {
  $96 = ((($94)) + 32|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($97|0)==(0|0);
  if (!($98)) {
   _free($97);
  }
  _free($94);
 }
 $99 = ((($s)) + 80|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ($100|0)==(0|0);
 if (!($101)) {
  $102 = ((($100)) + 32|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103|0)==(0|0);
  if (!($104)) {
   _free($103);
  }
  _free($100);
 }
 $105 = ((($s)) + 28|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ($106|0)==(0|0);
 if (!($107)) {
  _free($106);
 }
 $108 = ((($s)) + 24|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ($109|0)==(0|0);
 if (!($110)) {
  _free($109);
 }
 $111 = ((($s)) + 40|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ($112|0)==(0|0);
 if (!($113)) {
  _free($112);
 }
 $114 = ((($s)) + 52|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = ($115|0)==(0|0);
 if (!($116)) {
  _free($115);
 }
 $117 = ((($s)) + 120|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ($118|0)==(0|0);
 if (!($119)) {
  $120 = ((($118)) + 4|0);
  $121 = ((($118)) + 8|0);
  $i$0$i = 0;
  while(1) {
   $122 = HEAP32[$120>>2]|0;
   $123 = ($i$0$i>>>0)<($122>>>0);
   if (!($123)) {
    break;
   }
   $124 = HEAP32[$121>>2]|0;
   $125 = (($124) + ($i$0$i<<3)|0);
   $126 = HEAP32[$125>>2]|0;
   _free($126);
   $127 = (($i$0$i) + 1)|0;
   $i$0$i = $127;
  }
  $128 = HEAP32[$121>>2]|0;
  _free($128);
  _free($118);
 }
 $129 = ((($s)) + 124|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = ($130|0)==(0|0);
 if (!($131)) {
  $132 = ((($130)) + 20|0);
  $133 = HEAP32[$132>>2]|0;
  _free($133);
  $134 = ((($130)) + 16|0);
  $135 = HEAP32[$134>>2]|0;
  _free($135);
  $136 = ((($130)) + 24|0);
  $137 = HEAP32[$136>>2]|0;
  _free($137);
  _free($130);
 }
 $138 = ((($s)) + 128|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = ($139|0)==(0|0);
 if (!($140)) {
  $141 = ((($139)) + 20|0);
  $142 = HEAP32[$141>>2]|0;
  _free($142);
  $143 = ((($139)) + 16|0);
  $144 = HEAP32[$143>>2]|0;
  _free($144);
  $145 = ((($139)) + 24|0);
  $146 = HEAP32[$145>>2]|0;
  _free($146);
  _free($139);
 }
 _free($s);
 return;
}
function _cram_read_container($fd) {
 $fd = $fd|0;
 var $$ = 0, $$0 = 0, $$0$i3 = 0, $$13 = 0, $$mask = 0, $$mask1 = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $c2 = 0, $crc = 0, $i$0 = 0, $i$i = 0, $i$i4 = 0, $i32 = 0, $len = 0, $rd$0 = 0, $rd$1 = 0, $rd$2 = 0, $rd$3 = 0, $rd$4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 352|0;
 $i$i4 = sp + 372|0;
 $i$i = sp + 368|0;
 $c2 = sp;
 $crc = sp + 364|0;
 $len = sp + 360|0;
 $i32 = sp + 356|0;
 HEAP32[$crc>>2] = 0;
 $0 = ((($fd)) + 32|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($fd)) + 34644|0);
 HEAP32[$1>>2] = 0;
 _memset(($c2|0),0,352)|0;
 $2 = ((($fd)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $$mask = $3 & -256;
 $4 = ($$mask|0)==(256);
 if ($4) {
  $5 = (_itf8_decode_crc($fd,$c2,$crc)|0);
  $6 = ($5|0)==(-1);
  if ($6) {
   $7 = ((($fd)) + 34660|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)!=(0);
   $10 = $9 ? 1 : 2;
   HEAP32[$1>>2] = $10;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $rd$0 = $5;
  }
 } else {
  $11 = HEAP32[$fd>>2]|0;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($11)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) - ($15))|0;
  $17 = ($16>>>0)>(4);
  $18 = $15;
  $$ = $17 ? 4 : $16;
  _memcpy(($i$i|0),($18|0),($$|0))|0;
  $19 = HEAP32[$14>>2]|0;
  $20 = (($19) + ($$)|0);
  HEAP32[$14>>2] = $20;
  $21 = ($$|0)==(4);
  if (!($21)) {
   $22 = (_hread2($11,$i$i,4,$$)|0);
   $23 = ($22|0)==(4);
   if (!($23)) {
    $24 = HEAP32[$2>>2]|0;
    $25 = ($24|0)==(512);
    if ($25) {
     HEAP32[$1>>2] = 1;
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    } else {
     $26 = ((($fd)) + 34660|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)!=(0);
     $29 = $28 ? 1 : 2;
     HEAP32[$1>>2] = $29;
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
  $30 = HEAP32[$i$i>>2]|0;
  HEAP32[$c2>>2] = $30;
  HEAP32[$len>>2] = $30;
  $31 = (_crc32(0,$len,4)|0);
  HEAP32[$crc>>2] = $31;
  $rd$0 = 4;
 }
 $32 = ((($c2)) + 4|0);
 $33 = (_itf8_decode_crc($fd,$32,$crc)|0);
 $34 = ($33|0)==(-1);
 if ($34) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $35 = ((($c2)) + 8|0);
 $36 = (_itf8_decode_crc($fd,$35,$crc)|0);
 $37 = ($36|0)==(-1);
 if ($37) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $38 = ((($c2)) + 12|0);
 $39 = (_itf8_decode_crc($fd,$38,$crc)|0);
 $40 = ($39|0)==(-1);
 if ($40) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $41 = ((($c2)) + 32|0);
 $42 = (_itf8_decode_crc($fd,$41,$crc)|0);
 $43 = ($42|0)==(-1);
 if ($43) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $44 = (($rd$0) + ($33))|0;
 $45 = (($44) + ($36))|0;
 $46 = (($45) + ($39))|0;
 $47 = (($46) + ($42))|0;
 $48 = HEAP32[$2>>2]|0;
 $$mask1 = $48 & -256;
 $49 = ($$mask1|0)==(256);
 do {
  if ($49) {
   $50 = ((($c2)) + 16|0);
   ;HEAP32[$50>>2]=0|0;HEAP32[$50+4>>2]=0|0;HEAP32[$50+8>>2]=0|0;HEAP32[$50+12>>2]=0|0;
   $rd$2 = $47;
  } else {
   $51 = $48 >> 8;
   $52 = ($51|0)>(2);
   do {
    if ($52) {
     $53 = ((($c2)) + 16|0);
     $54 = (_ltf8_decode_crc($fd,$53,$crc)|0);
     $55 = ($54|0)==(-1);
     if ($55) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$pn = $54;
     }
    } else {
     $56 = (_itf8_decode_crc($fd,$i32,$crc)|0);
     $57 = ($56|0)==(-1);
     if ($57) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     } else {
      $58 = HEAP32[$i32>>2]|0;
      $59 = ($58|0)<(0);
      $60 = $59 << 31 >> 31;
      $61 = ((($c2)) + 16|0);
      $62 = $61;
      $63 = $62;
      HEAP32[$63>>2] = $58;
      $64 = (($62) + 4)|0;
      $65 = $64;
      HEAP32[$65>>2] = $60;
      $$pn = $56;
      break;
     }
    }
   } while(0);
   $66 = ((($c2)) + 24|0);
   $67 = (_ltf8_decode_crc($fd,$66,$crc)|0);
   $68 = ($67|0)==(-1);
   if ($68) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $rd$1 = (($47) + ($$pn))|0;
    $69 = (($rd$1) + ($67))|0;
    $rd$2 = $69;
    break;
   }
  }
 } while(0);
 $70 = ((($c2)) + 36|0);
 $71 = (_itf8_decode_crc($fd,$70,$crc)|0);
 $72 = ($71|0)==(-1);
 if ($72) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $73 = ((($c2)) + 40|0);
 $74 = (_itf8_decode_crc($fd,$73,$crc)|0);
 $75 = ($74|0)==(-1);
 if ($75) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $76 = (($rd$2) + ($71))|0;
 $77 = (($76) + ($74))|0;
 $78 = (_malloc(352)|0);
 $79 = ($78|0)==(0|0);
 if ($79) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $80 = ((($78)) + -4|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $81 & 3;
 $83 = ($82|0)==(0);
 if (!($83)) {
  _memset(($78|0),0,352)|0;
 }
 _memcpy(($78|0),($c2|0),352)|0;
 $84 = ((($78)) + 40|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $85 << 2;
 $87 = (_malloc($86)|0);
 $88 = ((($78)) + 44|0);
 HEAP32[$88>>2] = $87;
 $89 = ($87|0)==(0|0);
 if ($89) {
  $90 = HEAP32[$84>>2]|0;
  $91 = ($90|0)==(0);
  if (!($91)) {
   $92 = HEAP32[6773]|0;
   $93 = ($92|0)==(0|0);
   if ($93) {
    $$0$i3 = 27136;
   } else {
    $94 = (_pthread_self()|0);
    $95 = ((($94)) + 64|0);
    $96 = HEAP32[$95>>2]|0;
    $$0$i3 = $96;
   }
   $97 = HEAP32[$$0$i3>>2]|0;
   HEAP32[$0>>2] = $97;
   _cram_free_container($78);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $i$0 = 0;$rd$3 = $77;
 while(1) {
  $98 = HEAP32[$84>>2]|0;
  $99 = ($i$0|0)<($98|0);
  if (!($99)) {
   break;
  }
  $100 = HEAP32[$88>>2]|0;
  $101 = (($100) + ($i$0<<2)|0);
  $102 = (_itf8_decode_crc($fd,$101,$crc)|0);
  $103 = ($102|0)==(-1);
  if ($103) {
   label = 35;
   break;
  }
  $104 = (($rd$3) + ($102))|0;
  $105 = (($i$0) + 1)|0;
  $i$0 = $105;$rd$3 = $104;
 }
 if ((label|0) == 35) {
  _cram_free_container($78);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $106 = HEAP32[$2>>2]|0;
 $107 = $106 >> 8;
 $108 = ($107|0)>(2);
 do {
  if ($108) {
   $109 = ((($78)) + 348|0);
   $110 = HEAP32[$fd>>2]|0;
   $111 = ((($110)) + 8|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = ((($110)) + 4|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (($112) - ($114))|0;
   $116 = ($115>>>0)>(4);
   $117 = $114;
   $$13 = $116 ? 4 : $115;
   _memcpy(($i$i4|0),($117|0),($$13|0))|0;
   $118 = HEAP32[$113>>2]|0;
   $119 = (($118) + ($$13)|0);
   HEAP32[$113>>2] = $119;
   $120 = ($$13|0)==(4);
   if (!($120)) {
    $121 = (_hread2($110,$i$i4,4,$$13)|0);
    $122 = ($121|0)==(4);
    if (!($122)) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $123 = HEAP32[$i$i4>>2]|0;
   HEAP32[$109>>2] = $123;
   $124 = HEAP32[$crc>>2]|0;
   $125 = HEAP32[$109>>2]|0;
   $126 = ($124|0)==($125|0);
   if ($126) {
    $127 = (($rd$3) + 4)|0;
    $$pre = HEAP32[$84>>2]|0;
    $132 = $$pre;$rd$4 = $127;
    break;
   }
   _fprintf(9772,20065,$vararg_buffer);
   _cram_free_container($78);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $132 = $98;$rd$4 = $rd$3;
  }
 } while(0);
 $128 = ((($78)) + 48|0);
 HEAP32[$128>>2] = $rd$4;
 $129 = ((($78)) + 96|0);
 HEAP32[$129>>2] = 0;
 $130 = ((($78)) + 64|0);
 HEAP32[$130>>2] = 0;
 $131 = ((($78)) + 60|0);
 HEAP32[$131>>2] = $132;
 $133 = ((($78)) + 84|0);
 HEAP32[$133>>2] = 0;
 $134 = ((($78)) + 72|0);
 HEAP32[$134>>2] = 0;
 $135 = ((($78)) + 68|0);
 HEAP32[$135>>2] = 0;
 $136 = ((($78)) + 4|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = ($137|0)==(-2);
 if ($138) {
  $139 = ((($78)) + 116|0);
  HEAP32[$139>>2] = 1;
  $140 = ((($fd)) + 34652|0);
  HEAP32[$140>>2] = 1;
 }
 $141 = ((($78)) + 32|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = ($142|0)==(0);
 if ($143) {
  $144 = HEAP32[$136>>2]|0;
  $145 = ($144|0)==(-1);
  if ($145) {
   $146 = ((($78)) + 8|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = ($147|0)==(4542278);
   $150 = $148;
  } else {
   $150 = 0;
  }
 } else {
  $150 = 0;
 }
 $149 = $150&1;
 $151 = ((($fd)) + 34660|0);
 HEAP32[$151>>2] = $149;
 $$0 = $78;
 STACKTOP = sp;return ($$0|0);
}
function _cram_flush_container2($fd,$c) {
 $fd = $fd|0;
 $c = $c|0;
 var $$ = 0, $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i1 = 0, $$0$i$i2$i = 0, $$0$i$i3 = 0, $$cast = 0, $$in = 0, $$mask$i = 0, $$mask1$i = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre12 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0;
 var $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0;
 var $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0;
 var $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0;
 var $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0;
 var $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0;
 var $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf$0$i = 0, $buf_a$i = 0, $buffer$0$i = 0, $buffer$0$i$i = 0, $cp$0$i = 0, $cp$1$i = 0, $cp$3$i = 0, $cp$4$i = 0, $cp$5$i = 0, $i$0 = 0, $i$0$i = 0, $j$0 = 0, $remaining$0$i$i$i = 0, $src$0$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf_a$i = sp;
 $0 = ((($c)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = ((($c)) + 96|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $6 = ((($c)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7*5)|0;
 $9 = (($8) + 55)|0;
 $10 = ($9|0)>(1023);
 if ($10) {
  $11 = (_malloc($9)|0);
  $buf$0$i = $11;
 } else {
  $buf$0$i = $buf_a$i;
 }
 $12 = ((($fd)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $$mask$i = $13 & -256;
 $14 = ($$mask$i|0)==(256);
 $15 = HEAP32[$c>>2]|0;
 if ($14) {
  $16 = ($15>>>0)>(127);
  do {
   if ($16) {
    $18 = ($15>>>0)>(16383);
    if (!($18)) {
     $19 = $15 >>> 8;
     $20 = $19 | 128;
     $21 = $20&255;
     HEAP8[$buf$0$i>>0] = $21;
     $22 = HEAP32[$c>>2]|0;
     $23 = $22&255;
     $24 = ((($buf$0$i)) + 1|0);
     HEAP8[$24>>0] = $23;
     $71 = 2;
     break;
    }
    $25 = ($15>>>0)>(2097151);
    if (!($25)) {
     $26 = $15 >>> 16;
     $27 = $26 | 192;
     $28 = $27&255;
     HEAP8[$buf$0$i>>0] = $28;
     $29 = HEAP32[$c>>2]|0;
     $30 = $29 >>> 8;
     $31 = $30&255;
     $32 = ((($buf$0$i)) + 1|0);
     HEAP8[$32>>0] = $31;
     $33 = HEAP32[$c>>2]|0;
     $34 = $33&255;
     $35 = ((($buf$0$i)) + 2|0);
     HEAP8[$35>>0] = $34;
     $71 = 3;
     break;
    }
    $36 = ($15>>>0)>(268435455);
    if ($36) {
     $51 = $15 >>> 28;
     $52 = $51 | 240;
     $53 = $52&255;
     HEAP8[$buf$0$i>>0] = $53;
     $54 = HEAP32[$c>>2]|0;
     $55 = $54 >>> 20;
     $56 = $55&255;
     $57 = ((($buf$0$i)) + 1|0);
     HEAP8[$57>>0] = $56;
     $58 = HEAP32[$c>>2]|0;
     $59 = $58 >>> 12;
     $60 = $59&255;
     $61 = ((($buf$0$i)) + 2|0);
     HEAP8[$61>>0] = $60;
     $62 = HEAP32[$c>>2]|0;
     $63 = $62 >>> 4;
     $64 = $63&255;
     $65 = ((($buf$0$i)) + 3|0);
     HEAP8[$65>>0] = $64;
     $66 = HEAP32[$c>>2]|0;
     $67 = $66 & 15;
     $68 = $67&255;
     $69 = ((($buf$0$i)) + 4|0);
     HEAP8[$69>>0] = $68;
     $71 = 5;
     break;
    } else {
     $37 = $15 >>> 24;
     $38 = $37 | 224;
     $39 = $38&255;
     HEAP8[$buf$0$i>>0] = $39;
     $40 = HEAP32[$c>>2]|0;
     $41 = $40 >>> 16;
     $42 = $41&255;
     $43 = ((($buf$0$i)) + 1|0);
     HEAP8[$43>>0] = $42;
     $44 = HEAP32[$c>>2]|0;
     $45 = $44 >>> 8;
     $46 = $45&255;
     $47 = ((($buf$0$i)) + 2|0);
     HEAP8[$47>>0] = $46;
     $48 = HEAP32[$c>>2]|0;
     $49 = $48&255;
     $50 = ((($buf$0$i)) + 3|0);
     HEAP8[$50>>0] = $49;
     $71 = 4;
     break;
    }
   } else {
    $17 = $15&255;
    HEAP8[$buf$0$i>>0] = $17;
    $71 = 1;
   }
  } while(0);
  $70 = (($buf$0$i) + ($71)|0);
  $cp$0$i = $70;
 } else {
  HEAP32[$buf$0$i>>2] = $15;
  $72 = ((($buf$0$i)) + 4|0);
  $cp$0$i = $72;
 }
 $73 = ((($c)) + 116|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74|0)==(0);
 if ($75) {
  $80 = ((($c)) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($81>>>0)>(127);
  do {
   if ($82) {
    $84 = ($81>>>0)>(16383);
    if (!($84)) {
     $85 = $81 >>> 8;
     $86 = $85 | 128;
     $87 = $86&255;
     HEAP8[$cp$0$i>>0] = $87;
     $88 = HEAP32[$80>>2]|0;
     $89 = $88&255;
     $90 = ((($cp$0$i)) + 1|0);
     HEAP8[$90>>0] = $89;
     $137 = 2;
     break;
    }
    $91 = ($81>>>0)>(2097151);
    if (!($91)) {
     $92 = $81 >>> 16;
     $93 = $92 | 192;
     $94 = $93&255;
     HEAP8[$cp$0$i>>0] = $94;
     $95 = HEAP32[$80>>2]|0;
     $96 = $95 >>> 8;
     $97 = $96&255;
     $98 = ((($cp$0$i)) + 1|0);
     HEAP8[$98>>0] = $97;
     $99 = HEAP32[$80>>2]|0;
     $100 = $99&255;
     $101 = ((($cp$0$i)) + 2|0);
     HEAP8[$101>>0] = $100;
     $137 = 3;
     break;
    }
    $102 = ($81>>>0)>(268435455);
    if ($102) {
     $117 = $81 >>> 28;
     $118 = $117 | 240;
     $119 = $118&255;
     HEAP8[$cp$0$i>>0] = $119;
     $120 = HEAP32[$80>>2]|0;
     $121 = $120 >>> 20;
     $122 = $121&255;
     $123 = ((($cp$0$i)) + 1|0);
     HEAP8[$123>>0] = $122;
     $124 = HEAP32[$80>>2]|0;
     $125 = $124 >>> 12;
     $126 = $125&255;
     $127 = ((($cp$0$i)) + 2|0);
     HEAP8[$127>>0] = $126;
     $128 = HEAP32[$80>>2]|0;
     $129 = $128 >>> 4;
     $130 = $129&255;
     $131 = ((($cp$0$i)) + 3|0);
     HEAP8[$131>>0] = $130;
     $132 = HEAP32[$80>>2]|0;
     $133 = $132 & 15;
     $134 = $133&255;
     $135 = ((($cp$0$i)) + 4|0);
     HEAP8[$135>>0] = $134;
     $137 = 5;
     break;
    } else {
     $103 = $81 >>> 24;
     $104 = $103 | 224;
     $105 = $104&255;
     HEAP8[$cp$0$i>>0] = $105;
     $106 = HEAP32[$80>>2]|0;
     $107 = $106 >>> 16;
     $108 = $107&255;
     $109 = ((($cp$0$i)) + 1|0);
     HEAP8[$109>>0] = $108;
     $110 = HEAP32[$80>>2]|0;
     $111 = $110 >>> 8;
     $112 = $111&255;
     $113 = ((($cp$0$i)) + 2|0);
     HEAP8[$113>>0] = $112;
     $114 = HEAP32[$80>>2]|0;
     $115 = $114&255;
     $116 = ((($cp$0$i)) + 3|0);
     HEAP8[$116>>0] = $115;
     $137 = 4;
     break;
    }
   } else {
    $83 = $81&255;
    HEAP8[$cp$0$i>>0] = $83;
    $137 = 1;
   }
  } while(0);
  $136 = (($cp$0$i) + ($137)|0);
  $138 = ((($c)) + 8|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = ($139>>>0)>(127);
  do {
   if ($140) {
    $142 = ($139>>>0)>(16383);
    if (!($142)) {
     $143 = $139 >>> 8;
     $144 = $143 | 128;
     $145 = $144&255;
     HEAP8[$136>>0] = $145;
     $146 = HEAP32[$138>>2]|0;
     $147 = $146&255;
     $148 = ((($136)) + 1|0);
     HEAP8[$148>>0] = $147;
     $195 = 2;
     break;
    }
    $149 = ($139>>>0)>(2097151);
    if (!($149)) {
     $150 = $139 >>> 16;
     $151 = $150 | 192;
     $152 = $151&255;
     HEAP8[$136>>0] = $152;
     $153 = HEAP32[$138>>2]|0;
     $154 = $153 >>> 8;
     $155 = $154&255;
     $156 = ((($136)) + 1|0);
     HEAP8[$156>>0] = $155;
     $157 = HEAP32[$138>>2]|0;
     $158 = $157&255;
     $159 = ((($136)) + 2|0);
     HEAP8[$159>>0] = $158;
     $195 = 3;
     break;
    }
    $160 = ($139>>>0)>(268435455);
    if ($160) {
     $175 = $139 >>> 28;
     $176 = $175 | 240;
     $177 = $176&255;
     HEAP8[$136>>0] = $177;
     $178 = HEAP32[$138>>2]|0;
     $179 = $178 >>> 20;
     $180 = $179&255;
     $181 = ((($136)) + 1|0);
     HEAP8[$181>>0] = $180;
     $182 = HEAP32[$138>>2]|0;
     $183 = $182 >>> 12;
     $184 = $183&255;
     $185 = ((($136)) + 2|0);
     HEAP8[$185>>0] = $184;
     $186 = HEAP32[$138>>2]|0;
     $187 = $186 >>> 4;
     $188 = $187&255;
     $189 = ((($136)) + 3|0);
     HEAP8[$189>>0] = $188;
     $190 = HEAP32[$138>>2]|0;
     $191 = $190 & 15;
     $192 = $191&255;
     $193 = ((($136)) + 4|0);
     HEAP8[$193>>0] = $192;
     $195 = 5;
     break;
    } else {
     $161 = $139 >>> 24;
     $162 = $161 | 224;
     $163 = $162&255;
     HEAP8[$136>>0] = $163;
     $164 = HEAP32[$138>>2]|0;
     $165 = $164 >>> 16;
     $166 = $165&255;
     $167 = ((($136)) + 1|0);
     HEAP8[$167>>0] = $166;
     $168 = HEAP32[$138>>2]|0;
     $169 = $168 >>> 8;
     $170 = $169&255;
     $171 = ((($136)) + 2|0);
     HEAP8[$171>>0] = $170;
     $172 = HEAP32[$138>>2]|0;
     $173 = $172&255;
     $174 = ((($136)) + 3|0);
     HEAP8[$174>>0] = $173;
     $195 = 4;
     break;
    }
   } else {
    $141 = $139&255;
    HEAP8[$136>>0] = $141;
    $195 = 1;
   }
  } while(0);
  $194 = (($136) + ($195)|0);
  $196 = ((($c)) + 12|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = ($197>>>0)>(127);
  do {
   if ($198) {
    $200 = ($197>>>0)>(16383);
    if (!($200)) {
     $201 = $197 >>> 8;
     $202 = $201 | 128;
     $203 = $202&255;
     HEAP8[$194>>0] = $203;
     $204 = HEAP32[$196>>2]|0;
     $205 = $204&255;
     $206 = ((($194)) + 1|0);
     HEAP8[$206>>0] = $205;
     $253 = 2;
     break;
    }
    $207 = ($197>>>0)>(2097151);
    if (!($207)) {
     $208 = $197 >>> 16;
     $209 = $208 | 192;
     $210 = $209&255;
     HEAP8[$194>>0] = $210;
     $211 = HEAP32[$196>>2]|0;
     $212 = $211 >>> 8;
     $213 = $212&255;
     $214 = ((($194)) + 1|0);
     HEAP8[$214>>0] = $213;
     $215 = HEAP32[$196>>2]|0;
     $216 = $215&255;
     $217 = ((($194)) + 2|0);
     HEAP8[$217>>0] = $216;
     $253 = 3;
     break;
    }
    $218 = ($197>>>0)>(268435455);
    if ($218) {
     $233 = $197 >>> 28;
     $234 = $233 | 240;
     $235 = $234&255;
     HEAP8[$194>>0] = $235;
     $236 = HEAP32[$196>>2]|0;
     $237 = $236 >>> 20;
     $238 = $237&255;
     $239 = ((($194)) + 1|0);
     HEAP8[$239>>0] = $238;
     $240 = HEAP32[$196>>2]|0;
     $241 = $240 >>> 12;
     $242 = $241&255;
     $243 = ((($194)) + 2|0);
     HEAP8[$243>>0] = $242;
     $244 = HEAP32[$196>>2]|0;
     $245 = $244 >>> 4;
     $246 = $245&255;
     $247 = ((($194)) + 3|0);
     HEAP8[$247>>0] = $246;
     $248 = HEAP32[$196>>2]|0;
     $249 = $248 & 15;
     $250 = $249&255;
     $251 = ((($194)) + 4|0);
     HEAP8[$251>>0] = $250;
     $253 = 5;
     break;
    } else {
     $219 = $197 >>> 24;
     $220 = $219 | 224;
     $221 = $220&255;
     HEAP8[$194>>0] = $221;
     $222 = HEAP32[$196>>2]|0;
     $223 = $222 >>> 16;
     $224 = $223&255;
     $225 = ((($194)) + 1|0);
     HEAP8[$225>>0] = $224;
     $226 = HEAP32[$196>>2]|0;
     $227 = $226 >>> 8;
     $228 = $227&255;
     $229 = ((($194)) + 2|0);
     HEAP8[$229>>0] = $228;
     $230 = HEAP32[$196>>2]|0;
     $231 = $230&255;
     $232 = ((($194)) + 3|0);
     HEAP8[$232>>0] = $231;
     $253 = 4;
     break;
    }
   } else {
    $199 = $197&255;
    HEAP8[$194>>0] = $199;
    $253 = 1;
   }
  } while(0);
  $252 = (($194) + ($253)|0);
  $cp$1$i = $252;
 } else {
  $76 = ((($cp$0$i)) + 4|0);
  HEAP8[$cp$0$i>>0]=-1&255;HEAP8[$cp$0$i+1>>0]=(-1>>8)&255;HEAP8[$cp$0$i+2>>0]=(-1>>16)&255;HEAP8[$cp$0$i+3>>0]=-1>>24;
  HEAP8[$76>>0] = 14;
  $77 = ((($cp$0$i)) + 5|0);
  HEAP8[$77>>0] = 0;
  $78 = ((($cp$0$i)) + 6|0);
  HEAP8[$78>>0] = 0;
  $79 = ((($cp$0$i)) + 7|0);
  $cp$1$i = $79;
 }
 $254 = ((($c)) + 32|0);
 $255 = HEAP32[$254>>2]|0;
 $256 = ($255>>>0)>(127);
 do {
  if ($256) {
   $258 = ($255>>>0)>(16383);
   if (!($258)) {
    $259 = $255 >>> 8;
    $260 = $259 | 128;
    $261 = $260&255;
    HEAP8[$cp$1$i>>0] = $261;
    $262 = HEAP32[$254>>2]|0;
    $263 = $262&255;
    $264 = ((($cp$1$i)) + 1|0);
    HEAP8[$264>>0] = $263;
    $311 = 2;
    break;
   }
   $265 = ($255>>>0)>(2097151);
   if (!($265)) {
    $266 = $255 >>> 16;
    $267 = $266 | 192;
    $268 = $267&255;
    HEAP8[$cp$1$i>>0] = $268;
    $269 = HEAP32[$254>>2]|0;
    $270 = $269 >>> 8;
    $271 = $270&255;
    $272 = ((($cp$1$i)) + 1|0);
    HEAP8[$272>>0] = $271;
    $273 = HEAP32[$254>>2]|0;
    $274 = $273&255;
    $275 = ((($cp$1$i)) + 2|0);
    HEAP8[$275>>0] = $274;
    $311 = 3;
    break;
   }
   $276 = ($255>>>0)>(268435455);
   if ($276) {
    $291 = $255 >>> 28;
    $292 = $291 | 240;
    $293 = $292&255;
    HEAP8[$cp$1$i>>0] = $293;
    $294 = HEAP32[$254>>2]|0;
    $295 = $294 >>> 20;
    $296 = $295&255;
    $297 = ((($cp$1$i)) + 1|0);
    HEAP8[$297>>0] = $296;
    $298 = HEAP32[$254>>2]|0;
    $299 = $298 >>> 12;
    $300 = $299&255;
    $301 = ((($cp$1$i)) + 2|0);
    HEAP8[$301>>0] = $300;
    $302 = HEAP32[$254>>2]|0;
    $303 = $302 >>> 4;
    $304 = $303&255;
    $305 = ((($cp$1$i)) + 3|0);
    HEAP8[$305>>0] = $304;
    $306 = HEAP32[$254>>2]|0;
    $307 = $306 & 15;
    $308 = $307&255;
    $309 = ((($cp$1$i)) + 4|0);
    HEAP8[$309>>0] = $308;
    $311 = 5;
    break;
   } else {
    $277 = $255 >>> 24;
    $278 = $277 | 224;
    $279 = $278&255;
    HEAP8[$cp$1$i>>0] = $279;
    $280 = HEAP32[$254>>2]|0;
    $281 = $280 >>> 16;
    $282 = $281&255;
    $283 = ((($cp$1$i)) + 1|0);
    HEAP8[$283>>0] = $282;
    $284 = HEAP32[$254>>2]|0;
    $285 = $284 >>> 8;
    $286 = $285&255;
    $287 = ((($cp$1$i)) + 2|0);
    HEAP8[$287>>0] = $286;
    $288 = HEAP32[$254>>2]|0;
    $289 = $288&255;
    $290 = ((($cp$1$i)) + 3|0);
    HEAP8[$290>>0] = $289;
    $311 = 4;
    break;
   }
  } else {
   $257 = $255&255;
   HEAP8[$cp$1$i>>0] = $257;
   $311 = 1;
  }
 } while(0);
 $310 = (($cp$1$i) + ($311)|0);
 $312 = HEAP32[$12>>2]|0;
 $$mask1$i = $312 & -256;
 $313 = ($$mask1$i|0)==(512);
 if ($313) {
  $314 = ((($c)) + 16|0);
  $315 = $314;
  $316 = $315;
  $317 = HEAP32[$316>>2]|0;
  $318 = (($315) + 4)|0;
  $319 = $318;
  $320 = HEAP32[$319>>2]|0;
  $321 = ($320>>>0)>(0);
  $322 = ($317>>>0)>(127);
  $323 = ($320|0)==(0);
  $324 = $323 & $322;
  $325 = $321 | $324;
  do {
   if ($325) {
    $327 = ($320>>>0)>(0);
    $328 = ($317>>>0)>(16383);
    $329 = ($320|0)==(0);
    $330 = $329 & $328;
    $331 = $327 | $330;
    if (!($331)) {
     $332 = (_bitshift64Lshr(($317|0),($320|0),8)|0);
     $333 = tempRet0;
     $334 = $332 | 128;
     $335 = $334&255;
     HEAP8[$310>>0] = $335;
     $336 = $314;
     $337 = $336;
     $338 = HEAP32[$337>>2]|0;
     $339 = (($336) + 4)|0;
     $340 = $339;
     $341 = HEAP32[$340>>2]|0;
     $342 = $338&255;
     $343 = ((($310)) + 1|0);
     HEAP8[$343>>0] = $342;
     $452 = 2;
     break;
    }
    $344 = ($320>>>0)>(0);
    $345 = ($317>>>0)>(2097151);
    $346 = ($320|0)==(0);
    $347 = $346 & $345;
    $348 = $344 | $347;
    if (!($348)) {
     $349 = (_bitshift64Lshr(($317|0),($320|0),16)|0);
     $350 = tempRet0;
     $351 = $349 | 192;
     $352 = $351&255;
     HEAP8[$310>>0] = $352;
     $353 = $314;
     $354 = $353;
     $355 = HEAP32[$354>>2]|0;
     $356 = (($353) + 4)|0;
     $357 = $356;
     $358 = HEAP32[$357>>2]|0;
     $359 = (_bitshift64Lshr(($355|0),($358|0),8)|0);
     $360 = tempRet0;
     $361 = $359&255;
     $362 = ((($310)) + 1|0);
     HEAP8[$362>>0] = $361;
     $363 = $314;
     $364 = $363;
     $365 = HEAP32[$364>>2]|0;
     $366 = (($363) + 4)|0;
     $367 = $366;
     $368 = HEAP32[$367>>2]|0;
     $369 = $365&255;
     $370 = ((($310)) + 2|0);
     HEAP8[$370>>0] = $369;
     $452 = 3;
     break;
    }
    $371 = ($320>>>0)>(0);
    $372 = ($317>>>0)>(268435455);
    $373 = ($320|0)==(0);
    $374 = $373 & $372;
    $375 = $371 | $374;
    if ($375) {
     $408 = (_bitshift64Lshr(($317|0),($320|0),28)|0);
     $409 = tempRet0;
     $410 = $408 | 240;
     $411 = $410&255;
     HEAP8[$310>>0] = $411;
     $412 = $314;
     $413 = $412;
     $414 = HEAP32[$413>>2]|0;
     $415 = (($412) + 4)|0;
     $416 = $415;
     $417 = HEAP32[$416>>2]|0;
     $418 = (_bitshift64Lshr(($414|0),($417|0),20)|0);
     $419 = tempRet0;
     $420 = $418&255;
     $421 = ((($310)) + 1|0);
     HEAP8[$421>>0] = $420;
     $422 = $314;
     $423 = $422;
     $424 = HEAP32[$423>>2]|0;
     $425 = (($422) + 4)|0;
     $426 = $425;
     $427 = HEAP32[$426>>2]|0;
     $428 = (_bitshift64Lshr(($424|0),($427|0),12)|0);
     $429 = tempRet0;
     $430 = $428&255;
     $431 = ((($310)) + 2|0);
     HEAP8[$431>>0] = $430;
     $432 = $314;
     $433 = $432;
     $434 = HEAP32[$433>>2]|0;
     $435 = (($432) + 4)|0;
     $436 = $435;
     $437 = HEAP32[$436>>2]|0;
     $438 = (_bitshift64Lshr(($434|0),($437|0),4)|0);
     $439 = tempRet0;
     $440 = $438&255;
     $441 = ((($310)) + 3|0);
     HEAP8[$441>>0] = $440;
     $442 = $314;
     $443 = $442;
     $444 = HEAP32[$443>>2]|0;
     $445 = (($442) + 4)|0;
     $446 = $445;
     $447 = HEAP32[$446>>2]|0;
     $448 = $444&255;
     $449 = $448 & 15;
     $450 = ((($310)) + 4|0);
     HEAP8[$450>>0] = $449;
     $452 = 5;
     break;
    } else {
     $376 = (_bitshift64Lshr(($317|0),($320|0),24)|0);
     $377 = tempRet0;
     $378 = $376 | 224;
     $379 = $378&255;
     HEAP8[$310>>0] = $379;
     $380 = $314;
     $381 = $380;
     $382 = HEAP32[$381>>2]|0;
     $383 = (($380) + 4)|0;
     $384 = $383;
     $385 = HEAP32[$384>>2]|0;
     $386 = (_bitshift64Lshr(($382|0),($385|0),16)|0);
     $387 = tempRet0;
     $388 = $386&255;
     $389 = ((($310)) + 1|0);
     HEAP8[$389>>0] = $388;
     $390 = $314;
     $391 = $390;
     $392 = HEAP32[$391>>2]|0;
     $393 = (($390) + 4)|0;
     $394 = $393;
     $395 = HEAP32[$394>>2]|0;
     $396 = (_bitshift64Lshr(($392|0),($395|0),8)|0);
     $397 = tempRet0;
     $398 = $396&255;
     $399 = ((($310)) + 2|0);
     HEAP8[$399>>0] = $398;
     $400 = $314;
     $401 = $400;
     $402 = HEAP32[$401>>2]|0;
     $403 = (($400) + 4)|0;
     $404 = $403;
     $405 = HEAP32[$404>>2]|0;
     $406 = $402&255;
     $407 = ((($310)) + 3|0);
     HEAP8[$407>>0] = $406;
     $452 = 4;
     break;
    }
   } else {
    $326 = $317&255;
    HEAP8[$310>>0] = $326;
    $452 = 1;
   }
  } while(0);
  $451 = (($310) + ($452)|0);
  $453 = ((($c)) + 24|0);
  $454 = $453;
  $455 = $454;
  $456 = HEAP32[$455>>2]|0;
  $457 = (($454) + 4)|0;
  $458 = $457;
  $459 = HEAP32[$458>>2]|0;
  $460 = (_ltf8_put($451,$456,$459)|0);
  $461 = (($451) + ($460)|0);
  $cp$3$i = $461;
 } else {
  $462 = $312 >> 8;
  $463 = ($462|0)>(2);
  if ($463) {
   $464 = ((($c)) + 16|0);
   $465 = $464;
   $466 = $465;
   $467 = HEAP32[$466>>2]|0;
   $468 = (($465) + 4)|0;
   $469 = $468;
   $470 = HEAP32[$469>>2]|0;
   $471 = (_ltf8_put($310,$467,$470)|0);
   $472 = (($310) + ($471)|0);
   $473 = ((($c)) + 24|0);
   $474 = $473;
   $475 = $474;
   $476 = HEAP32[$475>>2]|0;
   $477 = (($474) + 4)|0;
   $478 = $477;
   $479 = HEAP32[$478>>2]|0;
   $480 = (_ltf8_put($472,$476,$479)|0);
   $481 = (($472) + ($480)|0);
   $cp$3$i = $481;
  } else {
   $cp$3$i = $310;
  }
 }
 $482 = ((($c)) + 36|0);
 $483 = HEAP32[$482>>2]|0;
 $484 = ($483>>>0)>(127);
 do {
  if ($484) {
   $486 = ($483>>>0)>(16383);
   if (!($486)) {
    $487 = $483 >>> 8;
    $488 = $487 | 128;
    $489 = $488&255;
    HEAP8[$cp$3$i>>0] = $489;
    $490 = HEAP32[$482>>2]|0;
    $491 = $490&255;
    $492 = ((($cp$3$i)) + 1|0);
    HEAP8[$492>>0] = $491;
    $539 = 2;
    break;
   }
   $493 = ($483>>>0)>(2097151);
   if (!($493)) {
    $494 = $483 >>> 16;
    $495 = $494 | 192;
    $496 = $495&255;
    HEAP8[$cp$3$i>>0] = $496;
    $497 = HEAP32[$482>>2]|0;
    $498 = $497 >>> 8;
    $499 = $498&255;
    $500 = ((($cp$3$i)) + 1|0);
    HEAP8[$500>>0] = $499;
    $501 = HEAP32[$482>>2]|0;
    $502 = $501&255;
    $503 = ((($cp$3$i)) + 2|0);
    HEAP8[$503>>0] = $502;
    $539 = 3;
    break;
   }
   $504 = ($483>>>0)>(268435455);
   if ($504) {
    $519 = $483 >>> 28;
    $520 = $519 | 240;
    $521 = $520&255;
    HEAP8[$cp$3$i>>0] = $521;
    $522 = HEAP32[$482>>2]|0;
    $523 = $522 >>> 20;
    $524 = $523&255;
    $525 = ((($cp$3$i)) + 1|0);
    HEAP8[$525>>0] = $524;
    $526 = HEAP32[$482>>2]|0;
    $527 = $526 >>> 12;
    $528 = $527&255;
    $529 = ((($cp$3$i)) + 2|0);
    HEAP8[$529>>0] = $528;
    $530 = HEAP32[$482>>2]|0;
    $531 = $530 >>> 4;
    $532 = $531&255;
    $533 = ((($cp$3$i)) + 3|0);
    HEAP8[$533>>0] = $532;
    $534 = HEAP32[$482>>2]|0;
    $535 = $534 & 15;
    $536 = $535&255;
    $537 = ((($cp$3$i)) + 4|0);
    HEAP8[$537>>0] = $536;
    $539 = 5;
    break;
   } else {
    $505 = $483 >>> 24;
    $506 = $505 | 224;
    $507 = $506&255;
    HEAP8[$cp$3$i>>0] = $507;
    $508 = HEAP32[$482>>2]|0;
    $509 = $508 >>> 16;
    $510 = $509&255;
    $511 = ((($cp$3$i)) + 1|0);
    HEAP8[$511>>0] = $510;
    $512 = HEAP32[$482>>2]|0;
    $513 = $512 >>> 8;
    $514 = $513&255;
    $515 = ((($cp$3$i)) + 2|0);
    HEAP8[$515>>0] = $514;
    $516 = HEAP32[$482>>2]|0;
    $517 = $516&255;
    $518 = ((($cp$3$i)) + 3|0);
    HEAP8[$518>>0] = $517;
    $539 = 4;
    break;
   }
  } else {
   $485 = $483&255;
   HEAP8[$cp$3$i>>0] = $485;
   $539 = 1;
  }
 } while(0);
 $538 = (($cp$3$i) + ($539)|0);
 $540 = HEAP32[$6>>2]|0;
 $541 = ($540>>>0)>(127);
 do {
  if ($541) {
   $543 = ($540>>>0)>(16383);
   if (!($543)) {
    $544 = $540 >>> 8;
    $545 = $544 | 128;
    $546 = $545&255;
    HEAP8[$538>>0] = $546;
    $547 = HEAP32[$6>>2]|0;
    $548 = $547&255;
    $549 = ((($538)) + 1|0);
    HEAP8[$549>>0] = $548;
    $596 = 2;
    break;
   }
   $550 = ($540>>>0)>(2097151);
   if (!($550)) {
    $551 = $540 >>> 16;
    $552 = $551 | 192;
    $553 = $552&255;
    HEAP8[$538>>0] = $553;
    $554 = HEAP32[$6>>2]|0;
    $555 = $554 >>> 8;
    $556 = $555&255;
    $557 = ((($538)) + 1|0);
    HEAP8[$557>>0] = $556;
    $558 = HEAP32[$6>>2]|0;
    $559 = $558&255;
    $560 = ((($538)) + 2|0);
    HEAP8[$560>>0] = $559;
    $596 = 3;
    break;
   }
   $561 = ($540>>>0)>(268435455);
   if ($561) {
    $576 = $540 >>> 28;
    $577 = $576 | 240;
    $578 = $577&255;
    HEAP8[$538>>0] = $578;
    $579 = HEAP32[$6>>2]|0;
    $580 = $579 >>> 20;
    $581 = $580&255;
    $582 = ((($538)) + 1|0);
    HEAP8[$582>>0] = $581;
    $583 = HEAP32[$6>>2]|0;
    $584 = $583 >>> 12;
    $585 = $584&255;
    $586 = ((($538)) + 2|0);
    HEAP8[$586>>0] = $585;
    $587 = HEAP32[$6>>2]|0;
    $588 = $587 >>> 4;
    $589 = $588&255;
    $590 = ((($538)) + 3|0);
    HEAP8[$590>>0] = $589;
    $591 = HEAP32[$6>>2]|0;
    $592 = $591 & 15;
    $593 = $592&255;
    $594 = ((($538)) + 4|0);
    HEAP8[$594>>0] = $593;
    $596 = 5;
    break;
   } else {
    $562 = $540 >>> 24;
    $563 = $562 | 224;
    $564 = $563&255;
    HEAP8[$538>>0] = $564;
    $565 = HEAP32[$6>>2]|0;
    $566 = $565 >>> 16;
    $567 = $566&255;
    $568 = ((($538)) + 1|0);
    HEAP8[$568>>0] = $567;
    $569 = HEAP32[$6>>2]|0;
    $570 = $569 >>> 8;
    $571 = $570&255;
    $572 = ((($538)) + 2|0);
    HEAP8[$572>>0] = $571;
    $573 = HEAP32[$6>>2]|0;
    $574 = $573&255;
    $575 = ((($538)) + 3|0);
    HEAP8[$575>>0] = $574;
    $596 = 4;
    break;
   }
  } else {
   $542 = $540&255;
   HEAP8[$538>>0] = $542;
   $596 = 1;
  }
 } while(0);
 $595 = (($538) + ($596)|0);
 $597 = ((($c)) + 44|0);
 $cp$4$i = $595;$i$0$i = 0;
 while(1) {
  $598 = HEAP32[$6>>2]|0;
  $599 = ($i$0$i|0)<($598|0);
  if (!($599)) {
   break;
  }
  $600 = HEAP32[$597>>2]|0;
  $601 = (($600) + ($i$0$i<<2)|0);
  $602 = HEAP32[$601>>2]|0;
  $603 = ($602>>>0)>(127);
  do {
   if ($603) {
    $605 = ($602>>>0)>(16383);
    if (!($605)) {
     $606 = $602 >>> 8;
     $607 = $606 | 128;
     $608 = $607&255;
     HEAP8[$cp$4$i>>0] = $608;
     $609 = HEAP32[$597>>2]|0;
     $610 = (($609) + ($i$0$i<<2)|0);
     $611 = HEAP32[$610>>2]|0;
     $612 = $611&255;
     $613 = ((($cp$4$i)) + 1|0);
     HEAP8[$613>>0] = $612;
     $678 = 2;
     break;
    }
    $614 = ($602>>>0)>(2097151);
    if (!($614)) {
     $615 = $602 >>> 16;
     $616 = $615 | 192;
     $617 = $616&255;
     HEAP8[$cp$4$i>>0] = $617;
     $618 = HEAP32[$597>>2]|0;
     $619 = (($618) + ($i$0$i<<2)|0);
     $620 = HEAP32[$619>>2]|0;
     $621 = $620 >>> 8;
     $622 = $621&255;
     $623 = ((($cp$4$i)) + 1|0);
     HEAP8[$623>>0] = $622;
     $624 = HEAP32[$597>>2]|0;
     $625 = (($624) + ($i$0$i<<2)|0);
     $626 = HEAP32[$625>>2]|0;
     $627 = $626&255;
     $628 = ((($cp$4$i)) + 2|0);
     HEAP8[$628>>0] = $627;
     $678 = 3;
     break;
    }
    $629 = ($602>>>0)>(268435455);
    if ($629) {
     $650 = $602 >>> 28;
     $651 = $650 | 240;
     $652 = $651&255;
     HEAP8[$cp$4$i>>0] = $652;
     $653 = HEAP32[$597>>2]|0;
     $654 = (($653) + ($i$0$i<<2)|0);
     $655 = HEAP32[$654>>2]|0;
     $656 = $655 >>> 20;
     $657 = $656&255;
     $658 = ((($cp$4$i)) + 1|0);
     HEAP8[$658>>0] = $657;
     $659 = HEAP32[$597>>2]|0;
     $660 = (($659) + ($i$0$i<<2)|0);
     $661 = HEAP32[$660>>2]|0;
     $662 = $661 >>> 12;
     $663 = $662&255;
     $664 = ((($cp$4$i)) + 2|0);
     HEAP8[$664>>0] = $663;
     $665 = HEAP32[$597>>2]|0;
     $666 = (($665) + ($i$0$i<<2)|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = $667 >>> 4;
     $669 = $668&255;
     $670 = ((($cp$4$i)) + 3|0);
     HEAP8[$670>>0] = $669;
     $671 = HEAP32[$597>>2]|0;
     $672 = (($671) + ($i$0$i<<2)|0);
     $673 = HEAP32[$672>>2]|0;
     $674 = $673 & 15;
     $675 = $674&255;
     $676 = ((($cp$4$i)) + 4|0);
     HEAP8[$676>>0] = $675;
     $678 = 5;
     break;
    } else {
     $630 = $602 >>> 24;
     $631 = $630 | 224;
     $632 = $631&255;
     HEAP8[$cp$4$i>>0] = $632;
     $633 = HEAP32[$597>>2]|0;
     $634 = (($633) + ($i$0$i<<2)|0);
     $635 = HEAP32[$634>>2]|0;
     $636 = $635 >>> 16;
     $637 = $636&255;
     $638 = ((($cp$4$i)) + 1|0);
     HEAP8[$638>>0] = $637;
     $639 = HEAP32[$597>>2]|0;
     $640 = (($639) + ($i$0$i<<2)|0);
     $641 = HEAP32[$640>>2]|0;
     $642 = $641 >>> 8;
     $643 = $642&255;
     $644 = ((($cp$4$i)) + 2|0);
     HEAP8[$644>>0] = $643;
     $645 = HEAP32[$597>>2]|0;
     $646 = (($645) + ($i$0$i<<2)|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647&255;
     $649 = ((($cp$4$i)) + 3|0);
     HEAP8[$649>>0] = $648;
     $678 = 4;
     break;
    }
   } else {
    $604 = $602&255;
    HEAP8[$cp$4$i>>0] = $604;
    $678 = 1;
   }
  } while(0);
  $677 = (($cp$4$i) + ($678)|0);
  $679 = (($i$0$i) + 1)|0;
  $cp$4$i = $677;$i$0$i = $679;
 }
 $680 = HEAP32[$12>>2]|0;
 $681 = $680 >> 8;
 $682 = ($681|0)>(2);
 if ($682) {
  $683 = $cp$4$i;
  $684 = $buf$0$i;
  $685 = (($683) - ($684))|0;
  $686 = (_crc32(0,$buf$0$i,$685)|0);
  $687 = ((($c)) + 348|0);
  HEAP32[$687>>2] = $686;
  $688 = $686&255;
  HEAP8[$cp$4$i>>0] = $688;
  $689 = HEAP32[$687>>2]|0;
  $690 = $689 >>> 8;
  $691 = $690&255;
  $692 = ((($cp$4$i)) + 1|0);
  HEAP8[$692>>0] = $691;
  $693 = HEAP32[$687>>2]|0;
  $694 = $693 >>> 16;
  $695 = $694&255;
  $696 = ((($cp$4$i)) + 2|0);
  HEAP8[$696>>0] = $695;
  $697 = HEAP32[$687>>2]|0;
  $698 = $697 >>> 24;
  $699 = $698&255;
  $700 = ((($cp$4$i)) + 3|0);
  HEAP8[$700>>0] = $699;
  $701 = ((($cp$4$i)) + 4|0);
  $$pre$phiZ2D = $684;$cp$5$i = $701;
 } else {
  $$pre12 = $buf$0$i;
  $$pre$phiZ2D = $$pre12;$cp$5$i = $cp$4$i;
 }
 $702 = $cp$5$i;
 $703 = (($702) - ($$pre$phiZ2D))|0;
 $704 = HEAP32[$fd>>2]|0;
 $705 = ((($704)) + 12|0);
 $706 = HEAP32[$705>>2]|0;
 $707 = ((($704)) + 4|0);
 $708 = HEAP32[$707>>2]|0;
 $709 = (($706) - ($708))|0;
 $710 = ($709>>>0)>($703>>>0);
 $711 = $708;
 $$ = $710 ? $703 : $709;
 _memcpy(($711|0),($buf$0$i|0),($$|0))|0;
 $712 = HEAP32[$707>>2]|0;
 $713 = (($712) + ($$)|0);
 HEAP32[$707>>2] = $713;
 $714 = ($703|0)==($$|0);
 do {
  if ($714) {
   $764 = $703;
  } else {
   $715 = HEAP32[$705>>2]|0;
   $716 = HEAP32[$704>>2]|0;
   $717 = (($715) - ($716))|0;
   $$cast = $716;
   $718 = ((($704)) + 16|0);
   $719 = ((($704)) + 20|0);
   $$in = $713;$buffer$0$i$i = $$cast;
   while(1) {
    $720 = ($buffer$0$i$i>>>0)<($$in>>>0);
    if (!($720)) {
     break;
    }
    $721 = $$in;
    $722 = HEAP32[$718>>2]|0;
    $723 = ((($722)) + 4|0);
    $724 = HEAP32[$723>>2]|0;
    $725 = $buffer$0$i$i;
    $726 = (($721) - ($725))|0;
    $727 = (FUNCTION_TABLE_iiii[$724 & 127]($704,$buffer$0$i$i,$726)|0);
    $728 = ($727|0)<(0);
    if ($728) {
     label = 106;
     break;
    }
    $734 = (($buffer$0$i$i) + ($727)|0);
    $735 = HEAP32[$719>>2]|0;
    $736 = (($735) + ($727))|0;
    HEAP32[$719>>2] = $736;
    $$pre = HEAP32[$707>>2]|0;
    $$in = $$pre;$buffer$0$i$i = $734;
   }
   if ((label|0) == 106) {
    $729 = HEAP32[6773]|0;
    $730 = ($729|0)==(0|0);
    if ($730) {
     $$0$i$i2$i = 27136;
    } else {
     $731 = (_pthread_self()|0);
     $732 = ((($731)) + 64|0);
     $733 = HEAP32[$732>>2]|0;
     $$0$i$i2$i = $733;
    }
    $737 = HEAP32[$$0$i$i2$i>>2]|0;
    $738 = ((($704)) + 28|0);
    HEAP32[$738>>2] = $737;
    $764 = $727;
    break;
   }
   $739 = HEAP32[$704>>2]|0;
   HEAP32[$707>>2] = $739;
   $740 = (($buf$0$i) + ($$)|0);
   $741 = (($703) - ($$))|0;
   $remaining$0$i$i$i = $741;$src$0$i$i$i = $740;
   while(1) {
    $742 = $remaining$0$i$i$i << 1;
    $743 = ($742>>>0)<($717>>>0);
    if ($743) {
     label = 117;
     break;
    }
    $744 = HEAP32[$718>>2]|0;
    $745 = ((($744)) + 4|0);
    $746 = HEAP32[$745>>2]|0;
    $747 = (FUNCTION_TABLE_iiii[$746 & 127]($704,$src$0$i$i$i,$remaining$0$i$i$i)|0);
    $748 = ($747|0)<(0);
    if ($748) {
     break;
    }
    $756 = HEAP32[$719>>2]|0;
    $757 = (($756) + ($747))|0;
    HEAP32[$719>>2] = $757;
    $758 = (($src$0$i$i$i) + ($747)|0);
    $759 = (($remaining$0$i$i$i) - ($747))|0;
    $remaining$0$i$i$i = $759;$src$0$i$i$i = $758;
   }
   if ((label|0) == 117) {
    $760 = HEAP32[$707>>2]|0;
    _memcpy(($760|0),($src$0$i$i$i|0),($remaining$0$i$i$i|0))|0;
    $761 = HEAP32[$707>>2]|0;
    $762 = (($761) + ($remaining$0$i$i$i)|0);
    HEAP32[$707>>2] = $762;
    $764 = $703;
    break;
   }
   $749 = HEAP32[6773]|0;
   $750 = ($749|0)==(0|0);
   if ($750) {
    $$0$i$i$i$i = 27136;
   } else {
    $751 = (_pthread_self()|0);
    $752 = ((($751)) + 64|0);
    $753 = HEAP32[$752>>2]|0;
    $$0$i$i$i$i = $753;
   }
   $754 = HEAP32[$$0$i$i$i$i>>2]|0;
   $755 = ((($704)) + 28|0);
   HEAP32[$755>>2] = $754;
   $764 = $747;
  }
 } while(0);
 $763 = ($703|0)==($764|0);
 $765 = ($buf$0$i|0)==($buf_a$i|0);
 if (!($763)) {
  if (!($765)) {
   _free($buf$0$i);
  }
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if (!($765)) {
  _free($buf$0$i);
 }
 $766 = ((($c)) + 56|0);
 $767 = HEAP32[$766>>2]|0;
 $768 = (_cram_write_block($fd,$767)|0);
 $769 = ($768|0)==(0);
 if (!($769)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $770 = ((($c)) + 96|0);
 $i$0 = 0;
 L182: while(1) {
  $771 = HEAP32[$0>>2]|0;
  $772 = ($i$0|0)<($771|0);
  if (!($772)) {
   label = 133;
   break;
  }
  $773 = HEAP32[$770>>2]|0;
  $774 = (($773) + ($i$0<<2)|0);
  $775 = HEAP32[$774>>2]|0;
  $776 = ((($775)) + 4|0);
  $777 = HEAP32[$776>>2]|0;
  $778 = (_cram_write_block($fd,$777)|0);
  $779 = ($778|0)==(0);
  if (!($779)) {
   $$0 = -1;
   label = 145;
   break;
  }
  $780 = ((($775)) + 8|0);
  $j$0 = 0;
  while(1) {
   $781 = HEAP32[$775>>2]|0;
   $782 = ((($781)) + 32|0);
   $783 = HEAP32[$782>>2]|0;
   $784 = ($j$0|0)<($783|0);
   if (!($784)) {
    break;
   }
   $785 = HEAP32[$780>>2]|0;
   $786 = (($785) + ($j$0<<2)|0);
   $787 = HEAP32[$786>>2]|0;
   $788 = (_cram_write_block($fd,$787)|0);
   $789 = ($788|0)==(0);
   if (!($789)) {
    $$0 = -1;
    label = 145;
    break L182;
   }
   $790 = (($j$0) + 1)|0;
   $j$0 = $790;
  }
  $791 = (($i$0) + 1)|0;
  $i$0 = $791;
 }
 if ((label|0) == 133) {
  $792 = HEAP32[$fd>>2]|0;
  $793 = HEAP32[$792>>2]|0;
  $794 = ((($792)) + 4|0);
  $795 = ((($792)) + 16|0);
  $796 = ((($792)) + 20|0);
  $buffer$0$i = $793;
  while(1) {
   $797 = HEAP32[$794>>2]|0;
   $798 = ($buffer$0$i>>>0)<($797>>>0);
   if (!($798)) {
    break;
   }
   $799 = $797;
   $800 = HEAP32[$795>>2]|0;
   $801 = ((($800)) + 4|0);
   $802 = HEAP32[$801>>2]|0;
   $803 = $buffer$0$i;
   $804 = (($799) - ($803))|0;
   $805 = (FUNCTION_TABLE_iiii[$802 & 127]($792,$buffer$0$i,$804)|0);
   $806 = ($805|0)<(0);
   if ($806) {
    label = 136;
    break;
   }
   $812 = (($buffer$0$i) + ($805)|0);
   $813 = HEAP32[$796>>2]|0;
   $814 = (($813) + ($805))|0;
   HEAP32[$796>>2] = $814;
   $buffer$0$i = $812;
  }
  if ((label|0) == 136) {
   $807 = HEAP32[6773]|0;
   $808 = ($807|0)==(0|0);
   if ($808) {
    $$0$i$i3 = 27136;
   } else {
    $809 = (_pthread_self()|0);
    $810 = ((($809)) + 64|0);
    $811 = HEAP32[$810>>2]|0;
    $$0$i$i3 = $811;
   }
   $815 = HEAP32[$$0$i$i3>>2]|0;
   $816 = ((($792)) + 28|0);
   HEAP32[$816>>2] = $815;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $817 = HEAP32[$792>>2]|0;
  HEAP32[$794>>2] = $817;
  $818 = HEAP32[$795>>2]|0;
  $819 = ((($818)) + 12|0);
  $820 = HEAP32[$819>>2]|0;
  $821 = ($820|0)==(0|0);
  if ($821) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $822 = (FUNCTION_TABLE_ii[$820 & 63]($792)|0);
  $823 = ($822|0)<(0);
  if (!($823)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $824 = HEAP32[6773]|0;
  $825 = ($824|0)==(0|0);
  if ($825) {
   $$0$i$i1 = 27136;
  } else {
   $826 = (_pthread_self()|0);
   $827 = ((($826)) + 64|0);
   $828 = HEAP32[$827>>2]|0;
   $$0$i$i1 = $828;
  }
  $829 = HEAP32[$$0$i$i1>>2]|0;
  $830 = ((($792)) + 28|0);
  HEAP32[$830>>2] = $829;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 145) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _cram_flush_thread($arg) {
 $arg = $arg|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$arg>>2]|0;
 $1 = ((($arg)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_cram_encode_container($0,$2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = $arg;
  STACKTOP = sp;return ($$0|0);
 }
 _fprintf(9772,20097,$vararg_buffer);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _cram_flush_result($fd) {
 $fd = $fd|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i3 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer$0$i = 0, $i$0 = 0, $ret$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$01 = $fd;$ret$0 = 0;
 while(1) {
  $0 = ((($$01)) + 34672|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($2)) + 32|0);
  (_pthread_mutex_lock(($3|0))|0);
  $4 = (_hts_tpool_next_result_locked($1)|0);
  $5 = HEAP32[$1>>2]|0;
  $6 = ((($5)) + 32|0);
  (_pthread_mutex_unlock(($6|0))|0);
  $7 = ($4|0)==(0|0);
  if ($7) {
   $$0 = $ret$0;
   label = 24;
   break;
  }
  $8 = ((($4)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   label = 4;
   break;
  }
  $11 = HEAP32[$9>>2]|0;
  $12 = ((($9)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_cram_flush_container2($11,$13)|0);
  $15 = ($14|0)==(0);
  if (!($15)) {
   $$0 = -1;
   label = 24;
   break;
  }
  $16 = ((($13)) + 60|0);
  $17 = ((($13)) + 96|0);
  $i$0 = 0;
  while(1) {
   $18 = HEAP32[$16>>2]|0;
   $19 = ($i$0|0)<($18|0);
   if (!($19)) {
    break;
   }
   $20 = HEAP32[$17>>2]|0;
   $21 = (($20) + ($i$0<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   _cram_free_slice($22);
   $23 = HEAP32[$17>>2]|0;
   $24 = (($23) + ($i$0<<2)|0);
   HEAP32[$24>>2] = 0;
   $25 = (($i$0) + 1)|0;
   $i$0 = $25;
  }
  $26 = ((($13)) + 100|0);
  HEAP32[$26>>2] = 0;
  $27 = ((($13)) + 64|0);
  HEAP32[$27>>2] = 0;
  _cram_free_container($13);
  $28 = HEAP32[$11>>2]|0;
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($28)) + 4|0);
  $31 = ((($28)) + 16|0);
  $32 = ((($28)) + 20|0);
  $buffer$0$i = $29;
  while(1) {
   $33 = HEAP32[$30>>2]|0;
   $34 = ($buffer$0$i>>>0)<($33>>>0);
   if (!($34)) {
    label = 16;
    break;
   }
   $35 = $33;
   $36 = HEAP32[$31>>2]|0;
   $37 = ((($36)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $buffer$0$i;
   $40 = (($35) - ($39))|0;
   $41 = (FUNCTION_TABLE_iiii[$38 & 127]($28,$buffer$0$i,$40)|0);
   $42 = ($41|0)<(0);
   if ($42) {
    label = 12;
    break;
   }
   $48 = (($buffer$0$i) + ($41)|0);
   $49 = HEAP32[$32>>2]|0;
   $50 = (($49) + ($41))|0;
   HEAP32[$32>>2] = $50;
   $buffer$0$i = $48;
  }
  if ((label|0) == 12) {
   label = 0;
   $43 = HEAP32[6773]|0;
   $44 = ($43|0)==(0|0);
   if ($44) {
    $$0$i$i3 = 27136;
   } else {
    $45 = (_pthread_self()|0);
    $46 = ((($45)) + 64|0);
    $47 = HEAP32[$46>>2]|0;
    $$0$i$i3 = $47;
   }
   $51 = HEAP32[$$0$i$i3>>2]|0;
   $52 = ((($28)) + 28|0);
   HEAP32[$52>>2] = $51;
   $$0$i = -1;
  }
  else if ((label|0) == 16) {
   label = 0;
   $53 = HEAP32[$28>>2]|0;
   HEAP32[$30>>2] = $53;
   $54 = HEAP32[$31>>2]|0;
   $55 = ((($54)) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)==(0|0);
   if ($57) {
    $$0$i = $ret$0;
   } else {
    $58 = (FUNCTION_TABLE_ii[$56 & 63]($28)|0);
    $59 = ($58|0)<(0);
    if ($59) {
     $60 = HEAP32[6773]|0;
     $61 = ($60|0)==(0|0);
     if ($61) {
      $$0$i$i = 27136;
     } else {
      $62 = (_pthread_self()|0);
      $63 = ((($62)) + 64|0);
      $64 = HEAP32[$63>>2]|0;
      $$0$i$i = $64;
     }
     $65 = HEAP32[$$0$i$i>>2]|0;
     $66 = ((($28)) + 28|0);
     HEAP32[$66>>2] = $65;
     $$0$i = -1;
    } else {
     $$0$i = $ret$0;
    }
   }
  }
  $67 = HEAP32[$8>>2]|0;
  $68 = ($67|0)==(0|0);
  if (!($68)) {
   _free($67);
  }
  _free($4);
  $$01 = $11;$ret$0 = $$0$i;
 }
 if ((label|0) == 4) {
  _free($4);
  $$0 = -1;
  return ($$0|0);
 }
 else if ((label|0) == 24) {
  return ($$0|0);
 }
 return (0)|0;
}
function _cram_stats_add($st,$val) {
 $st = $st|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $i$0$i = 0, $i$1$i = 0, $i$1$i$site$2$i = 0, $i$1$i8 = 0, $or$cond7 = 0, $site$0$i = 0, $site$0$i$i$0$i = 0, $site$2$i9 = 0, $step$0$i = 0, $x$0$i = 0, $x$3$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($st)) + 4100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 HEAP32[$0>>2] = $2;
 $3 = ($val>>>0)<(1024);
 if ($3) {
  $4 = (($st) + ($val<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 1)|0;
  HEAP32[$4>>2] = $6;
  return;
 }
 $7 = ((($st)) + 4096|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = (_malloc(28)|0);
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   $12 = ((($10)) + -4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 & 3;
   $15 = ($14|0)==(0);
   if (!($15)) {
    dest=$10; stop=dest+28|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   }
  }
  HEAP32[$7>>2] = $10;
  $17 = $10;
 } else {
  $17 = $8;
 }
 $16 = ((($17)) + 8|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = ((($17)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($18>>>0)<($20>>>0);
 do {
  if (!($21)) {
   $22 = HEAP32[$17>>2]|0;
   $23 = ((($17)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24 << 1;
   $26 = ($22>>>0)>($25>>>0);
   if ($26) {
    $27 = (($22) + -1)|0;
    $28 = (_kh_resize_m_i2i($17,$27)|0);
    $29 = ($28|0)<(0);
    if (!($29)) {
     break;
    }
    return;
   } else {
    $30 = (($22) + 1)|0;
    $31 = (_kh_resize_m_i2i($17,$30)|0);
    $32 = ($31|0)<(0);
    if (!($32)) {
     break;
    }
    return;
   }
  }
 } while(0);
 $33 = HEAP32[$17>>2]|0;
 $34 = (($33) + -1)|0;
 $35 = $34 & $val;
 $36 = $35 >>> 4;
 $37 = ((($17)) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + ($36<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $35 << 1;
 $42 = $41 & 30;
 $43 = 2 << $42;
 $44 = $40 & $43;
 $45 = ($44|0)==(0);
 do {
  if ($45) {
   $46 = ((($17)) + 20|0);
   $i$0$i = $35;$site$0$i = $33;$step$0$i = 0;
   while(1) {
    $47 = $i$0$i >>> 4;
    $48 = (($38) + ($47<<2)|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $i$0$i << 1;
    $51 = $50 & 30;
    $52 = 2 << $51;
    $53 = $49 & $52;
    $54 = ($53|0)==(0);
    if (!($54)) {
     $i$1$i8 = $i$0$i;$site$2$i9 = $site$0$i;
     break;
    }
    $55 = 1 << $51;
    $56 = $49 & $55;
    $57 = ($56|0)==(0);
    if ($57) {
     $58 = HEAP32[$46>>2]|0;
     $59 = (($58) + ($i$0$i<<2)|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==($val|0);
     if ($61) {
      $i$1$i8 = $i$0$i;$site$2$i9 = $site$0$i;
      break;
     }
    }
    $site$0$i$i$0$i = $57 ? $site$0$i : $i$0$i;
    $62 = (($step$0$i) + 1)|0;
    $63 = (($i$0$i) + ($62))|0;
    $64 = $63 & $34;
    $65 = ($64|0)==($35|0);
    if ($65) {
     $i$1$i = $35;$x$0$i = $site$0$i$i$0$i;
     label = 18;
     break;
    } else {
     $i$0$i = $64;$site$0$i = $site$0$i$i$0$i;$step$0$i = $62;
    }
   }
   if ((label|0) == 18) {
    $66 = ($x$0$i|0)==($33|0);
    if ($66) {
     $i$1$i8 = $i$1$i;$site$2$i9 = $x$0$i;
    } else {
     $x$3$i = $x$0$i;
     break;
    }
   }
   $67 = $i$1$i8 >>> 4;
   $68 = (($38) + ($67<<2)|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $i$1$i8 << 1;
   $71 = $70 & 30;
   $72 = 2 << $71;
   $73 = $69 & $72;
   $74 = ($73|0)==(0);
   $75 = ($site$2$i9|0)==($33|0);
   $or$cond7 = $74 | $75;
   $i$1$i$site$2$i = $or$cond7 ? $i$1$i8 : $site$2$i9;
   $x$3$i = $i$1$i$site$2$i;
  } else {
   $x$3$i = $35;
  }
 } while(0);
 $76 = $x$3$i >>> 4;
 $77 = (($38) + ($76<<2)|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $x$3$i << 1;
 $80 = $79 & 30;
 $81 = 2 << $80;
 $82 = $78 & $81;
 $83 = ($82|0)==(0);
 do {
  if ($83) {
   $98 = 1 << $80;
   $99 = $78 & $98;
   $100 = ($99|0)==(0);
   if (!($100)) {
    $101 = ((($17)) + 20|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = (($102) + ($x$3$i<<2)|0);
    HEAP32[$103>>2] = $val;
    $104 = 3 << $80;
    $105 = $104 ^ -1;
    $106 = HEAP32[$37>>2]|0;
    $107 = (($106) + ($76<<2)|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = $108 & $105;
    HEAP32[$107>>2] = $109;
    $110 = ((($17)) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = (($111) + 1)|0;
    HEAP32[$110>>2] = $112;
    break;
   }
   $113 = HEAP32[$7>>2]|0;
   $114 = ((($113)) + 24|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = (($115) + ($x$3$i<<2)|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (($117) + 1)|0;
   HEAP32[$116>>2] = $118;
   return;
  } else {
   $84 = ((($17)) + 20|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = (($85) + ($x$3$i<<2)|0);
   HEAP32[$86>>2] = $val;
   $87 = 3 << $80;
   $88 = $87 ^ -1;
   $89 = HEAP32[$37>>2]|0;
   $90 = (($89) + ($76<<2)|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $91 & $88;
   HEAP32[$90>>2] = $92;
   $93 = ((($17)) + 4|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = (($94) + 1)|0;
   HEAP32[$93>>2] = $95;
   $96 = HEAP32[$16>>2]|0;
   $97 = (($96) + 1)|0;
   HEAP32[$16>>2] = $97;
  }
 } while(0);
 $119 = HEAP32[$7>>2]|0;
 $120 = ((($119)) + 24|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = (($121) + ($x$3$i<<2)|0);
 HEAP32[$122>>2] = 1;
 return;
}
function _kh_resize_m_i2i($h,$new_n_buckets) {
 $h = $h|0;
 $new_n_buckets = $new_n_buckets|0;
 var $$ = 0, $$0 = 0, $$pre$phi4Z2D = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$0 = 0, $j$1 = 0, $key$0 = 0, $key$0$pn = 0, $phitmp = 0, $phitmp9 = 0, $step$0 = 0, $val$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($new_n_buckets) + -1)|0;
 $1 = $0 >>> 1;
 $2 = $0 | $1;
 $3 = $2 >>> 2;
 $4 = $2 | $3;
 $5 = $4 >>> 4;
 $6 = $4 | $5;
 $7 = $6 >>> 8;
 $8 = $6 | $7;
 $9 = $8 >>> 16;
 $10 = $8 | $9;
 $11 = (($10) + 1)|0;
 $12 = ($11>>>0)<(4);
 $$ = $12 ? 4 : $11;
 $13 = ((($h)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($$>>>0));
 $16 = $15 * 0.77000000000000001;
 $17 = $16 + 0.5;
 $18 = (~~(($17))>>>0);
 $19 = ($14>>>0)<($18>>>0);
 if (!($19)) {
  $$0 = 0;
  return ($$0|0);
 }
 $20 = ($$>>>0)<(16);
 $21 = $$ >>> 4;
 $phitmp9 = $21 << 2;
 $22 = $20 ? 4 : $phitmp9;
 $23 = (_malloc($22)|0);
 $24 = ($23|0)==(0|0);
 if ($24) {
  $$0 = -1;
  return ($$0|0);
 }
 $25 = $$ >>> 4;
 $phitmp = $25 << 2;
 $26 = $20 ? 4 : $phitmp;
 _memset(($23|0),-86,($26|0))|0;
 $27 = HEAP32[$h>>2]|0;
 $28 = ($27>>>0)<($$>>>0);
 $29 = ((($h)) + 20|0);
 do {
  if ($28) {
   $30 = HEAP32[$29>>2]|0;
   $31 = $$ << 2;
   $32 = (_realloc($30,$31)|0);
   $33 = ($32|0)==(0|0);
   if ($33) {
    _free($23);
    $$0 = -1;
    return ($$0|0);
   }
   HEAP32[$29>>2] = $32;
   $34 = ((($h)) + 24|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (_realloc($35,$31)|0);
   $37 = ($36|0)==(0|0);
   if (!($37)) {
    HEAP32[$34>>2] = $36;
    $$pre$phi4Z2D = $34;
    break;
   }
   _free($23);
   $$0 = -1;
   return ($$0|0);
  } else {
   $$pre3 = ((($h)) + 24|0);
   $$pre$phi4Z2D = $$pre3;
  }
 } while(0);
 $38 = ((($h)) + 16|0);
 $39 = (($$) + -1)|0;
 $j$1 = 0;
 while(1) {
  $40 = HEAP32[$h>>2]|0;
  $41 = ($j$1|0)==($40|0);
  if ($41) {
   break;
  }
  $42 = $j$1 >>> 4;
  $43 = HEAP32[$38>>2]|0;
  $44 = (($43) + ($42<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $j$1 << 1;
  $47 = $46 & 30;
  $48 = 3 << $47;
  $49 = $45 & $48;
  $50 = ($49|0)==(0);
  if ($50) {
   $51 = HEAP32[$29>>2]|0;
   $52 = (($51) + ($j$1<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = HEAP32[$$pre$phi4Z2D>>2]|0;
   $55 = (($54) + ($j$1<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = 1 << $47;
   $58 = $45 | $57;
   HEAP32[$44>>2] = $58;
   $key$0 = $53;$val$0 = $56;
   while(1) {
    $key$0$pn = $key$0;$step$0 = 0;
    while(1) {
     $i$0 = $key$0$pn & $39;
     $59 = $i$0 >>> 4;
     $60 = (($23) + ($59<<2)|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = $i$0 << 1;
     $63 = $62 & 30;
     $64 = 2 << $63;
     $65 = $61 & $64;
     $66 = ($65|0)==(0);
     if (!($66)) {
      break;
     }
     $67 = (($step$0) + 1)|0;
     $68 = (($i$0) + ($67))|0;
     $key$0$pn = $68;$step$0 = $67;
    }
    $69 = $64 ^ -1;
    $70 = $61 & $69;
    HEAP32[$60>>2] = $70;
    $71 = HEAP32[$h>>2]|0;
    $72 = ($i$0>>>0)<($71>>>0);
    if (!($72)) {
     break;
    }
    $73 = HEAP32[$38>>2]|0;
    $74 = (($73) + ($59<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = 3 << $63;
    $77 = $75 & $76;
    $78 = ($77|0)==(0);
    if (!($78)) {
     break;
    }
    $79 = HEAP32[$29>>2]|0;
    $80 = (($79) + ($i$0<<2)|0);
    $81 = HEAP32[$80>>2]|0;
    HEAP32[$80>>2] = $key$0;
    $82 = HEAP32[$$pre$phi4Z2D>>2]|0;
    $83 = (($82) + ($i$0<<2)|0);
    $84 = HEAP32[$83>>2]|0;
    HEAP32[$83>>2] = $val$0;
    $85 = 1 << $63;
    $86 = HEAP32[$38>>2]|0;
    $87 = (($86) + ($59<<2)|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $88 | $85;
    HEAP32[$87>>2] = $89;
    $key$0 = $81;$val$0 = $84;
   }
   $90 = HEAP32[$29>>2]|0;
   $91 = (($90) + ($i$0<<2)|0);
   HEAP32[$91>>2] = $key$0;
   $92 = HEAP32[$$pre$phi4Z2D>>2]|0;
   $93 = (($92) + ($i$0<<2)|0);
   HEAP32[$93>>2] = $val$0;
  }
  $94 = (($j$1) + 1)|0;
  $j$1 = $94;
 }
 $95 = ($j$1>>>0)>($$>>>0);
 if ($95) {
  $96 = HEAP32[$29>>2]|0;
  $97 = $$ << 2;
  $98 = (_realloc($96,$97)|0);
  HEAP32[$29>>2] = $98;
  $99 = HEAP32[$$pre$phi4Z2D>>2]|0;
  $100 = (_realloc($99,$97)|0);
  HEAP32[$$pre$phi4Z2D>>2] = $100;
 }
 $101 = HEAP32[$38>>2]|0;
 _free($101);
 HEAP32[$38>>2] = $23;
 HEAP32[$h>>2] = $$;
 $102 = HEAP32[$13>>2]|0;
 $103 = ((($h)) + 8|0);
 HEAP32[$103>>2] = $102;
 $104 = ((($h)) + 12|0);
 HEAP32[$104>>2] = $18;
 $$0 = 0;
 return ($$0|0);
}
function _cram_stats_del($st,$val) {
 $st = $st|0;
 $val = $val|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$i = 0, $i$0$i$ = 0, $step$0$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ((($st)) + 4100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[$0>>2] = $2;
 $3 = ($val>>>0)<(1024);
 if ($3) {
  $4 = (($st) + ($val<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + -1)|0;
  HEAP32[$4>>2] = $6;
  $7 = ($5|0)>(0);
  if ($7) {
   STACKTOP = sp;return;
  } else {
   ___assert_fail((20523|0),(20543|0),82,(20561|0));
   // unreachable;
  }
 }
 $8 = ((($st)) + 4096|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$vararg_buffer1>>2] = $val;
  _fprintf(9772,20576,$vararg_buffer1);
  $67 = HEAP32[$0>>2]|0;
  $68 = (($67) + 1)|0;
  HEAP32[$0>>2] = $68;
  STACKTOP = sp;return;
 }
 $11 = HEAP32[$9>>2]|0;
 $12 = ($11|0)==(0);
 L11: do {
  if ($12) {
   $$0$i = 0;
   label = 12;
  } else {
   $13 = (($11) + -1)|0;
   $14 = $13 & $val;
   $15 = ((($9)) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($9)) + 20|0);
   $i$0$i = $14;$step$0$i = 0;
   while(1) {
    $18 = $i$0$i >>> 4;
    $19 = (($16) + ($18<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $i$0$i << 1;
    $22 = $21 & 30;
    $23 = 2 << $22;
    $24 = $20 & $23;
    $25 = ($24|0)==(0);
    if (!($25)) {
     break;
    }
    $26 = 1 << $22;
    $27 = $20 & $26;
    $28 = ($27|0)==(0);
    if ($28) {
     $29 = HEAP32[$17>>2]|0;
     $30 = (($29) + ($i$0$i<<2)|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==($val|0);
     if ($32) {
      break;
     }
    }
    $33 = (($step$0$i) + 1)|0;
    $34 = (($i$0$i) + ($33))|0;
    $35 = $34 & $13;
    $36 = ($35|0)==($14|0);
    if ($36) {
     break L11;
    } else {
     $i$0$i = $35;$step$0$i = $33;
    }
   }
   $37 = 3 << $22;
   $38 = $20 & $37;
   $39 = ($38|0)==(0);
   $i$0$i$ = $39 ? $i$0$i : $11;
   $$0$i = $i$0$i$;
   label = 12;
  }
 } while(0);
 if ((label|0) == 12) {
  $40 = ($$0$i|0)==($11|0);
  if (!($40)) {
   $41 = ((($9)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) + ($$0$i<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + -1)|0;
   HEAP32[$43>>2] = $45;
   $46 = ($45|0)==(0);
   if (!($46)) {
    STACKTOP = sp;return;
   }
   $47 = HEAP32[$8>>2]|0;
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($$0$i|0);
   if ($49) {
    STACKTOP = sp;return;
   }
   $50 = $$0$i >>> 4;
   $51 = ((($47)) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + ($50<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $$0$i << 1;
   $56 = $55 & 30;
   $57 = 3 << $56;
   $58 = $54 & $57;
   $59 = ($58|0)==(0);
   if (!($59)) {
    STACKTOP = sp;return;
   }
   $60 = 1 << $56;
   $61 = $54 | $60;
   HEAP32[$53>>2] = $61;
   $62 = ((($47)) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + -1)|0;
   HEAP32[$62>>2] = $64;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$vararg_buffer>>2] = $val;
 _fprintf(9772,20576,$vararg_buffer);
 $65 = HEAP32[$0>>2]|0;
 $66 = (($65) + 1)|0;
 HEAP32[$0>>2] = $66;
 STACKTOP = sp;return;
}
function _cram_stats_encoding($st) {
 $st = $st|0;
 var $$ = 0, $$0 = 0, $$45 = 0, $$pre = 0, $$pre$pre = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $freqs$0 = 0, $freqs$1 = 0, $freqs$2 = 0, $freqs$3 = 0, $freqs$4 = 0, $freqs$5 = 0, $freqs$6 = 0, $i$0 = 0, $k$0 = 0, $ntot$0 = 0;
 var $ntot$1 = 0, $ntot$2 = 0, $ntot$3 = 0, $ntot$4 = 0, $nvals$0 = 0, $nvals$1 = 0, $nvals$2 = 0, $nvals$3 = 0, $nvals$4 = 0, $or$cond = 0, $vals$0 = 0, $vals$1 = 0, $vals$2 = 0, $vals$3 = 0, $vals$4 = 0, $vals$5 = 0, $vals$6 = 0, $vals_alloc$0 = 0, $vals_alloc$1 = 0, $vals_alloc$2 = 0;
 var $vals_alloc$3 = 0, $vals_alloc$4 = 0, $vals_alloc$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $freqs$0 = 0;$i$0 = 0;$ntot$0 = 0;$nvals$0 = 0;$vals$0 = 0;$vals_alloc$0 = 0;
 while(1) {
  $0 = ($i$0|0)<(1024);
  if (!($0)) {
   label = 12;
   break;
  }
  $1 = (($st) + ($i$0<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   $freqs$2 = $freqs$0;$ntot$1 = $ntot$0;$nvals$1 = $nvals$0;$vals$2 = $vals$0;$vals_alloc$2 = $vals_alloc$0;
  } else {
   $4 = ($nvals$0|0)<($vals_alloc$0|0);
   if ($4) {
    $freqs$1 = $freqs$0;$vals$1 = $vals$0;$vals_alloc$1 = $vals_alloc$0;
   } else {
    $5 = ($vals_alloc$0|0)==(0);
    $6 = $vals_alloc$0 << 1;
    $$ = $5 ? 1024 : $6;
    $7 = $$ << 2;
    $8 = (_realloc($vals$0,$7)|0);
    $9 = (_realloc($freqs$0,$7)|0);
    $10 = ($8|0)==(0|0);
    if ($10) {
     label = 8;
     break;
    }
    $11 = ($9|0)==(0|0);
    if ($11) {
     label = 7;
     break;
    } else {
     $freqs$1 = $9;$vals$1 = $8;$vals_alloc$1 = $$;
    }
   }
   $13 = (($vals$1) + ($nvals$0<<2)|0);
   HEAP32[$13>>2] = $i$0;
   $14 = HEAP32[$1>>2]|0;
   $15 = (($freqs$1) + ($nvals$0<<2)|0);
   HEAP32[$15>>2] = $14;
   $16 = (($ntot$0) + ($14))|0;
   $17 = (($nvals$0) + 1)|0;
   $freqs$2 = $freqs$1;$ntot$1 = $16;$nvals$1 = $17;$vals$2 = $vals$1;$vals_alloc$2 = $vals_alloc$1;
  }
  $18 = (($i$0) + 1)|0;
  $freqs$0 = $freqs$2;$i$0 = $18;$ntot$0 = $ntot$1;$nvals$0 = $nvals$1;$vals$0 = $vals$2;$vals_alloc$0 = $vals_alloc$2;
 }
 if ((label|0) == 7) {
  _free($8);
  $$0 = 3;
  return ($$0|0);
 }
 else if ((label|0) == 8) {
  $12 = ($9|0)==(0|0);
  if ($12) {
   $$0 = 3;
   return ($$0|0);
  }
  _free($9);
  $$0 = 3;
  return ($$0|0);
 }
 else if ((label|0) == 12) {
  $19 = ((($st)) + 4096|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0|0);
  L13: do {
   if ($21) {
    $freqs$6 = $freqs$0;$ntot$4 = $ntot$0;$nvals$4 = $nvals$0;$vals$6 = $vals$0;
   } else {
    $23 = $20;$freqs$3 = $freqs$0;$k$0 = 0;$ntot$2 = $ntot$0;$nvals$2 = $nvals$0;$vals$3 = $vals$0;$vals_alloc$3 = $vals_alloc$0;
    while(1) {
     $22 = HEAP32[$23>>2]|0;
     $24 = ($k$0|0)==($22|0);
     if ($24) {
      $freqs$6 = $freqs$3;$ntot$4 = $ntot$2;$nvals$4 = $nvals$2;$vals$6 = $vals$3;
      break L13;
     }
     $25 = $k$0 >>> 4;
     $26 = ((($23)) + 16|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (($27) + ($25<<2)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = $k$0 << 1;
     $31 = $30 & 30;
     $32 = 3 << $31;
     $33 = $29 & $32;
     $34 = ($33|0)==(0);
     if ($34) {
      $35 = ($nvals$2|0)<($vals_alloc$3|0);
      if ($35) {
       $44 = $23;$freqs$4 = $freqs$3;$vals$4 = $vals$3;$vals_alloc$4 = $vals_alloc$3;
      } else {
       $36 = ($vals_alloc$3|0)==(0);
       $37 = $vals_alloc$3 << 1;
       $$45 = $36 ? 1024 : $37;
       $38 = $$45 << 2;
       $39 = (_realloc($vals$3,$38)|0);
       $40 = (_realloc($freqs$3,$38)|0);
       $41 = ($39|0)==(0|0);
       $42 = ($40|0)==(0|0);
       $or$cond = $41 | $42;
       if ($or$cond) {
        $$0 = 3;
        break;
       }
       $$pre23 = HEAP32[$19>>2]|0;
       $44 = $$pre23;$freqs$4 = $40;$vals$4 = $39;$vals_alloc$4 = $$45;
      }
      $43 = ((($44)) + 20|0);
      $45 = HEAP32[$43>>2]|0;
      $46 = (($45) + ($k$0<<2)|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = (($vals$4) + ($nvals$2<<2)|0);
      HEAP32[$48>>2] = $47;
      $49 = HEAP32[$19>>2]|0;
      $50 = ((($49)) + 24|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = (($51) + ($k$0<<2)|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (($freqs$4) + ($nvals$2<<2)|0);
      HEAP32[$54>>2] = $53;
      $55 = (($ntot$2) + ($53))|0;
      $56 = (($nvals$2) + 1)|0;
      $$pre$pre = HEAP32[$19>>2]|0;
      $$pre = $$pre$pre;$freqs$5 = $freqs$4;$ntot$3 = $55;$nvals$3 = $56;$vals$5 = $vals$4;$vals_alloc$5 = $vals_alloc$4;
     } else {
      $$pre = $23;$freqs$5 = $freqs$3;$ntot$3 = $ntot$2;$nvals$3 = $nvals$2;$vals$5 = $vals$3;$vals_alloc$5 = $vals_alloc$3;
     }
     $57 = (($k$0) + 1)|0;
     $23 = $$pre;$freqs$3 = $freqs$5;$k$0 = $57;$ntot$2 = $ntot$3;$nvals$2 = $nvals$3;$vals$3 = $vals$5;$vals_alloc$3 = $vals_alloc$5;
    }
    return ($$0|0);
   }
  } while(0);
  $58 = ((($st)) + 4104|0);
  HEAP32[$58>>2] = $nvals$4;
  $59 = ((($st)) + 4100|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($ntot$4|0)==($60|0);
  if (!($61)) {
   ___assert_fail((20617|0),(20543|0),180,(20635|0));
   // unreachable;
  }
  _free($vals$6);
  _free($freqs$6);
  $62 = ($nvals$4|0)<(2);
  $63 = $62 ? 3 : 1;
  $$0 = $63;
  return ($$0|0);
 }
 return (0)|0;
}
function _mfflush($mf) {
 $mf = $mf|0;
 var $$0$i$i$i = 0, $$01$i16 = 0, $$01$i63 = 0, $$02$i15 = 0, $$02$i62 = 0, $$in = 0, $$in92 = 0, $$phi$trans$insert = 0, $$phi$trans$insert80 = 0, $$pre = 0, $$pre$phi86Z2D = 0, $$pre$phi89Z2D = 0, $$pre$phiZ2D = 0, $$pre6$i13 = 0, $$pre6$i60 = 0, $$pre82 = 0, $$pre84 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$0$i10 = 0, $i$0$i57 = 0, $i$1$i17 = 0, $i$1$i64 = 0, $phitmp$i = 0, $phitmp$i24 = 0, $phitmp$i29 = 0, $phitmp$i70 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$mf>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = ((($mf)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 2;
 $5 = ($4|0)==(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = ((($mf)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($mf)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)>($7>>>0);
 do {
  if ($10) {
   $11 = (($9) - ($7))|0;
   $12 = $3 & 32;
   $13 = ($12|0)==(0);
   do {
    if ($13) {
     $14 = ((($0)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     $17 = ((($0)) + 20|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($0)) + 28|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18>>>0)>($20>>>0);
     if ($16) {
      if ($21) {
       $35 = ((($0)) + 36|0);
       $36 = HEAP32[$35>>2]|0;
       (FUNCTION_TABLE_iiii[$36 & 127]($0,0,0)|0);
       $37 = HEAP32[$17>>2]|0;
       $38 = ($37|0)==(0|0);
       if ($38) {
        break;
       }
      }
      $39 = ((($0)) + 16|0);
      HEAP32[$39>>2] = 0;
      HEAP32[$19>>2] = 0;
      HEAP32[$17>>2] = 0;
      $40 = ((($0)) + 40|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (FUNCTION_TABLE_iiii[$41 & 127]($0,$7,0)|0);
      $43 = ($42|0)<(0);
      if ($43) {
       break;
      }
      $44 = ((($0)) + 8|0);
      HEAP32[$44>>2] = 0;
      $45 = ((($0)) + 4|0);
      HEAP32[$45>>2] = 0;
      $46 = HEAP32[$0>>2]|0;
      $47 = $46 & -17;
      HEAP32[$0>>2] = $47;
      break;
     } else {
      if ($21) {
       $22 = ((($0)) + 36|0);
       $23 = HEAP32[$22>>2]|0;
       (FUNCTION_TABLE_iiii[$23 & 127]($0,0,0)|0);
       $24 = HEAP32[$17>>2]|0;
       $25 = ($24|0)==(0|0);
       if ($25) {
        break;
       }
      }
      $26 = ((($0)) + 16|0);
      HEAP32[$26>>2] = 0;
      HEAP32[$19>>2] = 0;
      HEAP32[$17>>2] = 0;
      $27 = ((($0)) + 40|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = (FUNCTION_TABLE_iiii[$28 & 127]($0,$7,0)|0);
      $30 = ($29|0)<(0);
      if ($30) {
       break;
      }
      $31 = ((($0)) + 8|0);
      HEAP32[$31>>2] = 0;
      $32 = ((($0)) + 4|0);
      HEAP32[$32>>2] = 0;
      $33 = HEAP32[$0>>2]|0;
      $34 = $33 & -17;
      HEAP32[$0>>2] = $34;
      break;
     }
    }
   } while(0);
   $48 = ((($mf)) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = HEAP32[$6>>2]|0;
   $51 = (($49) + ($50)|0);
   $52 = HEAP32[$mf>>2]|0;
   $53 = ((($52)) + 76|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)>(-1);
   $56 = ((($52)) + 16|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)==(0|0);
   L23: do {
    if ($55) {
     do {
      if ($58) {
       $105 = ((($52)) + 74|0);
       $106 = HEAP8[$105>>0]|0;
       $107 = $106 << 24 >> 24;
       $108 = (($107) + 255)|0;
       $109 = $108 | $107;
       $110 = $109&255;
       HEAP8[$105>>0] = $110;
       $111 = HEAP32[$52>>2]|0;
       $112 = $111 & 8;
       $113 = ($112|0)==(0);
       if ($113) {
        $115 = ((($52)) + 8|0);
        HEAP32[$115>>2] = 0;
        $116 = ((($52)) + 4|0);
        HEAP32[$116>>2] = 0;
        $117 = ((($52)) + 44|0);
        $118 = HEAP32[$117>>2]|0;
        $119 = ((($52)) + 28|0);
        HEAP32[$119>>2] = $118;
        $120 = ((($52)) + 20|0);
        HEAP32[$120>>2] = $118;
        $121 = $118;
        $122 = ((($52)) + 48|0);
        $123 = HEAP32[$122>>2]|0;
        $124 = (($121) + ($123)|0);
        HEAP32[$56>>2] = $124;
        $$in92 = $124;$$pre$phiZ2D = $120;$127 = $118;
        break;
       } else {
        $114 = $111 | 32;
        HEAP32[$52>>2] = $114;
        $152 = 0;
        break L23;
       }
      } else {
       $$phi$trans$insert80 = ((($52)) + 20|0);
       $$pre82 = HEAP32[$$phi$trans$insert80>>2]|0;
       $$in92 = $57;$$pre$phiZ2D = $$phi$trans$insert80;$127 = $$pre82;
      }
     } while(0);
     $125 = $$in92;
     $126 = (($125) - ($127))|0;
     $128 = ($126>>>0)<($11>>>0);
     $129 = $127;
     if ($128) {
      $130 = ((($52)) + 36|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = (FUNCTION_TABLE_iiii[$131 & 127]($52,$51,$11)|0);
      $152 = $132;
      break;
     }
     $133 = ((($52)) + 75|0);
     $134 = HEAP8[$133>>0]|0;
     $135 = ($134<<24>>24)>(-1);
     L35: do {
      if ($135) {
       $i$0$i10 = $11;
       while(1) {
        $136 = ($i$0$i10|0)==(0);
        if ($136) {
         $$01$i16 = $11;$$02$i15 = $51;$147 = $129;$i$1$i17 = 0;
         break L35;
        }
        $137 = (($i$0$i10) + -1)|0;
        $138 = (($51) + ($137)|0);
        $139 = HEAP8[$138>>0]|0;
        $140 = ($139<<24>>24)==(10);
        if ($140) {
         break;
        } else {
         $i$0$i10 = $137;
        }
       }
       $141 = ((($52)) + 36|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = (FUNCTION_TABLE_iiii[$142 & 127]($52,$51,$i$0$i10)|0);
       $144 = ($143>>>0)<($i$0$i10>>>0);
       if ($144) {
        $152 = $i$0$i10;
        break L23;
       }
       $145 = (($51) + ($i$0$i10)|0);
       $146 = (($11) - ($i$0$i10))|0;
       $$pre6$i13 = HEAP32[$$pre$phiZ2D>>2]|0;
       $$01$i16 = $146;$$02$i15 = $145;$147 = $$pre6$i13;$i$1$i17 = $i$0$i10;
      } else {
       $$01$i16 = $11;$$02$i15 = $51;$147 = $129;$i$1$i17 = 0;
      }
     } while(0);
     _memcpy(($147|0),($$02$i15|0),($$01$i16|0))|0;
     $148 = HEAP32[$$pre$phiZ2D>>2]|0;
     $149 = (($148) + ($$01$i16)|0);
     HEAP32[$$pre$phiZ2D>>2] = $149;
     $150 = (($i$1$i17) + ($$01$i16))|0;
     $152 = $150;
    } else {
     do {
      if ($58) {
       $59 = ((($52)) + 74|0);
       $60 = HEAP8[$59>>0]|0;
       $61 = $60 << 24 >> 24;
       $62 = (($61) + 255)|0;
       $63 = $62 | $61;
       $64 = $63&255;
       HEAP8[$59>>0] = $64;
       $65 = HEAP32[$52>>2]|0;
       $66 = $65 & 8;
       $67 = ($66|0)==(0);
       if ($67) {
        $69 = ((($52)) + 8|0);
        HEAP32[$69>>2] = 0;
        $70 = ((($52)) + 4|0);
        HEAP32[$70>>2] = 0;
        $71 = ((($52)) + 44|0);
        $72 = HEAP32[$71>>2]|0;
        $73 = ((($52)) + 28|0);
        HEAP32[$73>>2] = $72;
        $74 = ((($52)) + 20|0);
        HEAP32[$74>>2] = $72;
        $75 = $72;
        $76 = ((($52)) + 48|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = (($75) + ($77)|0);
        HEAP32[$56>>2] = $78;
        $$in = $78;$$pre$phi86Z2D = $74;$81 = $72;
        break;
       } else {
        $68 = $65 | 32;
        HEAP32[$52>>2] = $68;
        $152 = 0;
        break L23;
       }
      } else {
       $$phi$trans$insert = ((($52)) + 20|0);
       $$pre = HEAP32[$$phi$trans$insert>>2]|0;
       $$in = $57;$$pre$phi86Z2D = $$phi$trans$insert;$81 = $$pre;
      }
     } while(0);
     $79 = $$in;
     $80 = (($79) - ($81))|0;
     $82 = ($80>>>0)<($11>>>0);
     $83 = $81;
     if ($82) {
      $84 = ((($52)) + 36|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = (FUNCTION_TABLE_iiii[$85 & 127]($52,$51,$11)|0);
      $152 = $86;
      break;
     }
     $87 = ((($52)) + 75|0);
     $88 = HEAP8[$87>>0]|0;
     $89 = ($88<<24>>24)>(-1);
     L53: do {
      if ($89) {
       $i$0$i57 = $11;
       while(1) {
        $90 = ($i$0$i57|0)==(0);
        if ($90) {
         $$01$i63 = $11;$$02$i62 = $51;$101 = $83;$i$1$i64 = 0;
         break L53;
        }
        $91 = (($i$0$i57) + -1)|0;
        $92 = (($51) + ($91)|0);
        $93 = HEAP8[$92>>0]|0;
        $94 = ($93<<24>>24)==(10);
        if ($94) {
         break;
        } else {
         $i$0$i57 = $91;
        }
       }
       $95 = ((($52)) + 36|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = (FUNCTION_TABLE_iiii[$96 & 127]($52,$51,$i$0$i57)|0);
       $98 = ($97>>>0)<($i$0$i57>>>0);
       if ($98) {
        $152 = $i$0$i57;
        break L23;
       }
       $99 = (($51) + ($i$0$i57)|0);
       $100 = (($11) - ($i$0$i57))|0;
       $$pre6$i60 = HEAP32[$$pre$phi86Z2D>>2]|0;
       $$01$i63 = $100;$$02$i62 = $99;$101 = $$pre6$i60;$i$1$i64 = $i$0$i57;
      } else {
       $$01$i63 = $11;$$02$i62 = $51;$101 = $83;$i$1$i64 = 0;
      }
     } while(0);
     _memcpy(($101|0),($$02$i62|0),($$01$i63|0))|0;
     $102 = HEAP32[$$pre$phi86Z2D>>2]|0;
     $103 = (($102) + ($$01$i63)|0);
     HEAP32[$$pre$phi86Z2D>>2] = $103;
     $104 = (($i$1$i64) + ($$01$i63))|0;
     $152 = $104;
    }
   } while(0);
   $151 = ($152>>>0)<($11>>>0);
   if ($151) {
    STACKTOP = sp;return;
   }
   $153 = HEAP32[$mf>>2]|0;
   $154 = (_fflush($153)|0);
   $155 = ($154|0)==(0);
   if ($155) {
    $$pre84 = HEAP32[$mf>>2]|0;
    $$pre$phi89Z2D = $mf;$157 = $$pre84;
    break;
   } else {
    STACKTOP = sp;return;
   }
  } else {
   $$pre$phi89Z2D = $mf;$157 = $0;
  }
 } while(0);
 $156 = ((($157)) + 76|0);
 $158 = HEAP32[$156>>2]|0;
 $159 = ($158|0)>(-1);
 $160 = ((($157)) + 40|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = HEAP32[$157>>2]|0;
 $163 = $162 & 128;
 $164 = ($163|0)==(0);
 if ($159) {
  if ($164) {
   $190 = 1;
  } else {
   $185 = ((($157)) + 20|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = ((($157)) + 28|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = ($186>>>0)>($188>>>0);
   $phitmp$i24 = $189 ? 2 : 1;
   $190 = $phitmp$i24;
  }
  $191 = (FUNCTION_TABLE_iiii[$161 & 127]($157,0,$190)|0);
  $192 = ($191|0)<(0);
  if ($192) {
   $206 = $191;
  } else {
   $193 = ((($157)) + 8|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = ((($157)) + 4|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = ((($157)) + 20|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = ((($157)) + 28|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = (($191) - ($194))|0;
   $202 = (($201) + ($196))|0;
   $203 = (($202) + ($198))|0;
   $204 = (($203) - ($200))|0;
   $206 = $204;
  }
 } else {
  if ($164) {
   $170 = 1;
  } else {
   $165 = ((($157)) + 20|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = ((($157)) + 28|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = ($166>>>0)>($168>>>0);
   $phitmp$i = $169 ? 2 : 1;
   $170 = $phitmp$i;
  }
  $171 = (FUNCTION_TABLE_iiii[$161 & 127]($157,0,$170)|0);
  $172 = ($171|0)<(0);
  if ($172) {
   $206 = $171;
  } else {
   $173 = ((($157)) + 8|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = ((($157)) + 4|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = ((($157)) + 20|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = ((($157)) + 28|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = (($171) - ($174))|0;
   $182 = (($181) + ($176))|0;
   $183 = (($182) + ($178))|0;
   $184 = (($183) - ($180))|0;
   $206 = $184;
  }
 }
 $205 = ($206|0)==(-1);
 if (!($205)) {
  $207 = HEAP32[$$pre$phi89Z2D>>2]|0;
  $208 = ((($207)) + 76|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = ($209|0)>(-1);
  $211 = ((($207)) + 60|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = ((($207)) + 40|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = HEAP32[$207>>2]|0;
  $216 = $215 & 128;
  $217 = ($216|0)==(0);
  if ($210) {
   if ($217) {
    $243 = 1;
   } else {
    $238 = ((($207)) + 20|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = ((($207)) + 28|0);
    $241 = HEAP32[$240>>2]|0;
    $242 = ($239>>>0)>($241>>>0);
    $phitmp$i70 = $242 ? 2 : 1;
    $243 = $phitmp$i70;
   }
   $244 = (FUNCTION_TABLE_iiii[$214 & 127]($207,0,$243)|0);
   $245 = ($244|0)<(0);
   if ($245) {
    $259 = $244;
   } else {
    $246 = ((($207)) + 8|0);
    $247 = HEAP32[$246>>2]|0;
    $248 = ((($207)) + 4|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = ((($207)) + 20|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = ((($207)) + 28|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = (($244) - ($247))|0;
    $255 = (($254) + ($249))|0;
    $256 = (($255) + ($251))|0;
    $257 = (($256) - ($253))|0;
    $259 = $257;
   }
  } else {
   if ($217) {
    $223 = 1;
   } else {
    $218 = ((($207)) + 20|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = ((($207)) + 28|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = ($219>>>0)>($221>>>0);
    $phitmp$i29 = $222 ? 2 : 1;
    $223 = $phitmp$i29;
   }
   $224 = (FUNCTION_TABLE_iiii[$214 & 127]($207,0,$223)|0);
   $225 = ($224|0)<(0);
   if ($225) {
    $259 = $224;
   } else {
    $226 = ((($207)) + 8|0);
    $227 = HEAP32[$226>>2]|0;
    $228 = ((($207)) + 4|0);
    $229 = HEAP32[$228>>2]|0;
    $230 = ((($207)) + 20|0);
    $231 = HEAP32[$230>>2]|0;
    $232 = ((($207)) + 28|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = (($224) - ($227))|0;
    $235 = (($234) + ($229))|0;
    $236 = (($235) + ($231))|0;
    $237 = (($236) - ($233))|0;
    $259 = $237;
   }
  }
  $258 = ($259|0)<(0);
  $260 = $258 << 31 >> 31;
  HEAP32[$vararg_buffer>>2] = $212;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 0;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $259;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $260;
  $261 = (___syscall194(194,($vararg_buffer|0))|0);
  $262 = ($261>>>0)>(4294963200);
  if ($262) {
   $263 = (0 - ($261))|0;
   $264 = HEAP32[6773]|0;
   $265 = ($264|0)==(0|0);
   if ($265) {
    $$0$i$i$i = 27136;
   } else {
    $266 = (_pthread_self()|0);
    $267 = ((($266)) + 64|0);
    $268 = HEAP32[$267>>2]|0;
    $$0$i$i$i = $268;
   }
   HEAP32[$$0$i$i$i>>2] = $263;
   STACKTOP = sp;return;
  }
 }
 $269 = HEAP32[$8>>2]|0;
 HEAP32[$6>>2] = $269;
 STACKTOP = sp;return;
}
function _tokenise_search_path($searchpath) {
 $searchpath = $searchpath|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$01$lcssa$i = 0, $$014$i = 0, $$08$i = 0, $$08$i21 = 0, $$08$i34 = 0, $$08$i47 = 0, $$08$i60 = 0, $$08$i8 = 0, $$08$in$i = 0, $$08$in$i18 = 0, $$08$in$i31 = 0, $$08$in$i44 = 0, $$08$in$i5 = 0, $$08$in$i57 = 0, $$1$lcssa$i = 0, $$phi$trans$insert = 0, $$phi$trans$insert85 = 0;
 var $$phi$trans$insert87 = 0, $$phi$trans$insert89$phi$trans$insert = 0, $$pn$i = 0, $$pn15$i = 0, $$pre = 0, $$pre$i = 0, $$pre86 = 0, $$pre88 = 0, $$pre90$pre = 0, $$searchpath = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$0 = 0, $i$1 = 0, $i$10 = 0, $i$269 = 0, $i$3 = 0, $i$6 = 0, $i$8 = 0, $j$0 = 0, $j$1 = 0, $j$10 = 0, $j$4 = 0;
 var $j$5 = 0, $j$9 = 0, $l$06$i = 0, $l$06$i20 = 0, $l$06$i33 = 0, $l$06$i46 = 0, $l$06$i59 = 0, $l$06$i7 = 0, $or$cond$i = 0, $or$cond$i22 = 0, $or$cond$i35 = 0, $or$cond$i48 = 0, $or$cond$i61 = 0, $or$cond$i9 = 0, $or$cond4$i = 0, $or$cond4$i10 = 0, $or$cond4$i23 = 0, $or$cond4$i36 = 0, $or$cond4$i49 = 0, $or$cond4$i62 = 0;
 var $r$0$lcssa$i = 0, $r$0$lcssa$i15 = 0, $r$0$lcssa$i28 = 0, $r$0$lcssa$i41 = 0, $r$0$lcssa$i54 = 0, $r$0$lcssa$i67 = 0, $r$07$i = 0, $r$07$i19 = 0, $r$07$i32 = 0, $r$07$i45 = 0, $r$07$i58 = 0, $r$07$i6 = 0, $w$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($searchpath|0)==(0|0);
 $$searchpath = $0 ? 27693 : $searchpath;
 $1 = $$searchpath;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$01$lcssa$i = $$searchpath;
   label = 4;
  } else {
   $$014$i = $$searchpath;$178 = $1;
   while(1) {
    $4 = HEAP8[$$014$i>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn$i = $178;
     break L1;
    }
    $6 = ((($$014$i)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$01$lcssa$i = $6;
     label = 4;
     break;
    } else {
     $$014$i = $6;$178 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0$i = $$01$lcssa$i;
  while(1) {
   $10 = HEAP32[$w$0$i>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($w$0$i)) + 4|0);
   if ($15) {
    $w$0$i = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa$i = $w$0$i;
  } else {
   $$pn15$i = $w$0$i;
   while(1) {
    $19 = ((($$pn15$i)) + 1|0);
    $$pre$i = HEAP8[$19>>0]|0;
    $20 = ($$pre$i<<24>>24)==(0);
    if ($20) {
     $$1$lcssa$i = $19;
     break;
    } else {
     $$pn15$i = $19;
    }
   }
  }
  $21 = $$1$lcssa$i;
  $$pn$i = $21;
 }
 $$0$i = (($$pn$i) - ($1))|0;
 $22 = (($$0$i) + 5)|0;
 $23 = (_malloc($22)|0);
 $24 = ($23|0)==(0|0);
 if ($24) {
  $$0 = 0;
  return ($$0|0);
 }
 $25 = (($$0$i) + -1)|0;
 $i$0 = 0;$j$0 = 0;
 while(1) {
  $26 = ($i$0>>>0)<($$0$i>>>0);
  if (!($26)) {
   break;
  }
  $27 = ($i$0>>>0)<($25>>>0);
  if ($27) {
   $28 = (($$searchpath) + ($i$0)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = ($29<<24>>24)==(58);
   if ($30) {
    $31 = (($i$0) + 1)|0;
    $32 = (($$searchpath) + ($31)|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = ($33<<24>>24)==(58);
    if ($34) {
     $35 = (($j$0) + 1)|0;
     $36 = (($23) + ($j$0)|0);
     HEAP8[$36>>0] = 58;
     $i$10 = $31;$j$9 = $35;
    } else {
     label = 16;
    }
   } else {
    label = 16;
   }
  } else {
   label = 16;
  }
  do {
   if ((label|0) == 16) {
    label = 0;
    $37 = ($i$0|0)==(0);
    if ($37) {
     label = 18;
    } else {
     $38 = (($i$0) + -1)|0;
     $39 = (($$searchpath) + ($38)|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)==(58);
     if ($41) {
      label = 18;
     } else {
      $i$8 = $i$0;$j$5 = $j$0;
     }
    }
    do {
     if ((label|0) == 18) {
      label = 0;
      $42 = (($$searchpath) + ($i$0)|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = ($43<<24>>24)==(0);
      L31: do {
       if ($44) {
        $56 = 0;$r$0$lcssa$i67 = 20655;
       } else {
        $$08$in$i57 = 5;$49 = $43;$l$06$i59 = $42;$r$07$i58 = 20655;
        while(1) {
         $$08$i60 = (($$08$in$i57) + -1)|0;
         $45 = HEAP8[$r$07$i58>>0]|0;
         $46 = ($45<<24>>24)!=(0);
         $47 = ($$08$i60|0)!=(0);
         $or$cond$i61 = $47 & $46;
         $48 = ($49<<24>>24)==($45<<24>>24);
         $or$cond4$i62 = $48 & $or$cond$i61;
         if (!($or$cond4$i62)) {
          $56 = $49;$r$0$lcssa$i67 = $r$07$i58;
          break L31;
         }
         $50 = ((($l$06$i59)) + 1|0);
         $51 = ((($r$07$i58)) + 1|0);
         $52 = HEAP8[$50>>0]|0;
         $53 = ($52<<24>>24)==(0);
         if ($53) {
          $56 = 0;$r$0$lcssa$i67 = $51;
          break;
         } else {
          $$08$in$i57 = $$08$i60;$49 = $52;$l$06$i59 = $50;$r$07$i58 = $51;
         }
        }
       }
      } while(0);
      $54 = HEAP8[$r$0$lcssa$i67>>0]|0;
      $55 = ($56<<24>>24)==($54<<24>>24);
      if ($55) {
       $119 = $43;$i$1 = $i$0;$j$1 = $j$0;
      } else {
       L38: do {
        if ($44) {
         $68 = 0;$r$0$lcssa$i54 = 20661;
        } else {
         $$08$in$i44 = 4;$61 = $43;$l$06$i46 = $42;$r$07$i45 = 20661;
         while(1) {
          $$08$i47 = (($$08$in$i44) + -1)|0;
          $57 = HEAP8[$r$07$i45>>0]|0;
          $58 = ($57<<24>>24)!=(0);
          $59 = ($$08$i47|0)!=(0);
          $or$cond$i48 = $59 & $58;
          $60 = ($61<<24>>24)==($57<<24>>24);
          $or$cond4$i49 = $60 & $or$cond$i48;
          if (!($or$cond4$i49)) {
           $68 = $61;$r$0$lcssa$i54 = $r$07$i45;
           break L38;
          }
          $62 = ((($l$06$i46)) + 1|0);
          $63 = ((($r$07$i45)) + 1|0);
          $64 = HEAP8[$62>>0]|0;
          $65 = ($64<<24>>24)==(0);
          if ($65) {
           $68 = 0;$r$0$lcssa$i54 = $63;
           break;
          } else {
           $$08$in$i44 = $$08$i47;$61 = $64;$l$06$i46 = $62;$r$07$i45 = $63;
          }
         }
        }
       } while(0);
       $66 = HEAP8[$r$0$lcssa$i54>>0]|0;
       $67 = ($68<<24>>24)==($66<<24>>24);
       if ($67) {
        $119 = $43;$i$1 = $i$0;$j$1 = $j$0;
       } else {
        L44: do {
         if ($44) {
          $80 = 0;$r$0$lcssa$i41 = 20666;
         } else {
          $$08$in$i31 = 6;$73 = $43;$l$06$i33 = $42;$r$07$i32 = 20666;
          while(1) {
           $$08$i34 = (($$08$in$i31) + -1)|0;
           $69 = HEAP8[$r$07$i32>>0]|0;
           $70 = ($69<<24>>24)!=(0);
           $71 = ($$08$i34|0)!=(0);
           $or$cond$i35 = $71 & $70;
           $72 = ($73<<24>>24)==($69<<24>>24);
           $or$cond4$i36 = $72 & $or$cond$i35;
           if (!($or$cond4$i36)) {
            $80 = $73;$r$0$lcssa$i41 = $r$07$i32;
            break L44;
           }
           $74 = ((($l$06$i33)) + 1|0);
           $75 = ((($r$07$i32)) + 1|0);
           $76 = HEAP8[$74>>0]|0;
           $77 = ($76<<24>>24)==(0);
           if ($77) {
            $80 = 0;$r$0$lcssa$i41 = $75;
            break;
           } else {
            $$08$in$i31 = $$08$i34;$73 = $76;$l$06$i33 = $74;$r$07$i32 = $75;
           }
          }
         }
        } while(0);
        $78 = HEAP8[$r$0$lcssa$i41>>0]|0;
        $79 = ($80<<24>>24)==($78<<24>>24);
        if ($79) {
         $119 = $43;$i$1 = $i$0;$j$1 = $j$0;
        } else {
         L50: do {
          if ($44) {
           $92 = 0;$r$0$lcssa$i28 = 20673;
          } else {
           $$08$in$i18 = 5;$85 = $43;$l$06$i20 = $42;$r$07$i19 = 20673;
           while(1) {
            $$08$i21 = (($$08$in$i18) + -1)|0;
            $81 = HEAP8[$r$07$i19>>0]|0;
            $82 = ($81<<24>>24)!=(0);
            $83 = ($$08$i21|0)!=(0);
            $or$cond$i22 = $83 & $82;
            $84 = ($85<<24>>24)==($81<<24>>24);
            $or$cond4$i23 = $84 & $or$cond$i22;
            if (!($or$cond4$i23)) {
             $92 = $85;$r$0$lcssa$i28 = $r$07$i19;
             break L50;
            }
            $86 = ((($l$06$i20)) + 1|0);
            $87 = ((($r$07$i19)) + 1|0);
            $88 = HEAP8[$86>>0]|0;
            $89 = ($88<<24>>24)==(0);
            if ($89) {
             $92 = 0;$r$0$lcssa$i28 = $87;
             break;
            } else {
             $$08$in$i18 = $$08$i21;$85 = $88;$l$06$i20 = $86;$r$07$i19 = $87;
            }
           }
          }
         } while(0);
         $90 = HEAP8[$r$0$lcssa$i28>>0]|0;
         $91 = ($92<<24>>24)==($90<<24>>24);
         if ($91) {
          $119 = $43;$i$1 = $i$0;$j$1 = $j$0;
         } else {
          L56: do {
           if ($44) {
            $104 = 0;$r$0$lcssa$i15 = 20679;
           } else {
            $$08$in$i5 = 9;$97 = $43;$l$06$i7 = $42;$r$07$i6 = 20679;
            while(1) {
             $$08$i8 = (($$08$in$i5) + -1)|0;
             $93 = HEAP8[$r$07$i6>>0]|0;
             $94 = ($93<<24>>24)!=(0);
             $95 = ($$08$i8|0)!=(0);
             $or$cond$i9 = $95 & $94;
             $96 = ($97<<24>>24)==($93<<24>>24);
             $or$cond4$i10 = $96 & $or$cond$i9;
             if (!($or$cond4$i10)) {
              $104 = $97;$r$0$lcssa$i15 = $r$07$i6;
              break L56;
             }
             $98 = ((($l$06$i7)) + 1|0);
             $99 = ((($r$07$i6)) + 1|0);
             $100 = HEAP8[$98>>0]|0;
             $101 = ($100<<24>>24)==(0);
             if ($101) {
              $104 = 0;$r$0$lcssa$i15 = $99;
              break;
             } else {
              $$08$in$i5 = $$08$i8;$97 = $100;$l$06$i7 = $98;$r$07$i6 = $99;
             }
            }
           }
          } while(0);
          $102 = HEAP8[$r$0$lcssa$i15>>0]|0;
          $103 = ($104<<24>>24)==($102<<24>>24);
          if ($103) {
           $119 = $43;$i$1 = $i$0;$j$1 = $j$0;
          } else {
           L62: do {
            if ($44) {
             $116 = 0;$r$0$lcssa$i = 20689;
            } else {
             $$08$in$i = 8;$109 = $43;$l$06$i = $42;$r$07$i = 20689;
             while(1) {
              $$08$i = (($$08$in$i) + -1)|0;
              $105 = HEAP8[$r$07$i>>0]|0;
              $106 = ($105<<24>>24)!=(0);
              $107 = ($$08$i|0)!=(0);
              $or$cond$i = $107 & $106;
              $108 = ($109<<24>>24)==($105<<24>>24);
              $or$cond4$i = $108 & $or$cond$i;
              if (!($or$cond4$i)) {
               $116 = $109;$r$0$lcssa$i = $r$07$i;
               break L62;
              }
              $110 = ((($l$06$i)) + 1|0);
              $111 = ((($r$07$i)) + 1|0);
              $112 = HEAP8[$110>>0]|0;
              $113 = ($112<<24>>24)==(0);
              if ($113) {
               $116 = 0;$r$0$lcssa$i = $111;
               break;
              } else {
               $$08$in$i = $$08$i;$109 = $112;$l$06$i = $110;$r$07$i = $111;
              }
             }
            }
           } while(0);
           $114 = HEAP8[$r$0$lcssa$i>>0]|0;
           $115 = ($116<<24>>24)==($114<<24>>24);
           if ($115) {
            $119 = $43;$i$1 = $i$0;$j$1 = $j$0;
           } else {
            $i$8 = $i$0;$j$5 = $j$0;
            break;
           }
          }
         }
        }
       }
      }
      while(1) {
       $117 = (($j$1) + 1)|0;
       $118 = (($23) + ($j$1)|0);
       HEAP8[$118>>0] = $119;
       $120 = ($i$1>>>0)<($$0$i>>>0);
       if (!($120)) {
        $i$269 = $i$1;
        break;
       }
       $121 = (($$searchpath) + ($i$1)|0);
       $122 = (($i$1) + 1)|0;
       $123 = HEAP8[$121>>0]|0;
       $124 = ($123<<24>>24)==(58);
       if ($124) {
        $i$269 = $122;
        break;
       }
       $$phi$trans$insert = (($$searchpath) + ($122)|0);
       $$pre = HEAP8[$$phi$trans$insert>>0]|0;
       $119 = $$pre;$i$1 = $122;$j$1 = $117;
      }
      $125 = (($$searchpath) + ($i$269)|0);
      $126 = HEAP8[$125>>0]|0;
      $127 = ($126<<24>>24)==(58);
      if ($127) {
       $128 = (($i$269) + 1)|0;
       $$phi$trans$insert85 = (($$searchpath) + ($128)|0);
       $$pre86 = HEAP8[$$phi$trans$insert85>>0]|0;
       $130 = $$pre86;$i$3 = $128;
      } else {
       $130 = $126;$i$3 = $i$269;
      }
      $129 = ($130<<24>>24)==(47);
      if ($129) {
       $131 = (($i$3) + 1)|0;
       $132 = (($j$1) + 2)|0;
       $133 = (($23) + ($117)|0);
       HEAP8[$133>>0] = 47;
       $$phi$trans$insert87 = (($$searchpath) + ($131)|0);
       $$pre88 = HEAP8[$$phi$trans$insert87>>0]|0;
       $134 = ($$pre88<<24>>24)==(47);
       if ($134) {
        $135 = (($131) + 1)|0;
        $136 = (($132) + 1)|0;
        $137 = (($23) + ($132)|0);
        HEAP8[$137>>0] = 47;
        $$phi$trans$insert89$phi$trans$insert = (($$searchpath) + ($135)|0);
        $$pre90$pre = HEAP8[$$phi$trans$insert89$phi$trans$insert>>0]|0;
        $141 = $$pre90$pre;$i$6 = $135;$j$4 = $136;
       } else {
        $141 = $$pre88;$i$6 = $131;$j$4 = $132;
       }
      } else {
       $141 = $130;$i$6 = $i$3;$j$4 = $117;
      }
      while(1) {
       $138 = (($i$6) + 1)|0;
       $139 = (($j$4) + 1)|0;
       $140 = (($23) + ($j$4)|0);
       HEAP8[$140>>0] = $141;
       $142 = ($138>>>0)<($$0$i>>>0);
       $143 = (($$searchpath) + ($138)|0);
       $144 = HEAP8[$143>>0]|0;
       if (!($142)) {
        $150 = $144;
        break;
       }
       $145 = ($144<<24>>24)==(58);
       if ($145) {
        $150 = 58;
        break;
       }
       $146 = ($144<<24>>24)==(47);
       if ($146) {
        $150 = 47;
        break;
       } else {
        $141 = $144;$i$6 = $138;$j$4 = $139;
       }
      }
      $147 = (($i$6) + 2)|0;
      $148 = (($j$4) + 2)|0;
      $149 = (($23) + ($139)|0);
      HEAP8[$149>>0] = $150;
      $151 = (($$searchpath) + ($147)|0);
      $152 = HEAP8[$151>>0]|0;
      $153 = ($152<<24>>24)==(58);
      $154 = (($i$6) + 3)|0;
      $$ = $153 ? $154 : $147;
      $i$8 = $$;$j$5 = $148;
     }
    } while(0);
    $155 = (($$searchpath) + ($i$8)|0);
    $156 = HEAP8[$155>>0]|0;
    $157 = ($156<<24>>24)==(58);
    if (!($157)) {
     $165 = (($j$5) + 1)|0;
     $166 = (($23) + ($j$5)|0);
     HEAP8[$166>>0] = $156;
     $i$10 = $i$8;$j$9 = $165;
     break;
    }
    $158 = ($j$5|0)==(0);
    if ($158) {
     $i$10 = $i$8;$j$9 = 0;
    } else {
     $159 = (($j$5) + -1)|0;
     $160 = (($23) + ($159)|0);
     $161 = HEAP8[$160>>0]|0;
     $162 = ($161<<24>>24)==(0);
     if ($162) {
      $i$10 = $i$8;$j$9 = $j$5;
     } else {
      $163 = (($j$5) + 1)|0;
      $164 = (($23) + ($j$5)|0);
      HEAP8[$164>>0] = 0;
      $i$10 = $i$8;$j$9 = $163;
     }
    }
   }
  } while(0);
  $167 = (($i$10) + 1)|0;
  $i$0 = $167;$j$0 = $j$9;
 }
 $168 = ($j$0|0)==(0);
 if ($168) {
  $j$10 = 0;
 } else {
  $169 = (($j$0) + 1)|0;
  $170 = (($23) + ($j$0)|0);
  HEAP8[$170>>0] = 0;
  $j$10 = $169;
 }
 $171 = (($j$10) + 1)|0;
 $172 = (($23) + ($j$10)|0);
 HEAP8[$172>>0] = 46;
 $173 = (($j$10) + 2)|0;
 $174 = (($23) + ($171)|0);
 HEAP8[$174>>0] = 47;
 $175 = (($j$10) + 3)|0;
 $176 = (($23) + ($173)|0);
 HEAP8[$176>>0] = 0;
 $177 = (($23) + ($175)|0);
 HEAP8[$177>>0] = 0;
 $$0 = $23;
 return ($$0|0);
}
function _find_file_url($file,$url) {
 $file = $file|0;
 $url = $url|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i23 = 0, $$0$i$i33 = 0, $$0$i1$i = 0, $$0$i1$i25 = 0, $$0$i1$i35 = 0, $$0$i18 = 0, $$0$i27 = 0, $$0$i31 = 0, $$0$i40 = 0, $$0$lcssa$i$i = 0, $$01 = 0, $$01$lcssa$i = 0, $$01$lcssa$i$i = 0, $$01$lcssa$i6 = 0, $$0115$i$i = 0, $$014$i = 0, $$014$i3 = 0;
 var $$016$i$i = 0, $$1 = 0, $$1$lcssa$i = 0, $$1$lcssa$i14 = 0, $$1$ph$i$i = 0, $$12$ph$i$i = 0, $$128$i$i = 0, $$19$i$i = 0, $$76 = 0, $$in = 0, $$pn$i = 0, $$pn$i17 = 0, $$pn15$i = 0, $$pn15$i10 = 0, $$pre = 0, $$pre$i = 0, $$pre$i11 = 0, $$pre$phiZ2D = 0, $$pre58 = 0, $$pre59 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $buffer$0$i = 0, $cp$0 = 0, $cp$1 = 0;
 var $err$0$i = 0, $err$1$i = 0, $storemerge = 0, $storemerge$in = 0, $w$0$i = 0, $w$0$i8 = 0, $wd$0$lcssa$i$i = 0, $wd$010$i$i = 0, $ws$0$lcssa$i$i = 0, $ws$011$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $0 = $file;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa$i = $file;
   label = 4;
  } else {
   $$014$i = $file;$234 = $0;
   while(1) {
    $3 = HEAP8[$$014$i>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn$i = $234;
     break L1;
    }
    $5 = ((($$014$i)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa$i = $5;
     label = 4;
     break;
    } else {
     $$014$i = $5;$234 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0$i = $$01$lcssa$i;
  while(1) {
   $9 = HEAP32[$w$0$i>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0$i)) + 4|0);
   if ($14) {
    $w$0$i = $15;
   } else {
    break;
   }
  }
  $16 = $9&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa$i = $w$0$i;
  } else {
   $$pn15$i = $w$0$i;
   while(1) {
    $18 = ((($$pn15$i)) + 1|0);
    $$pre$i = HEAP8[$18>>0]|0;
    $19 = ($$pre$i<<24>>24)==(0);
    if ($19) {
     $$1$lcssa$i = $18;
     break;
    } else {
     $$pn15$i = $18;
    }
   }
  }
  $20 = $$1$lcssa$i;
  $$pn$i = $20;
 }
 $$0$i40 = (($0) - ($$pn$i))|0;
 $21 = (($$0$i40) + 8190)|0;
 $22 = $buf;
 $$01 = $url;$cp$0 = $buf;
 while(1) {
  $23 = HEAP8[$$01>>0]|0;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   break;
  }
  $25 = $cp$0;
  $26 = (($25) - ($22))|0;
  $27 = ($26|0)<($21|0);
  if (!($27)) {
   break;
  }
  $28 = ($23<<24>>24)==(37);
  if ($28) {
   $29 = ((($$01)) + 1|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = ($30<<24>>24)==(115);
   if ($31) {
    $32 = $0 ^ $25;
    $33 = $32 & 3;
    $34 = ($33|0)==(0);
    L22: do {
     if ($34) {
      if ($2) {
       $$0$lcssa$i$i = $file;$$01$lcssa$i$i = $cp$0;
      } else {
       $$0115$i$i = $cp$0;$$016$i$i = $file;
       while(1) {
        $35 = HEAP8[$$016$i$i>>0]|0;
        HEAP8[$$0115$i$i>>0] = $35;
        $36 = ($35<<24>>24)==(0);
        if ($36) {
         break L22;
        }
        $37 = ((($$016$i$i)) + 1|0);
        $38 = ((($$0115$i$i)) + 1|0);
        $39 = $37;
        $40 = $39 & 3;
        $41 = ($40|0)==(0);
        if ($41) {
         $$0$lcssa$i$i = $37;$$01$lcssa$i$i = $38;
         break;
        } else {
         $$0115$i$i = $38;$$016$i$i = $37;
        }
       }
      }
      $42 = HEAP32[$$0$lcssa$i$i>>2]|0;
      $43 = (($42) + -16843009)|0;
      $44 = $42 & -2139062144;
      $45 = $44 ^ -2139062144;
      $46 = $45 & $43;
      $47 = ($46|0)==(0);
      if ($47) {
       $50 = $42;$wd$010$i$i = $$01$lcssa$i$i;$ws$011$i$i = $$0$lcssa$i$i;
       while(1) {
        $48 = ((($ws$011$i$i)) + 4|0);
        $49 = ((($wd$010$i$i)) + 4|0);
        HEAP32[$wd$010$i$i>>2] = $50;
        $51 = HEAP32[$48>>2]|0;
        $52 = (($51) + -16843009)|0;
        $53 = $51 & -2139062144;
        $54 = $53 ^ -2139062144;
        $55 = $54 & $52;
        $56 = ($55|0)==(0);
        if ($56) {
         $50 = $51;$wd$010$i$i = $49;$ws$011$i$i = $48;
        } else {
         $wd$0$lcssa$i$i = $49;$ws$0$lcssa$i$i = $48;
         break;
        }
       }
      } else {
       $wd$0$lcssa$i$i = $$01$lcssa$i$i;$ws$0$lcssa$i$i = $$0$lcssa$i$i;
      }
      $$1$ph$i$i = $ws$0$lcssa$i$i;$$12$ph$i$i = $wd$0$lcssa$i$i;
      label = 21;
     } else {
      $$1$ph$i$i = $file;$$12$ph$i$i = $cp$0;
      label = 21;
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     $57 = HEAP8[$$1$ph$i$i>>0]|0;
     HEAP8[$$12$ph$i$i>>0] = $57;
     $58 = ($57<<24>>24)==(0);
     if (!($58)) {
      $$128$i$i = $$12$ph$i$i;$$19$i$i = $$1$ph$i$i;
      while(1) {
       $59 = ((($$19$i$i)) + 1|0);
       $60 = ((($$128$i$i)) + 1|0);
       $61 = HEAP8[$59>>0]|0;
       HEAP8[$60>>0] = $61;
       $62 = ($61<<24>>24)==(0);
       if ($62) {
        break;
       } else {
        $$128$i$i = $60;$$19$i$i = $59;
       }
      }
     }
    }
    $63 = $25 & 3;
    $64 = ($63|0)==(0);
    L38: do {
     if ($64) {
      $$01$lcssa$i6 = $cp$0;
      label = 26;
     } else {
      $$014$i3 = $cp$0;$235 = $25;
      while(1) {
       $65 = HEAP8[$$014$i3>>0]|0;
       $66 = ($65<<24>>24)==(0);
       if ($66) {
        $$pn$i17 = $235;
        break L38;
       }
       $67 = ((($$014$i3)) + 1|0);
       $68 = $67;
       $69 = $68 & 3;
       $70 = ($69|0)==(0);
       if ($70) {
        $$01$lcssa$i6 = $67;
        label = 26;
        break;
       } else {
        $$014$i3 = $67;$235 = $68;
       }
      }
     }
    } while(0);
    if ((label|0) == 26) {
     label = 0;
     $w$0$i8 = $$01$lcssa$i6;
     while(1) {
      $71 = HEAP32[$w$0$i8>>2]|0;
      $72 = (($71) + -16843009)|0;
      $73 = $71 & -2139062144;
      $74 = $73 ^ -2139062144;
      $75 = $74 & $72;
      $76 = ($75|0)==(0);
      $77 = ((($w$0$i8)) + 4|0);
      if ($76) {
       $w$0$i8 = $77;
      } else {
       break;
      }
     }
     $78 = $71&255;
     $79 = ($78<<24>>24)==(0);
     if ($79) {
      $$1$lcssa$i14 = $w$0$i8;
     } else {
      $$pn15$i10 = $w$0$i8;
      while(1) {
       $80 = ((($$pn15$i10)) + 1|0);
       $$pre$i11 = HEAP8[$80>>0]|0;
       $81 = ($$pre$i11<<24>>24)==(0);
       if ($81) {
        $$1$lcssa$i14 = $80;
        break;
       } else {
        $$pn15$i10 = $80;
       }
      }
     }
     $82 = $$1$lcssa$i14;
     $$pn$i17 = $82;
    }
    $$0$i18 = (($$pn$i17) - ($25))|0;
    $83 = (($cp$0) + ($$0$i18)|0);
    $$1 = $29;$cp$1 = $83;
   } else {
    label = 32;
   }
  } else {
   label = 32;
  }
  if ((label|0) == 32) {
   label = 0;
   $84 = ((($cp$0)) + 1|0);
   HEAP8[$cp$0>>0] = $23;
   $$1 = $$01;$cp$1 = $84;
  }
  $85 = ((($$1)) + 1|0);
  $$01 = $85;$cp$0 = $cp$1;
 }
 HEAP8[$cp$0>>0] = 0;
 $86 = (_hopen($buf,21885)|0);
 $87 = ($86|0)==(0|0);
 if ($87) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $88 = (_malloc(32)|0);
 $89 = ($88|0)==(0|0);
 if ($89) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $90 = ((($88)) + 20|0);
 HEAP32[$90>>2] = 0;
 $91 = ((($88)) + 24|0);
 HEAP32[$91>>2] = 0;
 $92 = ((($88)) + 28|0);
 HEAP32[$92>>2] = 0;
 $93 = ((($88)) + 16|0);
 ;HEAP32[$88>>2]=0|0;HEAP32[$88+4>>2]=0|0;HEAP32[$88+8>>2]=0|0;HEAP32[$88+12>>2]=0|0;
 HEAP32[$93>>2] = 3;
 $94 = ((($86)) + 8|0);
 $95 = ((($86)) + 4|0);
 $96 = ((($88)) + 16|0);
 $97 = ((($88)) + 20|0);
 $98 = ((($88)) + 24|0);
 $99 = ((($88)) + 8|0);
 $100 = ((($88)) + 4|0);
 $101 = ((($88)) + 28|0);
 L62: while(1) {
  $102 = HEAP32[$94>>2]|0;
  $103 = HEAP32[$95>>2]|0;
  $104 = (($102) - ($103))|0;
  $105 = ($104>>>0)>(8192);
  $106 = $103;
  $$ = $105 ? 8192 : $104;
  _memcpy(($buf|0),($106|0),($$|0))|0;
  $107 = HEAP32[$95>>2]|0;
  $108 = (($107) + ($$)|0);
  HEAP32[$95>>2] = $108;
  $109 = ($$|0)==(8192);
  if ($109) {
   $120 = 8192;
  } else {
   $110 = (_hread2($86,$buf,8192,$$)|0);
   $111 = ($110|0)>(0);
   if ($111) {
    $120 = $110;
   } else {
    break;
   }
  }
  $112 = HEAP32[$96>>2]|0;
  $113 = $112 & 2;
  $114 = ($113|0)==(0);
  if ($114) {
   label = 50;
   break;
  }
  $115 = $112 & 4;
  $116 = ($115|0)==(0);
  if (!($116)) {
   $117 = HEAP32[$97>>2]|0;
   HEAP32[$98>>2] = $117;
  }
  $$pre58 = HEAP32[$99>>2]|0;
  $122 = $$pre58;
  while(1) {
   $118 = HEAP32[$98>>2]|0;
   $119 = (($118) + ($120))|0;
   $121 = ($119>>>0)>($122>>>0);
   if (!($121)) {
    break;
   }
   $123 = ($122|0)==(0);
   $124 = $122 << 1;
   $$76 = $123 ? 1024 : $124;
   $125 = HEAP32[$100>>2]|0;
   $126 = (_realloc($125,$$76)|0);
   $127 = ($126|0)==(0|0);
   if ($127) {
    label = 50;
    break L62;
   }
   HEAP32[$99>>2] = $$76;
   HEAP32[$100>>2] = $126;
   $122 = $$76;
  }
  $128 = HEAP32[$101>>2]|0;
  $129 = ($118>>>0)<($128>>>0);
  if ($129) {
   HEAP32[$101>>2] = $118;
  }
  $130 = HEAP32[$100>>2]|0;
  $131 = (($130) + ($118)|0);
  _memcpy(($131|0),($buf|0),($120|0))|0;
  $132 = HEAP32[$98>>2]|0;
  $133 = (($132) + ($120))|0;
  HEAP32[$98>>2] = $133;
  $134 = HEAP32[$97>>2]|0;
  $135 = ($134>>>0)<($133>>>0);
  if (!($135)) {
   continue;
  }
  HEAP32[$97>>2] = $133;
 }
 if ((label|0) == 50) {
  $136 = HEAP32[6773]|0;
  $137 = ($136|0)==(0|0);
  if ($137) {
   $$0$i$i23 = 27136;
  } else {
   $138 = (_pthread_self()|0);
   $139 = ((($138)) + 64|0);
   $140 = HEAP32[$139>>2]|0;
   $$0$i$i23 = $140;
  }
  $141 = HEAP32[$$0$i$i23>>2]|0;
  $142 = ((($86)) + 16|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = ((($143)) + 16|0);
  $145 = HEAP32[$144>>2]|0;
  (FUNCTION_TABLE_ii[$145 & 63]($86)|0);
  $146 = HEAP32[6773]|0;
  $147 = ($146|0)==(0|0);
  if ($147) {
   $$0$i$i33 = 27136;
  } else {
   $148 = (_pthread_self()|0);
   $149 = ((($148)) + 64|0);
   $150 = HEAP32[$149>>2]|0;
   $$0$i$i33 = $150;
  }
  $151 = HEAP32[$$0$i$i33>>2]|0;
  $152 = HEAP32[$86>>2]|0;
  _free($152);
  _free($86);
  $153 = HEAP32[6773]|0;
  $154 = ($153|0)==(0|0);
  if ($154) {
   $$0$i1$i35 = 27136;
  } else {
   $155 = (_pthread_self()|0);
   $156 = ((($155)) + 64|0);
   $157 = HEAP32[$156>>2]|0;
   $$0$i1$i35 = $157;
  }
  HEAP32[$$0$i1$i35>>2] = $151;
  $158 = HEAP32[6773]|0;
  $159 = ($158|0)==(0|0);
  if ($159) {
   $$0$i1$i25 = 27136;
  } else {
   $160 = (_pthread_self()|0);
   $161 = ((($160)) + 64|0);
   $162 = HEAP32[$161>>2]|0;
   $$0$i1$i25 = $162;
  }
  HEAP32[$$0$i1$i25>>2] = $141;
  $163 = HEAP32[$100>>2]|0;
  $164 = ($163|0)==(0|0);
  if (!($164)) {
   _free($163);
  }
  _free($88);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $165 = ((($86)) + 28|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = HEAP32[$95>>2]|0;
 $168 = HEAP32[$94>>2]|0;
 $169 = ($167>>>0)>($168>>>0);
 do {
  if ($169) {
   $170 = HEAP32[$86>>2]|0;
   $171 = ((($86)) + 16|0);
   $172 = ((($86)) + 20|0);
   $$in = $167;$buffer$0$i = $170;
   while(1) {
    $173 = ($buffer$0$i>>>0)<($$in>>>0);
    if (!($173)) {
     label = 69;
     break;
    }
    $174 = $$in;
    $175 = HEAP32[$171>>2]|0;
    $176 = ((($175)) + 4|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = $buffer$0$i;
    $179 = (($174) - ($178))|0;
    $180 = (FUNCTION_TABLE_iiii[$177 & 127]($86,$buffer$0$i,$179)|0);
    $181 = ($180|0)<(0);
    if ($181) {
     label = 66;
     break;
    }
    $187 = (($buffer$0$i) + ($180)|0);
    $188 = HEAP32[$172>>2]|0;
    $189 = (($188) + ($180))|0;
    HEAP32[$172>>2] = $189;
    $$pre = HEAP32[$95>>2]|0;
    $$in = $$pre;$buffer$0$i = $187;
   }
   if ((label|0) == 66) {
    $182 = HEAP32[6773]|0;
    $183 = ($182|0)==(0|0);
    if ($183) {
     $storemerge$in = 27136;
    } else {
     $184 = (_pthread_self()|0);
     $185 = ((($184)) + 64|0);
     $186 = HEAP32[$185>>2]|0;
     $storemerge$in = $186;
    }
   }
   else if ((label|0) == 69) {
    $190 = HEAP32[$86>>2]|0;
    HEAP32[$95>>2] = $190;
    $191 = HEAP32[$171>>2]|0;
    $192 = ((($191)) + 12|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = ($193|0)==(0|0);
    if ($194) {
     $$pre$phiZ2D = $171;$err$0$i = $166;
     break;
    }
    $195 = (FUNCTION_TABLE_ii[$193 & 63]($86)|0);
    $196 = ($195|0)<(0);
    if (!($196)) {
     $$pre$phiZ2D = $171;$err$0$i = $166;
     break;
    }
    $197 = HEAP32[6773]|0;
    $198 = ($197|0)==(0|0);
    if ($198) {
     $storemerge$in = 27136;
    } else {
     $199 = (_pthread_self()|0);
     $200 = ((($199)) + 64|0);
     $201 = HEAP32[$200>>2]|0;
     $storemerge$in = $201;
    }
   }
   $storemerge = HEAP32[$storemerge$in>>2]|0;
   HEAP32[$165>>2] = $storemerge;
   $$pre$phiZ2D = $171;$err$0$i = $storemerge;
  } else {
   $$pre59 = ((($86)) + 16|0);
   $$pre$phiZ2D = $$pre59;$err$0$i = $166;
  }
 } while(0);
 $202 = HEAP32[$$pre$phiZ2D>>2]|0;
 $203 = ((($202)) + 16|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = (FUNCTION_TABLE_ii[$204 & 63]($86)|0);
 $206 = ($205|0)<(0);
 $207 = HEAP32[6773]|0;
 if ($206) {
  $208 = ($207|0)==(0|0);
  if ($208) {
   $$0$i31 = 27136;
  } else {
   $209 = (_pthread_self()|0);
   $210 = ((($209)) + 64|0);
   $211 = HEAP32[$210>>2]|0;
   $$0$i31 = $211;
  }
  $212 = HEAP32[$$0$i31>>2]|0;
  $err$1$i = $212;
 } else {
  $err$1$i = $err$0$i;
 }
 $213 = ($207|0)==(0|0);
 if ($213) {
  $$0$i$i = 27136;
 } else {
  $214 = (_pthread_self()|0);
  $215 = ((($214)) + 64|0);
  $216 = HEAP32[$215>>2]|0;
  $$0$i$i = $216;
 }
 $217 = HEAP32[$$0$i$i>>2]|0;
 $218 = HEAP32[$86>>2]|0;
 _free($218);
 _free($86);
 $219 = HEAP32[6773]|0;
 $220 = ($219|0)==(0|0);
 if ($220) {
  $$0$i1$i = 27136;
 } else {
  $221 = (_pthread_self()|0);
  $222 = ((($221)) + 64|0);
  $223 = HEAP32[$222>>2]|0;
  $$0$i1$i = $223;
 }
 HEAP32[$$0$i1$i>>2] = $217;
 $224 = ($err$1$i|0)==(0);
 if ($224) {
  $230 = ($110|0)<(0);
  if (!($230)) {
   HEAP32[$98>>2] = 0;
   $233 = ((($88)) + 12|0);
   HEAP32[$233>>2] = 0;
   $$0 = $88;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $225 = HEAP32[6773]|0;
  $226 = ($225|0)==(0|0);
  if ($226) {
   $$0$i27 = 27136;
  } else {
   $227 = (_pthread_self()|0);
   $228 = ((($227)) + 64|0);
   $229 = HEAP32[$228>>2]|0;
   $$0$i27 = $229;
  }
  HEAP32[$$0$i27>>2] = $err$1$i;
 }
 $231 = HEAP32[$100>>2]|0;
 $232 = ($231|0)==(0|0);
 if (!($232)) {
  _free($231);
 }
 _free($88);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _expand_path($file,$dirname) {
 $file = $file|0;
 $dirname = $dirname|0;
 var $$$0$i = 0, $$0 = 0, $$0$i = 0, $$0$i125 = 0, $$0$i143 = 0, $$0$i161 = 0, $$0$i179 = 0, $$0$i20 = 0, $$0$i338 = 0, $$0$i344 = 0, $$0$i361 = 0, $$0$i38 = 0, $$0$i62 = 0, $$0$i80 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i191591 = 0, $$0$lcssa$i$i238 = 0, $$0$lcssa$i$i285 = 0, $$0$lcssa$i$i40 = 0, $$0$lcssa$i$i88 = 0;
 var $$01$lcssa$i = 0, $$01$lcssa$i$i = 0, $$01$lcssa$i$i89 = 0, $$01$lcssa$i113 = 0, $$01$lcssa$i131 = 0, $$01$lcssa$i149 = 0, $$01$lcssa$i167 = 0, $$01$lcssa$i26 = 0, $$01$lcssa$i326 = 0, $$01$lcssa$i349 = 0, $$01$lcssa$i50 = 0, $$01$lcssa$i68 = 0, $$01$lcssa$i8 = 0, $$01$ph = 0, $$0115$i$i = 0, $$0115$i$i85 = 0, $$014$i = 0, $$014$i110 = 0, $$014$i128 = 0, $$014$i146 = 0;
 var $$014$i164 = 0, $$014$i23 = 0, $$014$i323 = 0, $$014$i346 = 0, $$014$i47 = 0, $$014$i5 = 0, $$014$i65 = 0, $$016$i$i = 0, $$016$i$i84 = 0, $$02 = 0, $$02$lcssa$i = 0, $$02$ph = 0, $$0211$i = 0, $$031$i$i = 0, $$031$i$i184 = 0, $$031$i$i231 = 0, $$031$i$i278 = 0, $$04$lcssa$i$i = 0, $$04$lcssa$i$i192592 = 0, $$04$lcssa$i$i239 = 0;
 var $$04$lcssa$i$i286 = 0, $$0430$i$i = 0, $$0430$i$i185 = 0, $$0430$i$i232 = 0, $$0430$i$i279 = 0, $$06$lcssa$i$i = 0, $$06$lcssa$i$i193593 = 0, $$06$lcssa$i$i240 = 0, $$06$lcssa$i$i287 = 0, $$0629$i$i = 0, $$0629$i$i186 = 0, $$0629$i$i233 = 0, $$0629$i$i280 = 0, $$1 = 0, $$1$i = 0, $$1$lcssa$i = 0, $$1$lcssa$i$i = 0, $$1$lcssa$i$i211 = 0, $$1$lcssa$i$i258 = 0, $$1$lcssa$i$i305 = 0;
 var $$1$lcssa$i121 = 0, $$1$lcssa$i139 = 0, $$1$lcssa$i157 = 0, $$1$lcssa$i16 = 0, $$1$lcssa$i175 = 0, $$1$lcssa$i334 = 0, $$1$lcssa$i34 = 0, $$1$lcssa$i357 = 0, $$1$lcssa$i58 = 0, $$1$lcssa$i76 = 0, $$1$ph$i$i = 0, $$1$ph$i$i100 = 0, $$117$i$i = 0, $$117$i$i203 = 0, $$117$i$i250 = 0, $$117$i$i297 = 0, $$12$ph$i$i = 0, $$12$ph$i$i99 = 0, $$128$i$i = 0, $$128$i$i104 = 0;
 var $$15$ph$i$i = 0, $$15$ph$i$i261 = 0, $$15$ph$i$i308 = 0, $$1511$i$i = 0, $$1511$i$i219 = 0, $$1511$i$i266 = 0, $$1511$i$i313 = 0, $$17$ph$i$i = 0, $$17$ph$i$i260 = 0, $$17$ph$i$i307 = 0, $$1710$i$i = 0, $$1710$i$i220 = 0, $$1710$i$i267 = 0, $$1710$i$i314 = 0, $$19$i$i = 0, $$19$i$i103 = 0, $$2$ph$i$i = 0, $$2$ph$i$i262 = 0, $$2$ph$i$i309 = 0, $$212$i$i = 0;
 var $$212$i$i218 = 0, $$212$i$i265 = 0, $$212$i$i312 = 0, $$28$i$i = 0, $$28$i$i225 = 0, $$28$i$i225$ph = 0, $$28$i$i272 = 0, $$28$i$i319 = 0, $$3$i$i = 0, $$3$i$i226 = 0, $$3$i$i226$ph = 0, $$3$i$i273 = 0, $$3$i$i320 = 0, $$lcssa$i$i = 0, $$lcssa$i$i237 = 0, $$lcssa$i$i284 = 0, $$pn = 0, $$pn$i = 0, $$pn$i124 = 0, $$pn$i142 = 0;
 var $$pn$i160 = 0, $$pn$i178 = 0, $$pn$i19 = 0, $$pn$i337 = 0, $$pn$i360 = 0, $$pn$i37 = 0, $$pn$i61 = 0, $$pn$i79 = 0, $$pn15$i = 0, $$pn15$i117 = 0, $$pn15$i12 = 0, $$pn15$i135 = 0, $$pn15$i153 = 0, $$pn15$i171 = 0, $$pn15$i30 = 0, $$pn15$i330 = 0, $$pn15$i353 = 0, $$pn15$i54 = 0, $$pn15$i72 = 0, $$pn3 = 0;
 var $$pre = 0, $$pre$i = 0, $$pre$i118 = 0, $$pre$i13 = 0, $$pre$i136 = 0, $$pre$i154 = 0, $$pre$i172 = 0, $$pre$i31 = 0, $$pre$i331 = 0, $$pre$i354 = 0, $$pre$i55 = 0, $$pre$i73 = 0, $$pre$phiZ2D = 0, $$pre474 = 0, $$pre475 = 0, $$pre476 = 0, $$pre477 = 0, $$pre478 = 0, $$sink$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $f$i = 0, $len$1$ph = 0, $leninc = 0, $not$ = 0, $or$cond$i$i = 0, $or$cond$i$i188 = 0, $or$cond$i$i235 = 0, $or$cond$i$i282 = 0, $or$cond28$i$i = 0, $or$cond28$i$i228 = 0, $or$cond28$i$i275 = 0;
 var $path_end$0 = 0, $path_end$0$ph = 0, $path_end$1 = 0, $w$0$i = 0, $w$0$i10 = 0, $w$0$i115 = 0, $w$0$i133 = 0, $w$0$i151 = 0, $w$0$i169 = 0, $w$0$i28 = 0, $w$0$i328 = 0, $w$0$i351 = 0, $w$0$i52 = 0, $w$0$i70 = 0, $w$0$lcssa$i = 0, $w$08$i = 0, $wd$0$lcssa$i$i = 0, $wd$0$lcssa$i$i210 = 0, $wd$0$lcssa$i$i257 = 0, $wd$0$lcssa$i$i304 = 0;
 var $wd$0$lcssa$i$i42 = 0, $wd$0$lcssa$i$i97 = 0, $wd$010$i$i = 0, $wd$010$i$i93 = 0, $wd$018$i$i = 0, $wd$018$i$i202 = 0, $wd$018$i$i249 = 0, $wd$018$i$i296 = 0, $ws$0$lcssa$i$i = 0, $ws$0$lcssa$i$i209 = 0, $ws$0$lcssa$i$i256 = 0, $ws$0$lcssa$i$i303 = 0, $ws$0$lcssa$i$i41 = 0, $ws$0$lcssa$i$i96 = 0, $ws$011$i$i = 0, $ws$011$i$i92 = 0, $ws$019$i$i = 0, $ws$019$i$i201 = 0, $ws$019$i$i248 = 0, $ws$019$i$i295 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 $0 = $dirname;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa$i = $dirname;
   label = 4;
  } else {
   $$014$i = $dirname;$498 = $0;
   while(1) {
    $3 = HEAP8[$$014$i>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn$i = $498;
     break L1;
    }
    $5 = ((($$014$i)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa$i = $5;
     label = 4;
     break;
    } else {
     $$014$i = $5;$498 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0$i = $$01$lcssa$i;
  while(1) {
   $9 = HEAP32[$w$0$i>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0$i)) + 4|0);
   if ($14) {
    $w$0$i = $15;
   } else {
    break;
   }
  }
  $16 = $9&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa$i = $w$0$i;
  } else {
   $$pn15$i = $w$0$i;
   while(1) {
    $18 = ((($$pn15$i)) + 1|0);
    $$pre$i = HEAP8[$18>>0]|0;
    $19 = ($$pre$i<<24>>24)==(0);
    if ($19) {
     $$1$lcssa$i = $18;
     break;
    } else {
     $$pn15$i = $18;
    }
   }
  }
  $20 = $$1$lcssa$i;
  $$pn$i = $20;
 }
 $$0$i = (($$pn$i) - ($0))|0;
 $21 = $file;
 $22 = $21 & 3;
 $23 = ($22|0)==(0);
 L15: do {
  if ($23) {
   $$01$lcssa$i326 = $file;
   label = 12;
  } else {
   $$014$i323 = $file;$499 = $21;
   while(1) {
    $24 = HEAP8[$$014$i323>>0]|0;
    $25 = ($24<<24>>24)==(0);
    if ($25) {
     $$pn$i337 = $499;
     break L15;
    }
    $26 = ((($$014$i323)) + 1|0);
    $27 = $26;
    $28 = $27 & 3;
    $29 = ($28|0)==(0);
    if ($29) {
     $$01$lcssa$i326 = $26;
     label = 12;
     break;
    } else {
     $$014$i323 = $26;$499 = $27;
    }
   }
  }
 } while(0);
 if ((label|0) == 12) {
  $w$0$i328 = $$01$lcssa$i326;
  while(1) {
   $30 = HEAP32[$w$0$i328>>2]|0;
   $31 = (($30) + -16843009)|0;
   $32 = $30 & -2139062144;
   $33 = $32 ^ -2139062144;
   $34 = $33 & $31;
   $35 = ($34|0)==(0);
   $36 = ((($w$0$i328)) + 4|0);
   if ($35) {
    $w$0$i328 = $36;
   } else {
    break;
   }
  }
  $37 = $30&255;
  $38 = ($37<<24>>24)==(0);
  if ($38) {
   $$1$lcssa$i334 = $w$0$i328;
  } else {
   $$pn15$i330 = $w$0$i328;
   while(1) {
    $39 = ((($$pn15$i330)) + 1|0);
    $$pre$i331 = HEAP8[$39>>0]|0;
    $40 = ($$pre$i331<<24>>24)==(0);
    if ($40) {
     $$1$lcssa$i334 = $39;
     break;
    } else {
     $$pn15$i330 = $39;
    }
   }
  }
  $41 = $$1$lcssa$i334;
  $$pn$i337 = $41;
 }
 $$0$i338 = (($$pn$i337) - ($21))|0;
 $42 = (($$0$i) + ($$0$i338))|0;
 $43 = (($42) + 2)|0;
 $44 = (_malloc($43)|0);
 $45 = ($44|0)==(0|0);
 if ($45) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $46 = (($$0$i) + -1)|0;
 $47 = (($dirname) + ($46)|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = ($48<<24>>24)==(47);
 $$$0$i = $49 ? $46 : $$0$i;
 $50 = HEAP8[$file>>0]|0;
 $51 = ($50<<24>>24)==(47);
 do {
  if (!($51)) {
   $52 = ($$$0$i|0)==(1);
   if ($52) {
    $53 = HEAP8[$dirname>>0]|0;
    $54 = ($53<<24>>24)==(46);
    if ($54) {
     break;
    }
   }
   HEAP8[$44>>0] = 0;
   $73 = ((($f$i)) + 4|0);
   $74 = ((($f$i)) + 44|0);
   $75 = ((($f$i)) + 8|0);
   $76 = ((($f$i)) + 76|0);
   $77 = ((($f$i)) + 104|0);
   $78 = ((($f$i)) + 108|0);
   $79 = ((($f$i)) + 100|0);
   $$01$ph = $file;$$02$ph = $dirname;$len$1$ph = $$$0$i;$path_end$0$ph = $44;
   L37: while(1) {
    $$02 = $$02$ph;$path_end$0 = $path_end$0$ph;
    while(1) {
     $80 = $$02;
     $81 = $80 & 3;
     $82 = ($81|0)==(0);
     L41: do {
      if ($82) {
       $$02$lcssa$i = $$02;
       label = 36;
      } else {
       $$0211$i = $$02;
       while(1) {
        $83 = HEAP8[$$0211$i>>0]|0;
        switch ($83<<24>>24) {
        case 0: case 37:  {
         $$0$i344 = $$0211$i;$111 = $83;
         break L41;
         break;
        }
        default: {
        }
        }
        $84 = ((($$0211$i)) + 1|0);
        $85 = $84;
        $86 = $85 & 3;
        $87 = ($86|0)==(0);
        if ($87) {
         $$02$lcssa$i = $84;
         label = 36;
         break L41;
        } else {
         $$0211$i = $84;
        }
       }
      }
     } while(0);
     L45: do {
      if ((label|0) == 36) {
       label = 0;
       $88 = HEAP32[$$02$lcssa$i>>2]|0;
       $89 = (($88) + -16843009)|0;
       $90 = $88 & -2139062144;
       $91 = $90 ^ -2139062144;
       $92 = $91 & $89;
       $93 = ($92|0)==(0);
       L47: do {
        if ($93) {
         $95 = $88;$w$08$i = $$02$lcssa$i;
         while(1) {
          $94 = $95 ^ 623191333;
          $96 = (($94) + -16843009)|0;
          $97 = $95 & -2139062144;
          $98 = $97 ^ -2139062144;
          $99 = $98 & $96;
          $100 = ($99|0)==(0);
          if (!($100)) {
           $w$0$lcssa$i = $w$08$i;
           break L47;
          }
          $101 = ((($w$08$i)) + 4|0);
          $102 = HEAP32[$101>>2]|0;
          $103 = (($102) + -16843009)|0;
          $104 = $102 & -2139062144;
          $105 = $104 ^ -2139062144;
          $106 = $105 & $103;
          $107 = ($106|0)==(0);
          if ($107) {
           $95 = $102;$w$08$i = $101;
          } else {
           $w$0$lcssa$i = $101;
           break;
          }
         }
        } else {
         $w$0$lcssa$i = $$02$lcssa$i;
        }
       } while(0);
       $$1$i = $w$0$lcssa$i;
       while(1) {
        $108 = HEAP8[$$1$i>>0]|0;
        $109 = ((($$1$i)) + 1|0);
        switch ($108<<24>>24) {
        case 0: case 37:  {
         $$0$i344 = $$1$i;$111 = $108;
         break L45;
         break;
        }
        default: {
         $$1$i = $109;
        }
        }
       }
      }
     } while(0);
     $110 = ($$0$i344|0)==(0|0);
     $not$ = ($111<<24>>24)!=(37);
     $112 = $110 | $not$;
     if ($112) {
      break L37;
     }
     $113 = ((($$0$i344)) + 1|0);
     HEAP32[$f$i>>2] = 0;
     HEAP32[$73>>2] = $113;
     HEAP32[$74>>2] = $113;
     $114 = ($113|0)<(0|0);
     $115 = ((($$0$i344)) + -2147483648|0);
     $$sink$i = $114 ? (-1) : $115;
     HEAP32[$75>>2] = $$sink$i;
     HEAP32[$76>>2] = -1;
     HEAP32[$77>>2] = 0;
     $116 = $$sink$i;
     $117 = $113;
     $118 = (($116) - ($117))|0;
     HEAP32[$78>>2] = $118;
     HEAP32[$79>>2] = $116;
     $119 = (___intscan($f$i,10,1,-2147483648,0)|0);
     $120 = tempRet0;
     $121 = HEAP32[$78>>2]|0;
     $122 = HEAP32[$73>>2]|0;
     $123 = HEAP32[$75>>2]|0;
     $124 = (($122) + ($121))|0;
     $125 = (($124) - ($123))|0;
     $126 = (($113) + ($125)|0);
     $127 = HEAP8[$126>>0]|0;
     $128 = ($127<<24>>24)==(115);
     if ($128) {
      break;
     }
     $129 = ((($126)) + 1|0);
     $130 = $129;
     $131 = (($130) - ($80))|0;
     $132 = $path_end$0;
     $133 = $80 ^ $132;
     $134 = $133 & 3;
     $135 = ($134|0)==(0);
     L57: do {
      if ($135) {
       $136 = ($81|0)!=(0);
       $137 = ($129|0)!=($$02|0);
       $or$cond28$i$i275 = $137 & $136;
       if ($or$cond28$i$i275) {
        $$031$i$i278 = $131;$$0430$i$i279 = $$02;$$0629$i$i280 = $path_end$0;
        while(1) {
         $138 = HEAP8[$$0430$i$i279>>0]|0;
         HEAP8[$$0629$i$i280>>0] = $138;
         $139 = ($138<<24>>24)==(0);
         if ($139) {
          $$28$i$i319 = $$0629$i$i280;$$3$i$i320 = $$031$i$i278;
          break L57;
         }
         $140 = (($$031$i$i278) + -1)|0;
         $141 = ((($$0430$i$i279)) + 1|0);
         $142 = ((($$0629$i$i280)) + 1|0);
         $143 = $141;
         $144 = $143 & 3;
         $145 = ($144|0)!=(0);
         $146 = ($140|0)!=(0);
         $or$cond$i$i282 = $146 & $145;
         if ($or$cond$i$i282) {
          $$031$i$i278 = $140;$$0430$i$i279 = $141;$$0629$i$i280 = $142;
         } else {
          $$0$lcssa$i$i285 = $140;$$04$lcssa$i$i286 = $141;$$06$lcssa$i$i287 = $142;$$lcssa$i$i284 = $146;
          break;
         }
        }
       } else {
        $$0$lcssa$i$i285 = $131;$$04$lcssa$i$i286 = $$02;$$06$lcssa$i$i287 = $path_end$0;$$lcssa$i$i284 = $137;
       }
       if ($$lcssa$i$i284) {
        $$pre = HEAP8[$$04$lcssa$i$i286>>0]|0;
        $147 = ($$pre<<24>>24)==(0);
        if ($147) {
         $$28$i$i319 = $$06$lcssa$i$i287;$$3$i$i320 = $$0$lcssa$i$i285;
        } else {
         $148 = ($$0$lcssa$i$i285>>>0)>(3);
         L66: do {
          if ($148) {
           $$117$i$i297 = $$0$lcssa$i$i285;$wd$018$i$i296 = $$06$lcssa$i$i287;$ws$019$i$i295 = $$04$lcssa$i$i286;
           while(1) {
            $149 = HEAP32[$ws$019$i$i295>>2]|0;
            $150 = (($149) + -16843009)|0;
            $151 = $149 & -2139062144;
            $152 = $151 ^ -2139062144;
            $153 = $152 & $150;
            $154 = ($153|0)==(0);
            if (!($154)) {
             $$1$lcssa$i$i305 = $$117$i$i297;$wd$0$lcssa$i$i304 = $wd$018$i$i296;$ws$0$lcssa$i$i303 = $ws$019$i$i295;
             break L66;
            }
            HEAP32[$wd$018$i$i296>>2] = $149;
            $155 = (($$117$i$i297) + -4)|0;
            $156 = ((($ws$019$i$i295)) + 4|0);
            $157 = ((($wd$018$i$i296)) + 4|0);
            $158 = ($155>>>0)>(3);
            if ($158) {
             $$117$i$i297 = $155;$wd$018$i$i296 = $157;$ws$019$i$i295 = $156;
            } else {
             $$1$lcssa$i$i305 = $155;$wd$0$lcssa$i$i304 = $157;$ws$0$lcssa$i$i303 = $156;
             break;
            }
           }
          } else {
           $$1$lcssa$i$i305 = $$0$lcssa$i$i285;$wd$0$lcssa$i$i304 = $$06$lcssa$i$i287;$ws$0$lcssa$i$i303 = $$04$lcssa$i$i286;
          }
         } while(0);
         $$15$ph$i$i308 = $ws$0$lcssa$i$i303;$$17$ph$i$i307 = $wd$0$lcssa$i$i304;$$2$ph$i$i309 = $$1$lcssa$i$i305;
         label = 53;
        }
       } else {
        $$28$i$i319 = $$06$lcssa$i$i287;$$3$i$i320 = 0;
       }
      } else {
       $$15$ph$i$i308 = $$02;$$17$ph$i$i307 = $path_end$0;$$2$ph$i$i309 = $131;
       label = 53;
      }
     } while(0);
     L71: do {
      if ((label|0) == 53) {
       label = 0;
       $159 = ($$2$ph$i$i309|0)==(0);
       if ($159) {
        $$28$i$i319 = $$17$ph$i$i307;$$3$i$i320 = 0;
       } else {
        $$1511$i$i313 = $$15$ph$i$i308;$$1710$i$i314 = $$17$ph$i$i307;$$212$i$i312 = $$2$ph$i$i309;
        while(1) {
         $160 = HEAP8[$$1511$i$i313>>0]|0;
         HEAP8[$$1710$i$i314>>0] = $160;
         $161 = ($160<<24>>24)==(0);
         if ($161) {
          $$28$i$i319 = $$1710$i$i314;$$3$i$i320 = $$212$i$i312;
          break L71;
         }
         $162 = (($$212$i$i312) + -1)|0;
         $163 = ((($$1511$i$i313)) + 1|0);
         $164 = ((($$1710$i$i314)) + 1|0);
         $165 = ($162|0)==(0);
         if ($165) {
          $$28$i$i319 = $164;$$3$i$i320 = 0;
          break;
         } else {
          $$1511$i$i313 = $163;$$1710$i$i314 = $164;$$212$i$i312 = $162;
         }
        }
       }
      }
     } while(0);
     _memset(($$28$i$i319|0),0,($$3$i$i320|0))|0;
     $166 = (($path_end$0) + ($131)|0);
     $$02 = $129;$path_end$0 = $166;
    }
    $167 = $$0$i344;
    $168 = (($167) - ($80))|0;
    $169 = $path_end$0;
    $170 = $80 ^ $169;
    $171 = $170 & 3;
    $172 = ($171|0)==(0);
    L78: do {
     if ($172) {
      $173 = ($81|0)!=(0);
      $174 = ($$0$i344|0)!=($$02|0);
      $or$cond28$i$i228 = $174 & $173;
      if ($or$cond28$i$i228) {
       $$031$i$i231 = $168;$$0430$i$i232 = $$02;$$0629$i$i233 = $path_end$0;
       while(1) {
        $175 = HEAP8[$$0430$i$i232>>0]|0;
        HEAP8[$$0629$i$i233>>0] = $175;
        $176 = ($175<<24>>24)==(0);
        if ($176) {
         $$28$i$i272 = $$0629$i$i233;$$3$i$i273 = $$031$i$i231;
         break L78;
        }
        $177 = (($$031$i$i231) + -1)|0;
        $178 = ((($$0430$i$i232)) + 1|0);
        $179 = ((($$0629$i$i233)) + 1|0);
        $180 = $178;
        $181 = $180 & 3;
        $182 = ($181|0)!=(0);
        $183 = ($177|0)!=(0);
        $or$cond$i$i235 = $183 & $182;
        if ($or$cond$i$i235) {
         $$031$i$i231 = $177;$$0430$i$i232 = $178;$$0629$i$i233 = $179;
        } else {
         $$0$lcssa$i$i238 = $177;$$04$lcssa$i$i239 = $178;$$06$lcssa$i$i240 = $179;$$lcssa$i$i237 = $183;
         break;
        }
       }
      } else {
       $$0$lcssa$i$i238 = $168;$$04$lcssa$i$i239 = $$02;$$06$lcssa$i$i240 = $path_end$0;$$lcssa$i$i237 = $174;
      }
      if ($$lcssa$i$i237) {
       $$pre474 = HEAP8[$$04$lcssa$i$i239>>0]|0;
       $184 = ($$pre474<<24>>24)==(0);
       if ($184) {
        $$28$i$i272 = $$06$lcssa$i$i240;$$3$i$i273 = $$0$lcssa$i$i238;
       } else {
        $185 = ($$0$lcssa$i$i238>>>0)>(3);
        L87: do {
         if ($185) {
          $$117$i$i250 = $$0$lcssa$i$i238;$wd$018$i$i249 = $$06$lcssa$i$i240;$ws$019$i$i248 = $$04$lcssa$i$i239;
          while(1) {
           $186 = HEAP32[$ws$019$i$i248>>2]|0;
           $187 = (($186) + -16843009)|0;
           $188 = $186 & -2139062144;
           $189 = $188 ^ -2139062144;
           $190 = $189 & $187;
           $191 = ($190|0)==(0);
           if (!($191)) {
            $$1$lcssa$i$i258 = $$117$i$i250;$wd$0$lcssa$i$i257 = $wd$018$i$i249;$ws$0$lcssa$i$i256 = $ws$019$i$i248;
            break L87;
           }
           HEAP32[$wd$018$i$i249>>2] = $186;
           $192 = (($$117$i$i250) + -4)|0;
           $193 = ((($ws$019$i$i248)) + 4|0);
           $194 = ((($wd$018$i$i249)) + 4|0);
           $195 = ($192>>>0)>(3);
           if ($195) {
            $$117$i$i250 = $192;$wd$018$i$i249 = $194;$ws$019$i$i248 = $193;
           } else {
            $$1$lcssa$i$i258 = $192;$wd$0$lcssa$i$i257 = $194;$ws$0$lcssa$i$i256 = $193;
            break;
           }
          }
         } else {
          $$1$lcssa$i$i258 = $$0$lcssa$i$i238;$wd$0$lcssa$i$i257 = $$06$lcssa$i$i240;$ws$0$lcssa$i$i256 = $$04$lcssa$i$i239;
         }
        } while(0);
        $$15$ph$i$i261 = $ws$0$lcssa$i$i256;$$17$ph$i$i260 = $wd$0$lcssa$i$i257;$$2$ph$i$i262 = $$1$lcssa$i$i258;
        label = 67;
       }
      } else {
       $$28$i$i272 = $$06$lcssa$i$i240;$$3$i$i273 = 0;
      }
     } else {
      $$15$ph$i$i261 = $$02;$$17$ph$i$i260 = $path_end$0;$$2$ph$i$i262 = $168;
      label = 67;
     }
    } while(0);
    L92: do {
     if ((label|0) == 67) {
      label = 0;
      $196 = ($$2$ph$i$i262|0)==(0);
      if ($196) {
       $$28$i$i272 = $$17$ph$i$i260;$$3$i$i273 = 0;
      } else {
       $$1511$i$i266 = $$15$ph$i$i261;$$1710$i$i267 = $$17$ph$i$i260;$$212$i$i265 = $$2$ph$i$i262;
       while(1) {
        $197 = HEAP8[$$1511$i$i266>>0]|0;
        HEAP8[$$1710$i$i267>>0] = $197;
        $198 = ($197<<24>>24)==(0);
        if ($198) {
         $$28$i$i272 = $$1710$i$i267;$$3$i$i273 = $$212$i$i265;
         break L92;
        }
        $199 = (($$212$i$i265) + -1)|0;
        $200 = ((($$1511$i$i266)) + 1|0);
        $201 = ((($$1710$i$i267)) + 1|0);
        $202 = ($199|0)==(0);
        if ($202) {
         $$28$i$i272 = $201;$$3$i$i273 = 0;
         break;
        } else {
         $$1511$i$i266 = $200;$$1710$i$i267 = $201;$$212$i$i265 = $199;
        }
       }
      }
     }
    } while(0);
    _memset(($$28$i$i272|0),0,($$3$i$i273|0))|0;
    $203 = (($path_end$0) + ($168)|0);
    $204 = ($119|0)==(0);
    $205 = $$01$ph;
    $206 = $203;
    $207 = $205 ^ $206;
    $208 = $207 & 3;
    $209 = ($208|0)==(0);
    if ($204) {
     L100: do {
      if ($209) {
       $315 = $205 & 3;
       $316 = ($315|0)==(0);
       if ($316) {
        $$0$lcssa$i$i88 = $$01$ph;$$01$lcssa$i$i89 = $203;
       } else {
        $$0115$i$i85 = $203;$$016$i$i84 = $$01$ph;
        while(1) {
         $317 = HEAP8[$$016$i$i84>>0]|0;
         HEAP8[$$0115$i$i85>>0] = $317;
         $318 = ($317<<24>>24)==(0);
         if ($318) {
          break L100;
         }
         $319 = ((($$016$i$i84)) + 1|0);
         $320 = ((($$0115$i$i85)) + 1|0);
         $321 = $319;
         $322 = $321 & 3;
         $323 = ($322|0)==(0);
         if ($323) {
          $$0$lcssa$i$i88 = $319;$$01$lcssa$i$i89 = $320;
          break;
         } else {
          $$0115$i$i85 = $320;$$016$i$i84 = $319;
         }
        }
       }
       $324 = HEAP32[$$0$lcssa$i$i88>>2]|0;
       $325 = (($324) + -16843009)|0;
       $326 = $324 & -2139062144;
       $327 = $326 ^ -2139062144;
       $328 = $327 & $325;
       $329 = ($328|0)==(0);
       if ($329) {
        $332 = $324;$wd$010$i$i93 = $$01$lcssa$i$i89;$ws$011$i$i92 = $$0$lcssa$i$i88;
        while(1) {
         $330 = ((($ws$011$i$i92)) + 4|0);
         $331 = ((($wd$010$i$i93)) + 4|0);
         HEAP32[$wd$010$i$i93>>2] = $332;
         $333 = HEAP32[$330>>2]|0;
         $334 = (($333) + -16843009)|0;
         $335 = $333 & -2139062144;
         $336 = $335 ^ -2139062144;
         $337 = $336 & $334;
         $338 = ($337|0)==(0);
         if ($338) {
          $332 = $333;$wd$010$i$i93 = $331;$ws$011$i$i92 = $330;
         } else {
          $wd$0$lcssa$i$i97 = $331;$ws$0$lcssa$i$i96 = $330;
          break;
         }
        }
       } else {
        $wd$0$lcssa$i$i97 = $$01$lcssa$i$i89;$ws$0$lcssa$i$i96 = $$0$lcssa$i$i88;
       }
       $$1$ph$i$i100 = $ws$0$lcssa$i$i96;$$12$ph$i$i99 = $wd$0$lcssa$i$i97;
       label = 128;
      } else {
       $$1$ph$i$i100 = $$01$ph;$$12$ph$i$i99 = $203;
       label = 128;
      }
     } while(0);
     if ((label|0) == 128) {
      label = 0;
      $339 = HEAP8[$$1$ph$i$i100>>0]|0;
      HEAP8[$$12$ph$i$i99>>0] = $339;
      $340 = ($339<<24>>24)==(0);
      if (!($340)) {
       $$128$i$i104 = $$12$ph$i$i99;$$19$i$i103 = $$1$ph$i$i100;
       while(1) {
        $341 = ((($$19$i$i103)) + 1|0);
        $342 = ((($$128$i$i104)) + 1|0);
        $343 = HEAP8[$341>>0]|0;
        HEAP8[$342>>0] = $343;
        $344 = ($343<<24>>24)==(0);
        if ($344) {
         break;
        } else {
         $$128$i$i104 = $342;$$19$i$i103 = $341;
        }
       }
      }
     }
     $345 = $205 & 3;
     $346 = ($345|0)==(0);
     L116: do {
      if ($346) {
       $$01$lcssa$i68 = $$01$ph;
       label = 133;
      } else {
       $$014$i65 = $$01$ph;$506 = $205;
       while(1) {
        $347 = HEAP8[$$014$i65>>0]|0;
        $348 = ($347<<24>>24)==(0);
        if ($348) {
         $$pn$i79 = $506;
         break L116;
        }
        $349 = ((($$014$i65)) + 1|0);
        $350 = $349;
        $351 = $350 & 3;
        $352 = ($351|0)==(0);
        if ($352) {
         $$01$lcssa$i68 = $349;
         label = 133;
         break;
        } else {
         $$014$i65 = $349;$506 = $350;
        }
       }
      }
     } while(0);
     if ((label|0) == 133) {
      label = 0;
      $w$0$i70 = $$01$lcssa$i68;
      while(1) {
       $353 = HEAP32[$w$0$i70>>2]|0;
       $354 = (($353) + -16843009)|0;
       $355 = $353 & -2139062144;
       $356 = $355 ^ -2139062144;
       $357 = $356 & $354;
       $358 = ($357|0)==(0);
       $359 = ((($w$0$i70)) + 4|0);
       if ($358) {
        $w$0$i70 = $359;
       } else {
        break;
       }
      }
      $360 = $353&255;
      $361 = ($360<<24>>24)==(0);
      if ($361) {
       $$1$lcssa$i76 = $w$0$i70;
      } else {
       $$pn15$i72 = $w$0$i70;
       while(1) {
        $362 = ((($$pn15$i72)) + 1|0);
        $$pre$i73 = HEAP8[$362>>0]|0;
        $363 = ($$pre$i73<<24>>24)==(0);
        if ($363) {
         $$1$lcssa$i76 = $362;
         break;
        } else {
         $$pn15$i72 = $362;
        }
       }
      }
      $364 = $$1$lcssa$i76;
      $$pn$i79 = $364;
     }
     $$0$i80 = (($$pn$i79) - ($205))|0;
     L130: do {
      if ($346) {
       $$01$lcssa$i50 = $$01$ph;
       label = 141;
      } else {
       $$014$i47 = $$01$ph;$507 = $205;
       while(1) {
        $365 = HEAP8[$$014$i47>>0]|0;
        $366 = ($365<<24>>24)==(0);
        if ($366) {
         $$pn$i61 = $507;
         break L130;
        }
        $367 = ((($$014$i47)) + 1|0);
        $368 = $367;
        $369 = $368 & 3;
        $370 = ($369|0)==(0);
        if ($370) {
         $$01$lcssa$i50 = $367;
         label = 141;
         break;
        } else {
         $$014$i47 = $367;$507 = $368;
        }
       }
      }
     } while(0);
     if ((label|0) == 141) {
      label = 0;
      $w$0$i52 = $$01$lcssa$i50;
      while(1) {
       $371 = HEAP32[$w$0$i52>>2]|0;
       $372 = (($371) + -16843009)|0;
       $373 = $371 & -2139062144;
       $374 = $373 ^ -2139062144;
       $375 = $374 & $372;
       $376 = ($375|0)==(0);
       $377 = ((($w$0$i52)) + 4|0);
       if ($376) {
        $w$0$i52 = $377;
       } else {
        break;
       }
      }
      $378 = $371&255;
      $379 = ($378<<24>>24)==(0);
      if ($379) {
       $$1$lcssa$i58 = $w$0$i52;
      } else {
       $$pn15$i54 = $w$0$i52;
       while(1) {
        $380 = ((($$pn15$i54)) + 1|0);
        $$pre$i55 = HEAP8[$380>>0]|0;
        $381 = ($$pre$i55<<24>>24)==(0);
        if ($381) {
         $$1$lcssa$i58 = $380;
         break;
        } else {
         $$pn15$i54 = $380;
        }
       }
      }
      $382 = $$1$lcssa$i58;
      $$pn$i61 = $382;
     }
     $$0$i62 = (($$pn$i61) - ($205))|0;
     $$pn = $$0$i80;$$pn3 = $$0$i62;
    } else {
     L145: do {
      if ($209) {
       $210 = $205 & 3;
       $211 = ($210|0)==(0);
       if ($211) {
        $$0$lcssa$i$i191591 = $119;$$04$lcssa$i$i192592 = $$01$ph;$$06$lcssa$i$i193593 = $203;
       } else {
        $$031$i$i184 = $119;$$0430$i$i185 = $$01$ph;$$0629$i$i186 = $203;
        while(1) {
         $212 = HEAP8[$$0430$i$i185>>0]|0;
         HEAP8[$$0629$i$i186>>0] = $212;
         $213 = ($212<<24>>24)==(0);
         if ($213) {
          $$28$i$i225 = $$0629$i$i186;$$3$i$i226 = $$031$i$i184;$$pre$phiZ2D = $210;
          break L145;
         }
         $214 = (($$031$i$i184) + -1)|0;
         $215 = ((($$0430$i$i185)) + 1|0);
         $216 = ((($$0629$i$i186)) + 1|0);
         $217 = $215;
         $218 = $217 & 3;
         $219 = ($218|0)!=(0);
         $220 = ($214|0)!=(0);
         $or$cond$i$i188 = $220 & $219;
         if ($or$cond$i$i188) {
          $$031$i$i184 = $214;$$0430$i$i185 = $215;$$0629$i$i186 = $216;
         } else {
          break;
         }
        }
        if ($220) {
         $$0$lcssa$i$i191591 = $214;$$04$lcssa$i$i192592 = $215;$$06$lcssa$i$i193593 = $216;
        } else {
         $$28$i$i225 = $216;$$3$i$i226 = 0;$$pre$phiZ2D = $210;
         break;
        }
       }
       $$pre475 = HEAP8[$$04$lcssa$i$i192592>>0]|0;
       $221 = ($$pre475<<24>>24)==(0);
       if ($221) {
        $$28$i$i225 = $$06$lcssa$i$i193593;$$3$i$i226 = $$0$lcssa$i$i191591;$$pre$phiZ2D = $210;
       } else {
        $222 = ($$0$lcssa$i$i191591>>>0)>(3);
        L154: do {
         if ($222) {
          $$117$i$i203 = $$0$lcssa$i$i191591;$wd$018$i$i202 = $$06$lcssa$i$i193593;$ws$019$i$i201 = $$04$lcssa$i$i192592;
          while(1) {
           $223 = HEAP32[$ws$019$i$i201>>2]|0;
           $224 = (($223) + -16843009)|0;
           $225 = $223 & -2139062144;
           $226 = $225 ^ -2139062144;
           $227 = $226 & $224;
           $228 = ($227|0)==(0);
           if (!($228)) {
            break;
           }
           HEAP32[$wd$018$i$i202>>2] = $223;
           $229 = (($$117$i$i203) + -4)|0;
           $230 = ((($ws$019$i$i201)) + 4|0);
           $231 = ((($wd$018$i$i202)) + 4|0);
           $232 = ($229>>>0)>(3);
           if ($232) {
            $$117$i$i203 = $229;$wd$018$i$i202 = $231;$ws$019$i$i201 = $230;
           } else {
            $$1$lcssa$i$i211 = $229;$wd$0$lcssa$i$i210 = $231;$ws$0$lcssa$i$i209 = $230;
            break L154;
           }
          }
          $$1511$i$i219 = $ws$019$i$i201;$$1710$i$i220 = $wd$018$i$i202;$$212$i$i218 = $$117$i$i203;
          label = 82;
          break L145;
         } else {
          $$1$lcssa$i$i211 = $$0$lcssa$i$i191591;$wd$0$lcssa$i$i210 = $$06$lcssa$i$i193593;$ws$0$lcssa$i$i209 = $$04$lcssa$i$i192592;
         }
        } while(0);
        $233 = ($$1$lcssa$i$i211|0)==(0);
        if ($233) {
         $$28$i$i225 = $wd$0$lcssa$i$i210;$$3$i$i226 = 0;$$pre$phiZ2D = $210;
        } else {
         $$1511$i$i219 = $ws$0$lcssa$i$i209;$$1710$i$i220 = $wd$0$lcssa$i$i210;$$212$i$i218 = $$1$lcssa$i$i211;
         label = 82;
        }
       }
      } else {
       $$1511$i$i219 = $$01$ph;$$1710$i$i220 = $203;$$212$i$i218 = $119;
       label = 82;
      }
     } while(0);
     if ((label|0) == 82) {
      while(1) {
       label = 0;
       $234 = HEAP8[$$1511$i$i219>>0]|0;
       HEAP8[$$1710$i$i220>>0] = $234;
       $235 = ($234<<24>>24)==(0);
       if ($235) {
        $$28$i$i225$ph = $$1710$i$i220;$$3$i$i226$ph = $$212$i$i218;
        break;
       }
       $236 = (($$212$i$i218) + -1)|0;
       $237 = ((($$1511$i$i219)) + 1|0);
       $238 = ((($$1710$i$i220)) + 1|0);
       $239 = ($236|0)==(0);
       if ($239) {
        $$28$i$i225$ph = $238;$$3$i$i226$ph = 0;
        break;
       } else {
        $$1511$i$i219 = $237;$$1710$i$i220 = $238;$$212$i$i218 = $236;
        label = 82;
       }
      }
      $$pre478 = $205 & 3;
      $$28$i$i225 = $$28$i$i225$ph;$$3$i$i226 = $$3$i$i226$ph;$$pre$phiZ2D = $$pre478;
     }
     _memset(($$28$i$i225|0),0,($$3$i$i226|0))|0;
     $240 = ($$pre$phiZ2D|0)==(0);
     L166: do {
      if ($240) {
       $$01$lcssa$i167 = $$01$ph;
       label = 88;
      } else {
       $$014$i164 = $$01$ph;$501 = $205;
       while(1) {
        $241 = HEAP8[$$014$i164>>0]|0;
        $242 = ($241<<24>>24)==(0);
        if ($242) {
         $$pn$i178 = $501;
         break L166;
        }
        $243 = ((($$014$i164)) + 1|0);
        $244 = $243;
        $245 = $244 & 3;
        $246 = ($245|0)==(0);
        if ($246) {
         $$01$lcssa$i167 = $243;
         label = 88;
         break;
        } else {
         $$014$i164 = $243;$501 = $244;
        }
       }
      }
     } while(0);
     if ((label|0) == 88) {
      label = 0;
      $w$0$i169 = $$01$lcssa$i167;
      while(1) {
       $247 = HEAP32[$w$0$i169>>2]|0;
       $248 = (($247) + -16843009)|0;
       $249 = $247 & -2139062144;
       $250 = $249 ^ -2139062144;
       $251 = $250 & $248;
       $252 = ($251|0)==(0);
       $253 = ((($w$0$i169)) + 4|0);
       if ($252) {
        $w$0$i169 = $253;
       } else {
        break;
       }
      }
      $254 = $247&255;
      $255 = ($254<<24>>24)==(0);
      if ($255) {
       $$1$lcssa$i175 = $w$0$i169;
      } else {
       $$pn15$i171 = $w$0$i169;
       while(1) {
        $256 = ((($$pn15$i171)) + 1|0);
        $$pre$i172 = HEAP8[$256>>0]|0;
        $257 = ($$pre$i172<<24>>24)==(0);
        if ($257) {
         $$1$lcssa$i175 = $256;
         break;
        } else {
         $$pn15$i171 = $256;
        }
       }
      }
      $258 = $$1$lcssa$i175;
      $$pn$i178 = $258;
     }
     $$0$i179 = (($$pn$i178) - ($205))|0;
     $259 = ($$0$i179>>>0)<($119>>>0);
     if ($259) {
      L182: do {
       if ($240) {
        $$01$lcssa$i149 = $$01$ph;
        label = 97;
       } else {
        $$014$i146 = $$01$ph;$503 = $205;
        while(1) {
         $260 = HEAP8[$$014$i146>>0]|0;
         $261 = ($260<<24>>24)==(0);
         if ($261) {
          $$pn$i160 = $503;
          break L182;
         }
         $262 = ((($$014$i146)) + 1|0);
         $263 = $262;
         $264 = $263 & 3;
         $265 = ($264|0)==(0);
         if ($265) {
          $$01$lcssa$i149 = $262;
          label = 97;
          break;
         } else {
          $$014$i146 = $262;$503 = $263;
         }
        }
       }
      } while(0);
      if ((label|0) == 97) {
       label = 0;
       $w$0$i151 = $$01$lcssa$i149;
       while(1) {
        $266 = HEAP32[$w$0$i151>>2]|0;
        $267 = (($266) + -16843009)|0;
        $268 = $266 & -2139062144;
        $269 = $268 ^ -2139062144;
        $270 = $269 & $267;
        $271 = ($270|0)==(0);
        $272 = ((($w$0$i151)) + 4|0);
        if ($271) {
         $w$0$i151 = $272;
        } else {
         break;
        }
       }
       $273 = $266&255;
       $274 = ($273<<24>>24)==(0);
       if ($274) {
        $$1$lcssa$i157 = $w$0$i151;
       } else {
        $$pn15$i153 = $w$0$i151;
        while(1) {
         $275 = ((($$pn15$i153)) + 1|0);
         $$pre$i154 = HEAP8[$275>>0]|0;
         $276 = ($$pre$i154<<24>>24)==(0);
         if ($276) {
          $$1$lcssa$i157 = $275;
          break;
         } else {
          $$pn15$i153 = $275;
         }
        }
       }
       $277 = $$1$lcssa$i157;
       $$pn$i160 = $277;
      }
      $$0$i161 = (($$pn$i160) - ($205))|0;
      $502 = $$0$i161;
     } else {
      $502 = $119;
     }
     L197: do {
      if ($240) {
       $$01$lcssa$i131 = $$01$ph;
       label = 106;
      } else {
       $$014$i128 = $$01$ph;$504 = $205;
       while(1) {
        $278 = HEAP8[$$014$i128>>0]|0;
        $279 = ($278<<24>>24)==(0);
        if ($279) {
         $$pn$i142 = $504;
         break L197;
        }
        $280 = ((($$014$i128)) + 1|0);
        $281 = $280;
        $282 = $281 & 3;
        $283 = ($282|0)==(0);
        if ($283) {
         $$01$lcssa$i131 = $280;
         label = 106;
         break;
        } else {
         $$014$i128 = $280;$504 = $281;
        }
       }
      }
     } while(0);
     if ((label|0) == 106) {
      label = 0;
      $w$0$i133 = $$01$lcssa$i131;
      while(1) {
       $284 = HEAP32[$w$0$i133>>2]|0;
       $285 = (($284) + -16843009)|0;
       $286 = $284 & -2139062144;
       $287 = $286 ^ -2139062144;
       $288 = $287 & $285;
       $289 = ($288|0)==(0);
       $290 = ((($w$0$i133)) + 4|0);
       if ($289) {
        $w$0$i133 = $290;
       } else {
        break;
       }
      }
      $291 = $284&255;
      $292 = ($291<<24>>24)==(0);
      if ($292) {
       $$1$lcssa$i139 = $w$0$i133;
      } else {
       $$pn15$i135 = $w$0$i133;
       while(1) {
        $293 = ((($$pn15$i135)) + 1|0);
        $$pre$i136 = HEAP8[$293>>0]|0;
        $294 = ($$pre$i136<<24>>24)==(0);
        if ($294) {
         $$1$lcssa$i139 = $293;
         break;
        } else {
         $$pn15$i135 = $293;
        }
       }
      }
      $295 = $$1$lcssa$i139;
      $$pn$i142 = $295;
     }
     $$0$i143 = (($$pn$i142) - ($205))|0;
     $296 = ($$0$i143>>>0)<($119>>>0);
     if ($296) {
      L212: do {
       if ($240) {
        $$01$lcssa$i113 = $$01$ph;
        label = 115;
       } else {
        $$014$i110 = $$01$ph;$505 = $205;
        while(1) {
         $297 = HEAP8[$$014$i110>>0]|0;
         $298 = ($297<<24>>24)==(0);
         if ($298) {
          $$pn$i124 = $505;
          break L212;
         }
         $299 = ((($$014$i110)) + 1|0);
         $300 = $299;
         $301 = $300 & 3;
         $302 = ($301|0)==(0);
         if ($302) {
          $$01$lcssa$i113 = $299;
          label = 115;
          break;
         } else {
          $$014$i110 = $299;$505 = $300;
         }
        }
       }
      } while(0);
      if ((label|0) == 115) {
       label = 0;
       $w$0$i115 = $$01$lcssa$i113;
       while(1) {
        $303 = HEAP32[$w$0$i115>>2]|0;
        $304 = (($303) + -16843009)|0;
        $305 = $303 & -2139062144;
        $306 = $305 ^ -2139062144;
        $307 = $306 & $304;
        $308 = ($307|0)==(0);
        $309 = ((($w$0$i115)) + 4|0);
        if ($308) {
         $w$0$i115 = $309;
        } else {
         break;
        }
       }
       $310 = $303&255;
       $311 = ($310<<24>>24)==(0);
       if ($311) {
        $$1$lcssa$i121 = $w$0$i115;
       } else {
        $$pn15$i117 = $w$0$i115;
        while(1) {
         $312 = ((($$pn15$i117)) + 1|0);
         $$pre$i118 = HEAP8[$312>>0]|0;
         $313 = ($$pre$i118<<24>>24)==(0);
         if ($313) {
          $$1$lcssa$i121 = $312;
          break;
         } else {
          $$pn15$i117 = $312;
         }
        }
       }
       $314 = $$1$lcssa$i121;
       $$pn$i124 = $314;
      }
      $$0$i125 = (($$pn$i124) - ($205))|0;
      $$pn = $502;$$pn3 = $$0$i125;
     } else {
      $$pn = $502;$$pn3 = $119;
     }
    }
    $$1 = (($$01$ph) + ($$pn3)|0);
    $path_end$1 = (($203) + ($$pn)|0);
    $383 = ((($126)) + 1|0);
    $384 = $383;
    $385 = (($80) - ($384))|0;
    $386 = (($len$1$ph) + ($385))|0;
    $$01$ph = $$1;$$02$ph = $383;$len$1$ph = $386;$path_end$0$ph = $path_end$1;
   }
   $387 = $path_end$0;
   $388 = $80 ^ $387;
   $389 = $388 & 3;
   $390 = ($389|0)==(0);
   L228: do {
    if ($390) {
     $391 = ($81|0)!=(0);
     $392 = ($len$1$ph|0)!=(0);
     $or$cond28$i$i = $392 & $391;
     if ($or$cond28$i$i) {
      $$031$i$i = $len$1$ph;$$0430$i$i = $$02;$$0629$i$i = $path_end$0;
      while(1) {
       $393 = HEAP8[$$0430$i$i>>0]|0;
       HEAP8[$$0629$i$i>>0] = $393;
       $394 = ($393<<24>>24)==(0);
       if ($394) {
        $$28$i$i = $$0629$i$i;$$3$i$i = $$031$i$i;
        break L228;
       }
       $395 = (($$031$i$i) + -1)|0;
       $396 = ((($$0430$i$i)) + 1|0);
       $397 = ((($$0629$i$i)) + 1|0);
       $398 = $396;
       $399 = $398 & 3;
       $400 = ($399|0)!=(0);
       $401 = ($395|0)!=(0);
       $or$cond$i$i = $401 & $400;
       if ($or$cond$i$i) {
        $$031$i$i = $395;$$0430$i$i = $396;$$0629$i$i = $397;
       } else {
        $$0$lcssa$i$i40 = $395;$$04$lcssa$i$i = $396;$$06$lcssa$i$i = $397;$$lcssa$i$i = $401;
        break;
       }
      }
     } else {
      $$0$lcssa$i$i40 = $len$1$ph;$$04$lcssa$i$i = $$02;$$06$lcssa$i$i = $path_end$0;$$lcssa$i$i = $392;
     }
     if ($$lcssa$i$i) {
      $$pre476 = HEAP8[$$04$lcssa$i$i>>0]|0;
      $402 = ($$pre476<<24>>24)==(0);
      if ($402) {
       $$28$i$i = $$06$lcssa$i$i;$$3$i$i = $$0$lcssa$i$i40;
      } else {
       $403 = ($$0$lcssa$i$i40>>>0)>(3);
       L237: do {
        if ($403) {
         $$117$i$i = $$0$lcssa$i$i40;$wd$018$i$i = $$06$lcssa$i$i;$ws$019$i$i = $$04$lcssa$i$i;
         while(1) {
          $404 = HEAP32[$ws$019$i$i>>2]|0;
          $405 = (($404) + -16843009)|0;
          $406 = $404 & -2139062144;
          $407 = $406 ^ -2139062144;
          $408 = $407 & $405;
          $409 = ($408|0)==(0);
          if (!($409)) {
           $$1$lcssa$i$i = $$117$i$i;$wd$0$lcssa$i$i42 = $wd$018$i$i;$ws$0$lcssa$i$i41 = $ws$019$i$i;
           break L237;
          }
          HEAP32[$wd$018$i$i>>2] = $404;
          $410 = (($$117$i$i) + -4)|0;
          $411 = ((($ws$019$i$i)) + 4|0);
          $412 = ((($wd$018$i$i)) + 4|0);
          $413 = ($410>>>0)>(3);
          if ($413) {
           $$117$i$i = $410;$wd$018$i$i = $412;$ws$019$i$i = $411;
          } else {
           $$1$lcssa$i$i = $410;$wd$0$lcssa$i$i42 = $412;$ws$0$lcssa$i$i41 = $411;
           break;
          }
         }
        } else {
         $$1$lcssa$i$i = $$0$lcssa$i$i40;$wd$0$lcssa$i$i42 = $$06$lcssa$i$i;$ws$0$lcssa$i$i41 = $$04$lcssa$i$i;
        }
       } while(0);
       $$15$ph$i$i = $ws$0$lcssa$i$i41;$$17$ph$i$i = $wd$0$lcssa$i$i42;$$2$ph$i$i = $$1$lcssa$i$i;
       label = 158;
      }
     } else {
      $$28$i$i = $$06$lcssa$i$i;$$3$i$i = 0;
     }
    } else {
     $$15$ph$i$i = $$02;$$17$ph$i$i = $path_end$0;$$2$ph$i$i = $len$1$ph;
     label = 158;
    }
   } while(0);
   L242: do {
    if ((label|0) == 158) {
     $414 = ($$2$ph$i$i|0)==(0);
     if ($414) {
      $$28$i$i = $$17$ph$i$i;$$3$i$i = 0;
     } else {
      $$1511$i$i = $$15$ph$i$i;$$1710$i$i = $$17$ph$i$i;$$212$i$i = $$2$ph$i$i;
      while(1) {
       $415 = HEAP8[$$1511$i$i>>0]|0;
       HEAP8[$$1710$i$i>>0] = $415;
       $416 = ($415<<24>>24)==(0);
       if ($416) {
        $$28$i$i = $$1710$i$i;$$3$i$i = $$212$i$i;
        break L242;
       }
       $417 = (($$212$i$i) + -1)|0;
       $418 = ((($$1511$i$i)) + 1|0);
       $419 = ((($$1710$i$i)) + 1|0);
       $420 = ($417|0)==(0);
       if ($420) {
        $$28$i$i = $419;$$3$i$i = 0;
        break;
       } else {
        $$1511$i$i = $418;$$1710$i$i = $419;$$212$i$i = $417;
       }
      }
     }
    }
   } while(0);
   _memset(($$28$i$i|0),0,($$3$i$i|0))|0;
   L248: do {
    if ($82) {
     $$01$lcssa$i26 = $$02;
     label = 164;
    } else {
     $$014$i23 = $$02;$508 = $80;
     while(1) {
      $421 = HEAP8[$$014$i23>>0]|0;
      $422 = ($421<<24>>24)==(0);
      if ($422) {
       $$pn$i37 = $508;
       break L248;
      }
      $423 = ((($$014$i23)) + 1|0);
      $424 = $423;
      $425 = $424 & 3;
      $426 = ($425|0)==(0);
      if ($426) {
       $$01$lcssa$i26 = $423;
       label = 164;
       break;
      } else {
       $$014$i23 = $423;$508 = $424;
      }
     }
    }
   } while(0);
   if ((label|0) == 164) {
    $w$0$i28 = $$01$lcssa$i26;
    while(1) {
     $427 = HEAP32[$w$0$i28>>2]|0;
     $428 = (($427) + -16843009)|0;
     $429 = $427 & -2139062144;
     $430 = $429 ^ -2139062144;
     $431 = $430 & $428;
     $432 = ($431|0)==(0);
     $433 = ((($w$0$i28)) + 4|0);
     if ($432) {
      $w$0$i28 = $433;
     } else {
      break;
     }
    }
    $434 = $427&255;
    $435 = ($434<<24>>24)==(0);
    if ($435) {
     $$1$lcssa$i34 = $w$0$i28;
    } else {
     $$pn15$i30 = $w$0$i28;
     while(1) {
      $436 = ((($$pn15$i30)) + 1|0);
      $$pre$i31 = HEAP8[$436>>0]|0;
      $437 = ($$pre$i31<<24>>24)==(0);
      if ($437) {
       $$1$lcssa$i34 = $436;
       break;
      } else {
       $$pn15$i30 = $436;
      }
     }
    }
    $438 = $$1$lcssa$i34;
    $$pn$i37 = $438;
   }
   $$0$i38 = (($$pn$i37) - ($80))|0;
   $439 = ($$0$i38>>>0)<($len$1$ph>>>0);
   if ($439) {
    L264: do {
     if ($82) {
      $$01$lcssa$i8 = $$02;
      label = 173;
     } else {
      $$014$i5 = $$02;$509 = $80;
      while(1) {
       $440 = HEAP8[$$014$i5>>0]|0;
       $441 = ($440<<24>>24)==(0);
       if ($441) {
        $$pn$i19 = $509;
        break L264;
       }
       $442 = ((($$014$i5)) + 1|0);
       $443 = $442;
       $444 = $443 & 3;
       $445 = ($444|0)==(0);
       if ($445) {
        $$01$lcssa$i8 = $442;
        label = 173;
        break;
       } else {
        $$014$i5 = $442;$509 = $443;
       }
      }
     }
    } while(0);
    if ((label|0) == 173) {
     $w$0$i10 = $$01$lcssa$i8;
     while(1) {
      $446 = HEAP32[$w$0$i10>>2]|0;
      $447 = (($446) + -16843009)|0;
      $448 = $446 & -2139062144;
      $449 = $448 ^ -2139062144;
      $450 = $449 & $447;
      $451 = ($450|0)==(0);
      $452 = ((($w$0$i10)) + 4|0);
      if ($451) {
       $w$0$i10 = $452;
      } else {
       break;
      }
     }
     $453 = $446&255;
     $454 = ($453<<24>>24)==(0);
     if ($454) {
      $$1$lcssa$i16 = $w$0$i10;
     } else {
      $$pn15$i12 = $w$0$i10;
      while(1) {
       $455 = ((($$pn15$i12)) + 1|0);
       $$pre$i13 = HEAP8[$455>>0]|0;
       $456 = ($$pre$i13<<24>>24)==(0);
       if ($456) {
        $$1$lcssa$i16 = $455;
        break;
       } else {
        $$pn15$i12 = $455;
       }
      }
     }
     $457 = $$1$lcssa$i16;
     $$pn$i19 = $457;
    }
    $$0$i20 = (($$pn$i19) - ($80))|0;
    $459 = $$0$i20;
   } else {
    $459 = $len$1$ph;
   }
   $458 = (($path_end$0) + ($459)|0);
   HEAP8[$458>>0] = 0;
   $460 = HEAP8[$$01$ph>>0]|0;
   $461 = ($460<<24>>24)==(0);
   if ($461) {
    $$0 = $44;
    STACKTOP = sp;return ($$0|0);
   }
   $462 = ((($458)) + 1|0);
   HEAP8[$458>>0] = 47;
   $463 = $$01$ph;
   $464 = $462;
   $465 = $463 ^ $464;
   $466 = $465 & 3;
   $467 = ($466|0)==(0);
   if ($467) {
    $468 = $463 & 3;
    $469 = ($468|0)==(0);
    L284: do {
     if ($469) {
      $$0$lcssa$i$i = $$01$ph;$$01$lcssa$i$i = $462;
     } else {
      $$0115$i$i = $462;$$016$i$i = $$01$ph;
      while(1) {
       $470 = HEAP8[$$016$i$i>>0]|0;
       HEAP8[$$0115$i$i>>0] = $470;
       $471 = ($470<<24>>24)==(0);
       if ($471) {
        $$0 = $44;
        break;
       }
       $472 = ((($$016$i$i)) + 1|0);
       $473 = ((($$0115$i$i)) + 1|0);
       $474 = $472;
       $475 = $474 & 3;
       $476 = ($475|0)==(0);
       if ($476) {
        $$0$lcssa$i$i = $472;$$01$lcssa$i$i = $473;
        break L284;
       } else {
        $$0115$i$i = $473;$$016$i$i = $472;
       }
      }
      STACKTOP = sp;return ($$0|0);
     }
    } while(0);
    $477 = HEAP32[$$0$lcssa$i$i>>2]|0;
    $478 = (($477) + -16843009)|0;
    $479 = $477 & -2139062144;
    $480 = $479 ^ -2139062144;
    $481 = $480 & $478;
    $482 = ($481|0)==(0);
    if ($482) {
     $485 = $477;$wd$010$i$i = $$01$lcssa$i$i;$ws$011$i$i = $$0$lcssa$i$i;
     while(1) {
      $483 = ((($ws$011$i$i)) + 4|0);
      $484 = ((($wd$010$i$i)) + 4|0);
      HEAP32[$wd$010$i$i>>2] = $485;
      $486 = HEAP32[$483>>2]|0;
      $487 = (($486) + -16843009)|0;
      $488 = $486 & -2139062144;
      $489 = $488 ^ -2139062144;
      $490 = $489 & $487;
      $491 = ($490|0)==(0);
      if ($491) {
       $485 = $486;$wd$010$i$i = $484;$ws$011$i$i = $483;
      } else {
       $wd$0$lcssa$i$i = $484;$ws$0$lcssa$i$i = $483;
       break;
      }
     }
    } else {
     $wd$0$lcssa$i$i = $$01$lcssa$i$i;$ws$0$lcssa$i$i = $$0$lcssa$i$i;
    }
    $$1$ph$i$i = $ws$0$lcssa$i$i;$$12$ph$i$i = $wd$0$lcssa$i$i;
   } else {
    $$1$ph$i$i = $$01$ph;$$12$ph$i$i = $462;
   }
   $492 = HEAP8[$$1$ph$i$i>>0]|0;
   HEAP8[$$12$ph$i$i>>0] = $492;
   $493 = ($492<<24>>24)==(0);
   if ($493) {
    $$0 = $44;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$128$i$i = $$12$ph$i$i;$$19$i$i = $$1$ph$i$i;
   }
   while(1) {
    $494 = ((($$19$i$i)) + 1|0);
    $495 = ((($$128$i$i)) + 1|0);
    $496 = HEAP8[$494>>0]|0;
    HEAP8[$495>>0] = $496;
    $497 = ($496<<24>>24)==(0);
    if ($497) {
     $$0 = $44;
     break;
    } else {
     $$128$i$i = $495;$$19$i$i = $494;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 L301: do {
  if ($23) {
   $$01$lcssa$i349 = $file;
   label = 25;
  } else {
   $$014$i346 = $file;$500 = $21;$56 = $50;
   while(1) {
    $55 = ($56<<24>>24)==(0);
    if ($55) {
     $$pn$i360 = $500;
     break L301;
    }
    $57 = ((($$014$i346)) + 1|0);
    $58 = $57;
    $59 = $58 & 3;
    $60 = ($59|0)==(0);
    if ($60) {
     $$01$lcssa$i349 = $57;
     label = 25;
     break L301;
    }
    $$pre477 = HEAP8[$57>>0]|0;
    $$014$i346 = $57;$500 = $58;$56 = $$pre477;
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $w$0$i351 = $$01$lcssa$i349;
  while(1) {
   $61 = HEAP32[$w$0$i351>>2]|0;
   $62 = (($61) + -16843009)|0;
   $63 = $61 & -2139062144;
   $64 = $63 ^ -2139062144;
   $65 = $64 & $62;
   $66 = ($65|0)==(0);
   $67 = ((($w$0$i351)) + 4|0);
   if ($66) {
    $w$0$i351 = $67;
   } else {
    break;
   }
  }
  $68 = $61&255;
  $69 = ($68<<24>>24)==(0);
  if ($69) {
   $$1$lcssa$i357 = $w$0$i351;
  } else {
   $$pn15$i353 = $w$0$i351;
   while(1) {
    $70 = ((($$pn15$i353)) + 1|0);
    $$pre$i354 = HEAP8[$70>>0]|0;
    $71 = ($$pre$i354<<24>>24)==(0);
    if ($71) {
     $$1$lcssa$i357 = $70;
     break;
    } else {
     $$pn15$i353 = $70;
    }
   }
  }
  $72 = $$1$lcssa$i357;
  $$pn$i360 = $72;
 }
 $$0$i361 = (($$pn$i360) - ($21))|0;
 $leninc = (($$0$i361) + 1)|0;
 _memcpy(($44|0),($file|0),($leninc|0))|0;
 $$0 = $44;
 STACKTOP = sp;return ($$0|0);
}
function _rans_compress_O0($in,$in_size,$out_size) {
 $in = $in|0;
 $in_size = $in_size|0;
 $out_size = $out_size|0;
 var $$0 = 0, $$cast25 = 0, $$m$0 = 0, $$pre$phi62Z2D = 0, $0 = 0.0, $1 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0.0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0.0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F = 0, $M$0 = 0, $M$2 = 0, $cp$0 = 0, $cp$2 = 0, $cp$3 = 0, $cp$4 = 0, $exitcond = 0, $exitcond98 = 0, $fsum$0 = 0, $fsum$1 = 0;
 var $i$0 = 0, $i$1 = 0, $j$0 = 0, $j$0$M$0 = 0, $j$1 = 0, $m$0 = 0, $m$2 = 0, $ptr$0 = 0, $ptr$0$i = 0, $ptr$0$i10 = 0, $ptr$0$i14 = 0, $ptr$0$i18 = 0, $ptr$0$i2 = 0, $ptr$0$i22 = 0, $ptr$0$i6 = 0, $ptr$1 = 0, $ptr$10 = 0, $ptr$2 = 0, $ptr$3 = 0, $ptr$4 = 0;
 var $ptr$5 = 0, $ptr$6 = 0, $ptr$7 = 0, $ptr$8 = 0, $ptr$9 = 0, $rans0$0 = 0, $rans0$1 = 0, $rans1$0 = 0, $rans1$1 = 0, $rans1$2 = 0, $rans2$0 = 0, $rans2$1 = 0, $rans2$2 = 0, $rans2$3 = 0, $rans3$0 = 0, $rle$0 = 0, $rle$1 = 0, $rle$1$in = 0, $rle$3 = 0, $rle$4 = 0;
 var $shift$0$i = 0, $storemerge = 0, $syms = 0, $x$0 = 0, $x$0$i = 0, $x$0$i1 = 0, $x$0$i13 = 0, $x$0$i17 = 0, $x$0$i21 = 0, $x$0$i5 = 0, $x$0$i9 = 0, $x$1 = 0, $x$1$i = 0, $x$1$i11 = 0, $x$1$i15 = 0, $x$1$i19 = 0, $x$1$i23 = 0, $x$1$i3 = 0, $x$1$i7 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5120|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $syms = sp + 1024|0;
 $F = sp;
 $0 = (+($in_size>>>0));
 $1 = $0 * 1.05;
 $2 = $1 + 198147.0;
 $3 = $2 + 9.0;
 $4 = (~~(($3))>>>0);
 $5 = (_malloc($4)|0);
 _memset(($F|0),0,1024)|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (~~(($1)));
 $8 = (($5) + ($7)|0);
 $9 = ((($8)) + 198147|0);
 $i$0 = 0;
 while(1) {
  $exitcond98 = ($i$0|0)==($in_size|0);
  if ($exitcond98) {
   break;
  }
  $10 = (($in) + ($i$0)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = (($F) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$13>>2] = $15;
  $16 = (($i$0) + 1)|0;
  $i$0 = $16;
 }
 $17 = ((($9)) + 9|0);
 $18 = (___udivdi3(0,2048,($in_size|0),0)|0);
 $19 = tempRet0;
 $20 = (1073741824 / ($in_size>>>0))&-1;
 $21 = (_i64Add(($18|0),($19|0),($20|0),0)|0);
 $22 = tempRet0;
 $M$0 = 0;$fsum$0 = 0;$j$0 = 0;$m$0 = 0;
 while(1) {
  $exitcond = ($j$0|0)==(256);
  if ($exitcond) {
   break;
  }
  $23 = (($F) + ($j$0<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0);
  if ($25) {
   $M$2 = $M$0;$fsum$1 = $fsum$0;$m$2 = $m$0;
  } else {
   $26 = ($m$0|0)<($24|0);
   $$m$0 = $26 ? $24 : $m$0;
   $j$0$M$0 = $26 ? $j$0 : $M$0;
   $27 = ($24|0)<(0);
   $28 = $27 << 31 >> 31;
   $29 = (___muldi3(($24|0),($28|0),($21|0),($22|0))|0);
   $30 = tempRet0;
   $31 = (_bitshift64Lshr(($29|0),($30|0),31)|0);
   $32 = tempRet0;
   $33 = ($31|0)==(0);
   $storemerge = $33 ? 1 : $31;
   HEAP32[$23>>2] = $storemerge;
   $34 = (($fsum$0) + ($storemerge))|0;
   $M$2 = $j$0$M$0;$fsum$1 = $34;$m$2 = $$m$0;
  }
  $35 = (($j$0) + 1)|0;
  $M$0 = $M$2;$fsum$0 = $fsum$1;$j$0 = $35;$m$0 = $m$2;
 }
 $36 = (($fsum$0) + 1)|0;
 $37 = ($36|0)<(4096);
 if ($37) {
  $38 = (4095 - ($fsum$0))|0;
  $39 = (($F) + ($M$0<<2)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + ($38))|0;
  HEAP32[$39>>2] = $41;
  $47 = $41;
 } else {
  $42 = (($fsum$0) + -4095)|0;
  $43 = (($F) + ($M$0<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) - ($42))|0;
  HEAP32[$43>>2] = $45;
  $47 = $45;
 }
 $46 = ($47|0)>(0);
 if (!($46)) {
  ___assert_fail((20715|0),(20722|0),111,(20741|0));
  // unreachable;
 }
 $48 = ((($5)) + 9|0);
 $cp$0 = $48;$j$1 = 0;$rle$0 = 0;$x$0 = 0;
 while(1) {
  $49 = ($j$1|0)<(256);
  if (!($49)) {
   label = 39;
   break;
  }
  $50 = (($F) + ($j$1<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)==(0);
  if ($52) {
   $cp$4 = $cp$0;$rle$4 = $rle$0;$x$1 = $x$0;
  } else {
   $53 = ($rle$0|0)==(0);
   if ($53) {
    $55 = $j$1&255;
    $56 = ((($cp$0)) + 1|0);
    HEAP8[$cp$0>>0] = $55;
    $57 = ($j$1|0)==(0);
    if ($57) {
     $cp$2 = $56;$rle$3 = 0;
    } else {
     $58 = (($j$1) + -1)|0;
     $59 = (($F) + ($58<<2)|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(0);
     if ($61) {
      $cp$2 = $56;$rle$3 = 0;
     } else {
      $rle$1$in = $j$1;
      while(1) {
       $rle$1 = (($rle$1$in) + 1)|0;
       $62 = ($rle$1|0)<(256);
       if (!($62)) {
        break;
       }
       $63 = (($F) + ($rle$1<<2)|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = ($64|0)==(0);
       if ($65) {
        break;
       } else {
        $rle$1$in = $rle$1;
       }
      }
      $66 = (($j$1) + 1)|0;
      $67 = (($rle$1) - ($66))|0;
      $68 = $67&255;
      $69 = ((($cp$0)) + 2|0);
      HEAP8[$56>>0] = $68;
      $cp$2 = $69;$rle$3 = $67;
     }
    }
   } else {
    $54 = (($rle$0) + -1)|0;
    $cp$2 = $cp$0;$rle$3 = $54;
   }
   $70 = HEAP32[$50>>2]|0;
   $71 = ($70|0)<(128);
   if ($71) {
    $72 = $70&255;
    $73 = ((($cp$2)) + 1|0);
    HEAP8[$cp$2>>0] = $72;
    $cp$3 = $73;
   } else {
    $74 = $70 >>> 8;
    $75 = $74 | 128;
    $76 = $75&255;
    $77 = ((($cp$2)) + 1|0);
    HEAP8[$cp$2>>0] = $76;
    $78 = HEAP32[$50>>2]|0;
    $79 = $78&255;
    $80 = ((($cp$2)) + 2|0);
    HEAP8[$77>>0] = $79;
    $cp$3 = $80;
   }
   $81 = HEAP32[$50>>2]|0;
   $82 = ($x$0>>>0)<(4097);
   if (!($82)) {
    label = 29;
    break;
   }
   $83 = (4096 - ($x$0))|0;
   $84 = ($83>>>0)<($81>>>0);
   if ($84) {
    label = 31;
    break;
   }
   $85 = $81 << 19;
   $86 = (($syms) + ($j$1<<4)|0);
   HEAP32[$86>>2] = $85;
   $87 = (4096 - ($81))|0;
   $88 = $87&65535;
   $89 = (((($syms) + ($j$1<<4)|0)) + 12|0);
   HEAP16[$89>>1] = $88;
   $90 = ($81>>>0)<(2);
   if ($90) {
    $91 = (((($syms) + ($j$1<<4)|0)) + 4|0);
    HEAP32[$91>>2] = -1;
    $92 = (((($syms) + ($j$1<<4)|0)) + 14|0);
    HEAP16[$92>>1] = 0;
    $93 = (($x$0) + 4095)|0;
    $94 = (((($syms) + ($j$1<<4)|0)) + 8|0);
    HEAP32[$94>>2] = $93;
    $$pre$phi62Z2D = $92;$113 = 0;
   } else {
    $shift$0$i = 0;
    while(1) {
     $95 = 1 << $shift$0$i;
     $96 = ($95>>>0)<($81>>>0);
     if (!($96)) {
      break;
     }
     $97 = (($shift$0$i) + 1)|0;
     $shift$0$i = $97;
    }
    $98 = (($shift$0$i) + 31)|0;
    $99 = (_bitshift64Shl(1,0,($98|0))|0);
    $100 = tempRet0;
    $101 = (_i64Add(($99|0),($100|0),($81|0),0)|0);
    $102 = tempRet0;
    $103 = (_i64Add(($101|0),($102|0),-1,-1)|0);
    $104 = tempRet0;
    $105 = (___udivdi3(($103|0),($104|0),($81|0),0)|0);
    $106 = tempRet0;
    $107 = (((($syms) + ($j$1<<4)|0)) + 4|0);
    HEAP32[$107>>2] = $105;
    $108 = (($shift$0$i) + 65535)|0;
    $109 = $108&65535;
    $110 = (((($syms) + ($j$1<<4)|0)) + 14|0);
    HEAP16[$110>>1] = $109;
    $111 = (((($syms) + ($j$1<<4)|0)) + 8|0);
    HEAP32[$111>>2] = $x$0;
    $$pre$phi62Z2D = $110;$113 = $108;
   }
   $112 = (($113) + 32)|0;
   $114 = $112&65535;
   HEAP16[$$pre$phi62Z2D>>1] = $114;
   $115 = (($x$0) + ($81))|0;
   $cp$4 = $cp$3;$rle$4 = $rle$3;$x$1 = $115;
  }
  $116 = (($j$1) + 1)|0;
  $cp$0 = $cp$4;$j$1 = $116;$rle$0 = $rle$4;$x$0 = $x$1;
 }
 if ((label|0) == 29) {
  ___assert_fail((20795|0),(20758|0),186,(20777|0));
  // unreachable;
 }
 else if ((label|0) == 31) {
  ___assert_fail((20823|0),(20758|0),187,(20777|0));
  // unreachable;
 }
 else if ((label|0) == 39) {
  $117 = ((($cp$0)) + 1|0);
  HEAP8[$cp$0>>0] = 0;
  $118 = $117;
  $119 = $5;
  $120 = (($118) - ($119))|0;
  $121 = $in_size & 3;
  switch ($121|0) {
  case 3:  {
   $122 = (($in_size) + -1)|0;
   $123 = (($in) + ($122)|0);
   $124 = HEAP8[$123>>0]|0;
   $125 = $124&255;
   $126 = (($syms) + ($125<<4)|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ($127|0)==(0);
   if ($128) {
    ___assert_fail((20858|0),(20758|0),271,(20874|0));
    // unreachable;
   }
   $129 = ($127>>>0)>(8388608);
   if ($129) {
    $ptr$0 = $17;$x$1$i11 = 8388608;
   } else {
    $ptr$0$i10 = $17;$x$0$i9 = 8388608;
    while(1) {
     $130 = $x$0$i9&255;
     $131 = ((($ptr$0$i10)) + -1|0);
     HEAP8[$131>>0] = $130;
     $132 = $x$0$i9 >>> 8;
     $133 = ($132>>>0)<($127>>>0);
     if ($133) {
      $ptr$0 = $131;$x$1$i11 = $132;
      break;
     } else {
      $ptr$0$i10 = $131;$x$0$i9 = $132;
     }
    }
   }
   $134 = (((($syms) + ($125<<4)|0)) + 4|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (___muldi3(($x$1$i11|0),0,($135|0),0)|0);
   $137 = tempRet0;
   $138 = (((($syms) + ($125<<4)|0)) + 14|0);
   $139 = HEAP16[$138>>1]|0;
   $140 = $139&65535;
   $141 = (_bitshift64Lshr(($136|0),($137|0),($140|0))|0);
   $142 = tempRet0;
   $143 = (((($syms) + ($125<<4)|0)) + 8|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = (($x$1$i11) + ($144))|0;
   $146 = (((($syms) + ($125<<4)|0)) + 12|0);
   $147 = HEAP16[$146>>1]|0;
   $148 = $147&65535;
   $149 = Math_imul($141, $148)|0;
   $150 = (($145) + ($149))|0;
   $ptr$1 = $ptr$0;$rans2$0 = $150;
   label = 45;
   break;
  }
  case 2:  {
   $ptr$1 = $17;$rans2$0 = 8388608;
   label = 45;
   break;
  }
  case 1:  {
   $ptr$3 = $17;$rans1$0 = 8388608;$rans2$1 = 8388608;
   label = 50;
   break;
  }
  default: {
   $ptr$5 = $17;$rans0$0 = 8388608;$rans1$1 = 8388608;$rans2$2 = 8388608;
  }
  }
  if ((label|0) == 45) {
   $151 = (($121) + -1)|0;
   $152 = (($in_size) - ($151))|0;
   $153 = (($in) + ($152)|0);
   $154 = HEAP8[$153>>0]|0;
   $155 = $154&255;
   $156 = (($syms) + ($155<<4)|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = ($157|0)==(0);
   if ($158) {
    ___assert_fail((20858|0),(20758|0),271,(20874|0));
    // unreachable;
   }
   $159 = ($157>>>0)>(8388608);
   if ($159) {
    $ptr$2 = $ptr$1;$x$1$i15 = 8388608;
   } else {
    $ptr$0$i14 = $ptr$1;$x$0$i13 = 8388608;
    while(1) {
     $160 = $x$0$i13&255;
     $161 = ((($ptr$0$i14)) + -1|0);
     HEAP8[$161>>0] = $160;
     $162 = $x$0$i13 >>> 8;
     $163 = ($162>>>0)<($157>>>0);
     if ($163) {
      $ptr$2 = $161;$x$1$i15 = $162;
      break;
     } else {
      $ptr$0$i14 = $161;$x$0$i13 = $162;
     }
    }
   }
   $164 = (((($syms) + ($155<<4)|0)) + 4|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = (___muldi3(($x$1$i15|0),0,($165|0),0)|0);
   $167 = tempRet0;
   $168 = (((($syms) + ($155<<4)|0)) + 14|0);
   $169 = HEAP16[$168>>1]|0;
   $170 = $169&65535;
   $171 = (_bitshift64Lshr(($166|0),($167|0),($170|0))|0);
   $172 = tempRet0;
   $173 = (((($syms) + ($155<<4)|0)) + 8|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = (($x$1$i15) + ($174))|0;
   $176 = (((($syms) + ($155<<4)|0)) + 12|0);
   $177 = HEAP16[$176>>1]|0;
   $178 = $177&65535;
   $179 = Math_imul($171, $178)|0;
   $180 = (($175) + ($179))|0;
   $ptr$3 = $ptr$2;$rans1$0 = $180;$rans2$1 = $rans2$0;
   label = 50;
  }
  if ((label|0) == 50) {
   $181 = (($in_size) - ($121))|0;
   $182 = (($in) + ($181)|0);
   $183 = HEAP8[$182>>0]|0;
   $184 = $183&255;
   $185 = (($syms) + ($184<<4)|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = ($186|0)==(0);
   if ($187) {
    ___assert_fail((20858|0),(20758|0),271,(20874|0));
    // unreachable;
   }
   $188 = ($186>>>0)>(8388608);
   if ($188) {
    $ptr$4 = $ptr$3;$x$1$i19 = 8388608;
   } else {
    $ptr$0$i18 = $ptr$3;$x$0$i17 = 8388608;
    while(1) {
     $189 = $x$0$i17&255;
     $190 = ((($ptr$0$i18)) + -1|0);
     HEAP8[$190>>0] = $189;
     $191 = $x$0$i17 >>> 8;
     $192 = ($191>>>0)<($186>>>0);
     if ($192) {
      $ptr$4 = $190;$x$1$i19 = $191;
      break;
     } else {
      $ptr$0$i18 = $190;$x$0$i17 = $191;
     }
    }
   }
   $193 = (((($syms) + ($184<<4)|0)) + 4|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = (___muldi3(($x$1$i19|0),0,($194|0),0)|0);
   $196 = tempRet0;
   $197 = (((($syms) + ($184<<4)|0)) + 14|0);
   $198 = HEAP16[$197>>1]|0;
   $199 = $198&65535;
   $200 = (_bitshift64Lshr(($195|0),($196|0),($199|0))|0);
   $201 = tempRet0;
   $202 = (((($syms) + ($184<<4)|0)) + 8|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = (($x$1$i19) + ($203))|0;
   $205 = (((($syms) + ($184<<4)|0)) + 12|0);
   $206 = HEAP16[$205>>1]|0;
   $207 = $206&65535;
   $208 = Math_imul($200, $207)|0;
   $209 = (($204) + ($208))|0;
   $ptr$5 = $ptr$4;$rans0$0 = $209;$rans1$1 = $rans1$0;$rans2$2 = $rans2$1;
  }
  $210 = $in_size & -4;
  $i$1 = $210;$ptr$6 = $ptr$5;$rans0$1 = $rans0$0;$rans1$2 = $rans1$1;$rans2$3 = $rans2$2;$rans3$0 = 8388608;
  while(1) {
   $211 = ($i$1|0)>(0);
   if (!($211)) {
    label = 74;
    break;
   }
   $212 = (($i$1) + -1)|0;
   $213 = (($in) + ($212)|0);
   $214 = HEAP8[$213>>0]|0;
   $215 = $214&255;
   $216 = (($i$1) + -2)|0;
   $217 = (($in) + ($216)|0);
   $218 = HEAP8[$217>>0]|0;
   $219 = $218&255;
   $220 = (($i$1) + -3)|0;
   $221 = (($in) + ($220)|0);
   $222 = HEAP8[$221>>0]|0;
   $223 = $222&255;
   $224 = (($i$1) + -4)|0;
   $225 = (($in) + ($224)|0);
   $226 = HEAP8[$225>>0]|0;
   $227 = $226&255;
   $228 = (($syms) + ($215<<4)|0);
   $229 = HEAP32[$228>>2]|0;
   $230 = ($229|0)==(0);
   if ($230) {
    label = 58;
    break;
   }
   $231 = ($rans3$0>>>0)<($229>>>0);
   if ($231) {
    $ptr$7 = $ptr$6;$x$1$i23 = $rans3$0;
   } else {
    $ptr$0$i22 = $ptr$6;$x$0$i21 = $rans3$0;
    while(1) {
     $232 = $x$0$i21&255;
     $233 = ((($ptr$0$i22)) + -1|0);
     HEAP8[$233>>0] = $232;
     $234 = $x$0$i21 >>> 8;
     $235 = ($234>>>0)<($229>>>0);
     if ($235) {
      $ptr$7 = $233;$x$1$i23 = $234;
      break;
     } else {
      $ptr$0$i22 = $233;$x$0$i21 = $234;
     }
    }
   }
   $236 = (((($syms) + ($215<<4)|0)) + 4|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = (___muldi3(($x$1$i23|0),0,($237|0),0)|0);
   $239 = tempRet0;
   $240 = (((($syms) + ($215<<4)|0)) + 14|0);
   $241 = HEAP16[$240>>1]|0;
   $242 = $241&65535;
   $243 = (_bitshift64Lshr(($238|0),($239|0),($242|0))|0);
   $244 = tempRet0;
   $245 = (((($syms) + ($215<<4)|0)) + 8|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = (($x$1$i23) + ($246))|0;
   $248 = (((($syms) + ($215<<4)|0)) + 12|0);
   $249 = HEAP16[$248>>1]|0;
   $250 = $249&65535;
   $251 = Math_imul($243, $250)|0;
   $252 = (($247) + ($251))|0;
   $253 = (($syms) + ($219<<4)|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = ($254|0)==(0);
   if ($255) {
    label = 62;
    break;
   }
   $256 = ($rans2$3>>>0)<($254>>>0);
   if ($256) {
    $ptr$8 = $ptr$7;$x$1$i7 = $rans2$3;
   } else {
    $ptr$0$i6 = $ptr$7;$x$0$i5 = $rans2$3;
    while(1) {
     $257 = $x$0$i5&255;
     $258 = ((($ptr$0$i6)) + -1|0);
     HEAP8[$258>>0] = $257;
     $259 = $x$0$i5 >>> 8;
     $260 = ($259>>>0)<($254>>>0);
     if ($260) {
      $ptr$8 = $258;$x$1$i7 = $259;
      break;
     } else {
      $ptr$0$i6 = $258;$x$0$i5 = $259;
     }
    }
   }
   $261 = (((($syms) + ($219<<4)|0)) + 4|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = (___muldi3(($x$1$i7|0),0,($262|0),0)|0);
   $264 = tempRet0;
   $265 = (((($syms) + ($219<<4)|0)) + 14|0);
   $266 = HEAP16[$265>>1]|0;
   $267 = $266&65535;
   $268 = (_bitshift64Lshr(($263|0),($264|0),($267|0))|0);
   $269 = tempRet0;
   $270 = (((($syms) + ($219<<4)|0)) + 8|0);
   $271 = HEAP32[$270>>2]|0;
   $272 = (($x$1$i7) + ($271))|0;
   $273 = (((($syms) + ($219<<4)|0)) + 12|0);
   $274 = HEAP16[$273>>1]|0;
   $275 = $274&65535;
   $276 = Math_imul($268, $275)|0;
   $277 = (($272) + ($276))|0;
   $278 = (($syms) + ($223<<4)|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = ($279|0)==(0);
   if ($280) {
    label = 66;
    break;
   }
   $281 = ($rans1$2>>>0)<($279>>>0);
   if ($281) {
    $ptr$9 = $ptr$8;$x$1$i3 = $rans1$2;
   } else {
    $ptr$0$i2 = $ptr$8;$x$0$i1 = $rans1$2;
    while(1) {
     $282 = $x$0$i1&255;
     $283 = ((($ptr$0$i2)) + -1|0);
     HEAP8[$283>>0] = $282;
     $284 = $x$0$i1 >>> 8;
     $285 = ($284>>>0)<($279>>>0);
     if ($285) {
      $ptr$9 = $283;$x$1$i3 = $284;
      break;
     } else {
      $ptr$0$i2 = $283;$x$0$i1 = $284;
     }
    }
   }
   $286 = (((($syms) + ($223<<4)|0)) + 4|0);
   $287 = HEAP32[$286>>2]|0;
   $288 = (___muldi3(($x$1$i3|0),0,($287|0),0)|0);
   $289 = tempRet0;
   $290 = (((($syms) + ($223<<4)|0)) + 14|0);
   $291 = HEAP16[$290>>1]|0;
   $292 = $291&65535;
   $293 = (_bitshift64Lshr(($288|0),($289|0),($292|0))|0);
   $294 = tempRet0;
   $295 = (((($syms) + ($223<<4)|0)) + 8|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = (($x$1$i3) + ($296))|0;
   $298 = (((($syms) + ($223<<4)|0)) + 12|0);
   $299 = HEAP16[$298>>1]|0;
   $300 = $299&65535;
   $301 = Math_imul($293, $300)|0;
   $302 = (($297) + ($301))|0;
   $303 = (($syms) + ($227<<4)|0);
   $304 = HEAP32[$303>>2]|0;
   $305 = ($304|0)==(0);
   if ($305) {
    label = 70;
    break;
   }
   $306 = ($rans0$1>>>0)<($304>>>0);
   if ($306) {
    $ptr$10 = $ptr$9;$x$1$i = $rans0$1;
   } else {
    $ptr$0$i = $ptr$9;$x$0$i = $rans0$1;
    while(1) {
     $307 = $x$0$i&255;
     $308 = ((($ptr$0$i)) + -1|0);
     HEAP8[$308>>0] = $307;
     $309 = $x$0$i >>> 8;
     $310 = ($309>>>0)<($304>>>0);
     if ($310) {
      $ptr$10 = $308;$x$1$i = $309;
      break;
     } else {
      $ptr$0$i = $308;$x$0$i = $309;
     }
    }
   }
   $311 = (((($syms) + ($227<<4)|0)) + 4|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = (___muldi3(($x$1$i|0),0,($312|0),0)|0);
   $314 = tempRet0;
   $315 = (((($syms) + ($227<<4)|0)) + 14|0);
   $316 = HEAP16[$315>>1]|0;
   $317 = $316&65535;
   $318 = (_bitshift64Lshr(($313|0),($314|0),($317|0))|0);
   $319 = tempRet0;
   $320 = (((($syms) + ($227<<4)|0)) + 8|0);
   $321 = HEAP32[$320>>2]|0;
   $322 = (($x$1$i) + ($321))|0;
   $323 = (((($syms) + ($227<<4)|0)) + 12|0);
   $324 = HEAP16[$323>>1]|0;
   $325 = $324&65535;
   $326 = Math_imul($318, $325)|0;
   $327 = (($322) + ($326))|0;
   $i$1 = $224;$ptr$6 = $ptr$10;$rans0$1 = $327;$rans1$2 = $302;$rans2$3 = $277;$rans3$0 = $252;
  }
  if ((label|0) == 58) {
   ___assert_fail((20858|0),(20758|0),271,(20874|0));
   // unreachable;
  }
  else if ((label|0) == 62) {
   ___assert_fail((20858|0),(20758|0),271,(20874|0));
   // unreachable;
  }
  else if ((label|0) == 66) {
   ___assert_fail((20858|0),(20758|0),271,(20874|0));
   // unreachable;
  }
  else if ((label|0) == 70) {
   ___assert_fail((20858|0),(20758|0),271,(20874|0));
   // unreachable;
  }
  else if ((label|0) == 74) {
   $328 = ((($ptr$6)) + -4|0);
   $329 = $rans3$0&255;
   HEAP8[$328>>0] = $329;
   $330 = $rans3$0 >>> 8;
   $331 = $330&255;
   $332 = ((($ptr$6)) + -3|0);
   HEAP8[$332>>0] = $331;
   $333 = $rans3$0 >>> 16;
   $334 = $333&255;
   $335 = ((($ptr$6)) + -2|0);
   HEAP8[$335>>0] = $334;
   $336 = $rans3$0 >>> 24;
   $337 = $336&255;
   $338 = ((($ptr$6)) + -1|0);
   HEAP8[$338>>0] = $337;
   $339 = ((($ptr$6)) + -8|0);
   $340 = $rans2$3&255;
   HEAP8[$339>>0] = $340;
   $341 = $rans2$3 >>> 8;
   $342 = $341&255;
   $343 = ((($ptr$6)) + -7|0);
   HEAP8[$343>>0] = $342;
   $344 = $rans2$3 >>> 16;
   $345 = $344&255;
   $346 = ((($ptr$6)) + -6|0);
   HEAP8[$346>>0] = $345;
   $347 = $rans2$3 >>> 24;
   $348 = $347&255;
   $349 = ((($ptr$6)) + -5|0);
   HEAP8[$349>>0] = $348;
   $350 = ((($ptr$6)) + -12|0);
   $351 = $rans1$2&255;
   HEAP8[$350>>0] = $351;
   $352 = $rans1$2 >>> 8;
   $353 = $352&255;
   $354 = ((($ptr$6)) + -11|0);
   HEAP8[$354>>0] = $353;
   $355 = $rans1$2 >>> 16;
   $356 = $355&255;
   $357 = ((($ptr$6)) + -10|0);
   HEAP8[$357>>0] = $356;
   $358 = $rans1$2 >>> 24;
   $359 = $358&255;
   $360 = ((($ptr$6)) + -9|0);
   HEAP8[$360>>0] = $359;
   $361 = ((($ptr$6)) + -16|0);
   $362 = $rans0$1&255;
   HEAP8[$361>>0] = $362;
   $363 = $rans0$1 >>> 8;
   $364 = $363&255;
   $365 = ((($ptr$6)) + -15|0);
   HEAP8[$365>>0] = $364;
   $366 = $rans0$1 >>> 16;
   $367 = $366&255;
   $368 = ((($ptr$6)) + -14|0);
   HEAP8[$368>>0] = $367;
   $369 = $rans0$1 >>> 24;
   $370 = $369&255;
   $371 = ((($ptr$6)) + -13|0);
   HEAP8[$371>>0] = $370;
   $$cast25 = $361;
   $372 = $17;
   $373 = (($372) - ($$cast25))|0;
   $374 = (($373) + ($120))|0;
   HEAP32[$out_size>>2] = $374;
   $375 = ((($5)) + 1|0);
   HEAP8[$5>>0] = 0;
   $376 = HEAP32[$out_size>>2]|0;
   $377 = (($376) + 247)|0;
   $378 = $377&255;
   $379 = ((($5)) + 2|0);
   HEAP8[$375>>0] = $378;
   $380 = HEAP32[$out_size>>2]|0;
   $381 = (($380) + 65527)|0;
   $382 = $381 >>> 8;
   $383 = $382&255;
   $384 = ((($5)) + 3|0);
   HEAP8[$379>>0] = $383;
   $385 = HEAP32[$out_size>>2]|0;
   $386 = (($385) + 16777207)|0;
   $387 = $386 >>> 16;
   $388 = $387&255;
   $389 = ((($5)) + 4|0);
   HEAP8[$384>>0] = $388;
   $390 = HEAP32[$out_size>>2]|0;
   $391 = (($390) + -9)|0;
   $392 = $391 >>> 24;
   $393 = $392&255;
   $394 = ((($5)) + 5|0);
   HEAP8[$389>>0] = $393;
   $395 = $in_size&255;
   $396 = ((($5)) + 6|0);
   HEAP8[$394>>0] = $395;
   $397 = $in_size >>> 8;
   $398 = $397&255;
   $399 = ((($5)) + 7|0);
   HEAP8[$396>>0] = $398;
   $400 = $in_size >>> 16;
   $401 = $400&255;
   $402 = ((($5)) + 8|0);
   HEAP8[$399>>0] = $401;
   $403 = $in_size >>> 24;
   $404 = $403&255;
   HEAP8[$402>>0] = $404;
   _memmove(($117|0),($361|0),($373|0))|0;
   $$0 = $5;
   STACKTOP = sp;return ($$0|0);
  }
 }
 return (0)|0;
}
function _kh_get_m_s2i($h,$key) {
 $h = $h|0;
 $key = $key|0;
 var $$0 = 0, $$0$i = 0, $$014$i = 0, $$05$i = 0, $$lcssa$i = 0, $$lcssa2$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h$0$i = 0, $h$1$i = 0, $i$0 = 0, $i$0$ = 0, $or$cond$i = 0, $or$cond3$i = 0, $s$pn$i = 0, $step$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$h>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (($0) + -1)|0;
 $3 = HEAP8[$key>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = ($3<<24>>24)==(0);
 L4: do {
  if ($5) {
   $h$1$i = $4;
  } else {
   $h$0$i = $4;$s$pn$i = $key;
   while(1) {
    $$0$i = ((($s$pn$i)) + 1|0);
    $6 = HEAP8[$$0$i>>0]|0;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $h$1$i = $h$0$i;
     break L4;
    }
    $8 = ($h$0$i*31)|0;
    $9 = $6 << 24 >> 24;
    $10 = (($8) + ($9))|0;
    $h$0$i = $10;$s$pn$i = $$0$i;
   }
  }
 } while(0);
 $11 = $h$1$i & $2;
 $12 = ((($h)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($h)) + 20|0);
 $i$0 = $11;$step$0 = 0;
 while(1) {
  $15 = $i$0 >>> 4;
  $16 = (($13) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $i$0 << 1;
  $19 = $18 & 30;
  $20 = 2 << $19;
  $21 = $17 & $20;
  $22 = ($21|0)==(0);
  if (!($22)) {
   label = 12;
   break;
  }
  $23 = 1 << $19;
  $24 = $17 & $23;
  $25 = ($24|0)==(0);
  if ($25) {
   $26 = HEAP32[$14>>2]|0;
   $27 = (($26) + ($i$0<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = HEAP8[$28>>0]|0;
   $30 = ($29<<24>>24)!=($3<<24>>24);
   $31 = ($29<<24>>24)==(0);
   $or$cond3$i = $31 | $30;
   if ($or$cond3$i) {
    $$lcssa$i = $29;$$lcssa2$i = $3;
   } else {
    $$014$i = $28;$$05$i = $key;
    while(1) {
     $32 = ((($$014$i)) + 1|0);
     $33 = ((($$05$i)) + 1|0);
     $34 = HEAP8[$32>>0]|0;
     $35 = HEAP8[$33>>0]|0;
     $36 = ($34<<24>>24)!=($35<<24>>24);
     $37 = ($34<<24>>24)==(0);
     $or$cond$i = $37 | $36;
     if ($or$cond$i) {
      $$lcssa$i = $34;$$lcssa2$i = $35;
      break;
     } else {
      $$014$i = $32;$$05$i = $33;
     }
    }
   }
   $38 = ($$lcssa$i<<24>>24)==($$lcssa2$i<<24>>24);
   if ($38) {
    label = 12;
    break;
   }
  }
  $39 = (($step$0) + 1)|0;
  $40 = (($i$0) + ($39))|0;
  $41 = $40 & $2;
  $42 = ($41|0)==($11|0);
  if ($42) {
   $$0 = $0;
   label = 13;
   break;
  } else {
   $i$0 = $41;$step$0 = $39;
  }
 }
 if ((label|0) == 12) {
  $43 = 3 << $19;
  $44 = $17 & $43;
  $45 = ($44|0)==(0);
  $i$0$ = $45 ? $i$0 : $0;
  return ($i$0$|0);
 }
 else if ((label|0) == 13) {
  return ($$0|0);
 }
 return (0)|0;
}
function _string_ndup($a_str,$instr,$len) {
 $a_str = $a_str|0;
 $instr = $instr|0;
 $len = $len|0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i$i = 0, $$031$i$i = 0, $$04$lcssa$i$i = 0, $$0430$i$i = 0, $$06$lcssa$i$i = 0, $$0629$i$i = 0, $$1$lcssa$i$i = 0, $$117$i$i = 0, $$15$ph$i$i = 0, $$1511$i$i = 0, $$17$ph$i$i = 0, $$1710$i$i = 0, $$2$ph$i$i = 0, $$212$i$i = 0, $$28$i$i = 0, $$3$i$i = 0, $$lcssa$i$i = 0, $$pre = 0;
 var $$pre$phiZ2D = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, $or$cond28$i$i = 0, $phitmp = 0, $wd$0$lcssa$i$i = 0, $wd$018$i$i = 0, $ws$0$lcssa$i$i = 0;
 var $ws$019$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($len) + 1)|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($a_str)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$pre = HEAP32[$a_str>>2]|0;
  $$pre$phiZ2D = $a_str;$17 = $$pre;
  label = 6;
 } else {
  $5 = (($3) + -1)|0;
  $6 = ((($a_str)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (((($7) + ($5<<3)|0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + ($0))|0;
  $11 = HEAP32[$a_str>>2]|0;
  $12 = ($10>>>0)<($11>>>0);
  if ($12) {
   $13 = (($7) + ($5<<3)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + ($9)|0);
   HEAP32[$8>>2] = $10;
   $$0$i = $15;
  } else {
   $$pre$phiZ2D = $a_str;$17 = $11;
   label = 6;
  }
 }
 do {
  if ((label|0) == 6) {
   $16 = ($17>>>0)<($0>>>0);
   if ($16) {
    HEAP32[$$pre$phiZ2D>>2] = $0;
   }
   $18 = ((($a_str)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $3 << 3;
   $21 = (($20) + 8)|0;
   $22 = (_realloc($19,$21)|0);
   $23 = ($22|0)==(0|0);
   if ($23) {
    $$0 = 0;
    return ($$0|0);
   }
   HEAP32[$18>>2] = $22;
   $24 = HEAP32[$2>>2]|0;
   $25 = (($22) + ($24<<3)|0);
   $26 = HEAP32[$$pre$phiZ2D>>2]|0;
   $27 = (_malloc($26)|0);
   HEAP32[$25>>2] = $27;
   $28 = ($27|0)==(0|0);
   if ($28) {
    $$0 = 0;
    return ($$0|0);
   }
   $29 = (((($22) + ($24<<3)|0)) + 4|0);
   HEAP32[$29>>2] = 0;
   $30 = HEAP32[$2>>2]|0;
   $31 = (($30) + 1)|0;
   HEAP32[$2>>2] = $31;
   $32 = ($25|0)==(0|0);
   if ($32) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $33 = (((($22) + ($24<<3)|0)) + 4|0);
    HEAP32[$33>>2] = $0;
    $34 = HEAP32[$25>>2]|0;
    $$0$i = $34;
    break;
   }
  }
 } while(0);
 $35 = ($$0$i|0)==(0|0);
 if ($35) {
  $$0 = 0;
  return ($$0|0);
 }
 $36 = $instr;
 $37 = $$0$i;
 $38 = $36 ^ $37;
 $39 = $38 & 3;
 $40 = ($39|0)==(0);
 L26: do {
  if ($40) {
   $41 = $36 & 3;
   $42 = ($41|0)!=(0);
   $43 = ($len|0)!=(0);
   $or$cond28$i$i = $43 & $42;
   if ($or$cond28$i$i) {
    $$031$i$i = $len;$$0430$i$i = $instr;$$0629$i$i = $$0$i;
    while(1) {
     $44 = HEAP8[$$0430$i$i>>0]|0;
     HEAP8[$$0629$i$i>>0] = $44;
     $45 = ($44<<24>>24)==(0);
     if ($45) {
      $$28$i$i = $$0629$i$i;$$3$i$i = $$031$i$i;
      break L26;
     }
     $46 = (($$031$i$i) + -1)|0;
     $47 = ((($$0430$i$i)) + 1|0);
     $48 = ((($$0629$i$i)) + 1|0);
     $49 = $47;
     $50 = $49 & 3;
     $51 = ($50|0)!=(0);
     $52 = ($46|0)!=(0);
     $or$cond$i$i = $52 & $51;
     if ($or$cond$i$i) {
      $$031$i$i = $46;$$0430$i$i = $47;$$0629$i$i = $48;
     } else {
      $$0$lcssa$i$i = $46;$$04$lcssa$i$i = $47;$$06$lcssa$i$i = $48;$$lcssa$i$i = $52;
      break;
     }
    }
   } else {
    $$0$lcssa$i$i = $len;$$04$lcssa$i$i = $instr;$$06$lcssa$i$i = $$0$i;$$lcssa$i$i = $43;
   }
   if ($$lcssa$i$i) {
    $$pre7 = HEAP8[$$04$lcssa$i$i>>0]|0;
    $phitmp = ($$pre7<<24>>24)==(0);
    if ($phitmp) {
     $$28$i$i = $$06$lcssa$i$i;$$3$i$i = $$0$lcssa$i$i;
    } else {
     $53 = ($$0$lcssa$i$i>>>0)>(3);
     L35: do {
      if ($53) {
       $$117$i$i = $$0$lcssa$i$i;$wd$018$i$i = $$06$lcssa$i$i;$ws$019$i$i = $$04$lcssa$i$i;
       while(1) {
        $54 = HEAP32[$ws$019$i$i>>2]|0;
        $55 = (($54) + -16843009)|0;
        $56 = $54 & -2139062144;
        $57 = $56 ^ -2139062144;
        $58 = $57 & $55;
        $59 = ($58|0)==(0);
        if (!($59)) {
         $$1$lcssa$i$i = $$117$i$i;$wd$0$lcssa$i$i = $wd$018$i$i;$ws$0$lcssa$i$i = $ws$019$i$i;
         break L35;
        }
        HEAP32[$wd$018$i$i>>2] = $54;
        $60 = (($$117$i$i) + -4)|0;
        $61 = ((($ws$019$i$i)) + 4|0);
        $62 = ((($wd$018$i$i)) + 4|0);
        $63 = ($60>>>0)>(3);
        if ($63) {
         $$117$i$i = $60;$wd$018$i$i = $62;$ws$019$i$i = $61;
        } else {
         $$1$lcssa$i$i = $60;$wd$0$lcssa$i$i = $62;$ws$0$lcssa$i$i = $61;
         break;
        }
       }
      } else {
       $$1$lcssa$i$i = $$0$lcssa$i$i;$wd$0$lcssa$i$i = $$06$lcssa$i$i;$ws$0$lcssa$i$i = $$04$lcssa$i$i;
      }
     } while(0);
     $$15$ph$i$i = $ws$0$lcssa$i$i;$$17$ph$i$i = $wd$0$lcssa$i$i;$$2$ph$i$i = $$1$lcssa$i$i;
     label = 23;
    }
   } else {
    $$28$i$i = $$06$lcssa$i$i;$$3$i$i = 0;
   }
  } else {
   $$15$ph$i$i = $instr;$$17$ph$i$i = $$0$i;$$2$ph$i$i = $len;
   label = 23;
  }
 } while(0);
 L40: do {
  if ((label|0) == 23) {
   $64 = ($$2$ph$i$i|0)==(0);
   if ($64) {
    $$28$i$i = $$17$ph$i$i;$$3$i$i = 0;
   } else {
    $$1511$i$i = $$15$ph$i$i;$$1710$i$i = $$17$ph$i$i;$$212$i$i = $$2$ph$i$i;
    while(1) {
     $65 = HEAP8[$$1511$i$i>>0]|0;
     HEAP8[$$1710$i$i>>0] = $65;
     $66 = ($65<<24>>24)==(0);
     if ($66) {
      $$28$i$i = $$1710$i$i;$$3$i$i = $$212$i$i;
      break L40;
     }
     $67 = (($$212$i$i) + -1)|0;
     $68 = ((($$1511$i$i)) + 1|0);
     $69 = ((($$1710$i$i)) + 1|0);
     $70 = ($67|0)==(0);
     if ($70) {
      $$28$i$i = $69;$$3$i$i = 0;
      break;
     } else {
      $$1511$i$i = $68;$$1710$i$i = $69;$$212$i$i = $67;
     }
    }
   }
  }
 } while(0);
 _memset(($$28$i$i|0),0,($$3$i$i|0))|0;
 $71 = (($$0$i) + ($len)|0);
 HEAP8[$71>>0] = 0;
 $$0 = $$0$i;
 return ($$0|0);
}
function _kftp_connect($ftp) {
 $ftp = $ftp|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i25 = 0, $$0$i$i$i3 = 0, $$0$i$i27 = 0, $$0$i$i5 = 0, $$0$i23 = 0, $$0$i45 = 0, $$01$lcssa$i = 0, $$01$lcssa$i11 = 0, $$01$lcssa$i33 = 0, $$014$i = 0, $$014$i30 = 0, $$014$i8 = 0, $$1$lcssa$i = 0, $$1$lcssa$i19 = 0, $$1$lcssa$i41 = 0, $$pn$i = 0;
 var $$pn$i22 = 0, $$pn$i44 = 0, $$pn15$i = 0, $$pn15$i15 = 0, $$pn15$i37 = 0, $$pre$i = 0, $$pre$i16 = 0, $$pre$i38 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0;
 var $w$0$i = 0, $w$0$i13 = 0, $w$0$i35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = ((($ftp)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ftp)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_socket_connect($1,$3)|0);
 $5 = ((($ftp)) + 24|0);
 HEAP32[$5>>2] = $4;
 $6 = ($4|0)==(-1);
 if ($6) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 (_kftp_get_response($ftp)|0);
 $7 = HEAP32[$5>>2]|0;
 $8 = (_socket_wait($7,0)|0);
 $9 = ($8|0)<(1);
 if (!($9)) {
  L6: do {
   if (((((21113) & 3)|0)==(0))) {
    $$01$lcssa$i = 21113;
    label = 6;
   } else {
    $$014$i = 21113;$100 = (21113);
    while(1) {
     $10 = HEAP8[$$014$i>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if ($11) {
      $$pn$i = $100;
      break L6;
     }
     $12 = ((($$014$i)) + 1|0);
     $13 = $12;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$01$lcssa$i = $12;
      label = 6;
      break;
     } else {
      $$014$i = $12;$100 = $13;
     }
    }
   }
  } while(0);
  if ((label|0) == 6) {
   $w$0$i = $$01$lcssa$i;
   while(1) {
    $16 = HEAP32[$w$0$i>>2]|0;
    $17 = (($16) + -16843009)|0;
    $18 = $16 & -2139062144;
    $19 = $18 ^ -2139062144;
    $20 = $19 & $17;
    $21 = ($20|0)==(0);
    $22 = ((($w$0$i)) + 4|0);
    if ($21) {
     $w$0$i = $22;
    } else {
     break;
    }
   }
   $23 = $16&255;
   $24 = ($23<<24>>24)==(0);
   if ($24) {
    $$1$lcssa$i = $w$0$i;
   } else {
    $$pn15$i = $w$0$i;
    while(1) {
     $25 = ((($$pn15$i)) + 1|0);
     $$pre$i = HEAP8[$25>>0]|0;
     $26 = ($$pre$i<<24>>24)==(0);
     if ($26) {
      $$1$lcssa$i = $25;
      break;
     } else {
      $$pn15$i = $25;
     }
    }
   }
   $27 = $$1$lcssa$i;
   $$pn$i = $27;
  }
  $$0$i = (($$pn$i) - (21113))|0;
  $28 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer>>2] = $28;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21113;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $$0$i;
  $29 = (___syscall4(4,($vararg_buffer|0))|0);
  $30 = ($29>>>0)>(4294963200);
  if ($30) {
   $31 = (0 - ($29))|0;
   $32 = HEAP32[6773]|0;
   $33 = ($32|0)==(0|0);
   if ($33) {
    $$0$i$i$i3 = 27136;
   } else {
    $34 = (_pthread_self()|0);
    $35 = ((($34)) + 64|0);
    $36 = HEAP32[$35>>2]|0;
    $$0$i$i$i3 = $36;
   }
   HEAP32[$$0$i$i$i3>>2] = $31;
   $$0$i$i5 = -1;
  } else {
   $$0$i$i5 = $29;
  }
  $37 = ($$0$i$i5|0)==($$0$i|0);
  if ($37) {
   (_kftp_get_response($ftp)|0);
  }
 }
 $38 = HEAP32[$5>>2]|0;
 $39 = (_socket_wait($38,0)|0);
 $40 = ($39|0)<(1);
 if (!($40)) {
  L30: do {
   if (((((21130) & 3)|0)==(0))) {
    $$01$lcssa$i11 = 21130;
    label = 21;
   } else {
    $$014$i8 = 21130;$101 = (21130);
    while(1) {
     $41 = HEAP8[$$014$i8>>0]|0;
     $42 = ($41<<24>>24)==(0);
     if ($42) {
      $$pn$i22 = $101;
      break L30;
     }
     $43 = ((($$014$i8)) + 1|0);
     $44 = $43;
     $45 = $44 & 3;
     $46 = ($45|0)==(0);
     if ($46) {
      $$01$lcssa$i11 = $43;
      label = 21;
      break;
     } else {
      $$014$i8 = $43;$101 = $44;
     }
    }
   }
  } while(0);
  if ((label|0) == 21) {
   $w$0$i13 = $$01$lcssa$i11;
   while(1) {
    $47 = HEAP32[$w$0$i13>>2]|0;
    $48 = (($47) + -16843009)|0;
    $49 = $47 & -2139062144;
    $50 = $49 ^ -2139062144;
    $51 = $50 & $48;
    $52 = ($51|0)==(0);
    $53 = ((($w$0$i13)) + 4|0);
    if ($52) {
     $w$0$i13 = $53;
    } else {
     break;
    }
   }
   $54 = $47&255;
   $55 = ($54<<24>>24)==(0);
   if ($55) {
    $$1$lcssa$i19 = $w$0$i13;
   } else {
    $$pn15$i15 = $w$0$i13;
    while(1) {
     $56 = ((($$pn15$i15)) + 1|0);
     $$pre$i16 = HEAP8[$56>>0]|0;
     $57 = ($$pre$i16<<24>>24)==(0);
     if ($57) {
      $$1$lcssa$i19 = $56;
      break;
     } else {
      $$pn15$i15 = $56;
     }
    }
   }
   $58 = $$1$lcssa$i19;
   $$pn$i22 = $58;
  }
  $$0$i23 = (($$pn$i22) - (21130))|0;
  $59 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $59;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 21130;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = $$0$i23;
  $60 = (___syscall4(4,($vararg_buffer3|0))|0);
  $61 = ($60>>>0)>(4294963200);
  if ($61) {
   $62 = (0 - ($60))|0;
   $63 = HEAP32[6773]|0;
   $64 = ($63|0)==(0|0);
   if ($64) {
    $$0$i$i$i25 = 27136;
   } else {
    $65 = (_pthread_self()|0);
    $66 = ((($65)) + 64|0);
    $67 = HEAP32[$66>>2]|0;
    $$0$i$i$i25 = $67;
   }
   HEAP32[$$0$i$i$i25>>2] = $62;
   $$0$i$i27 = -1;
  } else {
   $$0$i$i27 = $60;
  }
  $68 = ($$0$i$i27|0)==($$0$i23|0);
  if ($68) {
   (_kftp_get_response($ftp)|0);
  }
 }
 $69 = HEAP32[$5>>2]|0;
 $70 = (_socket_wait($69,0)|0);
 $71 = ($70|0)<(1);
 if ($71) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 L55: do {
  if (((((21143) & 3)|0)==(0))) {
   $$01$lcssa$i33 = 21143;
   label = 36;
  } else {
   $$014$i30 = 21143;$102 = (21143);
   while(1) {
    $72 = HEAP8[$$014$i30>>0]|0;
    $73 = ($72<<24>>24)==(0);
    if ($73) {
     $$pn$i44 = $102;
     break L55;
    }
    $74 = ((($$014$i30)) + 1|0);
    $75 = $74;
    $76 = $75 & 3;
    $77 = ($76|0)==(0);
    if ($77) {
     $$01$lcssa$i33 = $74;
     label = 36;
     break;
    } else {
     $$014$i30 = $74;$102 = $75;
    }
   }
  }
 } while(0);
 if ((label|0) == 36) {
  $w$0$i35 = $$01$lcssa$i33;
  while(1) {
   $78 = HEAP32[$w$0$i35>>2]|0;
   $79 = (($78) + -16843009)|0;
   $80 = $78 & -2139062144;
   $81 = $80 ^ -2139062144;
   $82 = $81 & $79;
   $83 = ($82|0)==(0);
   $84 = ((($w$0$i35)) + 4|0);
   if ($83) {
    $w$0$i35 = $84;
   } else {
    break;
   }
  }
  $85 = $78&255;
  $86 = ($85<<24>>24)==(0);
  if ($86) {
   $$1$lcssa$i41 = $w$0$i35;
  } else {
   $$pn15$i37 = $w$0$i35;
   while(1) {
    $87 = ((($$pn15$i37)) + 1|0);
    $$pre$i38 = HEAP8[$87>>0]|0;
    $88 = ($$pre$i38<<24>>24)==(0);
    if ($88) {
     $$1$lcssa$i41 = $87;
     break;
    } else {
     $$pn15$i37 = $87;
    }
   }
  }
  $89 = $$1$lcssa$i41;
  $$pn$i44 = $89;
 }
 $$0$i45 = (($$pn$i44) - (21143))|0;
 $90 = HEAP32[$5>>2]|0;
 HEAP32[$vararg_buffer8>>2] = $90;
 $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
 HEAP32[$vararg_ptr11>>2] = 21143;
 $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
 HEAP32[$vararg_ptr12>>2] = $$0$i45;
 $91 = (___syscall4(4,($vararg_buffer8|0))|0);
 $92 = ($91>>>0)>(4294963200);
 if ($92) {
  $93 = (0 - ($91))|0;
  $94 = HEAP32[6773]|0;
  $95 = ($94|0)==(0|0);
  if ($95) {
   $$0$i$i$i = 27136;
  } else {
   $96 = (_pthread_self()|0);
   $97 = ((($96)) + 64|0);
   $98 = HEAP32[$97>>2]|0;
   $$0$i$i$i = $98;
  }
  HEAP32[$$0$i$i$i>>2] = $93;
  $$0$i$i = -1;
 } else {
  $$0$i$i = $91;
 }
 $99 = ($$0$i$i|0)==($$0$i45|0);
 if (!($99)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 (_kftp_get_response($ftp)|0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _socket_connect($host,$port) {
 $host = $host|0;
 $port = $port|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i1 = 0, $$0$i$i$i10 = 0, $$0$i$i$i5 = 0, $$0$i$i14 = 0, $$0$i$i2$i = 0, $$0$i$ph = 0, $$0$i1$i = 0, $$0$i15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $hints = 0, $lng = 0, $on = 0, $res = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer27 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr2 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer27 = sp + 80|0;
 $vararg_buffer23 = sp + 72|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer3 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $0 = sp + 160|0;
 $1 = sp + 136|0;
 $on = sp + 128|0;
 $lng = sp;
 $hints = sp + 96|0;
 $res = sp + 88|0;
 HEAP32[$on>>2] = 1;
 $2 = $lng;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 HEAP32[$res>>2] = 0;
 $6 = ((($hints)) + 8|0);
 ;HEAP32[$hints>>2]=0|0;HEAP32[$hints+4>>2]=0|0;HEAP32[$hints+8>>2]=0|0;HEAP32[$hints+12>>2]=0|0;HEAP32[$hints+16>>2]=0|0;HEAP32[$hints+20>>2]=0|0;HEAP32[$hints+24>>2]=0|0;HEAP32[$hints+28>>2]=0|0;
 HEAP32[$6>>2] = 1;
 $7 = (_getaddrinfo(($host|0),($port|0),($hints|0),($res|0))|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = (_gai_strerror(($7|0))|0);
  HEAP32[$vararg_buffer>>2] = $host;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $port;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $9;
  _fprintf(9772,21055,$vararg_buffer);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = HEAP32[$res>>2]|0;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($10)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($10)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$0>>2] = $12;
 $17 = ((($0)) + 4|0);
 HEAP32[$17>>2] = $14;
 $18 = ((($0)) + 8|0);
 HEAP32[$18>>2] = $16;
 $19 = ((($0)) + 12|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($0)) + 16|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($0)) + 20|0);
 HEAP32[$21>>2] = 0;
 HEAP32[$vararg_buffer3>>2] = 1;
 $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
 HEAP32[$vararg_ptr6>>2] = $0;
 $22 = (___syscall102(102,($vararg_buffer3|0))|0);
 $23 = ($22>>>0)>(4294963200);
 if ($23) {
  $24 = (0 - ($22))|0;
  $25 = HEAP32[6773]|0;
  $26 = ($25|0)==(0|0);
  if ($26) {
   $$0$i$i$i = 27136;
  } else {
   $27 = (_pthread_self()|0);
   $28 = ((($27)) + 64|0);
   $29 = HEAP32[$28>>2]|0;
   $$0$i$i$i = $29;
  }
  HEAP32[$$0$i$i$i>>2] = $24;
  $$0$i$i14 = -1;$32 = $25;
  label = 9;
 } else {
  $30 = ($22|0)<(0);
  if ($30) {
   $$pre = HEAP32[6773]|0;
   $$0$i$i14 = $22;$32 = $$pre;
   label = 9;
  } else {
   $$0$i$ph = $22;
   label = 22;
  }
 }
 L12: do {
  if ((label|0) == 9) {
   $31 = ($32|0)==(0|0);
   if ($31) {
    $$0$i1$i = 27136;
   } else {
    $33 = (_pthread_self()|0);
    $34 = ((($33)) + 64|0);
    $35 = HEAP32[$34>>2]|0;
    $$0$i1$i = $35;
   }
   $36 = HEAP32[$$0$i1$i>>2]|0;
   L17: do {
    switch ($36|0) {
    case 93: case 22:  {
     $37 = $14 & 526336;
     $38 = ($37|0)==(0);
     if ($38) {
      label = 23;
     } else {
      HEAP32[$1>>2] = $12;
      $39 = ((($1)) + 4|0);
      $40 = $14 & -526337;
      HEAP32[$39>>2] = $40;
      $41 = ((($1)) + 8|0);
      HEAP32[$41>>2] = $16;
      $42 = ((($1)) + 12|0);
      HEAP32[$42>>2] = 0;
      $43 = ((($1)) + 16|0);
      HEAP32[$43>>2] = 0;
      $44 = ((($1)) + 20|0);
      HEAP32[$44>>2] = 0;
      HEAP32[$vararg_buffer7>>2] = 1;
      $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
      HEAP32[$vararg_ptr10>>2] = $1;
      $45 = (___syscall102(102,($vararg_buffer7|0))|0);
      $46 = ($45>>>0)>(4294963200);
      if ($46) {
       $47 = (0 - ($45))|0;
       $48 = HEAP32[6773]|0;
       $49 = ($48|0)==(0|0);
       if ($49) {
        $$0$i$i2$i = 27136;
       } else {
        $50 = (_pthread_self()|0);
        $51 = ((($50)) + 64|0);
        $52 = HEAP32[$51>>2]|0;
        $$0$i$i2$i = $52;
       }
       HEAP32[$$0$i$i2$i>>2] = $47;
       break L17;
      }
      $53 = ($45|0)<(0);
      if ($53) {
       $$0$i$ph = $45;
       label = 22;
       break L12;
      }
      $54 = $14 & 524288;
      $55 = ($54|0)==(0);
      if (!($55)) {
       HEAP32[$vararg_buffer11>>2] = 1;
       (_fcntl($45,2,$vararg_buffer11)|0);
      }
      $56 = $14 & 2048;
      $57 = ($56|0)==(0);
      if ($57) {
       $$0$i$ph = $45;
       label = 22;
       break L12;
      }
      $58 = (_fcntl($45,3,$vararg_buffer14)|0);
      $59 = $58 | 2048;
      HEAP32[$vararg_buffer16>>2] = $59;
      (_fcntl($45,4,$vararg_buffer16)|0);
      $$0$i$ph = $45;
      label = 22;
      break L12;
     }
     break;
    }
    default: {
     label = 23;
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $60 = ($$0$i$i14|0)==(-1);
    if (!($60)) {
     $$0$i15 = $$0$i$i14;
     break;
    }
   }
   _perror(21080);
   $61 = HEAP32[$res>>2]|0;
   _free($61);
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i15 = $$0$i$ph;
 }
 HEAP32[$0>>2] = $$0$i15;
 HEAP32[$17>>2] = 1;
 HEAP32[$18>>2] = 2;
 $62 = $on;
 HEAP32[$19>>2] = $62;
 HEAP32[$20>>2] = 4;
 HEAP32[$21>>2] = 0;
 HEAP32[$vararg_buffer19>>2] = 14;
 $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
 HEAP32[$vararg_ptr22>>2] = $0;
 $63 = (___syscall102(102,($vararg_buffer19|0))|0);
 $64 = ($63>>>0)>(4294963200);
 if ($64) {
  $65 = (0 - ($63))|0;
  $66 = HEAP32[6773]|0;
  $67 = ($66|0)==(0|0);
  if ($67) {
   $$0$i$i$i1 = 27136;
  } else {
   $68 = (_pthread_self()|0);
   $69 = ((($68)) + 64|0);
   $70 = HEAP32[$69>>2]|0;
   $$0$i$i$i1 = $70;
  }
  HEAP32[$$0$i$i$i1>>2] = $65;
  _perror(21087);
  $71 = HEAP32[$res>>2]|0;
  _free($71);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$0>>2] = $$0$i15;
 HEAP32[$17>>2] = 1;
 HEAP32[$18>>2] = 13;
 $72 = $lng;
 HEAP32[$19>>2] = $72;
 HEAP32[$20>>2] = 8;
 HEAP32[$21>>2] = 0;
 HEAP32[$vararg_buffer23>>2] = 14;
 $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
 HEAP32[$vararg_ptr26>>2] = $0;
 $73 = (___syscall102(102,($vararg_buffer23|0))|0);
 $74 = ($73>>>0)>(4294963200);
 if ($74) {
  $75 = (0 - ($73))|0;
  $76 = HEAP32[6773]|0;
  $77 = ($76|0)==(0|0);
  if ($77) {
   $$0$i$i$i5 = 27136;
  } else {
   $78 = (_pthread_self()|0);
   $79 = ((($78)) + 64|0);
   $80 = HEAP32[$79>>2]|0;
   $$0$i$i$i5 = $80;
  }
  HEAP32[$$0$i$i$i5>>2] = $75;
  _perror(21087);
  $81 = HEAP32[$res>>2]|0;
  _free($81);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $82 = HEAP32[$res>>2]|0;
 $83 = ((($82)) + 20|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ((($82)) + 16|0);
 $86 = HEAP32[$85>>2]|0;
 HEAP32[$0>>2] = $$0$i15;
 HEAP32[$17>>2] = $84;
 HEAP32[$18>>2] = $86;
 HEAP32[$19>>2] = 0;
 HEAP32[$20>>2] = 0;
 HEAP32[$21>>2] = 0;
 HEAP32[$vararg_buffer27>>2] = 3;
 $vararg_ptr30 = ((($vararg_buffer27)) + 4|0);
 HEAP32[$vararg_ptr30>>2] = $0;
 $87 = (___syscall102(102,($vararg_buffer27|0))|0);
 $88 = ($87>>>0)>(4294963200);
 if ($88) {
  $89 = (0 - ($87))|0;
  $90 = HEAP32[6773]|0;
  $91 = ($90|0)==(0|0);
  if ($91) {
   $$0$i$i$i10 = 27136;
  } else {
   $92 = (_pthread_self()|0);
   $93 = ((($92)) + 64|0);
   $94 = HEAP32[$93>>2]|0;
   $$0$i$i$i10 = $94;
  }
  HEAP32[$$0$i$i$i10>>2] = $89;
 } else {
  $95 = ($87|0)==(0);
  if ($95) {
   $97 = HEAP32[$res>>2]|0;
   _free($97);
   $$0 = $$0$i15;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _perror(21098);
 $96 = HEAP32[$res>>2]|0;
 _free($96);
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _kftp_get_response($ftp) {
 $ftp = $ftp|0;
 var $$ = 0, $$0 = 0, $$0$i$i$i = 0, $$pre = 0, $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $f$i = 0, $n$0 = 0, $n$1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $f$i = sp + 16|0;
 $c = sp + 128|0;
 $0 = ((($ftp)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_socket_wait($1,1)|0);
 $3 = ($2|0)<(1);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ((($ftp)) + 60|0);
 $5 = ((($ftp)) + 48|0);
 $n$0 = 0;
 while(1) {
  $6 = HEAP32[$0>>2]|0;
  HEAP32[$vararg_buffer>>2] = $6;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $c;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 1;
  $7 = (___syscall3(3,($vararg_buffer|0))|0);
  $8 = ($7>>>0)>(4294963200);
  if ($8) {
   $9 = (0 - ($7))|0;
   $10 = HEAP32[6773]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    $$0$i$i$i = 27136;
   } else {
    $12 = (_pthread_self()|0);
    $13 = ((($12)) + 64|0);
    $14 = HEAP32[$13>>2]|0;
    $$0$i$i$i = $14;
   }
   HEAP32[$$0$i$i$i>>2] = $9;
  } else {
   $15 = ($7|0)==(0);
   if ($15) {
    $n$1 = $n$0;
    break;
   }
  }
  $16 = HEAP32[$5>>2]|0;
  $17 = ($n$0|0)<($16|0);
  if ($17) {
   $$pre = HEAP32[$4>>2]|0;
   $25 = $$pre;
  } else {
   $18 = ($16|0)==(0);
   $19 = $16 << 1;
   $$ = $18 ? 256 : $19;
   HEAP32[$5>>2] = $$;
   $20 = HEAP32[$4>>2]|0;
   $21 = (_realloc($20,$$)|0);
   HEAP32[$4>>2] = $21;
   $25 = $21;
  }
  $22 = HEAP8[$c>>0]|0;
  $23 = (($n$0) + 1)|0;
  $24 = (($25) + ($n$0)|0);
  HEAP8[$24>>0] = $22;
  $26 = HEAP8[$c>>0]|0;
  $27 = ($26<<24>>24)==(10);
  if (!($27)) {
   $n$0 = $23;
   continue;
  }
  $28 = ($n$0|0)>(2);
  if (!($28)) {
   $n$0 = 0;
   continue;
  }
  $29 = HEAP32[$4>>2]|0;
  $30 = HEAP8[$29>>0]|0;
  $31 = $30 << 24 >> 24;
  $32 = (($31) + -48)|0;
  $33 = ($32>>>0)<(10);
  if (!($33)) {
   $n$0 = 0;
   continue;
  }
  $34 = ((($29)) + 1|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35 << 24 >> 24;
  $37 = (($36) + -48)|0;
  $38 = ($37>>>0)<(10);
  if (!($38)) {
   $n$0 = 0;
   continue;
  }
  $39 = ((($29)) + 2|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = (($41) + -48)|0;
  $43 = ($42>>>0)<(10);
  if (!($43)) {
   $n$0 = 0;
   continue;
  }
  $44 = ((($29)) + 3|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = ($45<<24>>24)==(45);
  if ($46) {
   $n$0 = 0;
  } else {
   $n$1 = $23;
   break;
  }
 }
 $47 = ($n$1|0)<(2);
 if ($47) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $48 = (($n$1) + -2)|0;
 $49 = HEAP32[$4>>2]|0;
 $50 = (($49) + ($48)|0);
 HEAP8[$50>>0] = 0;
 $51 = HEAP32[$4>>2]|0;
 HEAP32[$f$i>>2] = 0;
 $52 = ((($f$i)) + 4|0);
 HEAP32[$52>>2] = $51;
 $53 = ((($f$i)) + 44|0);
 HEAP32[$53>>2] = $51;
 $54 = ($51|0)<(0|0);
 $55 = ((($51)) + 2147483647|0);
 $$sink$i = $54 ? (-1) : $55;
 $56 = ((($f$i)) + 8|0);
 HEAP32[$56>>2] = $$sink$i;
 $57 = ((($f$i)) + 76|0);
 HEAP32[$57>>2] = -1;
 $58 = ((($f$i)) + 104|0);
 HEAP32[$58>>2] = 0;
 $59 = $$sink$i;
 $60 = $51;
 $61 = (($59) - ($60))|0;
 $62 = ((($f$i)) + 108|0);
 HEAP32[$62>>2] = $61;
 $63 = ((($f$i)) + 100|0);
 HEAP32[$63>>2] = $59;
 $64 = (___intscan($f$i,0,1,-2147483648,0)|0);
 $65 = tempRet0;
 $$0 = $64;
 STACKTOP = sp;return ($$0|0);
}
function _socket_wait($fd,$is_read) {
 $fd = $fd|0;
 $is_read = $is_read|0;
 var $$0$i$i$i = 0, $$0$i$i1 = 0, $$fds = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__b$0 = 0, $__i$0 = 0, $fds = 0, $fds$ = 0, $tv = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $fds = sp + 32|0;
 $tv = sp + 24|0;
 HEAP32[$tv>>2] = 5;
 $0 = ((($tv)) + 4|0);
 HEAP32[$0>>2] = 0;
 $__b$0 = $fds;$__i$0 = 32;
 while(1) {
  $1 = ($__i$0|0)==(0);
  if ($1) {
   break;
  }
  HEAP32[$__b$0>>2] = 0;
  $2 = ((($__b$0)) + 4|0);
  $3 = (($__i$0) + -1)|0;
  $__b$0 = $2;$__i$0 = $3;
 }
 $4 = $fd & 31;
 $5 = 1 << $4;
 $6 = $fd >>> 5;
 $7 = (($fds) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 | $5;
 HEAP32[$7>>2] = $9;
 $10 = ($is_read|0)==(0);
 $fds$ = $10 ? $fds : 0;
 $$fds = $10 ? 0 : $fds;
 $11 = (($fd) + 1)|0;
 HEAP32[$vararg_buffer>>2] = $11;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $$fds;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $fds$;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 0;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $tv;
 $12 = (___syscall142(142,($vararg_buffer|0))|0);
 $13 = ($12>>>0)>(4294963200);
 if (!($13)) {
  $$0$i$i1 = $12;
  STACKTOP = sp;return ($$0$i$i1|0);
 }
 $14 = (0 - ($12))|0;
 $15 = HEAP32[6773]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $$0$i$i$i = 27136;
 } else {
  $17 = (_pthread_self()|0);
  $18 = ((($17)) + 64|0);
  $19 = HEAP32[$18>>2]|0;
  $$0$i$i$i = $19;
 }
 HEAP32[$$0$i$i$i>>2] = $14;
 _perror(21106);
 $$0$i$i1 = -1;
 STACKTOP = sp;return ($$0$i$i1|0);
}
function _kftp_connect_file($fp) {
 $fp = $fp|0;
 var $$$i = 0, $$$i6 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i12 = 0, $$0$i$i$i34 = 0, $$0$i$i$i4 = 0, $$0$i$i1 = 0, $$0$i$i14 = 0, $$0$i$i36 = 0, $$0$i$i7 = 0, $$0$i11 = 0, $$0$i32 = 0, $$0$i54 = 0, $$01$lcssa$i = 0, $$01$lcssa$i$i = 0, $$01$lcssa$i20 = 0, $$01$lcssa$i42 = 0, $$014$i = 0;
 var $$014$i$i = 0, $$014$i17 = 0, $$014$i39 = 0, $$1$lcssa$i = 0, $$1$lcssa$i$i = 0, $$1$lcssa$i28 = 0, $$1$lcssa$i50 = 0, $$pn$i = 0, $$pn$i$i = 0, $$pn$i31 = 0, $$pn$i53 = 0, $$pn15$i = 0, $$pn15$i$i = 0, $$pn15$i24 = 0, $$pn15$i46 = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i47 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $file_size = 0, $host$i = 0, $p$0$i = 0, $port$i = 0, $tmp = 0, $v$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer14 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0;
 var $vararg_buffer25 = 0, $vararg_buffer30 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr4 = 0, $vararg_ptr40 = 0;
 var $vararg_ptr41 = 0, $vararg_ptr42 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, $w$0$i = 0, $w$0$i$i = 0, $w$0$i22 = 0, $w$0$i44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer49 = sp + 160|0;
 $vararg_buffer46 = sp + 152|0;
 $vararg_buffer43 = sp + 144|0;
 $vararg_buffer37 = sp + 128|0;
 $vararg_buffer35 = sp + 120|0;
 $vararg_buffer30 = sp + 104|0;
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer19 = sp + 72|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer6 = sp + 32|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $host$i = sp + 240|0;
 $port$i = sp + 224|0;
 $v$i = sp + 168|0;
 $file_size = sp;
 $tmp = sp + 192|0;
 $0 = ((($fp)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = $1;
  $3 = (___syscall6(6,($vararg_buffer|0))|0);
  $4 = ($3|0)==(-4);
  $$$i = $4 ? -115 : $3;
  $5 = ($$$i>>>0)>(4294963200);
  if ($5) {
   $6 = (0 - ($$$i))|0;
   $7 = HEAP32[6773]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$0$i$i = 27136;
   } else {
    $9 = (_pthread_self()|0);
    $10 = ((($9)) + 64|0);
    $11 = HEAP32[$10>>2]|0;
    $$0$i$i = $11;
   }
   HEAP32[$$0$i$i>>2] = $6;
  }
  $12 = ((($fp)) + 52|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if (!($14)) {
   (_kftp_get_response($fp)|0);
  }
 }
 $15 = ((($fp)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_socket_wait($16,0)|0);
 $18 = ($17|0)<(1);
 if (!($18)) {
  L13: do {
   if (((((21182) & 3)|0)==(0))) {
    $$01$lcssa$i$i = 21182;
    label = 12;
   } else {
    $$014$i$i = 21182;$226 = (21182);
    while(1) {
     $19 = HEAP8[$$014$i$i>>0]|0;
     $20 = ($19<<24>>24)==(0);
     if ($20) {
      $$pn$i$i = $226;
      break L13;
     }
     $21 = ((($$014$i$i)) + 1|0);
     $22 = $21;
     $23 = $22 & 3;
     $24 = ($23|0)==(0);
     if ($24) {
      $$01$lcssa$i$i = $21;
      label = 12;
      break;
     } else {
      $$014$i$i = $21;$226 = $22;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   $w$0$i$i = $$01$lcssa$i$i;
   while(1) {
    $25 = HEAP32[$w$0$i$i>>2]|0;
    $26 = (($25) + -16843009)|0;
    $27 = $25 & -2139062144;
    $28 = $27 ^ -2139062144;
    $29 = $28 & $26;
    $30 = ($29|0)==(0);
    $31 = ((($w$0$i$i)) + 4|0);
    if ($30) {
     $w$0$i$i = $31;
    } else {
     break;
    }
   }
   $32 = $25&255;
   $33 = ($32<<24>>24)==(0);
   if ($33) {
    $$1$lcssa$i$i = $w$0$i$i;
   } else {
    $$pn15$i$i = $w$0$i$i;
    while(1) {
     $34 = ((($$pn15$i$i)) + 1|0);
     $$pre$i$i = HEAP8[$34>>0]|0;
     $35 = ($$pre$i$i<<24>>24)==(0);
     if ($35) {
      $$1$lcssa$i$i = $34;
      break;
     } else {
      $$pn15$i$i = $34;
     }
    }
   }
   $36 = $$1$lcssa$i$i;
   $$pn$i$i = $36;
  }
  $$0$i$i1 = (($$pn$i$i) - (21182))|0;
  $37 = HEAP32[$15>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $37;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = 21182;
  $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $$0$i$i1;
  $38 = (___syscall4(4,($vararg_buffer1|0))|0);
  $39 = ($38>>>0)>(4294963200);
  if ($39) {
   $40 = (0 - ($38))|0;
   $41 = HEAP32[6773]|0;
   $42 = ($41|0)==(0|0);
   if ($42) {
    $$0$i$i$i$i = 27136;
   } else {
    $43 = (_pthread_self()|0);
    $44 = ((($43)) + 64|0);
    $45 = HEAP32[$44>>2]|0;
    $$0$i$i$i$i = $45;
   }
   HEAP32[$$0$i$i$i$i>>2] = $40;
   $$0$i$i$i = -1;
  } else {
   $$0$i$i$i = $38;
  }
  $46 = ($$0$i$i$i|0)==($$0$i$i1|0);
  if ($46) {
   (_kftp_get_response($fp)|0);
  }
 }
 $47 = ((($fp)) + 60|0);
 $48 = HEAP32[$47>>2]|0;
 $p$0$i = $48;
 L35: while(1) {
  $49 = HEAP8[$p$0$i>>0]|0;
  switch ($49<<24>>24) {
  case 0:  {
   break L35;
   break;
  }
  case 40:  {
   label = 26;
   break L35;
   break;
  }
  default: {
  }
  }
  $50 = ((($p$0$i)) + 1|0);
  $p$0$i = $50;
 }
 if ((label|0) == 26) {
  $51 = ((($p$0$i)) + 1|0);
  $52 = ((($v$i)) + 4|0);
  $53 = ((($v$i)) + 8|0);
  $54 = ((($v$i)) + 12|0);
  $55 = ((($v$i)) + 16|0);
  $56 = ((($v$i)) + 20|0);
  HEAP32[$vararg_buffer6>>2] = $v$i;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $52;
  $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
  HEAP32[$vararg_ptr10>>2] = $53;
  $vararg_ptr11 = ((($vararg_buffer6)) + 12|0);
  HEAP32[$vararg_ptr11>>2] = $54;
  $vararg_ptr12 = ((($vararg_buffer6)) + 16|0);
  HEAP32[$vararg_ptr12>>2] = $55;
  $vararg_ptr13 = ((($vararg_buffer6)) + 20|0);
  HEAP32[$vararg_ptr13>>2] = $56;
  (_sscanf($51,21189,$vararg_buffer6)|0);
  $57 = ((($fp)) + 28|0);
  ;HEAP32[$57>>2]=HEAP32[$v$i>>2]|0;HEAP32[$57+4>>2]=HEAP32[$v$i+4>>2]|0;HEAP32[$57+8>>2]=HEAP32[$v$i+8>>2]|0;HEAP32[$57+12>>2]=HEAP32[$v$i+12>>2]|0;
  $58 = HEAP32[$55>>2]|0;
  $59 = $58 << 8;
  $60 = $59 & 65280;
  $61 = HEAP32[$56>>2]|0;
  $62 = (($60) + ($61))|0;
  $63 = ((($fp)) + 44|0);
  HEAP32[$63>>2] = $62;
 }
 $64 = ((($fp)) + 68|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$15>>2]|0;
 $67 = (_socket_wait($66,0)|0);
 $68 = ($67|0)<(1);
 if (!($68)) {
  $69 = $65;
  $70 = $69 & 3;
  $71 = ($70|0)==(0);
  L43: do {
   if ($71) {
    $$01$lcssa$i = $65;
    label = 31;
   } else {
    $$014$i = $65;$227 = $69;
    while(1) {
     $72 = HEAP8[$$014$i>>0]|0;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $$pn$i = $227;
      break L43;
     }
     $74 = ((($$014$i)) + 1|0);
     $75 = $74;
     $76 = $75 & 3;
     $77 = ($76|0)==(0);
     if ($77) {
      $$01$lcssa$i = $74;
      label = 31;
      break;
     } else {
      $$014$i = $74;$227 = $75;
     }
    }
   }
  } while(0);
  if ((label|0) == 31) {
   $w$0$i = $$01$lcssa$i;
   while(1) {
    $78 = HEAP32[$w$0$i>>2]|0;
    $79 = (($78) + -16843009)|0;
    $80 = $78 & -2139062144;
    $81 = $80 ^ -2139062144;
    $82 = $81 & $79;
    $83 = ($82|0)==(0);
    $84 = ((($w$0$i)) + 4|0);
    if ($83) {
     $w$0$i = $84;
    } else {
     break;
    }
   }
   $85 = $78&255;
   $86 = ($85<<24>>24)==(0);
   if ($86) {
    $$1$lcssa$i = $w$0$i;
   } else {
    $$pn15$i = $w$0$i;
    while(1) {
     $87 = ((($$pn15$i)) + 1|0);
     $$pre$i = HEAP8[$87>>0]|0;
     $88 = ($$pre$i<<24>>24)==(0);
     if ($88) {
      $$1$lcssa$i = $87;
      break;
     } else {
      $$pn15$i = $87;
     }
    }
   }
   $89 = $$1$lcssa$i;
   $$pn$i = $89;
  }
  $$0$i11 = (($$pn$i) - ($69))|0;
  $90 = HEAP32[$15>>2]|0;
  HEAP32[$vararg_buffer14>>2] = $90;
  $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
  HEAP32[$vararg_ptr17>>2] = $65;
  $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
  HEAP32[$vararg_ptr18>>2] = $$0$i11;
  $91 = (___syscall4(4,($vararg_buffer14|0))|0);
  $92 = ($91>>>0)>(4294963200);
  if ($92) {
   $93 = (0 - ($91))|0;
   $94 = HEAP32[6773]|0;
   $95 = ($94|0)==(0|0);
   if ($95) {
    $$0$i$i$i12 = 27136;
   } else {
    $96 = (_pthread_self()|0);
    $97 = ((($96)) + 64|0);
    $98 = HEAP32[$97>>2]|0;
    $$0$i$i$i12 = $98;
   }
   HEAP32[$$0$i$i$i12>>2] = $93;
   $$0$i$i14 = -1;
  } else {
   $$0$i$i14 = $91;
  }
  $99 = ($$0$i$i14|0)==($$0$i11|0);
  if ($99) {
   (_kftp_get_response($fp)|0);
  }
 }
 $100 = HEAP32[$47>>2]|0;
 HEAP32[$vararg_buffer19>>2] = $file_size;
 $101 = (_sscanf($100,21207,$vararg_buffer19)|0);
 $102 = ($101|0)==(1);
 if (!($102)) {
  STACKTOP = sp;return;
 }
 $103 = $file_size;
 $104 = $103;
 $105 = HEAP32[$104>>2]|0;
 $106 = (($103) + 4)|0;
 $107 = $106;
 $108 = HEAP32[$107>>2]|0;
 $109 = ((($fp)) + 80|0);
 $110 = $109;
 $111 = $110;
 HEAP32[$111>>2] = $105;
 $112 = (($110) + 4)|0;
 $113 = $112;
 HEAP32[$113>>2] = $108;
 $114 = ((($fp)) + 8|0);
 $115 = $114;
 $116 = $115;
 $117 = HEAP32[$116>>2]|0;
 $118 = (($115) + 4)|0;
 $119 = $118;
 $120 = HEAP32[$119>>2]|0;
 $121 = ($120|0)>(-1);
 $122 = ($117>>>0)>(4294967295);
 $123 = ($120|0)==(-1);
 $124 = $123 & $122;
 $125 = $121 | $124;
 if ($125) {
  $126 = $vararg_buffer22;
  $127 = $126;
  HEAP32[$127>>2] = $117;
  $128 = (($126) + 4)|0;
  $129 = $128;
  HEAP32[$129>>2] = $120;
  (_sprintf($tmp,21216,$vararg_buffer22)|0);
  $130 = HEAP32[$15>>2]|0;
  $131 = (_socket_wait($130,0)|0);
  $132 = ($131|0)<(1);
  if (!($132)) {
   $133 = $tmp;
   $134 = $133 & 3;
   $135 = ($134|0)==(0);
   L71: do {
    if ($135) {
     $$01$lcssa$i20 = $tmp;
     label = 48;
    } else {
     $$014$i17 = $tmp;$228 = $133;
     while(1) {
      $136 = HEAP8[$$014$i17>>0]|0;
      $137 = ($136<<24>>24)==(0);
      if ($137) {
       $$pn$i31 = $228;
       break L71;
      }
      $138 = ((($$014$i17)) + 1|0);
      $139 = $138;
      $140 = $139 & 3;
      $141 = ($140|0)==(0);
      if ($141) {
       $$01$lcssa$i20 = $138;
       label = 48;
       break;
      } else {
       $$014$i17 = $138;$228 = $139;
      }
     }
    }
   } while(0);
   if ((label|0) == 48) {
    $w$0$i22 = $$01$lcssa$i20;
    while(1) {
     $142 = HEAP32[$w$0$i22>>2]|0;
     $143 = (($142) + -16843009)|0;
     $144 = $142 & -2139062144;
     $145 = $144 ^ -2139062144;
     $146 = $145 & $143;
     $147 = ($146|0)==(0);
     $148 = ((($w$0$i22)) + 4|0);
     if ($147) {
      $w$0$i22 = $148;
     } else {
      break;
     }
    }
    $149 = $142&255;
    $150 = ($149<<24>>24)==(0);
    if ($150) {
     $$1$lcssa$i28 = $w$0$i22;
    } else {
     $$pn15$i24 = $w$0$i22;
     while(1) {
      $151 = ((($$pn15$i24)) + 1|0);
      $$pre$i25 = HEAP8[$151>>0]|0;
      $152 = ($$pre$i25<<24>>24)==(0);
      if ($152) {
       $$1$lcssa$i28 = $151;
       break;
      } else {
       $$pn15$i24 = $151;
      }
     }
    }
    $153 = $$1$lcssa$i28;
    $$pn$i31 = $153;
   }
   $$0$i32 = (($$pn$i31) - ($133))|0;
   $154 = HEAP32[$15>>2]|0;
   HEAP32[$vararg_buffer25>>2] = $154;
   $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
   HEAP32[$vararg_ptr28>>2] = $tmp;
   $vararg_ptr29 = ((($vararg_buffer25)) + 8|0);
   HEAP32[$vararg_ptr29>>2] = $$0$i32;
   $155 = (___syscall4(4,($vararg_buffer25|0))|0);
   $156 = ($155>>>0)>(4294963200);
   if ($156) {
    $157 = (0 - ($155))|0;
    $158 = HEAP32[6773]|0;
    $159 = ($158|0)==(0|0);
    if ($159) {
     $$0$i$i$i34 = 27136;
    } else {
     $160 = (_pthread_self()|0);
     $161 = ((($160)) + 64|0);
     $162 = HEAP32[$161>>2]|0;
     $$0$i$i$i34 = $162;
    }
    HEAP32[$$0$i$i$i34>>2] = $157;
    $$0$i$i36 = -1;
   } else {
    $$0$i$i36 = $155;
   }
   $163 = ($$0$i$i36|0)==($$0$i32|0);
   if ($163) {
    (_kftp_get_response($fp)|0);
   }
  }
 }
 $164 = ((($fp)) + 64|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = HEAP32[$15>>2]|0;
 $167 = (_socket_wait($166,0)|0);
 $168 = ($167|0)<(1);
 if (!($168)) {
  $169 = $165;
  $170 = $169 & 3;
  $171 = ($170|0)==(0);
  L95: do {
   if ($171) {
    $$01$lcssa$i42 = $165;
    label = 63;
   } else {
    $$014$i39 = $165;$229 = $169;
    while(1) {
     $172 = HEAP8[$$014$i39>>0]|0;
     $173 = ($172<<24>>24)==(0);
     if ($173) {
      $$pn$i53 = $229;
      break L95;
     }
     $174 = ((($$014$i39)) + 1|0);
     $175 = $174;
     $176 = $175 & 3;
     $177 = ($176|0)==(0);
     if ($177) {
      $$01$lcssa$i42 = $174;
      label = 63;
      break;
     } else {
      $$014$i39 = $174;$229 = $175;
     }
    }
   }
  } while(0);
  if ((label|0) == 63) {
   $w$0$i44 = $$01$lcssa$i42;
   while(1) {
    $178 = HEAP32[$w$0$i44>>2]|0;
    $179 = (($178) + -16843009)|0;
    $180 = $178 & -2139062144;
    $181 = $180 ^ -2139062144;
    $182 = $181 & $179;
    $183 = ($182|0)==(0);
    $184 = ((($w$0$i44)) + 4|0);
    if ($183) {
     $w$0$i44 = $184;
    } else {
     break;
    }
   }
   $185 = $178&255;
   $186 = ($185<<24>>24)==(0);
   if ($186) {
    $$1$lcssa$i50 = $w$0$i44;
   } else {
    $$pn15$i46 = $w$0$i44;
    while(1) {
     $187 = ((($$pn15$i46)) + 1|0);
     $$pre$i47 = HEAP8[$187>>0]|0;
     $188 = ($$pre$i47<<24>>24)==(0);
     if ($188) {
      $$1$lcssa$i50 = $187;
      break;
     } else {
      $$pn15$i46 = $187;
     }
    }
   }
   $189 = $$1$lcssa$i50;
   $$pn$i53 = $189;
  }
  $$0$i54 = (($$pn$i53) - ($169))|0;
  $190 = HEAP32[$15>>2]|0;
  HEAP32[$vararg_buffer30>>2] = $190;
  $vararg_ptr33 = ((($vararg_buffer30)) + 4|0);
  HEAP32[$vararg_ptr33>>2] = $165;
  $vararg_ptr34 = ((($vararg_buffer30)) + 8|0);
  HEAP32[$vararg_ptr34>>2] = $$0$i54;
  $191 = (___syscall4(4,($vararg_buffer30|0))|0);
  $192 = ($191>>>0)>(4294963200);
  if ($192) {
   $193 = (0 - ($191))|0;
   $194 = HEAP32[6773]|0;
   $195 = ($194|0)==(0|0);
   if ($195) {
    $$0$i$i$i4 = 27136;
   } else {
    $196 = (_pthread_self()|0);
    $197 = ((($196)) + 64|0);
    $198 = HEAP32[$197>>2]|0;
    $$0$i$i$i4 = $198;
   }
   HEAP32[$$0$i$i$i4>>2] = $193;
  }
 }
 $199 = ((($fp)) + 44|0);
 $200 = HEAP32[$199>>2]|0;
 $201 = ($200|0)==(0);
 if ($201) {
  _fprintf(9772,21228,$vararg_buffer35);
 } else {
  $202 = ((($fp)) + 28|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = ((($fp)) + 32|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = ((($fp)) + 36|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = ((($fp)) + 40|0);
  $209 = HEAP32[$208>>2]|0;
  HEAP32[$vararg_buffer37>>2] = $203;
  $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
  HEAP32[$vararg_ptr40>>2] = $205;
  $vararg_ptr41 = ((($vararg_buffer37)) + 8|0);
  HEAP32[$vararg_ptr41>>2] = $207;
  $vararg_ptr42 = ((($vararg_buffer37)) + 12|0);
  HEAP32[$vararg_ptr42>>2] = $209;
  (_sprintf($host$i,21293,$vararg_buffer37)|0);
  $210 = HEAP32[$199>>2]|0;
  HEAP32[$vararg_buffer43>>2] = $210;
  (_sprintf($port$i,21305,$vararg_buffer43)|0);
  $211 = (_socket_connect($host$i,$port$i)|0);
  HEAP32[$0>>2] = $211;
 }
 $212 = (_kftp_get_response($fp)|0);
 $213 = ($212|0)==(150);
 if ($213) {
  $225 = ((($fp)) + 56|0);
  HEAP32[$225>>2] = 1;
  STACKTOP = sp;return;
 }
 $214 = HEAP32[$47>>2]|0;
 HEAP32[$vararg_buffer46>>2] = $214;
 _fprintf(9772,21308,$vararg_buffer46);
 $215 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer49>>2] = $215;
 $216 = (___syscall6(6,($vararg_buffer49|0))|0);
 $217 = ($216|0)==(-4);
 $$$i6 = $217 ? -115 : $216;
 $218 = ($$$i6>>>0)>(4294963200);
 if ($218) {
  $219 = (0 - ($$$i6))|0;
  $220 = HEAP32[6773]|0;
  $221 = ($220|0)==(0|0);
  if ($221) {
   $$0$i$i7 = 27136;
  } else {
   $222 = (_pthread_self()|0);
   $223 = ((($222)) + 64|0);
   $224 = HEAP32[$223>>2]|0;
   $$0$i$i7 = $224;
  }
  HEAP32[$$0$i$i7>>2] = $219;
 }
 HEAP32[$0>>2] = -1;
 STACKTOP = sp;return;
}
function _khttp_connect_file($fp) {
 $fp = $fp|0;
 var $$$i = 0, $$$i11 = 0, $$$i5 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i1033 = 0, $$0$i$i$i2 = 0, $$0$i$i1 = 0, $$0$i$i12 = 0, $$0$i$i6 = 0, $$0$i16 = 0, $$0$i17 = 0, $$0$i19 = 0, $$0$i21 = 0, $$0$i23 = 0, $$0$i25 = 0, $$0$i27 = 0, $$0$i29 = 0, $$0$i31 = 0;
 var $$08$i = 0, $$08$in$i = 0, $$off = 0, $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $f$i = 0, $l$0 = 0, $l$0$i = 0, $l$06$i = 0, $l$1 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond4$i = 0, $r$0$lcssa$i = 0, $r$07$i = 0, $rest$0 = 0, $rest$0$ = 0, $rest$0$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer13 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer26 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer26 = sp + 80|0;
 $vararg_buffer21 = sp + 64|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $f$i = sp + 88|0;
 $0 = ((($fp)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  HEAP32[$vararg_buffer>>2] = $1;
  $3 = (___syscall6(6,($vararg_buffer|0))|0);
  $4 = ($3|0)==(-4);
  $$$i = $4 ? -115 : $3;
  $5 = ($$$i>>>0)>(4294963200);
  if ($5) {
   $6 = (0 - ($$$i))|0;
   $7 = HEAP32[6773]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$0$i$i = 27136;
   } else {
    $9 = (_pthread_self()|0);
    $10 = ((($9)) + 64|0);
    $11 = HEAP32[$10>>2]|0;
    $$0$i$i = $11;
   }
   HEAP32[$$0$i$i>>2] = $6;
  }
 }
 $12 = ((($fp)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($fp)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_socket_connect($13,$15)|0);
 HEAP32[$0>>2] = $16;
 $17 = (_malloc(65536)|0);
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  $19 = ((($17)) + -4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 & 3;
  $22 = ($21|0)==(0);
  if (!($22)) {
   _memset(($17|0),0,65536)|0;
  }
 }
 $23 = ((($fp)) + 88|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($fp)) + 92|0);
 $26 = HEAP32[$25>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $24;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $26;
 $27 = (_sprintf($17,21356,$vararg_buffer1)|0);
 $28 = ((($fp)) + 8|0);
 $29 = $28;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($29) + 4)|0;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = ($31|0)==(0);
 $36 = ($34|0)==(0);
 $37 = $35 & $36;
 if ($37) {
  $l$0 = $27;
 } else {
  $38 = (($17) + ($27)|0);
  $39 = $vararg_buffer5;
  $40 = $39;
  HEAP32[$40>>2] = $31;
  $41 = (($39) + 4)|0;
  $42 = $41;
  HEAP32[$42>>2] = $34;
  $43 = (_sprintf($38,21384,$vararg_buffer5)|0);
  $44 = (($27) + ($43))|0;
  $l$0 = $44;
 }
 $45 = (($17) + ($l$0)|0);
 ;HEAP8[$45>>0]=HEAP8[21405>>0]|0;HEAP8[$45+1>>0]=HEAP8[21405+1>>0]|0;HEAP8[$45+2>>0]=HEAP8[21405+2>>0]|0;
 $46 = (($l$0) + 2)|0;
 $47 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer8>>2] = $47;
 $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
 HEAP32[$vararg_ptr11>>2] = $17;
 $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
 HEAP32[$vararg_ptr12>>2] = $46;
 $48 = (___syscall4(4,($vararg_buffer8|0))|0);
 $49 = ($48>>>0)>(4294963200);
 if ($49) {
  $50 = (0 - ($48))|0;
  $51 = HEAP32[6773]|0;
  $52 = ($51|0)==(0|0);
  if ($52) {
   $$0$i$i$i = 27136;
  } else {
   $53 = (_pthread_self()|0);
   $54 = ((($53)) + 64|0);
   $55 = HEAP32[$54>>2]|0;
   $$0$i$i$i = $55;
  }
  HEAP32[$$0$i$i$i>>2] = $50;
  $$0$i$i1 = -1;
 } else {
  $$0$i$i1 = $48;
 }
 $56 = ($$0$i$i1|0)==($46|0);
 if ($56) {
  $l$1 = 0;
 } else {
  _free($17);
  STACKTOP = sp;return;
 }
 while(1) {
  $57 = HEAP32[$0>>2]|0;
  $58 = (($17) + ($l$1)|0);
  HEAP32[$vararg_buffer13>>2] = $57;
  $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
  HEAP32[$vararg_ptr16>>2] = $58;
  $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
  HEAP32[$vararg_ptr17>>2] = 1;
  $59 = (___syscall3(3,($vararg_buffer13|0))|0);
  $60 = ($59>>>0)>(4294963200);
  if ($60) {
   $61 = (0 - ($59))|0;
   $62 = HEAP32[6773]|0;
   $63 = ($62|0)==(0|0);
   if ($63) {
    $$0$i$i$i2 = 27136;
   } else {
    $64 = (_pthread_self()|0);
    $65 = ((($64)) + 64|0);
    $66 = HEAP32[$65>>2]|0;
    $$0$i$i$i2 = $66;
   }
   HEAP32[$$0$i$i$i2>>2] = $61;
  } else {
   $67 = ($59|0)==(0);
   if ($67) {
    break;
   }
  }
  $68 = HEAP8[$58>>0]|0;
  $69 = ($68<<24>>24)==(10);
  $70 = ($l$1|0)>(2);
  $or$cond = $69 & $70;
  if ($or$cond) {
   $71 = ((($58)) + -3|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = ($72<<24>>24)==(0);
   L35: do {
    if ($73) {
     $85 = 0;$r$0$lcssa$i = 21408;
    } else {
     $$08$in$i = 4;$78 = $72;$l$06$i = $71;$r$07$i = 21408;
     while(1) {
      $$08$i = (($$08$in$i) + -1)|0;
      $74 = HEAP8[$r$07$i>>0]|0;
      $75 = ($74<<24>>24)!=(0);
      $76 = ($$08$i|0)!=(0);
      $or$cond$i = $76 & $75;
      $77 = ($78<<24>>24)==($74<<24>>24);
      $or$cond4$i = $77 & $or$cond$i;
      if (!($or$cond4$i)) {
       $85 = $78;$r$0$lcssa$i = $r$07$i;
       break L35;
      }
      $79 = ((($l$06$i)) + 1|0);
      $80 = ((($r$07$i)) + 1|0);
      $81 = HEAP8[$79>>0]|0;
      $82 = ($81<<24>>24)==(0);
      if ($82) {
       $85 = 0;$r$0$lcssa$i = $80;
       break;
      } else {
       $$08$in$i = $$08$i;$78 = $81;$l$06$i = $79;$r$07$i = $80;
      }
     }
    }
   } while(0);
   $83 = HEAP8[$r$0$lcssa$i>>0]|0;
   $84 = ($85<<24>>24)==($83<<24>>24);
   if ($84) {
    break;
   }
  }
  $86 = (($l$1) + 1)|0;
  $l$1 = $86;
 }
 HEAP8[$58>>0] = 0;
 $87 = ($l$1|0)<(14);
 if ($87) {
  _free($17);
  $88 = HEAP32[$0>>2]|0;
  HEAP32[$vararg_buffer18>>2] = $88;
  $89 = (___syscall6(6,($vararg_buffer18|0))|0);
  $90 = ($89|0)==(-4);
  $$$i5 = $90 ? -115 : $89;
  $91 = ($$$i5>>>0)>(4294963200);
  if ($91) {
   $92 = (0 - ($$$i5))|0;
   $93 = HEAP32[6773]|0;
   $94 = ($93|0)==(0|0);
   if ($94) {
    $$0$i$i6 = 27136;
   } else {
    $95 = (_pthread_self()|0);
    $96 = ((($95)) + 64|0);
    $97 = HEAP32[$96>>2]|0;
    $$0$i$i6 = $97;
   }
   HEAP32[$$0$i$i6>>2] = $92;
  }
  HEAP32[$0>>2] = -1;
  STACKTOP = sp;return;
 }
 $98 = ((($17)) + 8|0);
 HEAP32[$f$i>>2] = 0;
 $99 = ((($f$i)) + 4|0);
 HEAP32[$99>>2] = $98;
 $100 = ((($f$i)) + 44|0);
 HEAP32[$100>>2] = $98;
 $101 = ($98|0)<(0|0);
 $102 = ((($17)) + -2147483641|0);
 $$sink$i = $101 ? (-1) : $102;
 $103 = ((($f$i)) + 8|0);
 HEAP32[$103>>2] = $$sink$i;
 $104 = ((($f$i)) + 76|0);
 HEAP32[$104>>2] = -1;
 $105 = ((($f$i)) + 104|0);
 HEAP32[$105>>2] = 0;
 $106 = $$sink$i;
 $107 = $98;
 $108 = (($106) - ($107))|0;
 $109 = ((($f$i)) + 108|0);
 HEAP32[$109>>2] = $108;
 $110 = ((($f$i)) + 100|0);
 HEAP32[$110>>2] = $106;
 $111 = (___intscan($f$i,0,1,-2147483648,0)|0);
 $112 = tempRet0;
 L52: do {
  switch ($111|0) {
  case 200:  {
   $113 = $28;
   $114 = $113;
   $115 = HEAP32[$114>>2]|0;
   $116 = (($113) + 4)|0;
   $117 = $116;
   $118 = HEAP32[$117>>2]|0;
   $119 = ($118|0)>(0);
   $120 = ($115>>>0)>(0);
   $121 = ($118|0)==(0);
   $122 = $121 & $120;
   $123 = $119 | $122;
   if ($123) {
    $rest$0 = $115;
    while(1) {
     $124 = ($rest$0|0)==(0);
     if ($124) {
      break L52;
     }
     $125 = ($rest$0|0)<(65536);
     $rest$0$ = $125 ? $rest$0 : 65536;
     $126 = HEAP32[$0>>2]|0;
     $l$0$i = 0;$rest$0$i = $rest$0$;
     while(1) {
      $127 = ($rest$0$i|0)==(0);
      if ($127) {
       break;
      }
      $128 = (_socket_wait($126,1)|0);
      $129 = ($128|0)<(1);
      if ($129) {
       break;
      }
      $130 = (($17) + ($l$0$i)|0);
      HEAP32[$vararg_buffer21>>2] = $126;
      $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
      HEAP32[$vararg_ptr24>>2] = $130;
      $vararg_ptr25 = ((($vararg_buffer21)) + 8|0);
      HEAP32[$vararg_ptr25>>2] = $rest$0$i;
      $131 = (___syscall3(3,($vararg_buffer21|0))|0);
      $132 = ($131>>>0)>(4294963200);
      if ($132) {
       $133 = (0 - ($131))|0;
       $134 = HEAP32[6773]|0;
       $135 = ($134|0)==(0|0);
       if ($135) {
        $$0$i$i$i$i = 27136;
       } else {
        $136 = (_pthread_self()|0);
        $137 = ((($136)) + 64|0);
        $138 = HEAP32[$137>>2]|0;
        $$0$i$i$i$i = $138;
       }
       HEAP32[$$0$i$i$i$i>>2] = $133;
       $$0$i$i$i1033 = -1;
      } else {
       $139 = ($131|0)==(0);
       if ($139) {
        break;
       } else {
        $$0$i$i$i1033 = $131;
       }
      }
      $140 = (($l$0$i) + ($$0$i$i$i1033))|0;
      $141 = (($rest$0$i) - ($$0$i$i$i1033))|0;
      $l$0$i = $140;$rest$0$i = $141;
     }
     $142 = (($rest$0) - ($l$0$i))|0;
     $rest$0 = $142;
    }
   }
   break;
  }
  case 206:  {
   break;
  }
  default: {
   _free($17);
   $143 = HEAP32[$0>>2]|0;
   HEAP32[$vararg_buffer26>>2] = $143;
   $144 = (___syscall6(6,($vararg_buffer26|0))|0);
   $145 = ($144|0)==(-4);
   $$$i11 = $145 ? -115 : $144;
   $146 = ($$$i11>>>0)>(4294963200);
   if ($146) {
    $147 = (0 - ($$$i11))|0;
    $148 = HEAP32[6773]|0;
    $149 = ($148|0)==(0|0);
    if ($149) {
     $$0$i$i12 = 27136;
    } else {
     $150 = (_pthread_self()|0);
     $151 = ((($150)) + 64|0);
     $152 = HEAP32[$151>>2]|0;
     $$0$i$i12 = $152;
    }
    HEAP32[$$0$i$i12>>2] = $147;
   }
   switch ($111|0) {
   case 401:  {
    $153 = HEAP32[6773]|0;
    $154 = ($153|0)==(0|0);
    if ($154) {
     $$0$i16 = 27136;
    } else {
     $155 = (_pthread_self()|0);
     $156 = ((($155)) + 64|0);
     $157 = HEAP32[$156>>2]|0;
     $$0$i16 = $157;
    }
    HEAP32[$$0$i16>>2] = 1;
    break;
   }
   case 403:  {
    $158 = HEAP32[6773]|0;
    $159 = ($158|0)==(0|0);
    if ($159) {
     $$0$i17 = 27136;
    } else {
     $160 = (_pthread_self()|0);
     $161 = ((($160)) + 64|0);
     $162 = HEAP32[$161>>2]|0;
     $$0$i17 = $162;
    }
    HEAP32[$$0$i17>>2] = 13;
    break;
   }
   case 404:  {
    $163 = HEAP32[6773]|0;
    $164 = ($163|0)==(0|0);
    if ($164) {
     $$0$i19 = 27136;
    } else {
     $165 = (_pthread_self()|0);
     $166 = ((($165)) + 64|0);
     $167 = HEAP32[$166>>2]|0;
     $$0$i19 = $167;
    }
    HEAP32[$$0$i19>>2] = 2;
    break;
   }
   case 407:  {
    $168 = HEAP32[6773]|0;
    $169 = ($168|0)==(0|0);
    if ($169) {
     $$0$i21 = 27136;
    } else {
     $170 = (_pthread_self()|0);
     $171 = ((($170)) + 64|0);
     $172 = HEAP32[$171>>2]|0;
     $$0$i21 = $172;
    }
    HEAP32[$$0$i21>>2] = 1;
    break;
   }
   case 408:  {
    $173 = HEAP32[6773]|0;
    $174 = ($173|0)==(0|0);
    if ($174) {
     $$0$i23 = 27136;
    } else {
     $175 = (_pthread_self()|0);
     $176 = ((($175)) + 64|0);
     $177 = HEAP32[$176>>2]|0;
     $$0$i23 = $177;
    }
    HEAP32[$$0$i23>>2] = 110;
    break;
   }
   case 410:  {
    $178 = HEAP32[6773]|0;
    $179 = ($178|0)==(0|0);
    if ($179) {
     $$0$i25 = 27136;
    } else {
     $180 = (_pthread_self()|0);
     $181 = ((($180)) + 64|0);
     $182 = HEAP32[$181>>2]|0;
     $$0$i25 = $182;
    }
    HEAP32[$$0$i25>>2] = 2;
    break;
   }
   case 503:  {
    $183 = HEAP32[6773]|0;
    $184 = ($183|0)==(0|0);
    if ($184) {
     $$0$i27 = 27136;
    } else {
     $185 = (_pthread_self()|0);
     $186 = ((($185)) + 64|0);
     $187 = HEAP32[$186>>2]|0;
     $$0$i27 = $187;
    }
    HEAP32[$$0$i27>>2] = 11;
    break;
   }
   case 504:  {
    $188 = HEAP32[6773]|0;
    $189 = ($188|0)==(0|0);
    if ($189) {
     $$0$i29 = 27136;
    } else {
     $190 = (_pthread_self()|0);
     $191 = ((($190)) + 64|0);
     $192 = HEAP32[$191>>2]|0;
     $$0$i29 = $192;
    }
    HEAP32[$$0$i29>>2] = 110;
    break;
   }
   default: {
    $$off = (($111) + -400)|0;
    $193 = ($$off>>>0)<(100);
    $194 = $193 ? 22 : 5;
    $195 = HEAP32[6773]|0;
    $196 = ($195|0)==(0|0);
    if ($196) {
     $$0$i31 = 27136;
    } else {
     $197 = (_pthread_self()|0);
     $198 = ((($197)) + 64|0);
     $199 = HEAP32[$198>>2]|0;
     $$0$i31 = $199;
    }
    HEAP32[$$0$i31>>2] = $194;
   }
   }
   HEAP32[$0>>2] = -1;
   STACKTOP = sp;return;
  }
  }
 } while(0);
 _free($17);
 $200 = ((($fp)) + 56|0);
 HEAP32[$200>>2] = 1;
 STACKTOP = sp;return;
}
function _knet_close($fp) {
 $fp = $fp|0;
 var $$$i = 0, $$$i1 = 0, $$0$i$i = 0, $$0$i$i2 = 0, $$0$i$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = ($fp|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return 0;
 }
 $1 = ((($fp)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(-1);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = $2;
  $4 = (___syscall6(6,($vararg_buffer|0))|0);
  $5 = ($4|0)==(-4);
  $$$i = $5 ? -115 : $4;
  $6 = ($$$i>>>0)>(4294963200);
  if ($6) {
   $7 = (0 - ($$$i))|0;
   $8 = HEAP32[6773]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$0$i$i = 27136;
   } else {
    $10 = (_pthread_self()|0);
    $11 = ((($10)) + 64|0);
    $12 = HEAP32[$11>>2]|0;
    $$0$i$i = $12;
   }
   HEAP32[$$0$i$i>>2] = $7;
  }
 }
 $13 = ((($fp)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(-1);
 do {
  if (!($15)) {
   $16 = HEAP32[$fp>>2]|0;
   $17 = ($16|0)==(1);
   HEAP32[$vararg_buffer1>>2] = $14;
   $18 = (___syscall6(6,($vararg_buffer1|0))|0);
   $19 = ($18|0)==(-4);
   $$$i1 = $19 ? -115 : $18;
   $20 = ($$$i1>>>0)>(4294963200);
   if ($17) {
    if (!($20)) {
     break;
    }
    $21 = (0 - ($$$i1))|0;
    $22 = HEAP32[6773]|0;
    $23 = ($22|0)==(0|0);
    if ($23) {
     $$0$i$i2 = 27136;
    } else {
     $24 = (_pthread_self()|0);
     $25 = ((($24)) + 64|0);
     $26 = HEAP32[$25>>2]|0;
     $$0$i$i2 = $26;
    }
    HEAP32[$$0$i$i2>>2] = $21;
    break;
   } else {
    if (!($20)) {
     break;
    }
    $27 = (0 - ($$$i1))|0;
    $28 = HEAP32[6773]|0;
    $29 = ($28|0)==(0|0);
    if ($29) {
     $$0$i$i7 = 27136;
    } else {
     $30 = (_pthread_self()|0);
     $31 = ((($30)) + 64|0);
     $32 = HEAP32[$31>>2]|0;
     $$0$i$i7 = $32;
    }
    HEAP32[$$0$i$i7>>2] = $27;
    break;
   }
  }
 } while(0);
 $33 = ((($fp)) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 _free($34);
 $35 = ((($fp)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 _free($36);
 $37 = ((($fp)) + 60|0);
 $38 = HEAP32[$37>>2]|0;
 _free($38);
 $39 = ((($fp)) + 64|0);
 $40 = HEAP32[$39>>2]|0;
 _free($40);
 $41 = ((($fp)) + 88|0);
 $42 = HEAP32[$41>>2]|0;
 _free($42);
 $43 = ((($fp)) + 92|0);
 $44 = HEAP32[$43>>2]|0;
 _free($44);
 _free($fp);
 STACKTOP = sp;return 0;
}
function _ksprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $$$02$i$i = 0, $$$02$i8$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i4$i = 0, $$0$i9$i = 0, $$01$i$i = 0, $$01$i7$i = 0, $$02$i$i = 0, $$02$i6$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $ap = 0, $args$i = 0, $b$i$i = 0, $b$i2$i = 0;
 var $f$i$i = 0, $f$i3$i = 0, $l$0$i = 0, $vacopy_currentptr = 0, $vacopy_currentptr3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b$i2$i = sp + 257|0;
 $f$i3$i = sp + 144|0;
 $b$i$i = sp + 256|0;
 $f$i$i = sp + 32|0;
 $args$i = sp + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$args$i>>2] = $vacopy_currentptr;
 $0 = ((($s)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$s>>2]|0;
 $3 = (($1) + ($2)|0);
 $4 = ((($s)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - ($2))|0;
 dest=$f$i$i; src=10000; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $7 = (($6) + -1)|0;
 $8 = ($7>>>0)>(2147483646);
 if ($8) {
  $9 = ($5|0)==($2|0);
  if ($9) {
   $$01$i$i = $b$i$i;$$02$i$i = 1;
   label = 6;
  } else {
   $10 = HEAP32[6773]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    $$0$i$i$i = 27136;
   } else {
    $12 = (_pthread_self()|0);
    $13 = ((($12)) + 64|0);
    $14 = HEAP32[$13>>2]|0;
    $$0$i$i$i = $14;
   }
   HEAP32[$$0$i$i$i>>2] = 75;
   $$0$i$i = -1;
  }
 } else {
  $$01$i$i = $3;$$02$i$i = $6;
  label = 6;
 }
 if ((label|0) == 6) {
  $15 = $$01$i$i;
  $16 = (-2 - ($15))|0;
  $17 = ($$02$i$i>>>0)>($16>>>0);
  $$$02$i$i = $17 ? $16 : $$02$i$i;
  $18 = ((($f$i$i)) + 48|0);
  HEAP32[$18>>2] = $$$02$i$i;
  $19 = ((($f$i$i)) + 20|0);
  HEAP32[$19>>2] = $$01$i$i;
  $20 = ((($f$i$i)) + 44|0);
  HEAP32[$20>>2] = $$01$i$i;
  $21 = (($$01$i$i) + ($$$02$i$i)|0);
  $22 = ((($f$i$i)) + 16|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f$i$i)) + 28|0);
  HEAP32[$23>>2] = $21;
  $24 = (_vfprintf($f$i$i,16104,$args$i)|0);
  $25 = ($$$02$i$i|0)==(0);
  if ($25) {
   $$0$i$i = $24;
  } else {
   $26 = HEAP32[$19>>2]|0;
   $27 = HEAP32[$22>>2]|0;
   $28 = ($26|0)==($27|0);
   $29 = $28 << 31 >> 31;
   $30 = (($26) + ($29)|0);
   HEAP8[$30>>0] = 0;
   $$0$i$i = $24;
  }
 }
 $31 = (($$0$i$i) + 1)|0;
 $32 = HEAP32[$4>>2]|0;
 $33 = HEAP32[$s>>2]|0;
 $34 = (($32) - ($33))|0;
 $35 = ($31>>>0)>($34>>>0);
 if ($35) {
  $36 = (($33) + ($$0$i$i))|0;
  $37 = (($36) + 2)|0;
  $38 = ($32>>>0)<($37>>>0);
  do {
   if ($38) {
    $39 = (($36) + 1)|0;
    $40 = $39 >>> 1;
    $41 = $39 | $40;
    $42 = $41 >>> 2;
    $43 = $41 | $42;
    $44 = $43 >>> 4;
    $45 = $43 | $44;
    $46 = $45 >>> 8;
    $47 = $45 | $46;
    $48 = $47 >>> 16;
    $49 = $47 | $48;
    $50 = (($49) + 1)|0;
    $51 = HEAP32[$0>>2]|0;
    $52 = (_realloc($51,$50)|0);
    $53 = ($52|0)==(0|0);
    if ($53) {
     STACKTOP = sp;return;
    } else {
     HEAP32[$0>>2] = $52;
     HEAP32[$4>>2] = $50;
     break;
    }
   }
  } while(0);
  $vacopy_currentptr3 = HEAP32[$ap>>2]|0;
  HEAP32[$args$i>>2] = $vacopy_currentptr3;
  $54 = HEAP32[$0>>2]|0;
  $55 = HEAP32[$s>>2]|0;
  $56 = (($54) + ($55)|0);
  $57 = HEAP32[$4>>2]|0;
  $58 = (($57) - ($55))|0;
  dest=$f$i3$i; src=10000; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $59 = (($58) + -1)|0;
  $60 = ($59>>>0)>(2147483646);
  if ($60) {
   $61 = ($57|0)==($55|0);
   if ($61) {
    $$01$i7$i = $b$i2$i;$$02$i6$i = 1;
    label = 17;
   } else {
    $62 = HEAP32[6773]|0;
    $63 = ($62|0)==(0|0);
    if ($63) {
     $$0$i$i4$i = 27136;
    } else {
     $64 = (_pthread_self()|0);
     $65 = ((($64)) + 64|0);
     $66 = HEAP32[$65>>2]|0;
     $$0$i$i4$i = $66;
    }
    HEAP32[$$0$i$i4$i>>2] = 75;
    $$0$i9$i = -1;
   }
  } else {
   $$01$i7$i = $56;$$02$i6$i = $58;
   label = 17;
  }
  if ((label|0) == 17) {
   $67 = $$01$i7$i;
   $68 = (-2 - ($67))|0;
   $69 = ($$02$i6$i>>>0)>($68>>>0);
   $$$02$i8$i = $69 ? $68 : $$02$i6$i;
   $70 = ((($f$i3$i)) + 48|0);
   HEAP32[$70>>2] = $$$02$i8$i;
   $71 = ((($f$i3$i)) + 20|0);
   HEAP32[$71>>2] = $$01$i7$i;
   $72 = ((($f$i3$i)) + 44|0);
   HEAP32[$72>>2] = $$01$i7$i;
   $73 = (($$01$i7$i) + ($$$02$i8$i)|0);
   $74 = ((($f$i3$i)) + 16|0);
   HEAP32[$74>>2] = $73;
   $75 = ((($f$i3$i)) + 28|0);
   HEAP32[$75>>2] = $73;
   $76 = (_vfprintf($f$i3$i,16104,$args$i)|0);
   $77 = ($$$02$i8$i|0)==(0);
   if ($77) {
    $$0$i9$i = $76;
   } else {
    $78 = HEAP32[$71>>2]|0;
    $79 = HEAP32[$74>>2]|0;
    $80 = ($78|0)==($79|0);
    $81 = $80 << 31 >> 31;
    $82 = (($78) + ($81)|0);
    HEAP8[$82>>0] = 0;
    $$0$i9$i = $76;
   }
  }
  $$pre = HEAP32[$s>>2]|0;
  $84 = $$pre;$l$0$i = $$0$i9$i;
 } else {
  $84 = $33;$l$0$i = $$0$i$i;
 }
 $83 = (($84) + ($l$0$i))|0;
 HEAP32[$s>>2] = $83;
 STACKTOP = sp;return;
}
function _fai_insert_index($idx,$name,$0,$1,$line_len,$line_blen,$2,$3) {
 $idx = $idx|0;
 $name = $name|0;
 $0 = $0|0;
 $1 = $1|0;
 $line_len = $line_len|0;
 $line_blen = $line_blen|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i1$ph = 0, $$0$i14 = 0, $$0$i2 = 0, $$01$lcssa$i = 0, $$014$i = 0, $$014$i$i = 0, $$05$i$i = 0, $$1$lcssa$i = 0, $$in = 0, $$lcssa$i$i = 0, $$lcssa2$i$i = 0, $$phi$trans$insert = 0, $$pn = 0, $$pn$i = 0, $$pn15$i = 0, $$pre = 0;
 var $$pre$i = 0, $$pre14 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $h$0$i$i = 0, $h$1$i$i = 0, $i$0$i = 0, $i$1$i = 0;
 var $i$1$i$site$2$i = 0, $i$1$i23 = 0, $or$cond = 0, $or$cond$i$i = 0, $or$cond3$i$i = 0, $s$pn$i$i = 0, $site$0$i = 0, $site$0$i$i$0$i = 0, $site$2$i24 = 0, $step$0$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr3 = 0, $w$0$i = 0, $x$0$i = 0, $x$3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = ($name|0)==(0|0);
 if ($4) {
  _fprintf(9772,21545,$vararg_buffer);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = $name;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 L5: do {
  if ($7) {
   $$01$lcssa$i = $name;
   label = 6;
  } else {
   $$014$i = $name;$177 = $5;
   while(1) {
    $8 = HEAP8[$$014$i>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $$pn$i = $177;
     break L5;
    }
    $10 = ((($$014$i)) + 1|0);
    $11 = $10;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    if ($13) {
     $$01$lcssa$i = $10;
     label = 6;
     break;
    } else {
     $$014$i = $10;$177 = $11;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $w$0$i = $$01$lcssa$i;
  while(1) {
   $14 = HEAP32[$w$0$i>>2]|0;
   $15 = (($14) + -16843009)|0;
   $16 = $14 & -2139062144;
   $17 = $16 ^ -2139062144;
   $18 = $17 & $15;
   $19 = ($18|0)==(0);
   $20 = ((($w$0$i)) + 4|0);
   if ($19) {
    $w$0$i = $20;
   } else {
    break;
   }
  }
  $21 = $14&255;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   $$1$lcssa$i = $w$0$i;
  } else {
   $$pn15$i = $w$0$i;
   while(1) {
    $23 = ((($$pn15$i)) + 1|0);
    $$pre$i = HEAP8[$23>>0]|0;
    $24 = ($$pre$i<<24>>24)==(0);
    if ($24) {
     $$1$lcssa$i = $23;
     break;
    } else {
     $$pn15$i = $23;
    }
   }
  }
  $25 = $$1$lcssa$i;
  $$pn$i = $25;
 }
 $$0$i2 = (($$pn$i) - ($5))|0;
 $26 = (($$0$i2) + 1)|0;
 $27 = (_malloc($26)|0);
 $28 = ($27|0)==(0|0);
 if ($28) {
  $$0$i = 0;
 } else {
  _memcpy(($27|0),($name|0),($26|0))|0;
  $$0$i = $27;
 }
 $29 = ((($idx)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($30)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($32>>>0)<($34>>>0);
 do {
  if ($35) {
   label = 17;
  } else {
   $36 = HEAP32[$30>>2]|0;
   $37 = ((($30)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $38 << 1;
   $40 = ($36>>>0)>($39>>>0);
   if ($40) {
    $41 = (($36) + -1)|0;
    $42 = (_kh_resize_s($30,$41)|0);
    $43 = ($42|0)<(0);
    if (!($43)) {
     label = 17;
     break;
    }
   } else {
    $44 = (($36) + 1)|0;
    $45 = (_kh_resize_s($30,$44)|0);
    $46 = ($45|0)<(0);
    if (!($46)) {
     label = 17;
     break;
    }
   }
   $$0$i1$ph = HEAP32[$30>>2]|0;
   $$0$i14 = $$0$i1$ph;
  }
 } while(0);
 do {
  if ((label|0) == 17) {
   $47 = HEAP32[$30>>2]|0;
   $48 = (($47) + -1)|0;
   $49 = HEAP8[$$0$i>>0]|0;
   $50 = $49 << 24 >> 24;
   $51 = ($49<<24>>24)==(0);
   L30: do {
    if ($51) {
     $h$1$i$i = $50;
    } else {
     $h$0$i$i = $50;$s$pn$i$i = $$0$i;
     while(1) {
      $$0$i$i = ((($s$pn$i$i)) + 1|0);
      $52 = HEAP8[$$0$i$i>>0]|0;
      $53 = ($52<<24>>24)==(0);
      if ($53) {
       $h$1$i$i = $h$0$i$i;
       break L30;
      }
      $54 = ($h$0$i$i*31)|0;
      $55 = $52 << 24 >> 24;
      $56 = (($54) + ($55))|0;
      $h$0$i$i = $56;$s$pn$i$i = $$0$i$i;
     }
    }
   } while(0);
   $57 = $h$1$i$i & $48;
   $58 = $57 >>> 4;
   $59 = ((($30)) + 16|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + ($58<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $57 << 1;
   $64 = $63 & 30;
   $65 = 2 << $64;
   $66 = $62 & $65;
   $67 = ($66|0)==(0);
   do {
    if ($67) {
     $68 = ((($30)) + 20|0);
     $i$0$i = $57;$site$0$i = $47;$step$0$i = 0;
     while(1) {
      $69 = $i$0$i >>> 4;
      $70 = (($60) + ($69<<2)|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = $i$0$i << 1;
      $73 = $72 & 30;
      $74 = 2 << $73;
      $75 = $71 & $74;
      $76 = ($75|0)==(0);
      if (!($76)) {
       $i$1$i23 = $i$0$i;$site$2$i24 = $site$0$i;
       break;
      }
      $77 = 1 << $73;
      $78 = $71 & $77;
      $79 = ($78|0)==(0);
      if ($79) {
       $80 = HEAP32[$68>>2]|0;
       $81 = (($80) + ($i$0$i<<2)|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = HEAP8[$82>>0]|0;
       $84 = ($83<<24>>24)!=($49<<24>>24);
       $85 = ($83<<24>>24)==(0);
       $or$cond3$i$i = $85 | $84;
       if ($or$cond3$i$i) {
        $$lcssa$i$i = $83;$$lcssa2$i$i = $49;
       } else {
        $$014$i$i = $82;$$05$i$i = $$0$i;
        while(1) {
         $86 = ((($$014$i$i)) + 1|0);
         $87 = ((($$05$i$i)) + 1|0);
         $88 = HEAP8[$86>>0]|0;
         $89 = HEAP8[$87>>0]|0;
         $90 = ($88<<24>>24)!=($89<<24>>24);
         $91 = ($88<<24>>24)==(0);
         $or$cond$i$i = $91 | $90;
         if ($or$cond$i$i) {
          $$lcssa$i$i = $88;$$lcssa2$i$i = $89;
          break;
         } else {
          $$014$i$i = $86;$$05$i$i = $87;
         }
        }
       }
       $92 = ($$lcssa$i$i<<24>>24)==($$lcssa2$i$i<<24>>24);
       if ($92) {
        $i$1$i23 = $i$0$i;$site$2$i24 = $site$0$i;
        break;
       }
      }
      $site$0$i$i$0$i = $79 ? $site$0$i : $i$0$i;
      $93 = (($step$0$i) + 1)|0;
      $94 = (($i$0$i) + ($93))|0;
      $95 = $94 & $48;
      $96 = ($95|0)==($57|0);
      if ($96) {
       $i$1$i = $57;$x$0$i = $site$0$i$i$0$i;
       label = 28;
       break;
      } else {
       $i$0$i = $95;$site$0$i = $site$0$i$i$0$i;$step$0$i = $93;
      }
     }
     if ((label|0) == 28) {
      $97 = ($x$0$i|0)==($47|0);
      if ($97) {
       $i$1$i23 = $i$1$i;$site$2$i24 = $x$0$i;
      } else {
       $x$3$i = $x$0$i;
       break;
      }
     }
     $98 = $i$1$i23 >>> 4;
     $99 = (($60) + ($98<<2)|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = $i$1$i23 << 1;
     $102 = $101 & 30;
     $103 = 2 << $102;
     $104 = $100 & $103;
     $105 = ($104|0)==(0);
     $106 = ($site$2$i24|0)==($47|0);
     $or$cond = $105 | $106;
     $i$1$i$site$2$i = $or$cond ? $i$1$i23 : $site$2$i24;
     $x$3$i = $i$1$i$site$2$i;
    } else {
     $x$3$i = $57;
    }
   } while(0);
   $107 = $x$3$i >>> 4;
   $108 = (($60) + ($107<<2)|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $x$3$i << 1;
   $111 = $110 & 30;
   $112 = 2 << $111;
   $113 = $109 & $112;
   $114 = ($113|0)==(0);
   if (!($114)) {
    $115 = ((($30)) + 20|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (($116) + ($x$3$i<<2)|0);
    HEAP32[$117>>2] = $$0$i;
    $118 = 3 << $111;
    $119 = $118 ^ -1;
    $120 = HEAP32[$59>>2]|0;
    $121 = (($120) + ($107<<2)|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = $122 & $119;
    HEAP32[$121>>2] = $123;
    $124 = ((($30)) + 4|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = (($125) + 1)|0;
    HEAP32[$124>>2] = $126;
    $127 = HEAP32[$31>>2]|0;
    $128 = (($127) + 1)|0;
    HEAP32[$31>>2] = $128;
    $$0$i14 = $x$3$i;
    break;
   }
   $129 = 1 << $111;
   $130 = $109 & $129;
   $131 = ($130|0)==(0);
   if (!($131)) {
    $132 = ((($30)) + 20|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (($133) + ($x$3$i<<2)|0);
    HEAP32[$134>>2] = $$0$i;
    $135 = 3 << $111;
    $136 = $135 ^ -1;
    $137 = HEAP32[$59>>2]|0;
    $138 = (($137) + ($107<<2)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $139 & $136;
    HEAP32[$138>>2] = $140;
    $141 = ((($30)) + 4|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = (($142) + 1)|0;
    HEAP32[$141>>2] = $143;
    $$0$i14 = $x$3$i;
    break;
   }
   HEAP32[$vararg_buffer1>>2] = $name;
   $vararg_ptr3 = ((($vararg_buffer1)) + 8|0);
   $144 = $vararg_ptr3;
   $145 = $144;
   HEAP32[$145>>2] = $2;
   $146 = (($144) + 4)|0;
   $147 = $146;
   HEAP32[$147>>2] = $3;
   _fprintf(9772,21578,$vararg_buffer1);
   _free($$0$i);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $$pn = HEAP32[$29>>2]|0;
 $$in = ((($$pn)) + 24|0);
 $148 = HEAP32[$$in>>2]|0;
 $149 = ((($idx)) + 4|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = ((($idx)) + 8|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = ($150|0)==($152|0);
 do {
  if ($153) {
   $154 = ($150|0)==(0);
   $155 = $150 << 1;
   $$ = $154 ? 16 : $155;
   HEAP32[$151>>2] = $$;
   $156 = ((($idx)) + 12|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = $$ << 2;
   $159 = (_realloc($157,$158)|0);
   $160 = ($159|0)==(0|0);
   if (!($160)) {
    HEAP32[$156>>2] = $159;
    $$pre = HEAP32[$149>>2]|0;
    $162 = $$pre;$164 = $159;
    break;
   }
   _fprintf(9772,21649,$vararg_buffer4);
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$phi$trans$insert = ((($idx)) + 12|0);
   $$pre14 = HEAP32[$$phi$trans$insert>>2]|0;
   $162 = $150;$164 = $$pre14;
  }
 } while(0);
 $161 = (($162) + 1)|0;
 HEAP32[$149>>2] = $161;
 $163 = (($164) + ($162<<2)|0);
 HEAP32[$163>>2] = $$0$i;
 $165 = (((($148) + (($$0$i14*24)|0)|0)) + 8|0);
 $166 = $165;
 $167 = $166;
 HEAP32[$167>>2] = $0;
 $168 = (($166) + 4)|0;
 $169 = $168;
 HEAP32[$169>>2] = $1;
 $170 = (($148) + (($$0$i14*24)|0)|0);
 HEAP32[$170>>2] = $line_len;
 $171 = (((($148) + (($$0$i14*24)|0)|0)) + 4|0);
 HEAP32[$171>>2] = $line_blen;
 $172 = (((($148) + (($$0$i14*24)|0)|0)) + 16|0);
 $173 = $172;
 $174 = $173;
 HEAP32[$174>>2] = $2;
 $175 = (($173) + 4)|0;
 $176 = $175;
 HEAP32[$176>>2] = $3;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _kh_resize_s($h,$new_n_buckets) {
 $h = $h|0;
 $new_n_buckets = $new_n_buckets|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$pn = 0, $$pre$phi5Z2D = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $h$0$i = 0;
 var $i$0 = 0, $j$1 = 0, $key$0 = 0, $phitmp = 0, $phitmp10 = 0, $s$pn$i = 0, $step$0 = 0, $tmp1 = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val = sp + 24|0;
 $tmp1 = sp;
 $0 = (($new_n_buckets) + -1)|0;
 $1 = $0 >>> 1;
 $2 = $0 | $1;
 $3 = $2 >>> 2;
 $4 = $2 | $3;
 $5 = $4 >>> 4;
 $6 = $4 | $5;
 $7 = $6 >>> 8;
 $8 = $6 | $7;
 $9 = $8 >>> 16;
 $10 = $8 | $9;
 $11 = (($10) + 1)|0;
 $12 = ($11>>>0)<(4);
 $$ = $12 ? 4 : $11;
 $13 = ((($h)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($$>>>0));
 $16 = $15 * 0.77000000000000001;
 $17 = $16 + 0.5;
 $18 = (~~(($17))>>>0);
 $19 = ($14>>>0)<($18>>>0);
 if (!($19)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = ($$>>>0)<(16);
 $21 = $$ >>> 4;
 $phitmp10 = $21 << 2;
 $22 = $20 ? 4 : $phitmp10;
 $23 = (_malloc($22)|0);
 $24 = ($23|0)==(0|0);
 if ($24) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = $$ >>> 4;
 $phitmp = $25 << 2;
 $26 = $20 ? 4 : $phitmp;
 _memset(($23|0),-86,($26|0))|0;
 $27 = HEAP32[$h>>2]|0;
 $28 = ($27>>>0)<($$>>>0);
 $29 = ((($h)) + 20|0);
 do {
  if ($28) {
   $30 = HEAP32[$29>>2]|0;
   $31 = $$ << 2;
   $32 = (_realloc($30,$31)|0);
   $33 = ($32|0)==(0|0);
   if ($33) {
    _free($23);
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$29>>2] = $32;
   $34 = ((($h)) + 24|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($$*24)|0;
   $37 = (_realloc($35,$36)|0);
   $38 = ($37|0)==(0|0);
   if (!($38)) {
    HEAP32[$34>>2] = $37;
    $$pre$phi5Z2D = $34;
    break;
   }
   _free($23);
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$pre4 = ((($h)) + 24|0);
   $$pre$phi5Z2D = $$pre4;
  }
 } while(0);
 $39 = ((($h)) + 16|0);
 $40 = (($$) + -1)|0;
 $j$1 = 0;
 while(1) {
  $41 = HEAP32[$h>>2]|0;
  $42 = ($j$1|0)==($41|0);
  if ($42) {
   break;
  }
  $43 = $j$1 >>> 4;
  $44 = HEAP32[$39>>2]|0;
  $45 = (($44) + ($43<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $j$1 << 1;
  $48 = $47 & 30;
  $49 = 3 << $48;
  $50 = $46 & $49;
  $51 = ($50|0)==(0);
  if ($51) {
   $52 = HEAP32[$29>>2]|0;
   $53 = (($52) + ($j$1<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = HEAP32[$$pre$phi5Z2D>>2]|0;
   $56 = (($55) + (($j$1*24)|0)|0);
   ;HEAP32[$val>>2]=HEAP32[$56>>2]|0;HEAP32[$val+4>>2]=HEAP32[$56+4>>2]|0;HEAP32[$val+8>>2]=HEAP32[$56+8>>2]|0;HEAP32[$val+12>>2]=HEAP32[$56+12>>2]|0;HEAP32[$val+16>>2]=HEAP32[$56+16>>2]|0;HEAP32[$val+20>>2]=HEAP32[$56+20>>2]|0;
   $57 = 1 << $48;
   $58 = $46 | $57;
   HEAP32[$45>>2] = $58;
   $key$0 = $54;
   while(1) {
    $59 = HEAP8[$key$0>>0]|0;
    $60 = $59 << 24 >> 24;
    $61 = ($59<<24>>24)==(0);
    L26: do {
     if ($61) {
      $$pn = $60;$step$0 = 0;
     } else {
      $h$0$i = $60;$s$pn$i = $key$0;
      while(1) {
       $$0$i = ((($s$pn$i)) + 1|0);
       $62 = HEAP8[$$0$i>>0]|0;
       $63 = ($62<<24>>24)==(0);
       if ($63) {
        $$pn = $h$0$i;$step$0 = 0;
        break L26;
       }
       $64 = ($h$0$i*31)|0;
       $65 = $62 << 24 >> 24;
       $66 = (($64) + ($65))|0;
       $h$0$i = $66;$s$pn$i = $$0$i;
      }
     }
    } while(0);
    while(1) {
     $i$0 = $$pn & $40;
     $67 = $i$0 >>> 4;
     $68 = (($23) + ($67<<2)|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = $i$0 << 1;
     $71 = $70 & 30;
     $72 = 2 << $71;
     $73 = $69 & $72;
     $74 = ($73|0)==(0);
     if (!($74)) {
      break;
     }
     $75 = (($step$0) + 1)|0;
     $76 = (($i$0) + ($75))|0;
     $$pn = $76;$step$0 = $75;
    }
    $77 = $72 ^ -1;
    $78 = $69 & $77;
    HEAP32[$68>>2] = $78;
    $79 = HEAP32[$h>>2]|0;
    $80 = ($i$0>>>0)<($79>>>0);
    if (!($80)) {
     break;
    }
    $81 = HEAP32[$39>>2]|0;
    $82 = (($81) + ($67<<2)|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = 3 << $71;
    $85 = $83 & $84;
    $86 = ($85|0)==(0);
    if (!($86)) {
     break;
    }
    $87 = HEAP32[$29>>2]|0;
    $88 = (($87) + ($i$0<<2)|0);
    $89 = HEAP32[$88>>2]|0;
    HEAP32[$88>>2] = $key$0;
    $90 = HEAP32[$$pre$phi5Z2D>>2]|0;
    $91 = (($90) + (($i$0*24)|0)|0);
    ;HEAP32[$tmp1>>2]=HEAP32[$91>>2]|0;HEAP32[$tmp1+4>>2]=HEAP32[$91+4>>2]|0;HEAP32[$tmp1+8>>2]=HEAP32[$91+8>>2]|0;HEAP32[$tmp1+12>>2]=HEAP32[$91+12>>2]|0;HEAP32[$tmp1+16>>2]=HEAP32[$91+16>>2]|0;HEAP32[$tmp1+20>>2]=HEAP32[$91+20>>2]|0;
    ;HEAP32[$91>>2]=HEAP32[$val>>2]|0;HEAP32[$91+4>>2]=HEAP32[$val+4>>2]|0;HEAP32[$91+8>>2]=HEAP32[$val+8>>2]|0;HEAP32[$91+12>>2]=HEAP32[$val+12>>2]|0;HEAP32[$91+16>>2]=HEAP32[$val+16>>2]|0;HEAP32[$91+20>>2]=HEAP32[$val+20>>2]|0;
    ;HEAP32[$val>>2]=HEAP32[$tmp1>>2]|0;HEAP32[$val+4>>2]=HEAP32[$tmp1+4>>2]|0;HEAP32[$val+8>>2]=HEAP32[$tmp1+8>>2]|0;HEAP32[$val+12>>2]=HEAP32[$tmp1+12>>2]|0;HEAP32[$val+16>>2]=HEAP32[$tmp1+16>>2]|0;HEAP32[$val+20>>2]=HEAP32[$tmp1+20>>2]|0;
    $92 = 1 << $71;
    $93 = HEAP32[$39>>2]|0;
    $94 = (($93) + ($67<<2)|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = $95 | $92;
    HEAP32[$94>>2] = $96;
    $key$0 = $89;
   }
   $97 = HEAP32[$29>>2]|0;
   $98 = (($97) + ($i$0<<2)|0);
   HEAP32[$98>>2] = $key$0;
   $99 = HEAP32[$$pre$phi5Z2D>>2]|0;
   $100 = (($99) + (($i$0*24)|0)|0);
   ;HEAP32[$100>>2]=HEAP32[$val>>2]|0;HEAP32[$100+4>>2]=HEAP32[$val+4>>2]|0;HEAP32[$100+8>>2]=HEAP32[$val+8>>2]|0;HEAP32[$100+12>>2]=HEAP32[$val+12>>2]|0;HEAP32[$100+16>>2]=HEAP32[$val+16>>2]|0;HEAP32[$100+20>>2]=HEAP32[$val+20>>2]|0;
  }
  $101 = (($j$1) + 1)|0;
  $j$1 = $101;
 }
 $102 = ($j$1>>>0)>($$>>>0);
 if ($102) {
  $103 = HEAP32[$29>>2]|0;
  $104 = $$ << 2;
  $105 = (_realloc($103,$104)|0);
  HEAP32[$29>>2] = $105;
  $106 = HEAP32[$$pre$phi5Z2D>>2]|0;
  $107 = ($$*24)|0;
  $108 = (_realloc($106,$107)|0);
  HEAP32[$$pre$phi5Z2D>>2] = $108;
 }
 $109 = HEAP32[$39>>2]|0;
 _free($109);
 HEAP32[$39>>2] = $23;
 HEAP32[$h>>2] = $$;
 $110 = HEAP32[$13>>2]|0;
 $111 = ((($h)) + 8|0);
 HEAP32[$111>>2] = $110;
 $112 = ((($h)) + 12|0);
 HEAP32[$112>>2] = $18;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _fai_destroy($fai) {
 $fai = $fai|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($fai)) + 4|0);
 $1 = ((($fai)) + 12|0);
 $i$0 = 0;
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($i$0|0)<($2|0);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[$1>>2]|0;
  $5 = (($4) + ($i$0<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  _free($6);
  $7 = (($i$0) + 1)|0;
  $i$0 = $7;
 }
 $8 = HEAP32[$1>>2]|0;
 _free($8);
 $9 = ((($fai)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $12 = ((($10)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  _free($13);
  $14 = ((($10)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  _free($15);
  $16 = ((($10)) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  _free($17);
  _free($10);
 }
 $18 = HEAP32[$fai>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  _free($fai);
  return;
 }
 (_bgzf_close($18)|0);
 _free($fai);
 return;
}
function _body($ctx,$data,$size) {
 $ctx = $ctx|0;
 $data = $data|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0;
 var $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0;
 var $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $98 = 0, $99 = 0, $a$0 = 0, $b$0 = 0;
 var $c$0 = 0, $d$0 = 0, $ptr$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ctx)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ctx)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($ctx)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($ctx)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($ctx)) + 88|0);
 $9 = ((($ctx)) + 92|0);
 $10 = ((($ctx)) + 96|0);
 $11 = ((($ctx)) + 100|0);
 $12 = ((($ctx)) + 104|0);
 $13 = ((($ctx)) + 108|0);
 $14 = ((($ctx)) + 112|0);
 $15 = ((($ctx)) + 116|0);
 $16 = ((($ctx)) + 120|0);
 $17 = ((($ctx)) + 124|0);
 $18 = ((($ctx)) + 128|0);
 $19 = ((($ctx)) + 132|0);
 $20 = ((($ctx)) + 136|0);
 $21 = ((($ctx)) + 140|0);
 $22 = ((($ctx)) + 144|0);
 $23 = ((($ctx)) + 148|0);
 $$0 = $size;$a$0 = $1;$b$0 = $3;$c$0 = $5;$d$0 = $7;$ptr$0 = $data;
 while(1) {
  $24 = $c$0 ^ $d$0;
  $25 = $b$0 & $24;
  $26 = $d$0 ^ $25;
  $27 = HEAP8[$ptr$0>>0]|0;
  $28 = $27&255;
  $29 = ((($ptr$0)) + 1|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = $31 << 8;
  $33 = $28 | $32;
  $34 = ((($ptr$0)) + 2|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = $36 << 16;
  $38 = $33 | $37;
  $39 = ((($ptr$0)) + 3|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $41 << 24;
  $43 = $38 | $42;
  HEAP32[$8>>2] = $43;
  $44 = (($26) + ($43))|0;
  $45 = (($44) + -680876936)|0;
  $46 = (($a$0) + ($45))|0;
  $47 = $46 << 7;
  $48 = $46 >>> 25;
  $49 = $47 | $48;
  $50 = (($49) + ($b$0))|0;
  $51 = $b$0 ^ $c$0;
  $52 = $50 & $51;
  $53 = $c$0 ^ $52;
  $54 = ((($ptr$0)) + 4|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = ((($ptr$0)) + 5|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = $59 << 8;
  $61 = $56 | $60;
  $62 = ((($ptr$0)) + 6|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = $64 << 16;
  $66 = $61 | $65;
  $67 = ((($ptr$0)) + 7|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = $69 << 24;
  $71 = $66 | $70;
  HEAP32[$9>>2] = $71;
  $72 = (($53) + ($71))|0;
  $73 = (($72) + -389564586)|0;
  $74 = (($d$0) + ($73))|0;
  $75 = $74 << 12;
  $76 = $74 >>> 20;
  $77 = $75 | $76;
  $78 = (($77) + ($50))|0;
  $79 = $50 ^ $b$0;
  $80 = $78 & $79;
  $81 = $b$0 ^ $80;
  $82 = ((($ptr$0)) + 8|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83&255;
  $85 = ((($ptr$0)) + 9|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = $87 << 8;
  $89 = $84 | $88;
  $90 = ((($ptr$0)) + 10|0);
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = $92 << 16;
  $94 = $89 | $93;
  $95 = ((($ptr$0)) + 11|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96&255;
  $98 = $97 << 24;
  $99 = $94 | $98;
  HEAP32[$10>>2] = $99;
  $100 = (($81) + ($99))|0;
  $101 = (($100) + 606105819)|0;
  $102 = (($c$0) + ($101))|0;
  $103 = $102 << 17;
  $104 = $102 >>> 15;
  $105 = $103 | $104;
  $106 = (($105) + ($78))|0;
  $107 = $78 ^ $50;
  $108 = $106 & $107;
  $109 = $50 ^ $108;
  $110 = ((($ptr$0)) + 12|0);
  $111 = HEAP8[$110>>0]|0;
  $112 = $111&255;
  $113 = ((($ptr$0)) + 13|0);
  $114 = HEAP8[$113>>0]|0;
  $115 = $114&255;
  $116 = $115 << 8;
  $117 = $112 | $116;
  $118 = ((($ptr$0)) + 14|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = $119&255;
  $121 = $120 << 16;
  $122 = $117 | $121;
  $123 = ((($ptr$0)) + 15|0);
  $124 = HEAP8[$123>>0]|0;
  $125 = $124&255;
  $126 = $125 << 24;
  $127 = $122 | $126;
  HEAP32[$11>>2] = $127;
  $128 = (($109) + ($127))|0;
  $129 = (($128) + -1044525330)|0;
  $130 = (($b$0) + ($129))|0;
  $131 = $130 << 22;
  $132 = $130 >>> 10;
  $133 = $131 | $132;
  $134 = (($133) + ($106))|0;
  $135 = $106 ^ $78;
  $136 = $134 & $135;
  $137 = $78 ^ $136;
  $138 = ((($ptr$0)) + 16|0);
  $139 = HEAP8[$138>>0]|0;
  $140 = $139&255;
  $141 = ((($ptr$0)) + 17|0);
  $142 = HEAP8[$141>>0]|0;
  $143 = $142&255;
  $144 = $143 << 8;
  $145 = $140 | $144;
  $146 = ((($ptr$0)) + 18|0);
  $147 = HEAP8[$146>>0]|0;
  $148 = $147&255;
  $149 = $148 << 16;
  $150 = $145 | $149;
  $151 = ((($ptr$0)) + 19|0);
  $152 = HEAP8[$151>>0]|0;
  $153 = $152&255;
  $154 = $153 << 24;
  $155 = $150 | $154;
  HEAP32[$12>>2] = $155;
  $156 = (($137) + ($155))|0;
  $157 = (($156) + -176418897)|0;
  $158 = (($50) + ($157))|0;
  $159 = $158 << 7;
  $160 = $158 >>> 25;
  $161 = $159 | $160;
  $162 = (($161) + ($134))|0;
  $163 = $134 ^ $106;
  $164 = $162 & $163;
  $165 = $106 ^ $164;
  $166 = ((($ptr$0)) + 20|0);
  $167 = HEAP8[$166>>0]|0;
  $168 = $167&255;
  $169 = ((($ptr$0)) + 21|0);
  $170 = HEAP8[$169>>0]|0;
  $171 = $170&255;
  $172 = $171 << 8;
  $173 = $168 | $172;
  $174 = ((($ptr$0)) + 22|0);
  $175 = HEAP8[$174>>0]|0;
  $176 = $175&255;
  $177 = $176 << 16;
  $178 = $173 | $177;
  $179 = ((($ptr$0)) + 23|0);
  $180 = HEAP8[$179>>0]|0;
  $181 = $180&255;
  $182 = $181 << 24;
  $183 = $178 | $182;
  HEAP32[$13>>2] = $183;
  $184 = (($165) + ($183))|0;
  $185 = (($184) + 1200080426)|0;
  $186 = (($78) + ($185))|0;
  $187 = $186 << 12;
  $188 = $186 >>> 20;
  $189 = $187 | $188;
  $190 = (($189) + ($162))|0;
  $191 = $162 ^ $134;
  $192 = $190 & $191;
  $193 = $134 ^ $192;
  $194 = ((($ptr$0)) + 24|0);
  $195 = HEAP8[$194>>0]|0;
  $196 = $195&255;
  $197 = ((($ptr$0)) + 25|0);
  $198 = HEAP8[$197>>0]|0;
  $199 = $198&255;
  $200 = $199 << 8;
  $201 = $196 | $200;
  $202 = ((($ptr$0)) + 26|0);
  $203 = HEAP8[$202>>0]|0;
  $204 = $203&255;
  $205 = $204 << 16;
  $206 = $201 | $205;
  $207 = ((($ptr$0)) + 27|0);
  $208 = HEAP8[$207>>0]|0;
  $209 = $208&255;
  $210 = $209 << 24;
  $211 = $206 | $210;
  HEAP32[$14>>2] = $211;
  $212 = (($193) + ($211))|0;
  $213 = (($212) + -1473231341)|0;
  $214 = (($106) + ($213))|0;
  $215 = $214 << 17;
  $216 = $214 >>> 15;
  $217 = $215 | $216;
  $218 = (($217) + ($190))|0;
  $219 = $190 ^ $162;
  $220 = $218 & $219;
  $221 = $162 ^ $220;
  $222 = ((($ptr$0)) + 28|0);
  $223 = HEAP8[$222>>0]|0;
  $224 = $223&255;
  $225 = ((($ptr$0)) + 29|0);
  $226 = HEAP8[$225>>0]|0;
  $227 = $226&255;
  $228 = $227 << 8;
  $229 = $224 | $228;
  $230 = ((($ptr$0)) + 30|0);
  $231 = HEAP8[$230>>0]|0;
  $232 = $231&255;
  $233 = $232 << 16;
  $234 = $229 | $233;
  $235 = ((($ptr$0)) + 31|0);
  $236 = HEAP8[$235>>0]|0;
  $237 = $236&255;
  $238 = $237 << 24;
  $239 = $234 | $238;
  HEAP32[$15>>2] = $239;
  $240 = (($221) + ($239))|0;
  $241 = (($240) + -45705983)|0;
  $242 = (($134) + ($241))|0;
  $243 = $242 << 22;
  $244 = $242 >>> 10;
  $245 = $243 | $244;
  $246 = (($245) + ($218))|0;
  $247 = $218 ^ $190;
  $248 = $246 & $247;
  $249 = $190 ^ $248;
  $250 = ((($ptr$0)) + 32|0);
  $251 = HEAP8[$250>>0]|0;
  $252 = $251&255;
  $253 = ((($ptr$0)) + 33|0);
  $254 = HEAP8[$253>>0]|0;
  $255 = $254&255;
  $256 = $255 << 8;
  $257 = $252 | $256;
  $258 = ((($ptr$0)) + 34|0);
  $259 = HEAP8[$258>>0]|0;
  $260 = $259&255;
  $261 = $260 << 16;
  $262 = $257 | $261;
  $263 = ((($ptr$0)) + 35|0);
  $264 = HEAP8[$263>>0]|0;
  $265 = $264&255;
  $266 = $265 << 24;
  $267 = $262 | $266;
  HEAP32[$16>>2] = $267;
  $268 = (($249) + ($267))|0;
  $269 = (($268) + 1770035416)|0;
  $270 = (($162) + ($269))|0;
  $271 = $270 << 7;
  $272 = $270 >>> 25;
  $273 = $271 | $272;
  $274 = (($273) + ($246))|0;
  $275 = $246 ^ $218;
  $276 = $274 & $275;
  $277 = $218 ^ $276;
  $278 = ((($ptr$0)) + 36|0);
  $279 = HEAP8[$278>>0]|0;
  $280 = $279&255;
  $281 = ((($ptr$0)) + 37|0);
  $282 = HEAP8[$281>>0]|0;
  $283 = $282&255;
  $284 = $283 << 8;
  $285 = $280 | $284;
  $286 = ((($ptr$0)) + 38|0);
  $287 = HEAP8[$286>>0]|0;
  $288 = $287&255;
  $289 = $288 << 16;
  $290 = $285 | $289;
  $291 = ((($ptr$0)) + 39|0);
  $292 = HEAP8[$291>>0]|0;
  $293 = $292&255;
  $294 = $293 << 24;
  $295 = $290 | $294;
  HEAP32[$17>>2] = $295;
  $296 = (($277) + ($295))|0;
  $297 = (($296) + -1958414417)|0;
  $298 = (($190) + ($297))|0;
  $299 = $298 << 12;
  $300 = $298 >>> 20;
  $301 = $299 | $300;
  $302 = (($301) + ($274))|0;
  $303 = $274 ^ $246;
  $304 = $302 & $303;
  $305 = $246 ^ $304;
  $306 = ((($ptr$0)) + 40|0);
  $307 = HEAP8[$306>>0]|0;
  $308 = $307&255;
  $309 = ((($ptr$0)) + 41|0);
  $310 = HEAP8[$309>>0]|0;
  $311 = $310&255;
  $312 = $311 << 8;
  $313 = $308 | $312;
  $314 = ((($ptr$0)) + 42|0);
  $315 = HEAP8[$314>>0]|0;
  $316 = $315&255;
  $317 = $316 << 16;
  $318 = $313 | $317;
  $319 = ((($ptr$0)) + 43|0);
  $320 = HEAP8[$319>>0]|0;
  $321 = $320&255;
  $322 = $321 << 24;
  $323 = $318 | $322;
  HEAP32[$18>>2] = $323;
  $324 = (($305) + ($323))|0;
  $325 = (($324) + -42063)|0;
  $326 = (($218) + ($325))|0;
  $327 = $326 << 17;
  $328 = $326 >>> 15;
  $329 = $327 | $328;
  $330 = (($329) + ($302))|0;
  $331 = $302 ^ $274;
  $332 = $330 & $331;
  $333 = $274 ^ $332;
  $334 = ((($ptr$0)) + 44|0);
  $335 = HEAP8[$334>>0]|0;
  $336 = $335&255;
  $337 = ((($ptr$0)) + 45|0);
  $338 = HEAP8[$337>>0]|0;
  $339 = $338&255;
  $340 = $339 << 8;
  $341 = $336 | $340;
  $342 = ((($ptr$0)) + 46|0);
  $343 = HEAP8[$342>>0]|0;
  $344 = $343&255;
  $345 = $344 << 16;
  $346 = $341 | $345;
  $347 = ((($ptr$0)) + 47|0);
  $348 = HEAP8[$347>>0]|0;
  $349 = $348&255;
  $350 = $349 << 24;
  $351 = $346 | $350;
  HEAP32[$19>>2] = $351;
  $352 = (($333) + ($351))|0;
  $353 = (($352) + -1990404162)|0;
  $354 = (($246) + ($353))|0;
  $355 = $354 << 22;
  $356 = $354 >>> 10;
  $357 = $355 | $356;
  $358 = (($357) + ($330))|0;
  $359 = $330 ^ $302;
  $360 = $358 & $359;
  $361 = $302 ^ $360;
  $362 = ((($ptr$0)) + 48|0);
  $363 = HEAP8[$362>>0]|0;
  $364 = $363&255;
  $365 = ((($ptr$0)) + 49|0);
  $366 = HEAP8[$365>>0]|0;
  $367 = $366&255;
  $368 = $367 << 8;
  $369 = $364 | $368;
  $370 = ((($ptr$0)) + 50|0);
  $371 = HEAP8[$370>>0]|0;
  $372 = $371&255;
  $373 = $372 << 16;
  $374 = $369 | $373;
  $375 = ((($ptr$0)) + 51|0);
  $376 = HEAP8[$375>>0]|0;
  $377 = $376&255;
  $378 = $377 << 24;
  $379 = $374 | $378;
  HEAP32[$20>>2] = $379;
  $380 = (($361) + ($379))|0;
  $381 = (($380) + 1804603682)|0;
  $382 = (($274) + ($381))|0;
  $383 = $382 << 7;
  $384 = $382 >>> 25;
  $385 = $383 | $384;
  $386 = (($385) + ($358))|0;
  $387 = $358 ^ $330;
  $388 = $386 & $387;
  $389 = $330 ^ $388;
  $390 = ((($ptr$0)) + 52|0);
  $391 = HEAP8[$390>>0]|0;
  $392 = $391&255;
  $393 = ((($ptr$0)) + 53|0);
  $394 = HEAP8[$393>>0]|0;
  $395 = $394&255;
  $396 = $395 << 8;
  $397 = $392 | $396;
  $398 = ((($ptr$0)) + 54|0);
  $399 = HEAP8[$398>>0]|0;
  $400 = $399&255;
  $401 = $400 << 16;
  $402 = $397 | $401;
  $403 = ((($ptr$0)) + 55|0);
  $404 = HEAP8[$403>>0]|0;
  $405 = $404&255;
  $406 = $405 << 24;
  $407 = $402 | $406;
  HEAP32[$21>>2] = $407;
  $408 = (($389) + ($407))|0;
  $409 = (($408) + -40341101)|0;
  $410 = (($302) + ($409))|0;
  $411 = $410 << 12;
  $412 = $410 >>> 20;
  $413 = $411 | $412;
  $414 = (($413) + ($386))|0;
  $415 = $386 ^ $358;
  $416 = $414 & $415;
  $417 = $358 ^ $416;
  $418 = ((($ptr$0)) + 56|0);
  $419 = HEAP8[$418>>0]|0;
  $420 = $419&255;
  $421 = ((($ptr$0)) + 57|0);
  $422 = HEAP8[$421>>0]|0;
  $423 = $422&255;
  $424 = $423 << 8;
  $425 = $420 | $424;
  $426 = ((($ptr$0)) + 58|0);
  $427 = HEAP8[$426>>0]|0;
  $428 = $427&255;
  $429 = $428 << 16;
  $430 = $425 | $429;
  $431 = ((($ptr$0)) + 59|0);
  $432 = HEAP8[$431>>0]|0;
  $433 = $432&255;
  $434 = $433 << 24;
  $435 = $430 | $434;
  HEAP32[$22>>2] = $435;
  $436 = (($417) + ($435))|0;
  $437 = (($436) + -1502002290)|0;
  $438 = (($330) + ($437))|0;
  $439 = $438 << 17;
  $440 = $438 >>> 15;
  $441 = $439 | $440;
  $442 = (($441) + ($414))|0;
  $443 = $414 ^ $386;
  $444 = $442 & $443;
  $445 = $386 ^ $444;
  $446 = ((($ptr$0)) + 60|0);
  $447 = HEAP8[$446>>0]|0;
  $448 = $447&255;
  $449 = ((($ptr$0)) + 61|0);
  $450 = HEAP8[$449>>0]|0;
  $451 = $450&255;
  $452 = $451 << 8;
  $453 = $448 | $452;
  $454 = ((($ptr$0)) + 62|0);
  $455 = HEAP8[$454>>0]|0;
  $456 = $455&255;
  $457 = $456 << 16;
  $458 = $453 | $457;
  $459 = ((($ptr$0)) + 63|0);
  $460 = HEAP8[$459>>0]|0;
  $461 = $460&255;
  $462 = $461 << 24;
  $463 = $458 | $462;
  HEAP32[$23>>2] = $463;
  $464 = (($445) + ($463))|0;
  $465 = (($464) + 1236535329)|0;
  $466 = (($358) + ($465))|0;
  $467 = $466 << 22;
  $468 = $466 >>> 10;
  $469 = $467 | $468;
  $470 = (($469) + ($442))|0;
  $471 = $470 ^ $442;
  $472 = $414 & $471;
  $473 = $442 ^ $472;
  $474 = HEAP32[$9>>2]|0;
  $475 = (($473) + ($474))|0;
  $476 = (($475) + -165796510)|0;
  $477 = (($386) + ($476))|0;
  $478 = $477 << 5;
  $479 = $477 >>> 27;
  $480 = $478 | $479;
  $481 = (($480) + ($470))|0;
  $482 = $481 ^ $470;
  $483 = $442 & $482;
  $484 = $470 ^ $483;
  $485 = HEAP32[$14>>2]|0;
  $486 = (($484) + ($485))|0;
  $487 = (($486) + -1069501632)|0;
  $488 = (($414) + ($487))|0;
  $489 = $488 << 9;
  $490 = $488 >>> 23;
  $491 = $489 | $490;
  $492 = (($491) + ($481))|0;
  $493 = $492 ^ $481;
  $494 = $470 & $493;
  $495 = $481 ^ $494;
  $496 = HEAP32[$19>>2]|0;
  $497 = (($495) + ($496))|0;
  $498 = (($497) + 643717713)|0;
  $499 = (($442) + ($498))|0;
  $500 = $499 << 14;
  $501 = $499 >>> 18;
  $502 = $500 | $501;
  $503 = (($502) + ($492))|0;
  $504 = $503 ^ $492;
  $505 = $481 & $504;
  $506 = $492 ^ $505;
  $507 = HEAP32[$8>>2]|0;
  $508 = (($506) + ($507))|0;
  $509 = (($508) + -373897302)|0;
  $510 = (($470) + ($509))|0;
  $511 = $510 << 20;
  $512 = $510 >>> 12;
  $513 = $511 | $512;
  $514 = (($513) + ($503))|0;
  $515 = $514 ^ $503;
  $516 = $492 & $515;
  $517 = $503 ^ $516;
  $518 = HEAP32[$13>>2]|0;
  $519 = (($517) + ($518))|0;
  $520 = (($519) + -701558691)|0;
  $521 = (($481) + ($520))|0;
  $522 = $521 << 5;
  $523 = $521 >>> 27;
  $524 = $522 | $523;
  $525 = (($524) + ($514))|0;
  $526 = $525 ^ $514;
  $527 = $503 & $526;
  $528 = $514 ^ $527;
  $529 = HEAP32[$18>>2]|0;
  $530 = (($528) + ($529))|0;
  $531 = (($530) + 38016083)|0;
  $532 = (($492) + ($531))|0;
  $533 = $532 << 9;
  $534 = $532 >>> 23;
  $535 = $533 | $534;
  $536 = (($535) + ($525))|0;
  $537 = $536 ^ $525;
  $538 = $514 & $537;
  $539 = $525 ^ $538;
  $540 = (($539) + ($463))|0;
  $541 = (($540) + -660478335)|0;
  $542 = (($503) + ($541))|0;
  $543 = $542 << 14;
  $544 = $542 >>> 18;
  $545 = $543 | $544;
  $546 = (($545) + ($536))|0;
  $547 = $546 ^ $536;
  $548 = $525 & $547;
  $549 = $536 ^ $548;
  $550 = HEAP32[$12>>2]|0;
  $551 = (($549) + ($550))|0;
  $552 = (($551) + -405537848)|0;
  $553 = (($514) + ($552))|0;
  $554 = $553 << 20;
  $555 = $553 >>> 12;
  $556 = $554 | $555;
  $557 = (($556) + ($546))|0;
  $558 = $557 ^ $546;
  $559 = $536 & $558;
  $560 = $546 ^ $559;
  $561 = HEAP32[$17>>2]|0;
  $562 = (($560) + ($561))|0;
  $563 = (($562) + 568446438)|0;
  $564 = (($525) + ($563))|0;
  $565 = $564 << 5;
  $566 = $564 >>> 27;
  $567 = $565 | $566;
  $568 = (($567) + ($557))|0;
  $569 = $568 ^ $557;
  $570 = $546 & $569;
  $571 = $557 ^ $570;
  $572 = HEAP32[$22>>2]|0;
  $573 = (($571) + ($572))|0;
  $574 = (($573) + -1019803690)|0;
  $575 = (($536) + ($574))|0;
  $576 = $575 << 9;
  $577 = $575 >>> 23;
  $578 = $576 | $577;
  $579 = (($578) + ($568))|0;
  $580 = $579 ^ $568;
  $581 = $557 & $580;
  $582 = $568 ^ $581;
  $583 = HEAP32[$11>>2]|0;
  $584 = (($582) + ($583))|0;
  $585 = (($584) + -187363961)|0;
  $586 = (($546) + ($585))|0;
  $587 = $586 << 14;
  $588 = $586 >>> 18;
  $589 = $587 | $588;
  $590 = (($589) + ($579))|0;
  $591 = $590 ^ $579;
  $592 = $568 & $591;
  $593 = $579 ^ $592;
  $594 = HEAP32[$16>>2]|0;
  $595 = (($593) + ($594))|0;
  $596 = (($595) + 1163531501)|0;
  $597 = (($557) + ($596))|0;
  $598 = $597 << 20;
  $599 = $597 >>> 12;
  $600 = $598 | $599;
  $601 = (($600) + ($590))|0;
  $602 = $601 ^ $590;
  $603 = $579 & $602;
  $604 = $590 ^ $603;
  $605 = HEAP32[$21>>2]|0;
  $606 = (($604) + ($605))|0;
  $607 = (($606) + -1444681467)|0;
  $608 = (($568) + ($607))|0;
  $609 = $608 << 5;
  $610 = $608 >>> 27;
  $611 = $609 | $610;
  $612 = (($611) + ($601))|0;
  $613 = $612 ^ $601;
  $614 = $590 & $613;
  $615 = $601 ^ $614;
  $616 = HEAP32[$10>>2]|0;
  $617 = (($615) + ($616))|0;
  $618 = (($617) + -51403784)|0;
  $619 = (($579) + ($618))|0;
  $620 = $619 << 9;
  $621 = $619 >>> 23;
  $622 = $620 | $621;
  $623 = (($622) + ($612))|0;
  $624 = $623 ^ $612;
  $625 = $601 & $624;
  $626 = $612 ^ $625;
  $627 = HEAP32[$15>>2]|0;
  $628 = (($626) + ($627))|0;
  $629 = (($628) + 1735328473)|0;
  $630 = (($590) + ($629))|0;
  $631 = $630 << 14;
  $632 = $630 >>> 18;
  $633 = $631 | $632;
  $634 = (($633) + ($623))|0;
  $635 = $634 ^ $623;
  $636 = $612 & $635;
  $637 = $623 ^ $636;
  $638 = HEAP32[$20>>2]|0;
  $639 = (($637) + ($638))|0;
  $640 = (($639) + -1926607734)|0;
  $641 = (($601) + ($640))|0;
  $642 = $641 << 20;
  $643 = $641 >>> 12;
  $644 = $642 | $643;
  $645 = (($644) + ($634))|0;
  $646 = $645 ^ $634;
  $647 = $646 ^ $623;
  $648 = HEAP32[$13>>2]|0;
  $649 = (($647) + ($648))|0;
  $650 = (($649) + -378558)|0;
  $651 = (($612) + ($650))|0;
  $652 = $651 << 4;
  $653 = $651 >>> 28;
  $654 = $652 | $653;
  $655 = (($654) + ($645))|0;
  $656 = $655 ^ $646;
  $657 = (($656) + ($594))|0;
  $658 = (($657) + -2022574463)|0;
  $659 = (($623) + ($658))|0;
  $660 = $659 << 11;
  $661 = $659 >>> 21;
  $662 = $660 | $661;
  $663 = (($662) + ($655))|0;
  $664 = $663 ^ $655;
  $665 = $664 ^ $645;
  $666 = HEAP32[$19>>2]|0;
  $667 = (($665) + ($666))|0;
  $668 = (($667) + 1839030562)|0;
  $669 = (($634) + ($668))|0;
  $670 = $669 << 16;
  $671 = $669 >>> 16;
  $672 = $670 | $671;
  $673 = (($672) + ($663))|0;
  $674 = $673 ^ $664;
  $675 = HEAP32[$22>>2]|0;
  $676 = (($674) + ($675))|0;
  $677 = (($676) + -35309556)|0;
  $678 = (($645) + ($677))|0;
  $679 = $678 << 23;
  $680 = $678 >>> 9;
  $681 = $679 | $680;
  $682 = (($681) + ($673))|0;
  $683 = $682 ^ $673;
  $684 = $683 ^ $663;
  $685 = HEAP32[$9>>2]|0;
  $686 = (($684) + ($685))|0;
  $687 = (($686) + -1530992060)|0;
  $688 = (($655) + ($687))|0;
  $689 = $688 << 4;
  $690 = $688 >>> 28;
  $691 = $689 | $690;
  $692 = (($691) + ($682))|0;
  $693 = $692 ^ $683;
  $694 = HEAP32[$12>>2]|0;
  $695 = (($693) + ($694))|0;
  $696 = (($695) + 1272893353)|0;
  $697 = (($663) + ($696))|0;
  $698 = $697 << 11;
  $699 = $697 >>> 21;
  $700 = $698 | $699;
  $701 = (($700) + ($692))|0;
  $702 = $701 ^ $692;
  $703 = $702 ^ $682;
  $704 = (($703) + ($627))|0;
  $705 = (($704) + -155497632)|0;
  $706 = (($673) + ($705))|0;
  $707 = $706 << 16;
  $708 = $706 >>> 16;
  $709 = $707 | $708;
  $710 = (($709) + ($701))|0;
  $711 = $710 ^ $702;
  $712 = HEAP32[$18>>2]|0;
  $713 = (($711) + ($712))|0;
  $714 = (($713) + -1094730640)|0;
  $715 = (($682) + ($714))|0;
  $716 = $715 << 23;
  $717 = $715 >>> 9;
  $718 = $716 | $717;
  $719 = (($718) + ($710))|0;
  $720 = $719 ^ $710;
  $721 = $720 ^ $701;
  $722 = HEAP32[$21>>2]|0;
  $723 = (($721) + ($722))|0;
  $724 = (($723) + 681279174)|0;
  $725 = (($692) + ($724))|0;
  $726 = $725 << 4;
  $727 = $725 >>> 28;
  $728 = $726 | $727;
  $729 = (($728) + ($719))|0;
  $730 = $729 ^ $720;
  $731 = HEAP32[$8>>2]|0;
  $732 = (($730) + ($731))|0;
  $733 = (($732) + -358537222)|0;
  $734 = (($701) + ($733))|0;
  $735 = $734 << 11;
  $736 = $734 >>> 21;
  $737 = $735 | $736;
  $738 = (($737) + ($729))|0;
  $739 = $738 ^ $729;
  $740 = $739 ^ $719;
  $741 = HEAP32[$11>>2]|0;
  $742 = (($740) + ($741))|0;
  $743 = (($742) + -722521979)|0;
  $744 = (($710) + ($743))|0;
  $745 = $744 << 16;
  $746 = $744 >>> 16;
  $747 = $745 | $746;
  $748 = (($747) + ($738))|0;
  $749 = $748 ^ $739;
  $750 = HEAP32[$14>>2]|0;
  $751 = (($749) + ($750))|0;
  $752 = (($751) + 76029189)|0;
  $753 = (($719) + ($752))|0;
  $754 = $753 << 23;
  $755 = $753 >>> 9;
  $756 = $754 | $755;
  $757 = (($756) + ($748))|0;
  $758 = $757 ^ $748;
  $759 = $758 ^ $738;
  $760 = HEAP32[$17>>2]|0;
  $761 = (($759) + ($760))|0;
  $762 = (($761) + -640364487)|0;
  $763 = (($729) + ($762))|0;
  $764 = $763 << 4;
  $765 = $763 >>> 28;
  $766 = $764 | $765;
  $767 = (($766) + ($757))|0;
  $768 = $767 ^ $758;
  $769 = HEAP32[$20>>2]|0;
  $770 = (($768) + ($769))|0;
  $771 = (($770) + -421815835)|0;
  $772 = (($738) + ($771))|0;
  $773 = $772 << 11;
  $774 = $772 >>> 21;
  $775 = $773 | $774;
  $776 = (($775) + ($767))|0;
  $777 = $776 ^ $767;
  $778 = $777 ^ $757;
  $779 = HEAP32[$23>>2]|0;
  $780 = (($778) + ($779))|0;
  $781 = (($780) + 530742520)|0;
  $782 = (($748) + ($781))|0;
  $783 = $782 << 16;
  $784 = $782 >>> 16;
  $785 = $783 | $784;
  $786 = (($785) + ($776))|0;
  $787 = $786 ^ $777;
  $788 = HEAP32[$10>>2]|0;
  $789 = (($787) + ($788))|0;
  $790 = (($789) + -995338651)|0;
  $791 = (($757) + ($790))|0;
  $792 = $791 << 23;
  $793 = $791 >>> 9;
  $794 = $792 | $793;
  $795 = (($794) + ($786))|0;
  $796 = $776 ^ -1;
  $797 = $795 | $796;
  $798 = $786 ^ $797;
  $799 = (($798) + ($731))|0;
  $800 = (($799) + -198630844)|0;
  $801 = (($767) + ($800))|0;
  $802 = $801 << 6;
  $803 = $801 >>> 26;
  $804 = $802 | $803;
  $805 = (($804) + ($795))|0;
  $806 = $786 ^ -1;
  $807 = $805 | $806;
  $808 = $795 ^ $807;
  $809 = HEAP32[$15>>2]|0;
  $810 = (($808) + ($809))|0;
  $811 = (($810) + 1126891415)|0;
  $812 = (($776) + ($811))|0;
  $813 = $812 << 10;
  $814 = $812 >>> 22;
  $815 = $813 | $814;
  $816 = (($815) + ($805))|0;
  $817 = $795 ^ -1;
  $818 = $816 | $817;
  $819 = $805 ^ $818;
  $820 = HEAP32[$22>>2]|0;
  $821 = (($819) + ($820))|0;
  $822 = (($821) + -1416354905)|0;
  $823 = (($786) + ($822))|0;
  $824 = $823 << 15;
  $825 = $823 >>> 17;
  $826 = $824 | $825;
  $827 = (($826) + ($816))|0;
  $828 = $805 ^ -1;
  $829 = $827 | $828;
  $830 = $816 ^ $829;
  $831 = HEAP32[$13>>2]|0;
  $832 = (($830) + ($831))|0;
  $833 = (($832) + -57434055)|0;
  $834 = (($795) + ($833))|0;
  $835 = $834 << 21;
  $836 = $834 >>> 11;
  $837 = $835 | $836;
  $838 = (($837) + ($827))|0;
  $839 = $816 ^ -1;
  $840 = $838 | $839;
  $841 = $827 ^ $840;
  $842 = (($841) + ($769))|0;
  $843 = (($842) + 1700485571)|0;
  $844 = (($805) + ($843))|0;
  $845 = $844 << 6;
  $846 = $844 >>> 26;
  $847 = $845 | $846;
  $848 = (($847) + ($838))|0;
  $849 = $827 ^ -1;
  $850 = $848 | $849;
  $851 = $838 ^ $850;
  $852 = HEAP32[$11>>2]|0;
  $853 = (($851) + ($852))|0;
  $854 = (($853) + -1894986606)|0;
  $855 = (($816) + ($854))|0;
  $856 = $855 << 10;
  $857 = $855 >>> 22;
  $858 = $856 | $857;
  $859 = (($858) + ($848))|0;
  $860 = $838 ^ -1;
  $861 = $859 | $860;
  $862 = $848 ^ $861;
  $863 = HEAP32[$18>>2]|0;
  $864 = (($862) + ($863))|0;
  $865 = (($864) + -1051523)|0;
  $866 = (($827) + ($865))|0;
  $867 = $866 << 15;
  $868 = $866 >>> 17;
  $869 = $867 | $868;
  $870 = (($869) + ($859))|0;
  $871 = $848 ^ -1;
  $872 = $870 | $871;
  $873 = $859 ^ $872;
  $874 = HEAP32[$9>>2]|0;
  $875 = (($873) + ($874))|0;
  $876 = (($875) + -2054922799)|0;
  $877 = (($838) + ($876))|0;
  $878 = $877 << 21;
  $879 = $877 >>> 11;
  $880 = $878 | $879;
  $881 = (($880) + ($870))|0;
  $882 = $859 ^ -1;
  $883 = $881 | $882;
  $884 = $870 ^ $883;
  $885 = HEAP32[$16>>2]|0;
  $886 = (($884) + ($885))|0;
  $887 = (($886) + 1873313359)|0;
  $888 = (($848) + ($887))|0;
  $889 = $888 << 6;
  $890 = $888 >>> 26;
  $891 = $889 | $890;
  $892 = (($891) + ($881))|0;
  $893 = $870 ^ -1;
  $894 = $892 | $893;
  $895 = $881 ^ $894;
  $896 = HEAP32[$23>>2]|0;
  $897 = (($895) + ($896))|0;
  $898 = (($897) + -30611744)|0;
  $899 = (($859) + ($898))|0;
  $900 = $899 << 10;
  $901 = $899 >>> 22;
  $902 = $900 | $901;
  $903 = (($902) + ($892))|0;
  $904 = $881 ^ -1;
  $905 = $903 | $904;
  $906 = $892 ^ $905;
  $907 = HEAP32[$14>>2]|0;
  $908 = (($906) + ($907))|0;
  $909 = (($908) + -1560198380)|0;
  $910 = (($870) + ($909))|0;
  $911 = $910 << 15;
  $912 = $910 >>> 17;
  $913 = $911 | $912;
  $914 = (($913) + ($903))|0;
  $915 = $892 ^ -1;
  $916 = $914 | $915;
  $917 = $903 ^ $916;
  $918 = HEAP32[$21>>2]|0;
  $919 = (($917) + ($918))|0;
  $920 = (($919) + 1309151649)|0;
  $921 = (($881) + ($920))|0;
  $922 = $921 << 21;
  $923 = $921 >>> 11;
  $924 = $922 | $923;
  $925 = (($924) + ($914))|0;
  $926 = $903 ^ -1;
  $927 = $925 | $926;
  $928 = $914 ^ $927;
  $929 = HEAP32[$12>>2]|0;
  $930 = (($928) + ($929))|0;
  $931 = (($930) + -145523070)|0;
  $932 = (($892) + ($931))|0;
  $933 = $932 << 6;
  $934 = $932 >>> 26;
  $935 = $933 | $934;
  $936 = (($935) + ($925))|0;
  $937 = $914 ^ -1;
  $938 = $936 | $937;
  $939 = $925 ^ $938;
  $940 = HEAP32[$19>>2]|0;
  $941 = (($939) + ($940))|0;
  $942 = (($941) + -1120210379)|0;
  $943 = (($903) + ($942))|0;
  $944 = $943 << 10;
  $945 = $943 >>> 22;
  $946 = $944 | $945;
  $947 = (($946) + ($936))|0;
  $948 = $925 ^ -1;
  $949 = $947 | $948;
  $950 = $936 ^ $949;
  $951 = HEAP32[$10>>2]|0;
  $952 = (($950) + ($951))|0;
  $953 = (($952) + 718787259)|0;
  $954 = (($914) + ($953))|0;
  $955 = $954 << 15;
  $956 = $954 >>> 17;
  $957 = $955 | $956;
  $958 = (($957) + ($947))|0;
  $959 = $936 ^ -1;
  $960 = $958 | $959;
  $961 = $947 ^ $960;
  $962 = HEAP32[$17>>2]|0;
  $963 = (($961) + ($962))|0;
  $964 = (($963) + -343485551)|0;
  $965 = (($925) + ($964))|0;
  $966 = $965 << 21;
  $967 = $965 >>> 11;
  $968 = $966 | $967;
  $969 = (($968) + ($958))|0;
  $970 = (($936) + ($a$0))|0;
  $971 = (($969) + ($b$0))|0;
  $972 = (($958) + ($c$0))|0;
  $973 = (($947) + ($d$0))|0;
  $974 = ((($ptr$0)) + 64|0);
  $975 = (($$0) + -64)|0;
  $976 = ($975|0)==(0);
  if ($976) {
   break;
  } else {
   $$0 = $975;$a$0 = $970;$b$0 = $971;$c$0 = $972;$d$0 = $973;$ptr$0 = $974;
  }
 }
 HEAP32[$0>>2] = $970;
 HEAP32[$2>>2] = $971;
 HEAP32[$4>>2] = $972;
 HEAP32[$6>>2] = $973;
 return ($974|0);
}
function _hts_md5_final($result,$ctx) {
 $result = $result|0;
 $ctx = $ctx|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $available$0 = 0, $phitmp = 0, $used$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ctx>>2]|0;
 $1 = $0 & 63;
 $2 = (($1) + 1)|0;
 $3 = (((($ctx)) + 24|0) + ($1)|0);
 HEAP8[$3>>0] = -128;
 $4 = $1 ^ 63;
 $5 = ($4>>>0)<(8);
 if ($5) {
  $6 = (((($ctx)) + 24|0) + ($2)|0);
  _memset(($6|0),0,($4|0))|0;
  $7 = ((($ctx)) + 24|0);
  (_body($ctx,$7,64)|0);
  $$pre$phiZ2D = $7;$available$0 = 56;$used$0 = 0;
 } else {
  $$pre = ((($ctx)) + 24|0);
  $phitmp = (($4) + -8)|0;
  $$pre$phiZ2D = $$pre;$available$0 = $phitmp;$used$0 = $2;
 }
 $8 = (((($ctx)) + 24|0) + ($used$0)|0);
 _memset(($8|0),0,($available$0|0))|0;
 $9 = HEAP32[$ctx>>2]|0;
 $10 = $9 << 3;
 HEAP32[$ctx>>2] = $10;
 $11 = $10&255;
 $12 = ((($ctx)) + 80|0);
 HEAP8[$12>>0] = $11;
 $13 = $9 >>> 5;
 $14 = $13&255;
 $15 = ((($ctx)) + 81|0);
 HEAP8[$15>>0] = $14;
 $16 = $9 >>> 13;
 $17 = $16&255;
 $18 = ((($ctx)) + 82|0);
 HEAP8[$18>>0] = $17;
 $19 = $9 >>> 21;
 $20 = $19&255;
 $21 = ((($ctx)) + 83|0);
 HEAP8[$21>>0] = $20;
 $22 = ((($ctx)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23&255;
 $25 = ((($ctx)) + 84|0);
 HEAP8[$25>>0] = $24;
 $26 = $23 >>> 8;
 $27 = $26&255;
 $28 = ((($ctx)) + 85|0);
 HEAP8[$28>>0] = $27;
 $29 = $23 >>> 16;
 $30 = $29&255;
 $31 = ((($ctx)) + 86|0);
 HEAP8[$31>>0] = $30;
 $32 = $23 >>> 24;
 $33 = $32&255;
 $34 = ((($ctx)) + 87|0);
 HEAP8[$34>>0] = $33;
 (_body($ctx,$$pre$phiZ2D,64)|0);
 $35 = ((($ctx)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36&255;
 HEAP8[$result>>0] = $37;
 $38 = HEAP32[$35>>2]|0;
 $39 = $38 >>> 8;
 $40 = $39&255;
 $41 = ((($result)) + 1|0);
 HEAP8[$41>>0] = $40;
 $42 = HEAP32[$35>>2]|0;
 $43 = $42 >>> 16;
 $44 = $43&255;
 $45 = ((($result)) + 2|0);
 HEAP8[$45>>0] = $44;
 $46 = HEAP32[$35>>2]|0;
 $47 = $46 >>> 24;
 $48 = $47&255;
 $49 = ((($result)) + 3|0);
 HEAP8[$49>>0] = $48;
 $50 = ((($ctx)) + 12|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $51&255;
 $53 = ((($result)) + 4|0);
 HEAP8[$53>>0] = $52;
 $54 = HEAP32[$50>>2]|0;
 $55 = $54 >>> 8;
 $56 = $55&255;
 $57 = ((($result)) + 5|0);
 HEAP8[$57>>0] = $56;
 $58 = HEAP32[$50>>2]|0;
 $59 = $58 >>> 16;
 $60 = $59&255;
 $61 = ((($result)) + 6|0);
 HEAP8[$61>>0] = $60;
 $62 = HEAP32[$50>>2]|0;
 $63 = $62 >>> 24;
 $64 = $63&255;
 $65 = ((($result)) + 7|0);
 HEAP8[$65>>0] = $64;
 $66 = ((($ctx)) + 16|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $67&255;
 $69 = ((($result)) + 8|0);
 HEAP8[$69>>0] = $68;
 $70 = HEAP32[$66>>2]|0;
 $71 = $70 >>> 8;
 $72 = $71&255;
 $73 = ((($result)) + 9|0);
 HEAP8[$73>>0] = $72;
 $74 = HEAP32[$66>>2]|0;
 $75 = $74 >>> 16;
 $76 = $75&255;
 $77 = ((($result)) + 10|0);
 HEAP8[$77>>0] = $76;
 $78 = HEAP32[$66>>2]|0;
 $79 = $78 >>> 24;
 $80 = $79&255;
 $81 = ((($result)) + 11|0);
 HEAP8[$81>>0] = $80;
 $82 = ((($ctx)) + 20|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83&255;
 $85 = ((($result)) + 12|0);
 HEAP8[$85>>0] = $84;
 $86 = HEAP32[$82>>2]|0;
 $87 = $86 >>> 8;
 $88 = $87&255;
 $89 = ((($result)) + 13|0);
 HEAP8[$89>>0] = $88;
 $90 = HEAP32[$82>>2]|0;
 $91 = $90 >>> 16;
 $92 = $91&255;
 $93 = ((($result)) + 14|0);
 HEAP8[$93>>0] = $92;
 $94 = HEAP32[$82>>2]|0;
 $95 = $94 >>> 24;
 $96 = $95&255;
 $97 = ((($result)) + 15|0);
 HEAP8[$97>>0] = $96;
 _memset(($ctx|0),0,152)|0;
 return;
}
function _cram_external_decode_int($slice,$c,$in,$out,$out_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $out = $out|0;
 $out_size = $out_size|0;
 var $$0$i2 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$0$i = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($slice)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 $5 = ($1>>>0)<(1024);
 $6 = $5 & $4;
 L1: do {
  if ($6) {
   $23 = (($3) + ($1<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0|0);
   if ($25) {
    label = 9;
   } else {
    $$0$i2 = $24;
    label = 10;
   }
  } else {
   $7 = HEAP32[$slice>>2]|0;
   $8 = ((($7)) + 32|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($slice)) + 8|0);
   $i$0$i = 0;
   while(1) {
    $11 = ($i$0$i|0)<($9|0);
    if (!($11)) {
     label = 9;
     break L1;
    }
    $12 = HEAP32[$10>>2]|0;
    $13 = (($12) + ($i$0$i<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0|0);
    if (!($15)) {
     $16 = ((($14)) + 8|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($17|0)==(4);
     if ($18) {
      $19 = ((($14)) + 12|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($20|0)==($1|0);
      if ($21) {
       $$0$i2 = $14;
       label = 10;
       break L1;
      }
     }
    }
    $22 = (($i$0$i) + 1)|0;
    $i$0$i = $22;
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $26 = HEAP32[$out_size>>2]|0;
  $27 = ($26|0)!=(0);
  $$sink = $27;
  $39 = $$sink << 31 >> 31;
  return ($39|0);
 }
 else if ((label|0) == 10) {
  $28 = ((($$0$i2)) + 32|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($$0$i2)) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($29) + ($31)|0);
  $33 = ((($$0$i2)) + 20|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($29) + ($34)|0);
  $36 = (_safe_itf8_get_820($32,$35,$out)|0);
  $37 = HEAP32[$30>>2]|0;
  $38 = (($37) + ($36))|0;
  HEAP32[$30>>2] = $38;
  HEAP32[$out_size>>2] = 1;
  $not$ = ($36|0)<(1);
  $$sink = $not$;
  $39 = $$sink << 31 >> 31;
  return ($39|0);
 }
 return (0)|0;
}
function _safe_itf8_get_820($cp,$endp,$val_p) {
 $cp = $cp|0;
 $endp = $endp|0;
 $val_p = $val_p|0;
 var $$0 = 0, $$masked = 0, $$masked1 = 0, $$masked2 = 0, $$masked3 = 0, $$masked4 = 0, $$masked5 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $endp;
 $1 = $cp;
 $2 = (($0) - ($1))|0;
 $3 = ($2|0)<(5);
 do {
  if ($3) {
   $4 = ($cp>>>0)<($endp>>>0);
   if ($4) {
    $5 = HEAP8[$cp>>0]|0;
    $6 = $5&255;
    $7 = $6 >>> 4;
    $8 = (376 + ($7<<2)|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($2|0)<($9|0);
    if (!($10)) {
     $12 = $5;
     break;
    }
   }
   HEAP32[$val_p>>2] = 0;
   $$0 = 0;
   return ($$0|0);
  } else {
   $$pre = HEAP8[$cp>>0]|0;
   $12 = $$pre;
  }
 } while(0);
 $11 = ($12<<24>>24)>(-1);
 if ($11) {
  $13 = $12&255;
  HEAP32[$val_p>>2] = $13;
  $$0 = 1;
  return ($$0|0);
 }
 $14 = ($12&255)<(192);
 if ($14) {
  $15 = $12&255;
  $16 = $15 << 8;
  $17 = ((($cp)) + 1|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $$masked5 = $16 & 16128;
  $20 = $$masked5 | $19;
  HEAP32[$val_p>>2] = $20;
  $$0 = 2;
  return ($$0|0);
 }
 $21 = ($12&255)<(224);
 if ($21) {
  $22 = $12&255;
  $23 = $22 << 16;
  $24 = ((($cp)) + 1|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $26 << 8;
  $28 = ((($cp)) + 2|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $$masked4 = $23 & 2031616;
  $$masked3 = $$masked4 | $27;
  $31 = $$masked3 | $30;
  HEAP32[$val_p>>2] = $31;
  $$0 = 3;
  return ($$0|0);
 }
 $32 = ($12&255)<(240);
 $33 = $12&255;
 if ($32) {
  $34 = $33 << 24;
  $35 = ((($cp)) + 1|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = $37 << 16;
  $39 = ((($cp)) + 2|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $41 << 8;
  $43 = ((($cp)) + 3|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $$masked2 = $34 & 251658240;
  $$masked1 = $$masked2 | $38;
  $$masked = $$masked1 | $42;
  $46 = $$masked | $45;
  HEAP32[$val_p>>2] = $46;
  $$0 = 4;
  return ($$0|0);
 } else {
  $47 = $33 << 28;
  $48 = ((($cp)) + 1|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = $50 << 20;
  $52 = $47 | $51;
  $53 = ((($cp)) + 2|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = $55 << 12;
  $57 = $52 | $56;
  $58 = ((($cp)) + 3|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = $60 << 4;
  $62 = $57 | $61;
  $63 = ((($cp)) + 4|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = $65 & 15;
  $67 = $62 | $66;
  HEAP32[$val_p>>2] = $67;
  $$0 = 5;
  return ($$0|0);
 }
 return (0)|0;
}
function _cram_external_decode_char($slice,$c,$in,$out,$out_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $out = $out|0;
 $out_size = $out_size|0;
 var $$0 = 0, $$0$i3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($slice)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 $5 = ($1>>>0)<(1024);
 $6 = $5 & $4;
 L1: do {
  if ($6) {
   $23 = (($3) + ($1<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0|0);
   if ($25) {
    label = 9;
   } else {
    $$0$i3 = $24;
   }
  } else {
   $7 = HEAP32[$slice>>2]|0;
   $8 = ((($7)) + 32|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($slice)) + 8|0);
   $i$0$i = 0;
   while(1) {
    $11 = ($i$0$i|0)<($9|0);
    if (!($11)) {
     label = 9;
     break L1;
    }
    $12 = HEAP32[$10>>2]|0;
    $13 = (($12) + ($i$0$i<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0|0);
    if (!($15)) {
     $16 = ((($14)) + 8|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($17|0)==(4);
     if ($18) {
      $19 = ((($14)) + 12|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($20|0)==($1|0);
      if ($21) {
       $$0$i3 = $14;
       break L1;
      }
     }
    }
    $22 = (($i$0$i) + 1)|0;
    $i$0$i = $22;
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $26 = HEAP32[$out_size>>2]|0;
  $27 = ($26|0)!=(0);
  $28 = $27 << 31 >> 31;
  $$0 = $28;
  return ($$0|0);
 }
 $29 = HEAP32[$out_size>>2]|0;
 $30 = ((($$0$i3)) + 32|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($$0$i3)) + 28|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + ($29))|0;
 HEAP32[$32>>2] = $34;
 $35 = ((($$0$i3)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($34|0)>($36|0);
 if ($37) {
  $$0 = -1;
  return ($$0|0);
 }
 $38 = (($31) + ($33)|0);
 $39 = ($38|0)==(0|0);
 if ($39) {
  $$0 = -1;
  return ($$0|0);
 }
 $40 = ($out|0)==(0|0);
 if ($40) {
  $$0 = 0;
  return ($$0|0);
 }
 $41 = HEAP32[$out_size>>2]|0;
 _memcpy(($out|0),($38|0),($41|0))|0;
 $$0 = 0;
 return ($$0|0);
}
function _cram_external_decode_free($c) {
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(0|0);
 if (!($0)) {
  _free($c);
 }
 return;
}
function _cram_external_decode_init($data,$size,$option,$version) {
 $data = $data|0;
 $size = $size|0;
 $option = $option|0;
 $version = $version|0;
 var $$0 = 0, $$masked = 0, $$masked1 = 0, $$masked2 = 0, $$masked3 = 0, $$masked4 = 0, $$masked5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_malloc(548)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$0>>2] = 1;
 switch ($option|0) {
 case 2: case 1:  {
  $2 = ((($0)) + 12|0);
  HEAP32[$2>>2] = 73;
  break;
 }
 case 3: case 4:  {
  $3 = ((($0)) + 12|0);
  HEAP32[$3>>2] = 74;
  break;
 }
 default: {
  $4 = ((($0)) + 12|0);
  HEAP32[$4>>2] = 75;
 }
 }
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = 76;
 $6 = HEAP8[$data>>0]|0;
 $7 = ($6<<24>>24)>(-1);
 do {
  if ($7) {
   $8 = $6&255;
   $9 = ((($0)) + 24|0);
   HEAP32[$9>>2] = $8;
   $69 = 1;
  } else {
   $10 = ($6&255)<(192);
   if ($10) {
    $11 = $6&255;
    $12 = $11 << 8;
    $13 = ((($data)) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = $14&255;
    $$masked5 = $12 & 16128;
    $16 = $$masked5 | $15;
    $17 = ((($0)) + 24|0);
    HEAP32[$17>>2] = $16;
    $69 = 2;
    break;
   }
   $18 = ($6&255)<(224);
   if ($18) {
    $19 = $6&255;
    $20 = $19 << 16;
    $21 = ((($data)) + 1|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = $22&255;
    $24 = $23 << 8;
    $25 = ((($data)) + 2|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = $26&255;
    $$masked4 = $20 & 2031616;
    $$masked3 = $$masked4 | $24;
    $28 = $$masked3 | $27;
    $29 = ((($0)) + 24|0);
    HEAP32[$29>>2] = $28;
    $69 = 3;
    break;
   }
   $30 = ($6&255)<(240);
   $31 = $6&255;
   if ($30) {
    $32 = $31 << 24;
    $33 = ((($data)) + 1|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = $34&255;
    $36 = $35 << 16;
    $37 = ((($data)) + 2|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38&255;
    $40 = $39 << 8;
    $41 = ((($data)) + 3|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $$masked2 = $32 & 251658240;
    $$masked1 = $$masked2 | $36;
    $$masked = $$masked1 | $40;
    $44 = $$masked | $43;
    $45 = ((($0)) + 24|0);
    HEAP32[$45>>2] = $44;
    $69 = 4;
    break;
   } else {
    $46 = $31 << 28;
    $47 = ((($data)) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48&255;
    $50 = $49 << 20;
    $51 = $46 | $50;
    $52 = ((($data)) + 2|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = $54 << 12;
    $56 = $51 | $55;
    $57 = ((($data)) + 3|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = $58&255;
    $60 = $59 << 4;
    $61 = $56 | $60;
    $62 = ((($data)) + 4|0);
    $63 = HEAP8[$62>>0]|0;
    $64 = $63&255;
    $65 = $64 & 15;
    $66 = $61 | $65;
    $67 = ((($0)) + 24|0);
    HEAP32[$67>>2] = $66;
    $69 = 5;
    break;
   }
  }
 } while(0);
 $68 = ($69|0)==($size|0);
 if ($68) {
  $70 = ((($0)) + 28|0);
  HEAP32[$70>>2] = $option;
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 } else {
  _fprintf(9772,22134,$vararg_buffer);
  _free($0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _cram_external_decode_block($slice,$c,$in,$out_,$out_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $out_ = $out_|0;
 $out_size = $out_size|0;
 var $$0 = 0, $$0$i3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($slice)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 $5 = ($1>>>0)<(1024);
 $6 = $5 & $4;
 L1: do {
  if ($6) {
   $23 = (($3) + ($1<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0|0);
   if ($25) {
    label = 9;
   } else {
    $$0$i3 = $24;
   }
  } else {
   $7 = HEAP32[$slice>>2]|0;
   $8 = ((($7)) + 32|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($slice)) + 8|0);
   $i$0$i = 0;
   while(1) {
    $11 = ($i$0$i|0)<($9|0);
    if (!($11)) {
     label = 9;
     break L1;
    }
    $12 = HEAP32[$10>>2]|0;
    $13 = (($12) + ($i$0$i<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0|0);
    if (!($15)) {
     $16 = ((($14)) + 8|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($17|0)==(4);
     if ($18) {
      $19 = ((($14)) + 12|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($20|0)==($1|0);
      if ($21) {
       $$0$i3 = $14;
       break L1;
      }
     }
    }
    $22 = (($i$0$i) + 1)|0;
    $i$0$i = $22;
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $26 = HEAP32[$out_size>>2]|0;
  $27 = ($26|0)!=(0);
  $28 = $27 << 31 >> 31;
  $$0 = $28;
  return ($$0|0);
 }
 $29 = HEAP32[$out_size>>2]|0;
 $30 = ((($$0$i3)) + 32|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($$0$i3)) + 28|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + ($29))|0;
 HEAP32[$32>>2] = $34;
 $35 = ((($$0$i3)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($34|0)>($36|0);
 if ($37) {
  $$0 = -1;
  return ($$0|0);
 }
 $38 = (($31) + ($33)|0);
 $39 = ($38|0)==(0|0);
 if ($39) {
  $$0 = -1;
  return ($$0|0);
 }
 $40 = ((($out_)) + 36|0);
 $41 = ((($out_)) + 40|0);
 $42 = ((($out_)) + 32|0);
 while(1) {
  $43 = HEAP32[$40>>2]|0;
  $44 = HEAP32[$41>>2]|0;
  $45 = HEAP32[$out_size>>2]|0;
  $46 = (($44) + ($45))|0;
  $47 = ($43>>>0)>($46>>>0);
  if ($47) {
   break;
  }
  $48 = ($43|0)==(0);
  $49 = (+($43>>>0));
  $50 = $49 * 1.5;
  $51 = (~~(($50))>>>0);
  $52 = $48 ? 1024 : $51;
  HEAP32[$40>>2] = $52;
  $53 = HEAP32[$42>>2]|0;
  $54 = (_realloc($53,$52)|0);
  HEAP32[$42>>2] = $54;
 }
 $55 = HEAP32[$42>>2]|0;
 $56 = (($55) + ($44)|0);
 _memcpy(($56|0),($38|0),($45|0))|0;
 $57 = HEAP32[$out_size>>2]|0;
 $58 = HEAP32[$41>>2]|0;
 $59 = (($58) + ($57))|0;
 HEAP32[$41>>2] = $59;
 $$0 = 0;
 return ($$0|0);
}
function _cram_external_encode_int($slice,$c,$in,$in_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $in_size = $in_size|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$in>>2]|0;
 (_itf8_put_blk($1,$2)|0);
 return 0;
}
function _cram_external_encode_char($slice,$c,$in,$in_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $in_size = $in_size|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 4|0);
 while(1) {
  $1 = HEAP32[$0>>2]|0;
  $2 = ((($1)) + 36|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ((($1)) + 40|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($in_size))|0;
  $7 = ($3>>>0)>($6>>>0);
  if ($7) {
   break;
  }
  $8 = ($3|0)==(0);
  $9 = (+($3>>>0));
  $10 = $9 * 1.5;
  $11 = (~~(($10))>>>0);
  $12 = $8 ? 1024 : $11;
  HEAP32[$2>>2] = $12;
  $13 = HEAP32[$0>>2]|0;
  $14 = ((($13)) + 32|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($13)) + 36|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_realloc($15,$17)|0);
  $19 = HEAP32[$0>>2]|0;
  $20 = ((($19)) + 32|0);
  HEAP32[$20>>2] = $18;
 }
 $21 = ((($1)) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + ($5)|0);
 _memcpy(($23|0),($in|0),($in_size|0))|0;
 $24 = HEAP32[$0>>2]|0;
 $25 = ((($24)) + 40|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($in_size))|0;
 HEAP32[$25>>2] = $27;
 return 0;
}
function _cram_external_encode_free($c) {
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(0|0);
 if (!($0)) {
  _free($c);
 }
 return;
}
function _cram_external_encode_store($c,$b,$prefix,$version) {
 $c = $c|0;
 $b = $b|0;
 $prefix = $prefix|0;
 $version = $version|0;
 var $$0$i = 0, $$01$lcssa$i = 0, $$014$i = 0, $$1$lcssa$i = 0, $$pn$i = 0, $$pn15$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $len$0 = 0;
 var $tmp = 0, $w$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 $0 = ($prefix|0)==(0|0);
 if ($0) {
  $len$0 = 0;
 } else {
  $1 = $prefix;
  $2 = $1 & 3;
  $3 = ($2|0)==(0);
  L3: do {
   if ($3) {
    $$01$lcssa$i = $prefix;
    label = 5;
   } else {
    $$014$i = $prefix;$111 = $1;
    while(1) {
     $4 = HEAP8[$$014$i>>0]|0;
     $5 = ($4<<24>>24)==(0);
     if ($5) {
      $$pn$i = $111;
      break L3;
     }
     $6 = ((($$014$i)) + 1|0);
     $7 = $6;
     $8 = $7 & 3;
     $9 = ($8|0)==(0);
     if ($9) {
      $$01$lcssa$i = $6;
      label = 5;
      break;
     } else {
      $$014$i = $6;$111 = $7;
     }
    }
   }
  } while(0);
  if ((label|0) == 5) {
   $w$0$i = $$01$lcssa$i;
   while(1) {
    $10 = HEAP32[$w$0$i>>2]|0;
    $11 = (($10) + -16843009)|0;
    $12 = $10 & -2139062144;
    $13 = $12 ^ -2139062144;
    $14 = $13 & $11;
    $15 = ($14|0)==(0);
    $16 = ((($w$0$i)) + 4|0);
    if ($15) {
     $w$0$i = $16;
    } else {
     break;
    }
   }
   $17 = $10&255;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $$1$lcssa$i = $w$0$i;
   } else {
    $$pn15$i = $w$0$i;
    while(1) {
     $19 = ((($$pn15$i)) + 1|0);
     $$pre$i = HEAP8[$19>>0]|0;
     $20 = ($$pre$i<<24>>24)==(0);
     if ($20) {
      $$1$lcssa$i = $19;
      break;
     } else {
      $$pn15$i = $19;
     }
    }
   }
   $21 = $$1$lcssa$i;
   $$pn$i = $21;
  }
  $$0$i = (($$pn$i) - ($1))|0;
  $22 = ((($b)) + 36|0);
  $23 = ((($b)) + 40|0);
  $24 = ((($b)) + 32|0);
  while(1) {
   $25 = HEAP32[$22>>2]|0;
   $26 = HEAP32[$23>>2]|0;
   $27 = (($26) + ($$0$i))|0;
   $28 = ($25>>>0)>($27>>>0);
   if ($28) {
    break;
   }
   $29 = ($25|0)==(0);
   $30 = (+($25>>>0));
   $31 = $30 * 1.5;
   $32 = (~~(($31))>>>0);
   $33 = $29 ? 1024 : $32;
   HEAP32[$22>>2] = $33;
   $34 = HEAP32[$24>>2]|0;
   $35 = (_realloc($34,$33)|0);
   HEAP32[$24>>2] = $35;
  }
  $36 = HEAP32[$24>>2]|0;
  $37 = (($36) + ($26)|0);
  _memcpy(($37|0),($prefix|0),($$0$i|0))|0;
  $38 = HEAP32[$23>>2]|0;
  $39 = (($38) + ($$0$i))|0;
  HEAP32[$23>>2] = $39;
  $len$0 = $$0$i;
 }
 $40 = ((($c)) + 24|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41>>>0)>(127);
 do {
  if ($42) {
   $44 = ($41>>>0)>(16383);
   if (!($44)) {
    $45 = $41 >>> 8;
    $46 = $45 | 128;
    $47 = $46&255;
    HEAP8[$tmp>>0] = $47;
    $48 = $41&255;
    $49 = ((($tmp)) + 1|0);
    HEAP8[$49>>0] = $48;
    $88 = 2;
    break;
   }
   $50 = ($41>>>0)>(2097151);
   if (!($50)) {
    $51 = $41 >>> 16;
    $52 = $51 | 192;
    $53 = $52&255;
    HEAP8[$tmp>>0] = $53;
    $54 = $41 >>> 8;
    $55 = $54&255;
    $56 = ((($tmp)) + 1|0);
    HEAP8[$56>>0] = $55;
    $57 = $41&255;
    $58 = ((($tmp)) + 2|0);
    HEAP8[$58>>0] = $57;
    $88 = 3;
    break;
   }
   $59 = ($41>>>0)>(268435455);
   if ($59) {
    $71 = $41 >>> 28;
    $72 = $71 | 240;
    $73 = $72&255;
    HEAP8[$tmp>>0] = $73;
    $74 = $41 >>> 20;
    $75 = $74&255;
    $76 = ((($tmp)) + 1|0);
    HEAP8[$76>>0] = $75;
    $77 = $41 >>> 12;
    $78 = $77&255;
    $79 = ((($tmp)) + 2|0);
    HEAP8[$79>>0] = $78;
    $80 = $41 >>> 4;
    $81 = $80&255;
    $82 = ((($tmp)) + 3|0);
    HEAP8[$82>>0] = $81;
    $83 = $41 & 15;
    $84 = $83&255;
    $85 = ((($tmp)) + 4|0);
    HEAP8[$85>>0] = $84;
    $88 = 5;
    break;
   } else {
    $60 = $41 >>> 24;
    $61 = $60 | 224;
    $62 = $61&255;
    HEAP8[$tmp>>0] = $62;
    $63 = $41 >>> 16;
    $64 = $63&255;
    $65 = ((($tmp)) + 1|0);
    HEAP8[$65>>0] = $64;
    $66 = $41 >>> 8;
    $67 = $66&255;
    $68 = ((($tmp)) + 2|0);
    HEAP8[$68>>0] = $67;
    $69 = $41&255;
    $70 = ((($tmp)) + 3|0);
    HEAP8[$70>>0] = $69;
    $88 = 4;
    break;
   }
  } else {
   $43 = $41&255;
   HEAP8[$tmp>>0] = $43;
   $88 = 1;
  }
 } while(0);
 $86 = HEAP32[$c>>2]|0;
 $87 = (_itf8_put_blk($b,$86)|0);
 $89 = (_itf8_put_blk($b,$88)|0);
 $90 = ((($b)) + 36|0);
 $91 = ((($b)) + 40|0);
 $92 = ((($b)) + 32|0);
 while(1) {
  $93 = HEAP32[$90>>2]|0;
  $94 = HEAP32[$91>>2]|0;
  $95 = (($94) + ($88))|0;
  $96 = ($93>>>0)>($95>>>0);
  if ($96) {
   break;
  }
  $97 = ($93|0)==(0);
  $98 = (+($93>>>0));
  $99 = $98 * 1.5;
  $100 = (~~(($99))>>>0);
  $101 = $97 ? 1024 : $100;
  HEAP32[$90>>2] = $101;
  $102 = HEAP32[$92>>2]|0;
  $103 = (_realloc($102,$101)|0);
  HEAP32[$92>>2] = $103;
 }
 $104 = (($len$0) + ($87))|0;
 $105 = (($104) + ($89))|0;
 $106 = HEAP32[$92>>2]|0;
 $107 = (($106) + ($94)|0);
 _memcpy(($107|0),($tmp|0),($88|0))|0;
 $108 = HEAP32[$91>>2]|0;
 $109 = (($108) + ($88))|0;
 HEAP32[$91>>2] = $109;
 $110 = (($105) + ($88))|0;
 STACKTOP = sp;return ($110|0);
}
function _cram_external_encode_init($st,$option,$dat,$version) {
 $st = $st|0;
 $option = $option|0;
 $dat = $dat|0;
 $version = $version|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(548)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 1;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 70;
 switch ($option|0) {
 case 2: case 1:  {
  $3 = ((($0)) + 16|0);
  HEAP32[$3>>2] = 77;
  break;
 }
 case 3: case 4:  {
  $4 = ((($0)) + 16|0);
  HEAP32[$4>>2] = 71;
  break;
 }
 default: {
  _abort();
  // unreachable;
 }
 }
 $5 = ((($0)) + 20|0);
 HEAP32[$5>>2] = 72;
 $6 = $dat;
 $7 = ((($0)) + 24|0);
 HEAP32[$7>>2] = $6;
 $$0 = $0;
 return ($$0|0);
}
function _cram_beta_decode_int($slice,$c,$in,$out,$out_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $out = $out|0;
 $out_size = $out_size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $27 = HEAP32[$out_size>>2]|0;
  $28 = ((($c)) + 24|0);
  $i$1 = 0;
  while(1) {
   $29 = ($i$1|0)<($27|0);
   if (!($29)) {
    $$0 = 0;
    break;
   }
   $30 = HEAP32[$28>>2]|0;
   $31 = (0 - ($30))|0;
   $32 = (($out) + ($i$1<<2)|0);
   HEAP32[$32>>2] = $31;
   $33 = (($i$1) + 1)|0;
   $i$1 = $33;
  }
  return ($$0|0);
 }
 $3 = ($1|0)<(0);
 if ($3) {
  $$0 = -1;
  return ($$0|0);
 }
 $4 = ((($in)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($in)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)<=($5>>>0);
 $9 = ($1|0)>(0);
 $or$cond = $8 & $9;
 if ($or$cond) {
  $$0 = -1;
  return ($$0|0);
 }
 $10 = (($7) - ($5))|0;
 $11 = ($10>>>0)<(268435457);
 if ($11) {
  $12 = $10 << 3;
  $13 = ((($in)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + ($14))|0;
  $16 = (($15) + -7)|0;
  $17 = ($16>>>0)<($1>>>0);
  if ($17) {
   $$0 = -1;
   return ($$0|0);
  }
 }
 $18 = HEAP32[$out_size>>2]|0;
 $19 = ((($c)) + 24|0);
 $i$0 = 0;
 while(1) {
  $20 = ($i$0|0)<($18|0);
  if (!($20)) {
   $$0 = 0;
   break;
  }
  $21 = HEAP32[$0>>2]|0;
  $22 = (_get_bits_MSB($in,$21)|0);
  $23 = HEAP32[$19>>2]|0;
  $24 = (($22) - ($23))|0;
  $25 = (($out) + ($i$0<<2)|0);
  HEAP32[$25>>2] = $24;
  $26 = (($i$0) + 1)|0;
  $i$0 = $26;
 }
 return ($$0|0);
}
function _get_bits_MSB($block,$nbits) {
 $block = $block|0;
 $nbits = $nbits|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert10 = 0, $$phi$trans$insert12 = 0, $$phi$trans$insert15 = 0, $$phi$trans$insert17 = 0, $$phi$trans$insert20 = 0, $$phi$trans$insert22 = 0, $$phi$trans$insert25 = 0, $$phi$trans$insert27 = 0, $$phi$trans$insert30 = 0, $$phi$trans$insert32 = 0, $$phi$trans$insert35 = 0, $$phi$trans$insert37 = 0, $$phi$trans$insert7 = 0, $$pre = 0, $$pre$phi40Z2D = 0, $$pre$phi42Z2D = 0, $$pre$phi44Z2D = 0, $$pre$phi46Z2D = 0;
 var $$pre$phi48Z2D = 0, $$pre$phi50Z2D = 0, $$pre$phiZ2D = 0, $$pre11 = 0, $$pre13 = 0, $$pre16 = 0, $$pre18 = 0, $$pre21 = 0, $$pre23 = 0, $$pre26 = 0, $$pre28 = 0, $$pre31 = 0, $$pre33 = 0, $$pre36 = 0, $$pre38 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$0 = 0, $phitmp = 0, $phitmp1 = 0, $phitmp2 = 0, $phitmp3 = 0, $phitmp4 = 0, $phitmp5 = 0, $phitmp6 = 0, $val$0 = 0, $val$1 = 0, $val$2 = 0, $val$3 = 0, $val$4 = 0;
 var $val$5 = 0, $val$6 = 0, $val$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($block)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = ($2|0)<($nbits|0);
 if (!($3)) {
  $4 = ((($block)) + 40|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($block)) + 32|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($5)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = (($nbits) + -1)|0;
  $12 = (($1) - ($11))|0;
  $13 = $10 >>> $12;
  $14 = 1 << $nbits;
  $15 = (($14) + -1)|0;
  $16 = $13 & $15;
  $17 = (($1) - ($nbits))|0;
  HEAP32[$0>>2] = $17;
  $18 = ($17|0)==(-1);
  if (!($18)) {
   $$0 = $16;
   return ($$0|0);
  }
  HEAP32[$0>>2] = 7;
  $19 = (($5) + 1)|0;
  HEAP32[$4>>2] = $19;
  $$0 = $16;
  return ($$0|0);
 }
 switch ($nbits|0) {
 case 8:  {
  $22 = ((($block)) + 40|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($block)) + 32|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($23)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = $28 >>> $1;
  $30 = (($1) + 7)|0;
  $31 = ($1|0)<(1);
  $32 = $31&1;
  $33 = (($23) + ($32))|0;
  HEAP32[$22>>2] = $33;
  $34 = $30 & 7;
  HEAP32[$0>>2] = $34;
  $35 = $29 << 1;
  $phitmp6 = $35 & 2;
  $$pre$phiZ2D = $22;$37 = $25;$38 = $33;$42 = $34;$val$0 = $phitmp6;
  label = 14;
  break;
 }
 case 7:  {
  $$phi$trans$insert = ((($block)) + 40|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$phi$trans$insert7 = ((($block)) + 32|0);
  $$pre8 = HEAP32[$$phi$trans$insert7>>2]|0;
  $$pre$phiZ2D = $$phi$trans$insert;$37 = $$pre8;$38 = $$pre;$42 = $1;$val$0 = 0;
  label = 14;
  break;
 }
 case 6:  {
  $$phi$trans$insert10 = ((($block)) + 40|0);
  $$pre11 = HEAP32[$$phi$trans$insert10>>2]|0;
  $$phi$trans$insert12 = ((($block)) + 32|0);
  $$pre13 = HEAP32[$$phi$trans$insert12>>2]|0;
  $$pre$phi40Z2D = $$phi$trans$insert10;$51 = $$pre13;$52 = $$pre11;$56 = $1;$val$1 = 0;
  label = 15;
  break;
 }
 case 5:  {
  $$phi$trans$insert15 = ((($block)) + 40|0);
  $$pre16 = HEAP32[$$phi$trans$insert15>>2]|0;
  $$phi$trans$insert17 = ((($block)) + 32|0);
  $$pre18 = HEAP32[$$phi$trans$insert17>>2]|0;
  $$pre$phi42Z2D = $$phi$trans$insert15;$65 = $$pre18;$66 = $$pre16;$70 = $1;$val$2 = 0;
  label = 16;
  break;
 }
 case 4:  {
  $$phi$trans$insert20 = ((($block)) + 40|0);
  $$pre21 = HEAP32[$$phi$trans$insert20>>2]|0;
  $$phi$trans$insert22 = ((($block)) + 32|0);
  $$pre23 = HEAP32[$$phi$trans$insert22>>2]|0;
  $$pre$phi44Z2D = $$phi$trans$insert20;$79 = $$pre23;$80 = $$pre21;$84 = $1;$val$3 = 0;
  label = 17;
  break;
 }
 case 3:  {
  $$phi$trans$insert25 = ((($block)) + 40|0);
  $$pre26 = HEAP32[$$phi$trans$insert25>>2]|0;
  $$phi$trans$insert27 = ((($block)) + 32|0);
  $$pre28 = HEAP32[$$phi$trans$insert27>>2]|0;
  $$pre$phi46Z2D = $$phi$trans$insert25;$93 = $$pre28;$94 = $$pre26;$98 = $1;$val$4 = 0;
  label = 18;
  break;
 }
 case 2:  {
  $$phi$trans$insert30 = ((($block)) + 40|0);
  $$pre31 = HEAP32[$$phi$trans$insert30>>2]|0;
  $$phi$trans$insert32 = ((($block)) + 32|0);
  $$pre33 = HEAP32[$$phi$trans$insert32>>2]|0;
  $$pre$phi48Z2D = $$phi$trans$insert30;$107 = $$pre33;$108 = $$pre31;$112 = $1;$val$5 = 0;
  label = 19;
  break;
 }
 case 1:  {
  $$phi$trans$insert35 = ((($block)) + 40|0);
  $$pre36 = HEAP32[$$phi$trans$insert35>>2]|0;
  $$phi$trans$insert37 = ((($block)) + 32|0);
  $$pre38 = HEAP32[$$phi$trans$insert37>>2]|0;
  $$pre$phi50Z2D = $$phi$trans$insert35;$121 = $$pre38;$122 = $$pre36;$126 = $1;$val$6 = 0;
  break;
 }
 default: {
  $20 = ((($block)) + 40|0);
  $21 = ((($block)) + 32|0);
  $140 = $1;$i$0 = 0;$val$7 = 0;
  while(1) {
   $134 = ($i$0|0)<($nbits|0);
   if (!($134)) {
    $$0 = $val$7;
    break;
   }
   $135 = HEAP32[$20>>2]|0;
   $136 = HEAP32[$21>>2]|0;
   $137 = (($136) + ($135)|0);
   $138 = HEAP8[$137>>0]|0;
   $139 = (($140) + 7)|0;
   $141 = ($140|0)<(1);
   $142 = $141&1;
   $143 = (($135) + ($142))|0;
   HEAP32[$20>>2] = $143;
   $144 = $139 & 7;
   HEAP32[$0>>2] = $144;
   $145 = $val$7 << 1;
   $146 = $138&255;
   $147 = $146 >>> $140;
   $148 = $147 & 1;
   $149 = $145 | $148;
   $150 = (($i$0) + 1)|0;
   $140 = $144;$i$0 = $150;$val$7 = $149;
  }
  return ($$0|0);
 }
 }
 if ((label|0) == 14) {
  $36 = (($37) + ($38)|0);
  $39 = HEAP8[$36>>0]|0;
  $40 = $39&255;
  $41 = $40 >>> $42;
  $43 = $41 & 1;
  $44 = $val$0 | $43;
  $45 = (($42) + 7)|0;
  $46 = ($42|0)<(1);
  $47 = $46&1;
  $48 = (($38) + ($47))|0;
  HEAP32[$$pre$phiZ2D>>2] = $48;
  $49 = $45 & 7;
  HEAP32[$0>>2] = $49;
  $phitmp5 = $44 << 1;
  $$pre$phi40Z2D = $$pre$phiZ2D;$51 = $37;$52 = $48;$56 = $49;$val$1 = $phitmp5;
  label = 15;
 }
 if ((label|0) == 15) {
  $50 = (($51) + ($52)|0);
  $53 = HEAP8[$50>>0]|0;
  $54 = $53&255;
  $55 = $54 >>> $56;
  $57 = $55 & 1;
  $58 = $val$1 | $57;
  $59 = (($56) + 7)|0;
  $60 = ($56|0)<(1);
  $61 = $60&1;
  $62 = (($52) + ($61))|0;
  HEAP32[$$pre$phi40Z2D>>2] = $62;
  $63 = $59 & 7;
  HEAP32[$0>>2] = $63;
  $phitmp4 = $58 << 1;
  $$pre$phi42Z2D = $$pre$phi40Z2D;$65 = $51;$66 = $62;$70 = $63;$val$2 = $phitmp4;
  label = 16;
 }
 if ((label|0) == 16) {
  $64 = (($65) + ($66)|0);
  $67 = HEAP8[$64>>0]|0;
  $68 = $67&255;
  $69 = $68 >>> $70;
  $71 = $69 & 1;
  $72 = $val$2 | $71;
  $73 = (($70) + 7)|0;
  $74 = ($70|0)<(1);
  $75 = $74&1;
  $76 = (($66) + ($75))|0;
  HEAP32[$$pre$phi42Z2D>>2] = $76;
  $77 = $73 & 7;
  HEAP32[$0>>2] = $77;
  $phitmp3 = $72 << 1;
  $$pre$phi44Z2D = $$pre$phi42Z2D;$79 = $65;$80 = $76;$84 = $77;$val$3 = $phitmp3;
  label = 17;
 }
 if ((label|0) == 17) {
  $78 = (($79) + ($80)|0);
  $81 = HEAP8[$78>>0]|0;
  $82 = $81&255;
  $83 = $82 >>> $84;
  $85 = $83 & 1;
  $86 = $val$3 | $85;
  $87 = (($84) + 7)|0;
  $88 = ($84|0)<(1);
  $89 = $88&1;
  $90 = (($80) + ($89))|0;
  HEAP32[$$pre$phi44Z2D>>2] = $90;
  $91 = $87 & 7;
  HEAP32[$0>>2] = $91;
  $phitmp2 = $86 << 1;
  $$pre$phi46Z2D = $$pre$phi44Z2D;$93 = $79;$94 = $90;$98 = $91;$val$4 = $phitmp2;
  label = 18;
 }
 if ((label|0) == 18) {
  $92 = (($93) + ($94)|0);
  $95 = HEAP8[$92>>0]|0;
  $96 = $95&255;
  $97 = $96 >>> $98;
  $99 = $97 & 1;
  $100 = $val$4 | $99;
  $101 = (($98) + 7)|0;
  $102 = ($98|0)<(1);
  $103 = $102&1;
  $104 = (($94) + ($103))|0;
  HEAP32[$$pre$phi46Z2D>>2] = $104;
  $105 = $101 & 7;
  HEAP32[$0>>2] = $105;
  $phitmp1 = $100 << 1;
  $$pre$phi48Z2D = $$pre$phi46Z2D;$107 = $93;$108 = $104;$112 = $105;$val$5 = $phitmp1;
  label = 19;
 }
 if ((label|0) == 19) {
  $106 = (($107) + ($108)|0);
  $109 = HEAP8[$106>>0]|0;
  $110 = $109&255;
  $111 = $110 >>> $112;
  $113 = $111 & 1;
  $114 = $val$5 | $113;
  $115 = (($112) + 7)|0;
  $116 = ($112|0)<(1);
  $117 = $116&1;
  $118 = (($108) + ($117))|0;
  HEAP32[$$pre$phi48Z2D>>2] = $118;
  $119 = $115 & 7;
  HEAP32[$0>>2] = $119;
  $phitmp = $114 << 1;
  $$pre$phi50Z2D = $$pre$phi48Z2D;$121 = $107;$122 = $118;$126 = $119;$val$6 = $phitmp;
 }
 $120 = (($121) + ($122)|0);
 $123 = HEAP8[$120>>0]|0;
 $124 = $123&255;
 $125 = $124 >>> $126;
 $127 = $125 & 1;
 $128 = $val$6 | $127;
 $129 = (($126) + 7)|0;
 $130 = ($126|0)<(1);
 $131 = $130&1;
 $132 = (($122) + ($131))|0;
 HEAP32[$$pre$phi50Z2D>>2] = $132;
 $133 = $129 & 7;
 HEAP32[$0>>2] = $133;
 $$0 = $128;
 return ($$0|0);
}
function _cram_beta_decode_char($slice,$c,$in,$out,$out_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $out = $out|0;
 $out_size = $out_size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $32 = ($out|0)==(0|0);
  if ($32) {
   $$0 = 0;
   return ($$0|0);
  }
  $33 = HEAP32[$out_size>>2]|0;
  $34 = ((($c)) + 24|0);
  $i$2 = 0;
  while(1) {
   $35 = ($i$2|0)<($33|0);
   if (!($35)) {
    $$0 = 0;
    break;
   }
   $36 = HEAP32[$34>>2]|0;
   $37 = (0 - ($36))|0;
   $38 = $37&255;
   $39 = (($out) + ($i$2)|0);
   HEAP8[$39>>0] = $38;
   $40 = (($i$2) + 1)|0;
   $i$2 = $40;
  }
  return ($$0|0);
 }
 $3 = ($1|0)<(0);
 if ($3) {
  $$0 = -1;
  return ($$0|0);
 }
 $4 = ((($in)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($in)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)<=($5>>>0);
 $9 = ($1|0)>(0);
 $or$cond = $8 & $9;
 if ($or$cond) {
  $$0 = -1;
  return ($$0|0);
 }
 $10 = (($7) - ($5))|0;
 $11 = ($10>>>0)<(268435457);
 if ($11) {
  $12 = $10 << 3;
  $13 = ((($in)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + ($14))|0;
  $16 = (($15) + -7)|0;
  $17 = ($16>>>0)<($1>>>0);
  if ($17) {
   $$0 = -1;
   return ($$0|0);
  }
 }
 $18 = ($out|0)==(0|0);
 $19 = HEAP32[$out_size>>2]|0;
 if ($18) {
  $i$1 = 0;
  while(1) {
   $29 = ($i$1|0)<($19|0);
   if (!($29)) {
    $$0 = 0;
    break;
   }
   $30 = HEAP32[$0>>2]|0;
   (_get_bits_MSB($in,$30)|0);
   $31 = (($i$1) + 1)|0;
   $i$1 = $31;
  }
  return ($$0|0);
 }
 $20 = ((($c)) + 24|0);
 $i$0 = 0;
 while(1) {
  $21 = ($i$0|0)<($19|0);
  if (!($21)) {
   $$0 = 0;
   break;
  }
  $22 = HEAP32[$0>>2]|0;
  $23 = (_get_bits_MSB($in,$22)|0);
  $24 = HEAP32[$20>>2]|0;
  $25 = (($23) - ($24))|0;
  $26 = $25&255;
  $27 = (($out) + ($i$0)|0);
  HEAP8[$27>>0] = $26;
  $28 = (($i$0) + 1)|0;
  $i$0 = $28;
 }
 return ($$0|0);
}
function _cram_beta_decode_free($c) {
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(0|0);
 if (!($0)) {
  _free($c);
 }
 return;
}
function _cram_beta_decode_init($data,$size,$option,$version) {
 $data = $data|0;
 $size = $size|0;
 $option = $option|0;
 $version = $version|0;
 var $$0 = 0, $$masked = 0, $$masked1 = 0, $$masked10 = 0, $$masked11 = 0, $$masked2 = 0, $$masked3 = 0, $$masked4 = 0, $$masked5 = 0, $$masked6 = 0, $$masked7 = 0, $$masked8 = 0, $$masked9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_malloc(548)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$0>>2] = 6;
 switch ($option|0) {
 case 2: case 1:  {
  $2 = ((($0)) + 12|0);
  HEAP32[$2>>2] = 78;
  break;
 }
 case 3: case 4:  {
  $3 = ((($0)) + 12|0);
  HEAP32[$3>>2] = 79;
  break;
 }
 default: {
  _abort();
  // unreachable;
 }
 }
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 80;
 $5 = HEAP8[$data>>0]|0;
 $6 = ($5<<24>>24)>(-1);
 do {
  if ($6) {
   $7 = $5&255;
   $8 = ((($0)) + 24|0);
   HEAP32[$8>>2] = $7;
   $68 = 1;
  } else {
   $9 = ($5&255)<(192);
   if ($9) {
    $10 = $5&255;
    $11 = $10 << 8;
    $12 = ((($data)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13&255;
    $$masked11 = $11 & 16128;
    $15 = $$masked11 | $14;
    $16 = ((($0)) + 24|0);
    HEAP32[$16>>2] = $15;
    $68 = 2;
    break;
   }
   $17 = ($5&255)<(224);
   if ($17) {
    $18 = $5&255;
    $19 = $18 << 16;
    $20 = ((($data)) + 1|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&255;
    $23 = $22 << 8;
    $24 = ((($data)) + 2|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&255;
    $$masked10 = $19 & 2031616;
    $$masked9 = $$masked10 | $23;
    $27 = $$masked9 | $26;
    $28 = ((($0)) + 24|0);
    HEAP32[$28>>2] = $27;
    $68 = 3;
    break;
   }
   $29 = ($5&255)<(240);
   $30 = $5&255;
   if ($29) {
    $31 = $30 << 24;
    $32 = ((($data)) + 1|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33&255;
    $35 = $34 << 16;
    $36 = ((($data)) + 2|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    $39 = $38 << 8;
    $40 = ((($data)) + 3|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41&255;
    $$masked8 = $31 & 251658240;
    $$masked7 = $$masked8 | $35;
    $$masked6 = $$masked7 | $39;
    $43 = $$masked6 | $42;
    $44 = ((($0)) + 24|0);
    HEAP32[$44>>2] = $43;
    $68 = 4;
    break;
   } else {
    $45 = $30 << 28;
    $46 = ((($data)) + 1|0);
    $47 = HEAP8[$46>>0]|0;
    $48 = $47&255;
    $49 = $48 << 20;
    $50 = $45 | $49;
    $51 = ((($data)) + 2|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    $54 = $53 << 12;
    $55 = $50 | $54;
    $56 = ((($data)) + 3|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57&255;
    $59 = $58 << 4;
    $60 = $55 | $59;
    $61 = ((($data)) + 4|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = $62&255;
    $64 = $63 & 15;
    $65 = $60 | $64;
    $66 = ((($0)) + 24|0);
    HEAP32[$66>>2] = $65;
    $68 = 5;
    break;
   }
  }
 } while(0);
 $67 = (($data) + ($68)|0);
 $69 = HEAP8[$67>>0]|0;
 $70 = ($69<<24>>24)>(-1);
 do {
  if ($70) {
   $71 = $69&255;
   $72 = ((($0)) + 28|0);
   HEAP32[$72>>2] = $71;
   $132 = 1;$138 = $71;
  } else {
   $73 = ($69&255)<(192);
   if ($73) {
    $74 = $69&255;
    $75 = $74 << 8;
    $76 = ((($67)) + 1|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = $77&255;
    $$masked5 = $75 & 16128;
    $79 = $$masked5 | $78;
    $80 = ((($0)) + 28|0);
    HEAP32[$80>>2] = $79;
    $132 = 2;$138 = $79;
    break;
   }
   $81 = ($69&255)<(224);
   if ($81) {
    $82 = $69&255;
    $83 = $82 << 16;
    $84 = ((($67)) + 1|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = $85&255;
    $87 = $86 << 8;
    $88 = ((($67)) + 2|0);
    $89 = HEAP8[$88>>0]|0;
    $90 = $89&255;
    $$masked4 = $83 & 2031616;
    $$masked3 = $$masked4 | $87;
    $91 = $$masked3 | $90;
    $92 = ((($0)) + 28|0);
    HEAP32[$92>>2] = $91;
    $132 = 3;$138 = $91;
    break;
   }
   $93 = ($69&255)<(240);
   $94 = $69&255;
   if ($93) {
    $95 = $94 << 24;
    $96 = ((($67)) + 1|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = $97&255;
    $99 = $98 << 16;
    $100 = ((($67)) + 2|0);
    $101 = HEAP8[$100>>0]|0;
    $102 = $101&255;
    $103 = $102 << 8;
    $104 = ((($67)) + 3|0);
    $105 = HEAP8[$104>>0]|0;
    $106 = $105&255;
    $$masked2 = $95 & 251658240;
    $$masked1 = $$masked2 | $99;
    $$masked = $$masked1 | $103;
    $107 = $$masked | $106;
    $108 = ((($0)) + 28|0);
    HEAP32[$108>>2] = $107;
    $132 = 4;$138 = $107;
    break;
   } else {
    $109 = $94 << 28;
    $110 = ((($67)) + 1|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111&255;
    $113 = $112 << 20;
    $114 = $109 | $113;
    $115 = ((($67)) + 2|0);
    $116 = HEAP8[$115>>0]|0;
    $117 = $116&255;
    $118 = $117 << 12;
    $119 = $114 | $118;
    $120 = ((($67)) + 3|0);
    $121 = HEAP8[$120>>0]|0;
    $122 = $121&255;
    $123 = $122 << 4;
    $124 = $119 | $123;
    $125 = ((($67)) + 4|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126&255;
    $128 = $127 & 15;
    $129 = $124 | $128;
    $130 = ((($0)) + 28|0);
    HEAP32[$130>>2] = $129;
    $132 = 5;$138 = $129;
    break;
   }
  }
 } while(0);
 $131 = (($67) + ($132)|0);
 $133 = $131;
 $134 = $data;
 $135 = (($133) - ($134))|0;
 $136 = ($135|0)!=($size|0);
 $137 = ($138|0)<(0);
 $or$cond = $136 | $137;
 $139 = ($138>>>0)>(32);
 $or$cond12 = $or$cond | $139;
 if (!($or$cond12)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 _fprintf(9772,22168,$vararg_buffer);
 _free($0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _cram_beta_encode_store($c,$b,$prefix,$version) {
 $c = $c|0;
 $b = $b|0;
 $prefix = $prefix|0;
 $version = $version|0;
 var $$0$i = 0, $$01$lcssa$i = 0, $$014$i = 0, $$1$lcssa$i = 0, $$pn$i = 0, $$pn15$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $len$0 = 0, $w$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($prefix|0)==(0|0);
 if ($0) {
  $len$0 = 0;
 } else {
  $1 = $prefix;
  $2 = $1 & 3;
  $3 = ($2|0)==(0);
  L3: do {
   if ($3) {
    $$01$lcssa$i = $prefix;
    label = 5;
   } else {
    $$014$i = $prefix;$68 = $1;
    while(1) {
     $4 = HEAP8[$$014$i>>0]|0;
     $5 = ($4<<24>>24)==(0);
     if ($5) {
      $$pn$i = $68;
      break L3;
     }
     $6 = ((($$014$i)) + 1|0);
     $7 = $6;
     $8 = $7 & 3;
     $9 = ($8|0)==(0);
     if ($9) {
      $$01$lcssa$i = $6;
      label = 5;
      break;
     } else {
      $$014$i = $6;$68 = $7;
     }
    }
   }
  } while(0);
  if ((label|0) == 5) {
   $w$0$i = $$01$lcssa$i;
   while(1) {
    $10 = HEAP32[$w$0$i>>2]|0;
    $11 = (($10) + -16843009)|0;
    $12 = $10 & -2139062144;
    $13 = $12 ^ -2139062144;
    $14 = $13 & $11;
    $15 = ($14|0)==(0);
    $16 = ((($w$0$i)) + 4|0);
    if ($15) {
     $w$0$i = $16;
    } else {
     break;
    }
   }
   $17 = $10&255;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $$1$lcssa$i = $w$0$i;
   } else {
    $$pn15$i = $w$0$i;
    while(1) {
     $19 = ((($$pn15$i)) + 1|0);
     $$pre$i = HEAP8[$19>>0]|0;
     $20 = ($$pre$i<<24>>24)==(0);
     if ($20) {
      $$1$lcssa$i = $19;
      break;
     } else {
      $$pn15$i = $19;
     }
    }
   }
   $21 = $$1$lcssa$i;
   $$pn$i = $21;
  }
  $$0$i = (($$pn$i) - ($1))|0;
  $22 = ((($b)) + 36|0);
  $23 = ((($b)) + 40|0);
  $24 = ((($b)) + 32|0);
  while(1) {
   $25 = HEAP32[$22>>2]|0;
   $26 = HEAP32[$23>>2]|0;
   $27 = (($26) + ($$0$i))|0;
   $28 = ($25>>>0)>($27>>>0);
   if ($28) {
    break;
   }
   $29 = ($25|0)==(0);
   $30 = (+($25>>>0));
   $31 = $30 * 1.5;
   $32 = (~~(($31))>>>0);
   $33 = $29 ? 1024 : $32;
   HEAP32[$22>>2] = $33;
   $34 = HEAP32[$24>>2]|0;
   $35 = (_realloc($34,$33)|0);
   HEAP32[$24>>2] = $35;
  }
  $36 = HEAP32[$24>>2]|0;
  $37 = (($36) + ($26)|0);
  _memcpy(($37|0),($prefix|0),($$0$i|0))|0;
  $38 = HEAP32[$23>>2]|0;
  $39 = (($38) + ($$0$i))|0;
  HEAP32[$23>>2] = $39;
  $len$0 = $$0$i;
 }
 $40 = HEAP32[$c>>2]|0;
 $41 = (_itf8_put_blk($b,$40)|0);
 $42 = (($len$0) + ($41))|0;
 $43 = ((($c)) + 24|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44>>>0)>(127);
 if ($45) {
  $46 = ($44>>>0)>(16383);
  if ($46) {
   $47 = ($44>>>0)>(2097151);
   if ($47) {
    $48 = ($44>>>0)<(268435456);
    $49 = $48 ? 4 : 5;
    $58 = $49;
   } else {
    $58 = 3;
   }
  } else {
   $58 = 2;
  }
 } else {
  $58 = 1;
 }
 $50 = ((($c)) + 28|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51>>>0)>(127);
 if ($52) {
  $53 = ($51>>>0)>(16383);
  if ($53) {
   $54 = ($51>>>0)>(2097151);
   if ($54) {
    $55 = ($51>>>0)<(268435456);
    $56 = $55 ? 4 : 5;
    $59 = $56;
   } else {
    $59 = 3;
   }
  } else {
   $59 = 2;
  }
 } else {
  $59 = 1;
 }
 $57 = (($58) + ($59))|0;
 $60 = (_itf8_put_blk($b,$57)|0);
 $61 = (($42) + ($60))|0;
 $62 = HEAP32[$43>>2]|0;
 $63 = (_itf8_put_blk($b,$62)|0);
 $64 = (($61) + ($63))|0;
 $65 = HEAP32[$50>>2]|0;
 $66 = (_itf8_put_blk($b,$65)|0);
 $67 = (($64) + ($66))|0;
 return ($67|0);
}
function _cram_beta_encode_int($slice,$c,$in,$in_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $in_size = $in_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $r$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 4|0);
 $1 = ((($c)) + 24|0);
 $2 = ((($c)) + 28|0);
 $i$0 = 0;$r$0 = 0;
 while(1) {
  $3 = ($i$0|0)<($in_size|0);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[$0>>2]|0;
  $5 = (($in) + ($i$0<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$1>>2]|0;
  $8 = (($6) + ($7))|0;
  $9 = HEAP32[$2>>2]|0;
  $10 = (_store_bits_MSB($4,$8,$9)|0);
  $11 = $r$0 | $10;
  $12 = (($i$0) + 1)|0;
  $i$0 = $12;$r$0 = $11;
 }
 return ($r$0|0);
}
function _store_bits_MSB($block,$val,$nbits) {
 $block = $block|0;
 $val = $val|0;
 $nbits = $nbits|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $mask$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($block)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4)|0;
 $3 = ((($block)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 do {
  if (!($5)) {
   $6 = ($1|0)==(0);
   if (!($6)) {
    $7 = $4 << 1;
    HEAP32[$3>>2] = $7;
    $8 = ((($block)) + 32|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (($7) + 4)|0;
    $11 = (_realloc($9,$10)|0);
    HEAP32[$8>>2] = $11;
    $12 = ($11|0)==(0|0);
    if ($12) {
     $$0 = -1;
    } else {
     break;
    }
    return ($$0|0);
   }
   HEAP32[$3>>2] = 1024;
   $13 = ((($block)) + 32|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (_realloc($14,1028)|0);
   HEAP32[$13>>2] = $15;
   $16 = ($15|0)==(0|0);
   if ($16) {
    $$0 = -1;
    return ($$0|0);
   } else {
    HEAP8[$15>>0] = 0;
    break;
   }
  }
 } while(0);
 $17 = ((($block)) + 44|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 1)|0;
 $20 = ($19|0)<($nbits|0);
 if (!($20)) {
  $21 = (($19) - ($nbits))|0;
  $22 = $val << $21;
  $23 = HEAP32[$0>>2]|0;
  $24 = ((($block)) + 32|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($23)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = $28 | $22;
  $30 = $29&255;
  HEAP8[$26>>0] = $30;
  $31 = HEAP32[$17>>2]|0;
  $32 = (($31) - ($nbits))|0;
  HEAP32[$17>>2] = $32;
  $33 = ($32|0)==(-1);
  if (!($33)) {
   $$0 = 0;
   return ($$0|0);
  }
  HEAP32[$17>>2] = 7;
  $34 = HEAP32[$0>>2]|0;
  $35 = (($34) + 1)|0;
  HEAP32[$0>>2] = $35;
  $36 = HEAP32[$24>>2]|0;
  $37 = (($36) + ($35)|0);
  HEAP8[$37>>0] = 0;
  $$0 = 0;
  return ($$0|0);
 }
 $38 = (($nbits) - ($19))|0;
 $39 = $val >>> $38;
 $40 = HEAP32[$0>>2]|0;
 $41 = ((($block)) + 32|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + ($40)|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $44&255;
 $46 = $45 | $39;
 $47 = $46&255;
 HEAP8[$43>>0] = $47;
 HEAP32[$17>>2] = 7;
 $48 = HEAP32[$0>>2]|0;
 $49 = (($48) + 1)|0;
 HEAP32[$0>>2] = $49;
 $50 = HEAP32[$41>>2]|0;
 $51 = (($50) + ($49)|0);
 HEAP8[$51>>0] = 0;
 $52 = (($38) + -1)|0;
 $53 = 1 << $52;
 $$01 = $38;$mask$0 = $53;
 while(1) {
  $54 = $mask$0 & $val;
  $55 = ($54|0)==(0);
  if (!($55)) {
   $56 = HEAP32[$17>>2]|0;
   $57 = 1 << $56;
   $58 = HEAP32[$0>>2]|0;
   $59 = HEAP32[$41>>2]|0;
   $60 = (($59) + ($58)|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = $62 | $57;
   $64 = $63&255;
   HEAP8[$60>>0] = $64;
  }
  $65 = HEAP32[$17>>2]|0;
  $66 = (($65) + -1)|0;
  HEAP32[$17>>2] = $66;
  $67 = ($65|0)==(0);
  if ($67) {
   HEAP32[$17>>2] = 7;
   $68 = HEAP32[$0>>2]|0;
   $69 = (($68) + 1)|0;
   HEAP32[$0>>2] = $69;
   $70 = HEAP32[$41>>2]|0;
   $71 = (($70) + ($69)|0);
   HEAP8[$71>>0] = 0;
  }
  $72 = $mask$0 >>> 1;
  $73 = (($$01) + -1)|0;
  $74 = ($73|0)==(0);
  if ($74) {
   $$0 = 0;
   break;
  } else {
   $$01 = $73;$mask$0 = $72;
  }
 }
 return ($$0|0);
}
function _cram_beta_encode_char($slice,$c,$in,$in_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $in_size = $in_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $r$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 4|0);
 $1 = ((($c)) + 24|0);
 $2 = ((($c)) + 28|0);
 $i$0 = 0;$r$0 = 0;
 while(1) {
  $3 = ($i$0|0)<($in_size|0);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[$0>>2]|0;
  $5 = (($in) + ($i$0)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = HEAP32[$1>>2]|0;
  $9 = (($7) + ($8))|0;
  $10 = HEAP32[$2>>2]|0;
  $11 = (_store_bits_MSB($4,$9,$10)|0);
  $12 = $r$0 | $11;
  $13 = (($i$0) + 1)|0;
  $i$0 = $13;$r$0 = $12;
 }
 return ($r$0|0);
}
function _cram_beta_encode_free($c) {
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(0|0);
 if (!($0)) {
  _free($c);
 }
 return;
}
function _cram_beta_encode_init($st,$option,$dat,$version) {
 $st = $st|0;
 $option = $option|0;
 $dat = $dat|0;
 $version = $version|0;
 var $$0 = 0, $$max_val$2 = 0, $$min_val$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cram_beta_encode_int$cram_beta_encode_char = 0, $exitcond = 0, $i$0 = 0, $i$0$min_val$0 = 0, $k$0 = 0, $len$0 = 0, $max_val$0 = 0, $max_val$1 = 0, $max_val$2 = 0, $max_val$4 = 0, $max_val$6 = 0, $max_val$7 = 0;
 var $min_val$0 = 0, $min_val$2 = 0, $min_val$3 = 0, $min_val$5 = 0, $min_val$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(548)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 6;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 61;
 $3 = ($option|0)==(1);
 $4 = ((($0)) + 16|0);
 $cram_beta_encode_int$cram_beta_encode_char = $3 ? 62 : 81;
 HEAP32[$4>>2] = $cram_beta_encode_int$cram_beta_encode_char;
 $5 = ((($0)) + 20|0);
 HEAP32[$5>>2] = 63;
 $6 = ($dat|0)==(0|0);
 L4: do {
  if ($6) {
   $i$0 = 0;$max_val$0 = -2147483648;$min_val$0 = 2147483647;
   while(1) {
    $exitcond = ($i$0|0)==(1024);
    if ($exitcond) {
     break;
    }
    $10 = (($st) + ($i$0<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0);
    $13 = ($min_val$0|0)>($i$0|0);
    $i$0$min_val$0 = $13 ? $i$0 : $min_val$0;
    $min_val$2 = $12 ? $min_val$0 : $i$0$min_val$0;
    $max_val$1 = $12 ? $max_val$0 : $i$0;
    $14 = (($i$0) + 1)|0;
    $i$0 = $14;$max_val$0 = $max_val$1;$min_val$0 = $min_val$2;
   }
   $15 = ((($st)) + 4096|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0|0);
   if ($17) {
    $max_val$6 = $max_val$0;$min_val$7 = $min_val$0;
   } else {
    $18 = HEAP32[$16>>2]|0;
    $k$0 = 0;$max_val$2 = $max_val$0;$min_val$3 = $min_val$0;
    while(1) {
     $19 = ($k$0|0)==($18|0);
     if ($19) {
      $max_val$6 = $max_val$2;$min_val$7 = $min_val$3;
      break L4;
     }
     $20 = $k$0 >>> 4;
     $21 = ((($16)) + 16|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (($22) + ($20<<2)|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = $k$0 << 1;
     $26 = $25 & 30;
     $27 = 3 << $26;
     $28 = $24 & $27;
     $29 = ($28|0)==(0);
     if ($29) {
      $30 = ((($16)) + 20|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($31) + ($k$0<<2)|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($min_val$3|0)>($33|0);
      $$min_val$3 = $34 ? $33 : $min_val$3;
      $35 = ($max_val$2|0)<($33|0);
      $$max_val$2 = $35 ? $33 : $max_val$2;
      $max_val$4 = $$max_val$2;$min_val$5 = $$min_val$3;
     } else {
      $max_val$4 = $max_val$2;$min_val$5 = $min_val$3;
     }
     $36 = (($k$0) + 1)|0;
     $k$0 = $36;$max_val$2 = $max_val$4;$min_val$3 = $min_val$5;
    }
   }
  } else {
   $7 = HEAP32[$dat>>2]|0;
   $8 = ((($dat)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $max_val$6 = $9;$min_val$7 = $7;
  }
 } while(0);
 $37 = ($max_val$6|0)<($min_val$7|0);
 if ($37) {
  ___assert_fail((22198|0),(22217|0),648,(22236|0));
  // unreachable;
 }
 $38 = (0 - ($min_val$7))|0;
 $39 = ((($0)) + 24|0);
 HEAP32[$39>>2] = $38;
 $40 = (($max_val$6) - ($min_val$7))|0;
 $len$0 = 0;$max_val$7 = $40;
 while(1) {
  $41 = ($max_val$7|0)==(0);
  if ($41) {
   break;
  }
  $42 = (($len$0) + 1)|0;
  $43 = $max_val$7 >> 1;
  $len$0 = $42;$max_val$7 = $43;
 }
 $44 = ((($0)) + 28|0);
 HEAP32[$44>>2] = $len$0;
 $$0 = $0;
 return ($$0|0);
}
function _cram_subexp_decode($slice,$c,$in,$out,$out_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $out = $out|0;
 $out_size = $out_size|0;
 var $$0 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $count$0 = 0, $n$0$i = 0, $or$cond = 0, $tail$0 = 0, $tail$0$in = 0, $tail$1 = 0, $val$0 = 0, $val$1 = 0, $val$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$out_size>>2]|0;
 $3 = ((($in)) + 40|0);
 $4 = ((($in)) + 20|0);
 $5 = ((($in)) + 32|0);
 $6 = ((($in)) + 44|0);
 $7 = ((($c)) + 24|0);
 $count$0 = 0;
 L1: while(1) {
  $8 = ($count$0|0)<($2|0);
  if (!($8)) {
   $$0 = 0;
   label = 22;
   break;
  }
  $9 = HEAP32[$3>>2]|0;
  $10 = HEAP32[$4>>2]|0;
  $11 = ($9>>>0)<($10>>>0);
  if (!($11)) {
   $$0 = -1;
   label = 22;
   break;
  }
  $$pre = HEAP32[$5>>2]|0;
  $$pre4 = HEAP32[$6>>2]|0;
  $13 = $9;$17 = $$pre4;$n$0$i = 0;
  while(1) {
   $12 = (($$pre) + ($13)|0);
   $14 = HEAP8[$12>>0]|0;
   $15 = $14&255;
   $16 = $15 >>> $17;
   $18 = (($17) + -1)|0;
   HEAP32[$6>>2] = $18;
   $19 = ($17|0)==(0);
   if ($19) {
    HEAP32[$6>>2] = 7;
    $20 = (($13) + 1)|0;
    HEAP32[$3>>2] = $20;
    $21 = ($20|0)==($10|0);
    if ($21) {
     $22 = $16 & 1;
     $23 = ($22|0)==(0);
     if ($23) {
      $34 = $10;$40 = 7;
     } else {
      $$0 = -1;
      label = 22;
      break L1;
     }
    } else {
     $34 = $20;$40 = 7;
    }
   } else {
    $34 = $13;$40 = $18;
   }
   $24 = (($n$0$i) + 1)|0;
   $25 = $16 & 1;
   $26 = ($25|0)==(0);
   if ($26) {
    break;
   } else {
    $13 = $34;$17 = $40;$n$0$i = $24;
   }
  }
  $27 = ($n$0$i|0)<(0);
  if ($27) {
   $$0 = -1;
   label = 22;
   break;
  }
  $28 = ($n$0$i|0)>(0);
  $29 = (($n$0$i) + ($1))|0;
  $30 = (($29) + -1)|0;
  $31 = $28 ? $30 : $1;
  $32 = ($31|0)<(0);
  if ($32) {
   $$0 = -1;
   label = 22;
   break;
  }
  $33 = ($10>>>0)<=($34>>>0);
  $35 = ($31|0)>(0);
  $or$cond = $33 & $35;
  if ($or$cond) {
   $$0 = -1;
   label = 22;
   break;
  }
  $36 = (($10) - ($34))|0;
  $37 = ($36>>>0)<(268435457);
  if ($37) {
   $38 = $36 << 3;
   $39 = (($38) + ($40))|0;
   $41 = (($39) + -7)|0;
   $42 = ($41>>>0)<($31>>>0);
   if ($42) {
    $$0 = -1;
    label = 22;
    break;
   }
  }
  $43 = ($n$0$i|0)==(0);
  L18: do {
   if ($43) {
    $66 = $34;$70 = $40;$tail$1 = $1;$val$1 = 0;
    while(1) {
     $63 = ($tail$1|0)==(0);
     if ($63) {
      $val$2 = $val$1;
      break L18;
     }
     $64 = $val$1 << 1;
     $65 = (($$pre) + ($66)|0);
     $67 = HEAP8[$65>>0]|0;
     $68 = $67&255;
     $69 = $68 >>> $70;
     $71 = $69 & 1;
     $72 = $64 | $71;
     $73 = (($70) + 7)|0;
     $74 = ($70|0)<(1);
     $75 = $74&1;
     $76 = (($66) + ($75))|0;
     HEAP32[$3>>2] = $76;
     $77 = $73 & 7;
     HEAP32[$6>>2] = $77;
     $78 = (($tail$1) + -1)|0;
     $66 = $76;$70 = $77;$tail$1 = $78;$val$1 = $72;
    }
   } else {
    $44 = (($n$0$i) + ($1))|0;
    $48 = $34;$52 = $40;$tail$0$in = $44;$val$0 = 0;
    while(1) {
     $tail$0 = (($tail$0$in) + -1)|0;
     $45 = ($tail$0|0)==(0);
     if ($45) {
      break;
     }
     $46 = $val$0 << 1;
     $47 = (($$pre) + ($48)|0);
     $49 = HEAP8[$47>>0]|0;
     $50 = $49&255;
     $51 = $50 >>> $52;
     $53 = $51 & 1;
     $54 = $46 | $53;
     $55 = (($52) + 7)|0;
     $56 = ($52|0)<(1);
     $57 = $56&1;
     $58 = (($48) + ($57))|0;
     HEAP32[$3>>2] = $58;
     $59 = $55 & 7;
     HEAP32[$6>>2] = $59;
     $48 = $58;$52 = $59;$tail$0$in = $tail$0;$val$0 = $54;
    }
    $60 = (($44) + -1)|0;
    $61 = 1 << $60;
    $62 = (($val$0) + ($61))|0;
    $val$2 = $62;
   }
  } while(0);
  $79 = HEAP32[$7>>2]|0;
  $80 = (($val$2) - ($79))|0;
  $81 = (($out) + ($count$0<<2)|0);
  HEAP32[$81>>2] = $80;
  $82 = (($count$0) + 1)|0;
  $count$0 = $82;
 }
 if ((label|0) == 22) {
  return ($$0|0);
 }
 return (0)|0;
}
function _cram_subexp_decode_free($c) {
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(0|0);
 if (!($0)) {
  _free($c);
 }
 return;
}
function _cram_subexp_decode_init($data,$size,$option,$version) {
 $data = $data|0;
 $size = $size|0;
 $option = $option|0;
 $version = $version|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_malloc(548)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$0>>2] = 7;
 $2 = ((($0)) + 12|0);
 HEAP32[$2>>2] = 82;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 83;
 $4 = ((($0)) + 28|0);
 HEAP32[$4>>2] = -1;
 $5 = (($data) + ($size)|0);
 $6 = ((($0)) + 24|0);
 $7 = (_safe_itf8_get_820($data,$5,$6)|0);
 $8 = (($data) + ($7)|0);
 $9 = (_safe_itf8_get_820($8,$5,$4)|0);
 $10 = (($8) + ($9)|0);
 $11 = $10;
 $12 = $data;
 $13 = (($11) - ($12))|0;
 $14 = ($13|0)==($size|0);
 if ($14) {
  $15 = HEAP32[$4>>2]|0;
  $16 = ($15|0)<(0);
  if (!($16)) {
   $$0 = $0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _fprintf(9772,22258,$vararg_buffer);
 _free($0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _cram_gamma_decode($slice,$c,$in,$out,$out_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $out = $out|0;
 $out_size = $out_size|0;
 var $$0 = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0;
 var $n$0$i = 0, $nz$0 = 0, $or$cond = 0, $val$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$out_size>>2]|0;
 $1 = ((($in)) + 40|0);
 $2 = ((($in)) + 20|0);
 $3 = ((($in)) + 32|0);
 $4 = ((($in)) + 44|0);
 $5 = ((($c)) + 24|0);
 $i$0 = 0;
 L1: while(1) {
  $6 = ($i$0|0)<($0|0);
  if (!($6)) {
   $$0 = 0;
   label = 16;
   break;
  }
  $7 = HEAP32[$1>>2]|0;
  $8 = HEAP32[$2>>2]|0;
  $9 = ($7>>>0)<($8>>>0);
  if (!($9)) {
   $$0 = -1;
   label = 16;
   break;
  }
  $$pre = HEAP32[$3>>2]|0;
  $$pre5 = HEAP32[$4>>2]|0;
  $11 = $7;$15 = $$pre5;$n$0$i = 0;
  while(1) {
   $10 = (($$pre) + ($11)|0);
   $12 = HEAP8[$10>>0]|0;
   $13 = $12&255;
   $14 = $13 >>> $15;
   $16 = (($15) + -1)|0;
   HEAP32[$4>>2] = $16;
   $17 = ($15|0)==(0);
   if ($17) {
    HEAP32[$4>>2] = 7;
    $18 = (($11) + 1)|0;
    HEAP32[$1>>2] = $18;
    $19 = ($18|0)==($8|0);
    if ($19) {
     $20 = $14 & 1;
     $21 = ($20|0)==(0);
     if ($21) {
      $$0 = -1;
      label = 16;
      break L1;
     } else {
      $27 = $8;$33 = 7;
     }
    } else {
     $27 = $18;$33 = 7;
    }
   } else {
    $27 = $11;$33 = $16;
   }
   $22 = (($n$0$i) + 1)|0;
   $23 = $14 & 1;
   $24 = ($23|0)==(0);
   if ($24) {
    $11 = $27;$15 = $33;$n$0$i = $22;
   } else {
    break;
   }
  }
  $25 = ($n$0$i|0)<(0);
  if ($25) {
   $$0 = -1;
   label = 16;
   break;
  }
  $26 = ($8>>>0)<=($27>>>0);
  $28 = ($n$0$i|0)>(0);
  $or$cond = $26 & $28;
  if ($or$cond) {
   $$0 = -1;
   label = 16;
   break;
  }
  $29 = (($8) - ($27))|0;
  $30 = ($29>>>0)<(268435457);
  if ($30) {
   $31 = $29 << 3;
   $32 = (($31) + ($33))|0;
   $34 = (($32) + -7)|0;
   $35 = ($34>>>0)<($n$0$i>>>0);
   if ($35) {
    $$0 = -1;
    label = 16;
    break;
   } else {
    $39 = $27;$43 = $33;$nz$0 = $n$0$i;$val$0 = 1;
   }
  } else {
   $39 = $27;$43 = $33;$nz$0 = $n$0$i;$val$0 = 1;
  }
  while(1) {
   $36 = ($nz$0|0)>(0);
   if (!($36)) {
    break;
   }
   $37 = $val$0 << 1;
   $38 = (($$pre) + ($39)|0);
   $40 = HEAP8[$38>>0]|0;
   $41 = $40&255;
   $42 = $41 >>> $43;
   $44 = $42 & 1;
   $45 = $37 | $44;
   $46 = (($43) + 7)|0;
   $47 = ($43|0)<(1);
   $48 = $47&1;
   $49 = (($39) + ($48))|0;
   HEAP32[$1>>2] = $49;
   $50 = $46 & 7;
   HEAP32[$4>>2] = $50;
   $51 = (($nz$0) + -1)|0;
   $39 = $49;$43 = $50;$nz$0 = $51;$val$0 = $45;
  }
  $52 = HEAP32[$5>>2]|0;
  $53 = (($val$0) - ($52))|0;
  $54 = (($out) + ($i$0<<2)|0);
  HEAP32[$54>>2] = $53;
  $55 = (($i$0) + 1)|0;
  $i$0 = $55;
 }
 if ((label|0) == 16) {
  return ($$0|0);
 }
 return (0)|0;
}
function _cram_gamma_decode_free($c) {
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(0|0);
 if (!($0)) {
  _free($c);
 }
 return;
}
function _cram_gamma_decode_init($data,$size,$option,$version) {
 $data = $data|0;
 $size = $size|0;
 $option = $option|0;
 $version = $version|0;
 var $$0 = 0, $$masked = 0, $$masked1 = 0, $$masked2 = 0, $$masked3 = 0, $$masked4 = 0, $$masked5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_malloc(548)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$0>>2] = 9;
 $2 = ((($0)) + 12|0);
 HEAP32[$2>>2] = 84;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 85;
 $4 = HEAP8[$data>>0]|0;
 $5 = ($4<<24>>24)>(-1);
 do {
  if ($5) {
   $6 = $4&255;
   $7 = ((($0)) + 24|0);
   HEAP32[$7>>2] = $6;
   $67 = 1;
  } else {
   $8 = ($4&255)<(192);
   if ($8) {
    $9 = $4&255;
    $10 = $9 << 8;
    $11 = ((($data)) + 1|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12&255;
    $$masked5 = $10 & 16128;
    $14 = $$masked5 | $13;
    $15 = ((($0)) + 24|0);
    HEAP32[$15>>2] = $14;
    $67 = 2;
    break;
   }
   $16 = ($4&255)<(224);
   if ($16) {
    $17 = $4&255;
    $18 = $17 << 16;
    $19 = ((($data)) + 1|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = $20&255;
    $22 = $21 << 8;
    $23 = ((($data)) + 2|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $$masked4 = $18 & 2031616;
    $$masked3 = $$masked4 | $22;
    $26 = $$masked3 | $25;
    $27 = ((($0)) + 24|0);
    HEAP32[$27>>2] = $26;
    $67 = 3;
    break;
   }
   $28 = ($4&255)<(240);
   $29 = $4&255;
   if ($28) {
    $30 = $29 << 24;
    $31 = ((($data)) + 1|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $34 = $33 << 16;
    $35 = ((($data)) + 2|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = $36&255;
    $38 = $37 << 8;
    $39 = ((($data)) + 3|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40&255;
    $$masked2 = $30 & 251658240;
    $$masked1 = $$masked2 | $34;
    $$masked = $$masked1 | $38;
    $42 = $$masked | $41;
    $43 = ((($0)) + 24|0);
    HEAP32[$43>>2] = $42;
    $67 = 4;
    break;
   } else {
    $44 = $29 << 28;
    $45 = ((($data)) + 1|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46&255;
    $48 = $47 << 20;
    $49 = $44 | $48;
    $50 = ((($data)) + 2|0);
    $51 = HEAP8[$50>>0]|0;
    $52 = $51&255;
    $53 = $52 << 12;
    $54 = $49 | $53;
    $55 = ((($data)) + 3|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $56&255;
    $58 = $57 << 4;
    $59 = $54 | $58;
    $60 = ((($data)) + 4|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61&255;
    $63 = $62 & 15;
    $64 = $59 | $63;
    $65 = ((($0)) + 24|0);
    HEAP32[$65>>2] = $64;
    $67 = 5;
    break;
   }
  }
 } while(0);
 $66 = ($67|0)==($size|0);
 if ($66) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 _fprintf(9772,22290,$vararg_buffer);
 _free($0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _cram_huffman_decode_free($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($c)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  _free($2);
 }
 _free($c);
 return;
}
function _cram_huffman_decode_null($slice,$c,$in,$out,$out_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $out = $out|0;
 $out_size = $out_size|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function _cram_huffman_decode_char0($slice,$c,$in,$out,$out_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $out = $out|0;
 $out_size = $out_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($out|0)==(0|0);
 if ($0) {
  return 0;
 }
 $1 = HEAP32[$out_size>>2]|0;
 $2 = ((($c)) + 28|0);
 $i$0 = 0;
 while(1) {
  $3 = ($i$0|0)<($1|0);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[$2>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = $5&255;
  $7 = (($out) + ($i$0)|0);
  HEAP8[$7>>0] = $6;
  $8 = (($i$0) + 1)|0;
  $i$0 = $8;
 }
 return 0;
}
function _cram_huffman_decode_char($slice,$c,$in,$out,$out_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $out = $out|0;
 $out_size = $out_size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dlen$0 = 0;
 var $i$0 = 0, $idx$0 = 0, $len$0 = 0, $or$cond = 0, $or$cond2 = 0, $val$0 = 0, $val$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($c)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$out_size>>2]|0;
 $5 = ((($in)) + 40|0);
 $6 = ((($in)) + 20|0);
 $7 = ((($in)) + 44|0);
 $8 = ((($in)) + 32|0);
 $i$0 = 0;
 L1: while(1) {
  $9 = ($i$0|0)<($4|0);
  if ($9) {
   $idx$0 = 0;$len$0 = 0;$val$0 = 0;
  } else {
   $$0 = 0;
   label = 13;
   break;
  }
  while(1) {
   $10 = (((($3) + ($idx$0<<4)|0)) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) - ($len$0))|0;
   $13 = ($12|0)<(0);
   if ($13) {
    $$0 = -1;
    label = 13;
    break L1;
   }
   $14 = HEAP32[$5>>2]|0;
   $15 = HEAP32[$6>>2]|0;
   $16 = ($15>>>0)<=($14>>>0);
   $17 = ($12|0)>(0);
   $or$cond = $16 & $17;
   if ($or$cond) {
    $$0 = -1;
    label = 13;
    break L1;
   }
   $18 = (($15) - ($14))|0;
   $19 = ($18>>>0)<(268435457);
   if ($19) {
    $20 = $18 << 3;
    $21 = HEAP32[$7>>2]|0;
    $22 = (($20) + ($21))|0;
    $23 = (($22) + -7)|0;
    $24 = ($23>>>0)<($12>>>0);
    if ($24) {
     $$0 = -1;
     label = 13;
     break L1;
    } else {
     $28 = $14;$dlen$0 = $12;$val$1 = $val$0;
    }
   } else {
    $28 = $14;$dlen$0 = $12;$val$1 = $val$0;
   }
   while(1) {
    $25 = ($dlen$0|0)==(0);
    if ($25) {
     break;
    }
    $26 = HEAP32[$8>>2]|0;
    $27 = (($26) + ($28)|0);
    $29 = HEAP8[$27>>0]|0;
    $30 = HEAP32[$7>>2]|0;
    $31 = (($30) + 7)|0;
    $32 = ($30|0)<(1);
    $33 = $32&1;
    $34 = (($28) + ($33))|0;
    HEAP32[$5>>2] = $34;
    $35 = $31 & 7;
    HEAP32[$7>>2] = $35;
    $36 = $val$1 << 1;
    $37 = $29&255;
    $38 = $37 >>> $30;
    $39 = $38 & 1;
    $40 = $36 | $39;
    $41 = (($dlen$0) + -1)|0;
    $28 = $34;$dlen$0 = $41;$val$1 = $40;
   }
   $42 = (((($3) + ($idx$0<<4)|0)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($val$1) - ($43))|0;
   $45 = ($44|0)>=($1|0);
   $46 = ($44|0)<(0);
   $or$cond2 = $45 | $46;
   if ($or$cond2) {
    $$0 = -1;
    label = 13;
    break L1;
   }
   $47 = (((($3) + ($44<<4)|0)) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($val$1|0);
   if (!($49)) {
    $idx$0 = $44;$len$0 = $11;$val$0 = $val$1;
    continue;
   }
   $50 = (((($3) + ($44<<4)|0)) + 12|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==($11|0);
   if ($52) {
    break;
   } else {
    $idx$0 = $44;$len$0 = $11;$val$0 = $val$1;
   }
  }
  $53 = (($3) + ($44<<4)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $54&255;
  $56 = (($out) + ($i$0)|0);
  HEAP8[$56>>0] = $55;
  $57 = (($i$0) + 1)|0;
  $i$0 = $57;
 }
 if ((label|0) == 13) {
  return ($$0|0);
 }
 return (0)|0;
}
function _cram_huffman_decode_int0($slice,$c,$in,$out,$out_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $out = $out|0;
 $out_size = $out_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$out_size>>2]|0;
 $i$0 = 0;
 while(1) {
  $3 = ($i$0|0)<($2|0);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[$1>>2]|0;
  $5 = (($out) + ($i$0<<2)|0);
  HEAP32[$5>>2] = $4;
  $6 = (($i$0) + 1)|0;
  $i$0 = $6;
 }
 return 0;
}
function _cram_huffman_decode_int($slice,$c,$in,$out,$out_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $out = $out|0;
 $out_size = $out_size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dlen$0 = 0, $i$0 = 0;
 var $idx$0 = 0, $len$0 = 0, $or$cond = 0, $or$cond2 = 0, $val$0 = 0, $val$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($c)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$out_size>>2]|0;
 $5 = ((($in)) + 40|0);
 $6 = ((($in)) + 20|0);
 $7 = ((($in)) + 44|0);
 $8 = ((($in)) + 32|0);
 $i$0 = 0;
 L1: while(1) {
  $9 = ($i$0|0)<($4|0);
  if ($9) {
   $idx$0 = 0;$len$0 = 0;$val$0 = 0;
  } else {
   $$0 = 0;
   label = 13;
   break;
  }
  while(1) {
   $10 = (((($3) + ($idx$0<<4)|0)) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) - ($len$0))|0;
   $13 = ($12|0)<(0);
   if ($13) {
    $$0 = -1;
    label = 13;
    break L1;
   }
   $14 = HEAP32[$5>>2]|0;
   $15 = HEAP32[$6>>2]|0;
   $16 = ($15>>>0)<=($14>>>0);
   $17 = ($12|0)>(0);
   $or$cond = $16 & $17;
   if ($or$cond) {
    $$0 = -1;
    label = 13;
    break L1;
   }
   $18 = (($15) - ($14))|0;
   $19 = ($18>>>0)<(268435457);
   if ($19) {
    $20 = $18 << 3;
    $21 = HEAP32[$7>>2]|0;
    $22 = (($20) + ($21))|0;
    $23 = (($22) + -7)|0;
    $24 = ($23>>>0)<($12>>>0);
    if ($24) {
     $$0 = -1;
     label = 13;
     break L1;
    } else {
     $28 = $14;$dlen$0 = $12;$val$1 = $val$0;
    }
   } else {
    $28 = $14;$dlen$0 = $12;$val$1 = $val$0;
   }
   while(1) {
    $25 = ($dlen$0|0)==(0);
    if ($25) {
     break;
    }
    $26 = HEAP32[$8>>2]|0;
    $27 = (($26) + ($28)|0);
    $29 = HEAP8[$27>>0]|0;
    $30 = HEAP32[$7>>2]|0;
    $31 = (($30) + 7)|0;
    $32 = ($30|0)<(1);
    $33 = $32&1;
    $34 = (($28) + ($33))|0;
    HEAP32[$5>>2] = $34;
    $35 = $31 & 7;
    HEAP32[$7>>2] = $35;
    $36 = $val$1 << 1;
    $37 = $29&255;
    $38 = $37 >>> $30;
    $39 = $38 & 1;
    $40 = $36 | $39;
    $41 = (($dlen$0) + -1)|0;
    $28 = $34;$dlen$0 = $41;$val$1 = $40;
   }
   $42 = (((($3) + ($idx$0<<4)|0)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($val$1) - ($43))|0;
   $45 = ($44|0)>=($1|0);
   $46 = ($44|0)<(0);
   $or$cond2 = $45 | $46;
   if ($or$cond2) {
    $$0 = -1;
    label = 13;
    break L1;
   }
   $47 = (((($3) + ($44<<4)|0)) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($val$1|0);
   if (!($49)) {
    $idx$0 = $44;$len$0 = $11;$val$0 = $val$1;
    continue;
   }
   $50 = (((($3) + ($44<<4)|0)) + 12|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==($11|0);
   if ($52) {
    break;
   } else {
    $idx$0 = $44;$len$0 = $11;$val$0 = $val$1;
   }
  }
  $53 = (($3) + ($44<<4)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($out) + ($i$0<<2)|0);
  HEAP32[$55>>2] = $54;
  $56 = (($i$0) + 1)|0;
  $i$0 = $56;
 }
 if ((label|0) == 13) {
  return ($$0|0);
 }
 return (0)|0;
}
function _cram_huffman_decode_init($data,$size,$option,$version) {
 $data = $data|0;
 $size = $size|0;
 $option = $option|0;
 $version = $version|0;
 var $$0 = 0, $$max_len$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $cp$0 = 0, $cp$1 = 0, $i = 0;
 var $j$0 = 0, $j$1 = 0, $l$0 = 0, $last_len$0 = 0, $last_len$1 = 0, $last_len$2 = 0, $last_len$3 = 0, $last_len$4 = 0, $max_len$0 = 0, $ncodes = 0, $or$cond = 0, $val$0 = 0, $val$1 = 0, $val$2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $ncodes = sp + 24|0;
 $i = sp + 20|0;
 HEAP32[$ncodes>>2] = 0;
 $0 = (($data) + ($size)|0);
 $1 = (_safe_itf8_get_820($data,$0,$ncodes)|0);
 $2 = (($data) + ($1)|0);
 $3 = (_malloc(548)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($3)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(0);
 if (!($8)) {
  _memset(($3|0),0,548)|0;
 }
 HEAP32[$3>>2] = 3;
 $9 = ((($3)) + 8|0);
 HEAP32[$9>>2] = 86;
 $10 = HEAP32[$ncodes>>2]|0;
 $11 = ((($3)) + 24|0);
 HEAP32[$11>>2] = $10;
 $12 = $10 << 4;
 $13 = (_malloc($12)|0);
 $14 = ((($3)) + 28|0);
 HEAP32[$14>>2] = $13;
 $15 = ($13|0)==(0|0);
 if ($15) {
  _free($3);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$i>>2] = 0;
 $17 = 0;$cp$0 = $2;$l$0 = 1;
 while(1) {
  $16 = ($17|0)<($10|0);
  if (!($16)) {
   label = 10;
   break;
  }
  $18 = ($l$0|0)>(0);
  if (!($18)) {
   break;
  }
  $19 = (($13) + ($17<<4)|0);
  $20 = (_safe_itf8_get_820($cp$0,$0,$19)|0);
  $21 = (($17) + 1)|0;
  HEAP32[$i>>2] = $21;
  $22 = (($cp$0) + ($20)|0);
  $17 = $21;$cp$0 = $22;$l$0 = $20;
 }
 if ((label|0) == 10) {
  $23 = ($l$0|0)<(1);
  if (!($23)) {
   $24 = (_safe_itf8_get_820($cp$0,$0,$i)|0);
   $25 = (($cp$0) + ($24)|0);
   $26 = HEAP32[$i>>2]|0;
   $27 = ($26|0)==($10|0);
   if (!($27)) {
    _fprintf(9772,22321,$vararg_buffer1);
    _free($3);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $28 = ($10|0)==(0);
   if ($28) {
    $29 = ((($3)) + 12|0);
    HEAP32[$29>>2] = 87;
    $$0 = $3;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$i>>2] = 0;
   $31 = 0;$cp$1 = $25;$max_len$0 = 0;
   while(1) {
    $30 = ($31|0)<($10|0);
    if (!($30)) {
     label = 20;
     break;
    }
    $32 = (((($13) + ($31<<4)|0)) + 12|0);
    $33 = (_safe_itf8_get_820($cp$1,$0,$32)|0);
    $34 = ($33|0)<(1);
    if ($34) {
     break;
    }
    $35 = HEAP32[$32>>2]|0;
    $36 = ($max_len$0|0)<($35|0);
    $$max_len$0 = $36 ? $35 : $max_len$0;
    $37 = (($31) + 1)|0;
    HEAP32[$i>>2] = $37;
    $38 = (($cp$1) + ($33)|0);
    $31 = $37;$cp$1 = $38;$max_len$0 = $$max_len$0;
   }
   if ((label|0) == 20) {
    $39 = $cp$1;
    $40 = $data;
    $41 = (($39) - ($40))|0;
    $42 = ($41|0)==($size|0);
    $43 = ($max_len$0|0)<($10|0);
    $or$cond = $42 & $43;
    if ($or$cond) {
     _qsort($13,$10,16,88);
     $44 = 0;$last_len$0 = 0;$val$0 = -1;
     while(1) {
      HEAP32[$i>>2] = $44;
      $45 = ($44|0)<($10|0);
      if (!($45)) {
       $55 = 0;$j$0 = 0;$last_len$3 = 0;
       break;
      }
      $46 = (($val$0) + 1)|0;
      $47 = (((($13) + ($44<<4)|0)) + 12|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)>($last_len$0|0);
      L36: do {
       if ($49) {
        $last_len$1 = $last_len$0;$val$1 = $46;
        while(1) {
         $50 = ($48|0)>($last_len$1|0);
         if (!($50)) {
          $last_len$2 = $last_len$1;$val$2 = $val$1;
          break L36;
         }
         $51 = $val$1 << 1;
         $52 = (($last_len$1) + 1)|0;
         $last_len$1 = $52;$val$1 = $51;
        }
       } else {
        $last_len$2 = $last_len$0;$val$2 = $46;
       }
      } while(0);
      $53 = (((($13) + ($44<<4)|0)) + 8|0);
      HEAP32[$53>>2] = $val$2;
      $54 = (($44) + 1)|0;
      $44 = $54;$last_len$0 = $last_len$2;$val$0 = $val$2;
     }
     while(1) {
      HEAP32[$i>>2] = $55;
      $56 = ($55|0)<($10|0);
      if (!($56)) {
       break;
      }
      $57 = (((($13) + ($55<<4)|0)) + 12|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = ($58|0)>($last_len$3|0);
      if ($59) {
       $60 = (((($13) + ($55<<4)|0)) + 8|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = (($61) - ($55))|0;
       $j$1 = $62;$last_len$4 = $58;
      } else {
       $j$1 = $j$0;$last_len$4 = $last_len$3;
      }
      $63 = (((($13) + ($55<<4)|0)) + 4|0);
      HEAP32[$63>>2] = $j$1;
      $64 = (($55) + 1)|0;
      $55 = $64;$j$0 = $j$1;$last_len$3 = $last_len$4;
     }
     switch ($option|0) {
     case 4: case 3:  {
      $65 = HEAP32[$14>>2]|0;
      $66 = ((($65)) + 12|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0);
      $69 = ((($3)) + 12|0);
      if ($68) {
       HEAP32[$69>>2] = 89;
       $$0 = $3;
       STACKTOP = sp;return ($$0|0);
      } else {
       HEAP32[$69>>2] = 90;
       $$0 = $3;
       STACKTOP = sp;return ($$0|0);
      }
      break;
     }
     case 5:  {
      _abort();
      // unreachable;
      break;
     }
     default: {
      $70 = HEAP32[$14>>2]|0;
      $71 = ((($70)) + 12|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ($72|0)==(0);
      $74 = ((($3)) + 12|0);
      if ($73) {
       HEAP32[$74>>2] = 91;
       $$0 = $3;
       STACKTOP = sp;return ($$0|0);
      } else {
       HEAP32[$74>>2] = 92;
       $$0 = $3;
       STACKTOP = sp;return ($$0|0);
      }
     }
     }
    }
   }
   _fprintf(9772,22321,$vararg_buffer3);
   _free($3);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _fprintf(9772,22321,$vararg_buffer);
 _free($3);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _code_sort($vp1,$vp2) {
 $vp1 = $vp1|0;
 $vp2 = $vp2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($vp1)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($vp2)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  $6 = HEAP32[$vp1>>2]|0;
  $7 = HEAP32[$vp2>>2]|0;
  $8 = (($6) - ($7))|0;
  $$0 = $8;
  return ($$0|0);
 } else {
  $5 = (($1) - ($3))|0;
  $$0 = $5;
  return ($$0|0);
 }
 return (0)|0;
}
function _cram_huffman_encode_char0($slice,$c,$in,$in_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $in_size = $in_size|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _cram_huffman_encode_char($slice,$c,$in,$in_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $in_size = $in_size|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $code$0 = 0, $code$0$in = 0, $i$0 = 0, $len$0 = 0, $len$0$in = 0, $r$0 = 0;
 var $syms$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 24|0);
 $1 = ((($c)) + 4|0);
 $2 = ((($c)) + 28|0);
 $$01 = $in_size;$r$0 = 0;$syms$0 = $in;
 while(1) {
  $3 = (($$01) + -1)|0;
  $4 = ($$01|0)==(0);
  if ($4) {
   $$0 = $r$0;
   label = 14;
   break;
  }
  $5 = ((($syms$0)) + 1|0);
  $6 = HEAP8[$syms$0>>0]|0;
  $7 = $6&255;
  $8 = ($6<<24>>24)>(-1);
  if ($8) {
   $10 = (($7) + 1)|0;
   $11 = (((($c)) + 32|0) + ($10<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$0>>2]|0;
   $14 = (($13) + ($12<<4)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==($7|0);
   if (!($16)) {
    label = 6;
    break;
   }
   $17 = (((($13) + ($12<<4)|0)) + 8|0);
   $18 = (((($13) + ($12<<4)|0)) + 12|0);
   $code$0$in = $17;$len$0$in = $18;
  } else {
   $9 = HEAP32[$2>>2]|0;
   $i$0 = 0;
   while(1) {
    $19 = ($i$0|0)<($9|0);
    if (!($19)) {
     break;
    }
    $20 = HEAP32[$0>>2]|0;
    $21 = (($20) + ($i$0<<4)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==($7|0);
    if ($23) {
     break;
    }
    $24 = (($i$0) + 1)|0;
    $i$0 = $24;
   }
   $25 = ($i$0|0)==($9|0);
   if ($25) {
    $$0 = -1;
    label = 14;
    break;
   }
   $26 = HEAP32[$0>>2]|0;
   $27 = (((($26) + ($i$0<<4)|0)) + 8|0);
   $28 = (((($26) + ($i$0<<4)|0)) + 12|0);
   $code$0$in = $27;$len$0$in = $28;
  }
  $len$0 = HEAP32[$len$0$in>>2]|0;
  $code$0 = HEAP32[$code$0$in>>2]|0;
  $29 = HEAP32[$1>>2]|0;
  $30 = (_store_bits_MSB($29,$code$0,$len$0)|0);
  $31 = $r$0 | $30;
  $$01 = $3;$r$0 = $31;$syms$0 = $5;
 }
 if ((label|0) == 6) {
  ___assert_fail((22354|0),(22217|0),1065,(22390|0));
  // unreachable;
 }
 else if ((label|0) == 14) {
  return ($$0|0);
 }
 return (0)|0;
}
function _cram_huffman_encode_int0($slice,$c,$in,$in_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $in_size = $in_size|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _cram_huffman_encode_int($slice,$c,$in,$in_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $in_size = $in_size|0;
 var $$0 = 0, $$01 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $code$0 = 0, $code$0$in = 0, $i$0 = 0, $len$0 = 0, $len$0$in = 0, $r$0 = 0;
 var $syms$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 24|0);
 $1 = ((($c)) + 4|0);
 $2 = ((($c)) + 28|0);
 $$01 = $in_size;$r$0 = 0;$syms$0 = $in;
 while(1) {
  $3 = (($$01) + -1)|0;
  $4 = ($$01|0)==(0);
  if ($4) {
   $$0 = $r$0;
   label = 14;
   break;
  }
  $5 = ((($syms$0)) + 4|0);
  $6 = HEAP32[$syms$0>>2]|0;
  $$off = (($6) + 1)|0;
  $7 = ($$off>>>0)<(129);
  if ($7) {
   $9 = (($6) + 1)|0;
   $10 = (((($c)) + 32|0) + ($9<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$0>>2]|0;
   $13 = (($12) + ($11<<4)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==($6|0);
   if (!($15)) {
    label = 6;
    break;
   }
   $16 = (((($12) + ($11<<4)|0)) + 8|0);
   $17 = (((($12) + ($11<<4)|0)) + 12|0);
   $code$0$in = $16;$len$0$in = $17;
  } else {
   $8 = HEAP32[$2>>2]|0;
   $i$0 = 0;
   while(1) {
    $18 = ($i$0|0)<($8|0);
    if (!($18)) {
     break;
    }
    $19 = HEAP32[$0>>2]|0;
    $20 = (($19) + ($i$0<<4)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==($6|0);
    if ($22) {
     break;
    }
    $23 = (($i$0) + 1)|0;
    $i$0 = $23;
   }
   $24 = ($i$0|0)==($8|0);
   if ($24) {
    $$0 = -1;
    label = 14;
    break;
   }
   $25 = HEAP32[$0>>2]|0;
   $26 = (((($25) + ($i$0<<4)|0)) + 8|0);
   $27 = (((($25) + ($i$0<<4)|0)) + 12|0);
   $code$0$in = $26;$len$0$in = $27;
  }
  $len$0 = HEAP32[$len$0$in>>2]|0;
  $code$0 = HEAP32[$code$0$in>>2]|0;
  $28 = HEAP32[$1>>2]|0;
  $29 = (_store_bits_MSB($28,$code$0,$len$0)|0);
  $30 = $r$0 | $29;
  $$01 = $3;$r$0 = $30;$syms$0 = $5;
 }
 if ((label|0) == 6) {
  ___assert_fail((22354|0),(22217|0),1102,(22415|0));
  // unreachable;
 }
 else if ((label|0) == 14) {
  return ($$0|0);
 }
 return (0)|0;
}
function _cram_huffman_encode_free($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($c)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  _free($2);
 }
 _free($c);
 return;
}
function _cram_huffman_encode_store($c,$b,$prefix,$version) {
 $c = $c|0;
 $b = $b|0;
 $prefix = $prefix|0;
 $version = $version|0;
 var $$0 = 0, $$0$i = 0, $$01$lcssa$i = 0, $$014$i = 0, $$1$lcssa$i = 0, $$pn$i = 0, $$pn15$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$0 = 0;
 var $i$1 = 0, $len$0 = 0, $tp$0 = 0, $tp$1 = 0, $w$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($c)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3*6)|0;
 $5 = (($4) + 16)|0;
 $6 = (_malloc($5)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = -1;
  return ($$0|0);
 }
 $8 = ($prefix|0)==(0|0);
 if ($8) {
  $len$0 = 0;
 } else {
  $9 = $prefix;
  $10 = $9 & 3;
  $11 = ($10|0)==(0);
  L6: do {
   if ($11) {
    $$01$lcssa$i = $prefix;
    label = 6;
   } else {
    $$014$i = $prefix;$310 = $9;
    while(1) {
     $12 = HEAP8[$$014$i>>0]|0;
     $13 = ($12<<24>>24)==(0);
     if ($13) {
      $$pn$i = $310;
      break L6;
     }
     $14 = ((($$014$i)) + 1|0);
     $15 = $14;
     $16 = $15 & 3;
     $17 = ($16|0)==(0);
     if ($17) {
      $$01$lcssa$i = $14;
      label = 6;
      break;
     } else {
      $$014$i = $14;$310 = $15;
     }
    }
   }
  } while(0);
  if ((label|0) == 6) {
   $w$0$i = $$01$lcssa$i;
   while(1) {
    $18 = HEAP32[$w$0$i>>2]|0;
    $19 = (($18) + -16843009)|0;
    $20 = $18 & -2139062144;
    $21 = $20 ^ -2139062144;
    $22 = $21 & $19;
    $23 = ($22|0)==(0);
    $24 = ((($w$0$i)) + 4|0);
    if ($23) {
     $w$0$i = $24;
    } else {
     break;
    }
   }
   $25 = $18&255;
   $26 = ($25<<24>>24)==(0);
   if ($26) {
    $$1$lcssa$i = $w$0$i;
   } else {
    $$pn15$i = $w$0$i;
    while(1) {
     $27 = ((($$pn15$i)) + 1|0);
     $$pre$i = HEAP8[$27>>0]|0;
     $28 = ($$pre$i<<24>>24)==(0);
     if ($28) {
      $$1$lcssa$i = $27;
      break;
     } else {
      $$pn15$i = $27;
     }
    }
   }
   $29 = $$1$lcssa$i;
   $$pn$i = $29;
  }
  $$0$i = (($$pn$i) - ($9))|0;
  $30 = ((($b)) + 36|0);
  $31 = ((($b)) + 40|0);
  $32 = ((($b)) + 32|0);
  while(1) {
   $33 = HEAP32[$30>>2]|0;
   $34 = HEAP32[$31>>2]|0;
   $35 = (($34) + ($$0$i))|0;
   $36 = ($33>>>0)>($35>>>0);
   if ($36) {
    break;
   }
   $37 = ($33|0)==(0);
   $38 = (+($33>>>0));
   $39 = $38 * 1.5;
   $40 = (~~(($39))>>>0);
   $41 = $37 ? 1024 : $40;
   HEAP32[$30>>2] = $41;
   $42 = HEAP32[$32>>2]|0;
   $43 = (_realloc($42,$41)|0);
   HEAP32[$32>>2] = $43;
  }
  $44 = HEAP32[$32>>2]|0;
  $45 = (($44) + ($34)|0);
  _memcpy(($45|0),($prefix|0),($$0$i|0))|0;
  $46 = HEAP32[$31>>2]|0;
  $47 = (($46) + ($$0$i))|0;
  HEAP32[$31>>2] = $47;
  $len$0 = $$0$i;
 }
 $48 = HEAP32[$2>>2]|0;
 $49 = ($48>>>0)>(127);
 do {
  if ($49) {
   $51 = ($48>>>0)>(16383);
   if (!($51)) {
    $52 = $48 >>> 8;
    $53 = $52 | 128;
    $54 = $53&255;
    HEAP8[$6>>0] = $54;
    $55 = HEAP32[$2>>2]|0;
    $56 = $55&255;
    $57 = ((($6)) + 1|0);
    HEAP8[$57>>0] = $56;
    $104 = 2;
    break;
   }
   $58 = ($48>>>0)>(2097151);
   if (!($58)) {
    $59 = $48 >>> 16;
    $60 = $59 | 192;
    $61 = $60&255;
    HEAP8[$6>>0] = $61;
    $62 = HEAP32[$2>>2]|0;
    $63 = $62 >>> 8;
    $64 = $63&255;
    $65 = ((($6)) + 1|0);
    HEAP8[$65>>0] = $64;
    $66 = HEAP32[$2>>2]|0;
    $67 = $66&255;
    $68 = ((($6)) + 2|0);
    HEAP8[$68>>0] = $67;
    $104 = 3;
    break;
   }
   $69 = ($48>>>0)>(268435455);
   if ($69) {
    $84 = $48 >>> 28;
    $85 = $84 | 240;
    $86 = $85&255;
    HEAP8[$6>>0] = $86;
    $87 = HEAP32[$2>>2]|0;
    $88 = $87 >>> 20;
    $89 = $88&255;
    $90 = ((($6)) + 1|0);
    HEAP8[$90>>0] = $89;
    $91 = HEAP32[$2>>2]|0;
    $92 = $91 >>> 12;
    $93 = $92&255;
    $94 = ((($6)) + 2|0);
    HEAP8[$94>>0] = $93;
    $95 = HEAP32[$2>>2]|0;
    $96 = $95 >>> 4;
    $97 = $96&255;
    $98 = ((($6)) + 3|0);
    HEAP8[$98>>0] = $97;
    $99 = HEAP32[$2>>2]|0;
    $100 = $99 & 15;
    $101 = $100&255;
    $102 = ((($6)) + 4|0);
    HEAP8[$102>>0] = $101;
    $104 = 5;
    break;
   } else {
    $70 = $48 >>> 24;
    $71 = $70 | 224;
    $72 = $71&255;
    HEAP8[$6>>0] = $72;
    $73 = HEAP32[$2>>2]|0;
    $74 = $73 >>> 16;
    $75 = $74&255;
    $76 = ((($6)) + 1|0);
    HEAP8[$76>>0] = $75;
    $77 = HEAP32[$2>>2]|0;
    $78 = $77 >>> 8;
    $79 = $78&255;
    $80 = ((($6)) + 2|0);
    HEAP8[$80>>0] = $79;
    $81 = HEAP32[$2>>2]|0;
    $82 = $81&255;
    $83 = ((($6)) + 3|0);
    HEAP8[$83>>0] = $82;
    $104 = 4;
    break;
   }
  } else {
   $50 = $48&255;
   HEAP8[$6>>0] = $50;
   $104 = 1;
  }
 } while(0);
 $103 = (($6) + ($104)|0);
 $i$0 = 0;$tp$0 = $103;
 while(1) {
  $105 = HEAP32[$2>>2]|0;
  $106 = ($i$0|0)<($105|0);
  if (!($106)) {
   break;
  }
  $107 = (($1) + ($i$0<<4)|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = ($108>>>0)>(127);
  do {
   if ($109) {
    $111 = ($108>>>0)>(16383);
    if (!($111)) {
     $112 = $108 >>> 8;
     $113 = $112 | 128;
     $114 = $113&255;
     HEAP8[$tp$0>>0] = $114;
     $115 = HEAP32[$107>>2]|0;
     $116 = $115&255;
     $117 = ((($tp$0)) + 1|0);
     HEAP8[$117>>0] = $116;
     $164 = 2;
     break;
    }
    $118 = ($108>>>0)>(2097151);
    if (!($118)) {
     $119 = $108 >>> 16;
     $120 = $119 | 192;
     $121 = $120&255;
     HEAP8[$tp$0>>0] = $121;
     $122 = HEAP32[$107>>2]|0;
     $123 = $122 >>> 8;
     $124 = $123&255;
     $125 = ((($tp$0)) + 1|0);
     HEAP8[$125>>0] = $124;
     $126 = HEAP32[$107>>2]|0;
     $127 = $126&255;
     $128 = ((($tp$0)) + 2|0);
     HEAP8[$128>>0] = $127;
     $164 = 3;
     break;
    }
    $129 = ($108>>>0)>(268435455);
    if ($129) {
     $144 = $108 >>> 28;
     $145 = $144 | 240;
     $146 = $145&255;
     HEAP8[$tp$0>>0] = $146;
     $147 = HEAP32[$107>>2]|0;
     $148 = $147 >>> 20;
     $149 = $148&255;
     $150 = ((($tp$0)) + 1|0);
     HEAP8[$150>>0] = $149;
     $151 = HEAP32[$107>>2]|0;
     $152 = $151 >>> 12;
     $153 = $152&255;
     $154 = ((($tp$0)) + 2|0);
     HEAP8[$154>>0] = $153;
     $155 = HEAP32[$107>>2]|0;
     $156 = $155 >>> 4;
     $157 = $156&255;
     $158 = ((($tp$0)) + 3|0);
     HEAP8[$158>>0] = $157;
     $159 = HEAP32[$107>>2]|0;
     $160 = $159 & 15;
     $161 = $160&255;
     $162 = ((($tp$0)) + 4|0);
     HEAP8[$162>>0] = $161;
     $164 = 5;
     break;
    } else {
     $130 = $108 >>> 24;
     $131 = $130 | 224;
     $132 = $131&255;
     HEAP8[$tp$0>>0] = $132;
     $133 = HEAP32[$107>>2]|0;
     $134 = $133 >>> 16;
     $135 = $134&255;
     $136 = ((($tp$0)) + 1|0);
     HEAP8[$136>>0] = $135;
     $137 = HEAP32[$107>>2]|0;
     $138 = $137 >>> 8;
     $139 = $138&255;
     $140 = ((($tp$0)) + 2|0);
     HEAP8[$140>>0] = $139;
     $141 = HEAP32[$107>>2]|0;
     $142 = $141&255;
     $143 = ((($tp$0)) + 3|0);
     HEAP8[$143>>0] = $142;
     $164 = 4;
     break;
    }
   } else {
    $110 = $108&255;
    HEAP8[$tp$0>>0] = $110;
    $164 = 1;
   }
  } while(0);
  $163 = (($tp$0) + ($164)|0);
  $165 = (($i$0) + 1)|0;
  $i$0 = $165;$tp$0 = $163;
 }
 $166 = ($105>>>0)>(127);
 do {
  if ($166) {
   $168 = ($105>>>0)>(16383);
   if (!($168)) {
    $169 = $105 >>> 8;
    $170 = $169 | 128;
    $171 = $170&255;
    HEAP8[$tp$0>>0] = $171;
    $172 = HEAP32[$2>>2]|0;
    $173 = $172&255;
    $174 = ((($tp$0)) + 1|0);
    HEAP8[$174>>0] = $173;
    $221 = 2;
    break;
   }
   $175 = ($105>>>0)>(2097151);
   if (!($175)) {
    $176 = $105 >>> 16;
    $177 = $176 | 192;
    $178 = $177&255;
    HEAP8[$tp$0>>0] = $178;
    $179 = HEAP32[$2>>2]|0;
    $180 = $179 >>> 8;
    $181 = $180&255;
    $182 = ((($tp$0)) + 1|0);
    HEAP8[$182>>0] = $181;
    $183 = HEAP32[$2>>2]|0;
    $184 = $183&255;
    $185 = ((($tp$0)) + 2|0);
    HEAP8[$185>>0] = $184;
    $221 = 3;
    break;
   }
   $186 = ($105>>>0)>(268435455);
   if ($186) {
    $201 = $105 >>> 28;
    $202 = $201 | 240;
    $203 = $202&255;
    HEAP8[$tp$0>>0] = $203;
    $204 = HEAP32[$2>>2]|0;
    $205 = $204 >>> 20;
    $206 = $205&255;
    $207 = ((($tp$0)) + 1|0);
    HEAP8[$207>>0] = $206;
    $208 = HEAP32[$2>>2]|0;
    $209 = $208 >>> 12;
    $210 = $209&255;
    $211 = ((($tp$0)) + 2|0);
    HEAP8[$211>>0] = $210;
    $212 = HEAP32[$2>>2]|0;
    $213 = $212 >>> 4;
    $214 = $213&255;
    $215 = ((($tp$0)) + 3|0);
    HEAP8[$215>>0] = $214;
    $216 = HEAP32[$2>>2]|0;
    $217 = $216 & 15;
    $218 = $217&255;
    $219 = ((($tp$0)) + 4|0);
    HEAP8[$219>>0] = $218;
    $221 = 5;
    break;
   } else {
    $187 = $105 >>> 24;
    $188 = $187 | 224;
    $189 = $188&255;
    HEAP8[$tp$0>>0] = $189;
    $190 = HEAP32[$2>>2]|0;
    $191 = $190 >>> 16;
    $192 = $191&255;
    $193 = ((($tp$0)) + 1|0);
    HEAP8[$193>>0] = $192;
    $194 = HEAP32[$2>>2]|0;
    $195 = $194 >>> 8;
    $196 = $195&255;
    $197 = ((($tp$0)) + 2|0);
    HEAP8[$197>>0] = $196;
    $198 = HEAP32[$2>>2]|0;
    $199 = $198&255;
    $200 = ((($tp$0)) + 3|0);
    HEAP8[$200>>0] = $199;
    $221 = 4;
    break;
   }
  } else {
   $167 = $105&255;
   HEAP8[$tp$0>>0] = $167;
   $221 = 1;
  }
 } while(0);
 $220 = (($tp$0) + ($221)|0);
 $i$1 = 0;$tp$1 = $220;
 while(1) {
  $222 = HEAP32[$2>>2]|0;
  $223 = ($i$1|0)<($222|0);
  if (!($223)) {
   break;
  }
  $224 = (((($1) + ($i$1<<4)|0)) + 12|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = ($225>>>0)>(127);
  do {
   if ($226) {
    $228 = ($225>>>0)>(16383);
    if (!($228)) {
     $229 = $225 >>> 8;
     $230 = $229 | 128;
     $231 = $230&255;
     HEAP8[$tp$1>>0] = $231;
     $232 = HEAP32[$224>>2]|0;
     $233 = $232&255;
     $234 = ((($tp$1)) + 1|0);
     HEAP8[$234>>0] = $233;
     $281 = 2;
     break;
    }
    $235 = ($225>>>0)>(2097151);
    if (!($235)) {
     $236 = $225 >>> 16;
     $237 = $236 | 192;
     $238 = $237&255;
     HEAP8[$tp$1>>0] = $238;
     $239 = HEAP32[$224>>2]|0;
     $240 = $239 >>> 8;
     $241 = $240&255;
     $242 = ((($tp$1)) + 1|0);
     HEAP8[$242>>0] = $241;
     $243 = HEAP32[$224>>2]|0;
     $244 = $243&255;
     $245 = ((($tp$1)) + 2|0);
     HEAP8[$245>>0] = $244;
     $281 = 3;
     break;
    }
    $246 = ($225>>>0)>(268435455);
    if ($246) {
     $261 = $225 >>> 28;
     $262 = $261 | 240;
     $263 = $262&255;
     HEAP8[$tp$1>>0] = $263;
     $264 = HEAP32[$224>>2]|0;
     $265 = $264 >>> 20;
     $266 = $265&255;
     $267 = ((($tp$1)) + 1|0);
     HEAP8[$267>>0] = $266;
     $268 = HEAP32[$224>>2]|0;
     $269 = $268 >>> 12;
     $270 = $269&255;
     $271 = ((($tp$1)) + 2|0);
     HEAP8[$271>>0] = $270;
     $272 = HEAP32[$224>>2]|0;
     $273 = $272 >>> 4;
     $274 = $273&255;
     $275 = ((($tp$1)) + 3|0);
     HEAP8[$275>>0] = $274;
     $276 = HEAP32[$224>>2]|0;
     $277 = $276 & 15;
     $278 = $277&255;
     $279 = ((($tp$1)) + 4|0);
     HEAP8[$279>>0] = $278;
     $281 = 5;
     break;
    } else {
     $247 = $225 >>> 24;
     $248 = $247 | 224;
     $249 = $248&255;
     HEAP8[$tp$1>>0] = $249;
     $250 = HEAP32[$224>>2]|0;
     $251 = $250 >>> 16;
     $252 = $251&255;
     $253 = ((($tp$1)) + 1|0);
     HEAP8[$253>>0] = $252;
     $254 = HEAP32[$224>>2]|0;
     $255 = $254 >>> 8;
     $256 = $255&255;
     $257 = ((($tp$1)) + 2|0);
     HEAP8[$257>>0] = $256;
     $258 = HEAP32[$224>>2]|0;
     $259 = $258&255;
     $260 = ((($tp$1)) + 3|0);
     HEAP8[$260>>0] = $259;
     $281 = 4;
     break;
    }
   } else {
    $227 = $225&255;
    HEAP8[$tp$1>>0] = $227;
    $281 = 1;
   }
  } while(0);
  $280 = (($tp$1) + ($281)|0);
  $282 = (($i$1) + 1)|0;
  $i$1 = $282;$tp$1 = $280;
 }
 $283 = HEAP32[$c>>2]|0;
 $284 = (_itf8_put_blk($b,$283)|0);
 $285 = $tp$1;
 $286 = $6;
 $287 = (($285) - ($286))|0;
 $288 = (_itf8_put_blk($b,$287)|0);
 $289 = ((($b)) + 36|0);
 $290 = ((($b)) + 40|0);
 $291 = ((($b)) + 32|0);
 while(1) {
  $292 = HEAP32[$289>>2]|0;
  $293 = HEAP32[$290>>2]|0;
  $294 = (($293) + ($287))|0;
  $295 = ($292>>>0)>($294>>>0);
  if ($295) {
   break;
  }
  $296 = ($292|0)==(0);
  $297 = (+($292>>>0));
  $298 = $297 * 1.5;
  $299 = (~~(($298))>>>0);
  $300 = $296 ? 1024 : $299;
  HEAP32[$289>>2] = $300;
  $301 = HEAP32[$291>>2]|0;
  $302 = (_realloc($301,$300)|0);
  HEAP32[$291>>2] = $302;
 }
 $303 = (($len$0) + ($284))|0;
 $304 = (($303) + ($288))|0;
 $305 = HEAP32[$291>>2]|0;
 $306 = (($305) + ($293)|0);
 _memcpy(($306|0),($6|0),($287|0))|0;
 $307 = HEAP32[$290>>2]|0;
 $308 = (($307) + ($287))|0;
 HEAP32[$290>>2] = $308;
 $309 = (($304) + ($287))|0;
 _free($6);
 $$0 = $309;
 return ($$0|0);
}
function _cram_huffman_encode_init($st,$option,$dat,$version) {
 $st = $st|0;
 $option = $option|0;
 $dat = $dat|0;
 $version = $version|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$73 = 0, $$low2$0 = 0, $$off = 0, $$pre = 0, $$pre$pre = 0, $$pre39 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $code$0 = 0, $code$1 = 0, $code_len$0 = 0, $freqs$0 = 0, $freqs$1 = 0, $freqs$2 = 0, $freqs$3 = 0, $freqs$4 = 0, $freqs$5 = 0, $freqs$6 = 0, $i$0 = 0;
 var $i$1 = 0, $i$1$ind2$0 = 0, $i$2 = 0, $i$2$pn = 0, $i$3 = 0, $i$4 = 0, $ind1$0 = 0, $ind1$2 = 0, $ind2$0 = 0, $ind2$3 = 0, $k$0 = 0, $k$0$in = 0, $k1$0 = 0, $len$0 = 0, $len$1 = 0, $low1$0 = 0, $low1$2 = 0, $low2$0 = 0, $low2$3 = 0, $nvals$0 = 0;
 var $nvals$1 = 0, $nvals$2 = 0, $nvals$3 = 0, $nvals$4 = 0, $nvals$5 = 0, $option$off = 0, $or$cond = 0, $req$0$i = 0, $switch = 0, $vals$0 = 0, $vals$1 = 0, $vals$2 = 0, $vals$3 = 0, $vals$4 = 0, $vals$5 = 0, $vals$6 = 0, $vals_alloc$0 = 0, $vals_alloc$1 = 0, $vals_alloc$2 = 0, $vals_alloc$3 = 0;
 var $vals_alloc$4 = 0, $vals_alloc$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(548)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 3;
 $freqs$0 = 0;$i$0 = 0;$nvals$0 = 0;$vals$0 = 0;$vals_alloc$0 = 0;
 while(1) {
  $2 = ($i$0|0)<(1024);
  if (!($2)) {
   label = 16;
   break;
  }
  $3 = (($st) + ($i$0<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if ($5) {
   $freqs$2 = $freqs$0;$nvals$1 = $nvals$0;$vals$2 = $vals$0;$vals_alloc$2 = $vals_alloc$0;
  } else {
   $6 = ($nvals$0|0)<($vals_alloc$0|0);
   if ($6) {
    $freqs$1 = $freqs$0;$vals$1 = $vals$0;$vals_alloc$1 = $vals_alloc$0;
   } else {
    $7 = ($vals_alloc$0|0)==(0);
    $8 = $vals_alloc$0 << 1;
    $$ = $7 ? 1024 : $8;
    $9 = $$ << 2;
    $10 = (_realloc($vals$0,$9)|0);
    $11 = (_realloc($freqs$0,$9)|0);
    $12 = ($10|0)==(0|0);
    if ($12) {
     label = 9;
     break;
    }
    $13 = ($11|0)==(0|0);
    if ($13) {
     label = 8;
     break;
    } else {
     $freqs$1 = $11;$vals$1 = $10;$vals_alloc$1 = $$;
    }
   }
   $15 = (($vals$1) + ($nvals$0<<2)|0);
   HEAP32[$15>>2] = $i$0;
   $16 = HEAP32[$3>>2]|0;
   $17 = (($freqs$1) + ($nvals$0<<2)|0);
   HEAP32[$17>>2] = $16;
   $18 = HEAP32[$3>>2]|0;
   $19 = ($18|0)>(0);
   if (!($19)) {
    label = 13;
    break;
   }
   $20 = (($nvals$0) + 1)|0;
   $freqs$2 = $freqs$1;$nvals$1 = $20;$vals$2 = $vals$1;$vals_alloc$2 = $vals_alloc$1;
  }
  $21 = (($i$0) + 1)|0;
  $freqs$0 = $freqs$2;$i$0 = $21;$nvals$0 = $nvals$1;$vals$0 = $vals$2;$vals_alloc$0 = $vals_alloc$2;
 }
 if ((label|0) == 8) {
  _free($10);
 }
 else if ((label|0) == 9) {
  $14 = ($11|0)==(0|0);
  if (!($14)) {
   _free($11);
  }
 }
 else if ((label|0) == 13) {
  ___assert_fail((22439|0),(22217|0),1213,(22456|0));
  // unreachable;
 }
 else if ((label|0) == 16) {
  $22 = ((($st)) + 4096|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  L17: do {
   if ($24) {
    $freqs$6 = $freqs$0;$nvals$4 = $nvals$0;$vals$6 = $vals$0;
   } else {
    $26 = $23;$freqs$3 = $freqs$0;$k1$0 = 0;$nvals$2 = $nvals$0;$vals$3 = $vals$0;$vals_alloc$3 = $vals_alloc$0;
    while(1) {
     $25 = HEAP32[$26>>2]|0;
     $27 = ($k1$0|0)==($25|0);
     if ($27) {
      $freqs$6 = $freqs$3;$nvals$4 = $nvals$2;$vals$6 = $vals$3;
      break L17;
     }
     $28 = $k1$0 >>> 4;
     $29 = ((($26)) + 16|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($30) + ($28<<2)|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = $k1$0 << 1;
     $34 = $33 & 30;
     $35 = 3 << $34;
     $36 = $32 & $35;
     $37 = ($36|0)==(0);
     if ($37) {
      $38 = ($nvals$2|0)<($vals_alloc$3|0);
      if ($38) {
       $47 = $26;$freqs$4 = $freqs$3;$vals$4 = $vals$3;$vals_alloc$4 = $vals_alloc$3;
      } else {
       $39 = ($vals_alloc$3|0)==(0);
       $40 = $vals_alloc$3 << 1;
       $$73 = $39 ? 1024 : $40;
       $41 = $$73 << 2;
       $42 = (_realloc($vals$3,$41)|0);
       $43 = (_realloc($freqs$3,$41)|0);
       $44 = ($42|0)==(0|0);
       $45 = ($43|0)==(0|0);
       $or$cond = $44 | $45;
       if ($or$cond) {
        $$0 = 0;
        label = 66;
        break;
       }
       $$pre39 = HEAP32[$22>>2]|0;
       $47 = $$pre39;$freqs$4 = $43;$vals$4 = $42;$vals_alloc$4 = $$73;
      }
      $46 = ((($47)) + 20|0);
      $48 = HEAP32[$46>>2]|0;
      $49 = (($48) + ($k1$0<<2)|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = (($vals$4) + ($nvals$2<<2)|0);
      HEAP32[$51>>2] = $50;
      $52 = HEAP32[$22>>2]|0;
      $53 = ((($52)) + 24|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = (($54) + ($k1$0<<2)|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = (($freqs$4) + ($nvals$2<<2)|0);
      HEAP32[$57>>2] = $56;
      $58 = ($56|0)>(0);
      if (!($58)) {
       label = 23;
       break;
      }
      $59 = (($nvals$2) + 1)|0;
      $$pre$pre = HEAP32[$22>>2]|0;
      $$pre = $$pre$pre;$freqs$5 = $freqs$4;$nvals$3 = $59;$vals$5 = $vals$4;$vals_alloc$5 = $vals_alloc$4;
     } else {
      $$pre = $26;$freqs$5 = $freqs$3;$nvals$3 = $nvals$2;$vals$5 = $vals$3;$vals_alloc$5 = $vals_alloc$3;
     }
     $60 = (($k1$0) + 1)|0;
     $26 = $$pre;$freqs$3 = $freqs$5;$k1$0 = $60;$nvals$2 = $nvals$3;$vals$3 = $vals$5;$vals_alloc$3 = $vals_alloc$5;
    }
    if ((label|0) == 23) {
     ___assert_fail((22481|0),(22217|0),1234,(22456|0));
     // unreachable;
    }
    else if ((label|0) == 66) {
     return ($$0|0);
    }
   }
  } while(0);
  $61 = ($nvals$4|0)>(0);
  if (!($61)) {
   ___assert_fail((22498|0),(22217|0),1242,(22456|0));
   // unreachable;
  }
  $62 = $nvals$4 << 3;
  $63 = (_realloc($freqs$6,$62)|0);
  $64 = $nvals$4 << 1;
  $65 = ($64>>>0)>(65535);
  if ($65) {
   $66 = (($62>>>0) / ($64>>>0))&-1;
   $67 = ($66|0)==(4);
   $$$i = $67 ? $62 : -1;
   $req$0$i = $$$i;
  } else {
   $req$0$i = $62;
  }
  $68 = (_malloc($req$0$i)|0);
  $69 = ($68|0)==(0|0);
  if ($69) {
   $$0 = 0;
   return ($$0|0);
  }
  $70 = ((($68)) + -4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $71 & 3;
  $73 = ($72|0)==(0);
  if (!($73)) {
   _memset(($68|0),0,($req$0$i|0))|0;
  }
  $74 = ($63|0)==(0|0);
  if ($74) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $nvals$5 = $nvals$4;
  }
  while(1) {
   $i$1 = 0;$ind1$0 = 0;$ind2$0 = 0;$low1$0 = 2147483647;$low2$0 = 2147483647;
   while(1) {
    $75 = ($i$1|0)<($nvals$5|0);
    if (!($75)) {
     break;
    }
    $76 = (($63) + ($i$1<<2)|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)<(0);
    if ($78) {
     $ind1$2 = $ind1$0;$ind2$3 = $ind2$0;$low1$2 = $low1$0;$low2$3 = $low2$0;
    } else {
     $79 = ($low1$0|0)>($77|0);
     if ($79) {
      $ind1$2 = $i$1;$ind2$3 = $ind1$0;$low1$2 = $77;$low2$3 = $low1$0;
     } else {
      $80 = ($low2$0|0)>($77|0);
      $$low2$0 = $80 ? $77 : $low2$0;
      $i$1$ind2$0 = $80 ? $i$1 : $ind2$0;
      $ind1$2 = $ind1$0;$ind2$3 = $i$1$ind2$0;$low1$2 = $low1$0;$low2$3 = $$low2$0;
     }
    }
    $81 = (($i$1) + 1)|0;
    $i$1 = $81;$ind1$0 = $ind1$2;$ind2$0 = $ind2$3;$low1$0 = $low1$2;$low2$0 = $low2$3;
   }
   $82 = ($low2$0|0)==(2147483647);
   if ($82) {
    break;
   }
   $83 = (($low1$0) + ($low2$0))|0;
   $84 = (($63) + ($nvals$5<<2)|0);
   HEAP32[$84>>2] = $83;
   $85 = (($68) + ($ind1$0<<2)|0);
   HEAP32[$85>>2] = $nvals$5;
   $86 = (($68) + ($ind2$0<<2)|0);
   HEAP32[$86>>2] = $nvals$5;
   $87 = (($63) + ($ind1$0<<2)|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (0 - ($88))|0;
   HEAP32[$87>>2] = $89;
   $90 = (($63) + ($ind2$0<<2)|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (0 - ($91))|0;
   HEAP32[$90>>2] = $92;
   $93 = (($nvals$5) + 1)|0;
   $nvals$5 = $93;
  }
  $94 = (($nvals$5|0) / 2)&-1;
  $i$2 = 0;
  while(1) {
   $95 = ($i$2|0)>($94|0);
   if ($95) {
    break;
   } else {
    $code_len$0 = 0;$i$2$pn = $i$2;
   }
   while(1) {
    $k$0$in = (($68) + ($i$2$pn<<2)|0);
    $k$0 = HEAP32[$k$0$in>>2]|0;
    $96 = ($k$0|0)==(0);
    if ($96) {
     break;
    }
    $97 = (($code_len$0) + 1)|0;
    $code_len$0 = $97;$i$2$pn = $k$0;
   }
   $98 = (($68) + ($i$2<<2)|0);
   HEAP32[$98>>2] = $code_len$0;
   $99 = (($63) + ($i$2<<2)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = (0 - ($100))|0;
   HEAP32[$99>>2] = $101;
   $102 = (($i$2) + 1)|0;
   $i$2 = $102;
  }
  $103 = (($94) + 1)|0;
  $104 = $103 << 4;
  $105 = (_malloc($104)|0);
  $106 = ($105|0)==(0|0);
  if ($106) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $i$3 = 0;
  }
  while(1) {
   $107 = ($i$3|0)>($94|0);
   if ($107) {
    break;
   }
   $108 = (($vals$6) + ($i$3<<2)|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (($105) + ($i$3<<4)|0);
   HEAP32[$110>>2] = $109;
   $111 = (($68) + ($i$3<<2)|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = (((($105) + ($i$3<<4)|0)) + 12|0);
   HEAP32[$113>>2] = $112;
   $114 = (($i$3) + 1)|0;
   $i$3 = $114;
  }
  _qsort($105,$103,16,88);
  $115 = ((($105)) + 12|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ((($0)) + 32|0);
  $code$0 = 0;$i$4 = 0;$len$0 = $116;
  while(1) {
   $118 = ($i$4|0)>($94|0);
   if ($118) {
    break;
   }
   $119 = (((($105) + ($i$4<<4)|0)) + 12|0);
   $120 = HEAP32[$119>>2]|0;
   $code$1 = $code$0;$len$1 = $len$0;
   while(1) {
    $121 = ($len$1|0)==($120|0);
    if ($121) {
     break;
    }
    $122 = $code$1 << 1;
    $123 = (($len$1) + 1)|0;
    $code$1 = $122;$len$1 = $123;
   }
   $124 = (($code$1) + 1)|0;
   $125 = (((($105) + ($i$4<<4)|0)) + 8|0);
   HEAP32[$125>>2] = $code$1;
   $126 = (($105) + ($i$4<<4)|0);
   $127 = HEAP32[$126>>2]|0;
   $$off = (($127) + 1)|0;
   $128 = ($$off>>>0)<(129);
   if ($128) {
    $129 = (($127) + 1)|0;
    $130 = (($117) + ($129<<2)|0);
    HEAP32[$130>>2] = $i$4;
   }
   $131 = (($i$4) + 1)|0;
   $code$0 = $124;$i$4 = $131;$len$0 = $120;
  }
  _free($68);
  _free($vals$6);
  _free($63);
  $132 = ((($0)) + 24|0);
  HEAP32[$132>>2] = $105;
  $133 = ((($0)) + 28|0);
  HEAP32[$133>>2] = $103;
  $134 = ((($0)) + 8|0);
  HEAP32[$134>>2] = 93;
  $option$off = (($option) + -3)|0;
  $switch = ($option$off>>>0)<(2);
  $135 = ((($105)) + 12|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = ($136|0)==(0);
  $138 = ((($0)) + 16|0);
  do {
   if ($switch) {
    if ($137) {
     HEAP32[$138>>2] = 94;
     break;
    } else {
     HEAP32[$138>>2] = 95;
     break;
    }
   } else {
    if ($137) {
     HEAP32[$138>>2] = 96;
     break;
    } else {
     HEAP32[$138>>2] = 97;
     break;
    }
   }
  } while(0);
  $139 = ((($0)) + 20|0);
  HEAP32[$139>>2] = 98;
  $$0 = $0;
  return ($$0|0);
 }
 _free($0);
 $$0 = 0;
 return ($$0|0);
}
function _cram_byte_array_len_decode($slice,$c,$in,$out,$out_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $out = $out|0;
 $out_size = $out_size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $one = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $len = sp + 4|0;
 $one = sp;
 HEAP32[$len>>2] = 0;
 HEAP32[$one>>2] = 1;
 $0 = ((($c)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiiiii[$3 & 127]($slice,$1,$in,$len,$one)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ((($c)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 $9 = HEAP32[$len>>2]|0;
 $10 = ($9|0)>(-1);
 $or$cond = $8 & $10;
 if (!($or$cond)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ((($7)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_iiiiii[$12 & 127]($slice,$7,$in,$out,$len)|0);
 $14 = HEAP32[$len>>2]|0;
 HEAP32[$out_size>>2] = $14;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _cram_byte_array_len_decode_free($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($c)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($2)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 127]($2);
 }
 $6 = ((($c)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = ((($7)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  FUNCTION_TABLE_vi[$10 & 127]($7);
 }
 _free($c);
 return;
}
function _cram_byte_array_len_decode_init($data,$size,$option,$version) {
 $data = $data|0;
 $size = $size|0;
 $option = $option|0;
 $version = $version|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $encoding = 0, $sub_size = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $encoding = sp + 24|0;
 $sub_size = sp + 20|0;
 $0 = (($data) + ($size)|0);
 HEAP32[$encoding>>2] = 0;
 HEAP32[$sub_size>>2] = -1;
 $1 = (_malloc(548)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$1>>2] = 4;
 $3 = ((($1)) + 12|0);
 HEAP32[$3>>2] = 99;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 100;
 $5 = (_safe_itf8_get_820($data,$0,$encoding)|0);
 $6 = (($data) + ($5)|0);
 $7 = (_safe_itf8_get_820($6,$0,$sub_size)|0);
 $8 = (($6) + ($7)|0);
 $9 = HEAP32[$sub_size>>2]|0;
 $10 = ($9|0)<(0);
 do {
  if ($10) {
   label = 37;
  } else {
   $11 = $0;
   $12 = $8;
   $13 = (($11) - ($12))|0;
   $14 = ($13|0)<($9|0);
   if ($14) {
    label = 37;
   } else {
    $15 = HEAP32[$encoding>>2]|0;
    $16 = ($15>>>0)<(10);
    if ($16) {
     $17 = 762 >>> $15;
     $18 = $17 & 1;
     $19 = ($18|0)==(0);
     if (!($19)) {
      $20 = (568 + ($15<<2)|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (FUNCTION_TABLE_iiiii[$21 & 127]($8,$9,1,$version)|0);
      $23 = ((($1)) + 24|0);
      HEAP32[$23>>2] = $22;
      $24 = ($22|0)==(0|0);
      if ($24) {
       break;
      }
      $25 = (($8) + ($9)|0);
      HEAP32[$sub_size>>2] = -1;
      $26 = (_safe_itf8_get_820($25,$0,$encoding)|0);
      $27 = (($25) + ($26)|0);
      $28 = (_safe_itf8_get_820($27,$0,$sub_size)|0);
      $29 = (($27) + ($28)|0);
      $30 = HEAP32[$sub_size>>2]|0;
      $31 = ($30|0)<(0);
      if ($31) {
       label = 37;
       break;
      }
      $32 = $29;
      $33 = (($11) - ($32))|0;
      $34 = ($33|0)<($30|0);
      if ($34) {
       label = 37;
       break;
      }
      $35 = HEAP32[$encoding>>2]|0;
      $36 = ($35>>>0)<(10);
      if ($36) {
       $37 = 762 >>> $35;
       $38 = $37 & 1;
       $39 = ($38|0)==(0);
       if (!($39)) {
        $40 = (568 + ($35<<2)|0);
        $41 = HEAP32[$40>>2]|0;
        $42 = (FUNCTION_TABLE_iiiii[$41 & 127]($29,$30,$option,$version)|0);
        $43 = ((($1)) + 28|0);
        HEAP32[$43>>2] = $42;
        $44 = ($42|0)==(0|0);
        if ($44) {
         break;
        }
        $45 = (($29) + ($30)|0);
        $46 = $45;
        $47 = $data;
        $48 = (($46) - ($47))|0;
        $49 = ($48|0)==($size|0);
        if ($49) {
         $$0 = $1;
        } else {
         label = 37;
         break;
        }
        STACKTOP = sp;return ($$0|0);
       }
      }
      do {
       switch ($35|0) {
       case 0:  {
        $$0$i$i1 = 22599;
        break;
       }
       case 1:  {
        $$0$i$i1 = 22604;
        break;
       }
       case 2:  {
        $$0$i$i1 = 22613;
        break;
       }
       case 3:  {
        $$0$i$i1 = 22620;
        break;
       }
       case 4:  {
        $$0$i$i1 = 22628;
        break;
       }
       case 5:  {
        $$0$i$i1 = 22643;
        break;
       }
       case 6:  {
        $$0$i$i1 = 22659;
        break;
       }
       case 7:  {
        $$0$i$i1 = 22664;
        break;
       }
       case 8:  {
        $$0$i$i1 = 22671;
        break;
       }
       case 9:  {
        $$0$i$i1 = 22683;
        break;
       }
       default: {
        $$0$i$i1 = 22689;
       }
       }
      } while(0);
      HEAP32[$vararg_buffer1>>2] = $$0$i$i1;
      _fprintf(9772,22691,$vararg_buffer1);
      break;
     }
    }
    do {
     switch ($15|0) {
     case 0:  {
      $$0$i$i = 22599;
      break;
     }
     case 1:  {
      $$0$i$i = 22604;
      break;
     }
     case 2:  {
      $$0$i$i = 22613;
      break;
     }
     case 3:  {
      $$0$i$i = 22620;
      break;
     }
     case 4:  {
      $$0$i$i = 22628;
      break;
     }
     case 5:  {
      $$0$i$i = 22643;
      break;
     }
     case 6:  {
      $$0$i$i = 22659;
      break;
     }
     case 7:  {
      $$0$i$i = 22664;
      break;
     }
     case 8:  {
      $$0$i$i = 22671;
      break;
     }
     case 9:  {
      $$0$i$i = 22683;
      break;
     }
     default: {
      $$0$i$i = 22689;
     }
     }
    } while(0);
    HEAP32[$vararg_buffer>>2] = $$0$i$i;
    _fprintf(9772,22691,$vararg_buffer);
   }
  }
 } while(0);
 if ((label|0) == 37) {
  _fprintf(9772,22723,$vararg_buffer4);
 }
 _free($1);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _cram_byte_array_stop_decode_init($data,$size,$option,$version) {
 $data = $data|0;
 $size = $size|0;
 $option = $option|0;
 $version = $version|0;
 var $$0 = 0, $$mask = 0, $$masked = 0, $$masked1 = 0, $$masked2 = 0, $$masked3 = 0, $$masked4 = 0, $$masked5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $cp$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_malloc(548)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$0>>2] = 5;
 switch ($option|0) {
 case 5:  {
  $2 = ((($0)) + 12|0);
  HEAP32[$2>>2] = 101;
  break;
 }
 case 4:  {
  $3 = ((($0)) + 12|0);
  HEAP32[$3>>2] = 102;
  break;
 }
 default: {
  _fprintf(9772,22508,$vararg_buffer);
  _free($0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 }
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 103;
 $5 = ((($data)) + 1|0);
 $6 = HEAP8[$data>>0]|0;
 $7 = ((($0)) + 24|0);
 HEAP8[$7>>0] = $6;
 $$mask = $version & -256;
 $8 = ($$mask|0)==(256);
 $9 = HEAP8[$5>>0]|0;
 if ($8) {
  $10 = $9&255;
  $11 = ((($data)) + 2|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $13 << 8;
  $15 = $10 | $14;
  $16 = ((($data)) + 3|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $18 << 16;
  $20 = $15 | $19;
  $21 = ((($data)) + 4|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $23 << 24;
  $25 = $20 | $24;
  $26 = ((($0)) + 28|0);
  HEAP32[$26>>2] = $25;
  $27 = ((($data)) + 5|0);
  $cp$0 = $27;
 } else {
  $28 = ($9<<24>>24)>(-1);
  do {
   if ($28) {
    $29 = $9&255;
    $30 = ((($0)) + 28|0);
    HEAP32[$30>>2] = $29;
    $90 = 1;
   } else {
    $31 = ($9&255)<(192);
    if ($31) {
     $32 = $9&255;
     $33 = $32 << 8;
     $34 = ((($data)) + 2|0);
     $35 = HEAP8[$34>>0]|0;
     $36 = $35&255;
     $$masked5 = $33 & 16128;
     $37 = $$masked5 | $36;
     $38 = ((($0)) + 28|0);
     HEAP32[$38>>2] = $37;
     $90 = 2;
     break;
    }
    $39 = ($9&255)<(224);
    if ($39) {
     $40 = $9&255;
     $41 = $40 << 16;
     $42 = ((($data)) + 2|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = $43&255;
     $45 = $44 << 8;
     $46 = ((($data)) + 3|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = $47&255;
     $$masked4 = $41 & 2031616;
     $$masked3 = $$masked4 | $45;
     $49 = $$masked3 | $48;
     $50 = ((($0)) + 28|0);
     HEAP32[$50>>2] = $49;
     $90 = 3;
     break;
    }
    $51 = ($9&255)<(240);
    $52 = $9&255;
    if ($51) {
     $53 = $52 << 24;
     $54 = ((($data)) + 2|0);
     $55 = HEAP8[$54>>0]|0;
     $56 = $55&255;
     $57 = $56 << 16;
     $58 = ((($data)) + 3|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = $59&255;
     $61 = $60 << 8;
     $62 = ((($data)) + 4|0);
     $63 = HEAP8[$62>>0]|0;
     $64 = $63&255;
     $$masked2 = $53 & 251658240;
     $$masked1 = $$masked2 | $57;
     $$masked = $$masked1 | $61;
     $65 = $$masked | $64;
     $66 = ((($0)) + 28|0);
     HEAP32[$66>>2] = $65;
     $90 = 4;
     break;
    } else {
     $67 = $52 << 28;
     $68 = ((($data)) + 2|0);
     $69 = HEAP8[$68>>0]|0;
     $70 = $69&255;
     $71 = $70 << 20;
     $72 = $67 | $71;
     $73 = ((($data)) + 3|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74&255;
     $76 = $75 << 12;
     $77 = $72 | $76;
     $78 = ((($data)) + 4|0);
     $79 = HEAP8[$78>>0]|0;
     $80 = $79&255;
     $81 = $80 << 4;
     $82 = $77 | $81;
     $83 = ((($data)) + 5|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = $84&255;
     $86 = $85 & 15;
     $87 = $82 | $86;
     $88 = ((($0)) + 28|0);
     HEAP32[$88>>2] = $87;
     $90 = 5;
     break;
    }
   }
  } while(0);
  $89 = (($5) + ($90)|0);
  $cp$0 = $89;
 }
 $91 = $cp$0;
 $92 = $data;
 $93 = (($91) - ($92))|0;
 $94 = ($93|0)==($size|0);
 if ($94) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 _fprintf(9772,22558,$vararg_buffer1);
 _free($0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _cram_byte_array_stop_decode_block($slice,$c,$in,$out_,$out_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $out_ = $out_|0;
 $out_size = $out_size|0;
 var $$0 = 0, $$0$i2 = 0, $$pre = 0, $$pre5 = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cp$0 = 0, $cp$0$lcssa = 0, $cp$1 = 0, $cp$1$lcssa = 0, $cp$2 = 0, $i$0$i = 0, $out_cp$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($slice)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 $5 = ($1>>>0)<(1024);
 $6 = $5 & $4;
 L1: do {
  if ($6) {
   $23 = (($3) + ($1<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0|0);
   if ($25) {
    label = 9;
   } else {
    $$0$i2 = $24;
   }
  } else {
   $7 = HEAP32[$slice>>2]|0;
   $8 = ((($7)) + 32|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($slice)) + 8|0);
   $i$0$i = 0;
   while(1) {
    $11 = ($i$0$i|0)<($9|0);
    if (!($11)) {
     label = 9;
     break L1;
    }
    $12 = HEAP32[$10>>2]|0;
    $13 = (($12) + ($i$0$i<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0|0);
    if (!($15)) {
     $16 = ((($14)) + 8|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($17|0)==(4);
     if ($18) {
      $19 = ((($14)) + 12|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($20|0)==($1|0);
      if ($21) {
       $$0$i2 = $14;
       break L1;
      }
     }
    }
    $22 = (($i$0$i) + 1)|0;
    $i$0$i = $22;
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $26 = HEAP32[$out_size>>2]|0;
  $27 = ($26|0)!=(0);
  $28 = $27 << 31 >> 31;
  $$0 = $28;
  return ($$0|0);
 }
 $29 = ((($$0$i2)) + 28|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($$0$i2)) + 20|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)<($32|0);
 if (!($33)) {
  $$0 = -1;
  return ($$0|0);
 }
 $34 = ((($$0$i2)) + 32|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + ($30)|0);
 $37 = (($35) + ($32)|0);
 $38 = ((($c)) + 24|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $37;
 $41 = $36;
 $42 = (($40) - ($41))|0;
 $43 = ((($out_)) + 36|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($out_)) + 40|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($44) - ($46))|0;
 $48 = ($42>>>0)<($47>>>0);
 L18: do {
  if ($48) {
   $49 = ((($out_)) + 32|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + ($46)|0);
   $cp$0 = $36;$out_cp$0 = $51;
   while(1) {
    $52 = ($cp$0|0)==($37|0);
    if ($52) {
     $cp$0$lcssa = $37;
     break;
    }
    $53 = HEAP8[$cp$0>>0]|0;
    $54 = ($53<<24>>24)==($39<<24>>24);
    if ($54) {
     $cp$0$lcssa = $cp$0;
     break;
    }
    $55 = ((($cp$0)) + 1|0);
    $56 = ((($out_cp$0)) + 1|0);
    HEAP8[$out_cp$0>>0] = $53;
    $cp$0 = $55;$out_cp$0 = $56;
   }
   $57 = HEAP32[$49>>2]|0;
   $58 = $out_cp$0;
   $59 = (($58) - ($57))|0;
   HEAP32[$45>>2] = $59;
   $cp$2 = $cp$0$lcssa;
  } else {
   $cp$1 = $36;
   while(1) {
    $60 = ($cp$1|0)==($37|0);
    if ($60) {
     $cp$1$lcssa = $37;
     break;
    }
    $64 = HEAP8[$cp$1>>0]|0;
    $65 = ($64<<24>>24)==($39<<24>>24);
    if ($65) {
     $cp$1$lcssa = $cp$1;
     break;
    }
    $66 = ((($cp$1)) + 1|0);
    $cp$1 = $66;
   }
   $61 = $cp$1$lcssa;
   $62 = (($61) - ($41))|0;
   $63 = ((($out_)) + 32|0);
   $68 = $46;$70 = $44;
   while(1) {
    $67 = (($68) + ($62))|0;
    $69 = ($70>>>0)>($67>>>0);
    if ($69) {
     break;
    }
    $71 = ($70|0)==(0);
    $72 = (+($70>>>0));
    $73 = $72 * 1.5;
    $74 = (~~(($73))>>>0);
    $75 = $71 ? 1024 : $74;
    HEAP32[$43>>2] = $75;
    $76 = HEAP32[$63>>2]|0;
    $77 = (_realloc($76,$75)|0);
    HEAP32[$63>>2] = $77;
    $$pre = HEAP32[$43>>2]|0;
    $$pre5 = HEAP32[$45>>2]|0;
    $68 = $$pre5;$70 = $$pre;
   }
   $78 = HEAP32[$63>>2]|0;
   $79 = (($78) + ($68)|0);
   _memcpy(($79|0),($36|0),($62|0))|0;
   $80 = HEAP32[$45>>2]|0;
   $81 = (($80) + ($62))|0;
   HEAP32[$45>>2] = $81;
   $84 = $81;
   while(1) {
    $82 = HEAP32[$43>>2]|0;
    $83 = (($84) + ($62))|0;
    $85 = ($82>>>0)>($83>>>0);
    if ($85) {
     $cp$2 = $cp$1$lcssa;
     break L18;
    }
    $86 = ($82|0)==(0);
    $87 = (+($82>>>0));
    $88 = $87 * 1.5;
    $89 = (~~(($88))>>>0);
    $90 = $86 ? 1024 : $89;
    HEAP32[$43>>2] = $90;
    $91 = HEAP32[$63>>2]|0;
    $92 = (_realloc($91,$90)|0);
    HEAP32[$63>>2] = $92;
    $$pre6 = HEAP32[$45>>2]|0;
    $84 = $$pre6;
   }
  }
 } while(0);
 $93 = HEAP32[$34>>2]|0;
 $94 = HEAP32[$29>>2]|0;
 $95 = (($93) + ($94)|0);
 $96 = $cp$2;
 $97 = $95;
 $98 = (($96) - ($97))|0;
 HEAP32[$out_size>>2] = $98;
 $99 = HEAP32[$34>>2]|0;
 $100 = (($96) - ($99))|0;
 $101 = (($100) + 1)|0;
 HEAP32[$29>>2] = $101;
 $$0 = 0;
 return ($$0|0);
}
function _cram_byte_array_stop_decode_char($slice,$c,$in,$out,$out_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $out = $out|0;
 $out_size = $out_size|0;
 var $$0 = 0, $$0$i4 = 0, $$01 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $cp$0 = 0, $cp$1 = 0, $cp$2 = 0, $i$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($slice)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 $5 = ($1>>>0)<(1024);
 $6 = $5 & $4;
 L1: do {
  if ($6) {
   $23 = (($3) + ($1<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0|0);
   if ($25) {
    label = 9;
   } else {
    $$0$i4 = $24;
   }
  } else {
   $7 = HEAP32[$slice>>2]|0;
   $8 = ((($7)) + 32|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($slice)) + 8|0);
   $i$0$i = 0;
   while(1) {
    $11 = ($i$0$i|0)<($9|0);
    if (!($11)) {
     label = 9;
     break L1;
    }
    $12 = HEAP32[$10>>2]|0;
    $13 = (($12) + ($i$0$i<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0|0);
    if (!($15)) {
     $16 = ((($14)) + 8|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($17|0)==(4);
     if ($18) {
      $19 = ((($14)) + 12|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($20|0)==($1|0);
      if ($21) {
       $$0$i4 = $14;
       break L1;
      }
     }
    }
    $22 = (($i$0$i) + 1)|0;
    $i$0$i = $22;
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $26 = HEAP32[$out_size>>2]|0;
  $27 = ($26|0)!=(0);
  $28 = $27 << 31 >> 31;
  $$0 = $28;
  return ($$0|0);
 }
 $29 = ((($$0$i4)) + 28|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($$0$i4)) + 20|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)<($32|0);
 if (!($33)) {
  $$0 = -1;
  return ($$0|0);
 }
 $34 = ((($$0$i4)) + 32|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + ($30)|0);
 $37 = ($out|0)==(0|0);
 $38 = $35;
 $39 = ((($c)) + 24|0);
 L18: do {
  if ($37) {
   $40 = HEAP8[$39>>0]|0;
   $cp$1 = $36;
   while(1) {
    $51 = HEAP8[$cp$1>>0]|0;
    $52 = ($51<<24>>24)==($40<<24>>24);
    if ($52) {
     $$pre$phiZ2D = $34;$58 = $35;$59 = $30;$cp$2 = $cp$1;
     break L18;
    }
    $53 = $cp$1;
    $54 = (($53) - ($38))|0;
    $55 = ($54|0)<($32|0);
    if (!($55)) {
     $$0 = -1;
     break;
    }
    $56 = ((($cp$1)) + 1|0);
    $cp$1 = $56;
   }
   return ($$0|0);
  } else {
   $$01 = $out;$cp$0 = $36;
   while(1) {
    $41 = HEAP8[$cp$0>>0]|0;
    $42 = HEAP8[$39>>0]|0;
    $43 = ($41<<24>>24)==($42<<24>>24);
    if ($43) {
     label = 20;
     break;
    }
    $44 = HEAP32[$34>>2]|0;
    $45 = $cp$0;
    $46 = (($45) - ($44))|0;
    $47 = HEAP32[$31>>2]|0;
    $48 = ($46|0)<($47|0);
    if (!($48)) {
     $$0 = -1;
     label = 22;
     break;
    }
    $49 = ((($$01)) + 1|0);
    HEAP8[$$01>>0] = $41;
    $50 = ((($cp$0)) + 1|0);
    $$01 = $49;$cp$0 = $50;
   }
   if ((label|0) == 20) {
    $$pre = HEAP32[$34>>2]|0;
    $$pre12 = HEAP32[$29>>2]|0;
    $$pre$phiZ2D = $34;$58 = $$pre;$59 = $$pre12;$cp$2 = $cp$0;
    break;
   }
   else if ((label|0) == 22) {
    return ($$0|0);
   }
  }
 } while(0);
 $57 = (($58) + ($59)|0);
 $60 = $cp$2;
 $61 = $57;
 $62 = (($60) - ($61))|0;
 HEAP32[$out_size>>2] = $62;
 $63 = HEAP32[$$pre$phiZ2D>>2]|0;
 $64 = (($60) - ($63))|0;
 $65 = (($64) + 1)|0;
 HEAP32[$29>>2] = $65;
 $$0 = 0;
 return ($$0|0);
}
function _cram_byte_array_stop_decode_free($c) {
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(0|0);
 if (!($0)) {
  _free($c);
 }
 return;
}
function _cram_byte_array_len_encode($slice,$c,$in,$in_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $in_size = $in_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i32 = sp;
 HEAP32[$i32>>2] = $in_size;
 $0 = ((($c)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiiii[$3 & 127]($slice,$1,$i32,1)|0);
 $5 = ((($c)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iiiii[$8 & 127]($slice,$6,$in,$in_size)|0);
 $10 = $4 | $9;
 STACKTOP = sp;return ($10|0);
}
function _cram_byte_array_len_encode_free($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($c)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($2)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 127]($2);
 }
 $6 = ((($c)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = ((($7)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  FUNCTION_TABLE_vi[$10 & 127]($7);
 }
 _free($c);
 return;
}
function _cram_byte_array_len_encode_store($c,$b,$prefix,$version) {
 $c = $c|0;
 $b = $b|0;
 $prefix = $prefix|0;
 $version = $version|0;
 var $$0$i = 0, $$0$i1 = 0, $$0$i2 = 0, $$01$lcssa$i = 0, $$014$i = 0, $$1$lcssa$i = 0, $$pn$i = 0, $$pn15$i = 0, $$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $len$0 = 0, $w$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($prefix|0)==(0|0);
 if ($0) {
  $len$0 = 0;
 } else {
  $1 = $prefix;
  $2 = $1 & 3;
  $3 = ($2|0)==(0);
  L3: do {
   if ($3) {
    $$01$lcssa$i = $prefix;
    label = 5;
   } else {
    $$014$i = $prefix;$118 = $1;
    while(1) {
     $4 = HEAP8[$$014$i>>0]|0;
     $5 = ($4<<24>>24)==(0);
     if ($5) {
      $$pn$i = $118;
      break L3;
     }
     $6 = ((($$014$i)) + 1|0);
     $7 = $6;
     $8 = $7 & 3;
     $9 = ($8|0)==(0);
     if ($9) {
      $$01$lcssa$i = $6;
      label = 5;
      break;
     } else {
      $$014$i = $6;$118 = $7;
     }
    }
   }
  } while(0);
  if ((label|0) == 5) {
   $w$0$i = $$01$lcssa$i;
   while(1) {
    $10 = HEAP32[$w$0$i>>2]|0;
    $11 = (($10) + -16843009)|0;
    $12 = $10 & -2139062144;
    $13 = $12 ^ -2139062144;
    $14 = $13 & $11;
    $15 = ($14|0)==(0);
    $16 = ((($w$0$i)) + 4|0);
    if ($15) {
     $w$0$i = $16;
    } else {
     break;
    }
   }
   $17 = $10&255;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $$1$lcssa$i = $w$0$i;
   } else {
    $$pn15$i = $w$0$i;
    while(1) {
     $19 = ((($$pn15$i)) + 1|0);
     $$pre$i = HEAP8[$19>>0]|0;
     $20 = ($$pre$i<<24>>24)==(0);
     if ($20) {
      $$1$lcssa$i = $19;
      break;
     } else {
      $$pn15$i = $19;
     }
    }
   }
   $21 = $$1$lcssa$i;
   $$pn$i = $21;
  }
  $$0$i = (($$pn$i) - ($1))|0;
  $22 = ((($b)) + 36|0);
  $23 = ((($b)) + 40|0);
  $24 = ((($b)) + 32|0);
  while(1) {
   $25 = HEAP32[$22>>2]|0;
   $26 = HEAP32[$23>>2]|0;
   $27 = (($26) + ($$0$i))|0;
   $28 = ($25>>>0)>($27>>>0);
   if ($28) {
    break;
   }
   $29 = ($25|0)==(0);
   $30 = (+($25>>>0));
   $31 = $30 * 1.5;
   $32 = (~~(($31))>>>0);
   $33 = $29 ? 1024 : $32;
   HEAP32[$22>>2] = $33;
   $34 = HEAP32[$24>>2]|0;
   $35 = (_realloc($34,$33)|0);
   HEAP32[$24>>2] = $35;
  }
  $36 = HEAP32[$24>>2]|0;
  $37 = (($36) + ($26)|0);
  _memcpy(($37|0),($prefix|0),($$0$i|0))|0;
  $38 = HEAP32[$23>>2]|0;
  $39 = (($38) + ($$0$i))|0;
  HEAP32[$23>>2] = $39;
  $len$0 = $$0$i;
 }
 $40 = ((($c)) + 40|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (_malloc(48)|0);
 $43 = ($42|0)==(0|0);
 if ($43) {
  $$0$i1 = 0;
 } else {
  $44 = ((($42)) + 32|0);
  HEAP32[$44>>2] = 0;
  $45 = ((($42)) + 36|0);
  HEAP32[$45>>2] = 0;
  $46 = ((($42)) + 40|0);
  HEAP32[$46>>2] = 0;
  $47 = ((($42)) + 44|0);
  ;HEAP32[$42>>2]=0|0;HEAP32[$42+4>>2]=0|0;HEAP32[$42+8>>2]=0|0;HEAP32[$42+12>>2]=0|0;HEAP32[$42+16>>2]=0|0;HEAP32[$42+20>>2]=0|0;
  HEAP32[$47>>2] = 7;
  $$0$i1 = $42;
 }
 $48 = ((($41)) + 20|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (FUNCTION_TABLE_iiiii[$49 & 127]($41,$$0$i1,0,$version)|0);
 $51 = ((($c)) + 44|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (_malloc(48)|0);
 $54 = ($53|0)==(0|0);
 if ($54) {
  $$0$i2 = 0;
 } else {
  $55 = ((($53)) + 32|0);
  HEAP32[$55>>2] = 0;
  $56 = ((($53)) + 36|0);
  HEAP32[$56>>2] = 0;
  $57 = ((($53)) + 40|0);
  HEAP32[$57>>2] = 0;
  $58 = ((($53)) + 44|0);
  ;HEAP32[$53>>2]=0|0;HEAP32[$53+4>>2]=0|0;HEAP32[$53+8>>2]=0|0;HEAP32[$53+12>>2]=0|0;HEAP32[$53+16>>2]=0|0;HEAP32[$53+20>>2]=0|0;
  HEAP32[$58>>2] = 7;
  $$0$i2 = $53;
 }
 $59 = ((($52)) + 20|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (FUNCTION_TABLE_iiiii[$60 & 127]($52,$$0$i2,0,$version)|0);
 $62 = HEAP32[$c>>2]|0;
 $63 = (_itf8_put_blk($b,$62)|0);
 $64 = (($50) + ($61))|0;
 $65 = (_itf8_put_blk($b,$64)|0);
 $66 = ((($b)) + 36|0);
 $67 = ((($b)) + 40|0);
 $68 = ((($$0$i1)) + 40|0);
 $69 = ((($b)) + 32|0);
 while(1) {
  $70 = HEAP32[$66>>2]|0;
  $71 = HEAP32[$67>>2]|0;
  $72 = HEAP32[$68>>2]|0;
  $73 = (($71) + ($72))|0;
  $74 = ($70>>>0)>($73>>>0);
  if ($74) {
   break;
  }
  $75 = ($70|0)==(0);
  $76 = (+($70>>>0));
  $77 = $76 * 1.5;
  $78 = (~~(($77))>>>0);
  $79 = $75 ? 1024 : $78;
  HEAP32[$66>>2] = $79;
  $80 = HEAP32[$69>>2]|0;
  $81 = (_realloc($80,$79)|0);
  HEAP32[$69>>2] = $81;
 }
 $82 = (($len$0) + ($63))|0;
 $83 = (($82) + ($65))|0;
 $84 = HEAP32[$69>>2]|0;
 $85 = (($84) + ($71)|0);
 $86 = ((($$0$i1)) + 32|0);
 $87 = HEAP32[$86>>2]|0;
 _memcpy(($85|0),($87|0),($72|0))|0;
 $88 = HEAP32[$68>>2]|0;
 $89 = HEAP32[$67>>2]|0;
 $90 = (($89) + ($88))|0;
 HEAP32[$67>>2] = $90;
 $91 = ((($$0$i2)) + 40|0);
 $95 = $90;
 while(1) {
  $92 = HEAP32[$66>>2]|0;
  $93 = HEAP32[$91>>2]|0;
  $94 = (($95) + ($93))|0;
  $96 = ($92>>>0)>($94>>>0);
  if ($96) {
   break;
  }
  $97 = ($92|0)==(0);
  $98 = (+($92>>>0));
  $99 = $98 * 1.5;
  $100 = (~~(($99))>>>0);
  $101 = $97 ? 1024 : $100;
  HEAP32[$66>>2] = $101;
  $102 = HEAP32[$69>>2]|0;
  $103 = (_realloc($102,$101)|0);
  HEAP32[$69>>2] = $103;
  $$pre = HEAP32[$67>>2]|0;
  $95 = $$pre;
 }
 $104 = HEAP32[$69>>2]|0;
 $105 = (($104) + ($95)|0);
 $106 = ((($$0$i2)) + 32|0);
 $107 = HEAP32[$106>>2]|0;
 _memcpy(($105|0),($107|0),($93|0))|0;
 $108 = HEAP32[$91>>2]|0;
 $109 = HEAP32[$67>>2]|0;
 $110 = (($109) + ($108))|0;
 HEAP32[$67>>2] = $110;
 $111 = ($$0$i1|0)==(0|0);
 if (!($111)) {
  $112 = HEAP32[$86>>2]|0;
  $113 = ($112|0)==(0|0);
  if (!($113)) {
   _free($112);
  }
  _free($$0$i1);
 }
 $114 = HEAP32[$106>>2]|0;
 $115 = ($114|0)==(0|0);
 if ($115) {
  _free($$0$i2);
  $116 = (($83) + ($50))|0;
  $117 = (($116) + ($61))|0;
  return ($117|0);
 }
 _free($114);
 _free($$0$i2);
 $116 = (($83) + ($50))|0;
 $117 = (($116) + ($61))|0;
 return ($117|0);
}
function _cram_byte_array_len_encode_init($st,$option,$dat,$version) {
 $st = $st|0;
 $option = $option|0;
 $dat = $dat|0;
 $version = $version|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_malloc(548)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$0>>2] = 4;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 64;
 $3 = ((($0)) + 16|0);
 HEAP32[$3>>2] = 65;
 $4 = ((($0)) + 20|0);
 HEAP32[$4>>2] = 66;
 $5 = HEAP32[$dat>>2]|0;
 $6 = 122 >>> $5;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  do {
   switch ($5|0) {
   case 0:  {
    $$0$i$i = 22599;
    break;
   }
   case 1:  {
    $$0$i$i = 22604;
    break;
   }
   case 2:  {
    $$0$i$i = 22613;
    break;
   }
   case 3:  {
    $$0$i$i = 22620;
    break;
   }
   case 4:  {
    $$0$i$i = 22628;
    break;
   }
   case 5:  {
    $$0$i$i = 22643;
    break;
   }
   case 6:  {
    $$0$i$i = 22659;
    break;
   }
   case 7:  {
    $$0$i$i = 22664;
    break;
   }
   case 8:  {
    $$0$i$i = 22671;
    break;
   }
   case 9:  {
    $$0$i$i = 22683;
    break;
   }
   default: {
    $$0$i$i = 22689;
   }
   }
  } while(0);
  HEAP32[$vararg_buffer>>2] = $$0$i$i;
  _fprintf(9772,22691,$vararg_buffer);
  _abort();
  // unreachable;
 }
 $9 = ((($dat)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (608 + ($5<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_iiiii[$12 & 127](0,1,$10,$version)|0);
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $15 = ((($13)) + 4|0);
  HEAP32[$15>>2] = 0;
 }
 $16 = ((($0)) + 40|0);
 HEAP32[$16>>2] = $13;
 $17 = ((($dat)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = 122 >>> $18;
 $20 = $19 & 1;
 $21 = ($20|0)==(0);
 if (!($21)) {
  $22 = ((($dat)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (608 + ($18<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (FUNCTION_TABLE_iiiii[$25 & 127](0,4,$23,$version)|0);
  $27 = ($26|0)==(0|0);
  if (!($27)) {
   $28 = ((($26)) + 4|0);
   HEAP32[$28>>2] = 0;
  }
  $29 = ((($0)) + 44|0);
  HEAP32[$29>>2] = $26;
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 do {
  switch ($18|0) {
  case 0:  {
   $$0$i$i1 = 22599;
   break;
  }
  case 1:  {
   $$0$i$i1 = 22604;
   break;
  }
  case 2:  {
   $$0$i$i1 = 22613;
   break;
  }
  case 3:  {
   $$0$i$i1 = 22620;
   break;
  }
  case 4:  {
   $$0$i$i1 = 22628;
   break;
  }
  case 5:  {
   $$0$i$i1 = 22643;
   break;
  }
  case 6:  {
   $$0$i$i1 = 22659;
   break;
  }
  case 7:  {
   $$0$i$i1 = 22664;
   break;
  }
  case 8:  {
   $$0$i$i1 = 22671;
   break;
  }
  case 9:  {
   $$0$i$i1 = 22683;
   break;
  }
  default: {
   $$0$i$i1 = 22689;
  }
  }
 } while(0);
 HEAP32[$vararg_buffer1>>2] = $$0$i$i1;
 _fprintf(9772,22691,$vararg_buffer1);
 _abort();
 // unreachable;
 return (0)|0;
}
function _cram_encoder_init($codec,$st,$option,$dat,$version) {
 $codec = $codec|0;
 $st = $st|0;
 $option = $option|0;
 $dat = $dat|0;
 $version = $version|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ($st|0)==(0|0);
 if (!($0)) {
  $1 = ((($st)) + 4104|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $4 = 122 >>> $codec;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = (608 + ($codec<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_iiiii[$8 & 127]($st,$option,$dat,$version)|0);
  $10 = ($9|0)==(0|0);
  if ($10) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $11 = ((($9)) + 4|0);
  HEAP32[$11>>2] = 0;
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 do {
  switch ($codec|0) {
  case 0:  {
   $$0$i = 22599;
   break;
  }
  case 1:  {
   $$0$i = 22604;
   break;
  }
  case 2:  {
   $$0$i = 22613;
   break;
  }
  case 3:  {
   $$0$i = 22620;
   break;
  }
  case 4:  {
   $$0$i = 22628;
   break;
  }
  case 5:  {
   $$0$i = 22643;
   break;
  }
  case 6:  {
   $$0$i = 22659;
   break;
  }
  case 7:  {
   $$0$i = 22664;
   break;
  }
  case 8:  {
   $$0$i = 22671;
   break;
  }
  case 9:  {
   $$0$i = 22683;
   break;
  }
  default: {
   $$0$i = 22689;
  }
  }
 } while(0);
 HEAP32[$vararg_buffer>>2] = $$0$i;
 _fprintf(9772,22691,$vararg_buffer);
 _abort();
 // unreachable;
 return (0)|0;
}
function _cram_byte_array_stop_encode_init($st,$option,$dat,$version) {
 $st = $st|0;
 $option = $option|0;
 $dat = $dat|0;
 $version = $version|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(548)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$0>>2] = 5;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 67;
 $3 = ((($0)) + 16|0);
 HEAP32[$3>>2] = 68;
 $4 = ((($0)) + 20|0);
 HEAP32[$4>>2] = 69;
 $5 = HEAP32[$dat>>2]|0;
 $6 = $5&255;
 $7 = ((($0)) + 24|0);
 HEAP8[$7>>0] = $6;
 $8 = ((($dat)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 28|0);
 HEAP32[$10>>2] = $9;
 $$0 = $0;
 return ($$0|0);
}
function _cram_byte_array_stop_encode_free($c) {
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(0|0);
 if (!($0)) {
  _free($c);
 }
 return;
}
function _cram_byte_array_stop_encode($slice,$c,$in,$in_size) {
 $slice = $slice|0;
 $c = $c|0;
 $in = $in|0;
 $in_size = $in_size|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 4|0);
 while(1) {
  $1 = HEAP32[$0>>2]|0;
  $2 = ((($1)) + 36|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ((($1)) + 40|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($in_size))|0;
  $7 = ($3>>>0)>($6>>>0);
  if ($7) {
   break;
  }
  $8 = ($3|0)==(0);
  $9 = (+($3>>>0));
  $10 = $9 * 1.5;
  $11 = (~~(($10))>>>0);
  $12 = $8 ? 1024 : $11;
  HEAP32[$2>>2] = $12;
  $13 = HEAP32[$0>>2]|0;
  $14 = ((($13)) + 32|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($13)) + 36|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_realloc($15,$17)|0);
  $19 = HEAP32[$0>>2]|0;
  $20 = ((($19)) + 32|0);
  HEAP32[$20>>2] = $18;
 }
 $21 = ((($1)) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + ($5)|0);
 _memcpy(($23|0),($in|0),($in_size|0))|0;
 $24 = HEAP32[$0>>2]|0;
 $25 = ((($24)) + 40|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($in_size))|0;
 HEAP32[$25>>2] = $27;
 while(1) {
  $28 = HEAP32[$0>>2]|0;
  $29 = ((($28)) + 36|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($28)) + 40|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 1)|0;
  $34 = ($30>>>0)>($33>>>0);
  if ($34) {
   break;
  }
  $35 = ($30|0)==(0);
  $36 = (+($30>>>0));
  $37 = $36 * 1.5;
  $38 = (~~(($37))>>>0);
  $39 = $35 ? 1024 : $38;
  HEAP32[$29>>2] = $39;
  $40 = HEAP32[$0>>2]|0;
  $41 = ((($40)) + 32|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($40)) + 36|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (_realloc($42,$44)|0);
  $46 = HEAP32[$0>>2]|0;
  $47 = ((($46)) + 32|0);
  HEAP32[$47>>2] = $45;
 }
 $48 = ((($c)) + 24|0);
 $49 = HEAP8[$48>>0]|0;
 HEAP32[$31>>2] = $33;
 $50 = HEAP32[$0>>2]|0;
 $51 = ((($50)) + 32|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + ($32)|0);
 HEAP8[$53>>0] = $49;
 return 0;
}
function _cram_byte_array_stop_encode_store($c,$b,$prefix,$version) {
 $c = $c|0;
 $b = $b|0;
 $prefix = $prefix|0;
 $version = $version|0;
 var $$0$i = 0, $$01$lcssa$i = 0, $$014$i = 0, $$1$lcssa$i = 0, $$mask = 0, $$ph = 0, $$pn$i = 0, $$pn15$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $cp$0 = 0;
 var $len$0 = 0, $phitmp61 = 0, $w$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $0 = ($prefix|0)==(0|0);
 if ($0) {
  $len$0 = 0;
 } else {
  $1 = $prefix;
  $2 = $1 & 3;
  $3 = ($2|0)==(0);
  L3: do {
   if ($3) {
    $$01$lcssa$i = $prefix;
    label = 5;
   } else {
    $$014$i = $prefix;$188 = $1;
    while(1) {
     $4 = HEAP8[$$014$i>>0]|0;
     $5 = ($4<<24>>24)==(0);
     if ($5) {
      $$pn$i = $188;
      break L3;
     }
     $6 = ((($$014$i)) + 1|0);
     $7 = $6;
     $8 = $7 & 3;
     $9 = ($8|0)==(0);
     if ($9) {
      $$01$lcssa$i = $6;
      label = 5;
      break;
     } else {
      $$014$i = $6;$188 = $7;
     }
    }
   }
  } while(0);
  if ((label|0) == 5) {
   $w$0$i = $$01$lcssa$i;
   while(1) {
    $10 = HEAP32[$w$0$i>>2]|0;
    $11 = (($10) + -16843009)|0;
    $12 = $10 & -2139062144;
    $13 = $12 ^ -2139062144;
    $14 = $13 & $11;
    $15 = ($14|0)==(0);
    $16 = ((($w$0$i)) + 4|0);
    if ($15) {
     $w$0$i = $16;
    } else {
     break;
    }
   }
   $17 = $10&255;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $$1$lcssa$i = $w$0$i;
   } else {
    $$pn15$i = $w$0$i;
    while(1) {
     $19 = ((($$pn15$i)) + 1|0);
     $$pre$i = HEAP8[$19>>0]|0;
     $20 = ($$pre$i<<24>>24)==(0);
     if ($20) {
      $$1$lcssa$i = $19;
      break;
     } else {
      $$pn15$i = $19;
     }
    }
   }
   $21 = $$1$lcssa$i;
   $$pn$i = $21;
  }
  $$0$i = (($$pn$i) - ($1))|0;
  $22 = ((($b)) + 36|0);
  $23 = ((($b)) + 40|0);
  $24 = ((($b)) + 32|0);
  while(1) {
   $25 = HEAP32[$22>>2]|0;
   $26 = HEAP32[$23>>2]|0;
   $27 = (($26) + ($$0$i))|0;
   $28 = ($25>>>0)>($27>>>0);
   if ($28) {
    break;
   }
   $29 = ($25|0)==(0);
   $30 = (+($25>>>0));
   $31 = $30 * 1.5;
   $32 = (~~(($31))>>>0);
   $33 = $29 ? 1024 : $32;
   HEAP32[$22>>2] = $33;
   $34 = HEAP32[$24>>2]|0;
   $35 = (_realloc($34,$33)|0);
   HEAP32[$24>>2] = $35;
  }
  $36 = HEAP32[$24>>2]|0;
  $37 = (($36) + ($26)|0);
  _memcpy(($37|0),($prefix|0),($$0$i|0))|0;
  $38 = HEAP32[$23>>2]|0;
  $39 = (($38) + ($$0$i))|0;
  HEAP32[$23>>2] = $39;
  $len$0 = $$0$i;
 }
 $40 = HEAP32[$c>>2]|0;
 $41 = ($40>>>0)>(127);
 do {
  if ($41) {
   $43 = ($40>>>0)>(16383);
   if (!($43)) {
    $44 = $40 >>> 8;
    $45 = $44 | 128;
    $46 = $45&255;
    HEAP8[$buf>>0] = $46;
    $47 = $40&255;
    $48 = ((($buf)) + 1|0);
    HEAP8[$48>>0] = $47;
    $86 = 2;
    break;
   }
   $49 = ($40>>>0)>(2097151);
   if (!($49)) {
    $50 = $40 >>> 16;
    $51 = $50 | 192;
    $52 = $51&255;
    HEAP8[$buf>>0] = $52;
    $53 = $40 >>> 8;
    $54 = $53&255;
    $55 = ((($buf)) + 1|0);
    HEAP8[$55>>0] = $54;
    $56 = $40&255;
    $57 = ((($buf)) + 2|0);
    HEAP8[$57>>0] = $56;
    $86 = 3;
    break;
   }
   $58 = ($40>>>0)>(268435455);
   if ($58) {
    $70 = $40 >>> 28;
    $71 = $70 | 240;
    $72 = $71&255;
    HEAP8[$buf>>0] = $72;
    $73 = $40 >>> 20;
    $74 = $73&255;
    $75 = ((($buf)) + 1|0);
    HEAP8[$75>>0] = $74;
    $76 = $40 >>> 12;
    $77 = $76&255;
    $78 = ((($buf)) + 2|0);
    HEAP8[$78>>0] = $77;
    $79 = $40 >>> 4;
    $80 = $79&255;
    $81 = ((($buf)) + 3|0);
    HEAP8[$81>>0] = $80;
    $82 = $40 & 15;
    $83 = $82&255;
    $84 = ((($buf)) + 4|0);
    HEAP8[$84>>0] = $83;
    $86 = 5;
    break;
   } else {
    $59 = $40 >>> 24;
    $60 = $59 | 224;
    $61 = $60&255;
    HEAP8[$buf>>0] = $61;
    $62 = $40 >>> 16;
    $63 = $62&255;
    $64 = ((($buf)) + 1|0);
    HEAP8[$64>>0] = $63;
    $65 = $40 >>> 8;
    $66 = $65&255;
    $67 = ((($buf)) + 2|0);
    HEAP8[$67>>0] = $66;
    $68 = $40&255;
    $69 = ((($buf)) + 3|0);
    HEAP8[$69>>0] = $68;
    $86 = 4;
    break;
   }
  } else {
   $42 = $40&255;
   HEAP8[$buf>>0] = $42;
   $86 = 1;
  }
 } while(0);
 $85 = (($buf) + ($86)|0);
 $$mask = $version & -256;
 $87 = ($$mask|0)==(256);
 if ($87) {
  HEAP8[$85>>0] = 5;
  $88 = ((($85)) + 1|0);
  $89 = ((($c)) + 24|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = ((($85)) + 2|0);
  HEAP8[$88>>0] = $90;
  $92 = ((($c)) + 28|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $93&255;
  $95 = ((($85)) + 3|0);
  HEAP8[$91>>0] = $94;
  $96 = $93 >>> 8;
  $97 = $96&255;
  $98 = ((($85)) + 4|0);
  HEAP8[$95>>0] = $97;
  $99 = $93 >>> 16;
  $100 = $99&255;
  $101 = ((($85)) + 5|0);
  HEAP8[$98>>0] = $100;
  $102 = $93 >>> 24;
  $103 = $102&255;
  $104 = ((($85)) + 6|0);
  HEAP8[$101>>0] = $103;
  $cp$0 = $104;
 } else {
  $105 = ((($c)) + 28|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = ($106>>>0)>(127);
  do {
   if ($107) {
    $108 = ($106>>>0)>(16383);
    if ($108) {
     $109 = ($106>>>0)>(2097151);
     if ($109) {
      $110 = ($106>>>0)<(268435456);
      $phitmp61 = $110 ? 5 : 6;
      $$ph = $phitmp61;
     } else {
      $$ph = 4;
     }
    } else {
     $$ph = 3;
    }
    HEAP8[$85>>0] = $$ph;
    $117 = ((($85)) + 1|0);
    $118 = ((($c)) + 24|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ((($85)) + 2|0);
    HEAP8[$117>>0] = $119;
    $121 = ($106>>>0)>(16383);
    if (!($121)) {
     $122 = $106 >>> 8;
     $123 = $122 | 128;
     $124 = $123&255;
     HEAP8[$120>>0] = $124;
     $125 = $106&255;
     $126 = ((($85)) + 3|0);
     HEAP8[$126>>0] = $125;
     $164 = $120;$165 = 2;
     break;
    }
    $127 = ($106>>>0)>(2097151);
    if (!($127)) {
     $128 = $106 >>> 16;
     $129 = $128 | 192;
     $130 = $129&255;
     HEAP8[$120>>0] = $130;
     $131 = $106 >>> 8;
     $132 = $131&255;
     $133 = ((($85)) + 3|0);
     HEAP8[$133>>0] = $132;
     $134 = $106&255;
     $135 = ((($85)) + 4|0);
     HEAP8[$135>>0] = $134;
     $164 = $120;$165 = 3;
     break;
    }
    $136 = ($106>>>0)>(268435455);
    if ($136) {
     $148 = $106 >>> 28;
     $149 = $148 | 240;
     $150 = $149&255;
     HEAP8[$120>>0] = $150;
     $151 = $106 >>> 20;
     $152 = $151&255;
     $153 = ((($85)) + 3|0);
     HEAP8[$153>>0] = $152;
     $154 = $106 >>> 12;
     $155 = $154&255;
     $156 = ((($85)) + 4|0);
     HEAP8[$156>>0] = $155;
     $157 = $106 >>> 4;
     $158 = $157&255;
     $159 = ((($85)) + 5|0);
     HEAP8[$159>>0] = $158;
     $160 = $106 & 15;
     $161 = $160&255;
     $162 = ((($85)) + 6|0);
     HEAP8[$162>>0] = $161;
     $164 = $120;$165 = 5;
     break;
    } else {
     $137 = $106 >>> 24;
     $138 = $137 | 224;
     $139 = $138&255;
     HEAP8[$120>>0] = $139;
     $140 = $106 >>> 16;
     $141 = $140&255;
     $142 = ((($85)) + 3|0);
     HEAP8[$142>>0] = $141;
     $143 = $106 >>> 8;
     $144 = $143&255;
     $145 = ((($85)) + 4|0);
     HEAP8[$145>>0] = $144;
     $146 = $106&255;
     $147 = ((($85)) + 5|0);
     HEAP8[$147>>0] = $146;
     $164 = $120;$165 = 4;
     break;
    }
   } else {
    $111 = 2;
    HEAP8[$85>>0] = $111;
    $112 = ((($85)) + 1|0);
    $113 = ((($c)) + 24|0);
    $114 = HEAP8[$113>>0]|0;
    $115 = ((($85)) + 2|0);
    HEAP8[$112>>0] = $114;
    $116 = $106&255;
    HEAP8[$115>>0] = $116;
    $164 = $115;$165 = 1;
   }
  } while(0);
  $163 = (($164) + ($165)|0);
  $cp$0 = $163;
 }
 $166 = ((($b)) + 36|0);
 $167 = ((($b)) + 40|0);
 $168 = $cp$0;
 $169 = $buf;
 $170 = (($168) - ($169))|0;
 $171 = ((($b)) + 32|0);
 while(1) {
  $172 = HEAP32[$166>>2]|0;
  $173 = HEAP32[$167>>2]|0;
  $174 = (($173) + ($170))|0;
  $175 = ($172>>>0)>($174>>>0);
  if ($175) {
   break;
  }
  $176 = ($172|0)==(0);
  $177 = (+($172>>>0));
  $178 = $177 * 1.5;
  $179 = (~~(($178))>>>0);
  $180 = $176 ? 1024 : $179;
  HEAP32[$166>>2] = $180;
  $181 = HEAP32[$171>>2]|0;
  $182 = (_realloc($181,$180)|0);
  HEAP32[$171>>2] = $182;
 }
 $183 = HEAP32[$171>>2]|0;
 $184 = (($183) + ($173)|0);
 _memcpy(($184|0),($buf|0),($170|0))|0;
 $185 = HEAP32[$167>>2]|0;
 $186 = (($185) + ($170))|0;
 HEAP32[$167>>2] = $186;
 $187 = (($len$0) + ($170))|0;
 STACKTOP = sp;return ($187|0);
}
function _cram_codec_to_id($c,$id2) {
 $c = $c|0;
 $id2 = $id2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bnum1$0 = 0, $bnum2$0 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$c>>2]|0;
 switch ($0|0) {
 case 3:  {
  $1 = ((($c)) + 24|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(1);
  $4 = $3 ? -2 : -1;
  $bnum1$0 = $4;$bnum2$0 = -2;
  break;
 }
 case 9: case 8: case 7: case 6: case 2:  {
  $bnum1$0 = -1;$bnum2$0 = -2;
  break;
 }
 case 1:  {
  $5 = ((($c)) + 24|0);
  $6 = HEAP32[$5>>2]|0;
  $bnum1$0 = $6;$bnum2$0 = -2;
  break;
 }
 case 4:  {
  $7 = ((($c)) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_cram_codec_to_id($8,0)|0);
  $10 = ((($c)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_cram_codec_to_id($11,0)|0);
  $bnum1$0 = $9;$bnum2$0 = $12;
  break;
 }
 case 5:  {
  $13 = ((($c)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $bnum1$0 = $14;$bnum2$0 = -2;
  break;
 }
 case 0:  {
  $bnum1$0 = -2;$bnum2$0 = -2;
  break;
 }
 default: {
  HEAP32[$vararg_buffer>>2] = $0;
  _fprintf(9772,22763,$vararg_buffer);
  $bnum1$0 = -1;$bnum2$0 = -2;
 }
 }
 $15 = ($id2|0)==(0|0);
 if ($15) {
  STACKTOP = sp;return ($bnum1$0|0);
 }
 HEAP32[$id2>>2] = $bnum2$0;
 STACKTOP = sp;return ($bnum1$0|0);
}
function _crc32($crc,$buf,$len) {
 $crc = $crc|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$0$i = 0, $$01$i = 0, $$01$i$lcssa = 0, $$1$i = 0, $$12$i = 0, $$2$i = 0, $$3$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf4$0$i = 0, $buf4$1$i = 0, $c$0$i = 0, $c$0$masked$i = 0, $c$1$i = 0, $c$2$i = 0;
 var $c$3$i = 0, $c$3$masked$i = 0, $c$4$i = 0, $scevgep22 = 0, $scevgep24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($buf|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = $crc ^ -1;
 $$0$i = $buf;$$01$i = $len;$c$0$i = $1;
 while(1) {
  $2 = ($$01$i|0)==(0);
  if ($2) {
   $$01$i$lcssa = 0;
   break;
  }
  $3 = $$0$i;
  $4 = $3 & 3;
  $5 = ($4|0)==(0);
  if ($5) {
   $$01$i$lcssa = $$01$i;
   break;
  }
  $6 = ((($$0$i)) + 1|0);
  $7 = HEAP8[$$0$i>>0]|0;
  $8 = $7&255;
  $c$0$masked$i = $c$0$i & 255;
  $9 = $c$0$masked$i ^ $8;
  $10 = (648 + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $c$0$i >>> 8;
  $13 = $11 ^ $12;
  $14 = (($$01$i) + -1)|0;
  $$0$i = $6;$$01$i = $14;$c$0$i = $13;
 }
 $15 = ($$01$i$lcssa>>>0)<(31);
 $16 = $15 ? $$01$i$lcssa : 31;
 $17 = $16 ^ -1;
 $18 = (($$01$i$lcssa) + ($17))|0;
 $19 = (($18) + 32)|0;
 $20 = $19 & -32;
 $scevgep24 = (($$0$i) + ($20)|0);
 $$12$i = $$01$i$lcssa;$buf4$0$i = $$0$i;$c$1$i = $c$0$i;
 while(1) {
  $21 = ($$12$i>>>0)>(31);
  if (!($21)) {
   break;
  }
  $30 = ((($buf4$0$i)) + 4|0);
  $31 = HEAP32[$buf4$0$i>>2]|0;
  $32 = $c$1$i ^ $31;
  $33 = $32 & 255;
  $34 = (3720 + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $32 >>> 8;
  $37 = $36 & 255;
  $38 = (2696 + ($37<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $35 ^ $39;
  $41 = $32 >>> 16;
  $42 = $41 & 255;
  $43 = (1672 + ($42<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $40 ^ $44;
  $46 = $32 >>> 24;
  $47 = (648 + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $45 ^ $48;
  $50 = ((($buf4$0$i)) + 8|0);
  $51 = HEAP32[$30>>2]|0;
  $52 = $49 ^ $51;
  $53 = $52 & 255;
  $54 = (3720 + ($53<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $52 >>> 8;
  $57 = $56 & 255;
  $58 = (2696 + ($57<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $55 ^ $59;
  $61 = $52 >>> 16;
  $62 = $61 & 255;
  $63 = (1672 + ($62<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $60 ^ $64;
  $66 = $52 >>> 24;
  $67 = (648 + ($66<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $65 ^ $68;
  $70 = ((($buf4$0$i)) + 12|0);
  $71 = HEAP32[$50>>2]|0;
  $72 = $69 ^ $71;
  $73 = $72 & 255;
  $74 = (3720 + ($73<<2)|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $72 >>> 8;
  $77 = $76 & 255;
  $78 = (2696 + ($77<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $75 ^ $79;
  $81 = $72 >>> 16;
  $82 = $81 & 255;
  $83 = (1672 + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $80 ^ $84;
  $86 = $72 >>> 24;
  $87 = (648 + ($86<<2)|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $85 ^ $88;
  $90 = ((($buf4$0$i)) + 16|0);
  $91 = HEAP32[$70>>2]|0;
  $92 = $89 ^ $91;
  $93 = $92 & 255;
  $94 = (3720 + ($93<<2)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $92 >>> 8;
  $97 = $96 & 255;
  $98 = (2696 + ($97<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $95 ^ $99;
  $101 = $92 >>> 16;
  $102 = $101 & 255;
  $103 = (1672 + ($102<<2)|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = $100 ^ $104;
  $106 = $92 >>> 24;
  $107 = (648 + ($106<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $105 ^ $108;
  $110 = ((($buf4$0$i)) + 20|0);
  $111 = HEAP32[$90>>2]|0;
  $112 = $109 ^ $111;
  $113 = $112 & 255;
  $114 = (3720 + ($113<<2)|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $112 >>> 8;
  $117 = $116 & 255;
  $118 = (2696 + ($117<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = $115 ^ $119;
  $121 = $112 >>> 16;
  $122 = $121 & 255;
  $123 = (1672 + ($122<<2)|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $120 ^ $124;
  $126 = $112 >>> 24;
  $127 = (648 + ($126<<2)|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = $125 ^ $128;
  $130 = ((($buf4$0$i)) + 24|0);
  $131 = HEAP32[$110>>2]|0;
  $132 = $129 ^ $131;
  $133 = $132 & 255;
  $134 = (3720 + ($133<<2)|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = $132 >>> 8;
  $137 = $136 & 255;
  $138 = (2696 + ($137<<2)|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = $135 ^ $139;
  $141 = $132 >>> 16;
  $142 = $141 & 255;
  $143 = (1672 + ($142<<2)|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = $140 ^ $144;
  $146 = $132 >>> 24;
  $147 = (648 + ($146<<2)|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = $145 ^ $148;
  $150 = ((($buf4$0$i)) + 28|0);
  $151 = HEAP32[$130>>2]|0;
  $152 = $149 ^ $151;
  $153 = $152 & 255;
  $154 = (3720 + ($153<<2)|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = $152 >>> 8;
  $157 = $156 & 255;
  $158 = (2696 + ($157<<2)|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = $155 ^ $159;
  $161 = $152 >>> 16;
  $162 = $161 & 255;
  $163 = (1672 + ($162<<2)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $160 ^ $164;
  $166 = $152 >>> 24;
  $167 = (648 + ($166<<2)|0);
  $168 = HEAP32[$167>>2]|0;
  $169 = $165 ^ $168;
  $170 = ((($buf4$0$i)) + 32|0);
  $171 = HEAP32[$150>>2]|0;
  $172 = $169 ^ $171;
  $173 = $172 & 255;
  $174 = (3720 + ($173<<2)|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = $172 >>> 8;
  $177 = $176 & 255;
  $178 = (2696 + ($177<<2)|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = $175 ^ $179;
  $181 = $172 >>> 16;
  $182 = $181 & 255;
  $183 = (1672 + ($182<<2)|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = $180 ^ $184;
  $186 = $172 >>> 24;
  $187 = (648 + ($186<<2)|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = $185 ^ $188;
  $190 = (($$12$i) + -32)|0;
  $$12$i = $190;$buf4$0$i = $170;$c$1$i = $189;
 }
 $22 = (($$01$i$lcssa) - ($20))|0;
 $23 = ($22>>>0)<(3);
 $24 = $23 ? $22 : 3;
 $25 = $24 ^ -1;
 $26 = (($22) + ($25))|0;
 $27 = (($26) + 4)|0;
 $28 = $27 >>> 2;
 $29 = $28 << 2;
 $$2$i = $22;$buf4$1$i = $scevgep24;$c$2$i = $c$1$i;
 while(1) {
  $191 = ($$2$i>>>0)>(3);
  if (!($191)) {
   break;
  }
  $192 = ((($buf4$1$i)) + 4|0);
  $193 = HEAP32[$buf4$1$i>>2]|0;
  $194 = $c$2$i ^ $193;
  $195 = $194 & 255;
  $196 = (3720 + ($195<<2)|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = $194 >>> 8;
  $199 = $198 & 255;
  $200 = (2696 + ($199<<2)|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = $197 ^ $201;
  $203 = $194 >>> 16;
  $204 = $203 & 255;
  $205 = (1672 + ($204<<2)|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = $202 ^ $206;
  $208 = $194 >>> 24;
  $209 = (648 + ($208<<2)|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = $207 ^ $210;
  $212 = (($$2$i) + -4)|0;
  $$2$i = $212;$buf4$1$i = $192;$c$2$i = $211;
 }
 $213 = ($22|0)==($29|0);
 if ($213) {
  $c$4$i = $c$2$i;
 } else {
  $214 = (($22) - ($29))|0;
  $scevgep22 = (($scevgep24) + ($28<<2)|0);
  $$1$i = $scevgep22;$$3$i = $214;$c$3$i = $c$2$i;
  while(1) {
   $215 = HEAP8[$$1$i>>0]|0;
   $216 = $215&255;
   $c$3$masked$i = $c$3$i & 255;
   $217 = $c$3$masked$i ^ $216;
   $218 = (648 + ($217<<2)|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = $c$3$i >>> 8;
   $221 = $219 ^ $220;
   $222 = ((($$1$i)) + 1|0);
   $223 = (($$3$i) + -1)|0;
   $224 = ($223|0)==(0);
   if ($224) {
    $c$4$i = $221;
    break;
   } else {
    $$1$i = $222;$$3$i = $223;$c$3$i = $221;
   }
  }
 }
 $225 = $c$4$i ^ -1;
 $$0 = $225;
 return ($$0|0);
}
function _deflateInit2_($strm,$level,$method,$windowBits,$memLevel,$strategy,$version,$stream_size) {
 $strm = $strm|0;
 $level = $level|0;
 $method = $method|0;
 $windowBits = $windowBits|0;
 $memLevel = $memLevel|0;
 $strategy = $strategy|0;
 $version = $version|0;
 $stream_size = $stream_size|0;
 var $$ = 0, $$$1 = 0, $$0 = 0, $$1 = 0, $$16 = 0, $$level = 0, $$windowBits = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond5 = 0, $exitcond6 = 0, $memLevel$off = 0, $n$0$i$i$i$i = 0, $n$1$i$i$i$i = 0, $n$2$i$i$i$i = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond15 = 0, $or$cond8$not = 0, $wrap$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($version|0)==(0|0);
 if ($0) {
  $$0 = -6;
  return ($$0|0);
 }
 $1 = HEAP8[$version>>0]|0;
 $2 = ($1<<24>>24)==(49);
 $3 = ($stream_size|0)==(56);
 $or$cond = $2 & $3;
 if (!($or$cond)) {
  $$0 = -6;
  return ($$0|0);
 }
 $4 = ($strm|0)==(0|0);
 if ($4) {
  $$0 = -2;
  return ($$0|0);
 }
 $5 = ((($strm)) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($strm)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  HEAP32[$6>>2] = 104;
  $9 = ((($strm)) + 40|0);
  HEAP32[$9>>2] = 0;
  $28 = 104;
 } else {
  $28 = $7;
 }
 $10 = ((($strm)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  HEAP32[$10>>2] = 105;
 }
 $13 = ($level|0)==(-1);
 $$level = $13 ? 6 : $level;
 $14 = ($windowBits|0)<(0);
 if ($14) {
  $15 = (0 - ($windowBits))|0;
  $$1 = $15;$wrap$1 = 0;
 } else {
  $16 = ($windowBits|0)>(15);
  $17 = (($windowBits) + -16)|0;
  $$windowBits = $16 ? $17 : $windowBits;
  $$ = $16 ? 2 : 1;
  $$1 = $$windowBits;$wrap$1 = $$;
 }
 $memLevel$off = (($memLevel) + -1)|0;
 $notlhs = ($memLevel$off>>>0)>(8);
 $notrhs = ($method|0)!=(8);
 $or$cond8$not = $notrhs | $notlhs;
 $18 = $$1 & -8;
 $19 = ($18|0)!=(8);
 $20 = $19 | $or$cond8$not;
 $21 = ($$level>>>0)>(9);
 $22 = $21 | $20;
 $23 = ($strategy>>>0)>(4);
 $24 = $23 | $22;
 if ($24) {
  $$0 = -2;
  return ($$0|0);
 }
 $25 = ($$1|0)==(8);
 $$$1 = $25 ? 9 : $$1;
 $26 = ((($strm)) + 40|0);
 $27 = HEAP32[$26>>2]|0;
 $29 = (FUNCTION_TABLE_iiii[$28 & 127]($27,1,5828)|0);
 $30 = ($29|0)==(0|0);
 if ($30) {
  $$0 = -4;
  return ($$0|0);
 }
 $31 = ((($strm)) + 28|0);
 HEAP32[$31>>2] = $29;
 HEAP32[$29>>2] = $strm;
 $32 = ((($29)) + 24|0);
 HEAP32[$32>>2] = $wrap$1;
 $33 = ((($29)) + 28|0);
 HEAP32[$33>>2] = 0;
 $34 = ((($29)) + 48|0);
 HEAP32[$34>>2] = $$$1;
 $35 = 1 << $$$1;
 $36 = ((($29)) + 44|0);
 HEAP32[$36>>2] = $35;
 $37 = (($35) + -1)|0;
 $38 = ((($29)) + 52|0);
 HEAP32[$38>>2] = $37;
 $39 = (($memLevel) + 7)|0;
 $40 = ((($29)) + 80|0);
 HEAP32[$40>>2] = $39;
 $41 = 1 << $39;
 $42 = ((($29)) + 76|0);
 HEAP32[$42>>2] = $41;
 $43 = (($41) + -1)|0;
 $44 = ((($29)) + 84|0);
 HEAP32[$44>>2] = $43;
 $45 = (($memLevel) + 9)|0;
 $46 = (($45>>>0) / 3)&-1;
 $47 = ((($29)) + 88|0);
 HEAP32[$47>>2] = $46;
 $48 = HEAP32[$6>>2]|0;
 $49 = HEAP32[$26>>2]|0;
 $50 = (FUNCTION_TABLE_iiii[$48 & 127]($49,$35,2)|0);
 $51 = ((($29)) + 56|0);
 HEAP32[$51>>2] = $50;
 $52 = HEAP32[$6>>2]|0;
 $53 = HEAP32[$26>>2]|0;
 $54 = HEAP32[$36>>2]|0;
 $55 = (FUNCTION_TABLE_iiii[$52 & 127]($53,$54,2)|0);
 $56 = ((($29)) + 64|0);
 HEAP32[$56>>2] = $55;
 $57 = HEAP32[$6>>2]|0;
 $58 = HEAP32[$26>>2]|0;
 $59 = HEAP32[$42>>2]|0;
 $60 = (FUNCTION_TABLE_iiii[$57 & 127]($58,$59,2)|0);
 $61 = ((($29)) + 68|0);
 HEAP32[$61>>2] = $60;
 $62 = ((($29)) + 5824|0);
 HEAP32[$62>>2] = 0;
 $63 = (($memLevel) + 6)|0;
 $64 = 1 << $63;
 $65 = ((($29)) + 5788|0);
 HEAP32[$65>>2] = $64;
 $66 = HEAP32[$6>>2]|0;
 $67 = HEAP32[$26>>2]|0;
 $68 = (FUNCTION_TABLE_iiii[$66 & 127]($67,$64,4)|0);
 $69 = ((($29)) + 8|0);
 HEAP32[$69>>2] = $68;
 $70 = HEAP32[$65>>2]|0;
 $71 = $70 << 2;
 $72 = ((($29)) + 12|0);
 HEAP32[$72>>2] = $71;
 $73 = HEAP32[$51>>2]|0;
 $74 = ($73|0)==(0|0);
 if (!($74)) {
  $75 = HEAP32[$56>>2]|0;
  $76 = ($75|0)==(0|0);
  if (!($76)) {
   $77 = HEAP32[$61>>2]|0;
   $78 = ($77|0)==(0|0);
   $79 = ($68|0)==(0|0);
   $or$cond15 = $78 | $79;
   if (!($or$cond15)) {
    $81 = $70 >>> 1;
    $82 = (($68) + ($81<<1)|0);
    $83 = ((($29)) + 5796|0);
    HEAP32[$83>>2] = $82;
    $84 = ($70*3)|0;
    $85 = (($68) + ($84)|0);
    $86 = ((($29)) + 5784|0);
    HEAP32[$86>>2] = $85;
    $87 = ((($29)) + 132|0);
    HEAP32[$87>>2] = $$level;
    $88 = ((($29)) + 136|0);
    HEAP32[$88>>2] = $strategy;
    $89 = ((($29)) + 36|0);
    HEAP8[$89>>0] = 8;
    $90 = HEAP32[$31>>2]|0;
    $91 = ($90|0)==(0|0);
    if ($91) {
     $$0 = -2;
     return ($$0|0);
    }
    $92 = HEAP32[$6>>2]|0;
    $93 = ($92|0)==(0|0);
    if ($93) {
     $$0 = -2;
     return ($$0|0);
    }
    $94 = HEAP32[$10>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$0 = -2;
     return ($$0|0);
    }
    $96 = ((($strm)) + 20|0);
    HEAP32[$96>>2] = 0;
    $97 = ((($strm)) + 8|0);
    HEAP32[$97>>2] = 0;
    HEAP32[$5>>2] = 0;
    $98 = ((($strm)) + 44|0);
    HEAP32[$98>>2] = 2;
    $99 = ((($90)) + 20|0);
    HEAP32[$99>>2] = 0;
    $100 = ((($90)) + 8|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = ((($90)) + 16|0);
    HEAP32[$102>>2] = $101;
    $103 = ((($90)) + 24|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = ($104|0)<(0);
    if ($105) {
     $106 = (0 - ($104))|0;
     HEAP32[$103>>2] = $106;
     $108 = $106;
    } else {
     $108 = $104;
    }
    $107 = ($108|0)!=(0);
    $109 = $107 ? 42 : 113;
    $110 = ((($90)) + 4|0);
    HEAP32[$110>>2] = $109;
    $not$ = ($108|0)!=(2);
    $$16 = $not$&1;
    $111 = ((($strm)) + 48|0);
    HEAP32[$111>>2] = $$16;
    $112 = ((($90)) + 40|0);
    HEAP32[$112>>2] = 0;
    $113 = ((($90)) + 148|0);
    $114 = ((($90)) + 2840|0);
    HEAP32[$114>>2] = $113;
    $115 = ((($90)) + 2848|0);
    HEAP32[$115>>2] = 8960;
    $116 = ((($90)) + 2440|0);
    $117 = ((($90)) + 2852|0);
    HEAP32[$117>>2] = $116;
    $118 = ((($90)) + 2860|0);
    HEAP32[$118>>2] = 9096;
    $119 = ((($90)) + 2684|0);
    $120 = ((($90)) + 2864|0);
    HEAP32[$120>>2] = $119;
    $121 = ((($90)) + 2872|0);
    HEAP32[$121>>2] = 9236;
    $122 = ((($90)) + 5816|0);
    HEAP16[$122>>1] = 0;
    $123 = ((($90)) + 5820|0);
    HEAP32[$123>>2] = 0;
    $n$0$i$i$i$i = 0;
    while(1) {
     $exitcond6 = ($n$0$i$i$i$i|0)==(286);
     if ($exitcond6) {
      $n$1$i$i$i$i = 0;
      break;
     }
     $124 = (((($90)) + 148|0) + ($n$0$i$i$i$i<<2)|0);
     HEAP16[$124>>1] = 0;
     $125 = (($n$0$i$i$i$i) + 1)|0;
     $n$0$i$i$i$i = $125;
    }
    while(1) {
     $exitcond5 = ($n$1$i$i$i$i|0)==(30);
     if ($exitcond5) {
      $n$2$i$i$i$i = 0;
      break;
     }
     $126 = (((($90)) + 2440|0) + ($n$1$i$i$i$i<<2)|0);
     HEAP16[$126>>1] = 0;
     $127 = (($n$1$i$i$i$i) + 1)|0;
     $n$1$i$i$i$i = $127;
    }
    while(1) {
     $exitcond = ($n$2$i$i$i$i|0)==(19);
     if ($exitcond) {
      break;
     }
     $128 = (((($90)) + 2684|0) + ($n$2$i$i$i$i<<2)|0);
     HEAP16[$128>>1] = 0;
     $129 = (($n$2$i$i$i$i) + 1)|0;
     $n$2$i$i$i$i = $129;
    }
    $130 = ((($90)) + 1172|0);
    HEAP16[$130>>1] = 1;
    $131 = ((($90)) + 5804|0);
    HEAP32[$131>>2] = 0;
    $132 = ((($90)) + 5800|0);
    HEAP32[$132>>2] = 0;
    $133 = ((($90)) + 5808|0);
    HEAP32[$133>>2] = 0;
    $134 = ((($90)) + 5792|0);
    HEAP32[$134>>2] = 0;
    $135 = HEAP32[$31>>2]|0;
    $136 = ((($135)) + 44|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $137 << 1;
    $139 = ((($135)) + 60|0);
    HEAP32[$139>>2] = $138;
    $140 = ((($135)) + 76|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (($141) + -1)|0;
    $143 = ((($135)) + 68|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = (($144) + ($142<<1)|0);
    HEAP16[$145>>1] = 0;
    $146 = HEAP32[$143>>2]|0;
    $147 = HEAP32[$140>>2]|0;
    $148 = $147 << 1;
    $149 = (($148) + -2)|0;
    _memset(($146|0),0,($149|0))|0;
    $150 = ((($135)) + 132|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = (((8840 + (($151*12)|0)|0)) + 2|0);
    $153 = HEAP16[$152>>1]|0;
    $154 = $153&65535;
    $155 = ((($135)) + 128|0);
    HEAP32[$155>>2] = $154;
    $156 = (8840 + (($151*12)|0)|0);
    $157 = HEAP16[$156>>1]|0;
    $158 = $157&65535;
    $159 = ((($135)) + 140|0);
    HEAP32[$159>>2] = $158;
    $160 = (((8840 + (($151*12)|0)|0)) + 4|0);
    $161 = HEAP16[$160>>1]|0;
    $162 = $161&65535;
    $163 = ((($135)) + 144|0);
    HEAP32[$163>>2] = $162;
    $164 = (((8840 + (($151*12)|0)|0)) + 6|0);
    $165 = HEAP16[$164>>1]|0;
    $166 = $165&65535;
    $167 = ((($135)) + 124|0);
    HEAP32[$167>>2] = $166;
    $168 = ((($135)) + 108|0);
    HEAP32[$168>>2] = 0;
    $169 = ((($135)) + 92|0);
    HEAP32[$169>>2] = 0;
    $170 = ((($135)) + 116|0);
    HEAP32[$170>>2] = 0;
    $171 = ((($135)) + 5812|0);
    HEAP32[$171>>2] = 0;
    $172 = ((($135)) + 120|0);
    HEAP32[$172>>2] = 2;
    $173 = ((($135)) + 96|0);
    HEAP32[$173>>2] = 2;
    $174 = ((($135)) + 104|0);
    HEAP32[$174>>2] = 0;
    $175 = ((($135)) + 72|0);
    HEAP32[$175>>2] = 0;
    $$0 = 0;
    return ($$0|0);
   }
  }
 }
 $80 = ((($29)) + 4|0);
 HEAP32[$80>>2] = 666;
 HEAP32[$5>>2] = 23967;
 (_deflateEnd($strm)|0);
 $$0 = -4;
 return ($$0|0);
}
function _deflateEnd($strm) {
 $strm = $strm|0;
 var $$0 = 0, $$in = 0, $$in10 = 0, $$in9 = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $$pre1 = 0, $$pre2 = 0, $$pre3 = 0, $$pre4 = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($strm|0)==(0|0);
 if ($0) {
  $$0 = -2;
  return ($$0|0);
 }
 $1 = ((($strm)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = -2;
  return ($$0|0);
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($5|0) {
 case 666: case 113: case 103: case 91: case 73: case 69: case 42:  {
  break;
 }
 default: {
  $$0 = -2;
  return ($$0|0);
 }
 }
 $6 = ((($2)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$in = $2;
 } else {
  $9 = ((($strm)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($strm)) + 40|0);
  $12 = HEAP32[$11>>2]|0;
  FUNCTION_TABLE_vii[$10 & 127]($12,$7);
  $$pre = HEAP32[$1>>2]|0;
  $$in = $$pre;
 }
 $13 = ((($$in)) + 68|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$in9 = $$in;
 } else {
  $16 = ((($strm)) + 36|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($strm)) + 40|0);
  $19 = HEAP32[$18>>2]|0;
  FUNCTION_TABLE_vii[$17 & 127]($19,$14);
  $$pre1 = HEAP32[$1>>2]|0;
  $$in9 = $$pre1;
 }
 $20 = ((($$in9)) + 64|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $$in10 = $$in9;
 } else {
  $23 = ((($strm)) + 36|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($strm)) + 40|0);
  $26 = HEAP32[$25>>2]|0;
  FUNCTION_TABLE_vii[$24 & 127]($26,$21);
  $$pre2 = HEAP32[$1>>2]|0;
  $$in10 = $$pre2;
 }
 $27 = ((($$in10)) + 56|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  $$pre4 = ((($strm)) + 36|0);
  $$pre5 = ((($strm)) + 40|0);
  $$pre$phi6Z2D = $$pre5;$$pre$phiZ2D = $$pre4;$36 = $$in10;
 } else {
  $30 = ((($strm)) + 36|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($strm)) + 40|0);
  $33 = HEAP32[$32>>2]|0;
  FUNCTION_TABLE_vii[$31 & 127]($33,$28);
  $$pre3 = HEAP32[$1>>2]|0;
  $$pre$phi6Z2D = $32;$$pre$phiZ2D = $30;$36 = $$pre3;
 }
 $34 = HEAP32[$$pre$phiZ2D>>2]|0;
 $35 = HEAP32[$$pre$phi6Z2D>>2]|0;
 FUNCTION_TABLE_vii[$34 & 127]($35,$36);
 HEAP32[$1>>2] = 0;
 $37 = ($5|0)==(113);
 $38 = $37 ? -3 : 0;
 $$0 = $38;
 return ($$0|0);
}
function _deflate_stored($s,$flush) {
 $s = $s|0;
 $flush = $flush|0;
 var $$ = 0, $$0 = 0, $$19 = 0, $$20 = 0, $$21 = 0, $$22 = 0, $$23 = 0, $$not = 0, $$not18 = 0, $$pre = 0, $$pre$phi13Z2D = 0, $$pre$phi15Z2D = 0, $$pre$phi17Z2D = 0, $$pre$phiZ2D = 0, $$pre10 = 0, $$pre11 = 0, $$pre12 = 0, $$pre14 = 0, $$pre16 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -5)|0;
 $3 = ($2>>>0)<(65535);
 $$ = $3 ? $2 : 65535;
 $4 = ((($s)) + 116|0);
 $5 = ((($s)) + 108|0);
 $6 = ((($s)) + 92|0);
 $7 = ((($s)) + 56|0);
 $8 = ((($s)) + 44|0);
 while(1) {
  $9 = HEAP32[$4>>2]|0;
  $10 = ($9>>>0)<(2);
  if ($10) {
   _fill_window($s);
   $11 = HEAP32[$4>>2]|0;
   $12 = ($11|0)==(0);
   $$not = $12 ^ 1;
   $$not18 = ($flush|0)!=(0);
   $brmerge = $$not18 | $$not;
   if (!($brmerge)) {
    $$0 = 0;
    label = 55;
    break;
   }
   if ($12) {
    label = 30;
    break;
   } else {
    $15 = $11;
   }
  } else {
   $15 = $9;
  }
  $13 = HEAP32[$5>>2]|0;
  $14 = (($13) + ($15))|0;
  HEAP32[$5>>2] = $14;
  HEAP32[$4>>2] = 0;
  $16 = HEAP32[$6>>2]|0;
  $17 = (($16) + ($$))|0;
  $18 = ($14|0)!=(0);
  $19 = ($14>>>0)<($17>>>0);
  $or$cond = $18 & $19;
  if ($or$cond) {
   $90 = $14;$91 = $16;
  } else {
   $20 = (($14) - ($17))|0;
   HEAP32[$4>>2] = $20;
   HEAP32[$5>>2] = $17;
   $21 = ($16|0)>(-1);
   if ($21) {
    $22 = HEAP32[$7>>2]|0;
    $23 = (($22) + ($16)|0);
    $24 = $23;
   } else {
    $24 = 0;
   }
   __tr_flush_block($s,$24,$$,0);
   $25 = HEAP32[$5>>2]|0;
   HEAP32[$6>>2] = $25;
   $26 = HEAP32[$s>>2]|0;
   $27 = ((($26)) + 28|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($28)) + 5820|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(16);
   do {
    if ($31) {
     $32 = ((($28)) + 5816|0);
     $33 = HEAP16[$32>>1]|0;
     $34 = $33&255;
     $35 = ((($28)) + 20|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = (($36) + 1)|0;
     HEAP32[$35>>2] = $37;
     $38 = ((($28)) + 8|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($39) + ($36)|0);
     HEAP8[$40>>0] = $34;
     $41 = HEAP16[$32>>1]|0;
     $42 = ($41&65535) >>> 8;
     $43 = $42&255;
     $44 = HEAP32[$35>>2]|0;
     $45 = (($44) + 1)|0;
     HEAP32[$35>>2] = $45;
     $46 = HEAP32[$38>>2]|0;
     $47 = (($46) + ($44)|0);
     HEAP8[$47>>0] = $43;
     HEAP16[$32>>1] = 0;
     HEAP32[$29>>2] = 0;
     $$pre$phi15Z2D = $35;
    } else {
     $48 = ($30|0)>(7);
     if ($48) {
      $49 = ((($28)) + 5816|0);
      $50 = HEAP16[$49>>1]|0;
      $51 = $50&255;
      $52 = ((($28)) + 20|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (($53) + 1)|0;
      HEAP32[$52>>2] = $54;
      $55 = ((($28)) + 8|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = (($56) + ($53)|0);
      HEAP8[$57>>0] = $51;
      $58 = HEAP16[$49>>1]|0;
      $59 = ($58&65535) >>> 8;
      HEAP16[$49>>1] = $59;
      $60 = HEAP32[$29>>2]|0;
      $61 = (($60) + -8)|0;
      HEAP32[$29>>2] = $61;
      $$pre$phi15Z2D = $52;
      break;
     } else {
      $$pre14 = ((($28)) + 20|0);
      $$pre$phi15Z2D = $$pre14;
      break;
     }
    }
   } while(0);
   $62 = HEAP32[$$pre$phi15Z2D>>2]|0;
   $63 = ((($26)) + 16|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($62>>>0)>($64>>>0);
   $$19 = $65 ? $64 : $62;
   $66 = ($$19|0)==(0);
   if (!($66)) {
    $67 = ((($26)) + 12|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((($28)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    _memcpy(($68|0),($70|0),($$19|0))|0;
    $71 = HEAP32[$67>>2]|0;
    $72 = (($71) + ($$19)|0);
    HEAP32[$67>>2] = $72;
    $73 = HEAP32[$69>>2]|0;
    $74 = (($73) + ($$19)|0);
    HEAP32[$69>>2] = $74;
    $75 = ((($26)) + 20|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (($76) + ($$19))|0;
    HEAP32[$75>>2] = $77;
    $78 = HEAP32[$63>>2]|0;
    $79 = (($78) - ($$19))|0;
    HEAP32[$63>>2] = $79;
    $80 = HEAP32[$$pre$phi15Z2D>>2]|0;
    $81 = (($80) - ($$19))|0;
    HEAP32[$$pre$phi15Z2D>>2] = $81;
    $82 = ($80|0)==($$19|0);
    if ($82) {
     $83 = ((($28)) + 8|0);
     $84 = HEAP32[$83>>2]|0;
     HEAP32[$69>>2] = $84;
    }
   }
   $85 = HEAP32[$s>>2]|0;
   $86 = ((($85)) + 16|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==(0);
   if ($88) {
    $$0 = 0;
    label = 55;
    break;
   }
   $$pre = HEAP32[$5>>2]|0;
   $$pre10 = HEAP32[$6>>2]|0;
   $90 = $$pre;$91 = $$pre10;
  }
  $89 = (($90) - ($91))|0;
  $92 = HEAP32[$8>>2]|0;
  $93 = (($92) + -262)|0;
  $94 = ($89>>>0)<($93>>>0);
  if ($94) {
   continue;
  }
  $95 = ($91|0)>(-1);
  if ($95) {
   $96 = HEAP32[$7>>2]|0;
   $97 = (($96) + ($91)|0);
   $98 = $97;
  } else {
   $98 = 0;
  }
  __tr_flush_block($s,$98,$89,0);
  $99 = HEAP32[$5>>2]|0;
  HEAP32[$6>>2] = $99;
  $100 = HEAP32[$s>>2]|0;
  $101 = ((($100)) + 28|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ((($102)) + 5820|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ($104|0)==(16);
  do {
   if ($105) {
    $106 = ((($102)) + 5816|0);
    $107 = HEAP16[$106>>1]|0;
    $108 = $107&255;
    $109 = ((($102)) + 20|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = (($110) + 1)|0;
    HEAP32[$109>>2] = $111;
    $112 = ((($102)) + 8|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (($113) + ($110)|0);
    HEAP8[$114>>0] = $108;
    $115 = HEAP16[$106>>1]|0;
    $116 = ($115&65535) >>> 8;
    $117 = $116&255;
    $118 = HEAP32[$109>>2]|0;
    $119 = (($118) + 1)|0;
    HEAP32[$109>>2] = $119;
    $120 = HEAP32[$112>>2]|0;
    $121 = (($120) + ($118)|0);
    HEAP8[$121>>0] = $117;
    HEAP16[$106>>1] = 0;
    HEAP32[$103>>2] = 0;
    $$pre$phi17Z2D = $109;
   } else {
    $122 = ($104|0)>(7);
    if ($122) {
     $123 = ((($102)) + 5816|0);
     $124 = HEAP16[$123>>1]|0;
     $125 = $124&255;
     $126 = ((($102)) + 20|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($127) + 1)|0;
     HEAP32[$126>>2] = $128;
     $129 = ((($102)) + 8|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = (($130) + ($127)|0);
     HEAP8[$131>>0] = $125;
     $132 = HEAP16[$123>>1]|0;
     $133 = ($132&65535) >>> 8;
     HEAP16[$123>>1] = $133;
     $134 = HEAP32[$103>>2]|0;
     $135 = (($134) + -8)|0;
     HEAP32[$103>>2] = $135;
     $$pre$phi17Z2D = $126;
     break;
    } else {
     $$pre16 = ((($102)) + 20|0);
     $$pre$phi17Z2D = $$pre16;
     break;
    }
   }
  } while(0);
  $136 = HEAP32[$$pre$phi17Z2D>>2]|0;
  $137 = ((($100)) + 16|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = ($136>>>0)>($138>>>0);
  $$20 = $139 ? $138 : $136;
  $140 = ($$20|0)==(0);
  if (!($140)) {
   $141 = ((($100)) + 12|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ((($102)) + 16|0);
   $144 = HEAP32[$143>>2]|0;
   _memcpy(($142|0),($144|0),($$20|0))|0;
   $145 = HEAP32[$141>>2]|0;
   $146 = (($145) + ($$20)|0);
   HEAP32[$141>>2] = $146;
   $147 = HEAP32[$143>>2]|0;
   $148 = (($147) + ($$20)|0);
   HEAP32[$143>>2] = $148;
   $149 = ((($100)) + 20|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = (($150) + ($$20))|0;
   HEAP32[$149>>2] = $151;
   $152 = HEAP32[$137>>2]|0;
   $153 = (($152) - ($$20))|0;
   HEAP32[$137>>2] = $153;
   $154 = HEAP32[$$pre$phi17Z2D>>2]|0;
   $155 = (($154) - ($$20))|0;
   HEAP32[$$pre$phi17Z2D>>2] = $155;
   $156 = ($154|0)==($$20|0);
   if ($156) {
    $157 = ((($102)) + 8|0);
    $158 = HEAP32[$157>>2]|0;
    HEAP32[$143>>2] = $158;
   }
  }
  $159 = HEAP32[$s>>2]|0;
  $160 = ((($159)) + 16|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = ($161|0)==(0);
  if ($162) {
   $$0 = 0;
   label = 55;
   break;
  }
 }
 if ((label|0) == 30) {
  $163 = ((($s)) + 5812|0);
  HEAP32[$163>>2] = 0;
  $164 = ($flush|0)==(4);
  if ($164) {
   $165 = HEAP32[$6>>2]|0;
   $166 = ($165|0)>(-1);
   if ($166) {
    $167 = HEAP32[$7>>2]|0;
    $168 = (($167) + ($165)|0);
    $171 = $168;
   } else {
    $171 = 0;
   }
   $169 = HEAP32[$5>>2]|0;
   $170 = (($169) - ($165))|0;
   __tr_flush_block($s,$171,$170,1);
   $172 = HEAP32[$5>>2]|0;
   HEAP32[$6>>2] = $172;
   $173 = HEAP32[$s>>2]|0;
   $174 = ((($173)) + 28|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = ((($175)) + 5820|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = ($177|0)==(16);
   do {
    if ($178) {
     $179 = ((($175)) + 5816|0);
     $180 = HEAP16[$179>>1]|0;
     $181 = $180&255;
     $182 = ((($175)) + 20|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (($183) + 1)|0;
     HEAP32[$182>>2] = $184;
     $185 = ((($175)) + 8|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = (($186) + ($183)|0);
     HEAP8[$187>>0] = $181;
     $188 = HEAP16[$179>>1]|0;
     $189 = ($188&65535) >>> 8;
     $190 = $189&255;
     $191 = HEAP32[$182>>2]|0;
     $192 = (($191) + 1)|0;
     HEAP32[$182>>2] = $192;
     $193 = HEAP32[$185>>2]|0;
     $194 = (($193) + ($191)|0);
     HEAP8[$194>>0] = $190;
     HEAP16[$179>>1] = 0;
     HEAP32[$176>>2] = 0;
     $$pre$phiZ2D = $182;
    } else {
     $195 = ($177|0)>(7);
     if ($195) {
      $196 = ((($175)) + 5816|0);
      $197 = HEAP16[$196>>1]|0;
      $198 = $197&255;
      $199 = ((($175)) + 20|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = (($200) + 1)|0;
      HEAP32[$199>>2] = $201;
      $202 = ((($175)) + 8|0);
      $203 = HEAP32[$202>>2]|0;
      $204 = (($203) + ($200)|0);
      HEAP8[$204>>0] = $198;
      $205 = HEAP16[$196>>1]|0;
      $206 = ($205&65535) >>> 8;
      HEAP16[$196>>1] = $206;
      $207 = HEAP32[$176>>2]|0;
      $208 = (($207) + -8)|0;
      HEAP32[$176>>2] = $208;
      $$pre$phiZ2D = $199;
      break;
     } else {
      $$pre11 = ((($175)) + 20|0);
      $$pre$phiZ2D = $$pre11;
      break;
     }
    }
   } while(0);
   $209 = HEAP32[$$pre$phiZ2D>>2]|0;
   $210 = ((($173)) + 16|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = ($209>>>0)>($211>>>0);
   $$21 = $212 ? $211 : $209;
   $213 = ($$21|0)==(0);
   if ($213) {
    $232 = HEAP32[$s>>2]|0;
    $233 = ((($232)) + 16|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = ($234|0)==(0);
    $$22 = $235 ? 2 : 3;
    return ($$22|0);
   }
   $214 = ((($173)) + 12|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = ((($175)) + 16|0);
   $217 = HEAP32[$216>>2]|0;
   _memcpy(($215|0),($217|0),($$21|0))|0;
   $218 = HEAP32[$214>>2]|0;
   $219 = (($218) + ($$21)|0);
   HEAP32[$214>>2] = $219;
   $220 = HEAP32[$216>>2]|0;
   $221 = (($220) + ($$21)|0);
   HEAP32[$216>>2] = $221;
   $222 = ((($173)) + 20|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = (($223) + ($$21))|0;
   HEAP32[$222>>2] = $224;
   $225 = HEAP32[$210>>2]|0;
   $226 = (($225) - ($$21))|0;
   HEAP32[$210>>2] = $226;
   $227 = HEAP32[$$pre$phiZ2D>>2]|0;
   $228 = (($227) - ($$21))|0;
   HEAP32[$$pre$phiZ2D>>2] = $228;
   $229 = ($227|0)==($$21|0);
   if (!($229)) {
    $232 = HEAP32[$s>>2]|0;
    $233 = ((($232)) + 16|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = ($234|0)==(0);
    $$22 = $235 ? 2 : 3;
    return ($$22|0);
   }
   $230 = ((($175)) + 8|0);
   $231 = HEAP32[$230>>2]|0;
   HEAP32[$216>>2] = $231;
   $232 = HEAP32[$s>>2]|0;
   $233 = ((($232)) + 16|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = ($234|0)==(0);
   $$22 = $235 ? 2 : 3;
   return ($$22|0);
  }
  $236 = HEAP32[$5>>2]|0;
  $237 = HEAP32[$6>>2]|0;
  $238 = ($236|0)>($237|0);
  if ($238) {
   $239 = ($237|0)>(-1);
   if ($239) {
    $240 = HEAP32[$7>>2]|0;
    $241 = (($240) + ($237)|0);
    $243 = $241;
   } else {
    $243 = 0;
   }
   $242 = (($236) - ($237))|0;
   __tr_flush_block($s,$243,$242,0);
   $244 = HEAP32[$5>>2]|0;
   HEAP32[$6>>2] = $244;
   $245 = HEAP32[$s>>2]|0;
   $246 = ((($245)) + 28|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = ((($247)) + 5820|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = ($249|0)==(16);
   do {
    if ($250) {
     $251 = ((($247)) + 5816|0);
     $252 = HEAP16[$251>>1]|0;
     $253 = $252&255;
     $254 = ((($247)) + 20|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = (($255) + 1)|0;
     HEAP32[$254>>2] = $256;
     $257 = ((($247)) + 8|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = (($258) + ($255)|0);
     HEAP8[$259>>0] = $253;
     $260 = HEAP16[$251>>1]|0;
     $261 = ($260&65535) >>> 8;
     $262 = $261&255;
     $263 = HEAP32[$254>>2]|0;
     $264 = (($263) + 1)|0;
     HEAP32[$254>>2] = $264;
     $265 = HEAP32[$257>>2]|0;
     $266 = (($265) + ($263)|0);
     HEAP8[$266>>0] = $262;
     HEAP16[$251>>1] = 0;
     HEAP32[$248>>2] = 0;
     $$pre$phi13Z2D = $254;
    } else {
     $267 = ($249|0)>(7);
     if ($267) {
      $268 = ((($247)) + 5816|0);
      $269 = HEAP16[$268>>1]|0;
      $270 = $269&255;
      $271 = ((($247)) + 20|0);
      $272 = HEAP32[$271>>2]|0;
      $273 = (($272) + 1)|0;
      HEAP32[$271>>2] = $273;
      $274 = ((($247)) + 8|0);
      $275 = HEAP32[$274>>2]|0;
      $276 = (($275) + ($272)|0);
      HEAP8[$276>>0] = $270;
      $277 = HEAP16[$268>>1]|0;
      $278 = ($277&65535) >>> 8;
      HEAP16[$268>>1] = $278;
      $279 = HEAP32[$248>>2]|0;
      $280 = (($279) + -8)|0;
      HEAP32[$248>>2] = $280;
      $$pre$phi13Z2D = $271;
      break;
     } else {
      $$pre12 = ((($247)) + 20|0);
      $$pre$phi13Z2D = $$pre12;
      break;
     }
    }
   } while(0);
   $281 = HEAP32[$$pre$phi13Z2D>>2]|0;
   $282 = ((($245)) + 16|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = ($281>>>0)>($283>>>0);
   $$23 = $284 ? $283 : $281;
   $285 = ($$23|0)==(0);
   if (!($285)) {
    $286 = ((($245)) + 12|0);
    $287 = HEAP32[$286>>2]|0;
    $288 = ((($247)) + 16|0);
    $289 = HEAP32[$288>>2]|0;
    _memcpy(($287|0),($289|0),($$23|0))|0;
    $290 = HEAP32[$286>>2]|0;
    $291 = (($290) + ($$23)|0);
    HEAP32[$286>>2] = $291;
    $292 = HEAP32[$288>>2]|0;
    $293 = (($292) + ($$23)|0);
    HEAP32[$288>>2] = $293;
    $294 = ((($245)) + 20|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = (($295) + ($$23))|0;
    HEAP32[$294>>2] = $296;
    $297 = HEAP32[$282>>2]|0;
    $298 = (($297) - ($$23))|0;
    HEAP32[$282>>2] = $298;
    $299 = HEAP32[$$pre$phi13Z2D>>2]|0;
    $300 = (($299) - ($$23))|0;
    HEAP32[$$pre$phi13Z2D>>2] = $300;
    $301 = ($299|0)==($$23|0);
    if ($301) {
     $302 = ((($247)) + 8|0);
     $303 = HEAP32[$302>>2]|0;
     HEAP32[$288>>2] = $303;
    }
   }
   $304 = HEAP32[$s>>2]|0;
   $305 = ((($304)) + 16|0);
   $306 = HEAP32[$305>>2]|0;
   $307 = ($306|0)==(0);
   if ($307) {
    $$0 = 0;
    return ($$0|0);
   }
  }
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 55) {
  return ($$0|0);
 }
 return (0)|0;
}
function _fill_window($s) {
 $s = $s|0;
 var $$0$i = 0, $$4 = 0, $$5 = 0, $$pre = 0, $$pre1 = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $more$0 = 0, $more$0$ = 0, $n$0 = 0, $n$1 = 0, $p$0 = 0, $p$1 = 0, $str$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($s)) + 60|0);
 $3 = ((($s)) + 116|0);
 $4 = ((($s)) + 108|0);
 $5 = ((($s)) + 56|0);
 $6 = ((($s)) + 5812|0);
 $7 = ((($s)) + 72|0);
 $8 = ((($s)) + 88|0);
 $9 = ((($s)) + 84|0);
 $10 = ((($s)) + 68|0);
 $11 = ((($s)) + 52|0);
 $12 = ((($s)) + 64|0);
 $13 = ((($s)) + 112|0);
 $14 = ((($s)) + 92|0);
 $15 = ((($s)) + 76|0);
 $$pre = HEAP32[$3>>2]|0;
 $18 = $$pre;$22 = $1;
 while(1) {
  $16 = HEAP32[$2>>2]|0;
  $17 = (($16) - ($18))|0;
  $19 = HEAP32[$4>>2]|0;
  $20 = (($17) - ($19))|0;
  $21 = (($22) + -262)|0;
  $23 = (($1) + ($21))|0;
  $24 = ($19>>>0)<($23>>>0);
  if ($24) {
   $more$0 = $20;
  } else {
   $25 = HEAP32[$5>>2]|0;
   $26 = (($25) + ($1)|0);
   _memcpy(($25|0),($26|0),($1|0))|0;
   $27 = HEAP32[$13>>2]|0;
   $28 = (($27) - ($1))|0;
   HEAP32[$13>>2] = $28;
   $29 = HEAP32[$4>>2]|0;
   $30 = (($29) - ($1))|0;
   HEAP32[$4>>2] = $30;
   $31 = HEAP32[$14>>2]|0;
   $32 = (($31) - ($1))|0;
   HEAP32[$14>>2] = $32;
   $33 = HEAP32[$15>>2]|0;
   $34 = HEAP32[$10>>2]|0;
   $35 = (($34) + ($33<<1)|0);
   $n$0 = $33;$p$0 = $35;
   while(1) {
    $36 = ((($p$0)) + -2|0);
    $37 = HEAP16[$36>>1]|0;
    $38 = $37&65535;
    $39 = ($38>>>0)<($1>>>0);
    $40 = (($38) - ($1))|0;
    $41 = $40&65535;
    $42 = $39 ? 0 : $41;
    HEAP16[$36>>1] = $42;
    $43 = (($n$0) + -1)|0;
    $44 = ($43|0)==(0);
    if ($44) {
     break;
    } else {
     $n$0 = $43;$p$0 = $36;
    }
   }
   $45 = HEAP32[$12>>2]|0;
   $46 = (($45) + ($1<<1)|0);
   $n$1 = $1;$p$1 = $46;
   while(1) {
    $47 = ((($p$1)) + -2|0);
    $48 = HEAP16[$47>>1]|0;
    $49 = $48&65535;
    $50 = ($49>>>0)<($1>>>0);
    $51 = (($49) - ($1))|0;
    $52 = $51&65535;
    $53 = $50 ? 0 : $52;
    HEAP16[$47>>1] = $53;
    $54 = (($n$1) + -1)|0;
    $55 = ($54|0)==(0);
    if ($55) {
     break;
    } else {
     $n$1 = $54;$p$1 = $47;
    }
   }
   $56 = (($20) + ($1))|0;
   $more$0 = $56;
  }
  $57 = HEAP32[$s>>2]|0;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)==(0);
  if ($60) {
   break;
  }
  $61 = HEAP32[$5>>2]|0;
  $62 = HEAP32[$4>>2]|0;
  $63 = (($61) + ($62)|0);
  $64 = HEAP32[$3>>2]|0;
  $65 = (($63) + ($64)|0);
  $66 = ($59>>>0)>($more$0>>>0);
  $more$0$ = $66 ? $more$0 : $59;
  $67 = ($more$0$|0)==(0);
  if ($67) {
   $$0$i = 0;$86 = $64;
  } else {
   $68 = (($59) - ($more$0$))|0;
   HEAP32[$58>>2] = $68;
   $69 = HEAP32[$57>>2]|0;
   _memcpy(($65|0),($69|0),($more$0$|0))|0;
   $70 = ((($57)) + 28|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ((($71)) + 24|0);
   $73 = HEAP32[$72>>2]|0;
   switch ($73|0) {
   case 1:  {
    $74 = ((($57)) + 48|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (_adler32($75,$65,$more$0$)|0);
    HEAP32[$74>>2] = $76;
    break;
   }
   case 2:  {
    $77 = ((($57)) + 48|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (_crc32($78,$65,$more$0$)|0);
    HEAP32[$77>>2] = $79;
    break;
   }
   default: {
   }
   }
   $80 = HEAP32[$57>>2]|0;
   $81 = (($80) + ($more$0$)|0);
   HEAP32[$57>>2] = $81;
   $82 = ((($57)) + 8|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($83) + ($more$0$))|0;
   HEAP32[$82>>2] = $84;
   $$pre2 = HEAP32[$3>>2]|0;
   $$0$i = $more$0$;$86 = $$pre2;
  }
  $85 = (($86) + ($$0$i))|0;
  HEAP32[$3>>2] = $85;
  $87 = HEAP32[$6>>2]|0;
  $88 = (($85) + ($87))|0;
  $89 = ($88>>>0)>(2);
  L20: do {
   if ($89) {
    $90 = HEAP32[$4>>2]|0;
    $91 = (($90) - ($87))|0;
    $92 = HEAP32[$5>>2]|0;
    $93 = (($92) + ($91)|0);
    $94 = HEAP8[$93>>0]|0;
    $95 = $94&255;
    HEAP32[$7>>2] = $95;
    $96 = HEAP32[$8>>2]|0;
    $97 = $95 << $96;
    $98 = (($91) + 1)|0;
    $99 = (($92) + ($98)|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100&255;
    $102 = $97 ^ $101;
    $103 = HEAP32[$9>>2]|0;
    $104 = $102 & $103;
    HEAP32[$7>>2] = $104;
    $106 = $87;$163 = $85;$str$0 = $91;
    while(1) {
     $105 = ($106|0)==(0);
     if ($105) {
      $136 = $163;
      break L20;
     }
     $107 = HEAP32[$7>>2]|0;
     $108 = HEAP32[$8>>2]|0;
     $109 = $107 << $108;
     $110 = (($str$0) + 2)|0;
     $111 = HEAP32[$5>>2]|0;
     $112 = (($111) + ($110)|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = $113&255;
     $115 = $109 ^ $114;
     $116 = HEAP32[$9>>2]|0;
     $117 = $115 & $116;
     HEAP32[$7>>2] = $117;
     $118 = HEAP32[$10>>2]|0;
     $119 = (($118) + ($117<<1)|0);
     $120 = HEAP16[$119>>1]|0;
     $121 = HEAP32[$11>>2]|0;
     $122 = $str$0 & $121;
     $123 = HEAP32[$12>>2]|0;
     $124 = (($123) + ($122<<1)|0);
     HEAP16[$124>>1] = $120;
     $125 = $str$0&65535;
     $126 = HEAP32[$7>>2]|0;
     $127 = HEAP32[$10>>2]|0;
     $128 = (($127) + ($126<<1)|0);
     HEAP16[$128>>1] = $125;
     $129 = HEAP32[$6>>2]|0;
     $130 = (($129) + -1)|0;
     HEAP32[$6>>2] = $130;
     $131 = HEAP32[$3>>2]|0;
     $132 = (($131) + ($130))|0;
     $133 = ($132>>>0)<(3);
     if ($133) {
      $136 = $131;
      break L20;
     }
     $134 = (($str$0) + 1)|0;
     $106 = $130;$163 = $131;$str$0 = $134;
    }
   } else {
    $136 = $85;
   }
  } while(0);
  $135 = ($136>>>0)<(262);
  if (!($135)) {
   break;
  }
  $137 = HEAP32[$s>>2]|0;
  $138 = ((($137)) + 4|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = ($139|0)==(0);
  if ($140) {
   break;
  }
  $$pre1 = HEAP32[$0>>2]|0;
  $18 = $136;$22 = $$pre1;
 }
 $141 = ((($s)) + 5824|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = HEAP32[$2>>2]|0;
 $144 = ($143>>>0)>($142>>>0);
 if (!($144)) {
  return;
 }
 $145 = HEAP32[$4>>2]|0;
 $146 = HEAP32[$3>>2]|0;
 $147 = (($145) + ($146))|0;
 $148 = ($142>>>0)<($147>>>0);
 if ($148) {
  $149 = (($143) - ($147))|0;
  $150 = ($149>>>0)>(258);
  $$4 = $150 ? 258 : $149;
  $151 = HEAP32[$5>>2]|0;
  $152 = (($151) + ($147)|0);
  _memset(($152|0),0,($$4|0))|0;
  $153 = (($147) + ($$4))|0;
  HEAP32[$141>>2] = $153;
  return;
 }
 $154 = (($147) + 258)|0;
 $155 = ($154>>>0)>($142>>>0);
 if (!($155)) {
  return;
 }
 $156 = (($154) - ($142))|0;
 $157 = (($143) - ($142))|0;
 $158 = ($156>>>0)>($157>>>0);
 $$5 = $158 ? $157 : $156;
 $159 = HEAP32[$5>>2]|0;
 $160 = (($159) + ($142)|0);
 _memset(($160|0),0,($$5|0))|0;
 $161 = HEAP32[$141>>2]|0;
 $162 = (($161) + ($$5))|0;
 HEAP32[$141>>2] = $162;
 return;
}
function _deflate_fast($s,$flush) {
 $s = $s|0;
 $flush = $flush|0;
 var $$ = 0, $$0 = 0, $$12 = 0, $$13 = 0, $$14 = 0, $$15 = 0, $$not = 0, $$not11 = 0, $$pn = 0, $$pr = 0, $$pre = 0, $$pre$phi10Z2D = 0, $$pre$phi8Z2D = 0, $$pre$phiZ2D = 0, $$pre7 = 0, $$pre9 = 0, $$sink = 0, $$sink$in = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bflush$0 = 0, $brmerge = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 116|0);
 $1 = ((($s)) + 72|0);
 $2 = ((($s)) + 88|0);
 $3 = ((($s)) + 108|0);
 $4 = ((($s)) + 56|0);
 $5 = ((($s)) + 84|0);
 $6 = ((($s)) + 68|0);
 $7 = ((($s)) + 52|0);
 $8 = ((($s)) + 64|0);
 $9 = ((($s)) + 44|0);
 $10 = ((($s)) + 96|0);
 $11 = ((($s)) + 112|0);
 $12 = ((($s)) + 5792|0);
 $13 = ((($s)) + 5796|0);
 $14 = ((($s)) + 5784|0);
 $15 = ((($s)) + 5788|0);
 $16 = ((($s)) + 128|0);
 $17 = ((($s)) + 92|0);
 while(1) {
  $18 = HEAP32[$0>>2]|0;
  $19 = ($18>>>0)<(262);
  if ($19) {
   _fill_window($s);
   $20 = HEAP32[$0>>2]|0;
   $$not = ($20>>>0)>(261);
   $$not11 = ($flush|0)!=(0);
   $brmerge = $$not | $$not11;
   if (!($brmerge)) {
    $$0 = 0;
    label = 54;
    break;
   }
   $21 = ($20|0)==(0);
   if ($21) {
    label = 29;
    break;
   } else {
    $23 = $20;
   }
   $22 = ($23>>>0)>(2);
   if ($22) {
    label = 6;
   } else {
    label = 9;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   label = 0;
   $24 = HEAP32[$1>>2]|0;
   $25 = HEAP32[$2>>2]|0;
   $26 = $24 << $25;
   $27 = HEAP32[$3>>2]|0;
   $28 = (($27) + 2)|0;
   $29 = HEAP32[$4>>2]|0;
   $30 = (($29) + ($28)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = $26 ^ $32;
   $34 = HEAP32[$5>>2]|0;
   $35 = $33 & $34;
   HEAP32[$1>>2] = $35;
   $36 = HEAP32[$6>>2]|0;
   $37 = (($36) + ($35<<1)|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = HEAP32[$7>>2]|0;
   $40 = $27 & $39;
   $41 = HEAP32[$8>>2]|0;
   $42 = (($41) + ($40<<1)|0);
   HEAP16[$42>>1] = $38;
   $43 = $38&65535;
   $44 = HEAP32[$3>>2]|0;
   $45 = $44&65535;
   $46 = HEAP32[$1>>2]|0;
   $47 = HEAP32[$6>>2]|0;
   $48 = (($47) + ($46<<1)|0);
   HEAP16[$48>>1] = $45;
   $49 = ($38<<16>>16)==(0);
   if ($49) {
    label = 9;
   } else {
    $50 = HEAP32[$3>>2]|0;
    $51 = (($50) - ($43))|0;
    $52 = HEAP32[$9>>2]|0;
    $53 = (($52) + -262)|0;
    $54 = ($51>>>0)>($53>>>0);
    if ($54) {
     label = 9;
    } else {
     $55 = (_longest_match($s,$43)|0);
     HEAP32[$10>>2] = $55;
     $57 = $55;
    }
   }
  }
  if ((label|0) == 9) {
   label = 0;
   $$pr = HEAP32[$10>>2]|0;
   $57 = $$pr;
  }
  $56 = ($57>>>0)>(2);
  do {
   if ($56) {
    $58 = (($57) + 253)|0;
    $59 = $58&255;
    $60 = HEAP32[$3>>2]|0;
    $61 = HEAP32[$11>>2]|0;
    $62 = (($60) - ($61))|0;
    $63 = $62&65535;
    $64 = HEAP32[$12>>2]|0;
    $65 = HEAP32[$13>>2]|0;
    $66 = (($65) + ($64<<1)|0);
    HEAP16[$66>>1] = $63;
    $67 = HEAP32[$12>>2]|0;
    $68 = (($67) + 1)|0;
    HEAP32[$12>>2] = $68;
    $69 = HEAP32[$14>>2]|0;
    $70 = (($69) + ($67)|0);
    HEAP8[$70>>0] = $59;
    $71 = (($63) + -1)<<16>>16;
    $72 = $58 & 255;
    $73 = (23679 + ($72)|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74&255;
    $76 = $75 | 256;
    $77 = (($76) + 1)|0;
    $78 = (((($s)) + 148|0) + ($77<<2)|0);
    $79 = HEAP16[$78>>1]|0;
    $80 = (($79) + 1)<<16>>16;
    HEAP16[$78>>1] = $80;
    $81 = ($71&65535)<(256);
    $82 = $71&65535;
    $83 = $82 >>> 7;
    $84 = (($83) + 256)|0;
    $$pn = $81 ? $82 : $84;
    $$sink$in = (23167 + ($$pn)|0);
    $$sink = HEAP8[$$sink$in>>0]|0;
    $85 = $$sink&255;
    $86 = (((($s)) + 2440|0) + ($85<<2)|0);
    $87 = HEAP16[$86>>1]|0;
    $88 = (($87) + 1)<<16>>16;
    HEAP16[$86>>1] = $88;
    $89 = HEAP32[$12>>2]|0;
    $90 = HEAP32[$15>>2]|0;
    $91 = (($90) + -1)|0;
    $92 = ($89|0)==($91|0);
    $93 = $92&1;
    $94 = HEAP32[$10>>2]|0;
    $95 = HEAP32[$0>>2]|0;
    $96 = (($95) - ($94))|0;
    HEAP32[$0>>2] = $96;
    $97 = HEAP32[$16>>2]|0;
    $98 = ($94>>>0)<=($97>>>0);
    $99 = ($96>>>0)>(2);
    $or$cond = $98 & $99;
    if (!($or$cond)) {
     $131 = HEAP32[$3>>2]|0;
     $132 = (($131) + ($94))|0;
     HEAP32[$3>>2] = $132;
     HEAP32[$10>>2] = 0;
     $133 = HEAP32[$4>>2]|0;
     $134 = (($133) + ($132)|0);
     $135 = HEAP8[$134>>0]|0;
     $136 = $135&255;
     HEAP32[$1>>2] = $136;
     $137 = HEAP32[$2>>2]|0;
     $138 = $136 << $137;
     $139 = (($132) + 1)|0;
     $140 = (($133) + ($139)|0);
     $141 = HEAP8[$140>>0]|0;
     $142 = $141&255;
     $143 = $138 ^ $142;
     $144 = HEAP32[$5>>2]|0;
     $145 = $143 & $144;
     HEAP32[$1>>2] = $145;
     $176 = $132;$bflush$0 = $93;
     break;
    }
    $100 = (($94) + -1)|0;
    HEAP32[$10>>2] = $100;
    while(1) {
     $101 = HEAP32[$3>>2]|0;
     $102 = (($101) + 1)|0;
     HEAP32[$3>>2] = $102;
     $103 = HEAP32[$1>>2]|0;
     $104 = HEAP32[$2>>2]|0;
     $105 = $103 << $104;
     $106 = (($101) + 3)|0;
     $107 = HEAP32[$4>>2]|0;
     $108 = (($107) + ($106)|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = $109&255;
     $111 = $105 ^ $110;
     $112 = HEAP32[$5>>2]|0;
     $113 = $111 & $112;
     HEAP32[$1>>2] = $113;
     $114 = HEAP32[$6>>2]|0;
     $115 = (($114) + ($113<<1)|0);
     $116 = HEAP16[$115>>1]|0;
     $117 = HEAP32[$7>>2]|0;
     $118 = $102 & $117;
     $119 = HEAP32[$8>>2]|0;
     $120 = (($119) + ($118<<1)|0);
     HEAP16[$120>>1] = $116;
     $121 = HEAP32[$3>>2]|0;
     $122 = $121&65535;
     $123 = HEAP32[$1>>2]|0;
     $124 = HEAP32[$6>>2]|0;
     $125 = (($124) + ($123<<1)|0);
     HEAP16[$125>>1] = $122;
     $126 = HEAP32[$10>>2]|0;
     $127 = (($126) + -1)|0;
     HEAP32[$10>>2] = $127;
     $128 = ($127|0)==(0);
     if ($128) {
      break;
     }
    }
    $129 = HEAP32[$3>>2]|0;
    $130 = (($129) + 1)|0;
    HEAP32[$3>>2] = $130;
    $176 = $130;$bflush$0 = $93;
   } else {
    $146 = HEAP32[$3>>2]|0;
    $147 = HEAP32[$4>>2]|0;
    $148 = (($147) + ($146)|0);
    $149 = HEAP8[$148>>0]|0;
    $150 = HEAP32[$12>>2]|0;
    $151 = HEAP32[$13>>2]|0;
    $152 = (($151) + ($150<<1)|0);
    HEAP16[$152>>1] = 0;
    $153 = HEAP32[$12>>2]|0;
    $154 = (($153) + 1)|0;
    HEAP32[$12>>2] = $154;
    $155 = HEAP32[$14>>2]|0;
    $156 = (($155) + ($153)|0);
    HEAP8[$156>>0] = $149;
    $157 = $149&255;
    $158 = (((($s)) + 148|0) + ($157<<2)|0);
    $159 = HEAP16[$158>>1]|0;
    $160 = (($159) + 1)<<16>>16;
    HEAP16[$158>>1] = $160;
    $161 = HEAP32[$12>>2]|0;
    $162 = HEAP32[$15>>2]|0;
    $163 = (($162) + -1)|0;
    $164 = ($161|0)==($163|0);
    $165 = $164&1;
    $166 = HEAP32[$0>>2]|0;
    $167 = (($166) + -1)|0;
    HEAP32[$0>>2] = $167;
    $168 = HEAP32[$3>>2]|0;
    $169 = (($168) + 1)|0;
    HEAP32[$3>>2] = $169;
    $176 = $169;$bflush$0 = $165;
   }
  } while(0);
  $170 = ($bflush$0|0)==(0);
  if ($170) {
   continue;
  }
  $171 = HEAP32[$17>>2]|0;
  $172 = ($171|0)>(-1);
  if ($172) {
   $173 = HEAP32[$4>>2]|0;
   $174 = (($173) + ($171)|0);
   $177 = $174;
  } else {
   $177 = 0;
  }
  $175 = (($176) - ($171))|0;
  __tr_flush_block($s,$177,$175,0);
  $178 = HEAP32[$3>>2]|0;
  HEAP32[$17>>2] = $178;
  $179 = HEAP32[$s>>2]|0;
  $180 = ((($179)) + 28|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = ((($181)) + 5820|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = ($183|0)==(16);
  do {
   if ($184) {
    $185 = ((($181)) + 5816|0);
    $186 = HEAP16[$185>>1]|0;
    $187 = $186&255;
    $188 = ((($181)) + 20|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = (($189) + 1)|0;
    HEAP32[$188>>2] = $190;
    $191 = ((($181)) + 8|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = (($192) + ($189)|0);
    HEAP8[$193>>0] = $187;
    $194 = HEAP16[$185>>1]|0;
    $195 = ($194&65535) >>> 8;
    $196 = $195&255;
    $197 = HEAP32[$188>>2]|0;
    $198 = (($197) + 1)|0;
    HEAP32[$188>>2] = $198;
    $199 = HEAP32[$191>>2]|0;
    $200 = (($199) + ($197)|0);
    HEAP8[$200>>0] = $196;
    HEAP16[$185>>1] = 0;
    HEAP32[$182>>2] = 0;
    $$pre$phi10Z2D = $188;
   } else {
    $201 = ($183|0)>(7);
    if ($201) {
     $202 = ((($181)) + 5816|0);
     $203 = HEAP16[$202>>1]|0;
     $204 = $203&255;
     $205 = ((($181)) + 20|0);
     $206 = HEAP32[$205>>2]|0;
     $207 = (($206) + 1)|0;
     HEAP32[$205>>2] = $207;
     $208 = ((($181)) + 8|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = (($209) + ($206)|0);
     HEAP8[$210>>0] = $204;
     $211 = HEAP16[$202>>1]|0;
     $212 = ($211&65535) >>> 8;
     HEAP16[$202>>1] = $212;
     $213 = HEAP32[$182>>2]|0;
     $214 = (($213) + -8)|0;
     HEAP32[$182>>2] = $214;
     $$pre$phi10Z2D = $205;
     break;
    } else {
     $$pre9 = ((($181)) + 20|0);
     $$pre$phi10Z2D = $$pre9;
     break;
    }
   }
  } while(0);
  $215 = HEAP32[$$pre$phi10Z2D>>2]|0;
  $216 = ((($179)) + 16|0);
  $217 = HEAP32[$216>>2]|0;
  $218 = ($215>>>0)>($217>>>0);
  $$ = $218 ? $217 : $215;
  $219 = ($$|0)==(0);
  if (!($219)) {
   $220 = ((($179)) + 12|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = ((($181)) + 16|0);
   $223 = HEAP32[$222>>2]|0;
   _memcpy(($221|0),($223|0),($$|0))|0;
   $224 = HEAP32[$220>>2]|0;
   $225 = (($224) + ($$)|0);
   HEAP32[$220>>2] = $225;
   $226 = HEAP32[$222>>2]|0;
   $227 = (($226) + ($$)|0);
   HEAP32[$222>>2] = $227;
   $228 = ((($179)) + 20|0);
   $229 = HEAP32[$228>>2]|0;
   $230 = (($229) + ($$))|0;
   HEAP32[$228>>2] = $230;
   $231 = HEAP32[$216>>2]|0;
   $232 = (($231) - ($$))|0;
   HEAP32[$216>>2] = $232;
   $233 = HEAP32[$$pre$phi10Z2D>>2]|0;
   $234 = (($233) - ($$))|0;
   HEAP32[$$pre$phi10Z2D>>2] = $234;
   $235 = ($233|0)==($$|0);
   if ($235) {
    $236 = ((($181)) + 8|0);
    $237 = HEAP32[$236>>2]|0;
    HEAP32[$222>>2] = $237;
   }
  }
  $238 = HEAP32[$s>>2]|0;
  $239 = ((($238)) + 16|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = ($240|0)==(0);
  if ($241) {
   $$0 = 0;
   label = 54;
   break;
  }
 }
 if ((label|0) == 29) {
  $242 = HEAP32[$3>>2]|0;
  $243 = ($242>>>0)<(2);
  $$12 = $243 ? $242 : 2;
  $244 = ((($s)) + 5812|0);
  HEAP32[$244>>2] = $$12;
  $245 = ($flush|0)==(4);
  if ($245) {
   $246 = HEAP32[$17>>2]|0;
   $247 = ($246|0)>(-1);
   if ($247) {
    $248 = HEAP32[$4>>2]|0;
    $249 = (($248) + ($246)|0);
    $251 = $249;
   } else {
    $251 = 0;
   }
   $250 = (($242) - ($246))|0;
   __tr_flush_block($s,$251,$250,1);
   $252 = HEAP32[$3>>2]|0;
   HEAP32[$17>>2] = $252;
   $253 = HEAP32[$s>>2]|0;
   $254 = ((($253)) + 28|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = ((($255)) + 5820|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = ($257|0)==(16);
   do {
    if ($258) {
     $259 = ((($255)) + 5816|0);
     $260 = HEAP16[$259>>1]|0;
     $261 = $260&255;
     $262 = ((($255)) + 20|0);
     $263 = HEAP32[$262>>2]|0;
     $264 = (($263) + 1)|0;
     HEAP32[$262>>2] = $264;
     $265 = ((($255)) + 8|0);
     $266 = HEAP32[$265>>2]|0;
     $267 = (($266) + ($263)|0);
     HEAP8[$267>>0] = $261;
     $268 = HEAP16[$259>>1]|0;
     $269 = ($268&65535) >>> 8;
     $270 = $269&255;
     $271 = HEAP32[$262>>2]|0;
     $272 = (($271) + 1)|0;
     HEAP32[$262>>2] = $272;
     $273 = HEAP32[$265>>2]|0;
     $274 = (($273) + ($271)|0);
     HEAP8[$274>>0] = $270;
     HEAP16[$259>>1] = 0;
     HEAP32[$256>>2] = 0;
     $$pre$phiZ2D = $262;
    } else {
     $275 = ($257|0)>(7);
     if ($275) {
      $276 = ((($255)) + 5816|0);
      $277 = HEAP16[$276>>1]|0;
      $278 = $277&255;
      $279 = ((($255)) + 20|0);
      $280 = HEAP32[$279>>2]|0;
      $281 = (($280) + 1)|0;
      HEAP32[$279>>2] = $281;
      $282 = ((($255)) + 8|0);
      $283 = HEAP32[$282>>2]|0;
      $284 = (($283) + ($280)|0);
      HEAP8[$284>>0] = $278;
      $285 = HEAP16[$276>>1]|0;
      $286 = ($285&65535) >>> 8;
      HEAP16[$276>>1] = $286;
      $287 = HEAP32[$256>>2]|0;
      $288 = (($287) + -8)|0;
      HEAP32[$256>>2] = $288;
      $$pre$phiZ2D = $279;
      break;
     } else {
      $$pre = ((($255)) + 20|0);
      $$pre$phiZ2D = $$pre;
      break;
     }
    }
   } while(0);
   $289 = HEAP32[$$pre$phiZ2D>>2]|0;
   $290 = ((($253)) + 16|0);
   $291 = HEAP32[$290>>2]|0;
   $292 = ($289>>>0)>($291>>>0);
   $$13 = $292 ? $291 : $289;
   $293 = ($$13|0)==(0);
   if ($293) {
    $312 = HEAP32[$s>>2]|0;
    $313 = ((($312)) + 16|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = ($314|0)==(0);
    $$14 = $315 ? 2 : 3;
    return ($$14|0);
   }
   $294 = ((($253)) + 12|0);
   $295 = HEAP32[$294>>2]|0;
   $296 = ((($255)) + 16|0);
   $297 = HEAP32[$296>>2]|0;
   _memcpy(($295|0),($297|0),($$13|0))|0;
   $298 = HEAP32[$294>>2]|0;
   $299 = (($298) + ($$13)|0);
   HEAP32[$294>>2] = $299;
   $300 = HEAP32[$296>>2]|0;
   $301 = (($300) + ($$13)|0);
   HEAP32[$296>>2] = $301;
   $302 = ((($253)) + 20|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = (($303) + ($$13))|0;
   HEAP32[$302>>2] = $304;
   $305 = HEAP32[$290>>2]|0;
   $306 = (($305) - ($$13))|0;
   HEAP32[$290>>2] = $306;
   $307 = HEAP32[$$pre$phiZ2D>>2]|0;
   $308 = (($307) - ($$13))|0;
   HEAP32[$$pre$phiZ2D>>2] = $308;
   $309 = ($307|0)==($$13|0);
   if (!($309)) {
    $312 = HEAP32[$s>>2]|0;
    $313 = ((($312)) + 16|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = ($314|0)==(0);
    $$14 = $315 ? 2 : 3;
    return ($$14|0);
   }
   $310 = ((($255)) + 8|0);
   $311 = HEAP32[$310>>2]|0;
   HEAP32[$296>>2] = $311;
   $312 = HEAP32[$s>>2]|0;
   $313 = ((($312)) + 16|0);
   $314 = HEAP32[$313>>2]|0;
   $315 = ($314|0)==(0);
   $$14 = $315 ? 2 : 3;
   return ($$14|0);
  }
  $316 = HEAP32[$12>>2]|0;
  $317 = ($316|0)==(0);
  if (!($317)) {
   $318 = HEAP32[$17>>2]|0;
   $319 = ($318|0)>(-1);
   if ($319) {
    $320 = HEAP32[$4>>2]|0;
    $321 = (($320) + ($318)|0);
    $323 = $321;
   } else {
    $323 = 0;
   }
   $322 = (($242) - ($318))|0;
   __tr_flush_block($s,$323,$322,0);
   $324 = HEAP32[$3>>2]|0;
   HEAP32[$17>>2] = $324;
   $325 = HEAP32[$s>>2]|0;
   $326 = ((($325)) + 28|0);
   $327 = HEAP32[$326>>2]|0;
   $328 = ((($327)) + 5820|0);
   $329 = HEAP32[$328>>2]|0;
   $330 = ($329|0)==(16);
   do {
    if ($330) {
     $331 = ((($327)) + 5816|0);
     $332 = HEAP16[$331>>1]|0;
     $333 = $332&255;
     $334 = ((($327)) + 20|0);
     $335 = HEAP32[$334>>2]|0;
     $336 = (($335) + 1)|0;
     HEAP32[$334>>2] = $336;
     $337 = ((($327)) + 8|0);
     $338 = HEAP32[$337>>2]|0;
     $339 = (($338) + ($335)|0);
     HEAP8[$339>>0] = $333;
     $340 = HEAP16[$331>>1]|0;
     $341 = ($340&65535) >>> 8;
     $342 = $341&255;
     $343 = HEAP32[$334>>2]|0;
     $344 = (($343) + 1)|0;
     HEAP32[$334>>2] = $344;
     $345 = HEAP32[$337>>2]|0;
     $346 = (($345) + ($343)|0);
     HEAP8[$346>>0] = $342;
     HEAP16[$331>>1] = 0;
     HEAP32[$328>>2] = 0;
     $$pre$phi8Z2D = $334;
    } else {
     $347 = ($329|0)>(7);
     if ($347) {
      $348 = ((($327)) + 5816|0);
      $349 = HEAP16[$348>>1]|0;
      $350 = $349&255;
      $351 = ((($327)) + 20|0);
      $352 = HEAP32[$351>>2]|0;
      $353 = (($352) + 1)|0;
      HEAP32[$351>>2] = $353;
      $354 = ((($327)) + 8|0);
      $355 = HEAP32[$354>>2]|0;
      $356 = (($355) + ($352)|0);
      HEAP8[$356>>0] = $350;
      $357 = HEAP16[$348>>1]|0;
      $358 = ($357&65535) >>> 8;
      HEAP16[$348>>1] = $358;
      $359 = HEAP32[$328>>2]|0;
      $360 = (($359) + -8)|0;
      HEAP32[$328>>2] = $360;
      $$pre$phi8Z2D = $351;
      break;
     } else {
      $$pre7 = ((($327)) + 20|0);
      $$pre$phi8Z2D = $$pre7;
      break;
     }
    }
   } while(0);
   $361 = HEAP32[$$pre$phi8Z2D>>2]|0;
   $362 = ((($325)) + 16|0);
   $363 = HEAP32[$362>>2]|0;
   $364 = ($361>>>0)>($363>>>0);
   $$15 = $364 ? $363 : $361;
   $365 = ($$15|0)==(0);
   if (!($365)) {
    $366 = ((($325)) + 12|0);
    $367 = HEAP32[$366>>2]|0;
    $368 = ((($327)) + 16|0);
    $369 = HEAP32[$368>>2]|0;
    _memcpy(($367|0),($369|0),($$15|0))|0;
    $370 = HEAP32[$366>>2]|0;
    $371 = (($370) + ($$15)|0);
    HEAP32[$366>>2] = $371;
    $372 = HEAP32[$368>>2]|0;
    $373 = (($372) + ($$15)|0);
    HEAP32[$368>>2] = $373;
    $374 = ((($325)) + 20|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = (($375) + ($$15))|0;
    HEAP32[$374>>2] = $376;
    $377 = HEAP32[$362>>2]|0;
    $378 = (($377) - ($$15))|0;
    HEAP32[$362>>2] = $378;
    $379 = HEAP32[$$pre$phi8Z2D>>2]|0;
    $380 = (($379) - ($$15))|0;
    HEAP32[$$pre$phi8Z2D>>2] = $380;
    $381 = ($379|0)==($$15|0);
    if ($381) {
     $382 = ((($327)) + 8|0);
     $383 = HEAP32[$382>>2]|0;
     HEAP32[$368>>2] = $383;
    }
   }
   $384 = HEAP32[$s>>2]|0;
   $385 = ((($384)) + 16|0);
   $386 = HEAP32[$385>>2]|0;
   $387 = ($386|0)==(0);
   if ($387) {
    $$0 = 0;
    return ($$0|0);
   }
  }
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 54) {
  return ($$0|0);
 }
 return (0)|0;
}
function _longest_match($s,$cur_match) {
 $s = $s|0;
 $cur_match = $cur_match|0;
 var $$ = 0, $$01 = 0, $$4 = 0, $$best_len$3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $best_len$0 = 0, $best_len$2 = 0, $best_len$3 = 0;
 var $chain_length$0 = 0, $chain_length$1 = 0, $match$0 = 0, $or$cond = 0, $scan$0 = 0, $scan$1 = 0, $scan$22 = 0, $scan$3 = 0, $scan_end$0 = 0, $scan_end$2 = 0, $scan_end1$0 = 0, $scan_end1$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 124|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($s)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($s)) + 108|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + ($5)|0);
 $7 = ((($s)) + 120|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($s)) + 144|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($s)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -262)|0;
 $14 = ($5>>>0)>($13>>>0);
 $15 = (($5) - ($13))|0;
 $$ = $14 ? $15 : 0;
 $16 = ((($s)) + 64|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($s)) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($6)) + 258|0);
 $21 = (($8) + -1)|0;
 $22 = (($6) + ($21)|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = (($6) + ($8)|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = ((($s)) + 140|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($8>>>0)<($27>>>0);
 $29 = $1 >>> 2;
 $chain_length$0 = $28 ? $1 : $29;
 $30 = ((($s)) + 116|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($10>>>0)>($31>>>0);
 $$4 = $32 ? $31 : $10;
 $33 = ((($s)) + 112|0);
 $34 = $20;
 $35 = ((($20)) + -258|0);
 $$01 = $cur_match;$best_len$0 = $8;$chain_length$1 = $chain_length$0;$scan$0 = $6;$scan_end$0 = $25;$scan_end1$0 = $23;
 while(1) {
  $36 = (($3) + ($$01)|0);
  $37 = (($36) + ($best_len$0)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = ($38<<24>>24)==($scan_end$0<<24>>24);
  if ($39) {
   $40 = (($best_len$0) + -1)|0;
   $41 = (($36) + ($40)|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = ($42<<24>>24)==($scan_end1$0<<24>>24);
   if ($43) {
    $44 = HEAP8[$36>>0]|0;
    $45 = HEAP8[$scan$0>>0]|0;
    $46 = ($44<<24>>24)==($45<<24>>24);
    if ($46) {
     $47 = ((($36)) + 1|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = ((($scan$0)) + 1|0);
     $50 = HEAP8[$49>>0]|0;
     $51 = ($48<<24>>24)==($50<<24>>24);
     if ($51) {
      $52 = ((($scan$0)) + 2|0);
      $53 = ((($47)) + 1|0);
      $match$0 = $53;$scan$1 = $52;
      while(1) {
       $54 = ((($scan$1)) + 1|0);
       $55 = HEAP8[$54>>0]|0;
       $56 = ((($match$0)) + 1|0);
       $57 = HEAP8[$56>>0]|0;
       $58 = ($55<<24>>24)==($57<<24>>24);
       if (!($58)) {
        $scan$22 = $54;
        break;
       }
       $59 = ((($scan$1)) + 2|0);
       $60 = HEAP8[$59>>0]|0;
       $61 = ((($match$0)) + 2|0);
       $62 = HEAP8[$61>>0]|0;
       $63 = ($60<<24>>24)==($62<<24>>24);
       if (!($63)) {
        $scan$22 = $59;
        break;
       }
       $64 = ((($scan$1)) + 3|0);
       $65 = HEAP8[$64>>0]|0;
       $66 = ((($match$0)) + 3|0);
       $67 = HEAP8[$66>>0]|0;
       $68 = ($65<<24>>24)==($67<<24>>24);
       if (!($68)) {
        $scan$22 = $64;
        break;
       }
       $69 = ((($scan$1)) + 4|0);
       $70 = HEAP8[$69>>0]|0;
       $71 = ((($match$0)) + 4|0);
       $72 = HEAP8[$71>>0]|0;
       $73 = ($70<<24>>24)==($72<<24>>24);
       if (!($73)) {
        $scan$22 = $69;
        break;
       }
       $74 = ((($scan$1)) + 5|0);
       $75 = HEAP8[$74>>0]|0;
       $76 = ((($match$0)) + 5|0);
       $77 = HEAP8[$76>>0]|0;
       $78 = ($75<<24>>24)==($77<<24>>24);
       if (!($78)) {
        $scan$22 = $74;
        break;
       }
       $79 = ((($scan$1)) + 6|0);
       $80 = HEAP8[$79>>0]|0;
       $81 = ((($match$0)) + 6|0);
       $82 = HEAP8[$81>>0]|0;
       $83 = ($80<<24>>24)==($82<<24>>24);
       if (!($83)) {
        $scan$22 = $79;
        break;
       }
       $84 = ((($scan$1)) + 7|0);
       $85 = HEAP8[$84>>0]|0;
       $86 = ((($match$0)) + 7|0);
       $87 = HEAP8[$86>>0]|0;
       $88 = ($85<<24>>24)==($87<<24>>24);
       if (!($88)) {
        $scan$22 = $84;
        break;
       }
       $89 = ((($scan$1)) + 8|0);
       $90 = HEAP8[$89>>0]|0;
       $91 = ((($match$0)) + 8|0);
       $92 = HEAP8[$91>>0]|0;
       $93 = ($90<<24>>24)==($92<<24>>24);
       $94 = ($89>>>0)<($20>>>0);
       $or$cond = $93 & $94;
       if ($or$cond) {
        $match$0 = $91;$scan$1 = $89;
       } else {
        $scan$22 = $89;
        break;
       }
      }
      $95 = $scan$22;
      $96 = (($95) - ($34))|0;
      $97 = (($96) + 258)|0;
      $98 = ($97|0)>($best_len$0|0);
      if ($98) {
       HEAP32[$33>>2] = $$01;
       $99 = ($97|0)<($$4|0);
       if (!($99)) {
        $best_len$3 = $97;
        label = 20;
        break;
       }
       $100 = (($96) + 257)|0;
       $101 = (($35) + ($100)|0);
       $102 = HEAP8[$101>>0]|0;
       $103 = (($35) + ($97)|0);
       $104 = HEAP8[$103>>0]|0;
       $best_len$2 = $97;$scan$3 = $35;$scan_end$2 = $104;$scan_end1$2 = $102;
      } else {
       $best_len$2 = $best_len$0;$scan$3 = $35;$scan_end$2 = $scan_end$0;$scan_end1$2 = $scan_end1$0;
      }
     } else {
      $best_len$2 = $best_len$0;$scan$3 = $scan$0;$scan_end$2 = $scan_end$0;$scan_end1$2 = $scan_end1$0;
     }
    } else {
     $best_len$2 = $best_len$0;$scan$3 = $scan$0;$scan_end$2 = $scan_end$0;$scan_end1$2 = $scan_end1$0;
    }
   } else {
    $best_len$2 = $best_len$0;$scan$3 = $scan$0;$scan_end$2 = $scan_end$0;$scan_end1$2 = $scan_end1$0;
   }
  } else {
   $best_len$2 = $best_len$0;$scan$3 = $scan$0;$scan_end$2 = $scan_end$0;$scan_end1$2 = $scan_end1$0;
  }
  $105 = $$01 & $19;
  $106 = (($17) + ($105<<1)|0);
  $107 = HEAP16[$106>>1]|0;
  $108 = $107&65535;
  $109 = ($108>>>0)>($$>>>0);
  if (!($109)) {
   $best_len$3 = $best_len$2;
   label = 20;
   break;
  }
  $110 = (($chain_length$1) + -1)|0;
  $111 = ($110|0)==(0);
  if ($111) {
   $best_len$3 = $best_len$2;
   label = 20;
   break;
  } else {
   $$01 = $108;$best_len$0 = $best_len$2;$chain_length$1 = $110;$scan$0 = $scan$3;$scan_end$0 = $scan_end$2;$scan_end1$0 = $scan_end1$2;
  }
 }
 if ((label|0) == 20) {
  $112 = ($best_len$3>>>0)>($31>>>0);
  $$best_len$3 = $112 ? $31 : $best_len$3;
  return ($$best_len$3|0);
 }
 return (0)|0;
}
function _deflate_slow($s,$flush) {
 $s = $s|0;
 $flush = $flush|0;
 var $$ = 0, $$0 = 0, $$18 = 0, $$19 = 0, $$20 = 0, $$21 = 0, $$22 = 0, $$not = 0, $$not17 = 0, $$pn = 0, $$pr = 0, $$pre = 0, $$pre$phi12Z2D = 0, $$pre$phi14Z2D = 0, $$pre$phi16Z2D = 0, $$pre$phiZ2D = 0, $$pre10 = 0, $$pre11 = 0, $$pre13 = 0, $$pre15 = 0;
 var $$sink = 0, $$sink$in = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 116|0);
 $1 = ((($s)) + 72|0);
 $2 = ((($s)) + 88|0);
 $3 = ((($s)) + 108|0);
 $4 = ((($s)) + 56|0);
 $5 = ((($s)) + 84|0);
 $6 = ((($s)) + 68|0);
 $7 = ((($s)) + 52|0);
 $8 = ((($s)) + 64|0);
 $9 = ((($s)) + 96|0);
 $10 = ((($s)) + 120|0);
 $11 = ((($s)) + 112|0);
 $12 = ((($s)) + 100|0);
 $13 = ((($s)) + 5792|0);
 $14 = ((($s)) + 5796|0);
 $15 = ((($s)) + 5784|0);
 $16 = ((($s)) + 5788|0);
 $17 = ((($s)) + 104|0);
 $18 = ((($s)) + 92|0);
 $19 = ((($s)) + 128|0);
 $20 = ((($s)) + 44|0);
 $21 = ((($s)) + 136|0);
 L1: while(1) {
  $$pr = HEAP32[$0>>2]|0;
  $23 = $$pr;
  while(1) {
   $22 = ($23>>>0)<(262);
   if ($22) {
    _fill_window($s);
    $24 = HEAP32[$0>>2]|0;
    $$not = ($24>>>0)>(261);
    $$not17 = ($flush|0)!=(0);
    $brmerge = $$not | $$not17;
    if (!($brmerge)) {
     $$0 = 0;
     label = 74;
     break L1;
    }
    $25 = ($24|0)==(0);
    if ($25) {
     label = 47;
     break L1;
    } else {
     $27 = $24;
    }
    $26 = ($27>>>0)>(2);
    if ($26) {
     label = 8;
    } else {
     $28 = HEAP32[$9>>2]|0;
     HEAP32[$10>>2] = $28;
     $29 = HEAP32[$11>>2]|0;
     HEAP32[$12>>2] = $29;
     HEAP32[$9>>2] = 2;
     $77 = 2;
    }
   } else {
    label = 8;
   }
   do {
    if ((label|0) == 8) {
     label = 0;
     $30 = HEAP32[$1>>2]|0;
     $31 = HEAP32[$2>>2]|0;
     $32 = $30 << $31;
     $33 = HEAP32[$3>>2]|0;
     $34 = (($33) + 2)|0;
     $35 = HEAP32[$4>>2]|0;
     $36 = (($35) + ($34)|0);
     $37 = HEAP8[$36>>0]|0;
     $38 = $37&255;
     $39 = $32 ^ $38;
     $40 = HEAP32[$5>>2]|0;
     $41 = $39 & $40;
     HEAP32[$1>>2] = $41;
     $42 = HEAP32[$6>>2]|0;
     $43 = (($42) + ($41<<1)|0);
     $44 = HEAP16[$43>>1]|0;
     $45 = HEAP32[$7>>2]|0;
     $46 = $33 & $45;
     $47 = HEAP32[$8>>2]|0;
     $48 = (($47) + ($46<<1)|0);
     HEAP16[$48>>1] = $44;
     $49 = $44&65535;
     $50 = HEAP32[$3>>2]|0;
     $51 = $50&65535;
     $52 = HEAP32[$1>>2]|0;
     $53 = HEAP32[$6>>2]|0;
     $54 = (($53) + ($52<<1)|0);
     HEAP16[$54>>1] = $51;
     $55 = HEAP32[$9>>2]|0;
     HEAP32[$10>>2] = $55;
     $56 = HEAP32[$11>>2]|0;
     HEAP32[$12>>2] = $56;
     HEAP32[$9>>2] = 2;
     $57 = ($49|0)==(0);
     if ($57) {
      $77 = 2;
     } else {
      $58 = HEAP32[$19>>2]|0;
      $59 = ($55>>>0)<($58>>>0);
      if ($59) {
       $60 = HEAP32[$3>>2]|0;
       $61 = (($60) - ($49))|0;
       $62 = HEAP32[$20>>2]|0;
       $63 = (($62) + -262)|0;
       $64 = ($61>>>0)>($63>>>0);
       if ($64) {
        $77 = 2;
       } else {
        $65 = (_longest_match($s,$49)|0);
        HEAP32[$9>>2] = $65;
        $66 = ($65>>>0)<(6);
        if ($66) {
         $67 = HEAP32[$21>>2]|0;
         $68 = ($67|0)==(1);
         if (!($68)) {
          $69 = ($65|0)==(3);
          if (!($69)) {
           $77 = $65;
           break;
          }
          $70 = HEAP32[$3>>2]|0;
          $71 = HEAP32[$11>>2]|0;
          $72 = (($70) - ($71))|0;
          $73 = ($72>>>0)>(4096);
          if (!($73)) {
           $77 = 3;
           break;
          }
         }
         HEAP32[$9>>2] = 2;
         $77 = 2;
        } else {
         $77 = $65;
        }
       }
      } else {
       $77 = 2;
      }
     }
    }
   } while(0);
   $74 = HEAP32[$10>>2]|0;
   $75 = ($74>>>0)<(3);
   $76 = ($77>>>0)>($74>>>0);
   $or$cond = $75 | $76;
   if (!($or$cond)) {
    break;
   }
   $223 = HEAP32[$17>>2]|0;
   $224 = ($223|0)==(0);
   if ($224) {
    HEAP32[$17>>2] = 1;
    $320 = HEAP32[$3>>2]|0;
    $321 = (($320) + 1)|0;
    HEAP32[$3>>2] = $321;
    $322 = HEAP32[$0>>2]|0;
    $323 = (($322) + -1)|0;
    HEAP32[$0>>2] = $323;
    $23 = $323;
    continue;
   }
   $225 = HEAP32[$3>>2]|0;
   $226 = (($225) + -1)|0;
   $227 = HEAP32[$4>>2]|0;
   $228 = (($227) + ($226)|0);
   $229 = HEAP8[$228>>0]|0;
   $230 = HEAP32[$13>>2]|0;
   $231 = HEAP32[$14>>2]|0;
   $232 = (($231) + ($230<<1)|0);
   HEAP16[$232>>1] = 0;
   $233 = HEAP32[$13>>2]|0;
   $234 = (($233) + 1)|0;
   HEAP32[$13>>2] = $234;
   $235 = HEAP32[$15>>2]|0;
   $236 = (($235) + ($233)|0);
   HEAP8[$236>>0] = $229;
   $237 = $229&255;
   $238 = (((($s)) + 148|0) + ($237<<2)|0);
   $239 = HEAP16[$238>>1]|0;
   $240 = (($239) + 1)<<16>>16;
   HEAP16[$238>>1] = $240;
   $241 = HEAP32[$13>>2]|0;
   $242 = HEAP32[$16>>2]|0;
   $243 = (($242) + -1)|0;
   $244 = ($241|0)==($243|0);
   if ($244) {
    $245 = HEAP32[$18>>2]|0;
    $246 = ($245|0)>(-1);
    if ($246) {
     $247 = HEAP32[$4>>2]|0;
     $248 = (($247) + ($245)|0);
     $251 = $248;
    } else {
     $251 = 0;
    }
    $249 = HEAP32[$3>>2]|0;
    $250 = (($249) - ($245))|0;
    __tr_flush_block($s,$251,$250,0);
    $252 = HEAP32[$3>>2]|0;
    HEAP32[$18>>2] = $252;
    $253 = HEAP32[$s>>2]|0;
    $254 = ((($253)) + 28|0);
    $255 = HEAP32[$254>>2]|0;
    $256 = ((($255)) + 5820|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = ($257|0)==(16);
    do {
     if ($258) {
      $259 = ((($255)) + 5816|0);
      $260 = HEAP16[$259>>1]|0;
      $261 = $260&255;
      $262 = ((($255)) + 20|0);
      $263 = HEAP32[$262>>2]|0;
      $264 = (($263) + 1)|0;
      HEAP32[$262>>2] = $264;
      $265 = ((($255)) + 8|0);
      $266 = HEAP32[$265>>2]|0;
      $267 = (($266) + ($263)|0);
      HEAP8[$267>>0] = $261;
      $268 = HEAP16[$259>>1]|0;
      $269 = ($268&65535) >>> 8;
      $270 = $269&255;
      $271 = HEAP32[$262>>2]|0;
      $272 = (($271) + 1)|0;
      HEAP32[$262>>2] = $272;
      $273 = HEAP32[$265>>2]|0;
      $274 = (($273) + ($271)|0);
      HEAP8[$274>>0] = $270;
      HEAP16[$259>>1] = 0;
      HEAP32[$256>>2] = 0;
      $$pre$phi14Z2D = $262;
     } else {
      $275 = ($257|0)>(7);
      if ($275) {
       $276 = ((($255)) + 5816|0);
       $277 = HEAP16[$276>>1]|0;
       $278 = $277&255;
       $279 = ((($255)) + 20|0);
       $280 = HEAP32[$279>>2]|0;
       $281 = (($280) + 1)|0;
       HEAP32[$279>>2] = $281;
       $282 = ((($255)) + 8|0);
       $283 = HEAP32[$282>>2]|0;
       $284 = (($283) + ($280)|0);
       HEAP8[$284>>0] = $278;
       $285 = HEAP16[$276>>1]|0;
       $286 = ($285&65535) >>> 8;
       HEAP16[$276>>1] = $286;
       $287 = HEAP32[$256>>2]|0;
       $288 = (($287) + -8)|0;
       HEAP32[$256>>2] = $288;
       $$pre$phi14Z2D = $279;
       break;
      } else {
       $$pre13 = ((($255)) + 20|0);
       $$pre$phi14Z2D = $$pre13;
       break;
      }
     }
    } while(0);
    $289 = HEAP32[$$pre$phi14Z2D>>2]|0;
    $290 = ((($253)) + 16|0);
    $291 = HEAP32[$290>>2]|0;
    $292 = ($289>>>0)>($291>>>0);
    $$18 = $292 ? $291 : $289;
    $293 = ($$18|0)==(0);
    if (!($293)) {
     $294 = ((($253)) + 12|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = ((($255)) + 16|0);
     $297 = HEAP32[$296>>2]|0;
     _memcpy(($295|0),($297|0),($$18|0))|0;
     $298 = HEAP32[$294>>2]|0;
     $299 = (($298) + ($$18)|0);
     HEAP32[$294>>2] = $299;
     $300 = HEAP32[$296>>2]|0;
     $301 = (($300) + ($$18)|0);
     HEAP32[$296>>2] = $301;
     $302 = ((($253)) + 20|0);
     $303 = HEAP32[$302>>2]|0;
     $304 = (($303) + ($$18))|0;
     HEAP32[$302>>2] = $304;
     $305 = HEAP32[$290>>2]|0;
     $306 = (($305) - ($$18))|0;
     HEAP32[$290>>2] = $306;
     $307 = HEAP32[$$pre$phi14Z2D>>2]|0;
     $308 = (($307) - ($$18))|0;
     HEAP32[$$pre$phi14Z2D>>2] = $308;
     $309 = ($307|0)==($$18|0);
     if ($309) {
      $310 = ((($255)) + 8|0);
      $311 = HEAP32[$310>>2]|0;
      HEAP32[$296>>2] = $311;
     }
    }
   }
   $312 = HEAP32[$3>>2]|0;
   $313 = (($312) + 1)|0;
   HEAP32[$3>>2] = $313;
   $314 = HEAP32[$0>>2]|0;
   $315 = (($314) + -1)|0;
   HEAP32[$0>>2] = $315;
   $316 = HEAP32[$s>>2]|0;
   $317 = ((($316)) + 16|0);
   $318 = HEAP32[$317>>2]|0;
   $319 = ($318|0)==(0);
   if ($319) {
    $$0 = 0;
    label = 74;
    break L1;
   } else {
    $23 = $315;
   }
  }
  $78 = HEAP32[$3>>2]|0;
  $79 = HEAP32[$0>>2]|0;
  $80 = (($78) + ($79))|0;
  $81 = (($80) + -3)|0;
  $82 = (($74) + 253)|0;
  $83 = $82&255;
  $84 = (($78) + 65535)|0;
  $85 = HEAP32[$12>>2]|0;
  $86 = (($84) - ($85))|0;
  $87 = $86&65535;
  $88 = HEAP32[$13>>2]|0;
  $89 = HEAP32[$14>>2]|0;
  $90 = (($89) + ($88<<1)|0);
  HEAP16[$90>>1] = $87;
  $91 = HEAP32[$13>>2]|0;
  $92 = (($91) + 1)|0;
  HEAP32[$13>>2] = $92;
  $93 = HEAP32[$15>>2]|0;
  $94 = (($93) + ($91)|0);
  HEAP8[$94>>0] = $83;
  $95 = (($87) + -1)<<16>>16;
  $96 = $82 & 255;
  $97 = (23679 + ($96)|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = $98&255;
  $100 = $99 | 256;
  $101 = (($100) + 1)|0;
  $102 = (((($s)) + 148|0) + ($101<<2)|0);
  $103 = HEAP16[$102>>1]|0;
  $104 = (($103) + 1)<<16>>16;
  HEAP16[$102>>1] = $104;
  $105 = ($95&65535)<(256);
  $106 = $95&65535;
  $107 = $106 >>> 7;
  $108 = (($107) + 256)|0;
  $$pn = $105 ? $106 : $108;
  $$sink$in = (23167 + ($$pn)|0);
  $$sink = HEAP8[$$sink$in>>0]|0;
  $109 = $$sink&255;
  $110 = (((($s)) + 2440|0) + ($109<<2)|0);
  $111 = HEAP16[$110>>1]|0;
  $112 = (($111) + 1)<<16>>16;
  HEAP16[$110>>1] = $112;
  $113 = HEAP32[$13>>2]|0;
  $114 = HEAP32[$16>>2]|0;
  $115 = (($114) + -1)|0;
  $116 = HEAP32[$10>>2]|0;
  $117 = (($116) + -1)|0;
  $118 = HEAP32[$0>>2]|0;
  $119 = (($118) - ($117))|0;
  HEAP32[$0>>2] = $119;
  $120 = (($116) + -2)|0;
  HEAP32[$10>>2] = $120;
  $488 = $120;
  while(1) {
   $121 = HEAP32[$3>>2]|0;
   $122 = (($121) + 1)|0;
   HEAP32[$3>>2] = $122;
   $123 = ($122>>>0)>($81>>>0);
   if ($123) {
    $148 = $488;
   } else {
    $124 = HEAP32[$1>>2]|0;
    $125 = HEAP32[$2>>2]|0;
    $126 = $124 << $125;
    $127 = (($121) + 3)|0;
    $128 = HEAP32[$4>>2]|0;
    $129 = (($128) + ($127)|0);
    $130 = HEAP8[$129>>0]|0;
    $131 = $130&255;
    $132 = $126 ^ $131;
    $133 = HEAP32[$5>>2]|0;
    $134 = $132 & $133;
    HEAP32[$1>>2] = $134;
    $135 = HEAP32[$6>>2]|0;
    $136 = (($135) + ($134<<1)|0);
    $137 = HEAP16[$136>>1]|0;
    $138 = HEAP32[$7>>2]|0;
    $139 = $122 & $138;
    $140 = HEAP32[$8>>2]|0;
    $141 = (($140) + ($139<<1)|0);
    HEAP16[$141>>1] = $137;
    $142 = HEAP32[$3>>2]|0;
    $143 = $142&65535;
    $144 = HEAP32[$1>>2]|0;
    $145 = HEAP32[$6>>2]|0;
    $146 = (($145) + ($144<<1)|0);
    HEAP16[$146>>1] = $143;
    $$pre = HEAP32[$10>>2]|0;
    $148 = $$pre;
   }
   $147 = (($148) + -1)|0;
   HEAP32[$10>>2] = $147;
   $149 = ($147|0)==(0);
   if ($149) {
    break;
   } else {
    $488 = $147;
   }
  }
  $150 = ($113|0)==($115|0);
  HEAP32[$17>>2] = 0;
  HEAP32[$9>>2] = 2;
  $151 = HEAP32[$3>>2]|0;
  $152 = (($151) + 1)|0;
  HEAP32[$3>>2] = $152;
  if (!($150)) {
   continue;
  }
  $153 = HEAP32[$18>>2]|0;
  $154 = ($153|0)>(-1);
  if ($154) {
   $155 = HEAP32[$4>>2]|0;
   $156 = (($155) + ($153)|0);
   $158 = $156;
  } else {
   $158 = 0;
  }
  $157 = (($152) - ($153))|0;
  __tr_flush_block($s,$158,$157,0);
  $159 = HEAP32[$3>>2]|0;
  HEAP32[$18>>2] = $159;
  $160 = HEAP32[$s>>2]|0;
  $161 = ((($160)) + 28|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = ((($162)) + 5820|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = ($164|0)==(16);
  do {
   if ($165) {
    $166 = ((($162)) + 5816|0);
    $167 = HEAP16[$166>>1]|0;
    $168 = $167&255;
    $169 = ((($162)) + 20|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = (($170) + 1)|0;
    HEAP32[$169>>2] = $171;
    $172 = ((($162)) + 8|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = (($173) + ($170)|0);
    HEAP8[$174>>0] = $168;
    $175 = HEAP16[$166>>1]|0;
    $176 = ($175&65535) >>> 8;
    $177 = $176&255;
    $178 = HEAP32[$169>>2]|0;
    $179 = (($178) + 1)|0;
    HEAP32[$169>>2] = $179;
    $180 = HEAP32[$172>>2]|0;
    $181 = (($180) + ($178)|0);
    HEAP8[$181>>0] = $177;
    HEAP16[$166>>1] = 0;
    HEAP32[$163>>2] = 0;
    $$pre$phi16Z2D = $169;
   } else {
    $182 = ($164|0)>(7);
    if ($182) {
     $183 = ((($162)) + 5816|0);
     $184 = HEAP16[$183>>1]|0;
     $185 = $184&255;
     $186 = ((($162)) + 20|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = (($187) + 1)|0;
     HEAP32[$186>>2] = $188;
     $189 = ((($162)) + 8|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = (($190) + ($187)|0);
     HEAP8[$191>>0] = $185;
     $192 = HEAP16[$183>>1]|0;
     $193 = ($192&65535) >>> 8;
     HEAP16[$183>>1] = $193;
     $194 = HEAP32[$163>>2]|0;
     $195 = (($194) + -8)|0;
     HEAP32[$163>>2] = $195;
     $$pre$phi16Z2D = $186;
     break;
    } else {
     $$pre15 = ((($162)) + 20|0);
     $$pre$phi16Z2D = $$pre15;
     break;
    }
   }
  } while(0);
  $196 = HEAP32[$$pre$phi16Z2D>>2]|0;
  $197 = ((($160)) + 16|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = ($196>>>0)>($198>>>0);
  $$ = $199 ? $198 : $196;
  $200 = ($$|0)==(0);
  if (!($200)) {
   $201 = ((($160)) + 12|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = ((($162)) + 16|0);
   $204 = HEAP32[$203>>2]|0;
   _memcpy(($202|0),($204|0),($$|0))|0;
   $205 = HEAP32[$201>>2]|0;
   $206 = (($205) + ($$)|0);
   HEAP32[$201>>2] = $206;
   $207 = HEAP32[$203>>2]|0;
   $208 = (($207) + ($$)|0);
   HEAP32[$203>>2] = $208;
   $209 = ((($160)) + 20|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = (($210) + ($$))|0;
   HEAP32[$209>>2] = $211;
   $212 = HEAP32[$197>>2]|0;
   $213 = (($212) - ($$))|0;
   HEAP32[$197>>2] = $213;
   $214 = HEAP32[$$pre$phi16Z2D>>2]|0;
   $215 = (($214) - ($$))|0;
   HEAP32[$$pre$phi16Z2D>>2] = $215;
   $216 = ($214|0)==($$|0);
   if ($216) {
    $217 = ((($162)) + 8|0);
    $218 = HEAP32[$217>>2]|0;
    HEAP32[$203>>2] = $218;
   }
  }
  $219 = HEAP32[$s>>2]|0;
  $220 = ((($219)) + 16|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = ($221|0)==(0);
  if ($222) {
   $$0 = 0;
   label = 74;
   break;
  }
 }
 if ((label|0) == 47) {
  $324 = HEAP32[$17>>2]|0;
  $325 = ($324|0)==(0);
  if (!($325)) {
   $326 = HEAP32[$3>>2]|0;
   $327 = (($326) + -1)|0;
   $328 = HEAP32[$4>>2]|0;
   $329 = (($328) + ($327)|0);
   $330 = HEAP8[$329>>0]|0;
   $331 = HEAP32[$13>>2]|0;
   $332 = HEAP32[$14>>2]|0;
   $333 = (($332) + ($331<<1)|0);
   HEAP16[$333>>1] = 0;
   $334 = HEAP32[$13>>2]|0;
   $335 = (($334) + 1)|0;
   HEAP32[$13>>2] = $335;
   $336 = HEAP32[$15>>2]|0;
   $337 = (($336) + ($334)|0);
   HEAP8[$337>>0] = $330;
   $338 = $330&255;
   $339 = (((($s)) + 148|0) + ($338<<2)|0);
   $340 = HEAP16[$339>>1]|0;
   $341 = (($340) + 1)<<16>>16;
   HEAP16[$339>>1] = $341;
   HEAP32[$17>>2] = 0;
  }
  $342 = HEAP32[$3>>2]|0;
  $343 = ($342>>>0)<(2);
  $$19 = $343 ? $342 : 2;
  $344 = ((($s)) + 5812|0);
  HEAP32[$344>>2] = $$19;
  $345 = ($flush|0)==(4);
  if ($345) {
   $346 = HEAP32[$18>>2]|0;
   $347 = ($346|0)>(-1);
   if ($347) {
    $348 = HEAP32[$4>>2]|0;
    $349 = (($348) + ($346)|0);
    $351 = $349;
   } else {
    $351 = 0;
   }
   $350 = (($342) - ($346))|0;
   __tr_flush_block($s,$351,$350,1);
   $352 = HEAP32[$3>>2]|0;
   HEAP32[$18>>2] = $352;
   $353 = HEAP32[$s>>2]|0;
   $354 = ((($353)) + 28|0);
   $355 = HEAP32[$354>>2]|0;
   $356 = ((($355)) + 5820|0);
   $357 = HEAP32[$356>>2]|0;
   $358 = ($357|0)==(16);
   do {
    if ($358) {
     $359 = ((($355)) + 5816|0);
     $360 = HEAP16[$359>>1]|0;
     $361 = $360&255;
     $362 = ((($355)) + 20|0);
     $363 = HEAP32[$362>>2]|0;
     $364 = (($363) + 1)|0;
     HEAP32[$362>>2] = $364;
     $365 = ((($355)) + 8|0);
     $366 = HEAP32[$365>>2]|0;
     $367 = (($366) + ($363)|0);
     HEAP8[$367>>0] = $361;
     $368 = HEAP16[$359>>1]|0;
     $369 = ($368&65535) >>> 8;
     $370 = $369&255;
     $371 = HEAP32[$362>>2]|0;
     $372 = (($371) + 1)|0;
     HEAP32[$362>>2] = $372;
     $373 = HEAP32[$365>>2]|0;
     $374 = (($373) + ($371)|0);
     HEAP8[$374>>0] = $370;
     HEAP16[$359>>1] = 0;
     HEAP32[$356>>2] = 0;
     $$pre$phiZ2D = $362;
    } else {
     $375 = ($357|0)>(7);
     if ($375) {
      $376 = ((($355)) + 5816|0);
      $377 = HEAP16[$376>>1]|0;
      $378 = $377&255;
      $379 = ((($355)) + 20|0);
      $380 = HEAP32[$379>>2]|0;
      $381 = (($380) + 1)|0;
      HEAP32[$379>>2] = $381;
      $382 = ((($355)) + 8|0);
      $383 = HEAP32[$382>>2]|0;
      $384 = (($383) + ($380)|0);
      HEAP8[$384>>0] = $378;
      $385 = HEAP16[$376>>1]|0;
      $386 = ($385&65535) >>> 8;
      HEAP16[$376>>1] = $386;
      $387 = HEAP32[$356>>2]|0;
      $388 = (($387) + -8)|0;
      HEAP32[$356>>2] = $388;
      $$pre$phiZ2D = $379;
      break;
     } else {
      $$pre10 = ((($355)) + 20|0);
      $$pre$phiZ2D = $$pre10;
      break;
     }
    }
   } while(0);
   $389 = HEAP32[$$pre$phiZ2D>>2]|0;
   $390 = ((($353)) + 16|0);
   $391 = HEAP32[$390>>2]|0;
   $392 = ($389>>>0)>($391>>>0);
   $$20 = $392 ? $391 : $389;
   $393 = ($$20|0)==(0);
   if ($393) {
    $412 = HEAP32[$s>>2]|0;
    $413 = ((($412)) + 16|0);
    $414 = HEAP32[$413>>2]|0;
    $415 = ($414|0)==(0);
    $$21 = $415 ? 2 : 3;
    return ($$21|0);
   }
   $394 = ((($353)) + 12|0);
   $395 = HEAP32[$394>>2]|0;
   $396 = ((($355)) + 16|0);
   $397 = HEAP32[$396>>2]|0;
   _memcpy(($395|0),($397|0),($$20|0))|0;
   $398 = HEAP32[$394>>2]|0;
   $399 = (($398) + ($$20)|0);
   HEAP32[$394>>2] = $399;
   $400 = HEAP32[$396>>2]|0;
   $401 = (($400) + ($$20)|0);
   HEAP32[$396>>2] = $401;
   $402 = ((($353)) + 20|0);
   $403 = HEAP32[$402>>2]|0;
   $404 = (($403) + ($$20))|0;
   HEAP32[$402>>2] = $404;
   $405 = HEAP32[$390>>2]|0;
   $406 = (($405) - ($$20))|0;
   HEAP32[$390>>2] = $406;
   $407 = HEAP32[$$pre$phiZ2D>>2]|0;
   $408 = (($407) - ($$20))|0;
   HEAP32[$$pre$phiZ2D>>2] = $408;
   $409 = ($407|0)==($$20|0);
   if (!($409)) {
    $412 = HEAP32[$s>>2]|0;
    $413 = ((($412)) + 16|0);
    $414 = HEAP32[$413>>2]|0;
    $415 = ($414|0)==(0);
    $$21 = $415 ? 2 : 3;
    return ($$21|0);
   }
   $410 = ((($355)) + 8|0);
   $411 = HEAP32[$410>>2]|0;
   HEAP32[$396>>2] = $411;
   $412 = HEAP32[$s>>2]|0;
   $413 = ((($412)) + 16|0);
   $414 = HEAP32[$413>>2]|0;
   $415 = ($414|0)==(0);
   $$21 = $415 ? 2 : 3;
   return ($$21|0);
  }
  $416 = HEAP32[$13>>2]|0;
  $417 = ($416|0)==(0);
  if (!($417)) {
   $418 = HEAP32[$18>>2]|0;
   $419 = ($418|0)>(-1);
   if ($419) {
    $420 = HEAP32[$4>>2]|0;
    $421 = (($420) + ($418)|0);
    $423 = $421;
   } else {
    $423 = 0;
   }
   $422 = (($342) - ($418))|0;
   __tr_flush_block($s,$423,$422,0);
   $424 = HEAP32[$3>>2]|0;
   HEAP32[$18>>2] = $424;
   $425 = HEAP32[$s>>2]|0;
   $426 = ((($425)) + 28|0);
   $427 = HEAP32[$426>>2]|0;
   $428 = ((($427)) + 5820|0);
   $429 = HEAP32[$428>>2]|0;
   $430 = ($429|0)==(16);
   do {
    if ($430) {
     $431 = ((($427)) + 5816|0);
     $432 = HEAP16[$431>>1]|0;
     $433 = $432&255;
     $434 = ((($427)) + 20|0);
     $435 = HEAP32[$434>>2]|0;
     $436 = (($435) + 1)|0;
     HEAP32[$434>>2] = $436;
     $437 = ((($427)) + 8|0);
     $438 = HEAP32[$437>>2]|0;
     $439 = (($438) + ($435)|0);
     HEAP8[$439>>0] = $433;
     $440 = HEAP16[$431>>1]|0;
     $441 = ($440&65535) >>> 8;
     $442 = $441&255;
     $443 = HEAP32[$434>>2]|0;
     $444 = (($443) + 1)|0;
     HEAP32[$434>>2] = $444;
     $445 = HEAP32[$437>>2]|0;
     $446 = (($445) + ($443)|0);
     HEAP8[$446>>0] = $442;
     HEAP16[$431>>1] = 0;
     HEAP32[$428>>2] = 0;
     $$pre$phi12Z2D = $434;
    } else {
     $447 = ($429|0)>(7);
     if ($447) {
      $448 = ((($427)) + 5816|0);
      $449 = HEAP16[$448>>1]|0;
      $450 = $449&255;
      $451 = ((($427)) + 20|0);
      $452 = HEAP32[$451>>2]|0;
      $453 = (($452) + 1)|0;
      HEAP32[$451>>2] = $453;
      $454 = ((($427)) + 8|0);
      $455 = HEAP32[$454>>2]|0;
      $456 = (($455) + ($452)|0);
      HEAP8[$456>>0] = $450;
      $457 = HEAP16[$448>>1]|0;
      $458 = ($457&65535) >>> 8;
      HEAP16[$448>>1] = $458;
      $459 = HEAP32[$428>>2]|0;
      $460 = (($459) + -8)|0;
      HEAP32[$428>>2] = $460;
      $$pre$phi12Z2D = $451;
      break;
     } else {
      $$pre11 = ((($427)) + 20|0);
      $$pre$phi12Z2D = $$pre11;
      break;
     }
    }
   } while(0);
   $461 = HEAP32[$$pre$phi12Z2D>>2]|0;
   $462 = ((($425)) + 16|0);
   $463 = HEAP32[$462>>2]|0;
   $464 = ($461>>>0)>($463>>>0);
   $$22 = $464 ? $463 : $461;
   $465 = ($$22|0)==(0);
   if (!($465)) {
    $466 = ((($425)) + 12|0);
    $467 = HEAP32[$466>>2]|0;
    $468 = ((($427)) + 16|0);
    $469 = HEAP32[$468>>2]|0;
    _memcpy(($467|0),($469|0),($$22|0))|0;
    $470 = HEAP32[$466>>2]|0;
    $471 = (($470) + ($$22)|0);
    HEAP32[$466>>2] = $471;
    $472 = HEAP32[$468>>2]|0;
    $473 = (($472) + ($$22)|0);
    HEAP32[$468>>2] = $473;
    $474 = ((($425)) + 20|0);
    $475 = HEAP32[$474>>2]|0;
    $476 = (($475) + ($$22))|0;
    HEAP32[$474>>2] = $476;
    $477 = HEAP32[$462>>2]|0;
    $478 = (($477) - ($$22))|0;
    HEAP32[$462>>2] = $478;
    $479 = HEAP32[$$pre$phi12Z2D>>2]|0;
    $480 = (($479) - ($$22))|0;
    HEAP32[$$pre$phi12Z2D>>2] = $480;
    $481 = ($479|0)==($$22|0);
    if ($481) {
     $482 = ((($427)) + 8|0);
     $483 = HEAP32[$482>>2]|0;
     HEAP32[$468>>2] = $483;
    }
   }
   $484 = HEAP32[$s>>2]|0;
   $485 = ((($484)) + 16|0);
   $486 = HEAP32[$485>>2]|0;
   $487 = ($486|0)==(0);
   if ($487) {
    $$0 = 0;
    return ($$0|0);
   }
  }
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 74) {
  return ($$0|0);
 }
 return (0)|0;
}
function _deflate($strm,$flush) {
 $strm = $strm|0;
 $flush = $flush|0;
 var $$ = 0, $$0 = 0, $$103 = 0, $$105 = 0, $$107 = 0, $$109 = 0, $$110 = 0, $$111 = 0, $$113 = 0, $$114 = 0, $$115 = 0, $$117 = 0, $$118 = 0, $$119 = 0, $$120 = 0, $$121 = 0, $$122 = 0, $$123 = 0, $$124 = 0, $$125 = 0;
 var $$not = 0, $$not116 = 0, $$pr = 0, $$pr139 = 0, $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phi72Z2D = 0, $$pre$phi74Z2D = 0, $$pre$phi76Z2D = 0, $$pre$phi78Z2D = 0, $$pre$phi80Z2D = 0, $$pre$phi82Z2D = 0, $$pre$phi84Z2D = 0, $$pre$phi86Z2D = 0, $$pre$phi88Z2D = 0, $$pre$phi90Z2D = 0, $$pre$phi92Z2D = 0, $$pre47 = 0, $$pre48 = 0;
 var $$pre49 = 0, $$pre50 = 0, $$pre51 = 0, $$pre53 = 0, $$pre54 = 0, $$pre55 = 0, $$pre57 = 0, $$pre59 = 0, $$pre61 = 0, $$pre63 = 0, $$pre67 = 0, $$pre69 = 0, $$pre71 = 0, $$pre73 = 0, $$pre75 = 0, $$pre77 = 0, $$pre79 = 0, $$pre81 = 0, $$pre83 = 0, $$pre85 = 0;
 var $$pre87 = 0, $$pre89 = 0, $$pre91 = 0, $$pre93 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0;
 var $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0;
 var $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0;
 var $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0;
 var $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0;
 var $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0;
 var $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0;
 var $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0;
 var $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0;
 var $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0;
 var $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0;
 var $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0;
 var $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0;
 var $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0;
 var $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0;
 var $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0;
 var $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0;
 var $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0;
 var $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0;
 var $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0;
 var $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0;
 var $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0;
 var $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0;
 var $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0;
 var $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0;
 var $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0;
 var $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0;
 var $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0;
 var $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0;
 var $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0;
 var $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0;
 var $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0;
 var $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $beg$0 = 0, $beg$1 = 0, $beg$2 = 0, $beg1$0 = 0, $beg1$1 = 0, $beg1$2 = 0, $beg2$0 = 0, $beg2$1 = 0, $beg2$2 = 0, $bflush$0$i = 0, $brmerge = 0, $level_flags$2 = 0;
 var $not$ = 0, $or$cond = 0, $or$cond100 = 0, $or$cond101 = 0, $or$cond102 = 0, $or$cond104 = 0, $or$cond106 = 0, $or$cond108 = 0, $or$cond112 = 0, $scan$0$i = 0, $scan$1$i33 = 0, $val$0 = 0, $val3$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($strm|0)==(0|0);
 if ($0) {
  $$0 = -2;
  return ($$0|0);
 }
 $1 = ((($strm)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 $4 = ($flush>>>0)>(5);
 $5 = $4 | $3;
 if ($5) {
  $$0 = -2;
  return ($$0|0);
 }
 $6 = ((($strm)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 do {
  if (!($8)) {
   $9 = HEAP32[$strm>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ((($strm)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0);
    if (!($13)) {
     break;
    }
   }
   $14 = ((($2)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)!=(666);
   $17 = ($flush|0)==(4);
   $or$cond100 = $16 | $17;
   if ($or$cond100) {
    $19 = ((($strm)) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = ((($strm)) + 24|0);
     HEAP32[$22>>2] = 23987;
     $$0 = -5;
     return ($$0|0);
    }
    HEAP32[$2>>2] = $strm;
    $23 = ((($2)) + 40|0);
    $24 = HEAP32[$23>>2]|0;
    HEAP32[$23>>2] = $flush;
    $25 = ($15|0)==(42);
    do {
     if ($25) {
      $26 = ((($2)) + 24|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($27|0)==(2);
      if (!($28)) {
       $195 = ((($2)) + 48|0);
       $196 = HEAP32[$195>>2]|0;
       $197 = $196 << 12;
       $198 = (($197) + -30720)|0;
       $199 = ((($2)) + 136|0);
       $200 = HEAP32[$199>>2]|0;
       $201 = ($200|0)>(1);
       if ($201) {
        $level_flags$2 = 0;
       } else {
        $202 = ((($2)) + 132|0);
        $203 = HEAP32[$202>>2]|0;
        $204 = ($203|0)<(2);
        if ($204) {
         $level_flags$2 = 0;
        } else {
         $205 = ($203|0)<(6);
         if ($205) {
          $level_flags$2 = 64;
         } else {
          $206 = ($203|0)==(6);
          $$ = $206 ? 128 : 192;
          $level_flags$2 = $$;
         }
        }
       }
       $207 = $198 | $level_flags$2;
       $208 = ((($2)) + 108|0);
       $209 = HEAP32[$208>>2]|0;
       $210 = ($209|0)==(0);
       $211 = $207 | 32;
       $212 = $210 ? $207 : $211;
       $213 = (($212>>>0) % 31)&-1;
       $$103 = $213 | $212;
       $214 = $$103 ^ 31;
       HEAP32[$14>>2] = 113;
       $215 = $212 >>> 8;
       $216 = $215&255;
       $217 = ((($2)) + 20|0);
       $218 = HEAP32[$217>>2]|0;
       $219 = (($218) + 1)|0;
       HEAP32[$217>>2] = $219;
       $220 = ((($2)) + 8|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = (($221) + ($218)|0);
       HEAP8[$222>>0] = $216;
       $223 = $214&255;
       $224 = HEAP32[$217>>2]|0;
       $225 = (($224) + 1)|0;
       HEAP32[$217>>2] = $225;
       $226 = HEAP32[$220>>2]|0;
       $227 = (($226) + ($224)|0);
       HEAP8[$227>>0] = $223;
       $228 = HEAP32[$208>>2]|0;
       $229 = ($228|0)==(0);
       $$pre93 = ((($strm)) + 48|0);
       if (!($229)) {
        $230 = HEAP32[$$pre93>>2]|0;
        $231 = $230 >>> 16;
        $232 = $230 >>> 24;
        $233 = $232&255;
        $234 = HEAP32[$217>>2]|0;
        $235 = (($234) + 1)|0;
        HEAP32[$217>>2] = $235;
        $236 = HEAP32[$220>>2]|0;
        $237 = (($236) + ($234)|0);
        HEAP8[$237>>0] = $233;
        $238 = $231&255;
        $239 = HEAP32[$217>>2]|0;
        $240 = (($239) + 1)|0;
        HEAP32[$217>>2] = $240;
        $241 = HEAP32[$220>>2]|0;
        $242 = (($241) + ($239)|0);
        HEAP8[$242>>0] = $238;
        $243 = HEAP32[$$pre93>>2]|0;
        $244 = $243 >>> 8;
        $245 = $244&255;
        $246 = HEAP32[$217>>2]|0;
        $247 = (($246) + 1)|0;
        HEAP32[$217>>2] = $247;
        $248 = HEAP32[$220>>2]|0;
        $249 = (($248) + ($246)|0);
        HEAP8[$249>>0] = $245;
        $250 = $243&255;
        $251 = HEAP32[$217>>2]|0;
        $252 = (($251) + 1)|0;
        HEAP32[$217>>2] = $252;
        $253 = HEAP32[$220>>2]|0;
        $254 = (($253) + ($251)|0);
        HEAP8[$254>>0] = $250;
       }
       HEAP32[$$pre93>>2] = 1;
       $$pre47 = HEAP32[$14>>2]|0;
       $256 = $$pre47;
       label = 30;
       break;
      }
      $29 = ((($strm)) + 48|0);
      HEAP32[$29>>2] = 0;
      $30 = ((($2)) + 20|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($31) + 1)|0;
      HEAP32[$30>>2] = $32;
      $33 = ((($2)) + 8|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (($34) + ($31)|0);
      HEAP8[$35>>0] = 31;
      $36 = HEAP32[$30>>2]|0;
      $37 = (($36) + 1)|0;
      HEAP32[$30>>2] = $37;
      $38 = HEAP32[$33>>2]|0;
      $39 = (($38) + ($36)|0);
      HEAP8[$39>>0] = -117;
      $40 = HEAP32[$30>>2]|0;
      $41 = (($40) + 1)|0;
      HEAP32[$30>>2] = $41;
      $42 = HEAP32[$33>>2]|0;
      $43 = (($42) + ($40)|0);
      HEAP8[$43>>0] = 8;
      $44 = ((($2)) + 28|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $47 = HEAP32[$30>>2]|0;
       $48 = (($47) + 1)|0;
       HEAP32[$30>>2] = $48;
       $49 = HEAP32[$33>>2]|0;
       $50 = (($49) + ($47)|0);
       HEAP8[$50>>0] = 0;
       $51 = HEAP32[$30>>2]|0;
       $52 = (($51) + 1)|0;
       HEAP32[$30>>2] = $52;
       $53 = HEAP32[$33>>2]|0;
       $54 = (($53) + ($51)|0);
       HEAP8[$54>>0] = 0;
       $55 = HEAP32[$30>>2]|0;
       $56 = (($55) + 1)|0;
       HEAP32[$30>>2] = $56;
       $57 = HEAP32[$33>>2]|0;
       $58 = (($57) + ($55)|0);
       HEAP8[$58>>0] = 0;
       $59 = HEAP32[$30>>2]|0;
       $60 = (($59) + 1)|0;
       HEAP32[$30>>2] = $60;
       $61 = HEAP32[$33>>2]|0;
       $62 = (($61) + ($59)|0);
       HEAP8[$62>>0] = 0;
       $63 = HEAP32[$30>>2]|0;
       $64 = (($63) + 1)|0;
       HEAP32[$30>>2] = $64;
       $65 = HEAP32[$33>>2]|0;
       $66 = (($65) + ($63)|0);
       HEAP8[$66>>0] = 0;
       $67 = ((($2)) + 132|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = ($68|0)==(9);
       if ($69) {
        $78 = 2;
       } else {
        $70 = ((($2)) + 136|0);
        $71 = HEAP32[$70>>2]|0;
        $72 = ($71|0)>(1);
        $73 = ($68|0)<(2);
        $or$cond101 = $72 | $73;
        $$124 = $or$cond101 ? 4 : 0;
        $78 = $$124;
       }
       $74 = HEAP32[$30>>2]|0;
       $75 = (($74) + 1)|0;
       HEAP32[$30>>2] = $75;
       $76 = HEAP32[$33>>2]|0;
       $77 = (($76) + ($74)|0);
       HEAP8[$77>>0] = $78;
       $79 = HEAP32[$30>>2]|0;
       $80 = (($79) + 1)|0;
       HEAP32[$30>>2] = $80;
       $81 = HEAP32[$33>>2]|0;
       $82 = (($81) + ($79)|0);
       HEAP8[$82>>0] = 3;
       HEAP32[$14>>2] = 113;
       break;
      }
      $83 = HEAP32[$45>>2]|0;
      $84 = ($83|0)!=(0);
      $85 = $84&1;
      $86 = ((($45)) + 44|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = ($87|0)!=(0);
      $89 = $88 ? 2 : 0;
      $90 = $85 | $89;
      $91 = ((($45)) + 16|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = ($92|0)==(0|0);
      $94 = $93 ? 0 : 4;
      $95 = $90 | $94;
      $96 = ((($45)) + 28|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ($97|0)==(0|0);
      $99 = $98 ? 0 : 8;
      $100 = $95 | $99;
      $101 = ((($45)) + 36|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = ($102|0)==(0|0);
      $104 = $103 ? 0 : 16;
      $105 = $100 | $104;
      $106 = $105&255;
      $107 = HEAP32[$30>>2]|0;
      $108 = (($107) + 1)|0;
      HEAP32[$30>>2] = $108;
      $109 = HEAP32[$33>>2]|0;
      $110 = (($109) + ($107)|0);
      HEAP8[$110>>0] = $106;
      $111 = HEAP32[$44>>2]|0;
      $112 = ((($111)) + 4|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = $113&255;
      $115 = HEAP32[$30>>2]|0;
      $116 = (($115) + 1)|0;
      HEAP32[$30>>2] = $116;
      $117 = HEAP32[$33>>2]|0;
      $118 = (($117) + ($115)|0);
      HEAP8[$118>>0] = $114;
      $119 = HEAP32[$44>>2]|0;
      $120 = ((($119)) + 4|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = $121 >>> 8;
      $123 = $122&255;
      $124 = HEAP32[$30>>2]|0;
      $125 = (($124) + 1)|0;
      HEAP32[$30>>2] = $125;
      $126 = HEAP32[$33>>2]|0;
      $127 = (($126) + ($124)|0);
      HEAP8[$127>>0] = $123;
      $128 = HEAP32[$44>>2]|0;
      $129 = ((($128)) + 4|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = $130 >>> 16;
      $132 = $131&255;
      $133 = HEAP32[$30>>2]|0;
      $134 = (($133) + 1)|0;
      HEAP32[$30>>2] = $134;
      $135 = HEAP32[$33>>2]|0;
      $136 = (($135) + ($133)|0);
      HEAP8[$136>>0] = $132;
      $137 = HEAP32[$44>>2]|0;
      $138 = ((($137)) + 4|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = $139 >>> 24;
      $141 = $140&255;
      $142 = HEAP32[$30>>2]|0;
      $143 = (($142) + 1)|0;
      HEAP32[$30>>2] = $143;
      $144 = HEAP32[$33>>2]|0;
      $145 = (($144) + ($142)|0);
      HEAP8[$145>>0] = $141;
      $146 = ((($2)) + 132|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($147|0)==(9);
      if ($148) {
       $157 = 2;
      } else {
       $149 = ((($2)) + 136|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = ($150|0)>(1);
       $152 = ($147|0)<(2);
       $or$cond102 = $151 | $152;
       $$125 = $or$cond102 ? 4 : 0;
       $157 = $$125;
      }
      $153 = HEAP32[$30>>2]|0;
      $154 = (($153) + 1)|0;
      HEAP32[$30>>2] = $154;
      $155 = HEAP32[$33>>2]|0;
      $156 = (($155) + ($153)|0);
      HEAP8[$156>>0] = $157;
      $158 = HEAP32[$44>>2]|0;
      $159 = ((($158)) + 12|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = $160&255;
      $162 = HEAP32[$30>>2]|0;
      $163 = (($162) + 1)|0;
      HEAP32[$30>>2] = $163;
      $164 = HEAP32[$33>>2]|0;
      $165 = (($164) + ($162)|0);
      HEAP8[$165>>0] = $161;
      $166 = HEAP32[$44>>2]|0;
      $167 = ((($166)) + 16|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $187 = $166;
      } else {
       $170 = ((($166)) + 20|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = $171&255;
       $173 = HEAP32[$30>>2]|0;
       $174 = (($173) + 1)|0;
       HEAP32[$30>>2] = $174;
       $175 = HEAP32[$33>>2]|0;
       $176 = (($175) + ($173)|0);
       HEAP8[$176>>0] = $172;
       $177 = HEAP32[$44>>2]|0;
       $178 = ((($177)) + 20|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = $179 >>> 8;
       $181 = $180&255;
       $182 = HEAP32[$30>>2]|0;
       $183 = (($182) + 1)|0;
       HEAP32[$30>>2] = $183;
       $184 = HEAP32[$33>>2]|0;
       $185 = (($184) + ($182)|0);
       HEAP8[$185>>0] = $181;
       $$pre = HEAP32[$44>>2]|0;
       $187 = $$pre;
      }
      $186 = ((($187)) + 44|0);
      $188 = HEAP32[$186>>2]|0;
      $189 = ($188|0)==(0);
      if (!($189)) {
       $190 = HEAP32[$29>>2]|0;
       $191 = HEAP32[$33>>2]|0;
       $192 = HEAP32[$30>>2]|0;
       $193 = (_crc32($190,$191,$192)|0);
       HEAP32[$29>>2] = $193;
      }
      $194 = ((($2)) + 32|0);
      HEAP32[$194>>2] = 0;
      HEAP32[$14>>2] = 69;
      label = 31;
     } else {
      $256 = $15;
      label = 30;
     }
    } while(0);
    if ((label|0) == 30) {
     $255 = ($256|0)==(69);
     if ($255) {
      label = 31;
     } else {
      $373 = $256;
      label = 56;
     }
    }
    do {
     if ((label|0) == 31) {
      $257 = ((($2)) + 28|0);
      $258 = HEAP32[$257>>2]|0;
      $259 = ((($258)) + 16|0);
      $260 = HEAP32[$259>>2]|0;
      $261 = ($260|0)==(0|0);
      if ($261) {
       HEAP32[$14>>2] = 73;
       label = 57;
       break;
      }
      $262 = ((($2)) + 20|0);
      $263 = HEAP32[$262>>2]|0;
      $264 = ((($2)) + 32|0);
      $265 = ((($2)) + 12|0);
      $266 = ((($strm)) + 20|0);
      $267 = ((($strm)) + 48|0);
      $268 = ((($2)) + 8|0);
      $$pre48 = HEAP32[$264>>2]|0;
      $270 = $258;$274 = $$pre48;$beg$0 = $263;
      while(1) {
       $269 = ((($270)) + 20|0);
       $271 = HEAP32[$269>>2]|0;
       $272 = $271 & 65535;
       $273 = ($274>>>0)<($272>>>0);
       if (!($273)) {
        $357 = $270;$beg$2 = $beg$0;
        break;
       }
       $275 = HEAP32[$262>>2]|0;
       $276 = HEAP32[$265>>2]|0;
       $277 = ($275|0)==($276|0);
       if ($277) {
        $278 = ((($270)) + 44|0);
        $279 = HEAP32[$278>>2]|0;
        $280 = ($279|0)!=(0);
        $281 = ($275>>>0)>($beg$0>>>0);
        $or$cond104 = $280 & $281;
        if ($or$cond104) {
         $282 = HEAP32[$267>>2]|0;
         $283 = HEAP32[$268>>2]|0;
         $284 = (($283) + ($beg$0)|0);
         $285 = (($275) - ($beg$0))|0;
         $286 = (_crc32($282,$284,$285)|0);
         HEAP32[$267>>2] = $286;
        }
        $287 = HEAP32[$1>>2]|0;
        $288 = ((($287)) + 5820|0);
        $289 = HEAP32[$288>>2]|0;
        $290 = ($289|0)==(16);
        do {
         if ($290) {
          $291 = ((($287)) + 5816|0);
          $292 = HEAP16[$291>>1]|0;
          $293 = $292&255;
          $294 = ((($287)) + 20|0);
          $295 = HEAP32[$294>>2]|0;
          $296 = (($295) + 1)|0;
          HEAP32[$294>>2] = $296;
          $297 = ((($287)) + 8|0);
          $298 = HEAP32[$297>>2]|0;
          $299 = (($298) + ($295)|0);
          HEAP8[$299>>0] = $293;
          $300 = HEAP16[$291>>1]|0;
          $301 = ($300&65535) >>> 8;
          $302 = $301&255;
          $303 = HEAP32[$294>>2]|0;
          $304 = (($303) + 1)|0;
          HEAP32[$294>>2] = $304;
          $305 = HEAP32[$297>>2]|0;
          $306 = (($305) + ($303)|0);
          HEAP8[$306>>0] = $302;
          HEAP16[$291>>1] = 0;
          HEAP32[$288>>2] = 0;
          $$pre$phi92Z2D = $294;
         } else {
          $307 = ($289|0)>(7);
          if ($307) {
           $308 = ((($287)) + 5816|0);
           $309 = HEAP16[$308>>1]|0;
           $310 = $309&255;
           $311 = ((($287)) + 20|0);
           $312 = HEAP32[$311>>2]|0;
           $313 = (($312) + 1)|0;
           HEAP32[$311>>2] = $313;
           $314 = ((($287)) + 8|0);
           $315 = HEAP32[$314>>2]|0;
           $316 = (($315) + ($312)|0);
           HEAP8[$316>>0] = $310;
           $317 = HEAP16[$308>>1]|0;
           $318 = ($317&65535) >>> 8;
           HEAP16[$308>>1] = $318;
           $319 = HEAP32[$288>>2]|0;
           $320 = (($319) + -8)|0;
           HEAP32[$288>>2] = $320;
           $$pre$phi92Z2D = $311;
           break;
          } else {
           $$pre91 = ((($287)) + 20|0);
           $$pre$phi92Z2D = $$pre91;
           break;
          }
         }
        } while(0);
        $321 = HEAP32[$$pre$phi92Z2D>>2]|0;
        $322 = HEAP32[$19>>2]|0;
        $323 = ($321>>>0)>($322>>>0);
        $$105 = $323 ? $322 : $321;
        $324 = ($$105|0)==(0);
        if (!($324)) {
         $325 = HEAP32[$6>>2]|0;
         $326 = ((($287)) + 16|0);
         $327 = HEAP32[$326>>2]|0;
         _memcpy(($325|0),($327|0),($$105|0))|0;
         $328 = HEAP32[$6>>2]|0;
         $329 = (($328) + ($$105)|0);
         HEAP32[$6>>2] = $329;
         $330 = HEAP32[$326>>2]|0;
         $331 = (($330) + ($$105)|0);
         HEAP32[$326>>2] = $331;
         $332 = HEAP32[$266>>2]|0;
         $333 = (($332) + ($$105))|0;
         HEAP32[$266>>2] = $333;
         $334 = HEAP32[$19>>2]|0;
         $335 = (($334) - ($$105))|0;
         HEAP32[$19>>2] = $335;
         $336 = HEAP32[$$pre$phi92Z2D>>2]|0;
         $337 = (($336) - ($$105))|0;
         HEAP32[$$pre$phi92Z2D>>2] = $337;
         $338 = ($336|0)==($$105|0);
         if ($338) {
          $339 = ((($287)) + 8|0);
          $340 = HEAP32[$339>>2]|0;
          HEAP32[$326>>2] = $340;
         }
        }
        $341 = HEAP32[$262>>2]|0;
        $342 = HEAP32[$265>>2]|0;
        $343 = ($341|0)==($342|0);
        if ($343) {
         label = 46;
         break;
        }
        $$pre50 = HEAP32[$264>>2]|0;
        $$pre51 = HEAP32[$257>>2]|0;
        $345 = $$pre51;$348 = $$pre50;$351 = $341;$beg$1 = $341;
       } else {
        $345 = $270;$348 = $274;$351 = $275;$beg$1 = $beg$0;
       }
       $344 = ((($345)) + 16|0);
       $346 = HEAP32[$344>>2]|0;
       $347 = (($346) + ($348)|0);
       $349 = HEAP8[$347>>0]|0;
       $350 = (($351) + 1)|0;
       HEAP32[$262>>2] = $350;
       $352 = HEAP32[$268>>2]|0;
       $353 = (($352) + ($351)|0);
       HEAP8[$353>>0] = $349;
       $354 = HEAP32[$264>>2]|0;
       $355 = (($354) + 1)|0;
       HEAP32[$264>>2] = $355;
       $$pre49 = HEAP32[$257>>2]|0;
       $270 = $$pre49;$274 = $355;$beg$0 = $beg$1;
      }
      if ((label|0) == 46) {
       $$pre53 = HEAP32[$257>>2]|0;
       $357 = $$pre53;$beg$2 = $341;
      }
      $356 = ((($357)) + 44|0);
      $358 = HEAP32[$356>>2]|0;
      $359 = ($358|0)==(0);
      if ($359) {
       $369 = $357;
      } else {
       $360 = HEAP32[$262>>2]|0;
       $361 = ($360>>>0)>($beg$2>>>0);
       if ($361) {
        $362 = HEAP32[$267>>2]|0;
        $363 = HEAP32[$268>>2]|0;
        $364 = (($363) + ($beg$2)|0);
        $365 = (($360) - ($beg$2))|0;
        $366 = (_crc32($362,$364,$365)|0);
        HEAP32[$267>>2] = $366;
        $$pre54 = HEAP32[$257>>2]|0;
        $369 = $$pre54;
       } else {
        $369 = $357;
       }
      }
      $367 = HEAP32[$264>>2]|0;
      $368 = ((($369)) + 20|0);
      $370 = HEAP32[$368>>2]|0;
      $371 = ($367|0)==($370|0);
      if ($371) {
       HEAP32[$264>>2] = 0;
       HEAP32[$14>>2] = 73;
       label = 57;
       break;
      } else {
       $$pre55 = HEAP32[$14>>2]|0;
       $373 = $$pre55;
       label = 56;
       break;
      }
     }
    } while(0);
    if ((label|0) == 56) {
     $372 = ($373|0)==(73);
     if ($372) {
      label = 57;
     } else {
      $482 = $373;
      label = 80;
     }
    }
    do {
     if ((label|0) == 57) {
      $374 = ((($2)) + 28|0);
      $375 = HEAP32[$374>>2]|0;
      $376 = ((($375)) + 28|0);
      $377 = HEAP32[$376>>2]|0;
      $378 = ($377|0)==(0|0);
      if ($378) {
       HEAP32[$14>>2] = 91;
       label = 81;
       break;
      }
      $379 = ((($2)) + 20|0);
      $380 = HEAP32[$379>>2]|0;
      $381 = ((($2)) + 12|0);
      $382 = ((($strm)) + 20|0);
      $383 = ((($strm)) + 48|0);
      $384 = ((($2)) + 8|0);
      $385 = ((($2)) + 32|0);
      $388 = $380;$beg1$0 = $380;
      while(1) {
       $386 = HEAP32[$381>>2]|0;
       $387 = ($388|0)==($386|0);
       if ($387) {
        $389 = HEAP32[$374>>2]|0;
        $390 = ((($389)) + 44|0);
        $391 = HEAP32[$390>>2]|0;
        $392 = ($391|0)!=(0);
        $393 = ($388>>>0)>($beg1$0>>>0);
        $or$cond106 = $392 & $393;
        if ($or$cond106) {
         $394 = HEAP32[$383>>2]|0;
         $395 = HEAP32[$384>>2]|0;
         $396 = (($395) + ($beg1$0)|0);
         $397 = (($388) - ($beg1$0))|0;
         $398 = (_crc32($394,$396,$397)|0);
         HEAP32[$383>>2] = $398;
        }
        $399 = HEAP32[$1>>2]|0;
        $400 = ((($399)) + 5820|0);
        $401 = HEAP32[$400>>2]|0;
        $402 = ($401|0)==(16);
        do {
         if ($402) {
          $403 = ((($399)) + 5816|0);
          $404 = HEAP16[$403>>1]|0;
          $405 = $404&255;
          $406 = ((($399)) + 20|0);
          $407 = HEAP32[$406>>2]|0;
          $408 = (($407) + 1)|0;
          HEAP32[$406>>2] = $408;
          $409 = ((($399)) + 8|0);
          $410 = HEAP32[$409>>2]|0;
          $411 = (($410) + ($407)|0);
          HEAP8[$411>>0] = $405;
          $412 = HEAP16[$403>>1]|0;
          $413 = ($412&65535) >>> 8;
          $414 = $413&255;
          $415 = HEAP32[$406>>2]|0;
          $416 = (($415) + 1)|0;
          HEAP32[$406>>2] = $416;
          $417 = HEAP32[$409>>2]|0;
          $418 = (($417) + ($415)|0);
          HEAP8[$418>>0] = $414;
          HEAP16[$403>>1] = 0;
          HEAP32[$400>>2] = 0;
          $$pre$phi90Z2D = $406;
         } else {
          $419 = ($401|0)>(7);
          if ($419) {
           $420 = ((($399)) + 5816|0);
           $421 = HEAP16[$420>>1]|0;
           $422 = $421&255;
           $423 = ((($399)) + 20|0);
           $424 = HEAP32[$423>>2]|0;
           $425 = (($424) + 1)|0;
           HEAP32[$423>>2] = $425;
           $426 = ((($399)) + 8|0);
           $427 = HEAP32[$426>>2]|0;
           $428 = (($427) + ($424)|0);
           HEAP8[$428>>0] = $422;
           $429 = HEAP16[$420>>1]|0;
           $430 = ($429&65535) >>> 8;
           HEAP16[$420>>1] = $430;
           $431 = HEAP32[$400>>2]|0;
           $432 = (($431) + -8)|0;
           HEAP32[$400>>2] = $432;
           $$pre$phi90Z2D = $423;
           break;
          } else {
           $$pre89 = ((($399)) + 20|0);
           $$pre$phi90Z2D = $$pre89;
           break;
          }
         }
        } while(0);
        $433 = HEAP32[$$pre$phi90Z2D>>2]|0;
        $434 = HEAP32[$19>>2]|0;
        $435 = ($433>>>0)>($434>>>0);
        $$107 = $435 ? $434 : $433;
        $436 = ($$107|0)==(0);
        if (!($436)) {
         $437 = HEAP32[$6>>2]|0;
         $438 = ((($399)) + 16|0);
         $439 = HEAP32[$438>>2]|0;
         _memcpy(($437|0),($439|0),($$107|0))|0;
         $440 = HEAP32[$6>>2]|0;
         $441 = (($440) + ($$107)|0);
         HEAP32[$6>>2] = $441;
         $442 = HEAP32[$438>>2]|0;
         $443 = (($442) + ($$107)|0);
         HEAP32[$438>>2] = $443;
         $444 = HEAP32[$382>>2]|0;
         $445 = (($444) + ($$107))|0;
         HEAP32[$382>>2] = $445;
         $446 = HEAP32[$19>>2]|0;
         $447 = (($446) - ($$107))|0;
         HEAP32[$19>>2] = $447;
         $448 = HEAP32[$$pre$phi90Z2D>>2]|0;
         $449 = (($448) - ($$107))|0;
         HEAP32[$$pre$phi90Z2D>>2] = $449;
         $450 = ($448|0)==($$107|0);
         if ($450) {
          $451 = ((($399)) + 8|0);
          $452 = HEAP32[$451>>2]|0;
          HEAP32[$438>>2] = $452;
         }
        }
        $453 = HEAP32[$379>>2]|0;
        $454 = HEAP32[$381>>2]|0;
        $455 = ($453|0)==($454|0);
        if ($455) {
         $beg1$2 = $453;$val$0 = 1;
         break;
        } else {
         $464 = $453;$beg1$1 = $453;
        }
       } else {
        $464 = $388;$beg1$1 = $beg1$0;
       }
       $456 = HEAP32[$385>>2]|0;
       $457 = (($456) + 1)|0;
       HEAP32[$385>>2] = $457;
       $458 = HEAP32[$374>>2]|0;
       $459 = ((($458)) + 28|0);
       $460 = HEAP32[$459>>2]|0;
       $461 = (($460) + ($456)|0);
       $462 = HEAP8[$461>>0]|0;
       $463 = (($464) + 1)|0;
       HEAP32[$379>>2] = $463;
       $465 = HEAP32[$384>>2]|0;
       $466 = (($465) + ($464)|0);
       HEAP8[$466>>0] = $462;
       $467 = $462&255;
       $468 = ($462<<24>>24)==(0);
       if ($468) {
        $beg1$2 = $beg1$1;$val$0 = $467;
        break;
       }
       $$pre57 = HEAP32[$379>>2]|0;
       $388 = $$pre57;$beg1$0 = $beg1$1;
      }
      $469 = HEAP32[$374>>2]|0;
      $470 = ((($469)) + 44|0);
      $471 = HEAP32[$470>>2]|0;
      $472 = ($471|0)==(0);
      if (!($472)) {
       $473 = HEAP32[$379>>2]|0;
       $474 = ($473>>>0)>($beg1$2>>>0);
       if ($474) {
        $475 = HEAP32[$383>>2]|0;
        $476 = HEAP32[$384>>2]|0;
        $477 = (($476) + ($beg1$2)|0);
        $478 = (($473) - ($beg1$2))|0;
        $479 = (_crc32($475,$477,$478)|0);
        HEAP32[$383>>2] = $479;
       }
      }
      $480 = ($val$0|0)==(0);
      if ($480) {
       HEAP32[$385>>2] = 0;
       HEAP32[$14>>2] = 91;
       label = 81;
       break;
      } else {
       $$pre59 = HEAP32[$14>>2]|0;
       $482 = $$pre59;
       label = 80;
       break;
      }
     }
    } while(0);
    if ((label|0) == 80) {
     $481 = ($482|0)==(91);
     if ($481) {
      label = 81;
     } else {
      $591 = $482;
      label = 104;
     }
    }
    do {
     if ((label|0) == 81) {
      $483 = ((($2)) + 28|0);
      $484 = HEAP32[$483>>2]|0;
      $485 = ((($484)) + 36|0);
      $486 = HEAP32[$485>>2]|0;
      $487 = ($486|0)==(0|0);
      if ($487) {
       HEAP32[$14>>2] = 103;
       label = 105;
       break;
      }
      $488 = ((($2)) + 20|0);
      $489 = HEAP32[$488>>2]|0;
      $490 = ((($2)) + 12|0);
      $491 = ((($strm)) + 20|0);
      $492 = ((($strm)) + 48|0);
      $493 = ((($2)) + 8|0);
      $494 = ((($2)) + 32|0);
      $497 = $489;$beg2$0 = $489;
      while(1) {
       $495 = HEAP32[$490>>2]|0;
       $496 = ($497|0)==($495|0);
       if ($496) {
        $498 = HEAP32[$483>>2]|0;
        $499 = ((($498)) + 44|0);
        $500 = HEAP32[$499>>2]|0;
        $501 = ($500|0)!=(0);
        $502 = ($497>>>0)>($beg2$0>>>0);
        $or$cond108 = $501 & $502;
        if ($or$cond108) {
         $503 = HEAP32[$492>>2]|0;
         $504 = HEAP32[$493>>2]|0;
         $505 = (($504) + ($beg2$0)|0);
         $506 = (($497) - ($beg2$0))|0;
         $507 = (_crc32($503,$505,$506)|0);
         HEAP32[$492>>2] = $507;
        }
        $508 = HEAP32[$1>>2]|0;
        $509 = ((($508)) + 5820|0);
        $510 = HEAP32[$509>>2]|0;
        $511 = ($510|0)==(16);
        do {
         if ($511) {
          $512 = ((($508)) + 5816|0);
          $513 = HEAP16[$512>>1]|0;
          $514 = $513&255;
          $515 = ((($508)) + 20|0);
          $516 = HEAP32[$515>>2]|0;
          $517 = (($516) + 1)|0;
          HEAP32[$515>>2] = $517;
          $518 = ((($508)) + 8|0);
          $519 = HEAP32[$518>>2]|0;
          $520 = (($519) + ($516)|0);
          HEAP8[$520>>0] = $514;
          $521 = HEAP16[$512>>1]|0;
          $522 = ($521&65535) >>> 8;
          $523 = $522&255;
          $524 = HEAP32[$515>>2]|0;
          $525 = (($524) + 1)|0;
          HEAP32[$515>>2] = $525;
          $526 = HEAP32[$518>>2]|0;
          $527 = (($526) + ($524)|0);
          HEAP8[$527>>0] = $523;
          HEAP16[$512>>1] = 0;
          HEAP32[$509>>2] = 0;
          $$pre$phi88Z2D = $515;
         } else {
          $528 = ($510|0)>(7);
          if ($528) {
           $529 = ((($508)) + 5816|0);
           $530 = HEAP16[$529>>1]|0;
           $531 = $530&255;
           $532 = ((($508)) + 20|0);
           $533 = HEAP32[$532>>2]|0;
           $534 = (($533) + 1)|0;
           HEAP32[$532>>2] = $534;
           $535 = ((($508)) + 8|0);
           $536 = HEAP32[$535>>2]|0;
           $537 = (($536) + ($533)|0);
           HEAP8[$537>>0] = $531;
           $538 = HEAP16[$529>>1]|0;
           $539 = ($538&65535) >>> 8;
           HEAP16[$529>>1] = $539;
           $540 = HEAP32[$509>>2]|0;
           $541 = (($540) + -8)|0;
           HEAP32[$509>>2] = $541;
           $$pre$phi88Z2D = $532;
           break;
          } else {
           $$pre87 = ((($508)) + 20|0);
           $$pre$phi88Z2D = $$pre87;
           break;
          }
         }
        } while(0);
        $542 = HEAP32[$$pre$phi88Z2D>>2]|0;
        $543 = HEAP32[$19>>2]|0;
        $544 = ($542>>>0)>($543>>>0);
        $$109 = $544 ? $543 : $542;
        $545 = ($$109|0)==(0);
        if (!($545)) {
         $546 = HEAP32[$6>>2]|0;
         $547 = ((($508)) + 16|0);
         $548 = HEAP32[$547>>2]|0;
         _memcpy(($546|0),($548|0),($$109|0))|0;
         $549 = HEAP32[$6>>2]|0;
         $550 = (($549) + ($$109)|0);
         HEAP32[$6>>2] = $550;
         $551 = HEAP32[$547>>2]|0;
         $552 = (($551) + ($$109)|0);
         HEAP32[$547>>2] = $552;
         $553 = HEAP32[$491>>2]|0;
         $554 = (($553) + ($$109))|0;
         HEAP32[$491>>2] = $554;
         $555 = HEAP32[$19>>2]|0;
         $556 = (($555) - ($$109))|0;
         HEAP32[$19>>2] = $556;
         $557 = HEAP32[$$pre$phi88Z2D>>2]|0;
         $558 = (($557) - ($$109))|0;
         HEAP32[$$pre$phi88Z2D>>2] = $558;
         $559 = ($557|0)==($$109|0);
         if ($559) {
          $560 = ((($508)) + 8|0);
          $561 = HEAP32[$560>>2]|0;
          HEAP32[$547>>2] = $561;
         }
        }
        $562 = HEAP32[$488>>2]|0;
        $563 = HEAP32[$490>>2]|0;
        $564 = ($562|0)==($563|0);
        if ($564) {
         $beg2$2 = $562;$val3$0 = 1;
         break;
        } else {
         $573 = $562;$beg2$1 = $562;
        }
       } else {
        $573 = $497;$beg2$1 = $beg2$0;
       }
       $565 = HEAP32[$494>>2]|0;
       $566 = (($565) + 1)|0;
       HEAP32[$494>>2] = $566;
       $567 = HEAP32[$483>>2]|0;
       $568 = ((($567)) + 36|0);
       $569 = HEAP32[$568>>2]|0;
       $570 = (($569) + ($565)|0);
       $571 = HEAP8[$570>>0]|0;
       $572 = (($573) + 1)|0;
       HEAP32[$488>>2] = $572;
       $574 = HEAP32[$493>>2]|0;
       $575 = (($574) + ($573)|0);
       HEAP8[$575>>0] = $571;
       $576 = $571&255;
       $577 = ($571<<24>>24)==(0);
       if ($577) {
        $beg2$2 = $beg2$1;$val3$0 = $576;
        break;
       }
       $$pre61 = HEAP32[$488>>2]|0;
       $497 = $$pre61;$beg2$0 = $beg2$1;
      }
      $578 = HEAP32[$483>>2]|0;
      $579 = ((($578)) + 44|0);
      $580 = HEAP32[$579>>2]|0;
      $581 = ($580|0)==(0);
      if (!($581)) {
       $582 = HEAP32[$488>>2]|0;
       $583 = ($582>>>0)>($beg2$2>>>0);
       if ($583) {
        $584 = HEAP32[$492>>2]|0;
        $585 = HEAP32[$493>>2]|0;
        $586 = (($585) + ($beg2$2)|0);
        $587 = (($582) - ($beg2$2))|0;
        $588 = (_crc32($584,$586,$587)|0);
        HEAP32[$492>>2] = $588;
       }
      }
      $589 = ($val3$0|0)==(0);
      if ($589) {
       HEAP32[$14>>2] = 103;
       label = 105;
       break;
      } else {
       $$pre63 = HEAP32[$14>>2]|0;
       $591 = $$pre63;
       label = 104;
       break;
      }
     }
    } while(0);
    if ((label|0) == 104) {
     $590 = ($591|0)==(103);
     if ($590) {
      label = 105;
     }
    }
    do {
     if ((label|0) == 105) {
      $592 = ((($2)) + 28|0);
      $593 = HEAP32[$592>>2]|0;
      $594 = ((($593)) + 44|0);
      $595 = HEAP32[$594>>2]|0;
      $596 = ($595|0)==(0);
      if ($596) {
       HEAP32[$14>>2] = 113;
       break;
      }
      $597 = ((($2)) + 20|0);
      $598 = HEAP32[$597>>2]|0;
      $599 = (($598) + 2)|0;
      $600 = ((($2)) + 12|0);
      $601 = HEAP32[$600>>2]|0;
      $602 = ($599>>>0)>($601>>>0);
      if ($602) {
       $603 = HEAP32[$1>>2]|0;
       $604 = ((($603)) + 5820|0);
       $605 = HEAP32[$604>>2]|0;
       $606 = ($605|0)==(16);
       do {
        if ($606) {
         $607 = ((($603)) + 5816|0);
         $608 = HEAP16[$607>>1]|0;
         $609 = $608&255;
         $610 = ((($603)) + 20|0);
         $611 = HEAP32[$610>>2]|0;
         $612 = (($611) + 1)|0;
         HEAP32[$610>>2] = $612;
         $613 = ((($603)) + 8|0);
         $614 = HEAP32[$613>>2]|0;
         $615 = (($614) + ($611)|0);
         HEAP8[$615>>0] = $609;
         $616 = HEAP16[$607>>1]|0;
         $617 = ($616&65535) >>> 8;
         $618 = $617&255;
         $619 = HEAP32[$610>>2]|0;
         $620 = (($619) + 1)|0;
         HEAP32[$610>>2] = $620;
         $621 = HEAP32[$613>>2]|0;
         $622 = (($621) + ($619)|0);
         HEAP8[$622>>0] = $618;
         HEAP16[$607>>1] = 0;
         HEAP32[$604>>2] = 0;
         $$pre$phi86Z2D = $610;
        } else {
         $623 = ($605|0)>(7);
         if ($623) {
          $624 = ((($603)) + 5816|0);
          $625 = HEAP16[$624>>1]|0;
          $626 = $625&255;
          $627 = ((($603)) + 20|0);
          $628 = HEAP32[$627>>2]|0;
          $629 = (($628) + 1)|0;
          HEAP32[$627>>2] = $629;
          $630 = ((($603)) + 8|0);
          $631 = HEAP32[$630>>2]|0;
          $632 = (($631) + ($628)|0);
          HEAP8[$632>>0] = $626;
          $633 = HEAP16[$624>>1]|0;
          $634 = ($633&65535) >>> 8;
          HEAP16[$624>>1] = $634;
          $635 = HEAP32[$604>>2]|0;
          $636 = (($635) + -8)|0;
          HEAP32[$604>>2] = $636;
          $$pre$phi86Z2D = $627;
          break;
         } else {
          $$pre85 = ((($603)) + 20|0);
          $$pre$phi86Z2D = $$pre85;
          break;
         }
        }
       } while(0);
       $637 = HEAP32[$$pre$phi86Z2D>>2]|0;
       $638 = HEAP32[$19>>2]|0;
       $639 = ($637>>>0)>($638>>>0);
       $$110 = $639 ? $638 : $637;
       $640 = ($$110|0)==(0);
       if (!($640)) {
        $641 = HEAP32[$6>>2]|0;
        $642 = ((($603)) + 16|0);
        $643 = HEAP32[$642>>2]|0;
        _memcpy(($641|0),($643|0),($$110|0))|0;
        $644 = HEAP32[$6>>2]|0;
        $645 = (($644) + ($$110)|0);
        HEAP32[$6>>2] = $645;
        $646 = HEAP32[$642>>2]|0;
        $647 = (($646) + ($$110)|0);
        HEAP32[$642>>2] = $647;
        $648 = ((($strm)) + 20|0);
        $649 = HEAP32[$648>>2]|0;
        $650 = (($649) + ($$110))|0;
        HEAP32[$648>>2] = $650;
        $651 = HEAP32[$19>>2]|0;
        $652 = (($651) - ($$110))|0;
        HEAP32[$19>>2] = $652;
        $653 = HEAP32[$$pre$phi86Z2D>>2]|0;
        $654 = (($653) - ($$110))|0;
        HEAP32[$$pre$phi86Z2D>>2] = $654;
        $655 = ($653|0)==($$110|0);
        if ($655) {
         $656 = ((($603)) + 8|0);
         $657 = HEAP32[$656>>2]|0;
         HEAP32[$642>>2] = $657;
        }
       }
      }
      $658 = HEAP32[$597>>2]|0;
      $659 = (($658) + 2)|0;
      $660 = HEAP32[$600>>2]|0;
      $661 = ($659>>>0)>($660>>>0);
      if (!($661)) {
       $662 = ((($strm)) + 48|0);
       $663 = HEAP32[$662>>2]|0;
       $664 = $663&255;
       $665 = (($658) + 1)|0;
       HEAP32[$597>>2] = $665;
       $666 = ((($2)) + 8|0);
       $667 = HEAP32[$666>>2]|0;
       $668 = (($667) + ($658)|0);
       HEAP8[$668>>0] = $664;
       $669 = HEAP32[$662>>2]|0;
       $670 = $669 >>> 8;
       $671 = $670&255;
       $672 = HEAP32[$597>>2]|0;
       $673 = (($672) + 1)|0;
       HEAP32[$597>>2] = $673;
       $674 = HEAP32[$666>>2]|0;
       $675 = (($674) + ($672)|0);
       HEAP8[$675>>0] = $671;
       HEAP32[$662>>2] = 0;
       HEAP32[$14>>2] = 113;
      }
     }
    } while(0);
    $676 = ((($2)) + 20|0);
    $677 = HEAP32[$676>>2]|0;
    $678 = ($677|0)==(0);
    if ($678) {
     $736 = ((($strm)) + 4|0);
     $737 = HEAP32[$736>>2]|0;
     $738 = ($737|0)==(0);
     if ($738) {
      $739 = $flush << 1;
      $740 = ($flush|0)>(4);
      $741 = $740 ? 9 : 0;
      $742 = (($739) - ($741))|0;
      $743 = $24 << 1;
      $744 = ($24|0)>(4);
      $745 = $744 ? 9 : 0;
      $746 = (($743) - ($745))|0;
      $747 = ($742|0)>($746|0);
      $748 = ($flush|0)==(4);
      $or$cond112 = $747 | $748;
      if (!($or$cond112)) {
       $749 = ((($strm)) + 24|0);
       HEAP32[$749>>2] = 23987;
       $$0 = -5;
       return ($$0|0);
      }
     }
    } else {
     $679 = HEAP32[$1>>2]|0;
     $680 = ((($679)) + 5820|0);
     $681 = HEAP32[$680>>2]|0;
     $682 = ($681|0)==(16);
     do {
      if ($682) {
       $683 = ((($679)) + 5816|0);
       $684 = HEAP16[$683>>1]|0;
       $685 = $684&255;
       $686 = ((($679)) + 20|0);
       $687 = HEAP32[$686>>2]|0;
       $688 = (($687) + 1)|0;
       HEAP32[$686>>2] = $688;
       $689 = ((($679)) + 8|0);
       $690 = HEAP32[$689>>2]|0;
       $691 = (($690) + ($687)|0);
       HEAP8[$691>>0] = $685;
       $692 = HEAP16[$683>>1]|0;
       $693 = ($692&65535) >>> 8;
       $694 = $693&255;
       $695 = HEAP32[$686>>2]|0;
       $696 = (($695) + 1)|0;
       HEAP32[$686>>2] = $696;
       $697 = HEAP32[$689>>2]|0;
       $698 = (($697) + ($695)|0);
       HEAP8[$698>>0] = $694;
       HEAP16[$683>>1] = 0;
       HEAP32[$680>>2] = 0;
       $$pre$phi84Z2D = $686;
      } else {
       $699 = ($681|0)>(7);
       if ($699) {
        $700 = ((($679)) + 5816|0);
        $701 = HEAP16[$700>>1]|0;
        $702 = $701&255;
        $703 = ((($679)) + 20|0);
        $704 = HEAP32[$703>>2]|0;
        $705 = (($704) + 1)|0;
        HEAP32[$703>>2] = $705;
        $706 = ((($679)) + 8|0);
        $707 = HEAP32[$706>>2]|0;
        $708 = (($707) + ($704)|0);
        HEAP8[$708>>0] = $702;
        $709 = HEAP16[$700>>1]|0;
        $710 = ($709&65535) >>> 8;
        HEAP16[$700>>1] = $710;
        $711 = HEAP32[$680>>2]|0;
        $712 = (($711) + -8)|0;
        HEAP32[$680>>2] = $712;
        $$pre$phi84Z2D = $703;
        break;
       } else {
        $$pre83 = ((($679)) + 20|0);
        $$pre$phi84Z2D = $$pre83;
        break;
       }
      }
     } while(0);
     $713 = HEAP32[$$pre$phi84Z2D>>2]|0;
     $714 = HEAP32[$19>>2]|0;
     $715 = ($713>>>0)>($714>>>0);
     $$111 = $715 ? $714 : $713;
     $716 = ($$111|0)==(0);
     if ($716) {
      $735 = $714;
     } else {
      $717 = HEAP32[$6>>2]|0;
      $718 = ((($679)) + 16|0);
      $719 = HEAP32[$718>>2]|0;
      _memcpy(($717|0),($719|0),($$111|0))|0;
      $720 = HEAP32[$6>>2]|0;
      $721 = (($720) + ($$111)|0);
      HEAP32[$6>>2] = $721;
      $722 = HEAP32[$718>>2]|0;
      $723 = (($722) + ($$111)|0);
      HEAP32[$718>>2] = $723;
      $724 = ((($strm)) + 20|0);
      $725 = HEAP32[$724>>2]|0;
      $726 = (($725) + ($$111))|0;
      HEAP32[$724>>2] = $726;
      $727 = HEAP32[$19>>2]|0;
      $728 = (($727) - ($$111))|0;
      HEAP32[$19>>2] = $728;
      $729 = HEAP32[$$pre$phi84Z2D>>2]|0;
      $730 = (($729) - ($$111))|0;
      HEAP32[$$pre$phi84Z2D>>2] = $730;
      $731 = ($729|0)==($$111|0);
      if ($731) {
       $732 = ((($679)) + 8|0);
       $733 = HEAP32[$732>>2]|0;
       HEAP32[$718>>2] = $733;
      }
      $$pr = HEAP32[$19>>2]|0;
      $735 = $$pr;
     }
     $734 = ($735|0)==(0);
     if ($734) {
      HEAP32[$23>>2] = -1;
      $$0 = 0;
      return ($$0|0);
     }
    }
    $750 = HEAP32[$14>>2]|0;
    $751 = ($750|0)==(666);
    $752 = ((($strm)) + 4|0);
    $753 = HEAP32[$752>>2]|0;
    if ($751) {
     $754 = ($753|0)==(0);
     if ($754) {
      label = 137;
     } else {
      $755 = ((($strm)) + 24|0);
      HEAP32[$755>>2] = 23987;
      $$0 = -5;
      return ($$0|0);
     }
    } else {
     $757 = $753;
     $756 = ($757|0)==(0);
     if ($756) {
      label = 137;
     } else {
      label = 140;
     }
    }
    do {
     if ((label|0) == 137) {
      $758 = ((($2)) + 116|0);
      $759 = HEAP32[$758>>2]|0;
      $760 = ($759|0)==(0);
      if ($760) {
       $761 = ($flush|0)==(0);
       if ($761) {
        $$0 = 0;
        return ($$0|0);
       } else {
        if ($751) {
         break;
        } else {
         label = 140;
         break;
        }
       }
      } else {
       label = 140;
      }
     }
    } while(0);
    L207: do {
     if ((label|0) == 140) {
      $762 = ((($2)) + 136|0);
      $763 = HEAP32[$762>>2]|0;
      L209: do {
       switch ($763|0) {
       case 2:  {
        $764 = ((($2)) + 116|0);
        $765 = ((($2)) + 96|0);
        $766 = ((($2)) + 108|0);
        $767 = ((($2)) + 56|0);
        $768 = ((($2)) + 5792|0);
        $769 = ((($2)) + 5796|0);
        $770 = ((($2)) + 5784|0);
        $771 = ((($2)) + 5788|0);
        $772 = ((($2)) + 92|0);
        while(1) {
         $773 = HEAP32[$764>>2]|0;
         $774 = ($773|0)==(0);
         if ($774) {
          _fill_window($2);
          $775 = HEAP32[$764>>2]|0;
          $776 = ($775|0)==(0);
          if ($776) {
           break;
          }
         }
         HEAP32[$765>>2] = 0;
         $780 = HEAP32[$766>>2]|0;
         $781 = HEAP32[$767>>2]|0;
         $782 = (($781) + ($780)|0);
         $783 = HEAP8[$782>>0]|0;
         $784 = HEAP32[$768>>2]|0;
         $785 = HEAP32[$769>>2]|0;
         $786 = (($785) + ($784<<1)|0);
         HEAP16[$786>>1] = 0;
         $787 = HEAP32[$768>>2]|0;
         $788 = (($787) + 1)|0;
         HEAP32[$768>>2] = $788;
         $789 = HEAP32[$770>>2]|0;
         $790 = (($789) + ($787)|0);
         HEAP8[$790>>0] = $783;
         $791 = $783&255;
         $792 = (((($2)) + 148|0) + ($791<<2)|0);
         $793 = HEAP16[$792>>1]|0;
         $794 = (($793) + 1)<<16>>16;
         HEAP16[$792>>1] = $794;
         $795 = HEAP32[$768>>2]|0;
         $796 = HEAP32[$771>>2]|0;
         $797 = (($796) + -1)|0;
         $798 = ($795|0)==($797|0);
         $799 = HEAP32[$764>>2]|0;
         $800 = (($799) + -1)|0;
         HEAP32[$764>>2] = $800;
         $801 = HEAP32[$766>>2]|0;
         $802 = (($801) + 1)|0;
         HEAP32[$766>>2] = $802;
         if (!($798)) {
          continue;
         }
         $803 = HEAP32[$772>>2]|0;
         $804 = ($803|0)>(-1);
         if ($804) {
          $805 = HEAP32[$767>>2]|0;
          $806 = (($805) + ($803)|0);
          $808 = $806;
         } else {
          $808 = 0;
         }
         $807 = (($802) - ($803))|0;
         __tr_flush_block($2,$808,$807,0);
         $809 = HEAP32[$766>>2]|0;
         HEAP32[$772>>2] = $809;
         $810 = HEAP32[$2>>2]|0;
         $811 = ((($810)) + 28|0);
         $812 = HEAP32[$811>>2]|0;
         $813 = ((($812)) + 5820|0);
         $814 = HEAP32[$813>>2]|0;
         $815 = ($814|0)==(16);
         do {
          if ($815) {
           $816 = ((($812)) + 5816|0);
           $817 = HEAP16[$816>>1]|0;
           $818 = $817&255;
           $819 = ((($812)) + 20|0);
           $820 = HEAP32[$819>>2]|0;
           $821 = (($820) + 1)|0;
           HEAP32[$819>>2] = $821;
           $822 = ((($812)) + 8|0);
           $823 = HEAP32[$822>>2]|0;
           $824 = (($823) + ($820)|0);
           HEAP8[$824>>0] = $818;
           $825 = HEAP16[$816>>1]|0;
           $826 = ($825&65535) >>> 8;
           $827 = $826&255;
           $828 = HEAP32[$819>>2]|0;
           $829 = (($828) + 1)|0;
           HEAP32[$819>>2] = $829;
           $830 = HEAP32[$822>>2]|0;
           $831 = (($830) + ($828)|0);
           HEAP8[$831>>0] = $827;
           HEAP16[$816>>1] = 0;
           HEAP32[$813>>2] = 0;
           $$pre$phi76Z2D = $819;
          } else {
           $832 = ($814|0)>(7);
           if ($832) {
            $833 = ((($812)) + 5816|0);
            $834 = HEAP16[$833>>1]|0;
            $835 = $834&255;
            $836 = ((($812)) + 20|0);
            $837 = HEAP32[$836>>2]|0;
            $838 = (($837) + 1)|0;
            HEAP32[$836>>2] = $838;
            $839 = ((($812)) + 8|0);
            $840 = HEAP32[$839>>2]|0;
            $841 = (($840) + ($837)|0);
            HEAP8[$841>>0] = $835;
            $842 = HEAP16[$833>>1]|0;
            $843 = ($842&65535) >>> 8;
            HEAP16[$833>>1] = $843;
            $844 = HEAP32[$813>>2]|0;
            $845 = (($844) + -8)|0;
            HEAP32[$813>>2] = $845;
            $$pre$phi76Z2D = $836;
            break;
           } else {
            $$pre75 = ((($812)) + 20|0);
            $$pre$phi76Z2D = $$pre75;
            break;
           }
          }
         } while(0);
         $846 = HEAP32[$$pre$phi76Z2D>>2]|0;
         $847 = ((($810)) + 16|0);
         $848 = HEAP32[$847>>2]|0;
         $849 = ($846>>>0)>($848>>>0);
         $$113 = $849 ? $848 : $846;
         $850 = ($$113|0)==(0);
         if (!($850)) {
          $851 = ((($810)) + 12|0);
          $852 = HEAP32[$851>>2]|0;
          $853 = ((($812)) + 16|0);
          $854 = HEAP32[$853>>2]|0;
          _memcpy(($852|0),($854|0),($$113|0))|0;
          $855 = HEAP32[$851>>2]|0;
          $856 = (($855) + ($$113)|0);
          HEAP32[$851>>2] = $856;
          $857 = HEAP32[$853>>2]|0;
          $858 = (($857) + ($$113)|0);
          HEAP32[$853>>2] = $858;
          $859 = ((($810)) + 20|0);
          $860 = HEAP32[$859>>2]|0;
          $861 = (($860) + ($$113))|0;
          HEAP32[$859>>2] = $861;
          $862 = HEAP32[$847>>2]|0;
          $863 = (($862) - ($$113))|0;
          HEAP32[$847>>2] = $863;
          $864 = HEAP32[$$pre$phi76Z2D>>2]|0;
          $865 = (($864) - ($$113))|0;
          HEAP32[$$pre$phi76Z2D>>2] = $865;
          $866 = ($864|0)==($$113|0);
          if ($866) {
           $867 = ((($812)) + 8|0);
           $868 = HEAP32[$867>>2]|0;
           HEAP32[$853>>2] = $868;
          }
         }
         $869 = HEAP32[$2>>2]|0;
         $870 = ((($869)) + 16|0);
         $871 = HEAP32[$870>>2]|0;
         $872 = ($871|0)==(0);
         if ($872) {
          label = 244;
          break L209;
         }
        }
        $777 = ($flush|0)==(0);
        if ($777) {
         label = 244;
        } else {
         $778 = ((($2)) + 5812|0);
         HEAP32[$778>>2] = 0;
         $779 = ($flush|0)==(4);
         if ($779) {
          $873 = HEAP32[$772>>2]|0;
          $874 = ($873|0)>(-1);
          if ($874) {
           $875 = HEAP32[$767>>2]|0;
           $876 = (($875) + ($873)|0);
           $879 = $876;
          } else {
           $879 = 0;
          }
          $877 = HEAP32[$766>>2]|0;
          $878 = (($877) - ($873))|0;
          __tr_flush_block($2,$879,$878,1);
          $880 = HEAP32[$766>>2]|0;
          HEAP32[$772>>2] = $880;
          $881 = HEAP32[$2>>2]|0;
          $882 = ((($881)) + 28|0);
          $883 = HEAP32[$882>>2]|0;
          $884 = ((($883)) + 5820|0);
          $885 = HEAP32[$884>>2]|0;
          $886 = ($885|0)==(16);
          do {
           if ($886) {
            $887 = ((($883)) + 5816|0);
            $888 = HEAP16[$887>>1]|0;
            $889 = $888&255;
            $890 = ((($883)) + 20|0);
            $891 = HEAP32[$890>>2]|0;
            $892 = (($891) + 1)|0;
            HEAP32[$890>>2] = $892;
            $893 = ((($883)) + 8|0);
            $894 = HEAP32[$893>>2]|0;
            $895 = (($894) + ($891)|0);
            HEAP8[$895>>0] = $889;
            $896 = HEAP16[$887>>1]|0;
            $897 = ($896&65535) >>> 8;
            $898 = $897&255;
            $899 = HEAP32[$890>>2]|0;
            $900 = (($899) + 1)|0;
            HEAP32[$890>>2] = $900;
            $901 = HEAP32[$893>>2]|0;
            $902 = (($901) + ($899)|0);
            HEAP8[$902>>0] = $898;
            HEAP16[$887>>1] = 0;
            HEAP32[$884>>2] = 0;
            $$pre$phi70Z2D = $890;
           } else {
            $903 = ($885|0)>(7);
            if ($903) {
             $904 = ((($883)) + 5816|0);
             $905 = HEAP16[$904>>1]|0;
             $906 = $905&255;
             $907 = ((($883)) + 20|0);
             $908 = HEAP32[$907>>2]|0;
             $909 = (($908) + 1)|0;
             HEAP32[$907>>2] = $909;
             $910 = ((($883)) + 8|0);
             $911 = HEAP32[$910>>2]|0;
             $912 = (($911) + ($908)|0);
             HEAP8[$912>>0] = $906;
             $913 = HEAP16[$904>>1]|0;
             $914 = ($913&65535) >>> 8;
             HEAP16[$904>>1] = $914;
             $915 = HEAP32[$884>>2]|0;
             $916 = (($915) + -8)|0;
             HEAP32[$884>>2] = $916;
             $$pre$phi70Z2D = $907;
             break;
            } else {
             $$pre69 = ((($883)) + 20|0);
             $$pre$phi70Z2D = $$pre69;
             break;
            }
           }
          } while(0);
          $917 = HEAP32[$$pre$phi70Z2D>>2]|0;
          $918 = ((($881)) + 16|0);
          $919 = HEAP32[$918>>2]|0;
          $920 = ($917>>>0)>($919>>>0);
          $$114 = $920 ? $919 : $917;
          $921 = ($$114|0)==(0);
          if (!($921)) {
           $922 = ((($881)) + 12|0);
           $923 = HEAP32[$922>>2]|0;
           $924 = ((($883)) + 16|0);
           $925 = HEAP32[$924>>2]|0;
           _memcpy(($923|0),($925|0),($$114|0))|0;
           $926 = HEAP32[$922>>2]|0;
           $927 = (($926) + ($$114)|0);
           HEAP32[$922>>2] = $927;
           $928 = HEAP32[$924>>2]|0;
           $929 = (($928) + ($$114)|0);
           HEAP32[$924>>2] = $929;
           $930 = ((($881)) + 20|0);
           $931 = HEAP32[$930>>2]|0;
           $932 = (($931) + ($$114))|0;
           HEAP32[$930>>2] = $932;
           $933 = HEAP32[$918>>2]|0;
           $934 = (($933) - ($$114))|0;
           HEAP32[$918>>2] = $934;
           $935 = HEAP32[$$pre$phi70Z2D>>2]|0;
           $936 = (($935) - ($$114))|0;
           HEAP32[$$pre$phi70Z2D>>2] = $936;
           $937 = ($935|0)==($$114|0);
           if ($937) {
            $938 = ((($883)) + 8|0);
            $939 = HEAP32[$938>>2]|0;
            HEAP32[$924>>2] = $939;
           }
          }
          $940 = HEAP32[$2>>2]|0;
          $941 = ((($940)) + 16|0);
          $942 = HEAP32[$941>>2]|0;
          $943 = ($942|0)==(0);
          if ($943) {
           $1583 = 2;
           label = 242;
           break L209;
          } else {
           label = 240;
           break L209;
          }
         }
         $944 = HEAP32[$768>>2]|0;
         $945 = ($944|0)==(0);
         if (!($945)) {
          $946 = HEAP32[$772>>2]|0;
          $947 = ($946|0)>(-1);
          if ($947) {
           $948 = HEAP32[$767>>2]|0;
           $949 = (($948) + ($946)|0);
           $952 = $949;
          } else {
           $952 = 0;
          }
          $950 = HEAP32[$766>>2]|0;
          $951 = (($950) - ($946))|0;
          __tr_flush_block($2,$952,$951,0);
          $953 = HEAP32[$766>>2]|0;
          HEAP32[$772>>2] = $953;
          $954 = HEAP32[$2>>2]|0;
          $955 = ((($954)) + 28|0);
          $956 = HEAP32[$955>>2]|0;
          $957 = ((($956)) + 5820|0);
          $958 = HEAP32[$957>>2]|0;
          $959 = ($958|0)==(16);
          do {
           if ($959) {
            $960 = ((($956)) + 5816|0);
            $961 = HEAP16[$960>>1]|0;
            $962 = $961&255;
            $963 = ((($956)) + 20|0);
            $964 = HEAP32[$963>>2]|0;
            $965 = (($964) + 1)|0;
            HEAP32[$963>>2] = $965;
            $966 = ((($956)) + 8|0);
            $967 = HEAP32[$966>>2]|0;
            $968 = (($967) + ($964)|0);
            HEAP8[$968>>0] = $962;
            $969 = HEAP16[$960>>1]|0;
            $970 = ($969&65535) >>> 8;
            $971 = $970&255;
            $972 = HEAP32[$963>>2]|0;
            $973 = (($972) + 1)|0;
            HEAP32[$963>>2] = $973;
            $974 = HEAP32[$966>>2]|0;
            $975 = (($974) + ($972)|0);
            HEAP8[$975>>0] = $971;
            HEAP16[$960>>1] = 0;
            HEAP32[$957>>2] = 0;
            $$pre$phi74Z2D = $963;
           } else {
            $976 = ($958|0)>(7);
            if ($976) {
             $977 = ((($956)) + 5816|0);
             $978 = HEAP16[$977>>1]|0;
             $979 = $978&255;
             $980 = ((($956)) + 20|0);
             $981 = HEAP32[$980>>2]|0;
             $982 = (($981) + 1)|0;
             HEAP32[$980>>2] = $982;
             $983 = ((($956)) + 8|0);
             $984 = HEAP32[$983>>2]|0;
             $985 = (($984) + ($981)|0);
             HEAP8[$985>>0] = $979;
             $986 = HEAP16[$977>>1]|0;
             $987 = ($986&65535) >>> 8;
             HEAP16[$977>>1] = $987;
             $988 = HEAP32[$957>>2]|0;
             $989 = (($988) + -8)|0;
             HEAP32[$957>>2] = $989;
             $$pre$phi74Z2D = $980;
             break;
            } else {
             $$pre73 = ((($956)) + 20|0);
             $$pre$phi74Z2D = $$pre73;
             break;
            }
           }
          } while(0);
          $990 = HEAP32[$$pre$phi74Z2D>>2]|0;
          $991 = ((($954)) + 16|0);
          $992 = HEAP32[$991>>2]|0;
          $993 = ($990>>>0)>($992>>>0);
          $$115 = $993 ? $992 : $990;
          $994 = ($$115|0)==(0);
          if (!($994)) {
           $995 = ((($954)) + 12|0);
           $996 = HEAP32[$995>>2]|0;
           $997 = ((($956)) + 16|0);
           $998 = HEAP32[$997>>2]|0;
           _memcpy(($996|0),($998|0),($$115|0))|0;
           $999 = HEAP32[$995>>2]|0;
           $1000 = (($999) + ($$115)|0);
           HEAP32[$995>>2] = $1000;
           $1001 = HEAP32[$997>>2]|0;
           $1002 = (($1001) + ($$115)|0);
           HEAP32[$997>>2] = $1002;
           $1003 = ((($954)) + 20|0);
           $1004 = HEAP32[$1003>>2]|0;
           $1005 = (($1004) + ($$115))|0;
           HEAP32[$1003>>2] = $1005;
           $1006 = HEAP32[$991>>2]|0;
           $1007 = (($1006) - ($$115))|0;
           HEAP32[$991>>2] = $1007;
           $1008 = HEAP32[$$pre$phi74Z2D>>2]|0;
           $1009 = (($1008) - ($$115))|0;
           HEAP32[$$pre$phi74Z2D>>2] = $1009;
           $1010 = ($1008|0)==($$115|0);
           if ($1010) {
            $1011 = ((($956)) + 8|0);
            $1012 = HEAP32[$1011>>2]|0;
            HEAP32[$997>>2] = $1012;
           }
          }
          $1013 = HEAP32[$2>>2]|0;
          $1014 = ((($1013)) + 16|0);
          $1015 = HEAP32[$1014>>2]|0;
          $1016 = ($1015|0)==(0);
          if ($1016) {
           label = 244;
          }
         }
        }
        break;
       }
       case 3:  {
        $1017 = ((($2)) + 116|0);
        $1018 = ((($2)) + 96|0);
        $1019 = ((($2)) + 108|0);
        $1020 = ((($2)) + 56|0);
        $1021 = ((($2)) + 5792|0);
        $1022 = ((($2)) + 5796|0);
        $1023 = ((($2)) + 5784|0);
        $1024 = ((($2)) + 2440|0);
        $1025 = ((($2)) + 5788|0);
        $1026 = ((($2)) + 92|0);
        while(1) {
         $1027 = HEAP32[$1017>>2]|0;
         $1028 = ($1027>>>0)<(259);
         if ($1028) {
          _fill_window($2);
          $1029 = HEAP32[$1017>>2]|0;
          $$not = ($1029>>>0)>(258);
          $$not116 = ($flush|0)!=(0);
          $brmerge = $$not | $$not116;
          if (!($brmerge)) {
           label = 244;
           break L209;
          }
          $1030 = ($1029|0)==(0);
          if ($1030) {
           break;
          } else {
           $1034 = $1029;
          }
          HEAP32[$1018>>2] = 0;
          $1033 = ($1034>>>0)>(2);
          if ($1033) {
           $1081 = $1034;
           label = 188;
          } else {
           label = 203;
          }
         } else {
          HEAP32[$1018>>2] = 0;
          $1081 = $1027;
          label = 188;
         }
         if ((label|0) == 188) {
          label = 0;
          $1035 = HEAP32[$1019>>2]|0;
          $1036 = ($1035|0)==(0);
          if ($1036) {
           label = 203;
          } else {
           $1037 = HEAP32[$1020>>2]|0;
           $1038 = (($1037) + ($1035)|0);
           $1039 = ((($1038)) + -1|0);
           $1040 = HEAP8[$1039>>0]|0;
           $1041 = ((($1039)) + 1|0);
           $1042 = HEAP8[$1041>>0]|0;
           $1043 = ($1040<<24>>24)==($1042<<24>>24);
           if ($1043) {
            $1044 = ((($1041)) + 1|0);
            $1045 = HEAP8[$1044>>0]|0;
            $1046 = ($1040<<24>>24)==($1045<<24>>24);
            if ($1046) {
             $1047 = ((($1044)) + 1|0);
             $1048 = HEAP8[$1047>>0]|0;
             $1049 = ($1040<<24>>24)==($1048<<24>>24);
             if ($1049) {
              $1050 = ((($1038)) + 258|0);
              $scan$0$i = $1047;
              while(1) {
               $1051 = ((($scan$0$i)) + 1|0);
               $1052 = HEAP8[$1051>>0]|0;
               $1053 = ($1040<<24>>24)==($1052<<24>>24);
               if (!($1053)) {
                $scan$1$i33 = $1051;
                break;
               }
               $1054 = ((($scan$0$i)) + 2|0);
               $1055 = HEAP8[$1054>>0]|0;
               $1056 = ($1040<<24>>24)==($1055<<24>>24);
               if (!($1056)) {
                $scan$1$i33 = $1054;
                break;
               }
               $1057 = ((($scan$0$i)) + 3|0);
               $1058 = HEAP8[$1057>>0]|0;
               $1059 = ($1040<<24>>24)==($1058<<24>>24);
               if (!($1059)) {
                $scan$1$i33 = $1057;
                break;
               }
               $1060 = ((($scan$0$i)) + 4|0);
               $1061 = HEAP8[$1060>>0]|0;
               $1062 = ($1040<<24>>24)==($1061<<24>>24);
               if (!($1062)) {
                $scan$1$i33 = $1060;
                break;
               }
               $1063 = ((($scan$0$i)) + 5|0);
               $1064 = HEAP8[$1063>>0]|0;
               $1065 = ($1040<<24>>24)==($1064<<24>>24);
               if (!($1065)) {
                $scan$1$i33 = $1063;
                break;
               }
               $1066 = ((($scan$0$i)) + 6|0);
               $1067 = HEAP8[$1066>>0]|0;
               $1068 = ($1040<<24>>24)==($1067<<24>>24);
               if (!($1068)) {
                $scan$1$i33 = $1066;
                break;
               }
               $1069 = ((($scan$0$i)) + 7|0);
               $1070 = HEAP8[$1069>>0]|0;
               $1071 = ($1040<<24>>24)==($1070<<24>>24);
               if (!($1071)) {
                $scan$1$i33 = $1069;
                break;
               }
               $1072 = ((($scan$0$i)) + 8|0);
               $1073 = HEAP8[$1072>>0]|0;
               $1074 = ($1040<<24>>24)==($1073<<24>>24);
               $1075 = ($1072>>>0)<($1050>>>0);
               $or$cond = $1074 & $1075;
               if ($or$cond) {
                $scan$0$i = $1072;
               } else {
                $scan$1$i33 = $1072;
                break;
               }
              }
              $1076 = $1050;
              $1077 = $scan$1$i33;
              $1078 = (($1077) - ($1076))|0;
              $1079 = (($1078) + 258)|0;
              $1080 = ($1079>>>0)>($1081>>>0);
              $$117 = $1080 ? $1081 : $1079;
              HEAP32[$1018>>2] = $$117;
              $$118 = $1080 ? $1081 : $1079;
              $1082 = ($$118>>>0)>(2);
              if ($1082) {
               $1083 = (($$118) + 253)|0;
               $1084 = $1083&255;
               $1085 = HEAP32[$1021>>2]|0;
               $1086 = HEAP32[$1022>>2]|0;
               $1087 = (($1086) + ($1085<<1)|0);
               HEAP16[$1087>>1] = 1;
               $1088 = HEAP32[$1021>>2]|0;
               $1089 = (($1088) + 1)|0;
               HEAP32[$1021>>2] = $1089;
               $1090 = HEAP32[$1023>>2]|0;
               $1091 = (($1090) + ($1088)|0);
               HEAP8[$1091>>0] = $1084;
               $1092 = $1083 & 255;
               $1093 = (23679 + ($1092)|0);
               $1094 = HEAP8[$1093>>0]|0;
               $1095 = $1094&255;
               $1096 = $1095 | 256;
               $1097 = (($1096) + 1)|0;
               $1098 = (((($2)) + 148|0) + ($1097<<2)|0);
               $1099 = HEAP16[$1098>>1]|0;
               $1100 = (($1099) + 1)<<16>>16;
               HEAP16[$1098>>1] = $1100;
               $1101 = HEAP16[$1024>>1]|0;
               $1102 = (($1101) + 1)<<16>>16;
               HEAP16[$1024>>1] = $1102;
               $1103 = HEAP32[$1021>>2]|0;
               $1104 = HEAP32[$1025>>2]|0;
               $1105 = (($1104) + -1)|0;
               $1106 = ($1103|0)==($1105|0);
               $1107 = $1106&1;
               $1108 = HEAP32[$1018>>2]|0;
               $1109 = HEAP32[$1017>>2]|0;
               $1110 = (($1109) - ($1108))|0;
               HEAP32[$1017>>2] = $1110;
               $1111 = HEAP32[$1019>>2]|0;
               $1112 = (($1111) + ($1108))|0;
               HEAP32[$1019>>2] = $1112;
               HEAP32[$1018>>2] = 0;
               $1143 = $1112;$bflush$0$i = $1107;
              } else {
               label = 203;
              }
             } else {
              label = 203;
             }
            } else {
             label = 203;
            }
           } else {
            label = 203;
           }
          }
         }
         if ((label|0) == 203) {
          label = 0;
          $1113 = HEAP32[$1019>>2]|0;
          $1114 = HEAP32[$1020>>2]|0;
          $1115 = (($1114) + ($1113)|0);
          $1116 = HEAP8[$1115>>0]|0;
          $1117 = HEAP32[$1021>>2]|0;
          $1118 = HEAP32[$1022>>2]|0;
          $1119 = (($1118) + ($1117<<1)|0);
          HEAP16[$1119>>1] = 0;
          $1120 = HEAP32[$1021>>2]|0;
          $1121 = (($1120) + 1)|0;
          HEAP32[$1021>>2] = $1121;
          $1122 = HEAP32[$1023>>2]|0;
          $1123 = (($1122) + ($1120)|0);
          HEAP8[$1123>>0] = $1116;
          $1124 = $1116&255;
          $1125 = (((($2)) + 148|0) + ($1124<<2)|0);
          $1126 = HEAP16[$1125>>1]|0;
          $1127 = (($1126) + 1)<<16>>16;
          HEAP16[$1125>>1] = $1127;
          $1128 = HEAP32[$1021>>2]|0;
          $1129 = HEAP32[$1025>>2]|0;
          $1130 = (($1129) + -1)|0;
          $1131 = ($1128|0)==($1130|0);
          $1132 = $1131&1;
          $1133 = HEAP32[$1017>>2]|0;
          $1134 = (($1133) + -1)|0;
          HEAP32[$1017>>2] = $1134;
          $1135 = HEAP32[$1019>>2]|0;
          $1136 = (($1135) + 1)|0;
          HEAP32[$1019>>2] = $1136;
          $1143 = $1136;$bflush$0$i = $1132;
         }
         $1137 = ($bflush$0$i|0)==(0);
         if ($1137) {
          continue;
         }
         $1138 = HEAP32[$1026>>2]|0;
         $1139 = ($1138|0)>(-1);
         if ($1139) {
          $1140 = HEAP32[$1020>>2]|0;
          $1141 = (($1140) + ($1138)|0);
          $1144 = $1141;
         } else {
          $1144 = 0;
         }
         $1142 = (($1143) - ($1138))|0;
         __tr_flush_block($2,$1144,$1142,0);
         $1145 = HEAP32[$1019>>2]|0;
         HEAP32[$1026>>2] = $1145;
         $1146 = HEAP32[$2>>2]|0;
         $1147 = ((($1146)) + 28|0);
         $1148 = HEAP32[$1147>>2]|0;
         $1149 = ((($1148)) + 5820|0);
         $1150 = HEAP32[$1149>>2]|0;
         $1151 = ($1150|0)==(16);
         do {
          if ($1151) {
           $1152 = ((($1148)) + 5816|0);
           $1153 = HEAP16[$1152>>1]|0;
           $1154 = $1153&255;
           $1155 = ((($1148)) + 20|0);
           $1156 = HEAP32[$1155>>2]|0;
           $1157 = (($1156) + 1)|0;
           HEAP32[$1155>>2] = $1157;
           $1158 = ((($1148)) + 8|0);
           $1159 = HEAP32[$1158>>2]|0;
           $1160 = (($1159) + ($1156)|0);
           HEAP8[$1160>>0] = $1154;
           $1161 = HEAP16[$1152>>1]|0;
           $1162 = ($1161&65535) >>> 8;
           $1163 = $1162&255;
           $1164 = HEAP32[$1155>>2]|0;
           $1165 = (($1164) + 1)|0;
           HEAP32[$1155>>2] = $1165;
           $1166 = HEAP32[$1158>>2]|0;
           $1167 = (($1166) + ($1164)|0);
           HEAP8[$1167>>0] = $1163;
           HEAP16[$1152>>1] = 0;
           HEAP32[$1149>>2] = 0;
           $$pre$phi82Z2D = $1155;
          } else {
           $1168 = ($1150|0)>(7);
           if ($1168) {
            $1169 = ((($1148)) + 5816|0);
            $1170 = HEAP16[$1169>>1]|0;
            $1171 = $1170&255;
            $1172 = ((($1148)) + 20|0);
            $1173 = HEAP32[$1172>>2]|0;
            $1174 = (($1173) + 1)|0;
            HEAP32[$1172>>2] = $1174;
            $1175 = ((($1148)) + 8|0);
            $1176 = HEAP32[$1175>>2]|0;
            $1177 = (($1176) + ($1173)|0);
            HEAP8[$1177>>0] = $1171;
            $1178 = HEAP16[$1169>>1]|0;
            $1179 = ($1178&65535) >>> 8;
            HEAP16[$1169>>1] = $1179;
            $1180 = HEAP32[$1149>>2]|0;
            $1181 = (($1180) + -8)|0;
            HEAP32[$1149>>2] = $1181;
            $$pre$phi82Z2D = $1172;
            break;
           } else {
            $$pre81 = ((($1148)) + 20|0);
            $$pre$phi82Z2D = $$pre81;
            break;
           }
          }
         } while(0);
         $1182 = HEAP32[$$pre$phi82Z2D>>2]|0;
         $1183 = ((($1146)) + 16|0);
         $1184 = HEAP32[$1183>>2]|0;
         $1185 = ($1182>>>0)>($1184>>>0);
         $$119 = $1185 ? $1184 : $1182;
         $1186 = ($$119|0)==(0);
         if (!($1186)) {
          $1187 = ((($1146)) + 12|0);
          $1188 = HEAP32[$1187>>2]|0;
          $1189 = ((($1148)) + 16|0);
          $1190 = HEAP32[$1189>>2]|0;
          _memcpy(($1188|0),($1190|0),($$119|0))|0;
          $1191 = HEAP32[$1187>>2]|0;
          $1192 = (($1191) + ($$119)|0);
          HEAP32[$1187>>2] = $1192;
          $1193 = HEAP32[$1189>>2]|0;
          $1194 = (($1193) + ($$119)|0);
          HEAP32[$1189>>2] = $1194;
          $1195 = ((($1146)) + 20|0);
          $1196 = HEAP32[$1195>>2]|0;
          $1197 = (($1196) + ($$119))|0;
          HEAP32[$1195>>2] = $1197;
          $1198 = HEAP32[$1183>>2]|0;
          $1199 = (($1198) - ($$119))|0;
          HEAP32[$1183>>2] = $1199;
          $1200 = HEAP32[$$pre$phi82Z2D>>2]|0;
          $1201 = (($1200) - ($$119))|0;
          HEAP32[$$pre$phi82Z2D>>2] = $1201;
          $1202 = ($1200|0)==($$119|0);
          if ($1202) {
           $1203 = ((($1148)) + 8|0);
           $1204 = HEAP32[$1203>>2]|0;
           HEAP32[$1189>>2] = $1204;
          }
         }
         $1205 = HEAP32[$2>>2]|0;
         $1206 = ((($1205)) + 16|0);
         $1207 = HEAP32[$1206>>2]|0;
         $1208 = ($1207|0)==(0);
         if ($1208) {
          label = 244;
          break L209;
         }
        }
        $1031 = ((($2)) + 5812|0);
        HEAP32[$1031>>2] = 0;
        $1032 = ($flush|0)==(4);
        if ($1032) {
         $1209 = HEAP32[$1026>>2]|0;
         $1210 = ($1209|0)>(-1);
         if ($1210) {
          $1211 = HEAP32[$1020>>2]|0;
          $1212 = (($1211) + ($1209)|0);
          $1215 = $1212;
         } else {
          $1215 = 0;
         }
         $1213 = HEAP32[$1019>>2]|0;
         $1214 = (($1213) - ($1209))|0;
         __tr_flush_block($2,$1215,$1214,1);
         $1216 = HEAP32[$1019>>2]|0;
         HEAP32[$1026>>2] = $1216;
         $1217 = HEAP32[$2>>2]|0;
         $1218 = ((($1217)) + 28|0);
         $1219 = HEAP32[$1218>>2]|0;
         $1220 = ((($1219)) + 5820|0);
         $1221 = HEAP32[$1220>>2]|0;
         $1222 = ($1221|0)==(16);
         do {
          if ($1222) {
           $1223 = ((($1219)) + 5816|0);
           $1224 = HEAP16[$1223>>1]|0;
           $1225 = $1224&255;
           $1226 = ((($1219)) + 20|0);
           $1227 = HEAP32[$1226>>2]|0;
           $1228 = (($1227) + 1)|0;
           HEAP32[$1226>>2] = $1228;
           $1229 = ((($1219)) + 8|0);
           $1230 = HEAP32[$1229>>2]|0;
           $1231 = (($1230) + ($1227)|0);
           HEAP8[$1231>>0] = $1225;
           $1232 = HEAP16[$1223>>1]|0;
           $1233 = ($1232&65535) >>> 8;
           $1234 = $1233&255;
           $1235 = HEAP32[$1226>>2]|0;
           $1236 = (($1235) + 1)|0;
           HEAP32[$1226>>2] = $1236;
           $1237 = HEAP32[$1229>>2]|0;
           $1238 = (($1237) + ($1235)|0);
           HEAP8[$1238>>0] = $1234;
           HEAP16[$1223>>1] = 0;
           HEAP32[$1220>>2] = 0;
           $$pre$phi78Z2D = $1226;
          } else {
           $1239 = ($1221|0)>(7);
           if ($1239) {
            $1240 = ((($1219)) + 5816|0);
            $1241 = HEAP16[$1240>>1]|0;
            $1242 = $1241&255;
            $1243 = ((($1219)) + 20|0);
            $1244 = HEAP32[$1243>>2]|0;
            $1245 = (($1244) + 1)|0;
            HEAP32[$1243>>2] = $1245;
            $1246 = ((($1219)) + 8|0);
            $1247 = HEAP32[$1246>>2]|0;
            $1248 = (($1247) + ($1244)|0);
            HEAP8[$1248>>0] = $1242;
            $1249 = HEAP16[$1240>>1]|0;
            $1250 = ($1249&65535) >>> 8;
            HEAP16[$1240>>1] = $1250;
            $1251 = HEAP32[$1220>>2]|0;
            $1252 = (($1251) + -8)|0;
            HEAP32[$1220>>2] = $1252;
            $$pre$phi78Z2D = $1243;
            break;
           } else {
            $$pre77 = ((($1219)) + 20|0);
            $$pre$phi78Z2D = $$pre77;
            break;
           }
          }
         } while(0);
         $1253 = HEAP32[$$pre$phi78Z2D>>2]|0;
         $1254 = ((($1217)) + 16|0);
         $1255 = HEAP32[$1254>>2]|0;
         $1256 = ($1253>>>0)>($1255>>>0);
         $$120 = $1256 ? $1255 : $1253;
         $1257 = ($$120|0)==(0);
         if (!($1257)) {
          $1258 = ((($1217)) + 12|0);
          $1259 = HEAP32[$1258>>2]|0;
          $1260 = ((($1219)) + 16|0);
          $1261 = HEAP32[$1260>>2]|0;
          _memcpy(($1259|0),($1261|0),($$120|0))|0;
          $1262 = HEAP32[$1258>>2]|0;
          $1263 = (($1262) + ($$120)|0);
          HEAP32[$1258>>2] = $1263;
          $1264 = HEAP32[$1260>>2]|0;
          $1265 = (($1264) + ($$120)|0);
          HEAP32[$1260>>2] = $1265;
          $1266 = ((($1217)) + 20|0);
          $1267 = HEAP32[$1266>>2]|0;
          $1268 = (($1267) + ($$120))|0;
          HEAP32[$1266>>2] = $1268;
          $1269 = HEAP32[$1254>>2]|0;
          $1270 = (($1269) - ($$120))|0;
          HEAP32[$1254>>2] = $1270;
          $1271 = HEAP32[$$pre$phi78Z2D>>2]|0;
          $1272 = (($1271) - ($$120))|0;
          HEAP32[$$pre$phi78Z2D>>2] = $1272;
          $1273 = ($1271|0)==($$120|0);
          if ($1273) {
           $1274 = ((($1219)) + 8|0);
           $1275 = HEAP32[$1274>>2]|0;
           HEAP32[$1260>>2] = $1275;
          }
         }
         $1276 = HEAP32[$2>>2]|0;
         $1277 = ((($1276)) + 16|0);
         $1278 = HEAP32[$1277>>2]|0;
         $1279 = ($1278|0)==(0);
         if ($1279) {
          $1583 = 2;
          label = 242;
          break L209;
         } else {
          label = 240;
          break L209;
         }
        }
        $1280 = HEAP32[$1021>>2]|0;
        $1281 = ($1280|0)==(0);
        if (!($1281)) {
         $1282 = HEAP32[$1026>>2]|0;
         $1283 = ($1282|0)>(-1);
         if ($1283) {
          $1284 = HEAP32[$1020>>2]|0;
          $1285 = (($1284) + ($1282)|0);
          $1288 = $1285;
         } else {
          $1288 = 0;
         }
         $1286 = HEAP32[$1019>>2]|0;
         $1287 = (($1286) - ($1282))|0;
         __tr_flush_block($2,$1288,$1287,0);
         $1289 = HEAP32[$1019>>2]|0;
         HEAP32[$1026>>2] = $1289;
         $1290 = HEAP32[$2>>2]|0;
         $1291 = ((($1290)) + 28|0);
         $1292 = HEAP32[$1291>>2]|0;
         $1293 = ((($1292)) + 5820|0);
         $1294 = HEAP32[$1293>>2]|0;
         $1295 = ($1294|0)==(16);
         do {
          if ($1295) {
           $1296 = ((($1292)) + 5816|0);
           $1297 = HEAP16[$1296>>1]|0;
           $1298 = $1297&255;
           $1299 = ((($1292)) + 20|0);
           $1300 = HEAP32[$1299>>2]|0;
           $1301 = (($1300) + 1)|0;
           HEAP32[$1299>>2] = $1301;
           $1302 = ((($1292)) + 8|0);
           $1303 = HEAP32[$1302>>2]|0;
           $1304 = (($1303) + ($1300)|0);
           HEAP8[$1304>>0] = $1298;
           $1305 = HEAP16[$1296>>1]|0;
           $1306 = ($1305&65535) >>> 8;
           $1307 = $1306&255;
           $1308 = HEAP32[$1299>>2]|0;
           $1309 = (($1308) + 1)|0;
           HEAP32[$1299>>2] = $1309;
           $1310 = HEAP32[$1302>>2]|0;
           $1311 = (($1310) + ($1308)|0);
           HEAP8[$1311>>0] = $1307;
           HEAP16[$1296>>1] = 0;
           HEAP32[$1293>>2] = 0;
           $$pre$phi80Z2D = $1299;
          } else {
           $1312 = ($1294|0)>(7);
           if ($1312) {
            $1313 = ((($1292)) + 5816|0);
            $1314 = HEAP16[$1313>>1]|0;
            $1315 = $1314&255;
            $1316 = ((($1292)) + 20|0);
            $1317 = HEAP32[$1316>>2]|0;
            $1318 = (($1317) + 1)|0;
            HEAP32[$1316>>2] = $1318;
            $1319 = ((($1292)) + 8|0);
            $1320 = HEAP32[$1319>>2]|0;
            $1321 = (($1320) + ($1317)|0);
            HEAP8[$1321>>0] = $1315;
            $1322 = HEAP16[$1313>>1]|0;
            $1323 = ($1322&65535) >>> 8;
            HEAP16[$1313>>1] = $1323;
            $1324 = HEAP32[$1293>>2]|0;
            $1325 = (($1324) + -8)|0;
            HEAP32[$1293>>2] = $1325;
            $$pre$phi80Z2D = $1316;
            break;
           } else {
            $$pre79 = ((($1292)) + 20|0);
            $$pre$phi80Z2D = $$pre79;
            break;
           }
          }
         } while(0);
         $1326 = HEAP32[$$pre$phi80Z2D>>2]|0;
         $1327 = ((($1290)) + 16|0);
         $1328 = HEAP32[$1327>>2]|0;
         $1329 = ($1326>>>0)>($1328>>>0);
         $$121 = $1329 ? $1328 : $1326;
         $1330 = ($$121|0)==(0);
         if (!($1330)) {
          $1331 = ((($1290)) + 12|0);
          $1332 = HEAP32[$1331>>2]|0;
          $1333 = ((($1292)) + 16|0);
          $1334 = HEAP32[$1333>>2]|0;
          _memcpy(($1332|0),($1334|0),($$121|0))|0;
          $1335 = HEAP32[$1331>>2]|0;
          $1336 = (($1335) + ($$121)|0);
          HEAP32[$1331>>2] = $1336;
          $1337 = HEAP32[$1333>>2]|0;
          $1338 = (($1337) + ($$121)|0);
          HEAP32[$1333>>2] = $1338;
          $1339 = ((($1290)) + 20|0);
          $1340 = HEAP32[$1339>>2]|0;
          $1341 = (($1340) + ($$121))|0;
          HEAP32[$1339>>2] = $1341;
          $1342 = HEAP32[$1327>>2]|0;
          $1343 = (($1342) - ($$121))|0;
          HEAP32[$1327>>2] = $1343;
          $1344 = HEAP32[$$pre$phi80Z2D>>2]|0;
          $1345 = (($1344) - ($$121))|0;
          HEAP32[$$pre$phi80Z2D>>2] = $1345;
          $1346 = ($1344|0)==($$121|0);
          if ($1346) {
           $1347 = ((($1292)) + 8|0);
           $1348 = HEAP32[$1347>>2]|0;
           HEAP32[$1333>>2] = $1348;
          }
         }
         $1349 = HEAP32[$2>>2]|0;
         $1350 = ((($1349)) + 16|0);
         $1351 = HEAP32[$1350>>2]|0;
         $1352 = ($1351|0)==(0);
         if ($1352) {
          label = 244;
         }
        }
        break;
       }
       default: {
        $1353 = ((($2)) + 132|0);
        $1354 = HEAP32[$1353>>2]|0;
        $1355 = (((8840 + (($1354*12)|0)|0)) + 8|0);
        $1356 = HEAP32[$1355>>2]|0;
        $1357 = (FUNCTION_TABLE_iii[$1356 & 127]($2,$flush)|0);
        $1358 = ($1357|0)==(2);
        if ($1358) {
         $1583 = 2;
         label = 242;
        } else {
         switch ($1357|0) {
         case 3:  {
          $1583 = 3;
          label = 242;
          break;
         }
         case 0:  {
          label = 244;
          break;
         }
         default: {
          $1359 = $1357;
          label = 243;
         }
         }
        }
       }
       }
      } while(0);
      if ((label|0) == 240) {
       $1583 = 3;
       label = 242;
      }
      if ((label|0) == 242) {
       HEAP32[$14>>2] = 666;
       $1359 = $1583;
       label = 243;
      }
      if ((label|0) == 243) {
       switch ($1359|0) {
       case 2:  {
        label = 244;
        break;
       }
       case 1:  {
        break;
       }
       default: {
        break L207;
       }
       }
      }
      if ((label|0) == 244) {
       $1360 = HEAP32[$19>>2]|0;
       $1361 = ($1360|0)==(0);
       if (!($1361)) {
        $$0 = 0;
        return ($$0|0);
       }
       HEAP32[$23>>2] = -1;
       $$0 = 0;
       return ($$0|0);
      }
      switch ($flush|0) {
      case 1:  {
       __tr_align($2);
       break;
      }
      case 5:  {
       break;
      }
      default: {
       __tr_stored_block($2,0,0,0);
       $1362 = ($flush|0)==(3);
       if ($1362) {
        $1363 = ((($2)) + 76|0);
        $1364 = HEAP32[$1363>>2]|0;
        $1365 = (($1364) + -1)|0;
        $1366 = ((($2)) + 68|0);
        $1367 = HEAP32[$1366>>2]|0;
        $1368 = (($1367) + ($1365<<1)|0);
        HEAP16[$1368>>1] = 0;
        $1369 = HEAP32[$1366>>2]|0;
        $1370 = HEAP32[$1363>>2]|0;
        $1371 = $1370 << 1;
        $1372 = (($1371) + -2)|0;
        _memset(($1369|0),0,($1372|0))|0;
        $1373 = ((($2)) + 116|0);
        $1374 = HEAP32[$1373>>2]|0;
        $1375 = ($1374|0)==(0);
        if ($1375) {
         $1376 = ((($2)) + 108|0);
         HEAP32[$1376>>2] = 0;
         $1377 = ((($2)) + 92|0);
         HEAP32[$1377>>2] = 0;
         $1378 = ((($2)) + 5812|0);
         HEAP32[$1378>>2] = 0;
        }
       }
      }
      }
      $1379 = HEAP32[$1>>2]|0;
      $1380 = ((($1379)) + 5820|0);
      $1381 = HEAP32[$1380>>2]|0;
      $1382 = ($1381|0)==(16);
      do {
       if ($1382) {
        $1383 = ((($1379)) + 5816|0);
        $1384 = HEAP16[$1383>>1]|0;
        $1385 = $1384&255;
        $1386 = ((($1379)) + 20|0);
        $1387 = HEAP32[$1386>>2]|0;
        $1388 = (($1387) + 1)|0;
        HEAP32[$1386>>2] = $1388;
        $1389 = ((($1379)) + 8|0);
        $1390 = HEAP32[$1389>>2]|0;
        $1391 = (($1390) + ($1387)|0);
        HEAP8[$1391>>0] = $1385;
        $1392 = HEAP16[$1383>>1]|0;
        $1393 = ($1392&65535) >>> 8;
        $1394 = $1393&255;
        $1395 = HEAP32[$1386>>2]|0;
        $1396 = (($1395) + 1)|0;
        HEAP32[$1386>>2] = $1396;
        $1397 = HEAP32[$1389>>2]|0;
        $1398 = (($1397) + ($1395)|0);
        HEAP8[$1398>>0] = $1394;
        HEAP16[$1383>>1] = 0;
        HEAP32[$1380>>2] = 0;
        $$pre$phi72Z2D = $1386;
       } else {
        $1399 = ($1381|0)>(7);
        if ($1399) {
         $1400 = ((($1379)) + 5816|0);
         $1401 = HEAP16[$1400>>1]|0;
         $1402 = $1401&255;
         $1403 = ((($1379)) + 20|0);
         $1404 = HEAP32[$1403>>2]|0;
         $1405 = (($1404) + 1)|0;
         HEAP32[$1403>>2] = $1405;
         $1406 = ((($1379)) + 8|0);
         $1407 = HEAP32[$1406>>2]|0;
         $1408 = (($1407) + ($1404)|0);
         HEAP8[$1408>>0] = $1402;
         $1409 = HEAP16[$1400>>1]|0;
         $1410 = ($1409&65535) >>> 8;
         HEAP16[$1400>>1] = $1410;
         $1411 = HEAP32[$1380>>2]|0;
         $1412 = (($1411) + -8)|0;
         HEAP32[$1380>>2] = $1412;
         $$pre$phi72Z2D = $1403;
         break;
        } else {
         $$pre71 = ((($1379)) + 20|0);
         $$pre$phi72Z2D = $$pre71;
         break;
        }
       }
      } while(0);
      $1413 = HEAP32[$$pre$phi72Z2D>>2]|0;
      $1414 = HEAP32[$19>>2]|0;
      $1415 = ($1413>>>0)>($1414>>>0);
      $$122 = $1415 ? $1414 : $1413;
      $1416 = ($$122|0)==(0);
      if ($1416) {
       $1435 = $1414;
      } else {
       $1417 = HEAP32[$6>>2]|0;
       $1418 = ((($1379)) + 16|0);
       $1419 = HEAP32[$1418>>2]|0;
       _memcpy(($1417|0),($1419|0),($$122|0))|0;
       $1420 = HEAP32[$6>>2]|0;
       $1421 = (($1420) + ($$122)|0);
       HEAP32[$6>>2] = $1421;
       $1422 = HEAP32[$1418>>2]|0;
       $1423 = (($1422) + ($$122)|0);
       HEAP32[$1418>>2] = $1423;
       $1424 = ((($strm)) + 20|0);
       $1425 = HEAP32[$1424>>2]|0;
       $1426 = (($1425) + ($$122))|0;
       HEAP32[$1424>>2] = $1426;
       $1427 = HEAP32[$19>>2]|0;
       $1428 = (($1427) - ($$122))|0;
       HEAP32[$19>>2] = $1428;
       $1429 = HEAP32[$$pre$phi72Z2D>>2]|0;
       $1430 = (($1429) - ($$122))|0;
       HEAP32[$$pre$phi72Z2D>>2] = $1430;
       $1431 = ($1429|0)==($$122|0);
       if ($1431) {
        $1432 = ((($1379)) + 8|0);
        $1433 = HEAP32[$1432>>2]|0;
        HEAP32[$1418>>2] = $1433;
       }
       $$pr139 = HEAP32[$19>>2]|0;
       $1435 = $$pr139;
      }
      $1434 = ($1435|0)==(0);
      if ($1434) {
       HEAP32[$23>>2] = -1;
       $$0 = 0;
       return ($$0|0);
      }
     }
    } while(0);
    $1436 = ($flush|0)==(4);
    if (!($1436)) {
     $$0 = 0;
     return ($$0|0);
    }
    $1437 = ((($2)) + 24|0);
    $1438 = HEAP32[$1437>>2]|0;
    $1439 = ($1438|0)<(1);
    if ($1439) {
     $$0 = 1;
     return ($$0|0);
    }
    $1440 = ($1438|0)==(2);
    $1441 = ((($strm)) + 48|0);
    $1442 = HEAP32[$1441>>2]|0;
    if ($1440) {
     $1443 = $1442&255;
     $1444 = HEAP32[$676>>2]|0;
     $1445 = (($1444) + 1)|0;
     HEAP32[$676>>2] = $1445;
     $1446 = ((($2)) + 8|0);
     $1447 = HEAP32[$1446>>2]|0;
     $1448 = (($1447) + ($1444)|0);
     HEAP8[$1448>>0] = $1443;
     $1449 = HEAP32[$1441>>2]|0;
     $1450 = $1449 >>> 8;
     $1451 = $1450&255;
     $1452 = HEAP32[$676>>2]|0;
     $1453 = (($1452) + 1)|0;
     HEAP32[$676>>2] = $1453;
     $1454 = HEAP32[$1446>>2]|0;
     $1455 = (($1454) + ($1452)|0);
     HEAP8[$1455>>0] = $1451;
     $1456 = HEAP32[$1441>>2]|0;
     $1457 = $1456 >>> 16;
     $1458 = $1457&255;
     $1459 = HEAP32[$676>>2]|0;
     $1460 = (($1459) + 1)|0;
     HEAP32[$676>>2] = $1460;
     $1461 = HEAP32[$1446>>2]|0;
     $1462 = (($1461) + ($1459)|0);
     HEAP8[$1462>>0] = $1458;
     $1463 = HEAP32[$1441>>2]|0;
     $1464 = $1463 >>> 24;
     $1465 = $1464&255;
     $1466 = HEAP32[$676>>2]|0;
     $1467 = (($1466) + 1)|0;
     HEAP32[$676>>2] = $1467;
     $1468 = HEAP32[$1446>>2]|0;
     $1469 = (($1468) + ($1466)|0);
     HEAP8[$1469>>0] = $1465;
     $1470 = ((($strm)) + 8|0);
     $1471 = HEAP32[$1470>>2]|0;
     $1472 = $1471&255;
     $1473 = HEAP32[$676>>2]|0;
     $1474 = (($1473) + 1)|0;
     HEAP32[$676>>2] = $1474;
     $1475 = HEAP32[$1446>>2]|0;
     $1476 = (($1475) + ($1473)|0);
     HEAP8[$1476>>0] = $1472;
     $1477 = HEAP32[$1470>>2]|0;
     $1478 = $1477 >>> 8;
     $1479 = $1478&255;
     $1480 = HEAP32[$676>>2]|0;
     $1481 = (($1480) + 1)|0;
     HEAP32[$676>>2] = $1481;
     $1482 = HEAP32[$1446>>2]|0;
     $1483 = (($1482) + ($1480)|0);
     HEAP8[$1483>>0] = $1479;
     $1484 = HEAP32[$1470>>2]|0;
     $1485 = $1484 >>> 16;
     $1486 = $1485&255;
     $1487 = HEAP32[$676>>2]|0;
     $1488 = (($1487) + 1)|0;
     HEAP32[$676>>2] = $1488;
     $1489 = HEAP32[$1446>>2]|0;
     $1490 = (($1489) + ($1487)|0);
     HEAP8[$1490>>0] = $1486;
     $1491 = HEAP32[$1470>>2]|0;
     $1492 = $1491 >>> 24;
     $1493 = $1492&255;
     $1494 = HEAP32[$676>>2]|0;
     $1495 = (($1494) + 1)|0;
     HEAP32[$676>>2] = $1495;
     $1496 = HEAP32[$1446>>2]|0;
     $1497 = (($1496) + ($1494)|0);
     HEAP8[$1497>>0] = $1493;
    } else {
     $1498 = $1442 >>> 16;
     $1499 = $1442 >>> 24;
     $1500 = $1499&255;
     $1501 = HEAP32[$676>>2]|0;
     $1502 = (($1501) + 1)|0;
     HEAP32[$676>>2] = $1502;
     $1503 = ((($2)) + 8|0);
     $1504 = HEAP32[$1503>>2]|0;
     $1505 = (($1504) + ($1501)|0);
     HEAP8[$1505>>0] = $1500;
     $1506 = $1498&255;
     $1507 = HEAP32[$676>>2]|0;
     $1508 = (($1507) + 1)|0;
     HEAP32[$676>>2] = $1508;
     $1509 = HEAP32[$1503>>2]|0;
     $1510 = (($1509) + ($1507)|0);
     HEAP8[$1510>>0] = $1506;
     $1511 = HEAP32[$1441>>2]|0;
     $1512 = $1511 >>> 8;
     $1513 = $1512&255;
     $1514 = HEAP32[$676>>2]|0;
     $1515 = (($1514) + 1)|0;
     HEAP32[$676>>2] = $1515;
     $1516 = HEAP32[$1503>>2]|0;
     $1517 = (($1516) + ($1514)|0);
     HEAP8[$1517>>0] = $1513;
     $1518 = $1511&255;
     $1519 = HEAP32[$676>>2]|0;
     $1520 = (($1519) + 1)|0;
     HEAP32[$676>>2] = $1520;
     $1521 = HEAP32[$1503>>2]|0;
     $1522 = (($1521) + ($1519)|0);
     HEAP8[$1522>>0] = $1518;
    }
    $1523 = HEAP32[$1>>2]|0;
    $1524 = ((($1523)) + 5820|0);
    $1525 = HEAP32[$1524>>2]|0;
    $1526 = ($1525|0)==(16);
    do {
     if ($1526) {
      $1527 = ((($1523)) + 5816|0);
      $1528 = HEAP16[$1527>>1]|0;
      $1529 = $1528&255;
      $1530 = ((($1523)) + 20|0);
      $1531 = HEAP32[$1530>>2]|0;
      $1532 = (($1531) + 1)|0;
      HEAP32[$1530>>2] = $1532;
      $1533 = ((($1523)) + 8|0);
      $1534 = HEAP32[$1533>>2]|0;
      $1535 = (($1534) + ($1531)|0);
      HEAP8[$1535>>0] = $1529;
      $1536 = HEAP16[$1527>>1]|0;
      $1537 = ($1536&65535) >>> 8;
      $1538 = $1537&255;
      $1539 = HEAP32[$1530>>2]|0;
      $1540 = (($1539) + 1)|0;
      HEAP32[$1530>>2] = $1540;
      $1541 = HEAP32[$1533>>2]|0;
      $1542 = (($1541) + ($1539)|0);
      HEAP8[$1542>>0] = $1538;
      HEAP16[$1527>>1] = 0;
      HEAP32[$1524>>2] = 0;
      $$pre$phi68Z2D = $1530;
     } else {
      $1543 = ($1525|0)>(7);
      if ($1543) {
       $1544 = ((($1523)) + 5816|0);
       $1545 = HEAP16[$1544>>1]|0;
       $1546 = $1545&255;
       $1547 = ((($1523)) + 20|0);
       $1548 = HEAP32[$1547>>2]|0;
       $1549 = (($1548) + 1)|0;
       HEAP32[$1547>>2] = $1549;
       $1550 = ((($1523)) + 8|0);
       $1551 = HEAP32[$1550>>2]|0;
       $1552 = (($1551) + ($1548)|0);
       HEAP8[$1552>>0] = $1546;
       $1553 = HEAP16[$1544>>1]|0;
       $1554 = ($1553&65535) >>> 8;
       HEAP16[$1544>>1] = $1554;
       $1555 = HEAP32[$1524>>2]|0;
       $1556 = (($1555) + -8)|0;
       HEAP32[$1524>>2] = $1556;
       $$pre$phi68Z2D = $1547;
       break;
      } else {
       $$pre67 = ((($1523)) + 20|0);
       $$pre$phi68Z2D = $$pre67;
       break;
      }
     }
    } while(0);
    $1557 = HEAP32[$$pre$phi68Z2D>>2]|0;
    $1558 = HEAP32[$19>>2]|0;
    $1559 = ($1557>>>0)>($1558>>>0);
    $$123 = $1559 ? $1558 : $1557;
    $1560 = ($$123|0)==(0);
    if (!($1560)) {
     $1561 = HEAP32[$6>>2]|0;
     $1562 = ((($1523)) + 16|0);
     $1563 = HEAP32[$1562>>2]|0;
     _memcpy(($1561|0),($1563|0),($$123|0))|0;
     $1564 = HEAP32[$6>>2]|0;
     $1565 = (($1564) + ($$123)|0);
     HEAP32[$6>>2] = $1565;
     $1566 = HEAP32[$1562>>2]|0;
     $1567 = (($1566) + ($$123)|0);
     HEAP32[$1562>>2] = $1567;
     $1568 = ((($strm)) + 20|0);
     $1569 = HEAP32[$1568>>2]|0;
     $1570 = (($1569) + ($$123))|0;
     HEAP32[$1568>>2] = $1570;
     $1571 = HEAP32[$19>>2]|0;
     $1572 = (($1571) - ($$123))|0;
     HEAP32[$19>>2] = $1572;
     $1573 = HEAP32[$$pre$phi68Z2D>>2]|0;
     $1574 = (($1573) - ($$123))|0;
     HEAP32[$$pre$phi68Z2D>>2] = $1574;
     $1575 = ($1573|0)==($$123|0);
     if ($1575) {
      $1576 = ((($1523)) + 8|0);
      $1577 = HEAP32[$1576>>2]|0;
      HEAP32[$1562>>2] = $1577;
     }
    }
    $1578 = HEAP32[$1437>>2]|0;
    $1579 = ($1578|0)>(0);
    if ($1579) {
     $1580 = (0 - ($1578))|0;
     HEAP32[$1437>>2] = $1580;
    }
    $1581 = HEAP32[$676>>2]|0;
    $not$ = ($1581|0)==(0);
    $1582 = $not$&1;
    $$0 = $1582;
    return ($$0|0);
   }
  }
 } while(0);
 $18 = ((($strm)) + 24|0);
 HEAP32[$18>>2] = 23954;
 $$0 = -2;
 return ($$0|0);
}
function _inflateInit2_($strm,$windowBits,$version) {
 $strm = $strm|0;
 $windowBits = $windowBits|0;
 $version = $version|0;
 var $$0 = 0, $$1$i = 0, $$1$i2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $wrap$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($version|0)==(0|0);
 if ($0) {
  $$0 = -6;
  return ($$0|0);
 }
 $1 = HEAP8[$version>>0]|0;
 $2 = ($1<<24>>24)==(49);
 if (!($2)) {
  $$0 = -6;
  return ($$0|0);
 }
 $3 = ($strm|0)==(0|0);
 if ($3) {
  $$0 = -2;
  return ($$0|0);
 }
 $4 = ((($strm)) + 24|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($strm)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  HEAP32[$5>>2] = 104;
  $8 = ((($strm)) + 40|0);
  HEAP32[$8>>2] = 0;
  $14 = 104;
 } else {
  $14 = $6;
 }
 $9 = ((($strm)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  HEAP32[$9>>2] = 105;
 }
 $12 = ((($strm)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $15 = (FUNCTION_TABLE_iiii[$14 & 127]($13,1,7116)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  $$0 = -4;
  return ($$0|0);
 }
 $17 = ((($strm)) + 28|0);
 HEAP32[$17>>2] = $15;
 $18 = ((($15)) + 52|0);
 HEAP32[$18>>2] = 0;
 $19 = HEAP32[$17>>2]|0;
 $20 = ($19|0)==(0|0);
 do {
  if (!($20)) {
   $21 = ($windowBits|0)<(0);
   if ($21) {
    $22 = (0 - ($windowBits))|0;
    $$1$i = $22;$wrap$0$i = 0;
   } else {
    $23 = ($windowBits|0)<(48);
    if (!($23)) {
     break;
    }
    $24 = $windowBits >> 4;
    $25 = (($24) + 1)|0;
    $26 = $windowBits & 15;
    $$1$i = $26;$wrap$0$i = $25;
   }
   $27 = ($$1$i|0)==(0);
   if ($27) {
    $$1$i2 = 0;
   } else {
    $28 = $$1$i & -8;
    $29 = ($28|0)==(8);
    if ($29) {
     $$1$i2 = $$1$i;
    } else {
     break;
    }
   }
   $30 = ((($19)) + 52|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(0|0);
   $33 = ((($19)) + 36|0);
   if (!($32)) {
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==($$1$i2|0);
    if (!($35)) {
     $36 = HEAP32[$9>>2]|0;
     $37 = HEAP32[$12>>2]|0;
     FUNCTION_TABLE_vii[$36 & 127]($37,$31);
     HEAP32[$30>>2] = 0;
    }
   }
   $38 = ((($19)) + 8|0);
   HEAP32[$38>>2] = $wrap$0$i;
   HEAP32[$33>>2] = $$1$i2;
   $39 = HEAP32[$17>>2]|0;
   $40 = ($39|0)==(0|0);
   if (!($40)) {
    $41 = ((($39)) + 40|0);
    HEAP32[$41>>2] = 0;
    $42 = ((($39)) + 44|0);
    HEAP32[$42>>2] = 0;
    $43 = ((($39)) + 48|0);
    HEAP32[$43>>2] = 0;
    $44 = HEAP32[$17>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = ((($44)) + 28|0);
     HEAP32[$46>>2] = 0;
     $47 = ((($strm)) + 20|0);
     HEAP32[$47>>2] = 0;
     $48 = ((($strm)) + 8|0);
     HEAP32[$48>>2] = 0;
     HEAP32[$4>>2] = 0;
     $49 = ((($44)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==(0);
     if (!($51)) {
      $52 = $50 & 1;
      $53 = ((($strm)) + 48|0);
      HEAP32[$53>>2] = $52;
     }
     HEAP32[$44>>2] = 0;
     $54 = ((($44)) + 4|0);
     HEAP32[$54>>2] = 0;
     $55 = ((($44)) + 12|0);
     HEAP32[$55>>2] = 0;
     $56 = ((($44)) + 20|0);
     HEAP32[$56>>2] = 32768;
     $57 = ((($44)) + 32|0);
     HEAP32[$57>>2] = 0;
     $58 = ((($44)) + 56|0);
     HEAP32[$58>>2] = 0;
     $59 = ((($44)) + 60|0);
     HEAP32[$59>>2] = 0;
     $60 = ((($44)) + 1328|0);
     $61 = ((($44)) + 108|0);
     HEAP32[$61>>2] = $60;
     $62 = ((($44)) + 80|0);
     HEAP32[$62>>2] = $60;
     $63 = ((($44)) + 76|0);
     HEAP32[$63>>2] = $60;
     $64 = ((($44)) + 7104|0);
     HEAP32[$64>>2] = 1;
     $65 = ((($44)) + 7108|0);
     HEAP32[$65>>2] = -1;
     $$0 = 0;
     return ($$0|0);
    }
   }
  }
 } while(0);
 $66 = HEAP32[$9>>2]|0;
 $67 = HEAP32[$12>>2]|0;
 FUNCTION_TABLE_vii[$66 & 127]($67,$15);
 HEAP32[$17>>2] = 0;
 $$0 = -2;
 return ($$0|0);
}
function _inflate($strm,$flush) {
 $strm = $strm|0;
 $flush = $flush|0;
 var $$ = 0, $$0 = 0, $$967 = 0, $$cast = 0, $$copy$8 = 0, $$have$10$ = 0, $$hold$54 = 0, $$in$i = 0, $$in1$i = 0, $$pn$i = 0, $$pn3$i = 0, $$pre = 0, $$pre500 = 0, $$pre501 = 0, $$pre502 = 0, $$pre502$pre = 0, $$pre503 = 0, $$pre503$pre = 0, $$pre504 = 0, $$pre505 = 0;
 var $$pre507 = 0, $$pre509 = 0, $$pre511 = 0, $$pre512 = 0, $$pre513 = 0, $$pre514 = 0, $$pre516 = 0, $$pre517 = 0, $$ret$9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0;
 var $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0;
 var $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0;
 var $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0;
 var $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0;
 var $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0;
 var $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0;
 var $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0;
 var $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0;
 var $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $bits$0 = 0, $bits$0$be = 0, $bits$0$i = 0, $bits$1 = 0, $bits$1$i = 0, $bits$10 = 0, $bits$10$i = 0, $bits$11 = 0, $bits$12 = 0, $bits$13 = 0, $bits$14 = 0;
 var $bits$15 = 0, $bits$16 = 0, $bits$17 = 0, $bits$18 = 0, $bits$19 = 0, $bits$2 = 0, $bits$2$i = 0, $bits$20 = 0, $bits$21 = 0, $bits$22 = 0, $bits$23 = 0, $bits$24 = 0, $bits$26 = 0, $bits$26$ph = 0, $bits$27 = 0, $bits$28 = 0, $bits$29 = 0, $bits$3$i = 0, $bits$30 = 0, $bits$31 = 0;
 var $bits$32 = 0, $bits$33 = 0, $bits$35 = 0, $bits$38 = 0, $bits$39 = 0, $bits$4 = 0, $bits$4$i = 0, $bits$40 = 0, $bits$41 = 0, $bits$42 = 0, $bits$43 = 0, $bits$44 = 0, $bits$45 = 0, $bits$46 = 0, $bits$47 = 0, $bits$48 = 0, $bits$49 = 0, $bits$5$i = 0, $bits$50 = 0, $bits$51 = 0;
 var $bits$52 = 0, $bits$53 = 0, $bits$54 = 0, $bits$55 = 0, $bits$56 = 0, $bits$57 = 0, $bits$58 = 0, $bits$6 = 0, $bits$6$i = 0, $bits$61 = 0, $bits$61$ph = 0, $bits$7 = 0, $bits$8 = 0, $bits$8$i = 0, $bits$9 = 0, $bits$9$i = 0, $copy$1 = 0, $copy$10 = 0, $copy$12 = 0, $copy$2 = 0;
 var $copy$4 = 0, $copy$6 = 0, $copy$7 = 0, $copy$8 = 0, $from$0 = 0, $from$0$i = 0, $from$1 = 0, $from$10$i = 0, $from$11$i = 0, $from$2 = 0, $from$2$i = 0, $from$3$i = 0, $from$6$i = 0, $have$0 = 0, $have$0$be = 0, $have$1 = 0, $have$10 = 0, $have$10$ = 0, $have$11 = 0, $have$12 = 0;
 var $have$13 = 0, $have$14 = 0, $have$15 = 0, $have$16 = 0, $have$17 = 0, $have$18 = 0, $have$19 = 0, $have$2 = 0, $have$20 = 0, $have$21 = 0, $have$22 = 0, $have$23 = 0, $have$24 = 0, $have$25 = 0, $have$26 = 0, $have$27 = 0, $have$27$ = 0, $have$28 = 0, $have$30 = 0, $have$30$ph = 0;
 var $have$31 = 0, $have$32 = 0, $have$33 = 0, $have$34 = 0, $have$35 = 0, $have$36 = 0, $have$37 = 0, $have$39 = 0, $have$4 = 0, $have$42 = 0, $have$43 = 0, $have$44 = 0, $have$45 = 0, $have$46 = 0, $have$47 = 0, $have$48 = 0, $have$49 = 0, $have$50 = 0, $have$51 = 0, $have$52 = 0;
 var $have$53 = 0, $have$54 = 0, $have$55 = 0, $have$56 = 0, $have$57 = 0, $have$58 = 0, $have$59 = 0, $have$6 = 0, $have$60 = 0, $have$61 = 0, $have$62 = 0, $have$65 = 0, $have$65$ph = 0, $have$7 = 0, $have$8 = 0, $have$9 = 0, $hbuf = 0, $here$sroa$0$0 = 0, $here$sroa$0$1 = 0, $here$sroa$16$0 = 0;
 var $here$sroa$16$1 = 0, $here$sroa$32$0 = 0, $here$sroa$32$1 = 0, $here$sroa$32$1$in = 0, $hold$0 = 0, $hold$0$be = 0, $hold$0$i = 0, $hold$1 = 0, $hold$1$i = 0, $hold$10 = 0, $hold$10$i = 0, $hold$11 = 0, $hold$12 = 0, $hold$13 = 0, $hold$14 = 0, $hold$15 = 0, $hold$16 = 0, $hold$17 = 0, $hold$18 = 0, $hold$19 = 0;
 var $hold$2$i = 0, $hold$20 = 0, $hold$21 = 0, $hold$22 = 0, $hold$23 = 0, $hold$24 = 0, $hold$26 = 0, $hold$26$ph = 0, $hold$27 = 0, $hold$28 = 0, $hold$29 = 0, $hold$3$i = 0, $hold$30 = 0, $hold$31 = 0, $hold$32 = 0, $hold$33 = 0, $hold$35 = 0, $hold$38 = 0, $hold$39 = 0, $hold$4 = 0;
 var $hold$4$i = 0, $hold$40 = 0, $hold$41 = 0, $hold$42 = 0, $hold$43 = 0, $hold$44 = 0, $hold$45 = 0, $hold$46 = 0, $hold$47 = 0, $hold$48 = 0, $hold$49 = 0, $hold$5$i = 0, $hold$50 = 0, $hold$51 = 0, $hold$52 = 0, $hold$53 = 0, $hold$54 = 0, $hold$55 = 0, $hold$56 = 0, $hold$57 = 0;
 var $hold$58 = 0, $hold$6 = 0, $hold$6$i = 0, $hold$61 = 0, $hold$61$ph = 0, $hold$7 = 0, $hold$8 = 0, $hold$8$i = 0, $hold$9 = 0, $hold$9$i = 0, $in$0$i = 0, $in$1$i = 0, $in$2$i = 0, $in$3$i = 0, $in$4$i = 0, $in$6$i = 0, $in$7$i = 0, $in$8$i = 0, $left$0 = 0, $left$0$be = 0;
 var $left$0$copy$10 = 0, $left$0$lcssa333 = 0, $left$0362 = 0, $len$0$i = 0, $len$1 = 0, $len$7$i = 0, $len$8$i = 0, $next$0 = 0, $next$0$be = 0, $next$1 = 0, $next$10 = 0, $next$11 = 0, $next$12 = 0, $next$13 = 0, $next$14 = 0, $next$15 = 0, $next$16 = 0, $next$17 = 0, $next$18 = 0, $next$19 = 0;
 var $next$2 = 0, $next$20 = 0, $next$21 = 0, $next$22 = 0, $next$23 = 0, $next$24 = 0, $next$25 = 0, $next$26 = 0, $next$27 = 0, $next$28 = 0, $next$30 = 0, $next$30$ph = 0, $next$31 = 0, $next$32 = 0, $next$33 = 0, $next$34 = 0, $next$35 = 0, $next$36 = 0, $next$37 = 0, $next$39 = 0;
 var $next$4 = 0, $next$42 = 0, $next$43 = 0, $next$44 = 0, $next$45 = 0, $next$46 = 0, $next$47 = 0, $next$48 = 0, $next$49 = 0, $next$50 = 0, $next$51 = 0, $next$52 = 0, $next$53 = 0, $next$54 = 0, $next$55 = 0, $next$56 = 0, $next$57 = 0, $next$58 = 0, $next$59 = 0, $next$6 = 0;
 var $next$60 = 0, $next$61 = 0, $next$62 = 0, $next$65 = 0, $next$65$ph = 0, $next$7 = 0, $next$8 = 0, $next$9 = 0, $op$0$i = 0, $op$1$i = 0, $op$2$i = 0, $op$3$i = 0, $or$cond = 0, $or$cond23 = 0, $or$cond962 = 0, $or$cond963 = 0, $or$cond964 = 0, $or$cond965 = 0, $or$cond966 = 0, $or$cond968 = 0;
 var $or$cond969 = 0, $or$cond970 = 0, $or$cond971 = 0, $out$0 = 0, $out$0$be = 0, $out$0$i = 0, $out$1 = 0, $out$1$i = 0, $out$11$i = 0, $out$14$i = 0, $out$18$i = 0, $out$19$i = 0, $out$2 = 0, $out$3$i = 0, $out$4$i = 0, $out$5 = 0, $out$7$i = 0, $put$0 = 0, $put$0$be = 0, $put$1 = 0;
 var $ret$0 = 0, $ret$0$be = 0, $ret$1 = 0, $ret$2 = 0, $ret$3 = 0, $ret$4 = 0, $ret$5 = 0, $ret$6 = 0, $ret$7 = 0, $ret$9 = 0, $ret$9$ph = 0, $scevgep = 0, $scevgep953 = 0, $scevgep954 = 0, $scevgep955 = 0, $scevgep956 = 0, $scevgep957 = 0, $scevgep958 = 0, $scevgep959 = 0, $storemerge$i = 0;
 var $storemerge$in$in$i = 0, $storemerge2$i = 0, $storemerge2$in$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $hbuf = sp;
 $0 = ($strm|0)==(0|0);
 if ($0) {
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ((($strm)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ((($strm)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = -2;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP32[$strm>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = ((($strm)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if (!($11)) {
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $12 = HEAP32[$2>>2]|0;
 $13 = ($12|0)==(11);
 if ($13) {
  HEAP32[$2>>2] = 12;
  $$pre = HEAP32[$strm>>2]|0;
  $$pre500 = HEAP32[$4>>2]|0;
  $1155 = 12;$1156 = $$pre500;$1157 = $$pre;
 } else {
  $1155 = $12;$1156 = $5;$1157 = $7;
 }
 $14 = ((($strm)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($strm)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($2)) + 60|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($2)) + 56|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($2)) + 8|0);
 $23 = ((($2)) + 16|0);
 $24 = ((($2)) + 32|0);
 $25 = ((($strm)) + 24|0);
 $26 = ((($2)) + 36|0);
 $27 = ((($2)) + 20|0);
 $28 = ((($2)) + 24|0);
 $29 = ((($strm)) + 48|0);
 $30 = ((($hbuf)) + 1|0);
 $31 = ((($2)) + 64|0);
 $32 = ((($2)) + 12|0);
 $33 = ($flush|0)==(5);
 $34 = ($flush|0)==(6);
 $35 = ((($2)) + 4|0);
 $36 = ((($2)) + 76|0);
 $37 = ((($2)) + 84|0);
 $38 = ((($2)) + 80|0);
 $39 = ((($2)) + 88|0);
 $40 = ((($2)) + 104|0);
 $41 = ((($2)) + 96|0);
 $42 = ((($2)) + 100|0);
 $43 = ((($2)) + 624|0);
 $44 = ((($2)) + 1328|0);
 $45 = ((($2)) + 108|0);
 $$cast = $44;
 $46 = ((($2)) + 112|0);
 $47 = ((($2)) + 752|0);
 $48 = ((($2)) + 7108|0);
 $49 = ((($2)) + 72|0);
 $50 = ((($2)) + 7112|0);
 $51 = ((($2)) + 68|0);
 $52 = ((($2)) + 44|0);
 $53 = ((($2)) + 7104|0);
 $54 = ((($2)) + 48|0);
 $55 = ((($2)) + 52|0);
 $56 = ((($2)) + 40|0);
 $57 = ((($strm)) + 20|0);
 $58 = ((($2)) + 28|0);
 $59 = ((($hbuf)) + 2|0);
 $60 = ((($hbuf)) + 3|0);
 $61 = ((($2)) + 92|0);
 $62 = $1155;$bits$0 = $19;$have$0 = $17;$hold$0 = $21;$left$0 = $15;$next$0 = $1157;$out$0 = $15;$put$0 = $1156;$ret$0 = 0;
 L17: while(1) {
  L19: do {
   switch ($62|0) {
   case 28:  {
    $bits$61$ph = $bits$0;$have$65$ph = $have$0;$hold$61$ph = $hold$0;$left$0$lcssa333 = $left$0;$next$65$ph = $next$0;$ret$9$ph = 1;
    label = 351;
    break L17;
    break;
   }
   case 29:  {
    $bits$61 = $bits$0;$have$65 = $have$0;$hold$61 = $hold$0;$left$0362 = $left$0;$next$65 = $next$0;$out$5 = $out$0;$ret$9 = -3;
    break L17;
    break;
   }
   case 30:  {
    label = 373;
    break L17;
    break;
   }
   case 0:  {
    $63 = HEAP32[$22>>2]|0;
    $64 = ($63|0)==(0);
    if ($64) {
     HEAP32[$2>>2] = 12;
     $bits$0$be = $bits$0;$have$0$be = $have$0;$hold$0$be = $hold$0;$left$0$be = $left$0;$next$0$be = $next$0;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$0;
     break L19;
    } else {
     $bits$1 = $bits$0;$have$1 = $have$0;$hold$1 = $hold$0;$next$1 = $next$0;
    }
    while(1) {
     $65 = ($bits$1>>>0)<(16);
     if (!($65)) {
      break;
     }
     $66 = ($have$1|0)==(0);
     if ($66) {
      $bits$61 = $bits$1;$have$65 = 0;$hold$61 = $hold$1;$left$0362 = $left$0;$next$65 = $next$1;$out$5 = $out$0;$ret$9 = $ret$0;
      break L17;
     }
     $67 = (($bits$1) + 8)|0;
     $68 = HEAP8[$next$1>>0]|0;
     $69 = $68&255;
     $70 = $69 << $bits$1;
     $71 = (($hold$1) + ($70))|0;
     $72 = ((($next$1)) + 1|0);
     $73 = (($have$1) + -1)|0;
     $bits$1 = $67;$have$1 = $73;$hold$1 = $71;$next$1 = $72;
    }
    $74 = $63 & 2;
    $75 = ($74|0)!=(0);
    $76 = ($hold$1|0)==(35615);
    $or$cond962 = $75 & $76;
    if ($or$cond962) {
     HEAP32[$28>>2] = 0;
     HEAP8[$hbuf>>0] = 31;
     HEAP8[$30>>0] = -117;
     $77 = HEAP32[$28>>2]|0;
     $78 = (_crc32($77,$hbuf,2)|0);
     HEAP32[$28>>2] = $78;
     HEAP32[$2>>2] = 1;
     $bits$0$be = 0;$have$0$be = $have$1;$hold$0$be = 0;$left$0$be = $left$0;$next$0$be = $next$1;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$0;
     break L19;
    }
    HEAP32[$23>>2] = 0;
    $79 = HEAP32[$24>>2]|0;
    $80 = ($79|0)==(0|0);
    if ($80) {
     $83 = $63;
    } else {
     $81 = ((($79)) + 48|0);
     HEAP32[$81>>2] = -1;
     $$pre517 = HEAP32[$22>>2]|0;
     $83 = $$pre517;
    }
    $82 = $83 & 1;
    $84 = ($82|0)==(0);
    if (!($84)) {
     $85 = $hold$1 << 8;
     $86 = $85 & 65280;
     $87 = $hold$1 >>> 8;
     $88 = (($86) + ($87))|0;
     $89 = (($88>>>0) % 31)&-1;
     $90 = ($89|0)==(0);
     if ($90) {
      $91 = $hold$1 & 15;
      $92 = ($91|0)==(8);
      if (!($92)) {
       HEAP32[$25>>2] = 22809;
       HEAP32[$2>>2] = 29;
       $bits$0$be = $bits$1;$have$0$be = $have$1;$hold$0$be = $hold$1;$left$0$be = $left$0;$next$0$be = $next$1;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$0;
       break L19;
      }
      $93 = $hold$1 >>> 4;
      $94 = (($bits$1) + -4)|0;
      $95 = $93 & 15;
      $96 = (($95) + 8)|0;
      $97 = HEAP32[$26>>2]|0;
      $98 = ($97|0)==(0);
      if ($98) {
       HEAP32[$26>>2] = $96;
      } else {
       $99 = ($96>>>0)>($97>>>0);
       if ($99) {
        HEAP32[$25>>2] = 22836;
        HEAP32[$2>>2] = 29;
        $bits$0$be = $94;$have$0$be = $have$1;$hold$0$be = $93;$left$0$be = $left$0;$next$0$be = $next$1;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$0;
        break L19;
       }
      }
      $100 = 1 << $96;
      HEAP32[$27>>2] = $100;
      HEAP32[$28>>2] = 1;
      HEAP32[$29>>2] = 1;
      $101 = $hold$1 >>> 12;
      $102 = $101 & 2;
      $103 = $102 ^ 11;
      HEAP32[$2>>2] = $103;
      $bits$0$be = 0;$have$0$be = $have$1;$hold$0$be = 0;$left$0$be = $left$0;$next$0$be = $next$1;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$0;
      break L19;
     }
    }
    HEAP32[$25>>2] = 22786;
    HEAP32[$2>>2] = 29;
    $bits$0$be = $bits$1;$have$0$be = $have$1;$hold$0$be = $hold$1;$left$0$be = $left$0;$next$0$be = $next$1;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$0;
    break;
   }
   case 1:  {
    $111 = $hold$0;$bits$2 = $bits$0;$have$2 = $have$0;$next$2 = $next$0;
    while(1) {
     $104 = ($bits$2>>>0)<(16);
     if (!($104)) {
      break;
     }
     $105 = ($have$2|0)==(0);
     if ($105) {
      $bits$61 = $bits$2;$have$65 = 0;$hold$61 = $111;$left$0362 = $left$0;$next$65 = $next$2;$out$5 = $out$0;$ret$9 = $ret$0;
      break L17;
     }
     $106 = (($bits$2) + 8)|0;
     $107 = HEAP8[$next$2>>0]|0;
     $108 = $107&255;
     $109 = $108 << $bits$2;
     $110 = (($111) + ($109))|0;
     $112 = ((($next$2)) + 1|0);
     $113 = (($have$2) + -1)|0;
     $111 = $110;$bits$2 = $106;$have$2 = $113;$next$2 = $112;
    }
    HEAP32[$23>>2] = $111;
    $114 = $111 & 255;
    $115 = ($114|0)==(8);
    if (!($115)) {
     HEAP32[$25>>2] = 22809;
     HEAP32[$2>>2] = 29;
     $bits$0$be = $bits$2;$have$0$be = $have$2;$hold$0$be = $111;$left$0$be = $left$0;$next$0$be = $next$2;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$0;
     break L19;
    }
    $116 = $111 & 57344;
    $117 = ($116|0)==(0);
    if (!($117)) {
     HEAP32[$25>>2] = 22856;
     HEAP32[$2>>2] = 29;
     $bits$0$be = $bits$2;$have$0$be = $have$2;$hold$0$be = $111;$left$0$be = $left$0;$next$0$be = $next$2;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$0;
     break L19;
    }
    $118 = HEAP32[$24>>2]|0;
    $119 = ($118|0)==(0|0);
    if ($119) {
     $123 = $111;
    } else {
     $120 = $111 >>> 8;
     $121 = $120 & 1;
     HEAP32[$118>>2] = $121;
     $$pre512 = HEAP32[$23>>2]|0;
     $123 = $$pre512;
    }
    $122 = $123 & 512;
    $124 = ($122|0)==(0);
    if (!($124)) {
     $125 = $111&255;
     HEAP8[$hbuf>>0] = $125;
     $126 = $111 >>> 8;
     $127 = $126&255;
     HEAP8[$30>>0] = $127;
     $128 = HEAP32[$28>>2]|0;
     $129 = (_crc32($128,$hbuf,2)|0);
     HEAP32[$28>>2] = $129;
    }
    HEAP32[$2>>2] = 2;
    $bits$4 = 0;$have$4 = $have$2;$hold$4 = 0;$next$4 = $next$2;
    label = 45;
    break;
   }
   case 2:  {
    $bits$4 = $bits$0;$have$4 = $have$0;$hold$4 = $hold$0;$next$4 = $next$0;
    label = 45;
    break;
   }
   case 3:  {
    $bits$6 = $bits$0;$have$6 = $have$0;$hold$6 = $hold$0;$next$6 = $next$0;
    label = 53;
    break;
   }
   case 4:  {
    $bits$7 = $bits$0;$have$7 = $have$0;$hold$7 = $hold$0;$next$7 = $next$0;
    label = 61;
    break;
   }
   case 5:  {
    $bits$10 = $bits$0;$have$10 = $have$0;$hold$10 = $hold$0;$next$10 = $next$0;
    label = 72;
    break;
   }
   case 6:  {
    $$pre516 = HEAP32[$23>>2]|0;
    $236 = $$pre516;$bits$11 = $bits$0;$have$13 = $have$0;$hold$11 = $hold$0;$next$13 = $next$0;
    label = 82;
    break;
   }
   case 7:  {
    $bits$12 = $bits$0;$have$15 = $have$0;$hold$12 = $hold$0;$next$15 = $next$0;
    label = 95;
    break;
   }
   case 8:  {
    $bits$13 = $bits$0;$have$17 = $have$0;$hold$13 = $hold$0;$next$17 = $next$0;
    label = 108;
    break;
   }
   case 9:  {
    $bits$16 = $bits$0;$have$20 = $have$0;$hold$16 = $hold$0;$next$20 = $next$0;
    while(1) {
     $321 = ($bits$16>>>0)<(32);
     if (!($321)) {
      break;
     }
     $322 = ($have$20|0)==(0);
     if ($322) {
      $bits$61 = $bits$16;$have$65 = 0;$hold$61 = $hold$16;$left$0362 = $left$0;$next$65 = $next$20;$out$5 = $out$0;$ret$9 = $ret$0;
      break L17;
     }
     $323 = (($bits$16) + 8)|0;
     $324 = HEAP8[$next$20>>0]|0;
     $325 = $324&255;
     $326 = $325 << $bits$16;
     $327 = (($hold$16) + ($326))|0;
     $328 = ((($next$20)) + 1|0);
     $329 = (($have$20) + -1)|0;
     $bits$16 = $323;$have$20 = $329;$hold$16 = $327;$next$20 = $328;
    }
    $330 = (_llvm_bswap_i32(($hold$16|0))|0);
    HEAP32[$28>>2] = $330;
    HEAP32[$29>>2] = $330;
    HEAP32[$2>>2] = 10;
    $bits$17 = 0;$have$21 = $have$20;$hold$17 = 0;$next$21 = $next$20;
    label = 121;
    break;
   }
   case 10:  {
    $bits$17 = $bits$0;$have$21 = $have$0;$hold$17 = $hold$0;$next$21 = $next$0;
    label = 121;
    break;
   }
   case 11:  {
    $bits$18 = $bits$0;$have$22 = $have$0;$hold$18 = $hold$0;$next$22 = $next$0;
    label = 124;
    break;
   }
   case 12:  {
    $bits$19 = $bits$0;$have$23 = $have$0;$hold$19 = $hold$0;$next$23 = $next$0;
    label = 126;
    break;
   }
   case 13:  {
    $354 = $bits$0 & 7;
    $355 = $hold$0 >>> $354;
    $356 = $bits$0 & -8;
    $bits$21 = $356;$have$25 = $have$0;$hold$21 = $355;$next$25 = $next$0;
    while(1) {
     $357 = ($bits$21>>>0)<(32);
     if (!($357)) {
      break;
     }
     $358 = ($have$25|0)==(0);
     if ($358) {
      $bits$61 = $bits$21;$have$65 = 0;$hold$61 = $hold$21;$left$0362 = $left$0;$next$65 = $next$25;$out$5 = $out$0;$ret$9 = $ret$0;
      break L17;
     }
     $359 = (($bits$21) + 8)|0;
     $360 = HEAP8[$next$25>>0]|0;
     $361 = $360&255;
     $362 = $361 << $bits$21;
     $363 = (($hold$21) + ($362))|0;
     $364 = ((($next$25)) + 1|0);
     $365 = (($have$25) + -1)|0;
     $bits$21 = $359;$have$25 = $365;$hold$21 = $363;$next$25 = $364;
    }
    $366 = $hold$21 & 65535;
    $367 = $hold$21 >>> 16;
    $368 = $367 ^ 65535;
    $369 = ($366|0)==($368|0);
    if ($369) {
     HEAP32[$31>>2] = $366;
     HEAP32[$2>>2] = 14;
     if ($34) {
      $bits$61$ph = 0;$have$65$ph = $have$25;$hold$61$ph = 0;$left$0$lcssa333 = $left$0;$next$65$ph = $next$25;$ret$9$ph = $ret$0;
      label = 351;
      break L17;
     } else {
      $bits$22 = 0;$have$26 = $have$25;$hold$22 = 0;$next$26 = $next$25;
      label = 146;
      break L19;
     }
    } else {
     HEAP32[$25>>2] = 22920;
     HEAP32[$2>>2] = 29;
     $bits$0$be = $bits$21;$have$0$be = $have$25;$hold$0$be = $hold$21;$left$0$be = $left$0;$next$0$be = $next$25;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$0;
     break L19;
    }
    break;
   }
   case 14:  {
    $bits$22 = $bits$0;$have$26 = $have$0;$hold$22 = $hold$0;$next$26 = $next$0;
    label = 146;
    break;
   }
   case 15:  {
    $bits$23 = $bits$0;$have$27 = $have$0;$hold$23 = $hold$0;$next$27 = $next$0;
    label = 147;
    break;
   }
   case 16:  {
    $bits$24 = $bits$0;$have$28 = $have$0;$hold$24 = $hold$0;$next$28 = $next$0;
    while(1) {
     $381 = ($bits$24>>>0)<(14);
     if (!($381)) {
      break;
     }
     $382 = ($have$28|0)==(0);
     if ($382) {
      $bits$61 = $bits$24;$have$65 = 0;$hold$61 = $hold$24;$left$0362 = $left$0;$next$65 = $next$28;$out$5 = $out$0;$ret$9 = $ret$0;
      break L17;
     }
     $383 = (($bits$24) + 8)|0;
     $384 = HEAP8[$next$28>>0]|0;
     $385 = $384&255;
     $386 = $385 << $bits$24;
     $387 = (($hold$24) + ($386))|0;
     $388 = ((($next$28)) + 1|0);
     $389 = (($have$28) + -1)|0;
     $bits$24 = $383;$have$28 = $389;$hold$24 = $387;$next$28 = $388;
    }
    $390 = $hold$24 & 31;
    $391 = (($390) + 257)|0;
    HEAP32[$41>>2] = $391;
    $392 = $hold$24 >>> 5;
    $393 = $392 & 31;
    $394 = (($393) + 1)|0;
    HEAP32[$42>>2] = $394;
    $395 = $hold$24 >>> 10;
    $396 = $395 & 15;
    $397 = (($396) + 4)|0;
    HEAP32[$61>>2] = $397;
    $398 = $hold$24 >>> 14;
    $399 = (($bits$24) + -14)|0;
    $400 = ($391>>>0)>(286);
    $401 = ($394>>>0)>(30);
    $or$cond963 = $400 | $401;
    if ($or$cond963) {
     HEAP32[$25>>2] = 22949;
     HEAP32[$2>>2] = 29;
     $bits$0$be = $399;$have$0$be = $have$28;$hold$0$be = $398;$left$0$be = $left$0;$next$0$be = $next$28;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$0;
     break L19;
    } else {
     HEAP32[$40>>2] = 0;
     HEAP32[$2>>2] = 17;
     $$pre502 = 0;$$pre503 = $397;$bits$26$ph = $399;$have$30$ph = $have$28;$hold$26$ph = $398;$next$30$ph = $next$28;
     label = 157;
     break L19;
    }
    break;
   }
   case 17:  {
    $$pre502$pre = HEAP32[$40>>2]|0;
    $$pre503$pre = HEAP32[$61>>2]|0;
    $$pre502 = $$pre502$pre;$$pre503 = $$pre503$pre;$bits$26$ph = $bits$0;$have$30$ph = $have$0;$hold$26$ph = $hold$0;$next$30$ph = $next$0;
    label = 157;
    break;
   }
   case 18:  {
    $bits$28 = $bits$0;$have$32 = $have$0;$hold$28 = $hold$0;$next$32 = $next$0;$ret$1 = $ret$0;
    label = 168;
    break;
   }
   case 19:  {
    $bits$38 = $bits$0;$have$42 = $have$0;$hold$38 = $hold$0;$next$42 = $next$0;$ret$2 = $ret$0;
    label = 207;
    break;
   }
   case 20:  {
    $bits$39 = $bits$0;$have$43 = $have$0;$hold$39 = $hold$0;$next$43 = $next$0;$ret$3 = $ret$0;
    label = 208;
    break;
   }
   case 21:  {
    $$pre505 = HEAP32[$49>>2]|0;
    $871 = $$pre505;$bits$43 = $bits$0;$have$47 = $have$0;$hold$43 = $hold$0;$next$47 = $next$0;$ret$4 = $ret$0;
    label = 287;
    break;
   }
   case 22:  {
    $bits$46 = $bits$0;$have$50 = $have$0;$hold$46 = $hold$0;$next$50 = $next$0;$ret$5 = $ret$0;
    label = 294;
    break;
   }
   case 23:  {
    $$pre511 = HEAP32[$49>>2]|0;
    $948 = $$pre511;$bits$50 = $bits$0;$have$54 = $have$0;$hold$50 = $hold$0;$next$54 = $next$0;$ret$6 = $ret$0;
    label = 308;
    break;
   }
   case 24:  {
    $bits$53 = $bits$0;$have$57 = $have$0;$hold$53 = $hold$0;$next$57 = $next$0;$ret$7 = $ret$0;
    label = 314;
    break;
   }
   case 25:  {
    $1002 = ($left$0|0)==(0);
    if ($1002) {
     $bits$61$ph = $bits$0;$have$65$ph = $have$0;$hold$61$ph = $hold$0;$left$0$lcssa333 = 0;$next$65$ph = $next$0;$ret$9$ph = $ret$0;
     label = 351;
     break L17;
    }
    $1003 = HEAP32[$31>>2]|0;
    $1004 = $1003&255;
    $1005 = ((($put$0)) + 1|0);
    HEAP8[$put$0>>0] = $1004;
    $1006 = (($left$0) + -1)|0;
    HEAP32[$2>>2] = 20;
    $bits$0$be = $bits$0;$have$0$be = $have$0;$hold$0$be = $hold$0;$left$0$be = $1006;$next$0$be = $next$0;$out$0$be = $out$0;$put$0$be = $1005;$ret$0$be = $ret$0;
    break;
   }
   case 26:  {
    $1007 = HEAP32[$22>>2]|0;
    $1008 = ($1007|0)==(0);
    if ($1008) {
     $bits$55 = $bits$0;$have$59 = $have$0;$hold$55 = $hold$0;$next$59 = $next$0;$out$1 = $out$0;
    } else {
     $bits$54 = $bits$0;$have$58 = $have$0;$hold$54 = $hold$0;$next$58 = $next$0;
     while(1) {
      $1009 = ($bits$54>>>0)<(32);
      if (!($1009)) {
       break;
      }
      $1010 = ($have$58|0)==(0);
      if ($1010) {
       $bits$61 = $bits$54;$have$65 = 0;$hold$61 = $hold$54;$left$0362 = $left$0;$next$65 = $next$58;$out$5 = $out$0;$ret$9 = $ret$0;
       break L17;
      }
      $1011 = (($bits$54) + 8)|0;
      $1012 = HEAP8[$next$58>>0]|0;
      $1013 = $1012&255;
      $1014 = $1013 << $bits$54;
      $1015 = (($hold$54) + ($1014))|0;
      $1016 = ((($next$58)) + 1|0);
      $1017 = (($have$58) + -1)|0;
      $bits$54 = $1011;$have$58 = $1017;$hold$54 = $1015;$next$58 = $1016;
     }
     $1018 = (($out$0) - ($left$0))|0;
     $1019 = HEAP32[$57>>2]|0;
     $1020 = (($1019) + ($1018))|0;
     HEAP32[$57>>2] = $1020;
     $1021 = HEAP32[$58>>2]|0;
     $1022 = (($1021) + ($1018))|0;
     HEAP32[$58>>2] = $1022;
     $1023 = ($out$0|0)==($left$0|0);
     if (!($1023)) {
      $1024 = HEAP32[$23>>2]|0;
      $1025 = ($1024|0)==(0);
      $1026 = HEAP32[$28>>2]|0;
      $1027 = (0 - ($1018))|0;
      $1028 = (($put$0) + ($1027)|0);
      if ($1025) {
       $1030 = (_adler32($1026,$1028,$1018)|0);
       $1031 = $1030;
      } else {
       $1029 = (_crc32($1026,$1028,$1018)|0);
       $1031 = $1029;
      }
      HEAP32[$28>>2] = $1031;
      HEAP32[$29>>2] = $1031;
     }
     $1032 = HEAP32[$23>>2]|0;
     $1033 = ($1032|0)==(0);
     $1034 = (_llvm_bswap_i32(($hold$54|0))|0);
     $$hold$54 = $1033 ? $1034 : $hold$54;
     $1035 = HEAP32[$28>>2]|0;
     $1036 = ($$hold$54|0)==($1035|0);
     if ($1036) {
      $bits$55 = 0;$have$59 = $have$58;$hold$55 = 0;$next$59 = $next$58;$out$1 = $left$0;
     } else {
      HEAP32[$25>>2] = 23123;
      HEAP32[$2>>2] = 29;
      $bits$0$be = $bits$54;$have$0$be = $have$58;$hold$0$be = $hold$54;$left$0$be = $left$0;$next$0$be = $next$58;$out$0$be = $left$0;$put$0$be = $put$0;$ret$0$be = $ret$0;
      break L19;
     }
    }
    HEAP32[$2>>2] = 27;
    $bits$56 = $bits$55;$have$60 = $have$59;$hold$56 = $hold$55;$next$60 = $next$59;$out$2 = $out$1;
    label = 343;
    break;
   }
   case 27:  {
    $bits$56 = $bits$0;$have$60 = $have$0;$hold$56 = $hold$0;$next$60 = $next$0;$out$2 = $out$0;
    label = 343;
    break;
   }
   default: {
    $$0 = -2;
    label = 374;
    break L17;
   }
   }
  } while(0);
  do {
   if ((label|0) == 45) {
    while(1) {
     label = 0;
     $130 = ($bits$4>>>0)<(32);
     if (!($130)) {
      break;
     }
     $131 = ($have$4|0)==(0);
     if ($131) {
      $bits$61 = $bits$4;$have$65 = 0;$hold$61 = $hold$4;$left$0362 = $left$0;$next$65 = $next$4;$out$5 = $out$0;$ret$9 = $ret$0;
      break L17;
     }
     $132 = (($bits$4) + 8)|0;
     $133 = HEAP8[$next$4>>0]|0;
     $134 = $133&255;
     $135 = $134 << $bits$4;
     $136 = (($hold$4) + ($135))|0;
     $137 = ((($next$4)) + 1|0);
     $138 = (($have$4) + -1)|0;
     $bits$4 = $132;$have$4 = $138;$hold$4 = $136;$next$4 = $137;
     label = 45;
    }
    $139 = HEAP32[$24>>2]|0;
    $140 = ($139|0)==(0|0);
    if (!($140)) {
     $141 = ((($139)) + 4|0);
     HEAP32[$141>>2] = $hold$4;
    }
    $142 = HEAP32[$23>>2]|0;
    $143 = $142 & 512;
    $144 = ($143|0)==(0);
    if (!($144)) {
     $145 = $hold$4&255;
     HEAP8[$hbuf>>0] = $145;
     $146 = $hold$4 >>> 8;
     $147 = $146&255;
     HEAP8[$30>>0] = $147;
     $148 = $hold$4 >>> 16;
     $149 = $148&255;
     HEAP8[$59>>0] = $149;
     $150 = $hold$4 >>> 24;
     $151 = $150&255;
     HEAP8[$60>>0] = $151;
     $152 = HEAP32[$28>>2]|0;
     $153 = (_crc32($152,$hbuf,4)|0);
     HEAP32[$28>>2] = $153;
    }
    HEAP32[$2>>2] = 3;
    $bits$6 = 0;$have$6 = $have$4;$hold$6 = 0;$next$6 = $next$4;
    label = 53;
   }
   else if ((label|0) == 121) {
    label = 0;
    $331 = HEAP32[$32>>2]|0;
    $332 = ($331|0)==(0);
    if ($332) {
     label = 122;
     break L17;
    }
    HEAP32[$28>>2] = 1;
    HEAP32[$29>>2] = 1;
    HEAP32[$2>>2] = 11;
    $bits$18 = $bits$17;$have$22 = $have$21;$hold$18 = $hold$17;$next$22 = $next$21;
    label = 124;
   }
   else if ((label|0) == 146) {
    label = 0;
    HEAP32[$2>>2] = 15;
    $bits$23 = $bits$22;$have$27 = $have$26;$hold$23 = $hold$22;$next$27 = $next$26;
    label = 147;
   }
   else if ((label|0) == 157) {
    label = 0;
    $403 = $$pre502;$bits$26 = $bits$26$ph;$have$30 = $have$30$ph;$hold$26 = $hold$26$ph;$next$30 = $next$30$ph;
    while(1) {
     $402 = ($403>>>0)<($$pre503>>>0);
     if ($402) {
      $bits$27 = $bits$26;$have$31 = $have$30;$hold$27 = $hold$26;$next$31 = $next$30;
     } else {
      $423 = $403;
      break;
     }
     while(1) {
      $404 = ($bits$27>>>0)<(3);
      if (!($404)) {
       break;
      }
      $405 = ($have$31|0)==(0);
      if ($405) {
       $bits$61 = $bits$27;$have$65 = 0;$hold$61 = $hold$27;$left$0362 = $left$0;$next$65 = $next$31;$out$5 = $out$0;$ret$9 = $ret$0;
       break L17;
      }
      $406 = (($bits$27) + 8)|0;
      $407 = HEAP8[$next$31>>0]|0;
      $408 = $407&255;
      $409 = $408 << $bits$27;
      $410 = (($hold$27) + ($409))|0;
      $411 = ((($next$31)) + 1|0);
      $412 = (($have$31) + -1)|0;
      $bits$27 = $406;$have$31 = $412;$hold$27 = $410;$next$31 = $411;
     }
     $413 = $hold$27 & 7;
     $414 = $413&65535;
     $415 = (($403) + 1)|0;
     HEAP32[$40>>2] = $415;
     $416 = (12420 + ($403<<1)|0);
     $417 = HEAP16[$416>>1]|0;
     $418 = $417&65535;
     $419 = (((($2)) + 112|0) + ($418<<1)|0);
     HEAP16[$419>>1] = $414;
     $420 = (($bits$27) + -3)|0;
     $421 = $hold$27 >>> 3;
     $403 = $415;$bits$26 = $420;$have$30 = $have$31;$hold$26 = $421;$next$30 = $next$31;
    }
    while(1) {
     $422 = ($423>>>0)<(19);
     if (!($422)) {
      break;
     }
     $424 = (($423) + 1)|0;
     HEAP32[$40>>2] = $424;
     $425 = (12420 + ($423<<1)|0);
     $426 = HEAP16[$425>>1]|0;
     $427 = $426&65535;
     $428 = (((($2)) + 112|0) + ($427<<1)|0);
     HEAP16[$428>>1] = 0;
     $423 = $424;
    }
    HEAP32[$45>>2] = $44;
    HEAP32[$36>>2] = $$cast;
    HEAP32[$37>>2] = 7;
    $429 = (_inflate_table(0,$46,19,$45,$37,$47)|0);
    $430 = ($429|0)==(0);
    if ($430) {
     HEAP32[$40>>2] = 0;
     HEAP32[$2>>2] = 18;
     $bits$28 = $bits$26;$have$32 = $have$30;$hold$28 = $hold$26;$next$32 = $next$30;$ret$1 = 0;
     label = 168;
     break;
    } else {
     HEAP32[$25>>2] = 22985;
     HEAP32[$2>>2] = 29;
     $bits$0$be = $bits$26;$have$0$be = $have$30;$hold$0$be = $hold$26;$left$0$be = $left$0;$next$0$be = $next$30;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $429;
     break;
    }
   }
   else if ((label|0) == 343) {
    label = 0;
    $1037 = HEAP32[$22>>2]|0;
    $1038 = ($1037|0)==(0);
    if ($1038) {
     $bits$58 = $bits$56;$have$62 = $have$60;$hold$58 = $hold$56;$next$62 = $next$60;
     label = 350;
     break L17;
    }
    $1039 = HEAP32[$23>>2]|0;
    $1040 = ($1039|0)==(0);
    if ($1040) {
     $bits$58 = $bits$56;$have$62 = $have$60;$hold$58 = $hold$56;$next$62 = $next$60;
     label = 350;
     break L17;
    } else {
     $bits$57 = $bits$56;$have$61 = $have$60;$hold$57 = $hold$56;$next$61 = $next$60;
    }
    while(1) {
     $1041 = ($bits$57>>>0)<(32);
     if (!($1041)) {
      break;
     }
     $1042 = ($have$61|0)==(0);
     if ($1042) {
      $bits$61 = $bits$57;$have$65 = 0;$hold$61 = $hold$57;$left$0362 = $left$0;$next$65 = $next$61;$out$5 = $out$2;$ret$9 = $ret$0;
      break L17;
     }
     $1043 = (($bits$57) + 8)|0;
     $1044 = HEAP8[$next$61>>0]|0;
     $1045 = $1044&255;
     $1046 = $1045 << $bits$57;
     $1047 = (($hold$57) + ($1046))|0;
     $1048 = ((($next$61)) + 1|0);
     $1049 = (($have$61) + -1)|0;
     $bits$57 = $1043;$have$61 = $1049;$hold$57 = $1047;$next$61 = $1048;
    }
    $1050 = HEAP32[$58>>2]|0;
    $1051 = ($hold$57|0)==($1050|0);
    if ($1051) {
     $bits$58 = 0;$have$62 = $have$61;$hold$58 = 0;$next$62 = $next$61;
     label = 350;
     break L17;
    }
    HEAP32[$25>>2] = 23144;
    HEAP32[$2>>2] = 29;
    $bits$0$be = $bits$57;$have$0$be = $have$61;$hold$0$be = $hold$57;$left$0$be = $left$0;$next$0$be = $next$61;$out$0$be = $out$2;$put$0$be = $put$0;$ret$0$be = $ret$0;
   }
  } while(0);
  do {
   if ((label|0) == 53) {
    while(1) {
     label = 0;
     $154 = ($bits$6>>>0)<(16);
     if (!($154)) {
      break;
     }
     $155 = ($have$6|0)==(0);
     if ($155) {
      $bits$61 = $bits$6;$have$65 = 0;$hold$61 = $hold$6;$left$0362 = $left$0;$next$65 = $next$6;$out$5 = $out$0;$ret$9 = $ret$0;
      break L17;
     }
     $156 = (($bits$6) + 8)|0;
     $157 = HEAP8[$next$6>>0]|0;
     $158 = $157&255;
     $159 = $158 << $bits$6;
     $160 = (($hold$6) + ($159))|0;
     $161 = ((($next$6)) + 1|0);
     $162 = (($have$6) + -1)|0;
     $bits$6 = $156;$have$6 = $162;$hold$6 = $160;$next$6 = $161;
     label = 53;
    }
    $163 = HEAP32[$24>>2]|0;
    $164 = ($163|0)==(0|0);
    if (!($164)) {
     $165 = $hold$6 & 255;
     $166 = ((($163)) + 8|0);
     HEAP32[$166>>2] = $165;
     $167 = $hold$6 >>> 8;
     $168 = HEAP32[$24>>2]|0;
     $169 = ((($168)) + 12|0);
     HEAP32[$169>>2] = $167;
    }
    $170 = HEAP32[$23>>2]|0;
    $171 = $170 & 512;
    $172 = ($171|0)==(0);
    if (!($172)) {
     $173 = $hold$6&255;
     HEAP8[$hbuf>>0] = $173;
     $174 = $hold$6 >>> 8;
     $175 = $174&255;
     HEAP8[$30>>0] = $175;
     $176 = HEAP32[$28>>2]|0;
     $177 = (_crc32($176,$hbuf,2)|0);
     HEAP32[$28>>2] = $177;
    }
    HEAP32[$2>>2] = 4;
    $bits$7 = 0;$have$7 = $have$6;$hold$7 = 0;$next$7 = $next$6;
    label = 61;
   }
   else if ((label|0) == 124) {
    label = 0;
    if ($33) {
     $bits$61$ph = $bits$18;$have$65$ph = $have$22;$hold$61$ph = $hold$18;$left$0$lcssa333 = $left$0;$next$65$ph = $next$22;$ret$9$ph = $ret$0;
     label = 351;
     break L17;
    }
    if ($34) {
     $bits$61$ph = $bits$18;$have$65$ph = $have$22;$hold$61$ph = $hold$18;$left$0$lcssa333 = $left$0;$next$65$ph = $next$22;$ret$9$ph = $ret$0;
     label = 351;
     break L17;
    } else {
     $bits$19 = $bits$18;$have$23 = $have$22;$hold$19 = $hold$18;$next$23 = $next$22;
     label = 126;
    }
   }
   else if ((label|0) == 147) {
    label = 0;
    $370 = HEAP32[$31>>2]|0;
    $371 = ($370|0)==(0);
    if ($371) {
     HEAP32[$2>>2] = 11;
     $bits$0$be = $bits$23;$have$0$be = $have$27;$hold$0$be = $hold$23;$left$0$be = $left$0;$next$0$be = $next$27;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$0;
     break;
    }
    $372 = ($370>>>0)>($have$27>>>0);
    $have$27$ = $372 ? $have$27 : $370;
    $373 = ($have$27$>>>0)>($left$0>>>0);
    $copy$4 = $373 ? $left$0 : $have$27$;
    $374 = ($copy$4|0)==(0);
    if ($374) {
     $bits$61$ph = $bits$23;$have$65$ph = $have$27;$hold$61$ph = $hold$23;$left$0$lcssa333 = $left$0;$next$65$ph = $next$27;$ret$9$ph = $ret$0;
     label = 351;
     break L17;
    }
    _memcpy(($put$0|0),($next$27|0),($copy$4|0))|0;
    $375 = (($have$27) - ($copy$4))|0;
    $376 = (($next$27) + ($copy$4)|0);
    $377 = (($left$0) - ($copy$4))|0;
    $378 = (($put$0) + ($copy$4)|0);
    $379 = HEAP32[$31>>2]|0;
    $380 = (($379) - ($copy$4))|0;
    HEAP32[$31>>2] = $380;
    $bits$0$be = $bits$23;$have$0$be = $375;$hold$0$be = $hold$23;$left$0$be = $377;$next$0$be = $376;$out$0$be = $out$0;$put$0$be = $378;$ret$0$be = $ret$0;
   }
   else if ((label|0) == 168) {
    label = 0;
    $bits$29 = $bits$28;$have$33 = $have$32;$hold$29 = $hold$28;$next$33 = $next$32;
    L165: while(1) {
     $431 = HEAP32[$40>>2]|0;
     $432 = HEAP32[$41>>2]|0;
     $433 = HEAP32[$42>>2]|0;
     $434 = (($432) + ($433))|0;
     $435 = ($431>>>0)<($434>>>0);
     if (!($435)) {
      label = 199;
      break;
     }
     $436 = HEAP32[$37>>2]|0;
     $437 = 1 << $436;
     $438 = (($437) + -1)|0;
     $439 = HEAP32[$36>>2]|0;
     $bits$30 = $bits$29;$have$34 = $have$33;$hold$30 = $hold$29;$next$34 = $next$33;
     while(1) {
      $440 = $hold$30 & $438;
      $441 = (($439) + ($440<<2)|0);
      $442 = HEAPU16[$441>>1]|(HEAPU16[$441+2>>1]<<16);
      $443 = $442 >>> 8;
      $444 = $443 & 255;
      $445 = ($bits$30>>>0)<($444>>>0);
      if (!($445)) {
       break;
      }
      $446 = ($have$34|0)==(0);
      if ($446) {
       $bits$61 = $bits$30;$have$65 = 0;$hold$61 = $hold$30;$left$0362 = $left$0;$next$65 = $next$34;$out$5 = $out$0;$ret$9 = $ret$1;
       break L17;
      }
      $447 = (($bits$30) + 8)|0;
      $448 = HEAP8[$next$34>>0]|0;
      $449 = $448&255;
      $450 = $449 << $bits$30;
      $451 = (($hold$30) + ($450))|0;
      $452 = ((($next$34)) + 1|0);
      $453 = (($have$34) + -1)|0;
      $bits$30 = $447;$have$34 = $453;$hold$30 = $451;$next$34 = $452;
     }
     $454 = $442 >>> 16;
     $455 = $454&65535;
     $456 = ($455&65535)<(16);
     if ($456) {
      $457 = (($bits$30) - ($444))|0;
      $458 = $hold$30 >>> $444;
      $459 = (($431) + 1)|0;
      HEAP32[$40>>2] = $459;
      $460 = (((($2)) + 112|0) + ($431<<1)|0);
      HEAP16[$460>>1] = $455;
      $bits$29 = $457;$have$33 = $have$34;$hold$29 = $458;$next$33 = $next$34;
      continue;
     }
     switch ($455<<16>>16) {
     case 16:  {
      $461 = (($444) + 2)|0;
      $bits$31 = $bits$30;$have$35 = $have$34;$hold$31 = $hold$30;$next$35 = $next$34;
      while(1) {
       $462 = ($bits$31>>>0)<($461>>>0);
       if (!($462)) {
        break;
       }
       $463 = ($have$35|0)==(0);
       if ($463) {
        $bits$61 = $bits$31;$have$65 = 0;$hold$61 = $hold$31;$left$0362 = $left$0;$next$65 = $next$35;$out$5 = $out$0;$ret$9 = $ret$1;
        break L17;
       }
       $464 = (($bits$31) + 8)|0;
       $465 = HEAP8[$next$35>>0]|0;
       $466 = $465&255;
       $467 = $466 << $bits$31;
       $468 = (($hold$31) + ($467))|0;
       $469 = ((($next$35)) + 1|0);
       $470 = (($have$35) + -1)|0;
       $bits$31 = $464;$have$35 = $470;$hold$31 = $468;$next$35 = $469;
      }
      $471 = $hold$31 >>> $444;
      $472 = (($bits$31) - ($444))|0;
      $473 = ($431|0)==(0);
      if ($473) {
       label = 182;
       break L165;
      }
      $474 = (($431) + -1)|0;
      $475 = (((($2)) + 112|0) + ($474<<1)|0);
      $476 = HEAP16[$475>>1]|0;
      $477 = $476&65535;
      $478 = $471 & 3;
      $479 = (($478) + 3)|0;
      $480 = (($472) + -2)|0;
      $481 = $471 >>> 2;
      $bits$35 = $480;$copy$6 = $479;$have$39 = $have$35;$hold$35 = $481;$len$1 = $477;$next$39 = $next$35;
      break;
     }
     case 17:  {
      $483 = (($444) + 3)|0;
      $bits$32 = $bits$30;$have$36 = $have$34;$hold$32 = $hold$30;$next$36 = $next$34;
      while(1) {
       $484 = ($bits$32>>>0)<($483>>>0);
       if (!($484)) {
        break;
       }
       $485 = ($have$36|0)==(0);
       if ($485) {
        $bits$61 = $bits$32;$have$65 = 0;$hold$61 = $hold$32;$left$0362 = $left$0;$next$65 = $next$36;$out$5 = $out$0;$ret$9 = $ret$1;
        break L17;
       }
       $486 = (($bits$32) + 8)|0;
       $487 = HEAP8[$next$36>>0]|0;
       $488 = $487&255;
       $489 = $488 << $bits$32;
       $490 = (($hold$32) + ($489))|0;
       $491 = ((($next$36)) + 1|0);
       $492 = (($have$36) + -1)|0;
       $bits$32 = $486;$have$36 = $492;$hold$32 = $490;$next$36 = $491;
      }
      $493 = $hold$32 >>> $444;
      $494 = (($bits$32) - ($444))|0;
      $495 = $493 & 7;
      $496 = (($495) + 3)|0;
      $497 = (($494) + -3)|0;
      $498 = $493 >>> 3;
      $bits$35 = $497;$copy$6 = $496;$have$39 = $have$36;$hold$35 = $498;$len$1 = 0;$next$39 = $next$36;
      break;
     }
     default: {
      $482 = (($444) + 7)|0;
      $bits$33 = $bits$30;$have$37 = $have$34;$hold$33 = $hold$30;$next$37 = $next$34;
      while(1) {
       $499 = ($bits$33>>>0)<($482>>>0);
       if (!($499)) {
        break;
       }
       $500 = ($have$37|0)==(0);
       if ($500) {
        $bits$61 = $bits$33;$have$65 = 0;$hold$61 = $hold$33;$left$0362 = $left$0;$next$65 = $next$37;$out$5 = $out$0;$ret$9 = $ret$1;
        break L17;
       }
       $501 = (($bits$33) + 8)|0;
       $502 = HEAP8[$next$37>>0]|0;
       $503 = $502&255;
       $504 = $503 << $bits$33;
       $505 = (($hold$33) + ($504))|0;
       $506 = ((($next$37)) + 1|0);
       $507 = (($have$37) + -1)|0;
       $bits$33 = $501;$have$37 = $507;$hold$33 = $505;$next$37 = $506;
      }
      $508 = $hold$33 >>> $444;
      $509 = (($bits$33) - ($444))|0;
      $510 = $508 & 127;
      $511 = (($510) + 11)|0;
      $512 = (($509) + -7)|0;
      $513 = $508 >>> 7;
      $bits$35 = $512;$copy$6 = $511;$have$39 = $have$37;$hold$35 = $513;$len$1 = 0;$next$39 = $next$37;
     }
     }
     $514 = (($431) + ($copy$6))|0;
     $515 = ($514>>>0)>($434>>>0);
     if ($515) {
      label = 196;
      break;
     }
     $516 = $len$1&65535;
     $copy$7 = $copy$6;
     while(1) {
      $517 = ($copy$7|0)==(0);
      if ($517) {
       $bits$29 = $bits$35;$have$33 = $have$39;$hold$29 = $hold$35;$next$33 = $next$39;
       continue L165;
      }
      $518 = (($copy$7) + -1)|0;
      $519 = HEAP32[$40>>2]|0;
      $520 = (($519) + 1)|0;
      HEAP32[$40>>2] = $520;
      $521 = (((($2)) + 112|0) + ($519<<1)|0);
      HEAP16[$521>>1] = $516;
      $copy$7 = $518;
     }
    }
    if ((label|0) == 182) {
     label = 0;
     HEAP32[$25>>2] = 23010;
     HEAP32[$2>>2] = 29;
     $bits$0$be = $472;$have$0$be = $have$35;$hold$0$be = $471;$left$0$be = $left$0;$next$0$be = $next$35;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$1;
     break;
    }
    else if ((label|0) == 196) {
     label = 0;
     HEAP32[$25>>2] = 23010;
     HEAP32[$2>>2] = 29;
     $bits$0$be = $bits$35;$have$0$be = $have$39;$hold$0$be = $hold$35;$left$0$be = $left$0;$next$0$be = $next$39;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$1;
     break;
    }
    else if ((label|0) == 199) {
     label = 0;
     $$pre504 = HEAP32[$2>>2]|0;
     $522 = ($$pre504|0)==(29);
     if ($522) {
      $bits$0$be = $bits$29;$have$0$be = $have$33;$hold$0$be = $hold$29;$left$0$be = $left$0;$next$0$be = $next$33;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$1;
      break;
     }
     $523 = HEAP16[$43>>1]|0;
     $524 = ($523<<16>>16)==(0);
     if ($524) {
      HEAP32[$25>>2] = 23036;
      HEAP32[$2>>2] = 29;
      $bits$0$be = $bits$29;$have$0$be = $have$33;$hold$0$be = $hold$29;$left$0$be = $left$0;$next$0$be = $next$33;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$1;
      break;
     }
     HEAP32[$45>>2] = $44;
     HEAP32[$36>>2] = $$cast;
     HEAP32[$37>>2] = 9;
     $525 = HEAP32[$41>>2]|0;
     $526 = (_inflate_table(1,$46,$525,$45,$37,$47)|0);
     $527 = ($526|0)==(0);
     if (!($527)) {
      HEAP32[$25>>2] = 23073;
      HEAP32[$2>>2] = 29;
      $bits$0$be = $bits$29;$have$0$be = $have$33;$hold$0$be = $hold$29;$left$0$be = $left$0;$next$0$be = $next$33;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $526;
      break;
     }
     $528 = HEAP32[$45>>2]|0;
     HEAP32[$38>>2] = $528;
     HEAP32[$39>>2] = 6;
     $529 = HEAP32[$41>>2]|0;
     $530 = (((($2)) + 112|0) + ($529<<1)|0);
     $531 = HEAP32[$42>>2]|0;
     $532 = (_inflate_table(2,$530,$531,$45,$39,$47)|0);
     $533 = ($532|0)==(0);
     if ($533) {
      HEAP32[$2>>2] = 19;
      if ($34) {
       $bits$61$ph = $bits$29;$have$65$ph = $have$33;$hold$61$ph = $hold$29;$left$0$lcssa333 = $left$0;$next$65$ph = $next$33;$ret$9$ph = 0;
       label = 351;
       break L17;
      } else {
       $bits$38 = $bits$29;$have$42 = $have$33;$hold$38 = $hold$29;$next$42 = $next$33;$ret$2 = 0;
       label = 207;
       break;
      }
     } else {
      HEAP32[$25>>2] = 23101;
      HEAP32[$2>>2] = 29;
      $bits$0$be = $bits$29;$have$0$be = $have$33;$hold$0$be = $hold$29;$left$0$be = $left$0;$next$0$be = $next$33;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $532;
      break;
     }
    }
   }
  } while(0);
  do {
   if ((label|0) == 61) {
    label = 0;
    $178 = HEAP32[$23>>2]|0;
    $179 = $178 & 1024;
    $180 = ($179|0)==(0);
    if ($180) {
     $201 = HEAP32[$24>>2]|0;
     $202 = ($201|0)==(0|0);
     if ($202) {
      $bits$9 = $bits$7;$have$9 = $have$7;$hold$9 = $hold$7;$next$9 = $next$7;
     } else {
      $203 = ((($201)) + 16|0);
      HEAP32[$203>>2] = 0;
      $bits$9 = $bits$7;$have$9 = $have$7;$hold$9 = $hold$7;$next$9 = $next$7;
     }
    } else {
     $bits$8 = $bits$7;$have$8 = $have$7;$hold$8 = $hold$7;$next$8 = $next$7;
     while(1) {
      $181 = ($bits$8>>>0)<(16);
      if (!($181)) {
       break;
      }
      $182 = ($have$8|0)==(0);
      if ($182) {
       $bits$61 = $bits$8;$have$65 = 0;$hold$61 = $hold$8;$left$0362 = $left$0;$next$65 = $next$8;$out$5 = $out$0;$ret$9 = $ret$0;
       break L17;
      }
      $183 = (($bits$8) + 8)|0;
      $184 = HEAP8[$next$8>>0]|0;
      $185 = $184&255;
      $186 = $185 << $bits$8;
      $187 = (($hold$8) + ($186))|0;
      $188 = ((($next$8)) + 1|0);
      $189 = (($have$8) + -1)|0;
      $bits$8 = $183;$have$8 = $189;$hold$8 = $187;$next$8 = $188;
     }
     HEAP32[$31>>2] = $hold$8;
     $190 = HEAP32[$24>>2]|0;
     $191 = ($190|0)==(0|0);
     if ($191) {
      $194 = $178;
     } else {
      $192 = ((($190)) + 20|0);
      HEAP32[$192>>2] = $hold$8;
      $$pre513 = HEAP32[$23>>2]|0;
      $194 = $$pre513;
     }
     $193 = $194 & 512;
     $195 = ($193|0)==(0);
     if ($195) {
      $bits$9 = 0;$have$9 = $have$8;$hold$9 = 0;$next$9 = $next$8;
     } else {
      $196 = $hold$8&255;
      HEAP8[$hbuf>>0] = $196;
      $197 = $hold$8 >>> 8;
      $198 = $197&255;
      HEAP8[$30>>0] = $198;
      $199 = HEAP32[$28>>2]|0;
      $200 = (_crc32($199,$hbuf,2)|0);
      HEAP32[$28>>2] = $200;
      $bits$9 = 0;$have$9 = $have$8;$hold$9 = 0;$next$9 = $next$8;
     }
    }
    HEAP32[$2>>2] = 5;
    $bits$10 = $bits$9;$have$10 = $have$9;$hold$10 = $hold$9;$next$10 = $next$9;
    label = 72;
   }
   else if ((label|0) == 126) {
    label = 0;
    $333 = HEAP32[$35>>2]|0;
    $334 = ($333|0)==(0);
    if ($334) {
     $bits$20 = $bits$19;$have$24 = $have$23;$hold$20 = $hold$19;$next$24 = $next$23;
    } else {
     $335 = $bits$19 & -8;
     $336 = $bits$19 & 7;
     $337 = $hold$19 >>> $336;
     HEAP32[$2>>2] = 26;
     $bits$0$be = $335;$have$0$be = $have$23;$hold$0$be = $337;$left$0$be = $left$0;$next$0$be = $next$23;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$0;
     break;
    }
    while(1) {
     $338 = ($bits$20>>>0)<(3);
     if (!($338)) {
      break;
     }
     $339 = ($have$24|0)==(0);
     if ($339) {
      $bits$61 = $bits$20;$have$65 = 0;$hold$61 = $hold$20;$left$0362 = $left$0;$next$65 = $next$24;$out$5 = $out$0;$ret$9 = $ret$0;
      break L17;
     }
     $340 = (($bits$20) + 8)|0;
     $341 = HEAP8[$next$24>>0]|0;
     $342 = $341&255;
     $343 = $342 << $bits$20;
     $344 = (($hold$20) + ($343))|0;
     $345 = ((($next$24)) + 1|0);
     $346 = (($have$24) + -1)|0;
     $bits$20 = $340;$have$24 = $346;$hold$20 = $344;$next$24 = $345;
    }
    $347 = $hold$20 & 1;
    HEAP32[$35>>2] = $347;
    $348 = $hold$20 >>> 1;
    $349 = $348 & 3;
    switch ($349|0) {
    case 0:  {
     HEAP32[$2>>2] = 13;
     break;
    }
    case 1:  {
     HEAP32[$36>>2] = 10244;
     HEAP32[$37>>2] = 9;
     HEAP32[$38>>2] = 12292;
     HEAP32[$39>>2] = 5;
     HEAP32[$2>>2] = 19;
     if ($34) {
      label = 134;
      break L17;
     }
     break;
    }
    case 2:  {
     HEAP32[$2>>2] = 16;
     break;
    }
    case 3:  {
     HEAP32[$25>>2] = 22901;
     HEAP32[$2>>2] = 29;
     break;
    }
    default: {
     label = 137;
     break L17;
    }
    }
    $352 = (($bits$20) + -3)|0;
    $353 = $hold$20 >>> 3;
    $bits$0$be = $352;$have$0$be = $have$24;$hold$0$be = $353;$left$0$be = $left$0;$next$0$be = $next$24;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$0;
   }
   else if ((label|0) == 207) {
    label = 0;
    HEAP32[$2>>2] = 20;
    $bits$39 = $bits$38;$have$43 = $have$42;$hold$39 = $hold$38;$next$43 = $next$42;$ret$3 = $ret$2;
    label = 208;
   }
  } while(0);
  do {
   if ((label|0) == 72) {
    label = 0;
    $204 = HEAP32[$23>>2]|0;
    $205 = $204 & 1024;
    $206 = ($205|0)==(0);
    if ($206) {
     $1158 = $204;$have$12 = $have$10;$next$12 = $next$10;
    } else {
     $207 = HEAP32[$31>>2]|0;
     $208 = ($207>>>0)>($have$10>>>0);
     $have$10$ = $208 ? $have$10 : $207;
     $209 = ($have$10$|0)==(0);
     if ($209) {
      $1159 = $204;$234 = $207;$have$11 = $have$10;$next$11 = $next$10;
     } else {
      $210 = HEAP32[$24>>2]|0;
      $211 = ($210|0)==(0|0);
      if ($211) {
       $225 = $204;
      } else {
       $212 = ((($210)) + 16|0);
       $213 = HEAP32[$212>>2]|0;
       $214 = ($213|0)==(0|0);
       if ($214) {
        $225 = $204;
       } else {
        $215 = ((($210)) + 20|0);
        $216 = HEAP32[$215>>2]|0;
        $217 = (($216) - ($207))|0;
        $218 = (($213) + ($217)|0);
        $219 = (($217) + ($have$10$))|0;
        $220 = ((($210)) + 24|0);
        $221 = HEAP32[$220>>2]|0;
        $222 = ($219>>>0)>($221>>>0);
        $223 = (($221) - ($217))|0;
        $$have$10$ = $222 ? $223 : $have$10$;
        _memcpy(($218|0),($next$10|0),($$have$10$|0))|0;
        $$pre514 = HEAP32[$23>>2]|0;
        $225 = $$pre514;
       }
      }
      $224 = $225 & 512;
      $226 = ($224|0)==(0);
      if (!($226)) {
       $227 = HEAP32[$28>>2]|0;
       $228 = (_crc32($227,$next$10,$have$10$)|0);
       HEAP32[$28>>2] = $228;
      }
      $229 = (($have$10) - ($have$10$))|0;
      $230 = (($next$10) + ($have$10$)|0);
      $231 = HEAP32[$31>>2]|0;
      $232 = (($231) - ($have$10$))|0;
      HEAP32[$31>>2] = $232;
      $1159 = $225;$234 = $232;$have$11 = $229;$next$11 = $230;
     }
     $233 = ($234|0)==(0);
     if ($233) {
      $1158 = $1159;$have$12 = $have$11;$next$12 = $next$11;
     } else {
      $bits$61$ph = $bits$10;$have$65$ph = $have$11;$hold$61$ph = $hold$10;$left$0$lcssa333 = $left$0;$next$65$ph = $next$11;$ret$9$ph = $ret$0;
      label = 351;
      break L17;
     }
    }
    HEAP32[$31>>2] = 0;
    HEAP32[$2>>2] = 6;
    $236 = $1158;$bits$11 = $bits$10;$have$13 = $have$12;$hold$11 = $hold$10;$next$13 = $next$12;
    label = 82;
   }
   else if ((label|0) == 208) {
    label = 0;
    $534 = ($have$43>>>0)>(5);
    $535 = ($left$0>>>0)>(257);
    $or$cond964 = $534 & $535;
    if (!($or$cond964)) {
     HEAP32[$48>>2] = 0;
     $810 = HEAP32[$37>>2]|0;
     $811 = 1 << $810;
     $812 = (($811) + -1)|0;
     $813 = HEAP32[$36>>2]|0;
     $bits$40 = $bits$39;$have$44 = $have$43;$hold$40 = $hold$39;$next$44 = $next$43;
     while(1) {
      $814 = $hold$40 & $812;
      $815 = (($813) + ($814<<2)|0);
      $816 = HEAPU16[$815>>1]|(HEAPU16[$815+2>>1]<<16);
      $817 = $816 >>> 8;
      $818 = $817 & 255;
      $819 = ($818>>>0)>($bits$40>>>0);
      if (!($819)) {
       break;
      }
      $820 = ($have$44|0)==(0);
      if ($820) {
       $bits$61 = $bits$40;$have$65 = 0;$hold$61 = $hold$40;$left$0362 = $left$0;$next$65 = $next$44;$out$5 = $out$0;$ret$9 = $ret$3;
       break L17;
      }
      $821 = (($bits$40) + 8)|0;
      $822 = HEAP8[$next$44>>0]|0;
      $823 = $822&255;
      $824 = $823 << $bits$40;
      $825 = (($hold$40) + ($824))|0;
      $826 = ((($next$44)) + 1|0);
      $827 = (($have$44) + -1)|0;
      $bits$40 = $821;$have$44 = $827;$hold$40 = $825;$next$44 = $826;
     }
     $828 = $816&255;
     $829 = $816 >>> 16;
     $830 = ($828<<24>>24)==(0);
     if ($830) {
      $862 = 0;$bits$42 = $bits$40;$have$46 = $have$44;$here$sroa$0$0 = 0;$here$sroa$16$0 = $817;$here$sroa$32$0 = $829;$hold$42 = $hold$40;$next$46 = $next$44;
     } else {
      $831 = ($828&255)<(16);
      if ($831) {
       $832 = $816 >>> 16;
       $833 = $816 & 255;
       $834 = (($818) + ($833))|0;
       $835 = 1 << $834;
       $836 = (($835) + -1)|0;
       $bits$41 = $bits$40;$have$45 = $have$44;$hold$41 = $hold$40;$next$45 = $next$44;
       while(1) {
        $837 = $hold$41 & $836;
        $838 = $837 >>> $818;
        $839 = (($832) + ($838))|0;
        $840 = (($813) + ($839<<2)|0);
        $841 = HEAPU16[$840>>1]|(HEAPU16[$840+2>>1]<<16);
        $842 = $841 >>> 8;
        $843 = $842 & 255;
        $844 = (($818) + ($843))|0;
        $845 = ($844>>>0)>($bits$41>>>0);
        if (!($845)) {
         break;
        }
        $846 = ($have$45|0)==(0);
        if ($846) {
         $bits$61 = $bits$41;$have$65 = 0;$hold$61 = $hold$41;$left$0362 = $left$0;$next$65 = $next$45;$out$5 = $out$0;$ret$9 = $ret$3;
         break L17;
        }
        $847 = (($bits$41) + 8)|0;
        $848 = HEAP8[$next$45>>0]|0;
        $849 = $848&255;
        $850 = $849 << $bits$41;
        $851 = (($hold$41) + ($850))|0;
        $852 = ((($next$45)) + 1|0);
        $853 = (($have$45) + -1)|0;
        $bits$41 = $847;$have$45 = $853;$hold$41 = $851;$next$45 = $852;
       }
       $854 = $841&255;
       $855 = $841 >>> 16;
       $856 = (($bits$41) - ($818))|0;
       $857 = $hold$41 >>> $818;
       HEAP32[$48>>2] = $818;
       $862 = $818;$bits$42 = $856;$have$46 = $have$45;$here$sroa$0$0 = $854;$here$sroa$16$0 = $842;$here$sroa$32$0 = $855;$hold$42 = $857;$next$46 = $next$45;
      } else {
       $862 = 0;$bits$42 = $bits$40;$have$46 = $have$44;$here$sroa$0$0 = $828;$here$sroa$16$0 = $817;$here$sroa$32$0 = $829;$hold$42 = $hold$40;$next$46 = $next$44;
      }
     }
     $858 = $here$sroa$16$0 & 255;
     $859 = $hold$42 >>> $858;
     $860 = (($bits$42) - ($858))|0;
     $861 = (($862) + ($858))|0;
     HEAP32[$48>>2] = $861;
     HEAP32[$31>>2] = $here$sroa$32$0;
     $863 = ($here$sroa$0$0<<24>>24)==(0);
     if ($863) {
      HEAP32[$2>>2] = 25;
      $bits$0$be = $860;$have$0$be = $have$46;$hold$0$be = $859;$left$0$be = $left$0;$next$0$be = $next$46;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$3;
      break;
     }
     $864 = $here$sroa$0$0 & 32;
     $865 = ($864<<24>>24)==(0);
     if (!($865)) {
      HEAP32[$48>>2] = -1;
      HEAP32[$2>>2] = 11;
      $bits$0$be = $860;$have$0$be = $have$46;$hold$0$be = $859;$left$0$be = $left$0;$next$0$be = $next$46;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$3;
      break;
     }
     $866 = $here$sroa$0$0 & 64;
     $867 = ($866<<24>>24)==(0);
     if ($867) {
      $868 = $here$sroa$0$0&255;
      $869 = $868 & 15;
      HEAP32[$49>>2] = $869;
      HEAP32[$2>>2] = 21;
      $871 = $869;$bits$43 = $860;$have$47 = $have$46;$hold$43 = $859;$next$47 = $next$46;$ret$4 = $ret$3;
      label = 287;
      break;
     } else {
      HEAP32[$25>>2] = 24052;
      HEAP32[$2>>2] = 29;
      $bits$0$be = $860;$have$0$be = $have$46;$hold$0$be = $859;$left$0$be = $left$0;$next$0$be = $next$46;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$3;
      break;
     }
    }
    HEAP32[$4>>2] = $put$0;
    HEAP32[$14>>2] = $left$0;
    HEAP32[$strm>>2] = $next$43;
    HEAP32[$16>>2] = $have$43;
    HEAP32[$20>>2] = $hold$39;
    HEAP32[$18>>2] = $bits$39;
    $536 = HEAP32[$1>>2]|0;
    $537 = HEAP32[$strm>>2]|0;
    $538 = ((($537)) + -1|0);
    $539 = HEAP32[$16>>2]|0;
    $540 = (($539) + -5)|0;
    $541 = (($538) + ($540)|0);
    $542 = HEAP32[$4>>2]|0;
    $543 = ((($542)) + -1|0);
    $544 = HEAP32[$14>>2]|0;
    $545 = (($544) - ($out$0))|0;
    $546 = (($543) + ($545)|0);
    $547 = (($544) + -257)|0;
    $548 = (($543) + ($547)|0);
    $549 = ((($536)) + 40|0);
    $550 = HEAP32[$549>>2]|0;
    $551 = ((($536)) + 44|0);
    $552 = HEAP32[$551>>2]|0;
    $553 = ((($536)) + 48|0);
    $554 = HEAP32[$553>>2]|0;
    $555 = ((($536)) + 52|0);
    $556 = HEAP32[$555>>2]|0;
    $557 = ((($536)) + 56|0);
    $558 = HEAP32[$557>>2]|0;
    $559 = ((($536)) + 60|0);
    $560 = HEAP32[$559>>2]|0;
    $561 = ((($536)) + 76|0);
    $562 = HEAP32[$561>>2]|0;
    $563 = ((($536)) + 80|0);
    $564 = HEAP32[$563>>2]|0;
    $565 = ((($536)) + 84|0);
    $566 = HEAP32[$565>>2]|0;
    $567 = 1 << $566;
    $568 = (($567) + -1)|0;
    $569 = ((($536)) + 88|0);
    $570 = HEAP32[$569>>2]|0;
    $571 = 1 << $570;
    $572 = (($571) + -1)|0;
    $573 = $546;
    $574 = ((($536)) + 7104|0);
    $575 = ((($556)) + -1|0);
    $576 = ($554|0)==(0);
    $577 = (($550) + ($554))|0;
    $578 = (($573) - ($554))|0;
    $bits$0$i = $560;$hold$0$i = $558;$in$0$i = $538;$out$0$i = $543;
    L287: while(1) {
     $579 = ($bits$0$i>>>0)<(15);
     if ($579) {
      $580 = ((($in$0$i)) + 1|0);
      $581 = HEAP8[$580>>0]|0;
      $582 = $581&255;
      $583 = $582 << $bits$0$i;
      $584 = (($hold$0$i) + ($583))|0;
      $585 = (($bits$0$i) + 8)|0;
      $586 = ((($in$0$i)) + 2|0);
      $587 = HEAP8[$586>>0]|0;
      $588 = $587&255;
      $589 = $588 << $585;
      $590 = (($584) + ($589))|0;
      $591 = (($bits$0$i) + 16)|0;
      $bits$1$i = $591;$hold$1$i = $590;$in$1$i = $586;
     } else {
      $bits$1$i = $bits$0$i;$hold$1$i = $hold$0$i;$in$1$i = $in$0$i;
     }
     $592 = $hold$1$i & $568;
     $$pn$i = $592;$bits$2$i = $bits$1$i;$hold$2$i = $hold$1$i;
     while(1) {
      $storemerge$in$in$i = (($562) + ($$pn$i<<2)|0);
      $storemerge$i = HEAPU16[$storemerge$in$in$i>>1]|(HEAPU16[$storemerge$in$in$i+2>>1]<<16);
      $593 = $storemerge$i&255;
      $594 = $storemerge$i >>> 8;
      $595 = $storemerge$i >>> 16;
      $596 = $594 & 255;
      $597 = $hold$2$i >>> $596;
      $598 = (($bits$2$i) - ($596))|0;
      $599 = $storemerge$i & 255;
      $600 = ($593<<24>>24)==(0);
      if ($600) {
       label = 214;
       break;
      }
      $603 = $storemerge$i & 16;
      $604 = ($603|0)==(0);
      if (!($604)) {
       label = 216;
       break;
      }
      $766 = $storemerge$i & 64;
      $767 = ($766|0)==(0);
      if (!($767)) {
       label = 263;
       break L287;
      }
      $768 = 1 << $599;
      $769 = (($768) + -1)|0;
      $770 = $597 & $769;
      $771 = (($595) + ($770))|0;
      $$pn$i = $771;$bits$2$i = $598;$hold$2$i = $597;
     }
     do {
      if ((label|0) == 214) {
       label = 0;
       $601 = $595&255;
       $602 = ((($out$0$i)) + 1|0);
       HEAP8[$602>>0] = $601;
       $bits$9$i = $598;$hold$9$i = $597;$in$7$i = $in$1$i;$out$18$i = $602;
      }
      else if ((label|0) == 216) {
       label = 0;
       $605 = $storemerge$i & 15;
       $606 = ($605|0)==(0);
       if ($606) {
        $bits$4$i = $598;$hold$4$i = $597;$in$3$i = $in$1$i;$len$0$i = $595;
       } else {
        $607 = ($598>>>0)<($605>>>0);
        if ($607) {
         $608 = ((($in$1$i)) + 1|0);
         $609 = HEAP8[$608>>0]|0;
         $610 = $609&255;
         $611 = $610 << $598;
         $612 = (($597) + ($611))|0;
         $613 = (($598) + 8)|0;
         $bits$3$i = $613;$hold$3$i = $612;$in$2$i = $608;
        } else {
         $bits$3$i = $598;$hold$3$i = $597;$in$2$i = $in$1$i;
        }
        $614 = 1 << $605;
        $615 = (($614) + -1)|0;
        $616 = $hold$3$i & $615;
        $617 = (($595) + ($616))|0;
        $618 = $hold$3$i >>> $605;
        $619 = (($bits$3$i) - ($605))|0;
        $bits$4$i = $619;$hold$4$i = $618;$in$3$i = $in$2$i;$len$0$i = $617;
       }
       $620 = ($bits$4$i>>>0)<(15);
       if ($620) {
        $621 = ((($in$3$i)) + 1|0);
        $622 = HEAP8[$621>>0]|0;
        $623 = $622&255;
        $624 = $623 << $bits$4$i;
        $625 = (($hold$4$i) + ($624))|0;
        $626 = (($bits$4$i) + 8)|0;
        $627 = ((($in$3$i)) + 2|0);
        $628 = HEAP8[$627>>0]|0;
        $629 = $628&255;
        $630 = $629 << $626;
        $631 = (($625) + ($630))|0;
        $632 = (($bits$4$i) + 16)|0;
        $bits$5$i = $632;$hold$5$i = $631;$in$4$i = $627;
       } else {
        $bits$5$i = $bits$4$i;$hold$5$i = $hold$4$i;$in$4$i = $in$3$i;
       }
       $633 = $hold$5$i & $572;
       $$pn3$i = $633;$bits$6$i = $bits$5$i;$hold$6$i = $hold$5$i;
       while(1) {
        $storemerge2$in$in$i = (($564) + ($$pn3$i<<2)|0);
        $storemerge2$i = HEAPU16[$storemerge2$in$in$i>>1]|(HEAPU16[$storemerge2$in$in$i+2>>1]<<16);
        $634 = $storemerge2$i >>> 8;
        $635 = $storemerge2$i >>> 16;
        $636 = $634 & 255;
        $637 = $hold$6$i >>> $636;
        $638 = (($bits$6$i) - ($636))|0;
        $639 = $storemerge2$i & 255;
        $640 = $storemerge2$i & 16;
        $641 = ($640|0)==(0);
        if (!($641)) {
         break;
        }
        $760 = $storemerge2$i & 64;
        $761 = ($760|0)==(0);
        if (!($761)) {
         label = 260;
         break L287;
        }
        $762 = 1 << $639;
        $763 = (($762) + -1)|0;
        $764 = $637 & $763;
        $765 = (($635) + ($764))|0;
        $$pn3$i = $765;$bits$6$i = $638;$hold$6$i = $637;
       }
       $642 = $storemerge2$i & 15;
       $643 = ($638>>>0)<($642>>>0);
       if ($643) {
        $644 = ((($in$4$i)) + 1|0);
        $645 = HEAP8[$644>>0]|0;
        $646 = $645&255;
        $647 = $646 << $638;
        $648 = (($637) + ($647))|0;
        $649 = (($638) + 8)|0;
        $650 = ($649>>>0)<($642>>>0);
        if ($650) {
         $651 = ((($in$4$i)) + 2|0);
         $652 = HEAP8[$651>>0]|0;
         $653 = $652&255;
         $654 = $653 << $649;
         $655 = (($648) + ($654))|0;
         $656 = (($638) + 16)|0;
         $bits$8$i = $656;$hold$8$i = $655;$in$6$i = $651;
        } else {
         $bits$8$i = $649;$hold$8$i = $648;$in$6$i = $644;
        }
       } else {
        $bits$8$i = $638;$hold$8$i = $637;$in$6$i = $in$4$i;
       }
       $657 = 1 << $642;
       $658 = (($657) + -1)|0;
       $659 = $hold$8$i & $658;
       $660 = (($635) + ($659))|0;
       $661 = $hold$8$i >>> $642;
       $662 = (($bits$8$i) - ($642))|0;
       $663 = $out$0$i;
       $664 = (($663) - ($573))|0;
       $665 = ($660>>>0)>($664>>>0);
       if (!($665)) {
        $739 = (0 - ($660))|0;
        $740 = (($out$0$i) + ($739)|0);
        $from$11$i = $740;$len$8$i = $len$0$i;$out$14$i = $out$0$i;
        while(1) {
         $741 = ((($from$11$i)) + 1|0);
         $742 = HEAP8[$741>>0]|0;
         $743 = ((($out$14$i)) + 1|0);
         HEAP8[$743>>0] = $742;
         $744 = ((($from$11$i)) + 2|0);
         $745 = HEAP8[$744>>0]|0;
         $746 = ((($out$14$i)) + 2|0);
         HEAP8[$746>>0] = $745;
         $747 = ((($from$11$i)) + 3|0);
         $748 = HEAP8[$747>>0]|0;
         $749 = ((($out$14$i)) + 3|0);
         HEAP8[$749>>0] = $748;
         $750 = (($len$8$i) + -3)|0;
         $751 = ($750>>>0)>(2);
         if ($751) {
          $from$11$i = $747;$len$8$i = $750;$out$14$i = $749;
         } else {
          break;
         }
        }
        $752 = ($750|0)==(0);
        if ($752) {
         $bits$9$i = $662;$hold$9$i = $661;$in$7$i = $in$6$i;$out$18$i = $749;
         break;
        }
        $753 = ((($from$11$i)) + 4|0);
        $754 = HEAP8[$753>>0]|0;
        $755 = ((($out$14$i)) + 4|0);
        HEAP8[$755>>0] = $754;
        $756 = ($750>>>0)>(1);
        if (!($756)) {
         $bits$9$i = $662;$hold$9$i = $661;$in$7$i = $in$6$i;$out$18$i = $755;
         break;
        }
        $757 = ((($from$11$i)) + 5|0);
        $758 = HEAP8[$757>>0]|0;
        $759 = ((($out$14$i)) + 5|0);
        HEAP8[$759>>0] = $758;
        $bits$9$i = $662;$hold$9$i = $661;$in$7$i = $in$6$i;$out$18$i = $759;
        break;
       }
       $666 = (($660) - ($664))|0;
       $667 = ($666>>>0)>($552>>>0);
       if ($667) {
        $668 = HEAP32[$574>>2]|0;
        $669 = ($668|0)==(0);
        if (!($669)) {
         label = 230;
         break L287;
        }
       }
       do {
        if ($576) {
         $670 = (($550) - ($666))|0;
         $671 = (($575) + ($670)|0);
         $672 = ($len$0$i>>>0)>($666>>>0);
         if ($672) {
          $673 = (($len$0$i) - ($666))|0;
          $674 = (($659) + ($635))|0;
          $675 = (($674) - ($663))|0;
          $from$0$i = $671;$op$0$i = $666;$out$1$i = $out$0$i;
          while(1) {
           $676 = ((($from$0$i)) + 1|0);
           $677 = HEAP8[$676>>0]|0;
           $678 = ((($out$1$i)) + 1|0);
           HEAP8[$678>>0] = $677;
           $679 = (($op$0$i) + -1)|0;
           $680 = ($679|0)==(0);
           if ($680) {
            break;
           } else {
            $from$0$i = $676;$op$0$i = $679;$out$1$i = $678;
           }
          }
          $scevgep958 = (($out$0$i) + ($573)|0);
          $scevgep959 = (($scevgep958) + ($675)|0);
          $681 = (0 - ($660))|0;
          $682 = (($scevgep959) + ($681)|0);
          $from$10$i = $682;$len$7$i = $673;$out$11$i = $scevgep959;
         } else {
          $from$10$i = $671;$len$7$i = $len$0$i;$out$11$i = $out$0$i;
         }
        } else {
         $683 = ($554>>>0)<($666>>>0);
         if (!($683)) {
          $707 = (($554) - ($666))|0;
          $708 = (($575) + ($707)|0);
          $709 = ($len$0$i>>>0)>($666>>>0);
          if (!($709)) {
           $from$10$i = $708;$len$7$i = $len$0$i;$out$11$i = $out$0$i;
           break;
          }
          $710 = (($len$0$i) - ($666))|0;
          $711 = (($659) + ($635))|0;
          $712 = (($711) - ($663))|0;
          $from$6$i = $708;$op$3$i = $666;$out$7$i = $out$0$i;
          while(1) {
           $713 = ((($from$6$i)) + 1|0);
           $714 = HEAP8[$713>>0]|0;
           $715 = ((($out$7$i)) + 1|0);
           HEAP8[$715>>0] = $714;
           $716 = (($op$3$i) + -1)|0;
           $717 = ($716|0)==(0);
           if ($717) {
            break;
           } else {
            $from$6$i = $713;$op$3$i = $716;$out$7$i = $715;
           }
          }
          $scevgep = (($out$0$i) + ($573)|0);
          $scevgep953 = (($scevgep) + ($712)|0);
          $718 = (0 - ($660))|0;
          $719 = (($scevgep953) + ($718)|0);
          $from$10$i = $719;$len$7$i = $710;$out$11$i = $scevgep953;
          break;
         }
         $684 = (($577) - ($666))|0;
         $685 = (($575) + ($684)|0);
         $686 = (($666) - ($554))|0;
         $687 = ($len$0$i>>>0)>($686>>>0);
         if ($687) {
          $688 = (($len$0$i) - ($686))|0;
          $689 = (($659) + ($635))|0;
          $690 = (($689) - ($663))|0;
          $from$2$i = $685;$op$1$i = $686;$out$3$i = $out$0$i;
          while(1) {
           $691 = ((($from$2$i)) + 1|0);
           $692 = HEAP8[$691>>0]|0;
           $693 = ((($out$3$i)) + 1|0);
           HEAP8[$693>>0] = $692;
           $694 = (($op$1$i) + -1)|0;
           $695 = ($694|0)==(0);
           if ($695) {
            break;
           } else {
            $from$2$i = $691;$op$1$i = $694;$out$3$i = $693;
           }
          }
          $scevgep954 = (($out$0$i) + ($578)|0);
          $scevgep955 = (($scevgep954) + ($690)|0);
          $696 = ($688>>>0)>($554>>>0);
          if (!($696)) {
           $from$10$i = $575;$len$7$i = $688;$out$11$i = $scevgep955;
           break;
          }
          $697 = (($688) - ($554))|0;
          $698 = (($659) + ($635))|0;
          $699 = (($698) - ($663))|0;
          $from$3$i = $575;$op$2$i = $554;$out$4$i = $scevgep955;
          while(1) {
           $700 = ((($from$3$i)) + 1|0);
           $701 = HEAP8[$700>>0]|0;
           $702 = ((($out$4$i)) + 1|0);
           HEAP8[$702>>0] = $701;
           $703 = (($op$2$i) + -1)|0;
           $704 = ($703|0)==(0);
           if ($704) {
            break;
           } else {
            $from$3$i = $700;$op$2$i = $703;$out$4$i = $702;
           }
          }
          $scevgep956 = (($out$0$i) + ($573)|0);
          $scevgep957 = (($scevgep956) + ($699)|0);
          $705 = (0 - ($660))|0;
          $706 = (($scevgep957) + ($705)|0);
          $from$10$i = $706;$len$7$i = $697;$out$11$i = $scevgep957;
         } else {
          $from$10$i = $685;$len$7$i = $len$0$i;$out$11$i = $out$0$i;
         }
        }
       } while(0);
       while(1) {
        $720 = ($len$7$i>>>0)>(2);
        if (!($720)) {
         break;
        }
        $721 = ((($from$10$i)) + 1|0);
        $722 = HEAP8[$721>>0]|0;
        $723 = ((($out$11$i)) + 1|0);
        HEAP8[$723>>0] = $722;
        $724 = ((($from$10$i)) + 2|0);
        $725 = HEAP8[$724>>0]|0;
        $726 = ((($out$11$i)) + 2|0);
        HEAP8[$726>>0] = $725;
        $727 = ((($from$10$i)) + 3|0);
        $728 = HEAP8[$727>>0]|0;
        $729 = ((($out$11$i)) + 3|0);
        HEAP8[$729>>0] = $728;
        $730 = (($len$7$i) + -3)|0;
        $from$10$i = $727;$len$7$i = $730;$out$11$i = $729;
       }
       $731 = ($len$7$i|0)==(0);
       if ($731) {
        $bits$9$i = $662;$hold$9$i = $661;$in$7$i = $in$6$i;$out$18$i = $out$11$i;
       } else {
        $732 = ((($from$10$i)) + 1|0);
        $733 = HEAP8[$732>>0]|0;
        $734 = ((($out$11$i)) + 1|0);
        HEAP8[$734>>0] = $733;
        $735 = ($len$7$i>>>0)>(1);
        if ($735) {
         $736 = ((($from$10$i)) + 2|0);
         $737 = HEAP8[$736>>0]|0;
         $738 = ((($out$11$i)) + 2|0);
         HEAP8[$738>>0] = $737;
         $bits$9$i = $662;$hold$9$i = $661;$in$7$i = $in$6$i;$out$18$i = $738;
        } else {
         $bits$9$i = $662;$hold$9$i = $661;$in$7$i = $in$6$i;$out$18$i = $734;
        }
       }
      }
     } while(0);
     $774 = ($in$7$i>>>0)<($541>>>0);
     $775 = ($out$18$i>>>0)<($548>>>0);
     $or$cond965 = $774 & $775;
     if ($or$cond965) {
      $bits$0$i = $bits$9$i;$hold$0$i = $hold$9$i;$in$0$i = $in$7$i;$out$0$i = $out$18$i;
     } else {
      $bits$10$i = $bits$9$i;$hold$10$i = $hold$9$i;$in$8$i = $in$7$i;$out$19$i = $out$18$i;
      break;
     }
    }
    do {
     if ((label|0) == 230) {
      label = 0;
      HEAP32[$25>>2] = 24000;
      HEAP32[$536>>2] = 29;
      $bits$10$i = $662;$hold$10$i = $661;$in$8$i = $in$6$i;$out$19$i = $out$0$i;
     }
     else if ((label|0) == 260) {
      label = 0;
      HEAP32[$25>>2] = 24030;
      HEAP32[$536>>2] = 29;
      $bits$10$i = $638;$hold$10$i = $637;$in$8$i = $in$4$i;$out$19$i = $out$0$i;
     }
     else if ((label|0) == 263) {
      label = 0;
      $772 = $storemerge$i & 32;
      $773 = ($772|0)==(0);
      if ($773) {
       HEAP32[$25>>2] = 24052;
       HEAP32[$536>>2] = 29;
       $bits$10$i = $598;$hold$10$i = $597;$in$8$i = $in$1$i;$out$19$i = $out$0$i;
       break;
      } else {
       HEAP32[$536>>2] = 11;
       $bits$10$i = $598;$hold$10$i = $597;$in$8$i = $in$1$i;$out$19$i = $out$0$i;
       break;
      }
     }
    } while(0);
    $776 = $bits$10$i >>> 3;
    $777 = (0 - ($776))|0;
    $778 = (($in$8$i) + ($777)|0);
    $779 = $776 << 3;
    $780 = (($bits$10$i) - ($779))|0;
    $781 = 1 << $780;
    $782 = (($781) + -1)|0;
    $783 = $hold$10$i & $782;
    $784 = ((($778)) + 1|0);
    HEAP32[$strm>>2] = $784;
    $785 = ((($out$19$i)) + 1|0);
    HEAP32[$4>>2] = $785;
    $786 = ($778>>>0)<($541>>>0);
    $787 = $541;
    $788 = $778;
    $789 = (($787) - ($788))|0;
    $790 = $778;
    $791 = $541;
    $792 = (($791) - ($790))|0;
    $$in1$i = $786 ? $789 : $792;
    $793 = (($$in1$i) + 5)|0;
    HEAP32[$16>>2] = $793;
    $794 = ($out$19$i>>>0)<($548>>>0);
    $795 = $548;
    $796 = $out$19$i;
    $797 = (($795) - ($796))|0;
    $798 = $out$19$i;
    $799 = $548;
    $800 = (($799) - ($798))|0;
    $$in$i = $794 ? $797 : $800;
    $801 = (($$in$i) + 257)|0;
    HEAP32[$14>>2] = $801;
    HEAP32[$557>>2] = $783;
    HEAP32[$559>>2] = $780;
    $802 = HEAP32[$4>>2]|0;
    $803 = HEAP32[$14>>2]|0;
    $804 = HEAP32[$strm>>2]|0;
    $805 = HEAP32[$16>>2]|0;
    $806 = HEAP32[$20>>2]|0;
    $807 = HEAP32[$18>>2]|0;
    $808 = HEAP32[$2>>2]|0;
    $809 = ($808|0)==(11);
    if ($809) {
     HEAP32[$48>>2] = -1;
     $bits$0$be = $807;$have$0$be = $805;$hold$0$be = $806;$left$0$be = $803;$next$0$be = $804;$out$0$be = $out$0;$put$0$be = $802;$ret$0$be = $ret$3;
    } else {
     $bits$0$be = $807;$have$0$be = $805;$hold$0$be = $806;$left$0$be = $803;$next$0$be = $804;$out$0$be = $out$0;$put$0$be = $802;$ret$0$be = $ret$3;
    }
   }
  } while(0);
  if ((label|0) == 82) {
   label = 0;
   $235 = $236 & 2048;
   $237 = ($235|0)==(0);
   if ($237) {
    $264 = HEAP32[$24>>2]|0;
    $265 = ($264|0)==(0|0);
    if ($265) {
     $have$14 = $have$13;$next$14 = $next$13;
    } else {
     $266 = ((($264)) + 28|0);
     HEAP32[$266>>2] = 0;
     $have$14 = $have$13;$next$14 = $next$13;
    }
   } else {
    $238 = ($have$13|0)==(0);
    if ($238) {
     $bits$61$ph = $bits$11;$have$65$ph = 0;$hold$61$ph = $hold$11;$left$0$lcssa333 = $left$0;$next$65$ph = $next$13;$ret$9$ph = $ret$0;
     label = 351;
     break;
    } else {
     $copy$1 = 0;
    }
    while(1) {
     $239 = (($copy$1) + 1)|0;
     $240 = (($next$13) + ($copy$1)|0);
     $241 = HEAP8[$240>>0]|0;
     $242 = HEAP32[$24>>2]|0;
     $243 = ($242|0)==(0|0);
     if (!($243)) {
      $244 = ((($242)) + 28|0);
      $245 = HEAP32[$244>>2]|0;
      $246 = ($245|0)==(0|0);
      if (!($246)) {
       $247 = HEAP32[$31>>2]|0;
       $248 = ((($242)) + 32|0);
       $249 = HEAP32[$248>>2]|0;
       $250 = ($247>>>0)<($249>>>0);
       if ($250) {
        $251 = (($247) + 1)|0;
        HEAP32[$31>>2] = $251;
        $252 = HEAP32[$244>>2]|0;
        $253 = (($252) + ($247)|0);
        HEAP8[$253>>0] = $241;
       }
      }
     }
     $254 = ($241<<24>>24)!=(0);
     $255 = ($have$13>>>0)>($239>>>0);
     $or$cond23 = $254 & $255;
     if ($or$cond23) {
      $copy$1 = $239;
     } else {
      break;
     }
    }
    $256 = HEAP32[$23>>2]|0;
    $257 = $256 & 512;
    $258 = ($257|0)==(0);
    if (!($258)) {
     $259 = HEAP32[$28>>2]|0;
     $260 = (_crc32($259,$next$13,$239)|0);
     HEAP32[$28>>2] = $260;
    }
    $261 = (($have$13) - ($239))|0;
    $262 = (($next$13) + ($239)|0);
    $263 = ($241<<24>>24)==(0);
    if ($263) {
     $have$14 = $261;$next$14 = $262;
    } else {
     $bits$61$ph = $bits$11;$have$65$ph = $261;$hold$61$ph = $hold$11;$left$0$lcssa333 = $left$0;$next$65$ph = $262;$ret$9$ph = $ret$0;
     label = 351;
     break;
    }
   }
   HEAP32[$31>>2] = 0;
   HEAP32[$2>>2] = 7;
   $bits$12 = $bits$11;$have$15 = $have$14;$hold$12 = $hold$11;$next$15 = $next$14;
   label = 95;
  }
  else if ((label|0) == 287) {
   label = 0;
   $870 = ($871|0)==(0);
   if ($870) {
    $$pre507 = HEAP32[$31>>2]|0;
    $890 = $$pre507;$bits$45 = $bits$43;$have$49 = $have$47;$hold$45 = $hold$43;$next$49 = $next$47;
   } else {
    $bits$44 = $bits$43;$have$48 = $have$47;$hold$44 = $hold$43;$next$48 = $next$47;
    while(1) {
     $872 = ($bits$44>>>0)<($871>>>0);
     if (!($872)) {
      break;
     }
     $873 = ($have$48|0)==(0);
     if ($873) {
      $bits$61 = $bits$44;$have$65 = 0;$hold$61 = $hold$44;$left$0362 = $left$0;$next$65 = $next$48;$out$5 = $out$0;$ret$9 = $ret$4;
      break L17;
     }
     $874 = (($bits$44) + 8)|0;
     $875 = HEAP8[$next$48>>0]|0;
     $876 = $875&255;
     $877 = $876 << $bits$44;
     $878 = (($hold$44) + ($877))|0;
     $879 = ((($next$48)) + 1|0);
     $880 = (($have$48) + -1)|0;
     $bits$44 = $874;$have$48 = $880;$hold$44 = $878;$next$48 = $879;
    }
    $881 = 1 << $871;
    $882 = (($881) + -1)|0;
    $883 = $hold$44 & $882;
    $884 = HEAP32[$31>>2]|0;
    $885 = (($884) + ($883))|0;
    HEAP32[$31>>2] = $885;
    $886 = (($bits$44) - ($871))|0;
    $887 = $hold$44 >>> $871;
    $888 = HEAP32[$48>>2]|0;
    $889 = (($888) + ($871))|0;
    HEAP32[$48>>2] = $889;
    $890 = $885;$bits$45 = $886;$have$49 = $have$48;$hold$45 = $887;$next$49 = $next$48;
   }
   HEAP32[$50>>2] = $890;
   HEAP32[$2>>2] = 22;
   $bits$46 = $bits$45;$have$50 = $have$49;$hold$46 = $hold$45;$next$50 = $next$49;$ret$5 = $ret$4;
   label = 294;
  }
  do {
   if ((label|0) == 95) {
    label = 0;
    $267 = HEAP32[$23>>2]|0;
    $268 = $267 & 4096;
    $269 = ($268|0)==(0);
    if ($269) {
     $296 = HEAP32[$24>>2]|0;
     $297 = ($296|0)==(0|0);
     if ($297) {
      $have$16 = $have$15;$next$16 = $next$15;
     } else {
      $298 = ((($296)) + 36|0);
      HEAP32[$298>>2] = 0;
      $have$16 = $have$15;$next$16 = $next$15;
     }
    } else {
     $270 = ($have$15|0)==(0);
     if ($270) {
      $bits$61$ph = $bits$12;$have$65$ph = 0;$hold$61$ph = $hold$12;$left$0$lcssa333 = $left$0;$next$65$ph = $next$15;$ret$9$ph = $ret$0;
      label = 351;
      break L17;
     } else {
      $copy$2 = 0;
     }
     while(1) {
      $271 = (($copy$2) + 1)|0;
      $272 = (($next$15) + ($copy$2)|0);
      $273 = HEAP8[$272>>0]|0;
      $274 = HEAP32[$24>>2]|0;
      $275 = ($274|0)==(0|0);
      if (!($275)) {
       $276 = ((($274)) + 36|0);
       $277 = HEAP32[$276>>2]|0;
       $278 = ($277|0)==(0|0);
       if (!($278)) {
        $279 = HEAP32[$31>>2]|0;
        $280 = ((($274)) + 40|0);
        $281 = HEAP32[$280>>2]|0;
        $282 = ($279>>>0)<($281>>>0);
        if ($282) {
         $283 = (($279) + 1)|0;
         HEAP32[$31>>2] = $283;
         $284 = HEAP32[$276>>2]|0;
         $285 = (($284) + ($279)|0);
         HEAP8[$285>>0] = $273;
        }
       }
      }
      $286 = ($273<<24>>24)!=(0);
      $287 = ($have$15>>>0)>($271>>>0);
      $or$cond = $286 & $287;
      if ($or$cond) {
       $copy$2 = $271;
      } else {
       break;
      }
     }
     $288 = HEAP32[$23>>2]|0;
     $289 = $288 & 512;
     $290 = ($289|0)==(0);
     if (!($290)) {
      $291 = HEAP32[$28>>2]|0;
      $292 = (_crc32($291,$next$15,$271)|0);
      HEAP32[$28>>2] = $292;
     }
     $293 = (($have$15) - ($271))|0;
     $294 = (($next$15) + ($271)|0);
     $295 = ($273<<24>>24)==(0);
     if ($295) {
      $have$16 = $293;$next$16 = $294;
     } else {
      $bits$61$ph = $bits$12;$have$65$ph = $293;$hold$61$ph = $hold$12;$left$0$lcssa333 = $left$0;$next$65$ph = $294;$ret$9$ph = $ret$0;
      label = 351;
      break L17;
     }
    }
    HEAP32[$2>>2] = 8;
    $bits$13 = $bits$12;$have$17 = $have$16;$hold$13 = $hold$12;$next$17 = $next$16;
    label = 108;
   }
   else if ((label|0) == 294) {
    label = 0;
    $891 = HEAP32[$39>>2]|0;
    $892 = 1 << $891;
    $893 = (($892) + -1)|0;
    $894 = HEAP32[$38>>2]|0;
    $bits$47 = $bits$46;$have$51 = $have$50;$hold$47 = $hold$46;$next$51 = $next$50;
    while(1) {
     $895 = $hold$47 & $893;
     $896 = (($894) + ($895<<2)|0);
     $897 = HEAPU16[$896>>1]|(HEAPU16[$896+2>>1]<<16);
     $898 = $897 >>> 8;
     $899 = $898 & 255;
     $900 = ($899>>>0)>($bits$47>>>0);
     if (!($900)) {
      break;
     }
     $901 = ($have$51|0)==(0);
     if ($901) {
      $bits$61 = $bits$47;$have$65 = 0;$hold$61 = $hold$47;$left$0362 = $left$0;$next$65 = $next$51;$out$5 = $out$0;$ret$9 = $ret$5;
      break L17;
     }
     $902 = (($bits$47) + 8)|0;
     $903 = HEAP8[$next$51>>0]|0;
     $904 = $903&255;
     $905 = $904 << $bits$47;
     $906 = (($hold$47) + ($905))|0;
     $907 = ((($next$51)) + 1|0);
     $908 = (($have$51) + -1)|0;
     $bits$47 = $902;$have$51 = $908;$hold$47 = $906;$next$51 = $907;
    }
    $909 = $897&255;
    $910 = ($909&255)<(16);
    if ($910) {
     $911 = $897 >>> 16;
     $912 = $897 & 255;
     $913 = (($899) + ($912))|0;
     $914 = 1 << $913;
     $915 = (($914) + -1)|0;
     $bits$48 = $bits$47;$have$52 = $have$51;$hold$48 = $hold$47;$next$52 = $next$51;
     while(1) {
      $916 = $hold$48 & $915;
      $917 = $916 >>> $899;
      $918 = (($911) + ($917))|0;
      $919 = (($894) + ($918<<2)|0);
      $920 = HEAPU16[$919>>1]|(HEAPU16[$919+2>>1]<<16);
      $921 = $920 >>> 8;
      $922 = $921 & 255;
      $923 = (($899) + ($922))|0;
      $924 = ($923>>>0)>($bits$48>>>0);
      if (!($924)) {
       break;
      }
      $925 = ($have$52|0)==(0);
      if ($925) {
       $bits$61 = $bits$48;$have$65 = 0;$hold$61 = $hold$48;$left$0362 = $left$0;$next$65 = $next$52;$out$5 = $out$0;$ret$9 = $ret$5;
       break L17;
      }
      $926 = (($bits$48) + 8)|0;
      $927 = HEAP8[$next$52>>0]|0;
      $928 = $927&255;
      $929 = $928 << $bits$48;
      $930 = (($hold$48) + ($929))|0;
      $931 = ((($next$52)) + 1|0);
      $932 = (($have$52) + -1)|0;
      $bits$48 = $926;$have$52 = $932;$hold$48 = $930;$next$52 = $931;
     }
     $933 = $920&255;
     $934 = (($bits$48) - ($899))|0;
     $935 = $hold$48 >>> $899;
     $936 = HEAP32[$48>>2]|0;
     $937 = (($936) + ($899))|0;
     HEAP32[$48>>2] = $937;
     $942 = $937;$bits$49 = $934;$have$53 = $have$52;$here$sroa$0$1 = $933;$here$sroa$16$1 = $921;$here$sroa$32$1$in = $920;$hold$49 = $935;$next$53 = $next$52;
    } else {
     $$pre509 = HEAP32[$48>>2]|0;
     $942 = $$pre509;$bits$49 = $bits$47;$have$53 = $have$51;$here$sroa$0$1 = $909;$here$sroa$16$1 = $898;$here$sroa$32$1$in = $897;$hold$49 = $hold$47;$next$53 = $next$51;
    }
    $938 = $here$sroa$16$1 & 255;
    $939 = $hold$49 >>> $938;
    $940 = (($bits$49) - ($938))|0;
    $941 = (($942) + ($938))|0;
    HEAP32[$48>>2] = $941;
    $943 = $here$sroa$0$1 & 64;
    $944 = ($943<<24>>24)==(0);
    if ($944) {
     $here$sroa$32$1 = $here$sroa$32$1$in >>> 16;
     HEAP32[$51>>2] = $here$sroa$32$1;
     $945 = $here$sroa$0$1&255;
     $946 = $945 & 15;
     HEAP32[$49>>2] = $946;
     HEAP32[$2>>2] = 23;
     $948 = $946;$bits$50 = $940;$have$54 = $have$53;$hold$50 = $939;$next$54 = $next$53;$ret$6 = $ret$5;
     label = 308;
     break;
    } else {
     HEAP32[$25>>2] = 24030;
     HEAP32[$2>>2] = 29;
     $bits$0$be = $940;$have$0$be = $have$53;$hold$0$be = $939;$left$0$be = $left$0;$next$0$be = $next$53;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$5;
     break;
    }
   }
  } while(0);
  do {
   if ((label|0) == 108) {
    label = 0;
    $299 = HEAP32[$23>>2]|0;
    $300 = $299 & 512;
    $301 = ($300|0)==(0);
    if ($301) {
     $bits$15 = $bits$13;$have$19 = $have$17;$hold$15 = $hold$13;$next$19 = $next$17;
    } else {
     $bits$14 = $bits$13;$have$18 = $have$17;$hold$14 = $hold$13;$next$18 = $next$17;
     while(1) {
      $302 = ($bits$14>>>0)<(16);
      if (!($302)) {
       break;
      }
      $303 = ($have$18|0)==(0);
      if ($303) {
       $bits$61 = $bits$14;$have$65 = 0;$hold$61 = $hold$14;$left$0362 = $left$0;$next$65 = $next$18;$out$5 = $out$0;$ret$9 = $ret$0;
       break L17;
      }
      $304 = (($bits$14) + 8)|0;
      $305 = HEAP8[$next$18>>0]|0;
      $306 = $305&255;
      $307 = $306 << $bits$14;
      $308 = (($hold$14) + ($307))|0;
      $309 = ((($next$18)) + 1|0);
      $310 = (($have$18) + -1)|0;
      $bits$14 = $304;$have$18 = $310;$hold$14 = $308;$next$18 = $309;
     }
     $311 = HEAP32[$28>>2]|0;
     $312 = $311 & 65535;
     $313 = ($hold$14|0)==($312|0);
     if ($313) {
      $bits$15 = 0;$have$19 = $have$18;$hold$15 = 0;$next$19 = $next$18;
     } else {
      HEAP32[$25>>2] = 22881;
      HEAP32[$2>>2] = 29;
      $bits$0$be = $bits$14;$have$0$be = $have$18;$hold$0$be = $hold$14;$left$0$be = $left$0;$next$0$be = $next$18;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$0;
      break;
     }
    }
    $314 = HEAP32[$24>>2]|0;
    $315 = ($314|0)==(0|0);
    if (!($315)) {
     $316 = $299 >>> 9;
     $317 = $316 & 1;
     $318 = ((($314)) + 44|0);
     HEAP32[$318>>2] = $317;
     $319 = HEAP32[$24>>2]|0;
     $320 = ((($319)) + 48|0);
     HEAP32[$320>>2] = 1;
    }
    HEAP32[$28>>2] = 0;
    HEAP32[$29>>2] = 0;
    HEAP32[$2>>2] = 11;
    $bits$0$be = $bits$15;$have$0$be = $have$19;$hold$0$be = $hold$15;$left$0$be = $left$0;$next$0$be = $next$19;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$0;
   }
   else if ((label|0) == 308) {
    label = 0;
    $947 = ($948|0)==(0);
    if ($947) {
     $bits$52 = $bits$50;$have$56 = $have$54;$hold$52 = $hold$50;$next$56 = $next$54;
    } else {
     $bits$51 = $bits$50;$have$55 = $have$54;$hold$51 = $hold$50;$next$55 = $next$54;
     while(1) {
      $949 = ($bits$51>>>0)<($948>>>0);
      if (!($949)) {
       break;
      }
      $950 = ($have$55|0)==(0);
      if ($950) {
       $bits$61 = $bits$51;$have$65 = 0;$hold$61 = $hold$51;$left$0362 = $left$0;$next$65 = $next$55;$out$5 = $out$0;$ret$9 = $ret$6;
       break L17;
      }
      $951 = (($bits$51) + 8)|0;
      $952 = HEAP8[$next$55>>0]|0;
      $953 = $952&255;
      $954 = $953 << $bits$51;
      $955 = (($hold$51) + ($954))|0;
      $956 = ((($next$55)) + 1|0);
      $957 = (($have$55) + -1)|0;
      $bits$51 = $951;$have$55 = $957;$hold$51 = $955;$next$55 = $956;
     }
     $958 = 1 << $948;
     $959 = (($958) + -1)|0;
     $960 = $hold$51 & $959;
     $961 = HEAP32[$51>>2]|0;
     $962 = (($961) + ($960))|0;
     HEAP32[$51>>2] = $962;
     $963 = (($bits$51) - ($948))|0;
     $964 = $hold$51 >>> $948;
     $965 = HEAP32[$48>>2]|0;
     $966 = (($965) + ($948))|0;
     HEAP32[$48>>2] = $966;
     $bits$52 = $963;$have$56 = $have$55;$hold$52 = $964;$next$56 = $next$55;
    }
    HEAP32[$2>>2] = 24;
    $bits$53 = $bits$52;$have$57 = $have$56;$hold$53 = $hold$52;$next$57 = $next$56;$ret$7 = $ret$6;
    label = 314;
   }
  } while(0);
  do {
   if ((label|0) == 314) {
    label = 0;
    $967 = ($left$0|0)==(0);
    if ($967) {
     $bits$61$ph = $bits$53;$have$65$ph = $have$57;$hold$61$ph = $hold$53;$left$0$lcssa333 = 0;$next$65$ph = $next$57;$ret$9$ph = $ret$7;
     label = 351;
     break L17;
    }
    $968 = (($out$0) - ($left$0))|0;
    $969 = HEAP32[$51>>2]|0;
    $970 = ($969>>>0)>($968>>>0);
    if ($970) {
     $971 = (($969) - ($968))|0;
     $972 = HEAP32[$52>>2]|0;
     $973 = ($971>>>0)>($972>>>0);
     if ($973) {
      $974 = HEAP32[$53>>2]|0;
      $975 = ($974|0)==(0);
      if (!($975)) {
       HEAP32[$25>>2] = 24000;
       HEAP32[$2>>2] = 29;
       $bits$0$be = $bits$53;$have$0$be = $have$57;$hold$0$be = $hold$53;$left$0$be = $left$0;$next$0$be = $next$57;$out$0$be = $out$0;$put$0$be = $put$0;$ret$0$be = $ret$7;
       break;
      }
     }
     $976 = HEAP32[$54>>2]|0;
     $977 = ($971>>>0)>($976>>>0);
     if ($977) {
      $978 = (($971) - ($976))|0;
      $979 = HEAP32[$55>>2]|0;
      $980 = HEAP32[$56>>2]|0;
      $981 = (($980) - ($978))|0;
      $982 = (($979) + ($981)|0);
      $copy$8 = $978;$from$0 = $982;
     } else {
      $983 = HEAP32[$55>>2]|0;
      $984 = (($976) - ($971))|0;
      $985 = (($983) + ($984)|0);
      $copy$8 = $971;$from$0 = $985;
     }
     $986 = HEAP32[$31>>2]|0;
     $987 = ($copy$8>>>0)>($986>>>0);
     $$copy$8 = $987 ? $986 : $copy$8;
     $993 = $986;$copy$10 = $$copy$8;$from$1 = $from$0;
    } else {
     $988 = (0 - ($969))|0;
     $989 = (($put$0) + ($988)|0);
     $990 = HEAP32[$31>>2]|0;
     $993 = $990;$copy$10 = $990;$from$1 = $989;
    }
    $991 = ($copy$10>>>0)>($left$0>>>0);
    $left$0$copy$10 = $991 ? $left$0 : $copy$10;
    $992 = (($993) - ($left$0$copy$10))|0;
    HEAP32[$31>>2] = $992;
    $copy$12 = $left$0$copy$10;$from$2 = $from$1;$put$1 = $put$0;
    while(1) {
     $994 = HEAP8[$from$2>>0]|0;
     $995 = ((($put$1)) + 1|0);
     HEAP8[$put$1>>0] = $994;
     $996 = ((($from$2)) + 1|0);
     $997 = (($copy$12) + -1)|0;
     $998 = ($997|0)==(0);
     if ($998) {
      break;
     } else {
      $copy$12 = $997;$from$2 = $996;$put$1 = $995;
     }
    }
    $999 = (($left$0) - ($left$0$copy$10))|0;
    $1000 = HEAP32[$31>>2]|0;
    $1001 = ($1000|0)==(0);
    if ($1001) {
     HEAP32[$2>>2] = 20;
     $bits$0$be = $bits$53;$have$0$be = $have$57;$hold$0$be = $hold$53;$left$0$be = $999;$next$0$be = $next$57;$out$0$be = $out$0;$put$0$be = $995;$ret$0$be = $ret$7;
    } else {
     $bits$0$be = $bits$53;$have$0$be = $have$57;$hold$0$be = $hold$53;$left$0$be = $999;$next$0$be = $next$57;$out$0$be = $out$0;$put$0$be = $995;$ret$0$be = $ret$7;
    }
   }
  } while(0);
  $$pre501 = HEAP32[$2>>2]|0;
  $62 = $$pre501;$bits$0 = $bits$0$be;$have$0 = $have$0$be;$hold$0 = $hold$0$be;$left$0 = $left$0$be;$next$0 = $next$0$be;$out$0 = $out$0$be;$put$0 = $put$0$be;$ret$0 = $ret$0$be;
 }
 if ((label|0) == 122) {
  HEAP32[$4>>2] = $put$0;
  HEAP32[$14>>2] = $left$0;
  HEAP32[$strm>>2] = $next$21;
  HEAP32[$16>>2] = $have$21;
  HEAP32[$20>>2] = $hold$17;
  HEAP32[$18>>2] = $bits$17;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 134) {
  $350 = (($bits$20) + -3)|0;
  $351 = $hold$20 >>> 3;
  $bits$61 = $350;$have$65 = $have$24;$hold$61 = $351;$left$0362 = $left$0;$next$65 = $next$24;$out$5 = $out$0;$ret$9 = $ret$0;
 }
 else if ((label|0) == 137) {
  // unreachable;
 }
 else if ((label|0) == 350) {
  HEAP32[$2>>2] = 28;
  $bits$61 = $bits$58;$have$65 = $have$62;$hold$61 = $hold$58;$left$0362 = $left$0;$next$65 = $next$62;$out$5 = $out$2;$ret$9 = 1;
 }
 else if ((label|0) == 351) {
  $bits$61 = $bits$61$ph;$have$65 = $have$65$ph;$hold$61 = $hold$61$ph;$left$0362 = $left$0$lcssa333;$next$65 = $next$65$ph;$out$5 = $out$0;$ret$9 = $ret$9$ph;
 }
 else if ((label|0) == 373) {
  $$0 = -4;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 374) {
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$4>>2] = $put$0;
 HEAP32[$14>>2] = $left$0362;
 HEAP32[$strm>>2] = $next$65;
 HEAP32[$16>>2] = $have$65;
 HEAP32[$20>>2] = $hold$61;
 HEAP32[$18>>2] = $bits$61;
 $1052 = HEAP32[$56>>2]|0;
 $1053 = ($1052|0)==(0);
 $1054 = HEAP32[$14>>2]|0;
 if ($1053) {
  $1055 = ($out$5|0)==($1054|0);
  if (!($1055)) {
   $1056 = HEAP32[$2>>2]|0;
   $1057 = ($1056>>>0)<(29);
   if ($1057) {
    $1058 = ($1056>>>0)>(25);
    $1059 = ($flush|0)==(4);
    $or$cond966 = $1058 & $1059;
    if (!($or$cond966)) {
     label = 356;
    }
   }
  }
 } else {
  label = 356;
 }
 do {
  if ((label|0) == 356) {
   $1060 = HEAP32[$4>>2]|0;
   $1061 = (($out$5) - ($1054))|0;
   $1062 = HEAP32[$1>>2]|0;
   $1063 = ((($1062)) + 52|0);
   $1064 = HEAP32[$1063>>2]|0;
   $1065 = ($1064|0)==(0|0);
   if ($1065) {
    $1066 = ((($strm)) + 32|0);
    $1067 = HEAP32[$1066>>2]|0;
    $1068 = ((($strm)) + 40|0);
    $1069 = HEAP32[$1068>>2]|0;
    $1070 = ((($1062)) + 36|0);
    $1071 = HEAP32[$1070>>2]|0;
    $1072 = 1 << $1071;
    $1073 = (FUNCTION_TABLE_iiii[$1067 & 127]($1069,$1072,1)|0);
    HEAP32[$1063>>2] = $1073;
    $1074 = ($1073|0)==(0|0);
    if ($1074) {
     HEAP32[$2>>2] = 30;
     $$0 = -4;
     STACKTOP = sp;return ($$0|0);
    } else {
     $1087 = $1073;
    }
   } else {
    $1087 = $1064;
   }
   $1075 = ((($1062)) + 40|0);
   $1076 = HEAP32[$1075>>2]|0;
   $1077 = ($1076|0)==(0);
   if ($1077) {
    $1078 = ((($1062)) + 36|0);
    $1079 = HEAP32[$1078>>2]|0;
    $1080 = 1 << $1079;
    HEAP32[$1075>>2] = $1080;
    $1081 = ((($1062)) + 48|0);
    HEAP32[$1081>>2] = 0;
    $1082 = ((($1062)) + 44|0);
    HEAP32[$1082>>2] = 0;
    $1084 = $1080;
   } else {
    $1084 = $1076;
   }
   $1083 = ($1084>>>0)>($1061>>>0);
   if (!($1083)) {
    $1085 = (0 - ($1084))|0;
    $1086 = (($1060) + ($1085)|0);
    _memcpy(($1087|0),($1086|0),($1084|0))|0;
    $1088 = ((($1062)) + 48|0);
    HEAP32[$1088>>2] = 0;
    $1089 = HEAP32[$1075>>2]|0;
    $1090 = ((($1062)) + 44|0);
    HEAP32[$1090>>2] = $1089;
    break;
   }
   $1091 = ((($1062)) + 48|0);
   $1092 = HEAP32[$1091>>2]|0;
   $1093 = (($1084) - ($1092))|0;
   $1094 = ($1093>>>0)>($1061>>>0);
   $$ = $1094 ? $1061 : $1093;
   $1095 = (($1087) + ($1092)|0);
   $1096 = (0 - ($1061))|0;
   $1097 = (($1060) + ($1096)|0);
   _memcpy(($1095|0),($1097|0),($$|0))|0;
   $1098 = (($1061) - ($$))|0;
   $1099 = ($1061|0)==($$|0);
   if (!($1099)) {
    $1100 = HEAP32[$1063>>2]|0;
    $1101 = (0 - ($1098))|0;
    $1102 = (($1060) + ($1101)|0);
    _memcpy(($1100|0),($1102|0),($1098|0))|0;
    HEAP32[$1091>>2] = $1098;
    $1103 = HEAP32[$1075>>2]|0;
    $1104 = ((($1062)) + 44|0);
    HEAP32[$1104>>2] = $1103;
    break;
   }
   $1105 = HEAP32[$1091>>2]|0;
   $1106 = (($1105) + ($1061))|0;
   HEAP32[$1091>>2] = $1106;
   $1107 = HEAP32[$1075>>2]|0;
   $1108 = ($1106|0)==($1107|0);
   $$967 = $1108 ? 0 : $1106;
   HEAP32[$1091>>2] = $$967;
   $1109 = ((($1062)) + 44|0);
   $1110 = HEAP32[$1109>>2]|0;
   $1111 = ($1110>>>0)<($1107>>>0);
   if ($1111) {
    $1112 = (($1110) + ($1061))|0;
    HEAP32[$1109>>2] = $1112;
   }
  }
 } while(0);
 $1113 = HEAP32[$16>>2]|0;
 $1114 = (($17) - ($1113))|0;
 $1115 = HEAP32[$14>>2]|0;
 $1116 = (($out$5) - ($1115))|0;
 $1117 = ((($strm)) + 8|0);
 $1118 = HEAP32[$1117>>2]|0;
 $1119 = (($1118) + ($1114))|0;
 HEAP32[$1117>>2] = $1119;
 $1120 = HEAP32[$57>>2]|0;
 $1121 = (($1120) + ($1116))|0;
 HEAP32[$57>>2] = $1121;
 $1122 = HEAP32[$58>>2]|0;
 $1123 = (($1122) + ($1116))|0;
 HEAP32[$58>>2] = $1123;
 $1124 = HEAP32[$22>>2]|0;
 $1125 = ($1124|0)==(0);
 $1126 = ($out$5|0)==($1115|0);
 $or$cond968 = $1125 | $1126;
 if ($or$cond968) {
  $1136 = HEAP32[$18>>2]|0;
  $1137 = HEAP32[$35>>2]|0;
  $1138 = ($1137|0)!=(0);
  $1139 = $1138 ? 64 : 0;
  $1140 = (($1136) + ($1139))|0;
  $1141 = HEAP32[$2>>2]|0;
  $1142 = ($1141|0)==(11);
  $1143 = $1142 ? 128 : 0;
  $1144 = (($1140) + ($1143))|0;
  $1145 = ($1141|0)==(19);
  $1146 = ($1141|0)==(14);
  $1147 = $1145 | $1146;
  $1148 = $1147 ? 256 : 0;
  $1149 = (($1144) + ($1148))|0;
  $1150 = ((($strm)) + 44|0);
  HEAP32[$1150>>2] = $1149;
  $1151 = ($17|0)==($1113|0);
  $1152 = ($out$5|0)==($1115|0);
  $or$cond969 = $1151 & $1152;
  $1153 = ($flush|0)==(4);
  $or$cond970 = $or$cond969 | $1153;
  $1154 = ($ret$9|0)==(0);
  $or$cond971 = $or$cond970 & $1154;
  $$ret$9 = $or$cond971 ? -5 : $ret$9;
  STACKTOP = sp;return ($$ret$9|0);
 }
 $1127 = HEAP32[$23>>2]|0;
 $1128 = ($1127|0)==(0);
 $1129 = HEAP32[$28>>2]|0;
 $1130 = HEAP32[$4>>2]|0;
 $1131 = (0 - ($1116))|0;
 $1132 = (($1130) + ($1131)|0);
 if ($1128) {
  $1134 = (_adler32($1129,$1132,$1116)|0);
  $1135 = $1134;
 } else {
  $1133 = (_crc32($1129,$1132,$1116)|0);
  $1135 = $1133;
 }
 HEAP32[$28>>2] = $1135;
 HEAP32[$29>>2] = $1135;
 $1136 = HEAP32[$18>>2]|0;
 $1137 = HEAP32[$35>>2]|0;
 $1138 = ($1137|0)!=(0);
 $1139 = $1138 ? 64 : 0;
 $1140 = (($1136) + ($1139))|0;
 $1141 = HEAP32[$2>>2]|0;
 $1142 = ($1141|0)==(11);
 $1143 = $1142 ? 128 : 0;
 $1144 = (($1140) + ($1143))|0;
 $1145 = ($1141|0)==(19);
 $1146 = ($1141|0)==(14);
 $1147 = $1145 | $1146;
 $1148 = $1147 ? 256 : 0;
 $1149 = (($1144) + ($1148))|0;
 $1150 = ((($strm)) + 44|0);
 HEAP32[$1150>>2] = $1149;
 $1151 = ($17|0)==($1113|0);
 $1152 = ($out$5|0)==($1115|0);
 $or$cond969 = $1151 & $1152;
 $1153 = ($flush|0)==(4);
 $or$cond970 = $or$cond969 | $1153;
 $1154 = ($ret$9|0)==(0);
 $or$cond971 = $or$cond970 & $1154;
 $$ret$9 = $or$cond971 ? -5 : $ret$9;
 STACKTOP = sp;return ($$ret$9|0);
}
function _inflate_table($type,$lens,$codes,$table,$bits,$work) {
 $type = $type|0;
 $lens = $lens|0;
 $codes = $codes|0;
 $table = $table|0;
 $bits = $bits|0;
 $work = $work|0;
 var $$0 = 0, $$cast = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $base$017 = 0, $count = 0, $curr$0$ph = 0, $curr$1 = 0, $drop$0$ph = 0;
 var $end$035 = 0, $exitcond = 0, $exitcond26 = 0, $exitcond27 = 0, $exitcond28 = 0, $extra$026 = 0, $fill$0 = 0, $here$sroa$0$0 = 0, $here$sroa$11$0 = 0, $huff$0 = 0, $huff$0$ph = 0, $huff$1 = 0, $incr$0 = 0, $left$0 = 0, $left$1 = 0, $len$0 = 0, $len$1 = 0, $len$2 = 0, $len$3 = 0, $len$3$ph = 0;
 var $len$4 = 0, $low$0$ph = 0, $max$0 = 0, $max$0$lcssa = 0, $max$0$lcssa$ = 0, $min$0 = 0, $min$0$max$0$lcssa$ = 0, $min$0$max$0$lcssa$$drop$0$ph = 0, $next$0$ph = 0, $offs = 0, $or$cond = 0, $or$cond29 = 0, $sym$0 = 0, $sym$1 = 0, $sym$2 = 0, $sym$2$ph = 0, $used$0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $count = sp + 32|0;
 $offs = sp;
 $len$0 = 0;
 while(1) {
  $exitcond28 = ($len$0|0)==(16);
  if ($exitcond28) {
   $sym$0 = 0;
   break;
  }
  $0 = (($count) + ($len$0<<1)|0);
  HEAP16[$0>>1] = 0;
  $1 = (($len$0) + 1)|0;
  $len$0 = $1;
 }
 while(1) {
  $exitcond27 = ($sym$0|0)==($codes|0);
  if ($exitcond27) {
   break;
  }
  $2 = (($lens) + ($sym$0<<1)|0);
  $3 = HEAP16[$2>>1]|0;
  $4 = $3&65535;
  $5 = (($count) + ($4<<1)|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = (($6) + 1)<<16>>16;
  HEAP16[$5>>1] = $7;
  $8 = (($sym$0) + 1)|0;
  $sym$0 = $8;
 }
 $9 = HEAP32[$bits>>2]|0;
 $max$0 = 15;
 while(1) {
  $10 = ($max$0|0)==(0);
  if ($10) {
   label = 11;
   break;
  }
  $11 = (($count) + ($max$0<<1)|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = ($12<<16>>16)==(0);
  if (!($13)) {
   $max$0$lcssa = $max$0;
   break;
  }
  $14 = (($max$0) + -1)|0;
  $max$0 = $14;
 }
 if ((label|0) == 11) {
  $16 = HEAP32[$table>>2]|0;
  $17 = ((($16)) + 4|0);
  HEAP32[$table>>2] = $17;
  HEAP16[$16>>1]=320&65535;HEAP16[$16+2>>1]=320>>>16;
  $18 = HEAP32[$table>>2]|0;
  $19 = ((($18)) + 4|0);
  HEAP32[$table>>2] = $19;
  HEAP16[$18>>1]=320&65535;HEAP16[$18+2>>1]=320>>>16;
  HEAP32[$bits>>2] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = ($9>>>0)>($max$0$lcssa>>>0);
 $max$0$lcssa$ = $15 ? $max$0$lcssa : $9;
 $min$0 = 1;
 while(1) {
  $20 = ($min$0>>>0)<($max$0$lcssa>>>0);
  if (!($20)) {
   break;
  }
  $21 = (($count) + ($min$0<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = ($22<<16>>16)==(0);
  if (!($23)) {
   break;
  }
  $24 = (($min$0) + 1)|0;
  $min$0 = $24;
 }
 $25 = ($max$0$lcssa$>>>0)<($min$0>>>0);
 $min$0$max$0$lcssa$ = $25 ? $min$0 : $max$0$lcssa$;
 $left$0 = 1;$len$1 = 1;
 while(1) {
  $26 = ($len$1>>>0)<(16);
  if (!($26)) {
   break;
  }
  $27 = $left$0 << 1;
  $28 = (($count) + ($len$1<<1)|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29&65535;
  $31 = (($27) - ($30))|0;
  $32 = ($31|0)<(0);
  if ($32) {
   $$0 = -1;
   label = 60;
   break;
  }
  $33 = (($len$1) + 1)|0;
  $left$0 = $31;$len$1 = $33;
 }
 if ((label|0) == 60) {
  STACKTOP = sp;return ($$0|0);
 }
 $34 = ($left$0|0)>(0);
 if ($34) {
  $35 = ($type|0)!=(0);
  $36 = ($max$0$lcssa|0)==(1);
  $or$cond = $35 & $36;
  if (!($or$cond)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $37 = ((($offs)) + 2|0);
 HEAP16[$37>>1] = 0;
 $39 = 0;$len$2 = 1;
 while(1) {
  $exitcond26 = ($len$2|0)==(15);
  if ($exitcond26) {
   $sym$1 = 0;
   break;
  }
  $38 = $39 & 65535;
  $40 = (($count) + ($len$2<<1)|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $43 = (($38) + ($42))|0;
  $44 = $43&65535;
  $45 = (($len$2) + 1)|0;
  $46 = (($offs) + ($45<<1)|0);
  HEAP16[$46>>1] = $44;
  $39 = $43;$len$2 = $45;
 }
 while(1) {
  $exitcond = ($sym$1|0)==($codes|0);
  if ($exitcond) {
   break;
  }
  $47 = (($lens) + ($sym$1<<1)|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = ($48<<16>>16)==(0);
  if (!($49)) {
   $50 = $sym$1&65535;
   $51 = $48&65535;
   $52 = (($offs) + ($51<<1)|0);
   $53 = HEAP16[$52>>1]|0;
   $54 = (($53) + 1)<<16>>16;
   HEAP16[$52>>1] = $54;
   $55 = $53&65535;
   $56 = (($work) + ($55<<1)|0);
   HEAP16[$56>>1] = $50;
  }
  $57 = (($sym$1) + 1)|0;
  $sym$1 = $57;
 }
 switch ($type|0) {
 case 0:  {
  $58 = 1 << $min$0$max$0$lcssa$;
  $65 = $58;$base$017 = $work;$end$035 = 19;$extra$026 = $work;
  break;
 }
 case 1:  {
  $59 = 1 << $min$0$max$0$lcssa$;
  $60 = ($min$0$max$0$lcssa$>>>0)>(9);
  if ($60) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $65 = $59;$base$017 = (11944);$end$035 = 256;$extra$026 = (12006);
  }
  break;
 }
 default: {
  $61 = 1 << $min$0$max$0$lcssa$;
  $62 = ($type|0)==(2);
  $63 = ($min$0$max$0$lcssa$>>>0)>(9);
  $or$cond29 = $62 & $63;
  if ($or$cond29) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $65 = $61;$base$017 = 12582;$end$035 = -1;$extra$026 = 12646;
  }
 }
 }
 $64 = (($65) + -1)|0;
 $66 = HEAP32[$table>>2]|0;
 $67 = $min$0$max$0$lcssa$&255;
 $curr$0$ph = $min$0$max$0$lcssa$;$drop$0$ph = 0;$huff$0$ph = 0;$len$3$ph = $min$0;$low$0$ph = -1;$next$0$ph = $66;$sym$2$ph = 0;$used$0$ph = $65;
 L49: while(1) {
  $68 = 1 << $curr$0$ph;
  $huff$0 = $huff$0$ph;$len$3 = $len$3$ph;$sym$2 = $sym$2$ph;
  while(1) {
   $69 = (($len$3) - ($drop$0$ph))|0;
   $70 = (($work) + ($sym$2<<1)|0);
   $71 = HEAP16[$70>>1]|0;
   $72 = $71&65535;
   $73 = ($72|0)<($end$035|0);
   if ($73) {
    $here$sroa$0$0 = 0;$here$sroa$11$0 = $71;
   } else {
    $74 = ($72|0)>($end$035|0);
    if ($74) {
     $75 = (($extra$026) + ($72<<1)|0);
     $76 = HEAP16[$75>>1]|0;
     $77 = $76&65535;
     $78 = (($base$017) + ($72<<1)|0);
     $79 = HEAP16[$78>>1]|0;
     $here$sroa$0$0 = $77;$here$sroa$11$0 = $79;
    } else {
     $here$sroa$0$0 = 96;$here$sroa$11$0 = 0;
    }
   }
   $80 = 1 << $69;
   $81 = $huff$0 >>> $drop$0$ph;
   $82 = $here$sroa$11$0&65535;
   $83 = $82 << 16;
   $84 = $69 << 8;
   $85 = $84 & 65280;
   $86 = $83 | $85;
   $87 = $here$sroa$0$0 & 255;
   $88 = $86 | $87;
   $fill$0 = $68;
   while(1) {
    $89 = (($fill$0) - ($80))|0;
    $90 = (($81) + ($89))|0;
    $91 = (($next$0$ph) + ($90<<2)|0);
    HEAP16[$91>>1]=$88&65535;HEAP16[$91+2>>1]=$88>>>16;
    $92 = ($fill$0|0)==($80|0);
    if ($92) {
     break;
    } else {
     $fill$0 = $89;
    }
   }
   $93 = (($len$3) + -1)|0;
   $94 = 1 << $93;
   $incr$0 = $94;
   while(1) {
    $95 = $huff$0 & $incr$0;
    $96 = ($95|0)==(0);
    if ($96) {
     break;
    }
    $97 = $incr$0 >>> 1;
    $incr$0 = $97;
   }
   $98 = ($incr$0|0)==(0);
   if ($98) {
    $huff$1 = 0;
   } else {
    $99 = (($incr$0) + -1)|0;
    $100 = $huff$0 & $99;
    $101 = (($100) + ($incr$0))|0;
    $huff$1 = $101;
   }
   $102 = (($sym$2) + 1)|0;
   $103 = (($count) + ($len$3<<1)|0);
   $104 = HEAP16[$103>>1]|0;
   $105 = (($104) + -1)<<16>>16;
   HEAP16[$103>>1] = $105;
   $106 = ($105<<16>>16)==(0);
   if ($106) {
    $107 = ($len$3|0)==($max$0$lcssa|0);
    if ($107) {
     label = 57;
     break L49;
    }
    $108 = (($work) + ($102<<1)|0);
    $109 = HEAP16[$108>>1]|0;
    $110 = $109&65535;
    $111 = (($lens) + ($110<<1)|0);
    $112 = HEAP16[$111>>1]|0;
    $113 = $112&65535;
    $len$4 = $113;
   } else {
    $len$4 = $len$3;
   }
   $114 = ($len$4>>>0)>($min$0$max$0$lcssa$>>>0);
   if (!($114)) {
    $huff$0 = $huff$1;$len$3 = $len$4;$sym$2 = $102;
    continue;
   }
   $115 = $huff$1 & $64;
   $116 = ($115|0)==($low$0$ph|0);
   if ($116) {
    $huff$0 = $huff$1;$len$3 = $len$4;$sym$2 = $102;
   } else {
    break;
   }
  }
  $117 = ($drop$0$ph|0)==(0);
  $min$0$max$0$lcssa$$drop$0$ph = $117 ? $min$0$max$0$lcssa$ : $drop$0$ph;
  $118 = (($next$0$ph) + ($68<<2)|0);
  $119 = (($len$4) - ($min$0$max$0$lcssa$$drop$0$ph))|0;
  $120 = 1 << $119;
  $curr$1 = $119;$left$1 = $120;
  while(1) {
   $121 = (($curr$1) + ($min$0$max$0$lcssa$$drop$0$ph))|0;
   $122 = ($121>>>0)<($max$0$lcssa>>>0);
   if (!($122)) {
    break;
   }
   $123 = (($count) + ($121<<1)|0);
   $124 = HEAP16[$123>>1]|0;
   $125 = $124&65535;
   $126 = (($left$1) - ($125))|0;
   $127 = ($126|0)<(1);
   if ($127) {
    break;
   }
   $128 = (($curr$1) + 1)|0;
   $129 = $126 << 1;
   $curr$1 = $128;$left$1 = $129;
  }
  $130 = 1 << $curr$1;
  $131 = (($used$0$ph) + ($130))|0;
  switch ($type|0) {
  case 1:  {
   $132 = ($131>>>0)>(852);
   if ($132) {
    $$0 = 1;
    label = 60;
    break L49;
   }
   break;
  }
  case 2:  {
   $133 = ($131>>>0)>(592);
   if ($133) {
    $$0 = 1;
    label = 60;
    break L49;
   }
   break;
  }
  default: {
  }
  }
  $134 = $curr$1&255;
  $135 = HEAP32[$table>>2]|0;
  $136 = (($135) + ($115<<2)|0);
  HEAP8[$136>>0] = $134;
  $137 = HEAP32[$table>>2]|0;
  $138 = (((($137) + ($115<<2)|0)) + 1|0);
  HEAP8[$138>>0] = $67;
  $139 = HEAP32[$table>>2]|0;
  $140 = $118;
  $141 = (($140) - ($139))|0;
  $142 = $141 >>> 2;
  $143 = $142&65535;
  $$cast = $139;
  $144 = (((($$cast) + ($115<<2)|0)) + 2|0);
  HEAP16[$144>>1] = $143;
  $curr$0$ph = $curr$1;$drop$0$ph = $min$0$max$0$lcssa$$drop$0$ph;$huff$0$ph = $huff$1;$len$3$ph = $len$4;$low$0$ph = $115;$next$0$ph = $118;$sym$2$ph = $102;$used$0$ph = $131;
 }
 if ((label|0) == 57) {
  $145 = ($huff$1|0)==(0);
  if (!($145)) {
   $146 = (($max$0$lcssa) - ($drop$0$ph))|0;
   $147 = (($next$0$ph) + ($huff$1<<2)|0);
   $148 = $146 << 8;
   $149 = $148 & 65280;
   $150 = $149 | 64;
   HEAP16[$147>>1]=$150&65535;HEAP16[$147+2>>1]=$150>>>16;
  }
  $151 = HEAP32[$table>>2]|0;
  $152 = (($151) + ($used$0$ph<<2)|0);
  HEAP32[$table>>2] = $152;
  HEAP32[$bits>>2] = $min$0$max$0$lcssa$;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 60) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __tr_stored_block($s,$buf,$stored_len,$last) {
 $s = $s|0;
 $buf = $buf|0;
 $stored_len = $stored_len|0;
 $last = $last|0;
 var $$0$i = 0, $$01$i = 0, $$off0 = 0, $$off0$in = 0, $$pre$phi2Z2D = 0, $$pre$phi4Z2D = 0, $$pre$phiZ2D = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 5820|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(13);
 $3 = $last & 65535;
 $4 = $3 << $1;
 $5 = ((($s)) + 5816|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = $7 | $4;
 $9 = $8&65535;
 HEAP16[$5>>1] = $9;
 if ($2) {
  $10 = $8&255;
  $11 = ((($s)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 1)|0;
  HEAP32[$11>>2] = $13;
  $14 = ((($s)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($12)|0);
  HEAP8[$16>>0] = $10;
  $17 = HEAP16[$5>>1]|0;
  $18 = ($17&65535) >>> 8;
  $19 = $18&255;
  $20 = HEAP32[$11>>2]|0;
  $21 = (($20) + 1)|0;
  HEAP32[$11>>2] = $21;
  $22 = HEAP32[$14>>2]|0;
  $23 = (($22) + ($20)|0);
  HEAP8[$23>>0] = $19;
  $24 = HEAP32[$0>>2]|0;
  $25 = (16 - ($24))|0;
  $26 = $3 >>> $25;
  $27 = $26&65535;
  HEAP16[$5>>1] = $27;
  $28 = (($24) + -13)|0;
  $$off0$in = $26;$storemerge = $28;
 } else {
  $29 = (($1) + 3)|0;
  $$off0$in = $8;$storemerge = $29;
 }
 $$off0 = $$off0$in&255;
 HEAP32[$0>>2] = $storemerge;
 $30 = ($storemerge|0)>(8);
 do {
  if ($30) {
   $31 = ((($s)) + 5816|0);
   $32 = ((($s)) + 20|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + 1)|0;
   HEAP32[$32>>2] = $34;
   $35 = ((($s)) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($36) + ($33)|0);
   HEAP8[$37>>0] = $$off0;
   $38 = HEAP16[$31>>1]|0;
   $39 = ($38&65535) >>> 8;
   $40 = $39&255;
   $41 = HEAP32[$32>>2]|0;
   $42 = (($41) + 1)|0;
   HEAP32[$32>>2] = $42;
   $43 = HEAP32[$35>>2]|0;
   $44 = (($43) + ($41)|0);
   HEAP8[$44>>0] = $40;
   $$pre$phi2Z2D = $32;$$pre$phi4Z2D = $35;$$pre$phiZ2D = $31;
  } else {
   $45 = ($storemerge|0)>(0);
   $46 = ((($s)) + 5816|0);
   $47 = ((($s)) + 20|0);
   if ($45) {
    $48 = HEAP32[$47>>2]|0;
    $49 = (($48) + 1)|0;
    HEAP32[$47>>2] = $49;
    $50 = ((($s)) + 8|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (($51) + ($48)|0);
    HEAP8[$52>>0] = $$off0;
    $$pre$phi2Z2D = $47;$$pre$phi4Z2D = $50;$$pre$phiZ2D = $46;
    break;
   } else {
    $$pre3 = ((($s)) + 8|0);
    $$pre$phi2Z2D = $47;$$pre$phi4Z2D = $$pre3;$$pre$phiZ2D = $46;
    break;
   }
  }
 } while(0);
 HEAP16[$$pre$phiZ2D>>1] = 0;
 HEAP32[$0>>2] = 0;
 $53 = $stored_len&255;
 $54 = HEAP32[$$pre$phi2Z2D>>2]|0;
 $55 = (($54) + 1)|0;
 HEAP32[$$pre$phi2Z2D>>2] = $55;
 $56 = HEAP32[$$pre$phi4Z2D>>2]|0;
 $57 = (($56) + ($54)|0);
 HEAP8[$57>>0] = $53;
 $58 = $stored_len >>> 8;
 $59 = $58&255;
 $60 = HEAP32[$$pre$phi2Z2D>>2]|0;
 $61 = (($60) + 1)|0;
 HEAP32[$$pre$phi2Z2D>>2] = $61;
 $62 = HEAP32[$$pre$phi4Z2D>>2]|0;
 $63 = (($62) + ($60)|0);
 HEAP8[$63>>0] = $59;
 $64 = $stored_len ^ 255;
 $65 = $64&255;
 $66 = HEAP32[$$pre$phi2Z2D>>2]|0;
 $67 = (($66) + 1)|0;
 HEAP32[$$pre$phi2Z2D>>2] = $67;
 $68 = HEAP32[$$pre$phi4Z2D>>2]|0;
 $69 = (($68) + ($66)|0);
 HEAP8[$69>>0] = $65;
 $70 = $58 ^ 255;
 $71 = $70&255;
 $72 = HEAP32[$$pre$phi2Z2D>>2]|0;
 $73 = (($72) + 1)|0;
 HEAP32[$$pre$phi2Z2D>>2] = $73;
 $74 = HEAP32[$$pre$phi4Z2D>>2]|0;
 $75 = (($74) + ($72)|0);
 HEAP8[$75>>0] = $71;
 $$0$i = $stored_len;$$01$i = $buf;
 while(1) {
  $76 = ($$0$i|0)==(0);
  if ($76) {
   break;
  }
  $77 = (($$0$i) + -1)|0;
  $78 = ((($$01$i)) + 1|0);
  $79 = HEAP8[$$01$i>>0]|0;
  $80 = HEAP32[$$pre$phi2Z2D>>2]|0;
  $81 = (($80) + 1)|0;
  HEAP32[$$pre$phi2Z2D>>2] = $81;
  $82 = HEAP32[$$pre$phi4Z2D>>2]|0;
  $83 = (($82) + ($80)|0);
  HEAP8[$83>>0] = $79;
  $$0$i = $77;$$01$i = $78;
 }
 return;
}
function __tr_align($s) {
 $s = $s|0;
 var $$off0 = 0, $$off0$in = 0, $$off02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $storemerge = 0, $storemerge4 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 5820|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(13);
 $3 = 2 << $1;
 $4 = ((($s)) + 5816|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = $6 | $3;
 $8 = $7&65535;
 HEAP16[$4>>1] = $8;
 if ($2) {
  $9 = $7&255;
  $10 = ((($s)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 1)|0;
  HEAP32[$10>>2] = $12;
  $13 = ((($s)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11)|0);
  HEAP8[$15>>0] = $9;
  $16 = HEAP16[$4>>1]|0;
  $17 = ($16&65535) >>> 8;
  $18 = $17&255;
  $19 = HEAP32[$10>>2]|0;
  $20 = (($19) + 1)|0;
  HEAP32[$10>>2] = $20;
  $21 = HEAP32[$13>>2]|0;
  $22 = (($21) + ($19)|0);
  HEAP8[$22>>0] = $18;
  $23 = HEAP32[$0>>2]|0;
  $24 = (16 - ($23))|0;
  $25 = 2 >>> $24;
  $26 = $25&65535;
  HEAP16[$4>>1] = $26;
  $27 = (($23) + -13)|0;
  $$off0$in = $25;$storemerge = $27;
 } else {
  $28 = (($1) + 3)|0;
  $$off0$in = $7;$storemerge = $28;
 }
 $$off0 = $$off0$in&255;
 HEAP32[$0>>2] = $storemerge;
 $29 = ($storemerge|0)>(9);
 if ($29) {
  $30 = ((($s)) + 5816|0);
  $31 = ((($s)) + 20|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[$31>>2] = $33;
  $34 = ((($s)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + ($32)|0);
  HEAP8[$36>>0] = $$off0;
  $37 = HEAP16[$30>>1]|0;
  $38 = ($37&65535) >>> 8;
  $39 = $38&255;
  $40 = HEAP32[$31>>2]|0;
  $41 = (($40) + 1)|0;
  HEAP32[$31>>2] = $41;
  $42 = HEAP32[$34>>2]|0;
  $43 = (($42) + ($40)|0);
  HEAP8[$43>>0] = $39;
  HEAP16[$30>>1] = 0;
  $44 = HEAP32[$0>>2]|0;
  $45 = (($44) + -9)|0;
  $$off02 = 0;$storemerge4 = $45;
 } else {
  $46 = (($storemerge) + 7)|0;
  $$off02 = $$off0;$storemerge4 = $46;
 }
 HEAP32[$0>>2] = $storemerge4;
 $47 = ($storemerge4|0)==(16);
 if ($47) {
  $48 = ((($s)) + 5816|0);
  $49 = ((($s)) + 20|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + 1)|0;
  HEAP32[$49>>2] = $51;
  $52 = ((($s)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + ($50)|0);
  HEAP8[$54>>0] = $$off02;
  $55 = HEAP16[$48>>1]|0;
  $56 = ($55&65535) >>> 8;
  $57 = $56&255;
  $58 = HEAP32[$49>>2]|0;
  $59 = (($58) + 1)|0;
  HEAP32[$49>>2] = $59;
  $60 = HEAP32[$52>>2]|0;
  $61 = (($60) + ($58)|0);
  HEAP8[$61>>0] = $57;
  HEAP16[$48>>1] = 0;
  HEAP32[$0>>2] = 0;
  return;
 }
 $62 = ($storemerge4|0)>(7);
 if (!($62)) {
  return;
 }
 $63 = ((($s)) + 5816|0);
 $64 = ((($s)) + 20|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) + 1)|0;
 HEAP32[$64>>2] = $66;
 $67 = ((($s)) + 8|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (($68) + ($65)|0);
 HEAP8[$69>>0] = $$off02;
 $70 = HEAP16[$63>>1]|0;
 $71 = ($70&65535) >>> 8;
 HEAP16[$63>>1] = $71;
 $72 = HEAP32[$0>>2]|0;
 $73 = (($72) + -8)|0;
 HEAP32[$0>>2] = $73;
 return;
}
function __tr_flush_block($s,$buf,$stored_len,$last) {
 $s = $s|0;
 $buf = $buf|0;
 $stored_len = $stored_len|0;
 $last = $last|0;
 var $$ = 0, $$0$i = 0, $$pre = 0, $$pre$phi11Z2D = 0, $$pre$phi13Z2D = 0, $$pre$phi9Z2D = 0, $$pre10 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $black_mask$0$i = 0, $exitcond = 0, $exitcond14 = 0, $exitcond15 = 0, $max_blindex$0 = 0, $max_blindex$0$i = 0, $n$0$i = 0, $n$0$i1 = 0, $n$1$i = 0, $n$1$i2 = 0, $n$2$i = 0, $opt_lenb$1 = 0, $or$cond = 0, $or$cond20 = 0, $phitmp = 0, $rank$0$i = 0, $static_lenb$0 = 0, $storemerge = 0, $storemerge16 = 0;
 var $storemerge17 = 0, $storemerge18 = 0, $storemerge19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 132|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = HEAP32[$s>>2]|0;
  $4 = ((($3)) + 44|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(2);
  if ($6) {
   $black_mask$0$i = -201342849;$n$0$i = 0;
   while(1) {
    $7 = ($n$0$i|0)<(32);
    if (!($7)) {
     label = 7;
     break;
    }
    $8 = $black_mask$0$i & 1;
    $9 = ($8|0)==(0);
    if (!($9)) {
     $10 = (((($s)) + 148|0) + ($n$0$i<<2)|0);
     $11 = HEAP16[$10>>1]|0;
     $12 = ($11<<16>>16)==(0);
     if (!($12)) {
      $$0$i = 0;
      break;
     }
    }
    $13 = (($n$0$i) + 1)|0;
    $14 = $black_mask$0$i >>> 1;
    $black_mask$0$i = $14;$n$0$i = $13;
   }
   L10: do {
    if ((label|0) == 7) {
     $15 = ((($s)) + 184|0);
     $16 = HEAP16[$15>>1]|0;
     $17 = ($16<<16>>16)==(0);
     if ($17) {
      $18 = ((($s)) + 188|0);
      $19 = HEAP16[$18>>1]|0;
      $20 = ($19<<16>>16)==(0);
      if ($20) {
       $21 = ((($s)) + 200|0);
       $22 = HEAP16[$21>>1]|0;
       $23 = ($22<<16>>16)==(0);
       if ($23) {
        $n$1$i = 32;
        while(1) {
         $24 = ($n$1$i|0)<(256);
         if (!($24)) {
          $$0$i = 0;
          break L10;
         }
         $25 = (((($s)) + 148|0) + ($n$1$i<<2)|0);
         $26 = HEAP16[$25>>1]|0;
         $27 = ($26<<16>>16)==(0);
         if (!($27)) {
          $$0$i = 1;
          break L10;
         }
         $28 = (($n$1$i) + 1)|0;
         $n$1$i = $28;
        }
       } else {
        $$0$i = 1;
       }
      } else {
       $$0$i = 1;
      }
     } else {
      $$0$i = 1;
     }
    }
   } while(0);
   HEAP32[$4>>2] = $$0$i;
  }
  $29 = ((($s)) + 2840|0);
  _build_tree($s,$29);
  $30 = ((($s)) + 2852|0);
  _build_tree($s,$30);
  $31 = ((($s)) + 148|0);
  $32 = ((($s)) + 2844|0);
  $33 = HEAP32[$32>>2]|0;
  _scan_tree($s,$31,$33);
  $34 = ((($s)) + 2440|0);
  $35 = ((($s)) + 2856|0);
  $36 = HEAP32[$35>>2]|0;
  _scan_tree($s,$34,$36);
  $37 = ((($s)) + 2864|0);
  _build_tree($s,$37);
  $max_blindex$0$i = 18;
  while(1) {
   $38 = ($max_blindex$0$i|0)>(2);
   if (!($38)) {
    break;
   }
   $39 = (23935 + ($max_blindex$0$i)|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = (((((($s)) + 2684|0) + ($41<<2)|0)) + 2|0);
   $43 = HEAP16[$42>>1]|0;
   $44 = ($43<<16>>16)==(0);
   if (!($44)) {
    break;
   }
   $45 = (($max_blindex$0$i) + -1)|0;
   $max_blindex$0$i = $45;
  }
  $46 = ($max_blindex$0$i*3)|0;
  $47 = (($46) + 17)|0;
  $48 = ((($s)) + 5800|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + ($47))|0;
  HEAP32[$48>>2] = $50;
  $51 = (($50) + 10)|0;
  $52 = $51 >>> 3;
  $53 = ((($s)) + 5804|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + 10)|0;
  $56 = $55 >>> 3;
  $57 = ($56>>>0)>($52>>>0);
  $$ = $57 ? $52 : $56;
  $phitmp = (($max_blindex$0$i) + 1)|0;
  $max_blindex$0 = $phitmp;$opt_lenb$1 = $$;$static_lenb$0 = $56;
 } else {
  $58 = (($stored_len) + 5)|0;
  $max_blindex$0 = 1;$opt_lenb$1 = $58;$static_lenb$0 = $58;
 }
 $59 = (($stored_len) + 4)|0;
 $60 = ($59>>>0)>($opt_lenb$1>>>0);
 $61 = ($buf|0)==(0|0);
 $or$cond = $60 | $61;
 do {
  if ($or$cond) {
   $62 = ((($s)) + 136|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)==(4);
   $65 = ($static_lenb$0|0)==($opt_lenb$1|0);
   $or$cond20 = $64 | $65;
   $66 = ((($s)) + 5820|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($67|0)>(13);
   if ($or$cond20) {
    $69 = (($last) + 2)|0;
    $70 = $69 & 65535;
    $71 = $70 << $67;
    $72 = ((($s)) + 5816|0);
    $73 = HEAP16[$72>>1]|0;
    $74 = $73&65535;
    $75 = $74 | $71;
    $76 = $75&65535;
    HEAP16[$72>>1] = $76;
    if ($68) {
     $77 = $75&255;
     $78 = ((($s)) + 20|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (($79) + 1)|0;
     HEAP32[$78>>2] = $80;
     $81 = ((($s)) + 8|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (($82) + ($79)|0);
     HEAP8[$83>>0] = $77;
     $84 = HEAP16[$72>>1]|0;
     $85 = ($84&65535) >>> 8;
     $86 = $85&255;
     $87 = HEAP32[$78>>2]|0;
     $88 = (($87) + 1)|0;
     HEAP32[$78>>2] = $88;
     $89 = HEAP32[$81>>2]|0;
     $90 = (($89) + ($87)|0);
     HEAP8[$90>>0] = $86;
     $91 = HEAP32[$66>>2]|0;
     $92 = (16 - ($91))|0;
     $93 = $70 >>> $92;
     $94 = $93&65535;
     HEAP16[$72>>1] = $94;
     $95 = (($91) + -13)|0;
     $storemerge19 = $95;
    } else {
     $96 = (($67) + 3)|0;
     $storemerge19 = $96;
    }
    HEAP32[$66>>2] = $storemerge19;
    _compress_block($s,12710,13862);
    $n$0$i1 = 0;
    break;
   }
   $97 = (($last) + 4)|0;
   $98 = $97 & 65535;
   $99 = $98 << $67;
   $100 = ((($s)) + 5816|0);
   $101 = HEAP16[$100>>1]|0;
   $102 = $101&65535;
   $103 = $102 | $99;
   $104 = $103&65535;
   HEAP16[$100>>1] = $104;
   if ($68) {
    $105 = $103&255;
    $106 = ((($s)) + 20|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (($107) + 1)|0;
    HEAP32[$106>>2] = $108;
    $109 = ((($s)) + 8|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = (($110) + ($107)|0);
    HEAP8[$111>>0] = $105;
    $112 = HEAP16[$100>>1]|0;
    $113 = ($112&65535) >>> 8;
    $114 = $113&255;
    $115 = HEAP32[$106>>2]|0;
    $116 = (($115) + 1)|0;
    HEAP32[$106>>2] = $116;
    $117 = HEAP32[$109>>2]|0;
    $118 = (($117) + ($115)|0);
    HEAP8[$118>>0] = $114;
    $119 = HEAP32[$66>>2]|0;
    $120 = (16 - ($119))|0;
    $121 = $98 >>> $120;
    $122 = $121&65535;
    HEAP16[$100>>1] = $122;
    $123 = (($119) + -13)|0;
    $135 = $121;$storemerge = $123;
   } else {
    $124 = (($67) + 3)|0;
    $135 = $103;$storemerge = $124;
   }
   HEAP32[$66>>2] = $storemerge;
   $125 = ((($s)) + 2844|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ((($s)) + 2856|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = ($storemerge|0)>(11);
   $130 = (($126) + 65280)|0;
   $131 = $130 & 65535;
   $132 = $131 << $storemerge;
   $133 = ((($s)) + 5816|0);
   $134 = $135 & 65535;
   $136 = $134 | $132;
   $137 = $136&65535;
   HEAP16[$133>>1] = $137;
   if ($129) {
    $138 = $136&255;
    $139 = ((($s)) + 20|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = (($140) + 1)|0;
    HEAP32[$139>>2] = $141;
    $142 = ((($s)) + 8|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = (($143) + ($140)|0);
    HEAP8[$144>>0] = $138;
    $145 = HEAP16[$133>>1]|0;
    $146 = ($145&65535) >>> 8;
    $147 = $146&255;
    $148 = HEAP32[$139>>2]|0;
    $149 = (($148) + 1)|0;
    HEAP32[$139>>2] = $149;
    $150 = HEAP32[$142>>2]|0;
    $151 = (($150) + ($148)|0);
    HEAP8[$151>>0] = $147;
    $152 = HEAP32[$66>>2]|0;
    $153 = (16 - ($152))|0;
    $154 = $131 >>> $153;
    $155 = $154&65535;
    HEAP16[$133>>1] = $155;
    $156 = (($152) + -11)|0;
    $163 = $154;$storemerge16 = $156;
   } else {
    $157 = (($storemerge) + 5)|0;
    $163 = $136;$storemerge16 = $157;
   }
   HEAP32[$66>>2] = $storemerge16;
   $158 = ($storemerge16|0)>(11);
   $159 = $128 & 65535;
   $160 = $159 << $storemerge16;
   $161 = ((($s)) + 5816|0);
   $162 = $163 & 65535;
   $164 = $162 | $160;
   $165 = $164&65535;
   HEAP16[$161>>1] = $165;
   if ($158) {
    $166 = $164&255;
    $167 = ((($s)) + 20|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = (($168) + 1)|0;
    HEAP32[$167>>2] = $169;
    $170 = ((($s)) + 8|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = (($171) + ($168)|0);
    HEAP8[$172>>0] = $166;
    $173 = HEAP16[$161>>1]|0;
    $174 = ($173&65535) >>> 8;
    $175 = $174&255;
    $176 = HEAP32[$167>>2]|0;
    $177 = (($176) + 1)|0;
    HEAP32[$167>>2] = $177;
    $178 = HEAP32[$170>>2]|0;
    $179 = (($178) + ($176)|0);
    HEAP8[$179>>0] = $175;
    $180 = HEAP32[$66>>2]|0;
    $181 = (16 - ($180))|0;
    $182 = $159 >>> $181;
    $183 = $182&65535;
    HEAP16[$161>>1] = $183;
    $184 = (($180) + -11)|0;
    $192 = $182;$storemerge17 = $184;
   } else {
    $185 = (($storemerge16) + 5)|0;
    $192 = $164;$storemerge17 = $185;
   }
   HEAP32[$66>>2] = $storemerge17;
   $186 = ($storemerge17|0)>(12);
   $187 = (($max_blindex$0) + 65532)|0;
   $188 = $187 & 65535;
   $189 = $188 << $storemerge17;
   $190 = ((($s)) + 5816|0);
   $191 = $192 & 65535;
   $193 = $191 | $189;
   $194 = $193&65535;
   HEAP16[$190>>1] = $194;
   if ($186) {
    $195 = $193&255;
    $196 = ((($s)) + 20|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = (($197) + 1)|0;
    HEAP32[$196>>2] = $198;
    $199 = ((($s)) + 8|0);
    $200 = HEAP32[$199>>2]|0;
    $201 = (($200) + ($197)|0);
    HEAP8[$201>>0] = $195;
    $202 = HEAP16[$190>>1]|0;
    $203 = ($202&65535) >>> 8;
    $204 = $203&255;
    $205 = HEAP32[$196>>2]|0;
    $206 = (($205) + 1)|0;
    HEAP32[$196>>2] = $206;
    $207 = HEAP32[$199>>2]|0;
    $208 = (($207) + ($205)|0);
    HEAP8[$208>>0] = $204;
    $209 = HEAP32[$66>>2]|0;
    $210 = (16 - ($209))|0;
    $211 = $188 >>> $210;
    $212 = $211&65535;
    HEAP16[$190>>1] = $212;
    $213 = (($209) + -12)|0;
    HEAP32[$66>>2] = $213;
    $$pre$phi11Z2D = $199;$$pre$phi9Z2D = $196;$291 = $211;$292 = $213;
   } else {
    $214 = (($storemerge17) + 4)|0;
    HEAP32[$66>>2] = $214;
    $$pre = ((($s)) + 20|0);
    $$pre10 = ((($s)) + 8|0);
    $$pre$phi11Z2D = $$pre10;$$pre$phi9Z2D = $$pre;$291 = $193;$292 = $214;
   }
   $217 = $292;$226 = $291;$rank$0$i = 0;
   while(1) {
    $215 = ($rank$0$i|0)<($max_blindex$0|0);
    if (!($215)) {
     break;
    }
    $216 = ($217|0)>(13);
    $218 = (23935 + ($rank$0$i)|0);
    $219 = HEAP8[$218>>0]|0;
    $220 = $219&255;
    $221 = (((((($s)) + 2684|0) + ($220<<2)|0)) + 2|0);
    $222 = HEAP16[$221>>1]|0;
    $223 = $222&65535;
    $224 = $223 << $217;
    $225 = $226 & 65535;
    $227 = $225 | $224;
    $228 = $227&65535;
    HEAP16[$190>>1] = $228;
    if ($216) {
     $229 = $227&255;
     $230 = HEAP32[$$pre$phi9Z2D>>2]|0;
     $231 = (($230) + 1)|0;
     HEAP32[$$pre$phi9Z2D>>2] = $231;
     $232 = HEAP32[$$pre$phi11Z2D>>2]|0;
     $233 = (($232) + ($230)|0);
     HEAP8[$233>>0] = $229;
     $234 = HEAP16[$190>>1]|0;
     $235 = ($234&65535) >>> 8;
     $236 = $235&255;
     $237 = HEAP32[$$pre$phi9Z2D>>2]|0;
     $238 = (($237) + 1)|0;
     HEAP32[$$pre$phi9Z2D>>2] = $238;
     $239 = HEAP32[$$pre$phi11Z2D>>2]|0;
     $240 = (($239) + ($237)|0);
     HEAP8[$240>>0] = $236;
     $241 = HEAP32[$66>>2]|0;
     $242 = (16 - ($241))|0;
     $243 = $223 >>> $242;
     $244 = $243&65535;
     HEAP16[$190>>1] = $244;
     $245 = (($241) + -13)|0;
     $293 = $243;$storemerge18 = $245;
    } else {
     $246 = (($217) + 3)|0;
     $293 = $227;$storemerge18 = $246;
    }
    HEAP32[$66>>2] = $storemerge18;
    $247 = (($rank$0$i) + 1)|0;
    $217 = $storemerge18;$226 = $293;$rank$0$i = $247;
   }
   $248 = ((($s)) + 148|0);
   _send_tree($s,$248,$126);
   $249 = ((($s)) + 2440|0);
   _send_tree($s,$249,$128);
   _compress_block($s,$248,$249);
   $n$0$i1 = 0;
  } else {
   __tr_stored_block($s,$buf,$stored_len,$last);
   $n$0$i1 = 0;
  }
 } while(0);
 while(1) {
  $exitcond15 = ($n$0$i1|0)==(286);
  if ($exitcond15) {
   $n$1$i2 = 0;
   break;
  }
  $250 = (((($s)) + 148|0) + ($n$0$i1<<2)|0);
  HEAP16[$250>>1] = 0;
  $251 = (($n$0$i1) + 1)|0;
  $n$0$i1 = $251;
 }
 while(1) {
  $exitcond14 = ($n$1$i2|0)==(30);
  if ($exitcond14) {
   $n$2$i = 0;
   break;
  }
  $252 = (((($s)) + 2440|0) + ($n$1$i2<<2)|0);
  HEAP16[$252>>1] = 0;
  $253 = (($n$1$i2) + 1)|0;
  $n$1$i2 = $253;
 }
 while(1) {
  $exitcond = ($n$2$i|0)==(19);
  if ($exitcond) {
   break;
  }
  $254 = (((($s)) + 2684|0) + ($n$2$i<<2)|0);
  HEAP16[$254>>1] = 0;
  $255 = (($n$2$i) + 1)|0;
  $n$2$i = $255;
 }
 $256 = ((($s)) + 1172|0);
 HEAP16[$256>>1] = 1;
 $257 = ((($s)) + 5804|0);
 HEAP32[$257>>2] = 0;
 $258 = ((($s)) + 5800|0);
 HEAP32[$258>>2] = 0;
 $259 = ((($s)) + 5808|0);
 HEAP32[$259>>2] = 0;
 $260 = ((($s)) + 5792|0);
 HEAP32[$260>>2] = 0;
 $261 = ($last|0)==(0);
 if ($261) {
  return;
 }
 $262 = ((($s)) + 5820|0);
 $263 = HEAP32[$262>>2]|0;
 $264 = ($263|0)>(8);
 if ($264) {
  $265 = ((($s)) + 5816|0);
  $266 = HEAP16[$265>>1]|0;
  $267 = $266&255;
  $268 = ((($s)) + 20|0);
  $269 = HEAP32[$268>>2]|0;
  $270 = (($269) + 1)|0;
  HEAP32[$268>>2] = $270;
  $271 = ((($s)) + 8|0);
  $272 = HEAP32[$271>>2]|0;
  $273 = (($272) + ($269)|0);
  HEAP8[$273>>0] = $267;
  $274 = HEAP16[$265>>1]|0;
  $275 = ($274&65535) >>> 8;
  $276 = $275&255;
  $277 = HEAP32[$268>>2]|0;
  $278 = (($277) + 1)|0;
  HEAP32[$268>>2] = $278;
  $279 = HEAP32[$271>>2]|0;
  $280 = (($279) + ($277)|0);
  HEAP8[$280>>0] = $276;
  $$pre$phi13Z2D = $265;
 } else {
  $281 = ($263|0)>(0);
  $282 = ((($s)) + 5816|0);
  if ($281) {
   $283 = HEAP16[$282>>1]|0;
   $284 = $283&255;
   $285 = ((($s)) + 20|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = (($286) + 1)|0;
   HEAP32[$285>>2] = $287;
   $288 = ((($s)) + 8|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = (($289) + ($286)|0);
   HEAP8[$290>>0] = $284;
   $$pre$phi13Z2D = $282;
  } else {
   $$pre$phi13Z2D = $282;
  }
 }
 HEAP16[$$pre$phi13Z2D>>1] = 0;
 HEAP32[$262>>2] = 0;
 return;
}
function _build_tree($s,$desc) {
 $s = $s|0;
 $desc = $desc|0;
 var $$ = 0, $$0$i$i = 0, $$01$i$i = 0, $$17 = 0, $$max_code$2 = 0, $$pre = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits$0$i = 0, $bits$0$i1 = 0, $bits$2$i = 0, $bits$2$in$i = 0, $bits$3$i = 0, $code$0$i = 0, $exitcond = 0, $exitcond16 = 0, $h$0$i = 0, $h$0$in$i = 0, $h$1$i = 0;
 var $h$2$i = 0, $h$2$i$ph = 0, $max_code$0 = 0, $max_code$1 = 0, $max_code$2 = 0, $n$0 = 0, $n$0$i$ph = 0, $n$0$i2 = 0, $n$1 = 0, $next_code$i = 0, $node$0 = 0, $overflow$0$i = 0, $overflow$0$i$ = 0, $overflow$2$i = 0, $res$0$i$i = 0, $xbits$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $next_code$i = sp;
 $0 = HEAP32[$desc>>2]|0;
 $1 = ((($desc)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($s)) + 5200|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($s)) + 5204|0);
 HEAP32[$7>>2] = 573;
 $max_code$0 = -1;$n$0 = 0;
 while(1) {
  $8 = ($n$0|0)<($5|0);
  if (!($8)) {
   break;
  }
  $12 = (($0) + ($n$0<<2)|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = ($13<<16>>16)==(0);
  if ($14) {
   $19 = (((($0) + ($n$0<<2)|0)) + 2|0);
   HEAP16[$19>>1] = 0;
   $max_code$1 = $max_code$0;
  } else {
   $15 = HEAP32[$6>>2]|0;
   $16 = (($15) + 1)|0;
   HEAP32[$6>>2] = $16;
   $17 = (((($s)) + 2908|0) + ($16<<2)|0);
   HEAP32[$17>>2] = $n$0;
   $18 = (((($s)) + 5208|0) + ($n$0)|0);
   HEAP8[$18>>0] = 0;
   $max_code$1 = $n$0;
  }
  $20 = (($n$0) + 1)|0;
  $max_code$0 = $max_code$1;$n$0 = $20;
 }
 $9 = ((($s)) + 5800|0);
 $10 = ($3|0)==(0|0);
 $11 = ((($s)) + 5804|0);
 $max_code$2 = $max_code$0;
 while(1) {
  $21 = HEAP32[$6>>2]|0;
  $22 = ($21|0)<(2);
  if (!($22)) {
   break;
  }
  $23 = ($max_code$2|0)<(2);
  $24 = (($max_code$2) + 1)|0;
  $$max_code$2 = $23 ? $24 : $max_code$2;
  $$ = $23 ? $24 : 0;
  $25 = (($21) + 1)|0;
  HEAP32[$6>>2] = $25;
  $26 = (((($s)) + 2908|0) + ($25<<2)|0);
  HEAP32[$26>>2] = $$;
  $27 = (($0) + ($$<<2)|0);
  HEAP16[$27>>1] = 1;
  $28 = (((($s)) + 5208|0) + ($$)|0);
  HEAP8[$28>>0] = 0;
  $29 = HEAP32[$9>>2]|0;
  $30 = (($29) + -1)|0;
  HEAP32[$9>>2] = $30;
  if ($10) {
   $max_code$2 = $$max_code$2;
   continue;
  }
  $31 = (((($3) + ($$<<2)|0)) + 2|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32&65535;
  $34 = HEAP32[$11>>2]|0;
  $35 = (($34) - ($33))|0;
  HEAP32[$11>>2] = $35;
  $max_code$2 = $$max_code$2;
 }
 $36 = ((($desc)) + 4|0);
 HEAP32[$36>>2] = $max_code$2;
 $37 = HEAP32[$6>>2]|0;
 $38 = (($37|0) / 2)&-1;
 $n$1 = $38;
 while(1) {
  $39 = ($n$1|0)>(0);
  if (!($39)) {
   break;
  }
  _pqdownheap($s,$0,$n$1);
  $41 = (($n$1) + -1)|0;
  $n$1 = $41;
 }
 $40 = ((($s)) + 2912|0);
 $$pre = HEAP32[$6>>2]|0;
 $44 = $$pre;$node$0 = $5;
 while(1) {
  $42 = HEAP32[$40>>2]|0;
  $43 = (($44) + -1)|0;
  HEAP32[$6>>2] = $43;
  $45 = (((($s)) + 2908|0) + ($44<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  HEAP32[$40>>2] = $46;
  _pqdownheap($s,$0,1);
  $47 = HEAP32[$40>>2]|0;
  $48 = HEAP32[$7>>2]|0;
  $49 = (($48) + -1)|0;
  HEAP32[$7>>2] = $49;
  $50 = (((($s)) + 2908|0) + ($49<<2)|0);
  HEAP32[$50>>2] = $42;
  $51 = HEAP32[$7>>2]|0;
  $52 = (($51) + -1)|0;
  HEAP32[$7>>2] = $52;
  $53 = (((($s)) + 2908|0) + ($52<<2)|0);
  HEAP32[$53>>2] = $47;
  $54 = (($0) + ($42<<2)|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55&65535;
  $57 = (($0) + ($47<<2)|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58&65535;
  $60 = (($56) + ($59))|0;
  $61 = $60&65535;
  $62 = (($0) + ($node$0<<2)|0);
  HEAP16[$62>>1] = $61;
  $63 = (((($s)) + 5208|0) + ($42)|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = (((($s)) + 5208|0) + ($47)|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = ($64&255)<($66&255);
  $$sink = $67 ? $66 : $64;
  $68 = $$sink&255;
  $69 = (($68) + 1)|0;
  $70 = $69&255;
  $71 = (((($s)) + 5208|0) + ($node$0)|0);
  HEAP8[$71>>0] = $70;
  $72 = $node$0&65535;
  $73 = (((($0) + ($47<<2)|0)) + 2|0);
  HEAP16[$73>>1] = $72;
  $74 = (((($0) + ($42<<2)|0)) + 2|0);
  HEAP16[$74>>1] = $72;
  HEAP32[$40>>2] = $node$0;
  _pqdownheap($s,$0,1);
  $75 = (($node$0) + 1)|0;
  $76 = HEAP32[$6>>2]|0;
  $77 = ($76|0)>(1);
  if ($77) {
   $44 = $76;$node$0 = $75;
  } else {
   break;
  }
 }
 $78 = HEAP32[$40>>2]|0;
 $79 = HEAP32[$7>>2]|0;
 $80 = (($79) + -1)|0;
 HEAP32[$7>>2] = $80;
 $81 = (((($s)) + 2908|0) + ($80<<2)|0);
 HEAP32[$81>>2] = $78;
 $82 = HEAP32[$desc>>2]|0;
 $83 = HEAP32[$36>>2]|0;
 $84 = HEAP32[$1>>2]|0;
 $85 = HEAP32[$84>>2]|0;
 $86 = ((($84)) + 4|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ((($84)) + 8|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ((($84)) + 16|0);
 $91 = HEAP32[$90>>2]|0;
 $bits$0$i = 0;
 while(1) {
  $exitcond16 = ($bits$0$i|0)==(16);
  if ($exitcond16) {
   break;
  }
  $92 = (((($s)) + 2876|0) + ($bits$0$i<<1)|0);
  HEAP16[$92>>1] = 0;
  $93 = (($bits$0$i) + 1)|0;
  $bits$0$i = $93;
 }
 $94 = HEAP32[$7>>2]|0;
 $95 = (((($s)) + 2908|0) + ($94<<2)|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (((($82) + ($96<<2)|0)) + 2|0);
 HEAP16[$97>>1] = 0;
 $98 = HEAP32[$7>>2]|0;
 $99 = ($85|0)==(0|0);
 $h$0$in$i = $98;$overflow$0$i = 0;
 while(1) {
  $h$0$i = (($h$0$in$i) + 1)|0;
  $100 = ($h$0$i|0)<(573);
  if (!($100)) {
   break;
  }
  $101 = (((($s)) + 2908|0) + ($h$0$i<<2)|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (((($82) + ($102<<2)|0)) + 2|0);
  $104 = HEAP16[$103>>1]|0;
  $105 = $104&65535;
  $106 = (((($82) + ($105<<2)|0)) + 2|0);
  $107 = HEAP16[$106>>1]|0;
  $108 = $107&65535;
  $109 = (($108) + 1)|0;
  $110 = ($108|0)<($91|0);
  $$17 = $110 ? $109 : $91;
  $111 = $110&1;
  $112 = $111 ^ 1;
  $overflow$0$i$ = (($overflow$0$i) + ($112))|0;
  $113 = $$17&65535;
  HEAP16[$103>>1] = $113;
  $114 = ($102|0)>($83|0);
  if ($114) {
   $h$0$in$i = $h$0$i;$overflow$0$i = $overflow$0$i$;
   continue;
  }
  $115 = (((($s)) + 2876|0) + ($$17<<1)|0);
  $116 = HEAP16[$115>>1]|0;
  $117 = (($116) + 1)<<16>>16;
  HEAP16[$115>>1] = $117;
  $118 = ($102|0)<($89|0);
  if ($118) {
   $xbits$0$i = 0;
  } else {
   $119 = (($102) - ($89))|0;
   $120 = (($87) + ($119<<2)|0);
   $121 = HEAP32[$120>>2]|0;
   $xbits$0$i = $121;
  }
  $122 = (($82) + ($102<<2)|0);
  $123 = HEAP16[$122>>1]|0;
  $124 = $123&65535;
  $125 = (($$17) + ($xbits$0$i))|0;
  $126 = Math_imul($124, $125)|0;
  $127 = HEAP32[$9>>2]|0;
  $128 = (($127) + ($126))|0;
  HEAP32[$9>>2] = $128;
  if ($99) {
   $h$0$in$i = $h$0$i;$overflow$0$i = $overflow$0$i$;
   continue;
  }
  $129 = (((($85) + ($102<<2)|0)) + 2|0);
  $130 = HEAP16[$129>>1]|0;
  $131 = $130&65535;
  $132 = (($131) + ($xbits$0$i))|0;
  $133 = Math_imul($124, $132)|0;
  $134 = HEAP32[$11>>2]|0;
  $135 = (($134) + ($133))|0;
  HEAP32[$11>>2] = $135;
  $h$0$in$i = $h$0$i;$overflow$0$i = $overflow$0$i$;
 }
 $136 = ($overflow$0$i|0)==(0);
 L34: do {
  if (!($136)) {
   $137 = (((($s)) + 2876|0) + ($91<<1)|0);
   $overflow$2$i = $overflow$0$i;
   while(1) {
    $bits$2$in$i = $91;
    while(1) {
     $bits$2$i = (($bits$2$in$i) + -1)|0;
     $138 = (((($s)) + 2876|0) + ($bits$2$i<<1)|0);
     $139 = HEAP16[$138>>1]|0;
     $140 = ($139<<16>>16)==(0);
     if ($140) {
      $bits$2$in$i = $bits$2$i;
     } else {
      break;
     }
    }
    $141 = (($139) + -1)<<16>>16;
    HEAP16[$138>>1] = $141;
    $142 = (((($s)) + 2876|0) + ($bits$2$in$i<<1)|0);
    $143 = HEAP16[$142>>1]|0;
    $144 = $143&65535;
    $145 = (($144) + 2)|0;
    $146 = $145&65535;
    HEAP16[$142>>1] = $146;
    $147 = HEAP16[$137>>1]|0;
    $148 = (($147) + -1)<<16>>16;
    HEAP16[$137>>1] = $148;
    $149 = (($overflow$2$i) + -2)|0;
    $150 = ($overflow$2$i|0)>(2);
    if ($150) {
     $overflow$2$i = $149;
    } else {
     $bits$3$i = $91;$h$1$i = $h$0$i;
     break;
    }
   }
   while(1) {
    $151 = ($bits$3$i|0)==(0);
    if ($151) {
     break L34;
    }
    $152 = (((($s)) + 2876|0) + ($bits$3$i<<1)|0);
    $153 = HEAP16[$152>>1]|0;
    $154 = $153&65535;
    $155 = $bits$3$i&65535;
    $h$2$i$ph = $h$1$i;$n$0$i$ph = $154;
    L44: while(1) {
     $156 = ($n$0$i$ph|0)==(0);
     $h$2$i = $h$2$i$ph;
     while(1) {
      if ($156) {
       break L44;
      }
      $157 = (($h$2$i) + -1)|0;
      $158 = (((($s)) + 2908|0) + ($157<<2)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159|0)>($83|0);
      if ($160) {
       $h$2$i = $157;
      } else {
       break;
      }
     }
     $161 = (((($82) + ($159<<2)|0)) + 2|0);
     $162 = HEAP16[$161>>1]|0;
     $163 = $162&65535;
     $164 = ($bits$3$i|0)==($163|0);
     if (!($164)) {
      $165 = (($bits$3$i) - ($163))|0;
      $166 = (($82) + ($159<<2)|0);
      $167 = HEAP16[$166>>1]|0;
      $168 = $167&65535;
      $169 = Math_imul($165, $168)|0;
      $170 = HEAP32[$9>>2]|0;
      $171 = (($170) + ($169))|0;
      HEAP32[$9>>2] = $171;
      HEAP16[$161>>1] = $155;
     }
     $172 = (($n$0$i$ph) + -1)|0;
     $h$2$i$ph = $157;$n$0$i$ph = $172;
    }
    $173 = (($bits$3$i) + -1)|0;
    $bits$3$i = $173;$h$1$i = $h$2$i;
   }
  }
 } while(0);
 $bits$0$i1 = 1;$code$0$i = 0;
 while(1) {
  $exitcond = ($bits$0$i1|0)==(16);
  if ($exitcond) {
   $n$0$i2 = 0;
   break;
  }
  $174 = $code$0$i & 65534;
  $175 = (($bits$0$i1) + -1)|0;
  $176 = (((($s)) + 2876|0) + ($175<<1)|0);
  $177 = HEAP16[$176>>1]|0;
  $178 = $177&65535;
  $179 = (($174) + ($178))|0;
  $180 = $179 << 1;
  $181 = $180&65535;
  $182 = (($next_code$i) + ($bits$0$i1<<1)|0);
  HEAP16[$182>>1] = $181;
  $183 = (($bits$0$i1) + 1)|0;
  $bits$0$i1 = $183;$code$0$i = $180;
 }
 while(1) {
  $184 = ($n$0$i2|0)>($max_code$2|0);
  if ($184) {
   break;
  }
  $185 = (((($0) + ($n$0$i2<<2)|0)) + 2|0);
  $186 = HEAP16[$185>>1]|0;
  $187 = $186&65535;
  $188 = ($186<<16>>16)==(0);
  if (!($188)) {
   $189 = (($next_code$i) + ($187<<1)|0);
   $190 = HEAP16[$189>>1]|0;
   $191 = (($190) + 1)<<16>>16;
   HEAP16[$189>>1] = $191;
   $192 = $190&65535;
   $$0$i$i = $192;$$01$i$i = $187;$res$0$i$i = 0;
   while(1) {
    $193 = $$0$i$i & 1;
    $194 = $res$0$i$i | $193;
    $195 = $194 << 1;
    $196 = $$0$i$i >>> 1;
    $197 = (($$01$i$i) + -1)|0;
    $198 = ($$01$i$i|0)>(1);
    if ($198) {
     $$0$i$i = $196;$$01$i$i = $197;$res$0$i$i = $195;
    } else {
     break;
    }
   }
   $199 = $194&65535;
   $200 = (($0) + ($n$0$i2<<2)|0);
   HEAP16[$200>>1] = $199;
  }
  $201 = (($n$0$i2) + 1)|0;
  $n$0$i2 = $201;
 }
 STACKTOP = sp;return;
}
function _pqdownheap($s,$tree,$k) {
 $s = $s|0;
 $tree = $tree|0;
 $k = $k|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j$0 = 0, $j$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (((($s)) + 2908|0) + ($k<<2)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((($s)) + 5208|0) + ($1)|0);
 $3 = ((($s)) + 5200|0);
 $4 = (($tree) + ($1<<2)|0);
 $$0 = $k;
 while(1) {
  $j$0 = $$0 << 1;
  $5 = HEAP32[$3>>2]|0;
  $6 = ($j$0|0)>($5|0);
  if ($6) {
   label = 12;
   break;
  }
  $7 = ($j$0|0)<($5|0);
  do {
   if ($7) {
    $8 = $j$0 | 1;
    $9 = (((($s)) + 2908|0) + ($8<<2)|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($tree) + ($10<<2)|0);
    $12 = HEAP16[$11>>1]|0;
    $13 = (((($s)) + 2908|0) + ($j$0<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($tree) + ($14<<2)|0);
    $16 = HEAP16[$15>>1]|0;
    $17 = ($12&65535)<($16&65535);
    if (!($17)) {
     $18 = ($12<<16>>16)==($16<<16>>16);
     if (!($18)) {
      $j$1 = $j$0;
      break;
     }
     $19 = (((($s)) + 5208|0) + ($10)|0);
     $20 = HEAP8[$19>>0]|0;
     $21 = (((($s)) + 5208|0) + ($14)|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = ($20&255)>($22&255);
     if ($23) {
      $j$1 = $j$0;
      break;
     }
    }
    $j$1 = $8;
   } else {
    $j$1 = $j$0;
   }
  } while(0);
  $24 = HEAP16[$4>>1]|0;
  $25 = (((($s)) + 2908|0) + ($j$1<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($tree) + ($26<<2)|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = ($24&65535)<($28&65535);
  if ($29) {
   label = 12;
   break;
  }
  $30 = ($24<<16>>16)==($28<<16>>16);
  if ($30) {
   $31 = HEAP8[$2>>0]|0;
   $32 = (((($s)) + 5208|0) + ($26)|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = ($31&255)>($33&255);
   if (!($34)) {
    label = 12;
    break;
   }
  }
  $35 = (((($s)) + 2908|0) + ($$0<<2)|0);
  HEAP32[$35>>2] = $26;
  $$0 = $j$1;
 }
 if ((label|0) == 12) {
  $36 = (((($s)) + 2908|0) + ($$0<<2)|0);
  HEAP32[$36>>2] = $1;
  return;
 }
}
function _scan_tree($s,$tree,$max_code) {
 $s = $s|0;
 $tree = $tree|0;
 $max_code = $max_code|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $count$0 = 0, $max_count$1 = 0, $max_count$1$phi = 0, $min_count$1 = 0, $min_count$1$phi = 0, $n$0 = 0, $nextlen$0 = 0, $or$cond = 0, $prevlen$0 = 0, $prevlen$0$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($tree)) + 2|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = ($1<<16>>16)==(0);
 $$ = $3 ? 138 : 7;
 $$1 = $3 ? 3 : 4;
 $4 = (($max_code) + 1)|0;
 $5 = (((($tree) + ($4<<2)|0)) + 2|0);
 HEAP16[$5>>1] = -1;
 $6 = ((($s)) + 2752|0);
 $7 = ((($s)) + 2756|0);
 $8 = ((($s)) + 2748|0);
 $count$0 = 0;$max_count$1 = $$;$min_count$1 = $$1;$n$0 = 0;$nextlen$0 = $2;$prevlen$0 = -1;
 while(1) {
  $9 = ($n$0|0)>($max_code|0);
  if ($9) {
   break;
  }
  $10 = (($n$0) + 1)|0;
  $11 = (((($tree) + ($10<<2)|0)) + 2|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  $14 = (($count$0) + 1)|0;
  $15 = ($14|0)<($max_count$1|0);
  $16 = ($nextlen$0|0)==($13|0);
  $or$cond = $15 & $16;
  if ($or$cond) {
   $prevlen$0$phi = $prevlen$0;$min_count$1$phi = $min_count$1;$max_count$1$phi = $max_count$1;$count$0 = $14;$n$0 = $10;$nextlen$0 = $13;$prevlen$0 = $prevlen$0$phi;$min_count$1 = $min_count$1$phi;$max_count$1 = $max_count$1$phi;
   continue;
  }
  $17 = ($14|0)<($min_count$1|0);
  do {
   if ($17) {
    $18 = (((($s)) + 2684|0) + ($nextlen$0<<2)|0);
    $19 = HEAP16[$18>>1]|0;
    $20 = $19&65535;
    $21 = (($20) + ($14))|0;
    $22 = $21&65535;
    HEAP16[$18>>1] = $22;
   } else {
    $23 = ($nextlen$0|0)==(0);
    if ($23) {
     $30 = ($14|0)<(11);
     if ($30) {
      $31 = HEAP16[$6>>1]|0;
      $32 = (($31) + 1)<<16>>16;
      HEAP16[$6>>1] = $32;
      break;
     } else {
      $33 = HEAP16[$7>>1]|0;
      $34 = (($33) + 1)<<16>>16;
      HEAP16[$7>>1] = $34;
      break;
     }
    } else {
     $24 = ($nextlen$0|0)==($prevlen$0|0);
     if (!($24)) {
      $25 = (((($s)) + 2684|0) + ($nextlen$0<<2)|0);
      $26 = HEAP16[$25>>1]|0;
      $27 = (($26) + 1)<<16>>16;
      HEAP16[$25>>1] = $27;
     }
     $28 = HEAP16[$8>>1]|0;
     $29 = (($28) + 1)<<16>>16;
     HEAP16[$8>>1] = $29;
     break;
    }
   }
  } while(0);
  $35 = ($12<<16>>16)==(0);
  if ($35) {
   $prevlen$0$phi = $nextlen$0;$count$0 = 0;$max_count$1 = 138;$min_count$1 = 3;$n$0 = $10;$nextlen$0 = $13;$prevlen$0 = $prevlen$0$phi;
   continue;
  }
  $36 = ($nextlen$0|0)==($13|0);
  $$2 = $36 ? 6 : 7;
  $$3 = $36 ? 3 : 4;
  $prevlen$0$phi = $nextlen$0;$count$0 = 0;$max_count$1 = $$2;$min_count$1 = $$3;$n$0 = $10;$nextlen$0 = $13;$prevlen$0 = $prevlen$0$phi;
 }
 return;
}
function _compress_block($s,$ltree,$dtree) {
 $s = $s|0;
 $ltree = $ltree|0;
 $dtree = $dtree|0;
 var $$phi$trans$insert = 0, $$pn = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink$in = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $lx$0 = 0, $storemerge = 0, $storemerge1 = 0, $storemerge2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 5792|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $$phi$trans$insert = ((($s)) + 5820|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$pre$phiZ2D = $$phi$trans$insert;$203 = $$pre;
 } else {
  $3 = ((($s)) + 5796|0);
  $4 = ((($s)) + 5784|0);
  $5 = ((($s)) + 5820|0);
  $6 = ((($s)) + 5816|0);
  $7 = ((($s)) + 20|0);
  $8 = ((($s)) + 8|0);
  $lx$0 = 0;
  while(1) {
   $9 = HEAP32[$3>>2]|0;
   $10 = (($9) + ($lx$0<<1)|0);
   $11 = HEAP16[$10>>1]|0;
   $12 = $11&65535;
   $13 = (($lx$0) + 1)|0;
   $14 = HEAP32[$4>>2]|0;
   $15 = (($14) + ($lx$0)|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   $18 = ($11<<16>>16)==(0);
   do {
    if ($18) {
     $19 = (((($ltree) + ($17<<2)|0)) + 2|0);
     $20 = HEAP16[$19>>1]|0;
     $21 = $20&65535;
     $22 = HEAP32[$5>>2]|0;
     $23 = (16 - ($21))|0;
     $24 = ($22|0)>($23|0);
     $25 = (($ltree) + ($17<<2)|0);
     $26 = HEAP16[$25>>1]|0;
     $27 = $26&65535;
     $28 = $27 << $22;
     $29 = HEAP16[$6>>1]|0;
     $30 = $29&65535;
     $31 = $30 | $28;
     $32 = $31&65535;
     HEAP16[$6>>1] = $32;
     if ($24) {
      $33 = $31&255;
      $34 = HEAP32[$7>>2]|0;
      $35 = (($34) + 1)|0;
      HEAP32[$7>>2] = $35;
      $36 = HEAP32[$8>>2]|0;
      $37 = (($36) + ($34)|0);
      HEAP8[$37>>0] = $33;
      $38 = HEAP16[$6>>1]|0;
      $39 = ($38&65535) >>> 8;
      $40 = $39&255;
      $41 = HEAP32[$7>>2]|0;
      $42 = (($41) + 1)|0;
      HEAP32[$7>>2] = $42;
      $43 = HEAP32[$8>>2]|0;
      $44 = (($43) + ($41)|0);
      HEAP8[$44>>0] = $40;
      $45 = HEAP32[$5>>2]|0;
      $46 = (16 - ($45))|0;
      $47 = $27 >>> $46;
      $48 = $47&65535;
      HEAP16[$6>>1] = $48;
      $49 = (($21) + -16)|0;
      $50 = (($45) + ($49))|0;
      HEAP32[$5>>2] = $50;
      $234 = $50;
      break;
     } else {
      $51 = (($22) + ($21))|0;
      HEAP32[$5>>2] = $51;
      $234 = $51;
      break;
     }
    } else {
     $52 = (23679 + ($17)|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = $53&255;
     $55 = $54 | 256;
     $56 = (($55) + 1)|0;
     $57 = (((($ltree) + ($56<<2)|0)) + 2|0);
     $58 = HEAP16[$57>>1]|0;
     $59 = $58&65535;
     $60 = HEAP32[$5>>2]|0;
     $61 = (16 - ($59))|0;
     $62 = ($60|0)>($61|0);
     $63 = (($ltree) + ($56<<2)|0);
     $64 = HEAP16[$63>>1]|0;
     $65 = $64&65535;
     $66 = $65 << $60;
     $67 = HEAP16[$6>>1]|0;
     $68 = $67&65535;
     $69 = $68 | $66;
     $70 = $69&65535;
     HEAP16[$6>>1] = $70;
     if ($62) {
      $71 = $69&255;
      $72 = HEAP32[$7>>2]|0;
      $73 = (($72) + 1)|0;
      HEAP32[$7>>2] = $73;
      $74 = HEAP32[$8>>2]|0;
      $75 = (($74) + ($72)|0);
      HEAP8[$75>>0] = $71;
      $76 = HEAP16[$6>>1]|0;
      $77 = ($76&65535) >>> 8;
      $78 = $77&255;
      $79 = HEAP32[$7>>2]|0;
      $80 = (($79) + 1)|0;
      HEAP32[$7>>2] = $80;
      $81 = HEAP32[$8>>2]|0;
      $82 = (($81) + ($79)|0);
      HEAP8[$82>>0] = $78;
      $83 = HEAP32[$5>>2]|0;
      $84 = (16 - ($83))|0;
      $85 = $65 >>> $84;
      $86 = $85&65535;
      HEAP16[$6>>1] = $86;
      $87 = (($59) + -16)|0;
      $88 = (($83) + ($87))|0;
      $102 = $86;$storemerge = $88;
     } else {
      $89 = (($60) + ($59))|0;
      $102 = $70;$storemerge = $89;
     }
     HEAP32[$5>>2] = $storemerge;
     $90 = (8980 + ($54<<2)|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = (($54) + -8)|0;
     $93 = ($92>>>0)<(20);
     do {
      if ($93) {
       $94 = (9332 + ($54<<2)|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = (($17) - ($95))|0;
       $97 = (16 - ($91))|0;
       $98 = ($storemerge|0)>($97|0);
       $99 = $96 & 65535;
       $100 = $99 << $storemerge;
       $101 = $102&65535;
       $103 = $101 | $100;
       $104 = $103&65535;
       HEAP16[$6>>1] = $104;
       if ($98) {
        $105 = $103&255;
        $106 = HEAP32[$7>>2]|0;
        $107 = (($106) + 1)|0;
        HEAP32[$7>>2] = $107;
        $108 = HEAP32[$8>>2]|0;
        $109 = (($108) + ($106)|0);
        HEAP8[$109>>0] = $105;
        $110 = HEAP16[$6>>1]|0;
        $111 = ($110&65535) >>> 8;
        $112 = $111&255;
        $113 = HEAP32[$7>>2]|0;
        $114 = (($113) + 1)|0;
        HEAP32[$7>>2] = $114;
        $115 = HEAP32[$8>>2]|0;
        $116 = (($115) + ($113)|0);
        HEAP8[$116>>0] = $112;
        $117 = HEAP32[$5>>2]|0;
        $118 = (16 - ($117))|0;
        $119 = $99 >>> $118;
        $120 = $119&65535;
        HEAP16[$6>>1] = $120;
        $121 = (($91) + -16)|0;
        $122 = (($117) + ($121))|0;
        HEAP32[$5>>2] = $122;
        $134 = $122;$140 = $120;
        break;
       } else {
        $123 = (($storemerge) + ($91))|0;
        HEAP32[$5>>2] = $123;
        $134 = $123;$140 = $104;
        break;
       }
      } else {
       $134 = $storemerge;$140 = $102;
      }
     } while(0);
     $124 = (($12) + -1)|0;
     $125 = ($124>>>0)<(256);
     $126 = $124 >>> 7;
     $127 = (($126) + 256)|0;
     $$pn = $125 ? $124 : $127;
     $$sink$in = (23167 + ($$pn)|0);
     $$sink = HEAP8[$$sink$in>>0]|0;
     $128 = $$sink&255;
     $129 = (((($dtree) + ($128<<2)|0)) + 2|0);
     $130 = HEAP16[$129>>1]|0;
     $131 = $130&65535;
     $132 = (16 - ($131))|0;
     $133 = ($134|0)>($132|0);
     $135 = (($dtree) + ($128<<2)|0);
     $136 = HEAP16[$135>>1]|0;
     $137 = $136&65535;
     $138 = $137 << $134;
     $139 = $140&65535;
     $141 = $139 | $138;
     $142 = $141&65535;
     HEAP16[$6>>1] = $142;
     if ($133) {
      $143 = $141&255;
      $144 = HEAP32[$7>>2]|0;
      $145 = (($144) + 1)|0;
      HEAP32[$7>>2] = $145;
      $146 = HEAP32[$8>>2]|0;
      $147 = (($146) + ($144)|0);
      HEAP8[$147>>0] = $143;
      $148 = HEAP16[$6>>1]|0;
      $149 = ($148&65535) >>> 8;
      $150 = $149&255;
      $151 = HEAP32[$7>>2]|0;
      $152 = (($151) + 1)|0;
      HEAP32[$7>>2] = $152;
      $153 = HEAP32[$8>>2]|0;
      $154 = (($153) + ($151)|0);
      HEAP8[$154>>0] = $150;
      $155 = HEAP32[$5>>2]|0;
      $156 = (16 - ($155))|0;
      $157 = $137 >>> $156;
      $158 = $157&65535;
      HEAP16[$6>>1] = $158;
      $159 = (($131) + -16)|0;
      $160 = (($155) + ($159))|0;
      $174 = $157;$storemerge1 = $160;
     } else {
      $161 = (($134) + ($131))|0;
      $174 = $141;$storemerge1 = $161;
     }
     HEAP32[$5>>2] = $storemerge1;
     $162 = (9116 + ($128<<2)|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = (($128) + -4)|0;
     $165 = ($164>>>0)<(26);
     if ($165) {
      $166 = (9448 + ($128<<2)|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = (($124) - ($167))|0;
      $169 = (16 - ($163))|0;
      $170 = ($storemerge1|0)>($169|0);
      $171 = $168 & 65535;
      $172 = $171 << $storemerge1;
      $173 = $174 & 65535;
      $175 = $173 | $172;
      $176 = $175&65535;
      HEAP16[$6>>1] = $176;
      if ($170) {
       $177 = $175&255;
       $178 = HEAP32[$7>>2]|0;
       $179 = (($178) + 1)|0;
       HEAP32[$7>>2] = $179;
       $180 = HEAP32[$8>>2]|0;
       $181 = (($180) + ($178)|0);
       HEAP8[$181>>0] = $177;
       $182 = HEAP16[$6>>1]|0;
       $183 = ($182&65535) >>> 8;
       $184 = $183&255;
       $185 = HEAP32[$7>>2]|0;
       $186 = (($185) + 1)|0;
       HEAP32[$7>>2] = $186;
       $187 = HEAP32[$8>>2]|0;
       $188 = (($187) + ($185)|0);
       HEAP8[$188>>0] = $184;
       $189 = HEAP32[$5>>2]|0;
       $190 = (16 - ($189))|0;
       $191 = $171 >>> $190;
       $192 = $191&65535;
       HEAP16[$6>>1] = $192;
       $193 = (($163) + -16)|0;
       $194 = (($189) + ($193))|0;
       HEAP32[$5>>2] = $194;
       $234 = $194;
       break;
      } else {
       $195 = (($storemerge1) + ($163))|0;
       HEAP32[$5>>2] = $195;
       $234 = $195;
       break;
      }
     } else {
      $234 = $storemerge1;
     }
    }
   } while(0);
   $196 = HEAP32[$0>>2]|0;
   $197 = ($13>>>0)<($196>>>0);
   if ($197) {
    $lx$0 = $13;
   } else {
    $$pre$phiZ2D = $5;$203 = $234;
    break;
   }
  }
 }
 $198 = ((($ltree)) + 1026|0);
 $199 = HEAP16[$198>>1]|0;
 $200 = $199&65535;
 $201 = (16 - ($200))|0;
 $202 = ($203|0)>($201|0);
 $204 = ((($ltree)) + 1024|0);
 $205 = HEAP16[$204>>1]|0;
 $206 = $205&65535;
 $207 = $206 << $203;
 $208 = ((($s)) + 5816|0);
 $209 = HEAP16[$208>>1]|0;
 $210 = $209&65535;
 $211 = $210 | $207;
 $212 = $211&65535;
 HEAP16[$208>>1] = $212;
 if ($202) {
  $213 = $211&255;
  $214 = ((($s)) + 20|0);
  $215 = HEAP32[$214>>2]|0;
  $216 = (($215) + 1)|0;
  HEAP32[$214>>2] = $216;
  $217 = ((($s)) + 8|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = (($218) + ($215)|0);
  HEAP8[$219>>0] = $213;
  $220 = HEAP16[$208>>1]|0;
  $221 = ($220&65535) >>> 8;
  $222 = $221&255;
  $223 = HEAP32[$214>>2]|0;
  $224 = (($223) + 1)|0;
  HEAP32[$214>>2] = $224;
  $225 = HEAP32[$217>>2]|0;
  $226 = (($225) + ($223)|0);
  HEAP8[$226>>0] = $222;
  $227 = HEAP32[$$pre$phiZ2D>>2]|0;
  $228 = (16 - ($227))|0;
  $229 = $206 >>> $228;
  $230 = $229&65535;
  HEAP16[$208>>1] = $230;
  $231 = (($200) + -16)|0;
  $232 = (($227) + ($231))|0;
  $storemerge2 = $232;
  HEAP32[$$pre$phiZ2D>>2] = $storemerge2;
  return;
 } else {
  $233 = (($203) + ($200))|0;
  $storemerge2 = $233;
  HEAP32[$$pre$phiZ2D>>2] = $storemerge2;
  return;
 }
}
function _send_tree($s,$tree,$max_code) {
 $s = $s|0;
 $tree = $tree|0;
 $max_code = $max_code|0;
 var $$ = 0, $$6 = 0, $$7 = 0, $$8 = 0, $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$0 = 0, $count$1 = 0, $count$2 = 0, $max_count$1 = 0, $max_count$1$phi = 0, $min_count$1 = 0, $min_count$1$phi = 0;
 var $n$0 = 0, $nextlen$0 = 0, $or$cond = 0, $prevlen$0 = 0, $prevlen$0$phi = 0, $storemerge = 0, $storemerge3 = 0, $storemerge4 = 0, $storemerge5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($tree)) + 2|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = ($1<<16>>16)==(0);
 $$ = $3 ? 138 : 7;
 $$6 = $3 ? 3 : 4;
 $4 = ((($s)) + 2754|0);
 $5 = ((($s)) + 5820|0);
 $6 = ((($s)) + 2752|0);
 $7 = ((($s)) + 5816|0);
 $8 = ((($s)) + 20|0);
 $9 = ((($s)) + 8|0);
 $10 = ((($s)) + 2758|0);
 $11 = ((($s)) + 2756|0);
 $12 = ((($s)) + 2750|0);
 $13 = ((($s)) + 2748|0);
 $count$0 = 0;$max_count$1 = $$;$min_count$1 = $$6;$n$0 = 0;$nextlen$0 = $2;$prevlen$0 = -1;
 while(1) {
  $14 = ($n$0|0)>($max_code|0);
  if ($14) {
   break;
  }
  $15 = (($n$0) + 1)|0;
  $16 = (((($tree) + ($15<<2)|0)) + 2|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  $19 = (($count$0) + 1)|0;
  $20 = ($19|0)<($max_count$1|0);
  $21 = ($nextlen$0|0)==($18|0);
  $or$cond = $20 & $21;
  if ($or$cond) {
   $prevlen$0$phi = $prevlen$0;$min_count$1$phi = $min_count$1;$max_count$1$phi = $max_count$1;$count$0 = $19;$n$0 = $15;$nextlen$0 = $18;$prevlen$0 = $prevlen$0$phi;$min_count$1 = $min_count$1$phi;$max_count$1 = $max_count$1$phi;
   continue;
  }
  $22 = ($19|0)<($min_count$1|0);
  do {
   if ($22) {
    $23 = (((((($s)) + 2684|0) + ($nextlen$0<<2)|0)) + 2|0);
    $24 = (((($s)) + 2684|0) + ($nextlen$0<<2)|0);
    $$pre2 = HEAP32[$5>>2]|0;
    $29 = $$pre2;$count$1 = $19;
    while(1) {
     $25 = HEAP16[$23>>1]|0;
     $26 = $25&65535;
     $27 = (16 - ($26))|0;
     $28 = ($29|0)>($27|0);
     $30 = HEAP16[$24>>1]|0;
     $31 = $30&65535;
     $32 = $31 << $29;
     $33 = HEAP16[$7>>1]|0;
     $34 = $33&65535;
     $35 = $34 | $32;
     $36 = $35&65535;
     HEAP16[$7>>1] = $36;
     if ($28) {
      $37 = $35&255;
      $38 = HEAP32[$8>>2]|0;
      $39 = (($38) + 1)|0;
      HEAP32[$8>>2] = $39;
      $40 = HEAP32[$9>>2]|0;
      $41 = (($40) + ($38)|0);
      HEAP8[$41>>0] = $37;
      $42 = HEAP16[$7>>1]|0;
      $43 = ($42&65535) >>> 8;
      $44 = $43&255;
      $45 = HEAP32[$8>>2]|0;
      $46 = (($45) + 1)|0;
      HEAP32[$8>>2] = $46;
      $47 = HEAP32[$9>>2]|0;
      $48 = (($47) + ($45)|0);
      HEAP8[$48>>0] = $44;
      $49 = HEAP32[$5>>2]|0;
      $50 = (16 - ($49))|0;
      $51 = $31 >>> $50;
      $52 = $51&65535;
      HEAP16[$7>>1] = $52;
      $53 = (($26) + -16)|0;
      $54 = (($49) + ($53))|0;
      $storemerge5 = $54;
     } else {
      $55 = (($29) + ($26))|0;
      $storemerge5 = $55;
     }
     HEAP32[$5>>2] = $storemerge5;
     $56 = (($count$1) + -1)|0;
     $57 = ($56|0)==(0);
     if ($57) {
      break;
     } else {
      $29 = $storemerge5;$count$1 = $56;
     }
    }
   } else {
    $58 = ($nextlen$0|0)==(0);
    if (!($58)) {
     $59 = ($nextlen$0|0)==($prevlen$0|0);
     do {
      if ($59) {
       $$pre = HEAP32[$5>>2]|0;
       $97 = $$pre;$count$2 = $19;
      } else {
       $60 = (((((($s)) + 2684|0) + ($nextlen$0<<2)|0)) + 2|0);
       $61 = HEAP16[$60>>1]|0;
       $62 = $61&65535;
       $63 = HEAP32[$5>>2]|0;
       $64 = (16 - ($62))|0;
       $65 = ($63|0)>($64|0);
       $66 = (((($s)) + 2684|0) + ($nextlen$0<<2)|0);
       $67 = HEAP16[$66>>1]|0;
       $68 = $67&65535;
       $69 = $68 << $63;
       $70 = HEAP16[$7>>1]|0;
       $71 = $70&65535;
       $72 = $71 | $69;
       $73 = $72&65535;
       HEAP16[$7>>1] = $73;
       if ($65) {
        $74 = $72&255;
        $75 = HEAP32[$8>>2]|0;
        $76 = (($75) + 1)|0;
        HEAP32[$8>>2] = $76;
        $77 = HEAP32[$9>>2]|0;
        $78 = (($77) + ($75)|0);
        HEAP8[$78>>0] = $74;
        $79 = HEAP16[$7>>1]|0;
        $80 = ($79&65535) >>> 8;
        $81 = $80&255;
        $82 = HEAP32[$8>>2]|0;
        $83 = (($82) + 1)|0;
        HEAP32[$8>>2] = $83;
        $84 = HEAP32[$9>>2]|0;
        $85 = (($84) + ($82)|0);
        HEAP8[$85>>0] = $81;
        $86 = HEAP32[$5>>2]|0;
        $87 = (16 - ($86))|0;
        $88 = $68 >>> $87;
        $89 = $88&65535;
        HEAP16[$7>>1] = $89;
        $90 = (($62) + -16)|0;
        $91 = (($86) + ($90))|0;
        HEAP32[$5>>2] = $91;
        $97 = $91;$count$2 = $count$0;
        break;
       } else {
        $92 = (($63) + ($62))|0;
        HEAP32[$5>>2] = $92;
        $97 = $92;$count$2 = $count$0;
        break;
       }
      }
     } while(0);
     $93 = HEAP16[$12>>1]|0;
     $94 = $93&65535;
     $95 = (16 - ($94))|0;
     $96 = ($97|0)>($95|0);
     $98 = HEAP16[$13>>1]|0;
     $99 = $98&65535;
     $100 = $99 << $97;
     $101 = HEAP16[$7>>1]|0;
     $102 = $101&65535;
     $103 = $102 | $100;
     $104 = $103&65535;
     HEAP16[$7>>1] = $104;
     if ($96) {
      $105 = $103&255;
      $106 = HEAP32[$8>>2]|0;
      $107 = (($106) + 1)|0;
      HEAP32[$8>>2] = $107;
      $108 = HEAP32[$9>>2]|0;
      $109 = (($108) + ($106)|0);
      HEAP8[$109>>0] = $105;
      $110 = HEAP16[$7>>1]|0;
      $111 = ($110&65535) >>> 8;
      $112 = $111&255;
      $113 = HEAP32[$8>>2]|0;
      $114 = (($113) + 1)|0;
      HEAP32[$8>>2] = $114;
      $115 = HEAP32[$9>>2]|0;
      $116 = (($115) + ($113)|0);
      HEAP8[$116>>0] = $112;
      $117 = HEAP32[$5>>2]|0;
      $118 = (16 - ($117))|0;
      $119 = $99 >>> $118;
      $120 = $119&65535;
      HEAP16[$7>>1] = $120;
      $121 = (($94) + -16)|0;
      $122 = (($117) + ($121))|0;
      $129 = $119;$storemerge = $122;
     } else {
      $123 = (($97) + ($94))|0;
      $129 = $103;$storemerge = $123;
     }
     HEAP32[$5>>2] = $storemerge;
     $124 = ($storemerge|0)>(14);
     $125 = (($count$2) + 65533)|0;
     $126 = $125 & 65535;
     $127 = $126 << $storemerge;
     $128 = $129 & 65535;
     $130 = $128 | $127;
     $131 = $130&65535;
     HEAP16[$7>>1] = $131;
     if ($124) {
      $132 = $130&255;
      $133 = HEAP32[$8>>2]|0;
      $134 = (($133) + 1)|0;
      HEAP32[$8>>2] = $134;
      $135 = HEAP32[$9>>2]|0;
      $136 = (($135) + ($133)|0);
      HEAP8[$136>>0] = $132;
      $137 = HEAP16[$7>>1]|0;
      $138 = ($137&65535) >>> 8;
      $139 = $138&255;
      $140 = HEAP32[$8>>2]|0;
      $141 = (($140) + 1)|0;
      HEAP32[$8>>2] = $141;
      $142 = HEAP32[$9>>2]|0;
      $143 = (($142) + ($140)|0);
      HEAP8[$143>>0] = $139;
      $144 = HEAP32[$5>>2]|0;
      $145 = (16 - ($144))|0;
      $146 = $126 >>> $145;
      $147 = $146&65535;
      HEAP16[$7>>1] = $147;
      $148 = (($144) + -14)|0;
      HEAP32[$5>>2] = $148;
      break;
     } else {
      $149 = (($storemerge) + 2)|0;
      HEAP32[$5>>2] = $149;
      break;
     }
    }
    $150 = ($19|0)<(11);
    if ($150) {
     $151 = HEAP16[$4>>1]|0;
     $152 = $151&65535;
     $153 = HEAP32[$5>>2]|0;
     $154 = (16 - ($152))|0;
     $155 = ($153|0)>($154|0);
     $156 = HEAP16[$6>>1]|0;
     $157 = $156&65535;
     $158 = $157 << $153;
     $159 = HEAP16[$7>>1]|0;
     $160 = $159&65535;
     $161 = $160 | $158;
     $162 = $161&65535;
     HEAP16[$7>>1] = $162;
     if ($155) {
      $163 = $161&255;
      $164 = HEAP32[$8>>2]|0;
      $165 = (($164) + 1)|0;
      HEAP32[$8>>2] = $165;
      $166 = HEAP32[$9>>2]|0;
      $167 = (($166) + ($164)|0);
      HEAP8[$167>>0] = $163;
      $168 = HEAP16[$7>>1]|0;
      $169 = ($168&65535) >>> 8;
      $170 = $169&255;
      $171 = HEAP32[$8>>2]|0;
      $172 = (($171) + 1)|0;
      HEAP32[$8>>2] = $172;
      $173 = HEAP32[$9>>2]|0;
      $174 = (($173) + ($171)|0);
      HEAP8[$174>>0] = $170;
      $175 = HEAP32[$5>>2]|0;
      $176 = (16 - ($175))|0;
      $177 = $157 >>> $176;
      $178 = $177&65535;
      HEAP16[$7>>1] = $178;
      $179 = (($152) + -16)|0;
      $180 = (($175) + ($179))|0;
      $187 = $177;$storemerge4 = $180;
     } else {
      $181 = (($153) + ($152))|0;
      $187 = $161;$storemerge4 = $181;
     }
     HEAP32[$5>>2] = $storemerge4;
     $182 = ($storemerge4|0)>(13);
     $183 = (($count$0) + 65534)|0;
     $184 = $183 & 65535;
     $185 = $184 << $storemerge4;
     $186 = $187 & 65535;
     $188 = $186 | $185;
     $189 = $188&65535;
     HEAP16[$7>>1] = $189;
     if ($182) {
      $190 = $188&255;
      $191 = HEAP32[$8>>2]|0;
      $192 = (($191) + 1)|0;
      HEAP32[$8>>2] = $192;
      $193 = HEAP32[$9>>2]|0;
      $194 = (($193) + ($191)|0);
      HEAP8[$194>>0] = $190;
      $195 = HEAP16[$7>>1]|0;
      $196 = ($195&65535) >>> 8;
      $197 = $196&255;
      $198 = HEAP32[$8>>2]|0;
      $199 = (($198) + 1)|0;
      HEAP32[$8>>2] = $199;
      $200 = HEAP32[$9>>2]|0;
      $201 = (($200) + ($198)|0);
      HEAP8[$201>>0] = $197;
      $202 = HEAP32[$5>>2]|0;
      $203 = (16 - ($202))|0;
      $204 = $184 >>> $203;
      $205 = $204&65535;
      HEAP16[$7>>1] = $205;
      $206 = (($202) + -13)|0;
      HEAP32[$5>>2] = $206;
      break;
     } else {
      $207 = (($storemerge4) + 3)|0;
      HEAP32[$5>>2] = $207;
      break;
     }
    } else {
     $208 = HEAP16[$10>>1]|0;
     $209 = $208&65535;
     $210 = HEAP32[$5>>2]|0;
     $211 = (16 - ($209))|0;
     $212 = ($210|0)>($211|0);
     $213 = HEAP16[$11>>1]|0;
     $214 = $213&65535;
     $215 = $214 << $210;
     $216 = HEAP16[$7>>1]|0;
     $217 = $216&65535;
     $218 = $217 | $215;
     $219 = $218&65535;
     HEAP16[$7>>1] = $219;
     if ($212) {
      $220 = $218&255;
      $221 = HEAP32[$8>>2]|0;
      $222 = (($221) + 1)|0;
      HEAP32[$8>>2] = $222;
      $223 = HEAP32[$9>>2]|0;
      $224 = (($223) + ($221)|0);
      HEAP8[$224>>0] = $220;
      $225 = HEAP16[$7>>1]|0;
      $226 = ($225&65535) >>> 8;
      $227 = $226&255;
      $228 = HEAP32[$8>>2]|0;
      $229 = (($228) + 1)|0;
      HEAP32[$8>>2] = $229;
      $230 = HEAP32[$9>>2]|0;
      $231 = (($230) + ($228)|0);
      HEAP8[$231>>0] = $227;
      $232 = HEAP32[$5>>2]|0;
      $233 = (16 - ($232))|0;
      $234 = $214 >>> $233;
      $235 = $234&65535;
      HEAP16[$7>>1] = $235;
      $236 = (($209) + -16)|0;
      $237 = (($232) + ($236))|0;
      $244 = $234;$storemerge3 = $237;
     } else {
      $238 = (($210) + ($209))|0;
      $244 = $218;$storemerge3 = $238;
     }
     HEAP32[$5>>2] = $storemerge3;
     $239 = ($storemerge3|0)>(9);
     $240 = (($count$0) + 65526)|0;
     $241 = $240 & 65535;
     $242 = $241 << $storemerge3;
     $243 = $244 & 65535;
     $245 = $243 | $242;
     $246 = $245&65535;
     HEAP16[$7>>1] = $246;
     if ($239) {
      $247 = $245&255;
      $248 = HEAP32[$8>>2]|0;
      $249 = (($248) + 1)|0;
      HEAP32[$8>>2] = $249;
      $250 = HEAP32[$9>>2]|0;
      $251 = (($250) + ($248)|0);
      HEAP8[$251>>0] = $247;
      $252 = HEAP16[$7>>1]|0;
      $253 = ($252&65535) >>> 8;
      $254 = $253&255;
      $255 = HEAP32[$8>>2]|0;
      $256 = (($255) + 1)|0;
      HEAP32[$8>>2] = $256;
      $257 = HEAP32[$9>>2]|0;
      $258 = (($257) + ($255)|0);
      HEAP8[$258>>0] = $254;
      $259 = HEAP32[$5>>2]|0;
      $260 = (16 - ($259))|0;
      $261 = $241 >>> $260;
      $262 = $261&65535;
      HEAP16[$7>>1] = $262;
      $263 = (($259) + -9)|0;
      HEAP32[$5>>2] = $263;
      break;
     } else {
      $264 = (($storemerge3) + 7)|0;
      HEAP32[$5>>2] = $264;
      break;
     }
    }
   }
  } while(0);
  $265 = ($17<<16>>16)==(0);
  if ($265) {
   $prevlen$0$phi = $nextlen$0;$count$0 = 0;$max_count$1 = 138;$min_count$1 = 3;$n$0 = $15;$nextlen$0 = $18;$prevlen$0 = $prevlen$0$phi;
   continue;
  }
  $266 = ($nextlen$0|0)==($18|0);
  $$7 = $266 ? 6 : 7;
  $$8 = $266 ? 3 : 4;
  $prevlen$0$phi = $nextlen$0;$count$0 = 0;$max_count$1 = $$7;$min_count$1 = $$8;$n$0 = $15;$nextlen$0 = $18;$prevlen$0 = $prevlen$0$phi;
 }
 return;
}
function _zcalloc($opaque,$items,$size) {
 $opaque = $opaque|0;
 $items = $items|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($items, $size)|0;
 $1 = (_malloc($0)|0);
 return ($1|0);
}
function _zcfree($opaque,$ptr) {
 $opaque = $opaque|0;
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function _adler32($adler,$buf,$len) {
 $adler = $adler|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$ = 0, $$$1 = 0, $$0 = 0, $$02 = 0, $$07 = 0, $$1 = 0, $$13 = 0, $$18 = 0, $$24 = 0, $$29 = 0, $$3 = 0, $$310 = 0, $$35 = 0, $$4 = 0, $$46 = 0, $$5 = 0, $$6 = 0, $$7 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $n$0 = 0, $scevgep = 0, $scevgep18 = 0, $sum2$0 = 0, $sum2$1 = 0, $sum2$2 = 0, $sum2$3 = 0, $sum2$4 = 0;
 var $sum2$5 = 0, $sum2$6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $adler >>> 16;
 $1 = $adler & 65535;
 $2 = ($len|0)==(1);
 if ($2) {
  $3 = HEAP8[$buf>>0]|0;
  $4 = $3&255;
  $5 = (($1) + ($4))|0;
  $6 = ($5>>>0)>(65520);
  $7 = (($5) + -65521)|0;
  $$ = $6 ? $7 : $5;
  $8 = (($0) + ($$))|0;
  $9 = ($8>>>0)>(65520);
  $10 = (($8) + 15)|0;
  $sum2$0 = $9 ? $10 : $8;
  $11 = $sum2$0 << 16;
  $12 = $$ | $11;
  $$0 = $12;
  return ($$0|0);
 }
 $13 = ($buf|0)==(0|0);
 if ($13) {
  $$0 = 1;
  return ($$0|0);
 }
 $14 = ($len>>>0)<(16);
 if ($14) {
  $$02 = $buf;$$07 = $len;$$1 = $1;$sum2$1 = $0;
  while(1) {
   $15 = ($$07|0)==(0);
   if ($15) {
    break;
   }
   $16 = (($$07) + -1)|0;
   $17 = ((($$02)) + 1|0);
   $18 = HEAP8[$$02>>0]|0;
   $19 = $18&255;
   $20 = (($$1) + ($19))|0;
   $21 = (($sum2$1) + ($20))|0;
   $$02 = $17;$$07 = $16;$$1 = $20;$sum2$1 = $21;
  }
  $22 = ($$1>>>0)>(65520);
  $23 = (($$1) + -65521)|0;
  $$$1 = $22 ? $23 : $$1;
  $24 = (($sum2$1>>>0) % 65521)&-1;
  $25 = $24 << 16;
  $26 = $$$1 | $25;
  $$0 = $26;
  return ($$0|0);
 } else {
  $$13 = $buf;$$18 = $len;$$3 = $1;$sum2$2 = $0;
 }
 while(1) {
  $27 = ($$18>>>0)>(5551);
  if (!($27)) {
   break;
  }
  $28 = (($$18) + -5552)|0;
  $$24 = $$13;$$4 = $$3;$n$0 = 347;$sum2$3 = $sum2$2;
  while(1) {
   $29 = HEAP8[$$24>>0]|0;
   $30 = $29&255;
   $31 = (($$4) + ($30))|0;
   $32 = (($sum2$3) + ($31))|0;
   $33 = ((($$24)) + 1|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = (($31) + ($35))|0;
   $37 = (($32) + ($36))|0;
   $38 = ((($$24)) + 2|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = (($36) + ($40))|0;
   $42 = (($37) + ($41))|0;
   $43 = ((($$24)) + 3|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = (($41) + ($45))|0;
   $47 = (($42) + ($46))|0;
   $48 = ((($$24)) + 4|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $51 = (($46) + ($50))|0;
   $52 = (($47) + ($51))|0;
   $53 = ((($$24)) + 5|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = (($51) + ($55))|0;
   $57 = (($52) + ($56))|0;
   $58 = ((($$24)) + 6|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = $59&255;
   $61 = (($56) + ($60))|0;
   $62 = (($57) + ($61))|0;
   $63 = ((($$24)) + 7|0);
   $64 = HEAP8[$63>>0]|0;
   $65 = $64&255;
   $66 = (($61) + ($65))|0;
   $67 = (($62) + ($66))|0;
   $68 = ((($$24)) + 8|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = $69&255;
   $71 = (($66) + ($70))|0;
   $72 = (($67) + ($71))|0;
   $73 = ((($$24)) + 9|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74&255;
   $76 = (($71) + ($75))|0;
   $77 = (($72) + ($76))|0;
   $78 = ((($$24)) + 10|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79&255;
   $81 = (($76) + ($80))|0;
   $82 = (($77) + ($81))|0;
   $83 = ((($$24)) + 11|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = (($81) + ($85))|0;
   $87 = (($82) + ($86))|0;
   $88 = ((($$24)) + 12|0);
   $89 = HEAP8[$88>>0]|0;
   $90 = $89&255;
   $91 = (($86) + ($90))|0;
   $92 = (($87) + ($91))|0;
   $93 = ((($$24)) + 13|0);
   $94 = HEAP8[$93>>0]|0;
   $95 = $94&255;
   $96 = (($91) + ($95))|0;
   $97 = (($92) + ($96))|0;
   $98 = ((($$24)) + 14|0);
   $99 = HEAP8[$98>>0]|0;
   $100 = $99&255;
   $101 = (($96) + ($100))|0;
   $102 = (($97) + ($101))|0;
   $103 = ((($$24)) + 15|0);
   $104 = HEAP8[$103>>0]|0;
   $105 = $104&255;
   $106 = (($101) + ($105))|0;
   $107 = (($102) + ($106))|0;
   $108 = ((($$24)) + 16|0);
   $109 = (($n$0) + -1)|0;
   $110 = ($109|0)==(0);
   if ($110) {
    break;
   } else {
    $$24 = $108;$$4 = $106;$n$0 = $109;$sum2$3 = $107;
   }
  }
  $scevgep18 = ((($$13)) + 5552|0);
  $111 = (($106>>>0) % 65521)&-1;
  $112 = (($107>>>0) % 65521)&-1;
  $$13 = $scevgep18;$$18 = $28;$$3 = $111;$sum2$2 = $112;
 }
 $113 = ($$18|0)==(0);
 if ($113) {
  $$7 = $$3;$sum2$6 = $sum2$2;
 } else {
  $114 = ($$18>>>0)<(15);
  $115 = $114 ? $$18 : 15;
  $116 = $115 ^ -1;
  $117 = (($$18) + ($116))|0;
  $118 = (($117) + 16)|0;
  $119 = $118 & -16;
  $scevgep = (($$13) + ($119)|0);
  $$29 = $$18;$$35 = $$13;$$5 = $$3;$sum2$4 = $sum2$2;
  while(1) {
   $120 = ($$29>>>0)>(15);
   if (!($120)) {
    break;
   }
   $122 = (($$29) + -16)|0;
   $123 = HEAP8[$$35>>0]|0;
   $124 = $123&255;
   $125 = (($$5) + ($124))|0;
   $126 = (($sum2$4) + ($125))|0;
   $127 = ((($$35)) + 1|0);
   $128 = HEAP8[$127>>0]|0;
   $129 = $128&255;
   $130 = (($125) + ($129))|0;
   $131 = (($126) + ($130))|0;
   $132 = ((($$35)) + 2|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = (($130) + ($134))|0;
   $136 = (($131) + ($135))|0;
   $137 = ((($$35)) + 3|0);
   $138 = HEAP8[$137>>0]|0;
   $139 = $138&255;
   $140 = (($135) + ($139))|0;
   $141 = (($136) + ($140))|0;
   $142 = ((($$35)) + 4|0);
   $143 = HEAP8[$142>>0]|0;
   $144 = $143&255;
   $145 = (($140) + ($144))|0;
   $146 = (($141) + ($145))|0;
   $147 = ((($$35)) + 5|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = (($145) + ($149))|0;
   $151 = (($146) + ($150))|0;
   $152 = ((($$35)) + 6|0);
   $153 = HEAP8[$152>>0]|0;
   $154 = $153&255;
   $155 = (($150) + ($154))|0;
   $156 = (($151) + ($155))|0;
   $157 = ((($$35)) + 7|0);
   $158 = HEAP8[$157>>0]|0;
   $159 = $158&255;
   $160 = (($155) + ($159))|0;
   $161 = (($156) + ($160))|0;
   $162 = ((($$35)) + 8|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = (($160) + ($164))|0;
   $166 = (($161) + ($165))|0;
   $167 = ((($$35)) + 9|0);
   $168 = HEAP8[$167>>0]|0;
   $169 = $168&255;
   $170 = (($165) + ($169))|0;
   $171 = (($166) + ($170))|0;
   $172 = ((($$35)) + 10|0);
   $173 = HEAP8[$172>>0]|0;
   $174 = $173&255;
   $175 = (($170) + ($174))|0;
   $176 = (($171) + ($175))|0;
   $177 = ((($$35)) + 11|0);
   $178 = HEAP8[$177>>0]|0;
   $179 = $178&255;
   $180 = (($175) + ($179))|0;
   $181 = (($176) + ($180))|0;
   $182 = ((($$35)) + 12|0);
   $183 = HEAP8[$182>>0]|0;
   $184 = $183&255;
   $185 = (($180) + ($184))|0;
   $186 = (($181) + ($185))|0;
   $187 = ((($$35)) + 13|0);
   $188 = HEAP8[$187>>0]|0;
   $189 = $188&255;
   $190 = (($185) + ($189))|0;
   $191 = (($186) + ($190))|0;
   $192 = ((($$35)) + 14|0);
   $193 = HEAP8[$192>>0]|0;
   $194 = $193&255;
   $195 = (($190) + ($194))|0;
   $196 = (($191) + ($195))|0;
   $197 = ((($$35)) + 15|0);
   $198 = HEAP8[$197>>0]|0;
   $199 = $198&255;
   $200 = (($195) + ($199))|0;
   $201 = (($196) + ($200))|0;
   $202 = ((($$35)) + 16|0);
   $$29 = $122;$$35 = $202;$$5 = $200;$sum2$4 = $201;
  }
  $121 = (($$18) - ($119))|0;
  $$310 = $121;$$46 = $scevgep;$$6 = $$5;$sum2$5 = $sum2$4;
  while(1) {
   $203 = ($$310|0)==(0);
   if ($203) {
    break;
   }
   $204 = (($$310) + -1)|0;
   $205 = ((($$46)) + 1|0);
   $206 = HEAP8[$$46>>0]|0;
   $207 = $206&255;
   $208 = (($$6) + ($207))|0;
   $209 = (($sum2$5) + ($208))|0;
   $$310 = $204;$$46 = $205;$$6 = $208;$sum2$5 = $209;
  }
  $210 = (($$6>>>0) % 65521)&-1;
  $211 = (($sum2$5>>>0) % 65521)&-1;
  $$7 = $210;$sum2$6 = $211;
 }
 $212 = $sum2$6 << 16;
 $213 = $$7 | $212;
 $$0 = $213;
 return ($$0|0);
}
function ___stdio_close($f) {
 $f = $f|0;
 var $$0$i = 0, $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = ($2>>>0)>(4294963200);
 if ($3) {
  $4 = (0 - ($2))|0;
  $5 = HEAP32[6773]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   $$0$i$i = 27136;
  } else {
   $7 = (_pthread_self()|0);
   $8 = ((($7)) + 64|0);
   $9 = HEAP32[$8>>2]|0;
   $$0$i$i = $9;
  }
  HEAP32[$$0$i$i>>2] = $4;
  $$0$i = -1;
 } else {
  $$0$i = $2;
 }
 STACKTOP = sp;return ($$0$i|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = HEAP32[6773]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   $$0$i = 27136;
  } else {
   $4 = (_pthread_self()|0);
   $5 = ((($4)) + 64|0);
   $6 = HEAP32[$5>>2]|0;
   $$0$i = $6;
  }
  HEAP32[$$0$i>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i1 = 0, $$cast = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$05 = 0, $iov = 0;
 var $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[6773]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $22 = ((($f)) + 60|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $23;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $24 = (___syscall145(145,($vararg_buffer3|0))|0);
  $25 = ($24>>>0)>(4294963200);
  if ($25) {
   $26 = (0 - ($24))|0;
   $27 = HEAP32[6773]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    $$0$i$i1 = 27136;
   } else {
    $29 = (_pthread_self()|0);
    $30 = ((($29)) + 64|0);
    $31 = HEAP32[$30>>2]|0;
    $$0$i$i1 = $31;
   }
   HEAP32[$$0$i$i1>>2] = $26;
   $cnt$05 = -1;
   label = 12;
  } else {
   $cnt$0 = $24;
   label = 11;
  }
 } else {
  _pthread_cleanup_push((106|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = ($14>>>0)>(4294963200);
  if ($15) {
   $16 = (0 - ($14))|0;
   $17 = HEAP32[6773]|0;
   $18 = ($17|0)==(0|0);
   if ($18) {
    $$0$i$i = 27136;
   } else {
    $19 = (_pthread_self()|0);
    $20 = ((($19)) + 64|0);
    $21 = HEAP32[$20>>2]|0;
    $$0$i$i = $21;
   }
   HEAP32[$$0$i$i>>2] = $16;
   $$0$i = -1;
  } else {
   $$0$i = $14;
  }
  _pthread_cleanup_pop(0);
  $cnt$0 = $$0$i;
  label = 11;
 }
 if ((label|0) == 11) {
  $32 = ($cnt$0|0)<(1);
  if ($32) {
   $cnt$05 = $cnt$0;
   label = 12;
  } else {
   $39 = HEAP32[$0>>2]|0;
   $40 = ($cnt$0>>>0)>($39>>>0);
   if ($40) {
    $41 = (($cnt$0) - ($39))|0;
    $42 = HEAP32[$7>>2]|0;
    $43 = ((($f)) + 4|0);
    HEAP32[$43>>2] = $42;
    $$cast = $42;
    $44 = (($$cast) + ($41)|0);
    $45 = ((($f)) + 8|0);
    HEAP32[$45>>2] = $44;
    $46 = HEAP32[$1>>2]|0;
    $47 = ($46|0)==(0);
    if ($47) {
     $$0 = $len;
    } else {
     $48 = ((($$cast)) + 1|0);
     HEAP32[$43>>2] = $48;
     $49 = HEAP8[$$cast>>0]|0;
     $50 = (($len) + -1)|0;
     $51 = (($buf) + ($50)|0);
     HEAP8[$51>>0] = $49;
     $$0 = $len;
    }
   } else {
    $$0 = $cnt$0;
   }
  }
 }
 if ((label|0) == 12) {
  $33 = $cnt$05 & 48;
  $34 = $33 ^ 16;
  $35 = HEAP32[$f>>2]|0;
  $36 = $35 | $34;
  HEAP32[$f>>2] = $36;
  $37 = ((($f)) + 8|0);
  HEAP32[$37>>2] = 0;
  $38 = ((($f)) + 4|0);
  HEAP32[$38>>2] = 0;
  $$0 = $cnt$05;
 }
 STACKTOP = sp;return ($$0|0);
}
function _cleanup_607($p) {
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$0$i$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = ($2>>>0)>(4294963200);
 if ($3) {
  $4 = (0 - ($2))|0;
  $5 = HEAP32[6773]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   $$0$i$i = 27136;
  } else {
   $7 = (_pthread_self()|0);
   $8 = ((($7)) + 64|0);
   $9 = HEAP32[$8>>2]|0;
   $$0$i$i = $9;
  }
  HEAP32[$$0$i$i>>2] = $4;
  label = 7;
 } else {
  $10 = ($2|0)<(0);
  if ($10) {
   label = 7;
  } else {
   $$pre = HEAP32[$ret>>2]|0;
   $11 = $$pre;
  }
 }
 if ((label|0) == 7) {
  HEAP32[$ret>>2] = -1;
  $11 = -1;
 }
 STACKTOP = sp;return ($11|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i1 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) - ($1))|0;
 HEAP32[$2>>2] = $5;
 $6 = ((($iovs)) + 8|0);
 HEAP32[$6>>2] = $buf;
 $7 = ((($iovs)) + 12|0);
 HEAP32[$7>>2] = $len;
 $8 = (($5) + ($len))|0;
 $9 = ((($f)) + 60|0);
 $10 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $8;
 while(1) {
  $11 = HEAP32[6773]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $22 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $22;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $23 = (___syscall146(146,($vararg_buffer3|0))|0);
   $24 = ($23>>>0)>(4294963200);
   if ($24) {
    $25 = (0 - ($23))|0;
    $26 = HEAP32[6773]|0;
    $27 = ($26|0)==(0|0);
    if ($27) {
     $$0$i$i1 = 27136;
    } else {
     $28 = (_pthread_self()|0);
     $29 = ((($28)) + 64|0);
     $30 = HEAP32[$29>>2]|0;
     $$0$i$i1 = $30;
    }
    HEAP32[$$0$i$i1>>2] = $25;
    $cnt$0 = -1;
   } else {
    $cnt$0 = $23;
   }
  } else {
   _pthread_cleanup_push((107|0),($f|0));
   $13 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer>>2] = $13;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $14 = (___syscall146(146,($vararg_buffer|0))|0);
   $15 = ($14>>>0)>(4294963200);
   if ($15) {
    $16 = (0 - ($14))|0;
    $17 = HEAP32[6773]|0;
    $18 = ($17|0)==(0|0);
    if ($18) {
     $$0$i$i = 27136;
    } else {
     $19 = (_pthread_self()|0);
     $20 = ((($19)) + 64|0);
     $21 = HEAP32[$20>>2]|0;
     $$0$i$i = $21;
    }
    HEAP32[$$0$i$i>>2] = $16;
    $$0$i = -1;
   } else {
    $$0$i = $14;
   }
   _pthread_cleanup_pop(0);
   $cnt$0 = $$0$i;
  }
  $31 = ($rem$0|0)==($cnt$0|0);
  if ($31) {
   label = 13;
   break;
  }
  $38 = ($cnt$0|0)<(0);
  if ($38) {
   label = 15;
   break;
  }
  $46 = (($rem$0) - ($cnt$0))|0;
  $47 = ((($iov$0)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($cnt$0>>>0)>($48>>>0);
  if ($49) {
   $50 = HEAP32[$10>>2]|0;
   HEAP32[$0>>2] = $50;
   HEAP32[$3>>2] = $50;
   $51 = (($cnt$0) - ($48))|0;
   $52 = ((($iov$0)) + 8|0);
   $53 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $61 = $$pre;$cnt$1 = $51;$iov$1 = $52;$iovcnt$1 = $53;
  } else {
   $54 = ($iovcnt$0|0)==(2);
   if ($54) {
    $55 = HEAP32[$0>>2]|0;
    $56 = (($55) + ($cnt$0)|0);
    HEAP32[$0>>2] = $56;
    $61 = $48;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $61 = $48;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $57 = HEAP32[$iov$1>>2]|0;
  $58 = (($57) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $58;
  $59 = ((($iov$1)) + 4|0);
  $60 = (($61) - ($cnt$1))|0;
  HEAP32[$59>>2] = $60;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $46;
 }
 if ((label|0) == 13) {
  $32 = HEAP32[$10>>2]|0;
  $33 = ((($f)) + 48|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($32) + ($34)|0);
  $36 = ((($f)) + 16|0);
  HEAP32[$36>>2] = $35;
  $37 = $32;
  HEAP32[$0>>2] = $37;
  HEAP32[$3>>2] = $37;
  $$0 = $len;
 }
 else if ((label|0) == 15) {
  $39 = ((($f)) + 16|0);
  HEAP32[$39>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $40 = HEAP32[$f>>2]|0;
  $41 = $40 | 32;
  HEAP32[$f>>2] = $41;
  $42 = ($iovcnt$0|0)==(2);
  if ($42) {
   $$0 = 0;
  } else {
   $43 = ((($iov$0)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($len) - ($44))|0;
   $$0 = $45;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _cleanup_604($p) {
 $p = $p|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 37;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    break;
   }
  }
  $16 = $9&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0;
  } else {
   $$pn15 = $w$0;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _open($filename,$flags,$varargs) {
 $filename = $filename|0;
 $flags = $flags|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ap = sp + 16|0;
 HEAP32[$ap>>2] = $varargs;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 4|0);
 $expanded2 = $1;
 $expanded = (($expanded2) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 4|0);
 $expanded6 = $3;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $4 = $2 & $expanded4;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $arglist_next = ((($5)) + 4|0);
 HEAP32[$ap>>2] = $arglist_next;
 $7 = $flags | 32768;
 HEAP32[$vararg_buffer>>2] = $filename;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $6;
 $8 = (___syscall5(5,($vararg_buffer|0))|0);
 $9 = (___syscall_ret($8)|0);
 STACKTOP = sp;return ($9|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i1 = 0, $$0$i3 = 0, $$0$i5 = 0, $$0$i7 = 0, $$1 = 0, $$115 = 0, $$116 = 0, $$base14 = 0, $$lcssa = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$117 = 0, $c$2$be = 0;
 var $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$742 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond31 = 0, $or$cond5 = 0;
 var $or$cond7 = 0, $x$070 = 0, $x$136 = 0, $x$254 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 L1: do {
  if ($2) {
   $5 = HEAP32[6773]|0;
   $6 = ($5|0)==(0|0);
   if ($6) {
    $$0$i = 27136;
   } else {
    $7 = (_pthread_self()|0);
    $8 = ((($7)) + 64|0);
    $9 = HEAP32[$8>>2]|0;
    $$0$i = $9;
   }
   HEAP32[$$0$i>>2] = 22;
   $317 = 0;$318 = 0;
  } else {
   $3 = ((($f)) + 4|0);
   $4 = ((($f)) + 100|0);
   L7: while(1) {
    $10 = HEAP32[$3>>2]|0;
    $11 = HEAP32[$4>>2]|0;
    $12 = ($10>>>0)<($11>>>0);
    if ($12) {
     $13 = ((($10)) + 1|0);
     HEAP32[$3>>2] = $13;
     $14 = HEAP8[$10>>0]|0;
     $15 = $14&255;
     $17 = $15;
    } else {
     $16 = (___shgetc($f)|0);
     $17 = $16;
    }
    switch ($17|0) {
    case 9: case 10: case 11: case 12: case 13: case 32:  {
     break;
    }
    default: {
     break L7;
    }
    }
   }
   $18 = ($17|0)==(45);
   L14: do {
    switch ($17|0) {
    case 43: case 45:  {
     $19 = $18 << 31 >> 31;
     $20 = HEAP32[$3>>2]|0;
     $21 = HEAP32[$4>>2]|0;
     $22 = ($20>>>0)<($21>>>0);
     if ($22) {
      $23 = ((($20)) + 1|0);
      HEAP32[$3>>2] = $23;
      $24 = HEAP8[$20>>0]|0;
      $25 = $24&255;
      $c$0 = $25;$neg$0 = $19;
      break L14;
     } else {
      $26 = (___shgetc($f)|0);
      $c$0 = $26;$neg$0 = $19;
      break L14;
     }
     break;
    }
    default: {
     $c$0 = $17;$neg$0 = 0;
    }
    }
   } while(0);
   $27 = ($base|0)==(0);
   $28 = $base | 16;
   $29 = ($28|0)==(16);
   $30 = ($c$0|0)==(48);
   $or$cond5 = $29 & $30;
   do {
    if ($or$cond5) {
     $31 = HEAP32[$3>>2]|0;
     $32 = HEAP32[$4>>2]|0;
     $33 = ($31>>>0)<($32>>>0);
     if ($33) {
      $34 = ((($31)) + 1|0);
      HEAP32[$3>>2] = $34;
      $35 = HEAP8[$31>>0]|0;
      $36 = $35&255;
      $39 = $36;
     } else {
      $37 = (___shgetc($f)|0);
      $39 = $37;
     }
     $38 = $39 | 32;
     $40 = ($38|0)==(120);
     if (!($40)) {
      if ($27) {
       $$116 = 8;$c$117 = $39;
       label = 51;
       break;
      } else {
       $$1 = $base;$c$1 = $39;
       label = 37;
       break;
      }
     }
     $41 = HEAP32[$3>>2]|0;
     $42 = HEAP32[$4>>2]|0;
     $43 = ($41>>>0)<($42>>>0);
     if ($43) {
      $44 = ((($41)) + 1|0);
      HEAP32[$3>>2] = $44;
      $45 = HEAP8[$41>>0]|0;
      $46 = $45&255;
      $49 = $46;
     } else {
      $47 = (___shgetc($f)|0);
      $49 = $47;
     }
     $48 = ((24081) + ($49)|0);
     $50 = HEAP8[$48>>0]|0;
     $51 = ($50&255)>(15);
     if ($51) {
      $52 = HEAP32[$4>>2]|0;
      $53 = ($52|0)==(0|0);
      if (!($53)) {
       $54 = HEAP32[$3>>2]|0;
       $55 = ((($54)) + -1|0);
       HEAP32[$3>>2] = $55;
      }
      $56 = ($pok|0)==(0);
      if ($56) {
       $59 = ((($f)) + 104|0);
       HEAP32[$59>>2] = 0;
       $60 = ((($f)) + 8|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = HEAP32[$3>>2]|0;
       $63 = (($61) - ($62))|0;
       $64 = ((($f)) + 108|0);
       HEAP32[$64>>2] = $63;
       HEAP32[$4>>2] = $61;
       $317 = 0;$318 = 0;
       break L1;
      }
      if ($53) {
       $317 = 0;$318 = 0;
       break L1;
      }
      $57 = HEAP32[$3>>2]|0;
      $58 = ((($57)) + -1|0);
      HEAP32[$3>>2] = $58;
      $317 = 0;$318 = 0;
      break L1;
     } else {
      $$116 = 16;$c$117 = $49;
      label = 51;
     }
    } else {
     $$base14 = $27 ? 10 : $base;
     $65 = ((24081) + ($c$0)|0);
     $66 = HEAP8[$65>>0]|0;
     $67 = $66&255;
     $68 = ($67>>>0)<($$base14>>>0);
     if ($68) {
      $$1 = $$base14;$c$1 = $c$0;
      label = 37;
     } else {
      $69 = HEAP32[$4>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       $$pre = HEAP32[$3>>2]|0;
       $78 = $$pre;
      } else {
       $71 = HEAP32[$3>>2]|0;
       $72 = ((($71)) + -1|0);
       HEAP32[$3>>2] = $72;
       $73 = $72;
       $78 = $73;
      }
      $74 = ((($f)) + 104|0);
      HEAP32[$74>>2] = 0;
      $75 = ((($f)) + 8|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = (($76) - ($78))|0;
      $79 = ((($f)) + 108|0);
      HEAP32[$79>>2] = $77;
      HEAP32[$4>>2] = $76;
      $80 = HEAP32[6773]|0;
      $81 = ($80|0)==(0|0);
      if ($81) {
       $$0$i7 = 27136;
      } else {
       $82 = (_pthread_self()|0);
       $83 = ((($82)) + 64|0);
       $84 = HEAP32[$83>>2]|0;
       $$0$i7 = $84;
      }
      HEAP32[$$0$i7>>2] = 22;
      $317 = 0;$318 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 37) {
    $85 = ($$1|0)==(10);
    if ($85) {
     $86 = (($c$1) + -48)|0;
     $87 = ($86>>>0)<(10);
     if ($87) {
      $90 = $86;$x$070 = 0;
      while(1) {
       $88 = ($x$070*10)|0;
       $89 = (($88) + ($90))|0;
       $91 = HEAP32[$3>>2]|0;
       $92 = HEAP32[$4>>2]|0;
       $93 = ($91>>>0)<($92>>>0);
       if ($93) {
        $94 = ((($91)) + 1|0);
        HEAP32[$3>>2] = $94;
        $95 = HEAP8[$91>>0]|0;
        $96 = $95&255;
        $c$2$be = $96;
       } else {
        $97 = (___shgetc($f)|0);
        $c$2$be = $97;
       }
       $98 = (($c$2$be) + -48)|0;
       $99 = ($98>>>0)<(10);
       $100 = ($89>>>0)<(429496729);
       $101 = $99 & $100;
       if ($101) {
        $90 = $98;$x$070 = $89;
       } else {
        break;
       }
      }
      $319 = $89;$320 = 0;$c$2$lcssa = $c$2$be;
     } else {
      $319 = 0;$320 = 0;$c$2$lcssa = $c$1;
     }
     $102 = (($c$2$lcssa) + -48)|0;
     $103 = ($102>>>0)<(10);
     if ($103) {
      $104 = $319;$105 = $320;$109 = $102;$c$359 = $c$2$lcssa;
      while(1) {
       $106 = (___muldi3(($104|0),($105|0),10,0)|0);
       $107 = tempRet0;
       $108 = ($109|0)<(0);
       $110 = $108 << 31 >> 31;
       $111 = $109 ^ -1;
       $112 = $110 ^ -1;
       $113 = ($107>>>0)>($112>>>0);
       $114 = ($106>>>0)>($111>>>0);
       $115 = ($107|0)==($112|0);
       $116 = $115 & $114;
       $117 = $113 | $116;
       if ($117) {
        $$lcssa = $109;$321 = $104;$322 = $105;$c$3$lcssa = $c$359;
        break;
       }
       $118 = (_i64Add(($106|0),($107|0),($109|0),($110|0))|0);
       $119 = tempRet0;
       $120 = HEAP32[$3>>2]|0;
       $121 = HEAP32[$4>>2]|0;
       $122 = ($120>>>0)<($121>>>0);
       if ($122) {
        $123 = ((($120)) + 1|0);
        HEAP32[$3>>2] = $123;
        $124 = HEAP8[$120>>0]|0;
        $125 = $124&255;
        $c$3$be = $125;
       } else {
        $126 = (___shgetc($f)|0);
        $c$3$be = $126;
       }
       $127 = (($c$3$be) + -48)|0;
       $128 = ($127>>>0)<(10);
       $129 = ($119>>>0)<(429496729);
       $130 = ($118>>>0)<(2576980378);
       $131 = ($119|0)==(429496729);
       $132 = $131 & $130;
       $133 = $129 | $132;
       $or$cond7 = $128 & $133;
       if ($or$cond7) {
        $104 = $118;$105 = $119;$109 = $127;$c$359 = $c$3$be;
       } else {
        $$lcssa = $127;$321 = $118;$322 = $119;$c$3$lcssa = $c$3$be;
        break;
       }
      }
      $134 = ($$lcssa>>>0)>(9);
      if ($134) {
       $283 = $322;$285 = $321;$neg$1 = $neg$0;
      } else {
       $$115 = 10;$323 = $321;$324 = $322;$c$8 = $c$3$lcssa;
       label = 77;
      }
     } else {
      $283 = $320;$285 = $319;$neg$1 = $neg$0;
     }
    } else {
     $$116 = $$1;$c$117 = $c$1;
     label = 51;
    }
   }
   L70: do {
    if ((label|0) == 51) {
     $135 = (($$116) + -1)|0;
     $136 = $135 & $$116;
     $137 = ($136|0)==(0);
     if ($137) {
      $142 = ($$116*23)|0;
      $143 = $142 >>> 5;
      $144 = $143 & 7;
      $145 = (24337 + ($144)|0);
      $146 = HEAP8[$145>>0]|0;
      $147 = $146 << 24 >> 24;
      $148 = ((24081) + ($c$117)|0);
      $149 = HEAP8[$148>>0]|0;
      $150 = $149&255;
      $151 = ($150>>>0)<($$116>>>0);
      if ($151) {
       $154 = $150;$x$136 = 0;
       while(1) {
        $152 = $x$136 << $147;
        $153 = $154 | $152;
        $155 = HEAP32[$3>>2]|0;
        $156 = HEAP32[$4>>2]|0;
        $157 = ($155>>>0)<($156>>>0);
        if ($157) {
         $158 = ((($155)) + 1|0);
         HEAP32[$3>>2] = $158;
         $159 = HEAP8[$155>>0]|0;
         $160 = $159&255;
         $c$4$be = $160;
        } else {
         $161 = (___shgetc($f)|0);
         $c$4$be = $161;
        }
        $162 = ((24081) + ($c$4$be)|0);
        $163 = HEAP8[$162>>0]|0;
        $164 = $163&255;
        $165 = ($164>>>0)<($$116>>>0);
        $166 = ($153>>>0)<(134217728);
        $167 = $166 & $165;
        if ($167) {
         $154 = $164;$x$136 = $153;
        } else {
         break;
        }
       }
       $171 = $163;$174 = 0;$176 = $153;$c$4$lcssa = $c$4$be;
      } else {
       $171 = $149;$174 = 0;$176 = 0;$c$4$lcssa = $c$117;
      }
      $168 = (_bitshift64Lshr(-1,-1,($147|0))|0);
      $169 = tempRet0;
      $170 = $171&255;
      $172 = ($170>>>0)>=($$116>>>0);
      $173 = ($174>>>0)>($169>>>0);
      $175 = ($176>>>0)>($168>>>0);
      $177 = ($174|0)==($169|0);
      $178 = $177 & $175;
      $179 = $173 | $178;
      $or$cond31 = $172 | $179;
      if ($or$cond31) {
       $$115 = $$116;$323 = $176;$324 = $174;$c$8 = $c$4$lcssa;
       label = 77;
       break;
      } else {
       $180 = $176;$181 = $174;$185 = $171;
      }
      while(1) {
       $182 = (_bitshift64Shl(($180|0),($181|0),($147|0))|0);
       $183 = tempRet0;
       $184 = $185&255;
       $186 = $184 | $182;
       $187 = HEAP32[$3>>2]|0;
       $188 = HEAP32[$4>>2]|0;
       $189 = ($187>>>0)<($188>>>0);
       if ($189) {
        $190 = ((($187)) + 1|0);
        HEAP32[$3>>2] = $190;
        $191 = HEAP8[$187>>0]|0;
        $192 = $191&255;
        $c$5$be = $192;
       } else {
        $193 = (___shgetc($f)|0);
        $c$5$be = $193;
       }
       $194 = ((24081) + ($c$5$be)|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = $195&255;
       $197 = ($196>>>0)>=($$116>>>0);
       $198 = ($183>>>0)>($169>>>0);
       $199 = ($186>>>0)>($168>>>0);
       $200 = ($183|0)==($169|0);
       $201 = $200 & $199;
       $202 = $198 | $201;
       $or$cond = $197 | $202;
       if ($or$cond) {
        $$115 = $$116;$323 = $186;$324 = $183;$c$8 = $c$5$be;
        label = 77;
        break L70;
       } else {
        $180 = $186;$181 = $183;$185 = $195;
       }
      }
     }
     $138 = ((24081) + ($c$117)|0);
     $139 = HEAP8[$138>>0]|0;
     $140 = $139&255;
     $141 = ($140>>>0)<($$116>>>0);
     if ($141) {
      $205 = $140;$x$254 = 0;
      while(1) {
       $203 = Math_imul($x$254, $$116)|0;
       $204 = (($205) + ($203))|0;
       $206 = HEAP32[$3>>2]|0;
       $207 = HEAP32[$4>>2]|0;
       $208 = ($206>>>0)<($207>>>0);
       if ($208) {
        $209 = ((($206)) + 1|0);
        HEAP32[$3>>2] = $209;
        $210 = HEAP8[$206>>0]|0;
        $211 = $210&255;
        $c$6$be = $211;
       } else {
        $212 = (___shgetc($f)|0);
        $c$6$be = $212;
       }
       $213 = ((24081) + ($c$6$be)|0);
       $214 = HEAP8[$213>>0]|0;
       $215 = $214&255;
       $216 = ($215>>>0)<($$116>>>0);
       $217 = ($204>>>0)<(119304647);
       $218 = $217 & $216;
       if ($218) {
        $205 = $215;$x$254 = $204;
       } else {
        break;
       }
      }
      $220 = $214;$325 = $204;$326 = 0;$c$6$lcssa = $c$6$be;
     } else {
      $220 = $139;$325 = 0;$326 = 0;$c$6$lcssa = $c$117;
     }
     $219 = $220&255;
     $221 = ($219>>>0)<($$116>>>0);
     if ($221) {
      $222 = (___udivdi3(-1,-1,($$116|0),0)|0);
      $223 = tempRet0;
      $225 = $326;$227 = $325;$234 = $220;$c$742 = $c$6$lcssa;
      while(1) {
       $224 = ($225>>>0)>($223>>>0);
       $226 = ($227>>>0)>($222>>>0);
       $228 = ($225|0)==($223|0);
       $229 = $228 & $226;
       $230 = $224 | $229;
       if ($230) {
        $$115 = $$116;$323 = $227;$324 = $225;$c$8 = $c$742;
        label = 77;
        break L70;
       }
       $231 = (___muldi3(($227|0),($225|0),($$116|0),0)|0);
       $232 = tempRet0;
       $233 = $234&255;
       $235 = $233 ^ -1;
       $236 = ($232>>>0)>(4294967295);
       $237 = ($231>>>0)>($235>>>0);
       $238 = ($232|0)==(-1);
       $239 = $238 & $237;
       $240 = $236 | $239;
       if ($240) {
        $$115 = $$116;$323 = $227;$324 = $225;$c$8 = $c$742;
        label = 77;
        break L70;
       }
       $241 = (_i64Add(($233|0),0,($231|0),($232|0))|0);
       $242 = tempRet0;
       $243 = HEAP32[$3>>2]|0;
       $244 = HEAP32[$4>>2]|0;
       $245 = ($243>>>0)<($244>>>0);
       if ($245) {
        $246 = ((($243)) + 1|0);
        HEAP32[$3>>2] = $246;
        $247 = HEAP8[$243>>0]|0;
        $248 = $247&255;
        $c$7$be = $248;
       } else {
        $249 = (___shgetc($f)|0);
        $c$7$be = $249;
       }
       $250 = ((24081) + ($c$7$be)|0);
       $251 = HEAP8[$250>>0]|0;
       $252 = $251&255;
       $253 = ($252>>>0)<($$116>>>0);
       if ($253) {
        $225 = $242;$227 = $241;$234 = $251;$c$742 = $c$7$be;
       } else {
        $$115 = $$116;$323 = $241;$324 = $242;$c$8 = $c$7$be;
        label = 77;
        break;
       }
      }
     } else {
      $$115 = $$116;$323 = $325;$324 = $326;$c$8 = $c$6$lcssa;
      label = 77;
     }
    }
   } while(0);
   if ((label|0) == 77) {
    $254 = ((24081) + ($c$8)|0);
    $255 = HEAP8[$254>>0]|0;
    $256 = $255&255;
    $257 = ($256>>>0)<($$115>>>0);
    if ($257) {
     while(1) {
      $258 = HEAP32[$3>>2]|0;
      $259 = HEAP32[$4>>2]|0;
      $260 = ($258>>>0)<($259>>>0);
      if ($260) {
       $261 = ((($258)) + 1|0);
       HEAP32[$3>>2] = $261;
       $262 = HEAP8[$258>>0]|0;
       $263 = $262&255;
       $c$9$be = $263;
      } else {
       $264 = (___shgetc($f)|0);
       $c$9$be = $264;
      }
      $265 = ((24081) + ($c$9$be)|0);
      $266 = HEAP8[$265>>0]|0;
      $267 = $266&255;
      $268 = ($267>>>0)<($$115>>>0);
      if (!($268)) {
       break;
      }
     }
     $269 = HEAP32[6773]|0;
     $270 = ($269|0)==(0|0);
     if ($270) {
      $$0$i5 = 27136;
     } else {
      $271 = (_pthread_self()|0);
      $272 = ((($271)) + 64|0);
      $273 = HEAP32[$272>>2]|0;
      $$0$i5 = $273;
     }
     HEAP32[$$0$i5>>2] = 34;
     $274 = $0 & 1;
     $275 = ($274|0)==(0);
     $276 = (0)==(0);
     $277 = $275 & $276;
     $neg$0$ = $277 ? $neg$0 : 0;
     $283 = $1;$285 = $0;$neg$1 = $neg$0$;
    } else {
     $283 = $324;$285 = $323;$neg$1 = $neg$0;
    }
   }
   $278 = HEAP32[$4>>2]|0;
   $279 = ($278|0)==(0|0);
   if (!($279)) {
    $280 = HEAP32[$3>>2]|0;
    $281 = ((($280)) + -1|0);
    HEAP32[$3>>2] = $281;
   }
   $282 = ($283>>>0)<($1>>>0);
   $284 = ($285>>>0)<($0>>>0);
   $286 = ($283|0)==($1|0);
   $287 = $286 & $284;
   $288 = $282 | $287;
   if (!($288)) {
    $289 = $0 & 1;
    $290 = ($289|0)!=(0);
    $291 = (0)!=(0);
    $292 = $290 | $291;
    $293 = ($neg$1|0)!=(0);
    $or$cond12 = $292 | $293;
    if (!($or$cond12)) {
     $294 = HEAP32[6773]|0;
     $295 = ($294|0)==(0|0);
     if ($295) {
      $$0$i3 = 27136;
     } else {
      $296 = (_pthread_self()|0);
      $297 = ((($296)) + 64|0);
      $298 = HEAP32[$297>>2]|0;
      $$0$i3 = $298;
     }
     HEAP32[$$0$i3>>2] = 34;
     $299 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $300 = tempRet0;
     $317 = $300;$318 = $299;
     break;
    }
    $301 = ($283>>>0)>($1>>>0);
    $302 = ($285>>>0)>($0>>>0);
    $303 = ($283|0)==($1|0);
    $304 = $303 & $302;
    $305 = $301 | $304;
    if ($305) {
     $306 = HEAP32[6773]|0;
     $307 = ($306|0)==(0|0);
     if ($307) {
      $$0$i1 = 27136;
     } else {
      $308 = (_pthread_self()|0);
      $309 = ((($308)) + 64|0);
      $310 = HEAP32[$309>>2]|0;
      $$0$i1 = $310;
     }
     HEAP32[$$0$i1>>2] = 34;
     $317 = $1;$318 = $0;
     break;
    }
   }
   $311 = ($neg$1|0)<(0);
   $312 = $311 << 31 >> 31;
   $313 = $285 ^ $neg$1;
   $314 = $283 ^ $312;
   $315 = (_i64Subtract(($313|0),($314|0),($neg$1|0),($312|0))|0);
   $316 = tempRet0;
   $317 = $316;$318 = $315;
  }
 } while(0);
 tempRet0 = ($317);
 return ($318|0);
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3$pre$phiZZZZ2D = 0, $$pre = 0, $$pre1$pre$phiZZ2D = 0, $$pre2 = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    $11 = $$pre;
    $$pre2 = ((($f)) + 4|0);
    $$pre1$pre$phiZZ2D = $$pre2;$41 = $11;
    label = 9;
   } else {
    $12 = ((($f)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13;
    $15 = (($$pre) - ($14))|0;
    $16 = ((($f)) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = ($15|0)<($18|0);
    $20 = $$pre;
    if ($19) {
     $$pre1$pre$phiZZ2D = $12;$41 = $20;
     label = 9;
    } else {
     $21 = (($18) + -1)|0;
     $22 = (($13) + ($21)|0);
     $23 = ((($f)) + 100|0);
     HEAP32[$23>>2] = $22;
     $$phi$trans$insert3$pre$phiZZZZ2D = $12;$26 = $20;
    }
   }
   if ((label|0) == 9) {
    $24 = ((($f)) + 100|0);
    HEAP32[$24>>2] = $$pre;
    $$phi$trans$insert3$pre$phiZZZZ2D = $$pre1$pre$phiZZ2D;$26 = $41;
   }
   $25 = ($26|0)==(0|0);
   if ($25) {
    $$pre4 = HEAP32[$$phi$trans$insert3$pre$phiZZZZ2D>>2]|0;
    $36 = $$pre4;
   } else {
    $27 = HEAP32[$$phi$trans$insert3$pre$phiZZZZ2D>>2]|0;
    $28 = $26;
    $29 = ((($f)) + 108|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 1)|0;
    $32 = (($31) - ($27))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$29>>2] = $33;
    $34 = $27;
    $36 = $34;
   }
   $35 = ((($36)) + -1|0);
   $37 = HEAP8[$35>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6&255;
    HEAP8[$35>>0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = ((($f)) + 100|0);
  HEAP32[$8>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 127]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 127]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _htons($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n&65535;
 $1 = $0 << 8;
 $2 = $0 >>> 8;
 $3 = $1 | $2;
 $4 = $3&65535;
 return ($4|0);
}
function _fcntl($fd,$cmd,$varargs) {
 $fd = $fd|0;
 $cmd = $cmd|0;
 $varargs = $varargs|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $ap = 0, $arglist_current = 0, $arglist_next = 0, $ex = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0, $vararg_buffer23 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer36 = 0;
 var $vararg_buffer41 = 0, $vararg_buffer46 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr40 = 0, $vararg_ptr44 = 0, $vararg_ptr45 = 0, $vararg_ptr49 = 0;
 var $vararg_ptr50 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer46 = sp + 152|0;
 $vararg_buffer41 = sp + 136|0;
 $vararg_buffer36 = sp + 120|0;
 $vararg_buffer31 = sp + 104|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $ap = sp + 176|0;
 $ex = sp + 168|0;
 HEAP32[$ap>>2] = $varargs;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 4|0);
 $expanded2 = $1;
 $expanded = (($expanded2) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 4|0);
 $expanded6 = $3;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $4 = $2 & $expanded4;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $arglist_next = ((($5)) + 4|0);
 HEAP32[$ap>>2] = $arglist_next;
 $7 = ($cmd|0)==(4);
 $8 = $6 | 32768;
 $$ = $7 ? $8 : $6;
 L1: do {
  switch ($cmd|0) {
  case 14:  {
   $9 = $$;
   HEAP32[$vararg_buffer>>2] = $fd;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 14;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $9;
   $10 = (___syscall221(221,($vararg_buffer|0))|0);
   $11 = (___syscall_ret($10)|0);
   $$2 = $11;
   break;
  }
  case 9:  {
   HEAP32[$vararg_buffer3>>2] = $fd;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = 16;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $ex;
   $12 = (___syscall221(221,($vararg_buffer3|0))|0);
   switch ($12|0) {
   case -22:  {
    $13 = $$;
    HEAP32[$vararg_buffer8>>2] = $fd;
    $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
    HEAP32[$vararg_ptr11>>2] = 9;
    $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
    HEAP32[$vararg_ptr12>>2] = $13;
    $14 = (___syscall221(221,($vararg_buffer8|0))|0);
    $$0 = $14;
    break;
   }
   case 0:  {
    $16 = HEAP32[$ex>>2]|0;
    $17 = ($16|0)==(2);
    $18 = ((($ex)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (0 - ($19))|0;
    $21 = $17 ? $20 : $19;
    $$0 = $21;
    break;
   }
   default: {
    $15 = (___syscall_ret($12)|0);
    $$0 = $15;
   }
   }
   $$2 = $$0;
   break;
  }
  case 1030:  {
   HEAP32[$vararg_buffer13>>2] = $fd;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = 1030;
   $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
   HEAP32[$vararg_ptr17>>2] = $$;
   $22 = (___syscall221(221,($vararg_buffer13|0))|0);
   $23 = ($22|0)==(-22);
   if (!($23)) {
    $24 = ($22|0)>(-1);
    if ($24) {
     HEAP32[$vararg_buffer18>>2] = $22;
     $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
     HEAP32[$vararg_ptr21>>2] = 2;
     $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
     HEAP32[$vararg_ptr22>>2] = 1;
     (___syscall221(221,($vararg_buffer18|0))|0);
    }
    $25 = (___syscall_ret($22)|0);
    $$2 = $25;
    break L1;
   }
   HEAP32[$vararg_buffer23>>2] = $fd;
   $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
   HEAP32[$vararg_ptr26>>2] = 1030;
   $vararg_ptr27 = ((($vararg_buffer23)) + 8|0);
   HEAP32[$vararg_ptr27>>2] = 0;
   $26 = (___syscall221(221,($vararg_buffer23|0))|0);
   $27 = ($26|0)==(-22);
   if ($27) {
    HEAP32[$vararg_buffer31>>2] = $fd;
    $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
    HEAP32[$vararg_ptr34>>2] = 0;
    $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
    HEAP32[$vararg_ptr35>>2] = $$;
    $30 = (___syscall221(221,($vararg_buffer31|0))|0);
    $31 = ($30|0)>(-1);
    if ($31) {
     HEAP32[$vararg_buffer36>>2] = $30;
     $vararg_ptr39 = ((($vararg_buffer36)) + 4|0);
     HEAP32[$vararg_ptr39>>2] = 2;
     $vararg_ptr40 = ((($vararg_buffer36)) + 8|0);
     HEAP32[$vararg_ptr40>>2] = 1;
     (___syscall221(221,($vararg_buffer36|0))|0);
    }
    $32 = (___syscall_ret($30)|0);
    $$2 = $32;
    break L1;
   } else {
    $28 = ($26|0)>(-1);
    if ($28) {
     HEAP32[$vararg_buffer28>>2] = $26;
     (___syscall6(6,($vararg_buffer28|0))|0);
    }
    $29 = (___syscall_ret(-22)|0);
    $$2 = $29;
    break L1;
   }
   break;
  }
  default: {
   $$off = (($cmd) + -12)|0;
   $switch = ($$off>>>0)<(5);
   if ($switch) {
    $33 = $$;
    HEAP32[$vararg_buffer41>>2] = $fd;
    $vararg_ptr44 = ((($vararg_buffer41)) + 4|0);
    HEAP32[$vararg_ptr44>>2] = $cmd;
    $vararg_ptr45 = ((($vararg_buffer41)) + 8|0);
    HEAP32[$vararg_ptr45>>2] = $33;
    $34 = (___syscall221(221,($vararg_buffer41|0))|0);
    $35 = (___syscall_ret($34)|0);
    $$2 = $35;
    break L1;
   } else {
    HEAP32[$vararg_buffer46>>2] = $fd;
    $vararg_ptr49 = ((($vararg_buffer46)) + 4|0);
    HEAP32[$vararg_ptr49>>2] = $cmd;
    $vararg_ptr50 = ((($vararg_buffer46)) + 8|0);
    HEAP32[$vararg_ptr50>>2] = $$;
    $36 = (___syscall221(221,($vararg_buffer46|0))|0);
    $37 = (___syscall_ret($36)|0);
    $$2 = $37;
    break L1;
   }
  }
  }
 } while(0);
 STACKTOP = sp;return ($$2|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return;
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$0$i = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=10000; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
   label = 6;
  } else {
   $3 = HEAP32[6773]|0;
   $4 = ($3|0)==(0|0);
   if ($4) {
    $$0$i = 27136;
   } else {
    $5 = (_pthread_self()|0);
    $6 = ((($5)) + 64|0);
    $7 = HEAP32[$6>>2]|0;
    $$0$i = $7;
   }
   HEAP32[$$0$i>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;$$02 = $n;
  label = 6;
 }
 if ((label|0) == 6) {
  $8 = $$01;
  $9 = (-2 - ($8))|0;
  $10 = ($$02>>>0)>($9>>>0);
  $$$02 = $10 ? $9 : $$02;
  $11 = ((($f)) + 48|0);
  HEAP32[$11>>2] = $$$02;
  $12 = ((($f)) + 20|0);
  HEAP32[$12>>2] = $$01;
  $13 = ((($f)) + 44|0);
  HEAP32[$13>>2] = $$01;
  $14 = (($$01) + ($$$02)|0);
  $15 = ((($f)) + 16|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($f)) + 28|0);
  HEAP32[$16>>2] = $14;
  $17 = (_vfprintf($f,$fmt,$ap)|0);
  $18 = ($$$02|0)==(0);
  if ($18) {
   $$0 = $17;
  } else {
   $19 = HEAP32[$12>>2]|0;
   $20 = HEAP32[$15>>2]|0;
   $21 = ($19|0)==($20|0);
   $22 = $21 << 31 >> 31;
   $23 = (($19) + ($22)|0);
   HEAP8[$23>>0] = 0;
   $$0 = $17;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = ($4>>>0)>($l>>>0);
 $l$ = $5 ? $l : $4;
 $$cast = $3;
 _memcpy(($$cast|0),($s|0),($l$|0))|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + ($l$)|0);
 HEAP32[$2>>2] = $7;
 return ($l|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = HEAP32[$f>>2]|0;
  $3 = $2 & 32;
  $4 = ((($f)) + 74|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)<(1);
  if ($6) {
   $7 = $2 & -33;
   HEAP32[$f>>2] = $7;
  }
  $8 = ((($f)) + 48|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  if ($10) {
   $12 = ((($f)) + 44|0);
   $13 = HEAP32[$12>>2]|0;
   HEAP32[$12>>2] = $internal_buf;
   $14 = ((($f)) + 28|0);
   HEAP32[$14>>2] = $internal_buf;
   $15 = ((($f)) + 20|0);
   HEAP32[$15>>2] = $internal_buf;
   HEAP32[$8>>2] = 80;
   $16 = ((($internal_buf)) + 80|0);
   $17 = ((($f)) + 16|0);
   HEAP32[$17>>2] = $16;
   $18 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $19 = ($13|0)==(0|0);
   if ($19) {
    $ret$1 = $18;
   } else {
    $20 = ((($f)) + 36|0);
    $21 = HEAP32[$20>>2]|0;
    (FUNCTION_TABLE_iiii[$21 & 127]($f,0,0)|0);
    $22 = HEAP32[$15>>2]|0;
    $23 = ($22|0)==(0|0);
    $$ = $23 ? -1 : $18;
    HEAP32[$12>>2] = $13;
    HEAP32[$8>>2] = 0;
    HEAP32[$17>>2] = 0;
    HEAP32[$14>>2] = 0;
    HEAP32[$15>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $11 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $11;
  }
  $24 = HEAP32[$f>>2]|0;
  $25 = $24 & 32;
  $26 = ($25|0)==(0);
  $ret$1$ = $26 ? $ret$1 : -1;
  $27 = $24 | $3;
  HEAP32[$f>>2] = $27;
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i1 = 0, $$0$i2 = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$210$$24$i = 0, $$210$$26$i = 0, $$210$i = 0, $$23$i = 0, $$25$i = 0;
 var $$3$i = 0.0, $$311$i = 0, $$33$i = 0, $$36$i = 0.0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41278$i = 0, $$43 = 0, $$5$lcssa$i = 0, $$589$i = 0, $$a$3$i = 0, $$a$3191$i = 0, $$a$3192$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa162$i = 0, $$neg55$i = 0, $$neg56$i = 0, $$p$$i = 0, $$p$5 = 0;
 var $$p$i = 0, $$phi$trans$insert = 0, $$pn$i = 0, $$pr$i = 0, $$pr50$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi190$iZ2D = 0, $$pre170 = 0, $$pre171 = 0, $$pre185$i = 0, $$pre188$i = 0, $$pre189$i = 0, $$pre47 = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0.0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0.0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0.0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0.0, $461 = 0.0;
 var $462 = 0.0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0.0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0.0, $613 = 0.0, $614 = 0, $615 = 0.0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1149$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3136$i = 0;
 var $a$5$lcssa$i = 0, $a$5111$i = 0, $a$6$i = 0, $a$8$i = 0, $a$9$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0142$i = 0, $carry3$0130$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0$i = 0, $d$0141$i = 0;
 var $d$0143$i = 0, $d$1129$i = 0, $d$2$lcssa$i = 0, $d$2110$i = 0, $d$4$i = 0, $d$584$i = 0, $d$677$i = 0, $d$788$i = 0, $e$0125$i = 0, $e$1$i = 0, $e$2106$i = 0, $e$4$i = 0, $e$5$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$195$i = 0, $estr$2$i = 0, $exitcond$i = 0;
 var $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $fl$0100 = 0, $fl$053 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa178 = 0, $i$0105 = 0;
 var $i$0124$i = 0, $i$03$i = 0, $i$03$i25 = 0, $i$03$i4 = 0, $i$1$lcssa$i = 0, $i$1116 = 0, $i$1118$i = 0, $i$12$i = 0, $i$2105$i = 0, $i$291 = 0, $i$3101$i = 0, $i$389 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0;
 var $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0117$i = 0, $j$0119$i = 0, $j$1102$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1104 = 0, $l$2 = 0, $l10n$0 = 0;
 var $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond122 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond18$i = 0, $or$cond20 = 0, $or$cond22$i = 0, $or$cond3$not$i = 0, $or$cond31$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$0$ = 0;
 var $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0, $p$4176 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$9$i = 0, $re$171$i = 0, $round$070$i = 0.0, $round6$1$i = 0.0;
 var $s$0 = 0, $s$0$i = 0, $s$01$i = 0, $s$1 = 0, $s$1$i = 0, $s$1$i5 = 0, $s$2$lcssa = 0, $s$292 = 0, $s$4 = 0, $s$6 = 0, $s$7 = 0, $s1$0$i = 0, $s7$081$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$072$i = 0, $s9$0$i = 0, $s9$185$i = 0, $s9$2$i = 0, $scevgep182$i = 0;
 var $scevgep182183$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge851 = 0, $storemerge899 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$32$i = 0, $wc = 0, $ws$0106 = 0, $ws$1117 = 0, $z$0$i = 0;
 var $z$0$lcssa = 0, $z$093 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1148$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3135$i = 0, $z$4$i = 0, $z$7$$i = 0, $z$7$i = 0, $z$7$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = $buf$i;
 $6 = (0 - ($5))|0;
 $7 = ((($ebuf0$i)) + 12|0);
 $8 = ((($ebuf0$i)) + 11|0);
 $9 = $7;
 $10 = (($9) - ($5))|0;
 $11 = (-2 - ($5))|0;
 $12 = (($9) + 2)|0;
 $13 = ((($big$i)) + 288|0);
 $14 = ((($buf$i)) + 9|0);
 $15 = $14;
 $16 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;$s$0 = $fmt;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if (!($19)) {
     $25 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $25;
     break;
    }
    $20 = HEAP32[6773]|0;
    $21 = ($20|0)==(0|0);
    if ($21) {
     $$0$i1 = 27136;
    } else {
     $22 = (_pthread_self()|0);
     $23 = ((($22)) + 64|0);
     $24 = HEAP32[$23>>2]|0;
     $$0$i1 = $24;
    }
    HEAP32[$$0$i1>>2] = 75;
    $cnt$1 = -1;
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $26 = HEAP8[$s$0>>0]|0;
  $27 = ($26<<24>>24)==(0);
  if ($27) {
   label = 254;
   break;
  } else {
   $28 = $26;$s$1 = $s$0;
  }
  L12: while(1) {
   switch ($28<<24>>24) {
   case 37:  {
    $s$292 = $s$1;$z$093 = $s$1;
    label = 11;
    break L12;
    break;
   }
   case 0:  {
    $s$2$lcssa = $s$1;$z$0$lcssa = $s$1;
    break L12;
    break;
   }
   default: {
   }
   }
   $29 = ((($s$1)) + 1|0);
   $$pre = HEAP8[$29>>0]|0;
   $28 = $$pre;$s$1 = $29;
  }
  L15: do {
   if ((label|0) == 11) {
    while(1) {
     label = 0;
     $30 = ((($s$292)) + 1|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = ($31<<24>>24)==(37);
     if (!($32)) {
      $s$2$lcssa = $s$292;$z$0$lcssa = $z$093;
      break L15;
     }
     $33 = ((($z$093)) + 1|0);
     $34 = ((($s$292)) + 2|0);
     $35 = HEAP8[$34>>0]|0;
     $36 = ($35<<24>>24)==(37);
     if ($36) {
      $s$292 = $34;$z$093 = $33;
      label = 11;
     } else {
      $s$2$lcssa = $34;$z$0$lcssa = $33;
      break;
     }
    }
   }
  } while(0);
  $37 = $z$0$lcssa;
  $38 = $s$0;
  $39 = (($37) - ($38))|0;
  if ($0) {
   $40 = HEAP32[$f>>2]|0;
   $41 = $40 & 32;
   $42 = ($41|0)==(0);
   if ($42) {
    (___fwritex($s$0,$39,$f)|0);
   }
  }
  $43 = ($z$0$lcssa|0)==($s$0|0);
  if (!($43)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$l$0 = $39;$s$0 = $s$2$lcssa;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $44 = ((($s$2$lcssa)) + 1|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45 << 24 >> 24;
  $isdigittmp = (($46) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $47 = ((($s$2$lcssa)) + 2|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48<<24>>24)==(36);
   $50 = ((($s$2$lcssa)) + 3|0);
   $$43 = $49 ? $50 : $44;
   $$l10n$0 = $49 ? 1 : $l10n$0;
   $isdigittmp$ = $49 ? $isdigittmp : -1;
   $$pre170 = HEAP8[$$43>>0]|0;
   $52 = $$pre170;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$43;
  } else {
   $52 = $45;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $44;
  }
  $51 = $52 << 24 >> 24;
  $53 = $51 & -32;
  $54 = ($53|0)==(32);
  L28: do {
   if ($54) {
    $56 = $51;$61 = $52;$fl$0100 = 0;$storemerge899 = $storemerge;
    while(1) {
     $55 = (($56) + -32)|0;
     $57 = 1 << $55;
     $58 = $57 & 75913;
     $59 = ($58|0)==(0);
     if ($59) {
      $71 = $61;$fl$053 = $fl$0100;$storemerge851 = $storemerge899;
      break L28;
     }
     $60 = $61 << 24 >> 24;
     $62 = (($60) + -32)|0;
     $63 = 1 << $62;
     $64 = $63 | $fl$0100;
     $65 = ((($storemerge899)) + 1|0);
     $66 = HEAP8[$65>>0]|0;
     $67 = $66 << 24 >> 24;
     $68 = $67 & -32;
     $69 = ($68|0)==(32);
     if ($69) {
      $56 = $67;$61 = $66;$fl$0100 = $64;$storemerge899 = $65;
     } else {
      $71 = $66;$fl$053 = $64;$storemerge851 = $65;
      break;
     }
    }
   } else {
    $71 = $52;$fl$053 = 0;$storemerge851 = $storemerge;
   }
  } while(0);
  $70 = ($71<<24>>24)==(42);
  do {
   if ($70) {
    $72 = ((($storemerge851)) + 1|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = $73 << 24 >> 24;
    $isdigittmp11 = (($74) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $75 = ((($storemerge851)) + 2|0);
     $76 = HEAP8[$75>>0]|0;
     $77 = ($76<<24>>24)==(36);
     if ($77) {
      $78 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$78>>2] = 10;
      $79 = HEAP8[$72>>0]|0;
      $80 = $79 << 24 >> 24;
      $81 = (($80) + -48)|0;
      $82 = (($nl_arg) + ($81<<3)|0);
      $83 = $82;
      $84 = $83;
      $85 = HEAP32[$84>>2]|0;
      $86 = (($83) + 4)|0;
      $87 = $86;
      $88 = HEAP32[$87>>2]|0;
      $89 = ((($storemerge851)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $89;$w$0 = $85;
     } else {
      label = 26;
     }
    } else {
     label = 26;
    }
    if ((label|0) == 26) {
     label = 0;
     $90 = ($l10n$1|0)==(0);
     if (!($90)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$053;$l10n$3 = 0;$s$4 = $72;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $91 = $arglist_current;
     $92 = ((0) + 4|0);
     $expanded4 = $92;
     $expanded = (($expanded4) - 1)|0;
     $93 = (($91) + ($expanded))|0;
     $94 = ((0) + 4|0);
     $expanded8 = $94;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $95 = $93 & $expanded6;
     $96 = $95;
     $97 = HEAP32[$96>>2]|0;
     $arglist_next = ((($96)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $72;$w$0 = $97;
    }
    $98 = ($w$0|0)<(0);
    if ($98) {
     $99 = $fl$053 | 8192;
     $100 = (0 - ($w$0))|0;
     $fl$1 = $99;$l10n$3 = $l10n$2;$s$4 = $storemerge13;$w$1 = $100;
    } else {
     $fl$1 = $fl$053;$l10n$3 = $l10n$2;$s$4 = $storemerge13;$w$1 = $w$0;
    }
   } else {
    $101 = $71 << 24 >> 24;
    $isdigittmp1$i = (($101) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $105 = $storemerge851;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $102 = ($i$03$i*10)|0;
      $103 = (($102) + ($isdigittmp4$i))|0;
      $104 = ((($105)) + 1|0);
      $106 = HEAP8[$104>>0]|0;
      $107 = $106 << 24 >> 24;
      $isdigittmp$i = (($107) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $105 = $104;$i$03$i = $103;$isdigittmp4$i = $isdigittmp$i;
      } else {
       break;
      }
     }
     $108 = ($103|0)<(0);
     if ($108) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $104;$w$1 = $103;
     }
    } else {
     $fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $storemerge851;$w$1 = 0;
    }
   }
  } while(0);
  $109 = HEAP8[$s$4>>0]|0;
  $110 = ($109<<24>>24)==(46);
  L49: do {
   if ($110) {
    $111 = ((($s$4)) + 1|0);
    $112 = HEAP8[$111>>0]|0;
    $113 = ($112<<24>>24)==(42);
    if (!($113)) {
     $140 = $112 << 24 >> 24;
     $isdigittmp1$i22 = (($140) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $144 = $111;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $p$0 = 0;$s$6 = $111;
      break;
     }
     while(1) {
      $141 = ($i$03$i25*10)|0;
      $142 = (($141) + ($isdigittmp4$i24))|0;
      $143 = ((($144)) + 1|0);
      $145 = HEAP8[$143>>0]|0;
      $146 = $145 << 24 >> 24;
      $isdigittmp$i26 = (($146) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $144 = $143;$i$03$i25 = $142;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $p$0 = $142;$s$6 = $143;
       break L49;
      }
     }
    }
    $114 = ((($s$4)) + 2|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = $115 << 24 >> 24;
    $isdigittmp9 = (($116) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $117 = ((($s$4)) + 3|0);
     $118 = HEAP8[$117>>0]|0;
     $119 = ($118<<24>>24)==(36);
     if ($119) {
      $120 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$120>>2] = 10;
      $121 = HEAP8[$114>>0]|0;
      $122 = $121 << 24 >> 24;
      $123 = (($122) + -48)|0;
      $124 = (($nl_arg) + ($123<<3)|0);
      $125 = $124;
      $126 = $125;
      $127 = HEAP32[$126>>2]|0;
      $128 = (($125) + 4)|0;
      $129 = $128;
      $130 = HEAP32[$129>>2]|0;
      $131 = ((($s$4)) + 4|0);
      $p$0 = $127;$s$6 = $131;
      break;
     }
    }
    $132 = ($l10n$3|0)==(0);
    if (!($132)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $133 = $arglist_current2;
     $134 = ((0) + 4|0);
     $expanded11 = $134;
     $expanded10 = (($expanded11) - 1)|0;
     $135 = (($133) + ($expanded10))|0;
     $136 = ((0) + 4|0);
     $expanded15 = $136;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $137 = $135 & $expanded13;
     $138 = $137;
     $139 = HEAP32[$138>>2]|0;
     $arglist_next3 = ((($138)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $p$0 = $139;$s$6 = $114;
    } else {
     $p$0 = 0;$s$6 = $114;
    }
   } else {
    $p$0 = -1;$s$6 = $s$4;
   }
  } while(0);
  $s$7 = $s$6;$st$0 = 0;
  while(1) {
   $147 = HEAP8[$s$7>>0]|0;
   $148 = $147 << 24 >> 24;
   $149 = (($148) + -65)|0;
   $150 = ($149>>>0)>(57);
   if ($150) {
    $$0 = -1;
    break L1;
   }
   $151 = ((($s$7)) + 1|0);
   $152 = ((24346 + (($st$0*58)|0)|0) + ($149)|0);
   $153 = HEAP8[$152>>0]|0;
   $154 = $153&255;
   $155 = (($154) + -1)|0;
   $156 = ($155>>>0)<(8);
   if ($156) {
    $s$7 = $151;$st$0 = $154;
   } else {
    break;
   }
  }
  $157 = ($153<<24>>24)==(0);
  if ($157) {
   $$0 = -1;
   break;
  }
  $158 = ($153<<24>>24)==(19);
  $159 = ($argpos$0|0)>(-1);
  do {
   if ($158) {
    if ($159) {
     $$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($159) {
     $160 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$160>>2] = $154;
     $161 = (($nl_arg) + ($argpos$0<<3)|0);
     $162 = $161;
     $163 = $162;
     $164 = HEAP32[$163>>2]|0;
     $165 = (($162) + 4)|0;
     $166 = $165;
     $167 = HEAP32[$166>>2]|0;
     $168 = $arg;
     $169 = $168;
     HEAP32[$169>>2] = $164;
     $170 = (($168) + 4)|0;
     $171 = $170;
     HEAP32[$171>>2] = $167;
     label = 54;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$154,$ap);
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$l$0 = $39;$l10n$0 = $l10n$3;$s$0 = $151;
    continue;
   }
  }
  $172 = HEAP8[$s$7>>0]|0;
  $173 = $172 << 24 >> 24;
  $174 = ($st$0|0)!=(0);
  $175 = $173 & 15;
  $176 = ($175|0)==(3);
  $or$cond15 = $174 & $176;
  $177 = $173 & -33;
  $t$0 = $or$cond15 ? $177 : $173;
  $178 = $fl$1 & 8192;
  $179 = ($178|0)==(0);
  $180 = $fl$1 & -65537;
  $fl$1$ = $179 ? $fl$1 : $180;
  L78: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0|0) {
    case 0:  {
     $187 = HEAP32[$arg>>2]|0;
     HEAP32[$187>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $39;$l10n$0 = $l10n$3;$s$0 = $151;
     continue L1;
     break;
    }
    case 1:  {
     $188 = HEAP32[$arg>>2]|0;
     HEAP32[$188>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $39;$l10n$0 = $l10n$3;$s$0 = $151;
     continue L1;
     break;
    }
    case 2:  {
     $189 = ($cnt$1|0)<(0);
     $190 = $189 << 31 >> 31;
     $191 = HEAP32[$arg>>2]|0;
     $192 = $191;
     $193 = $192;
     HEAP32[$193>>2] = $cnt$1;
     $194 = (($192) + 4)|0;
     $195 = $194;
     HEAP32[$195>>2] = $190;
     $cnt$0 = $cnt$1;$l$0 = $39;$l10n$0 = $l10n$3;$s$0 = $151;
     continue L1;
     break;
    }
    case 3:  {
     $196 = $cnt$1&65535;
     $197 = HEAP32[$arg>>2]|0;
     HEAP16[$197>>1] = $196;
     $cnt$0 = $cnt$1;$l$0 = $39;$l10n$0 = $l10n$3;$s$0 = $151;
     continue L1;
     break;
    }
    case 4:  {
     $198 = $cnt$1&255;
     $199 = HEAP32[$arg>>2]|0;
     HEAP8[$199>>0] = $198;
     $cnt$0 = $cnt$1;$l$0 = $39;$l10n$0 = $l10n$3;$s$0 = $151;
     continue L1;
     break;
    }
    case 6:  {
     $200 = HEAP32[$arg>>2]|0;
     HEAP32[$200>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $39;$l10n$0 = $l10n$3;$s$0 = $151;
     continue L1;
     break;
    }
    case 7:  {
     $201 = ($cnt$1|0)<(0);
     $202 = $201 << 31 >> 31;
     $203 = HEAP32[$arg>>2]|0;
     $204 = $203;
     $205 = $204;
     HEAP32[$205>>2] = $cnt$1;
     $206 = (($204) + 4)|0;
     $207 = $206;
     HEAP32[$207>>2] = $202;
     $cnt$0 = $cnt$1;$l$0 = $39;$l10n$0 = $l10n$3;$s$0 = $151;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$l$0 = $39;$l10n$0 = $l10n$3;$s$0 = $151;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $208 = ($p$0>>>0)>(8);
    $209 = $208 ? $p$0 : 8;
    $210 = $fl$1$ | 8;
    $fl$3 = $210;$p$1 = $209;$t$1 = 120;
    label = 66;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 66;
    break;
   }
   case 111:  {
    $248 = $arg;
    $249 = $248;
    $250 = HEAP32[$249>>2]|0;
    $251 = (($248) + 4)|0;
    $252 = $251;
    $253 = HEAP32[$252>>2]|0;
    $254 = ($250|0)==(0);
    $255 = ($253|0)==(0);
    $256 = $254 & $255;
    if ($256) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$258 = $250;$262 = $253;
     while(1) {
      $257 = $258 & 7;
      $259 = $257 | 48;
      $260 = $259&255;
      $261 = ((($$03$i33)) + -1|0);
      HEAP8[$261>>0] = $260;
      $263 = (_bitshift64Lshr(($258|0),($262|0),3)|0);
      $264 = tempRet0;
      $265 = ($263|0)==(0);
      $266 = ($264|0)==(0);
      $267 = $265 & $266;
      if ($267) {
       $$0$lcssa$i = $261;
       break;
      } else {
       $$03$i33 = $261;$258 = $263;$262 = $264;
      }
     }
    }
    $268 = $fl$1$ & 8;
    $269 = ($268|0)==(0);
    if ($269) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 24826;
     label = 79;
    } else {
     $270 = $$0$lcssa$i;
     $271 = (($2) - ($270))|0;
     $272 = ($p$0|0)>($271|0);
     $273 = (($271) + 1)|0;
     $p$0$ = $272 ? $p$0 : $273;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0$;$pl$1 = 0;$prefix$1 = 24826;
     label = 79;
    }
    break;
   }
   case 105: case 100:  {
    $274 = $arg;
    $275 = $274;
    $276 = HEAP32[$275>>2]|0;
    $277 = (($274) + 4)|0;
    $278 = $277;
    $279 = HEAP32[$278>>2]|0;
    $280 = ($279|0)<(0);
    if ($280) {
     $281 = (_i64Subtract(0,0,($276|0),($279|0))|0);
     $282 = tempRet0;
     $283 = $arg;
     $284 = $283;
     HEAP32[$284>>2] = $281;
     $285 = (($283) + 4)|0;
     $286 = $285;
     HEAP32[$286>>2] = $282;
     $291 = $281;$292 = $282;$pl$0 = 1;$prefix$0 = 24826;
     label = 78;
     break L78;
    }
    $287 = $fl$1$ & 2048;
    $288 = ($287|0)==(0);
    if ($288) {
     $289 = $fl$1$ & 1;
     $290 = ($289|0)==(0);
     $$ = $290 ? 24826 : (24828);
     $291 = $276;$292 = $279;$pl$0 = $289;$prefix$0 = $$;
     label = 78;
    } else {
     $291 = $276;$292 = $279;$pl$0 = 1;$prefix$0 = (24827);
     label = 78;
    }
    break;
   }
   case 117:  {
    $181 = $arg;
    $182 = $181;
    $183 = HEAP32[$182>>2]|0;
    $184 = (($181) + 4)|0;
    $185 = $184;
    $186 = HEAP32[$185>>2]|0;
    $291 = $183;$292 = $186;$pl$0 = 0;$prefix$0 = 24826;
    label = 78;
    break;
   }
   case 99:  {
    $312 = $arg;
    $313 = $312;
    $314 = HEAP32[$313>>2]|0;
    $315 = (($312) + 4)|0;
    $316 = $315;
    $317 = HEAP32[$316>>2]|0;
    $318 = $314&255;
    HEAP8[$3>>0] = $318;
    $a$2 = $3;$fl$6 = $180;$p$5 = 1;$pl$2 = 0;$prefix$2 = 24826;$z$2 = $1;
    break;
   }
   case 109:  {
    $319 = HEAP32[6773]|0;
    $320 = ($319|0)==(0|0);
    if ($320) {
     $$0$i2 = 27136;
    } else {
     $321 = (_pthread_self()|0);
     $322 = ((($321)) + 64|0);
     $323 = HEAP32[$322>>2]|0;
     $$0$i2 = $323;
    }
    $324 = HEAP32[$$0$i2>>2]|0;
    $i$03$i4 = 0;
    while(1) {
     $326 = (24836 + ($i$03$i4)|0);
     $327 = HEAP8[$326>>0]|0;
     $328 = $327&255;
     $329 = ($328|0)==($324|0);
     if ($329) {
      label = 85;
      break;
     }
     $330 = (($i$03$i4) + 1)|0;
     $331 = ($330|0)==(87);
     if ($331) {
      $i$12$i = 87;$s$01$i = 24924;
      break;
     } else {
      $i$03$i4 = $330;
     }
    }
    if ((label|0) == 85) {
     label = 0;
     $325 = ($i$03$i4|0)==(0);
     if ($325) {
      $a$1 = 24924;
      label = 92;
      break L78;
     } else {
      $i$12$i = $i$03$i4;$s$01$i = 24924;
     }
    }
    while(1) {
     $s$1$i5 = $s$01$i;
     while(1) {
      $332 = HEAP8[$s$1$i5>>0]|0;
      $333 = ($332<<24>>24)==(0);
      $334 = ((($s$1$i5)) + 1|0);
      if ($333) {
       break;
      } else {
       $s$1$i5 = $334;
      }
     }
     $335 = (($i$12$i) + -1)|0;
     $336 = ($335|0)==(0);
     if ($336) {
      $a$1 = $334;
      label = 92;
      break;
     } else {
      $i$12$i = $335;$s$01$i = $334;
     }
    }
    break;
   }
   case 115:  {
    $337 = HEAP32[$arg>>2]|0;
    $338 = ($337|0)!=(0|0);
    $339 = $338 ? $337 : 26728;
    $a$1 = $339;
    label = 92;
    break;
   }
   case 67:  {
    $346 = $arg;
    $347 = $346;
    $348 = HEAP32[$347>>2]|0;
    $349 = (($346) + 4)|0;
    $350 = $349;
    $351 = HEAP32[$350>>2]|0;
    HEAP32[$wc>>2] = $348;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $815 = $wc;$p$4176 = -1;
    label = 96;
    break;
   }
   case 83:  {
    $$pre171 = HEAP32[$arg>>2]|0;
    $352 = ($p$0|0)==(0);
    if ($352) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa178 = 0;
     label = 107;
    } else {
     $815 = $$pre171;$p$4176 = $p$0;
     label = 96;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $377 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $377;$378 = HEAP32[tempDoublePtr>>2]|0;
    $379 = HEAP32[tempDoublePtr+4>>2]|0;
    $380 = ($379|0)<(0);
    if ($380) {
     $381 = -$377;
     $$07$i = $381;$pl$0$i = 1;$prefix$0$i = 26735;
    } else {
     $382 = $fl$1$ & 2048;
     $383 = ($382|0)==(0);
     if ($383) {
      $384 = $fl$1$ & 1;
      $385 = ($384|0)==(0);
      $$$i = $385 ? (26736) : (26741);
      $$07$i = $377;$pl$0$i = $384;$prefix$0$i = $$$i;
     } else {
      $$07$i = $377;$pl$0$i = 1;$prefix$0$i = (26738);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$386 = HEAP32[tempDoublePtr>>2]|0;
    $387 = HEAP32[tempDoublePtr+4>>2]|0;
    $388 = $387 & 2146435072;
    $389 = ($388>>>0)<(2146435072);
    $390 = (0)<(0);
    $391 = ($388|0)==(2146435072);
    $392 = $391 & $390;
    $393 = $389 | $392;
    do {
     if ($393) {
      $409 = (+_frexp($$07$i,$e2$i));
      $410 = $409 * 2.0;
      $411 = $410 != 0.0;
      if ($411) {
       $412 = HEAP32[$e2$i>>2]|0;
       $413 = (($412) + -1)|0;
       HEAP32[$e2$i>>2] = $413;
      }
      $414 = $t$0 | 32;
      $415 = ($414|0)==(97);
      if ($415) {
       $416 = $t$0 & 32;
       $417 = ($416|0)==(0);
       $418 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $417 ? $prefix$0$i : $418;
       $419 = $pl$0$i | 2;
       $420 = ($p$0>>>0)>(11);
       $421 = (12 - ($p$0))|0;
       $422 = ($421|0)==(0);
       $423 = $420 | $422;
       do {
        if ($423) {
         $$1$i = $410;
        } else {
         $re$171$i = $421;$round$070$i = 8.0;
         while(1) {
          $424 = (($re$171$i) + -1)|0;
          $425 = $round$070$i * 16.0;
          $426 = ($424|0)==(0);
          if ($426) {
           break;
          } else {
           $re$171$i = $424;$round$070$i = $425;
          }
         }
         $427 = HEAP8[$prefix$0$$i>>0]|0;
         $428 = ($427<<24>>24)==(45);
         if ($428) {
          $429 = -$410;
          $430 = $429 - $425;
          $431 = $425 + $430;
          $432 = -$431;
          $$1$i = $432;
          break;
         } else {
          $433 = $410 + $425;
          $434 = $433 - $425;
          $$1$i = $434;
          break;
         }
        }
       } while(0);
       $435 = HEAP32[$e2$i>>2]|0;
       $436 = ($435|0)<(0);
       $437 = (0 - ($435))|0;
       $438 = $436 ? $437 : $435;
       $439 = ($438|0)<(0);
       $440 = $439 << 31 >> 31;
       $441 = (_fmt_u($438,$440,$7)|0);
       $442 = ($441|0)==($7|0);
       if ($442) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $441;
       }
       $443 = $435 >> 31;
       $444 = $443 & 2;
       $445 = (($444) + 43)|0;
       $446 = $445&255;
       $447 = ((($estr$0$i)) + -1|0);
       HEAP8[$447>>0] = $446;
       $448 = (($t$0) + 15)|0;
       $449 = $448&255;
       $450 = ((($estr$0$i)) + -2|0);
       HEAP8[$450>>0] = $449;
       $notrhs$i = ($p$0|0)<(1);
       $451 = $fl$1$ & 8;
       $452 = ($451|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $453 = (~~(($$2$i)));
        $454 = (24810 + ($453)|0);
        $455 = HEAP8[$454>>0]|0;
        $456 = $455&255;
        $457 = $456 | $416;
        $458 = $457&255;
        $459 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $458;
        $460 = (+($453|0));
        $461 = $$2$i - $460;
        $462 = $461 * 16.0;
        $463 = $459;
        $464 = (($463) - ($5))|0;
        $465 = ($464|0)==(1);
        do {
         if ($465) {
          $notlhs$i = $462 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $452 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $459;
           break;
          }
          $466 = ((($s$0$i)) + 2|0);
          HEAP8[$459>>0] = 46;
          $s$1$i = $466;
         } else {
          $s$1$i = $459;
         }
        } while(0);
        $467 = $462 != 0.0;
        if ($467) {
         $$2$i = $462;$s$0$i = $s$1$i;
        } else {
         break;
        }
       }
       $468 = ($p$0|0)!=(0);
       $$pre188$i = $s$1$i;
       $469 = (($11) + ($$pre188$i))|0;
       $470 = ($469|0)<($p$0|0);
       $or$cond122 = $468 & $470;
       $471 = $450;
       $472 = (($12) + ($p$0))|0;
       $473 = (($472) - ($471))|0;
       $474 = (($10) - ($471))|0;
       $475 = (($474) + ($$pre188$i))|0;
       $l$0$i = $or$cond122 ? $473 : $475;
       $476 = (($l$0$i) + ($419))|0;
       _pad($f,32,$w$1,$476,$fl$1$);
       $477 = HEAP32[$f>>2]|0;
       $478 = $477 & 32;
       $479 = ($478|0)==(0);
       if ($479) {
        (___fwritex($prefix$0$$i,$419,$f)|0);
       }
       $480 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$476,$480);
       $481 = (($$pre188$i) - ($5))|0;
       $482 = HEAP32[$f>>2]|0;
       $483 = $482 & 32;
       $484 = ($483|0)==(0);
       if ($484) {
        (___fwritex($buf$i,$481,$f)|0);
       }
       $485 = (($9) - ($471))|0;
       $sum = (($481) + ($485))|0;
       $486 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$486,0,0);
       $487 = HEAP32[$f>>2]|0;
       $488 = $487 & 32;
       $489 = ($488|0)==(0);
       if ($489) {
        (___fwritex($450,$485,$f)|0);
       }
       $490 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$476,$490);
       $491 = ($476|0)<($w$1|0);
       $w$$i = $491 ? $w$1 : $476;
       $$0$i = $w$$i;
       break;
      }
      $492 = ($p$0|0)<(0);
      $$p$i = $492 ? 6 : $p$0;
      if ($411) {
       $493 = $410 * 268435456.0;
       $494 = HEAP32[$e2$i>>2]|0;
       $495 = (($494) + -28)|0;
       HEAP32[$e2$i>>2] = $495;
       $$3$i = $493;$497 = $495;
      } else {
       $$pre185$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $410;$497 = $$pre185$i;
      }
      $496 = ($497|0)<(0);
      $$33$i = $496 ? $big$i : $13;
      $498 = $$33$i;
      $$4$i = $$3$i;$z$0$i = $$33$i;
      while(1) {
       $499 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $499;
       $500 = ((($z$0$i)) + 4|0);
       $501 = (+($499>>>0));
       $502 = $$4$i - $501;
       $503 = $502 * 1.0E+9;
       $504 = $503 != 0.0;
       if ($504) {
        $$4$i = $503;$z$0$i = $500;
       } else {
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $505 = ($$pr$i|0)>(0);
      if ($505) {
       $507 = $$pr$i;$a$1149$i = $$33$i;$z$1148$i = $500;
       while(1) {
        $506 = ($507|0)>(29);
        $508 = $506 ? 29 : $507;
        $d$0141$i = ((($z$1148$i)) + -4|0);
        $509 = ($d$0141$i>>>0)<($a$1149$i>>>0);
        do {
         if ($509) {
          $a$2$ph$i = $a$1149$i;
         } else {
          $carry$0142$i = 0;$d$0143$i = $d$0141$i;
          while(1) {
           $510 = HEAP32[$d$0143$i>>2]|0;
           $511 = (_bitshift64Shl(($510|0),0,($508|0))|0);
           $512 = tempRet0;
           $513 = (_i64Add(($511|0),($512|0),($carry$0142$i|0),0)|0);
           $514 = tempRet0;
           $515 = (___uremdi3(($513|0),($514|0),1000000000,0)|0);
           $516 = tempRet0;
           HEAP32[$d$0143$i>>2] = $515;
           $517 = (___udivdi3(($513|0),($514|0),1000000000,0)|0);
           $518 = tempRet0;
           $d$0$i = ((($d$0143$i)) + -4|0);
           $519 = ($d$0$i>>>0)<($a$1149$i>>>0);
           if ($519) {
            break;
           } else {
            $carry$0142$i = $517;$d$0143$i = $d$0$i;
           }
          }
          $520 = ($517|0)==(0);
          if ($520) {
           $a$2$ph$i = $a$1149$i;
           break;
          }
          $521 = ((($a$1149$i)) + -4|0);
          HEAP32[$521>>2] = $517;
          $a$2$ph$i = $521;
         }
        } while(0);
        $z$2$i = $z$1148$i;
        while(1) {
         $522 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($522)) {
          break;
         }
         $523 = ((($z$2$i)) + -4|0);
         $524 = HEAP32[$523>>2]|0;
         $525 = ($524|0)==(0);
         if ($525) {
          $z$2$i = $523;
         } else {
          break;
         }
        }
        $526 = HEAP32[$e2$i>>2]|0;
        $527 = (($526) - ($508))|0;
        HEAP32[$e2$i>>2] = $527;
        $528 = ($527|0)>(0);
        if ($528) {
         $507 = $527;$a$1149$i = $a$2$ph$i;$z$1148$i = $z$2$i;
        } else {
         $$pr50$i = $527;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
         break;
        }
       }
      } else {
       $$pr50$i = $$pr$i;$a$1$lcssa$i = $$33$i;$z$1$lcssa$i = $500;
      }
      $529 = ($$pr50$i|0)<(0);
      if ($529) {
       $530 = (($$p$i) + 25)|0;
       $531 = (($530|0) / 9)&-1;
       $532 = (($531) + 1)|0;
       $533 = ($414|0)==(102);
       $535 = $$pr50$i;$a$3136$i = $a$1$lcssa$i;$z$3135$i = $z$1$lcssa$i;
       while(1) {
        $534 = (0 - ($535))|0;
        $536 = ($534|0)>(9);
        $537 = $536 ? 9 : $534;
        $538 = ($a$3136$i>>>0)<($z$3135$i>>>0);
        do {
         if ($538) {
          $542 = 1 << $537;
          $543 = (($542) + -1)|0;
          $544 = 1000000000 >>> $537;
          $carry3$0130$i = 0;$d$1129$i = $a$3136$i;
          while(1) {
           $545 = HEAP32[$d$1129$i>>2]|0;
           $546 = $545 & $543;
           $547 = $545 >>> $537;
           $548 = (($547) + ($carry3$0130$i))|0;
           HEAP32[$d$1129$i>>2] = $548;
           $549 = Math_imul($546, $544)|0;
           $550 = ((($d$1129$i)) + 4|0);
           $551 = ($550>>>0)<($z$3135$i>>>0);
           if ($551) {
            $carry3$0130$i = $549;$d$1129$i = $550;
           } else {
            break;
           }
          }
          $552 = HEAP32[$a$3136$i>>2]|0;
          $553 = ($552|0)==(0);
          $554 = ((($a$3136$i)) + 4|0);
          $$a$3$i = $553 ? $554 : $a$3136$i;
          $555 = ($549|0)==(0);
          if ($555) {
           $$a$3192$i = $$a$3$i;$z$4$i = $z$3135$i;
           break;
          }
          $556 = ((($z$3135$i)) + 4|0);
          HEAP32[$z$3135$i>>2] = $549;
          $$a$3192$i = $$a$3$i;$z$4$i = $556;
         } else {
          $539 = HEAP32[$a$3136$i>>2]|0;
          $540 = ($539|0)==(0);
          $541 = ((($a$3136$i)) + 4|0);
          $$a$3191$i = $540 ? $541 : $a$3136$i;
          $$a$3192$i = $$a$3191$i;$z$4$i = $z$3135$i;
         }
        } while(0);
        $557 = $533 ? $$33$i : $$a$3192$i;
        $558 = $z$4$i;
        $559 = $557;
        $560 = (($558) - ($559))|0;
        $561 = $560 >> 2;
        $562 = ($561|0)>($532|0);
        $563 = (($557) + ($532<<2)|0);
        $$z$4$i = $562 ? $563 : $z$4$i;
        $564 = HEAP32[$e2$i>>2]|0;
        $565 = (($564) + ($537))|0;
        HEAP32[$e2$i>>2] = $565;
        $566 = ($565|0)<(0);
        if ($566) {
         $535 = $565;$a$3136$i = $$a$3192$i;$z$3135$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3192$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $567 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($567) {
        $568 = $a$3$lcssa$i;
        $569 = (($498) - ($568))|0;
        $570 = $569 >> 2;
        $571 = ($570*9)|0;
        $572 = HEAP32[$a$3$lcssa$i>>2]|0;
        $573 = ($572>>>0)<(10);
        if ($573) {
         $e$1$i = $571;
         break;
        } else {
         $e$0125$i = $571;$i$0124$i = 10;
        }
        while(1) {
         $574 = ($i$0124$i*10)|0;
         $575 = (($e$0125$i) + 1)|0;
         $576 = ($572>>>0)<($574>>>0);
         if ($576) {
          $e$1$i = $575;
          break;
         } else {
          $e$0125$i = $575;$i$0124$i = $574;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $577 = ($414|0)!=(102);
      $578 = $577 ? $e$1$i : 0;
      $579 = (($$p$i) - ($578))|0;
      $580 = ($414|0)==(103);
      $581 = ($$p$i|0)!=(0);
      $582 = $581 & $580;
      $$neg55$i = $582 << 31 >> 31;
      $583 = (($579) + ($$neg55$i))|0;
      $584 = $z$3$lcssa$i;
      $585 = (($584) - ($498))|0;
      $586 = $585 >> 2;
      $587 = ($586*9)|0;
      $588 = (($587) + -9)|0;
      $589 = ($583|0)<($588|0);
      if ($589) {
       $590 = ((($$33$i)) + 4|0);
       $591 = (($583) + 9216)|0;
       $592 = (($591|0) / 9)&-1;
       $593 = (($592) + -1024)|0;
       $594 = (($590) + ($593<<2)|0);
       $595 = (($591|0) % 9)&-1;
       $j$0117$i = (($595) + 1)|0;
       $596 = ($j$0117$i|0)<(9);
       if ($596) {
        $i$1118$i = 10;$j$0119$i = $j$0117$i;
        while(1) {
         $597 = ($i$1118$i*10)|0;
         $j$0$i = (($j$0119$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $597;
          break;
         } else {
          $i$1118$i = $597;$j$0119$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $598 = HEAP32[$594>>2]|0;
       $599 = (($598>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $600 = ($599|0)==(0);
       $601 = ((($594)) + 4|0);
       $602 = ($601|0)==($z$3$lcssa$i|0);
       $or$cond18$i = $602 & $600;
       do {
        if ($or$cond18$i) {
         $a$8$i = $a$3$lcssa$i;$d$4$i = $594;$e$4$i = $e$1$i;
        } else {
         $603 = (($598>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $604 = $603 & 1;
         $605 = ($604|0)==(0);
         $$20$i = $605 ? 9007199254740992.0 : 9007199254740994.0;
         $606 = (($i$1$lcssa$i|0) / 2)&-1;
         $607 = ($599>>>0)<($606>>>0);
         if ($607) {
          $small$0$i = 0.5;
         } else {
          $608 = ($599|0)==($606|0);
          $or$cond22$i = $602 & $608;
          $$36$i = $or$cond22$i ? 1.0 : 1.5;
          $small$0$i = $$36$i;
         }
         $609 = ($pl$0$i|0)==(0);
         do {
          if ($609) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $610 = HEAP8[$prefix$0$i>>0]|0;
           $611 = ($610<<24>>24)==(45);
           if (!($611)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $612 = -$$20$i;
           $613 = -$small$0$i;
           $round6$1$i = $612;$small$1$i = $613;
          }
         } while(0);
         $614 = (($598) - ($599))|0;
         HEAP32[$594>>2] = $614;
         $615 = $round6$1$i + $small$1$i;
         $616 = $615 != $round6$1$i;
         if (!($616)) {
          $a$8$i = $a$3$lcssa$i;$d$4$i = $594;$e$4$i = $e$1$i;
          break;
         }
         $617 = (($614) + ($i$1$lcssa$i))|0;
         HEAP32[$594>>2] = $617;
         $618 = ($617>>>0)>(999999999);
         if ($618) {
          $a$5111$i = $a$3$lcssa$i;$d$2110$i = $594;
          while(1) {
           $619 = ((($d$2110$i)) + -4|0);
           HEAP32[$d$2110$i>>2] = 0;
           $620 = ($619>>>0)<($a$5111$i>>>0);
           if ($620) {
            $621 = ((($a$5111$i)) + -4|0);
            HEAP32[$621>>2] = 0;
            $a$6$i = $621;
           } else {
            $a$6$i = $a$5111$i;
           }
           $622 = HEAP32[$619>>2]|0;
           $623 = (($622) + 1)|0;
           HEAP32[$619>>2] = $623;
           $624 = ($623>>>0)>(999999999);
           if ($624) {
            $a$5111$i = $a$6$i;$d$2110$i = $619;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $619;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $594;
         }
         $625 = $a$5$lcssa$i;
         $626 = (($498) - ($625))|0;
         $627 = $626 >> 2;
         $628 = ($627*9)|0;
         $629 = HEAP32[$a$5$lcssa$i>>2]|0;
         $630 = ($629>>>0)<(10);
         if ($630) {
          $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $628;
          break;
         } else {
          $e$2106$i = $628;$i$2105$i = 10;
         }
         while(1) {
          $631 = ($i$2105$i*10)|0;
          $632 = (($e$2106$i) + 1)|0;
          $633 = ($629>>>0)<($631>>>0);
          if ($633) {
           $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $632;
           break;
          } else {
           $e$2106$i = $632;$i$2105$i = $631;
          }
         }
        }
       } while(0);
       $634 = ((($d$4$i)) + 4|0);
       $635 = ($z$3$lcssa$i>>>0)>($634>>>0);
       $$z$3$i = $635 ? $634 : $z$3$lcssa$i;
       $a$9$ph$i = $a$8$i;$e$5$ph$i = $e$4$i;$z$7$ph$i = $$z$3$i;
      } else {
       $a$9$ph$i = $a$3$lcssa$i;$e$5$ph$i = $e$1$i;$z$7$ph$i = $z$3$lcssa$i;
      }
      $636 = (0 - ($e$5$ph$i))|0;
      $z$7$i = $z$7$ph$i;
      while(1) {
       $637 = ($z$7$i>>>0)>($a$9$ph$i>>>0);
       if (!($637)) {
        $$lcssa162$i = 0;
        break;
       }
       $638 = ((($z$7$i)) + -4|0);
       $639 = HEAP32[$638>>2]|0;
       $640 = ($639|0)==(0);
       if ($640) {
        $z$7$i = $638;
       } else {
        $$lcssa162$i = 1;
        break;
       }
      }
      do {
       if ($580) {
        $641 = $581&1;
        $642 = $641 ^ 1;
        $$p$$i = (($642) + ($$p$i))|0;
        $643 = ($$p$$i|0)>($e$5$ph$i|0);
        $644 = ($e$5$ph$i|0)>(-5);
        $or$cond6$i = $643 & $644;
        if ($or$cond6$i) {
         $645 = (($t$0) + -1)|0;
         $$neg56$i = (($$p$$i) + -1)|0;
         $646 = (($$neg56$i) - ($e$5$ph$i))|0;
         $$013$i = $645;$$210$i = $646;
        } else {
         $647 = (($t$0) + -2)|0;
         $648 = (($$p$$i) + -1)|0;
         $$013$i = $647;$$210$i = $648;
        }
        $649 = $fl$1$ & 8;
        $650 = ($649|0)==(0);
        if (!($650)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi190$iZ2D = $649;
         break;
        }
        do {
         if ($$lcssa162$i) {
          $651 = ((($z$7$i)) + -4|0);
          $652 = HEAP32[$651>>2]|0;
          $653 = ($652|0)==(0);
          if ($653) {
           $j$2$i = 9;
           break;
          }
          $654 = (($652>>>0) % 10)&-1;
          $655 = ($654|0)==(0);
          if ($655) {
           $i$3101$i = 10;$j$1102$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $656 = ($i$3101$i*10)|0;
           $657 = (($j$1102$i) + 1)|0;
           $658 = (($652>>>0) % ($656>>>0))&-1;
           $659 = ($658|0)==(0);
           if ($659) {
            $i$3101$i = $656;$j$1102$i = $657;
           } else {
            $j$2$i = $657;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $660 = $$013$i | 32;
        $661 = ($660|0)==(102);
        $662 = $z$7$i;
        $663 = (($662) - ($498))|0;
        $664 = $663 >> 2;
        $665 = ($664*9)|0;
        $666 = (($665) + -9)|0;
        if ($661) {
         $667 = (($666) - ($j$2$i))|0;
         $668 = ($667|0)<(0);
         $$23$i = $668 ? 0 : $667;
         $669 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $669 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi190$iZ2D = 0;
         break;
        } else {
         $670 = (($666) + ($e$5$ph$i))|0;
         $671 = (($670) - ($j$2$i))|0;
         $672 = ($671|0)<(0);
         $$25$i = $672 ? 0 : $671;
         $673 = ($$210$i|0)<($$25$i|0);
         $$210$$26$i = $673 ? $$210$i : $$25$i;
         $$114$i = $$013$i;$$311$i = $$210$$26$i;$$pre$phi190$iZ2D = 0;
         break;
        }
       } else {
        $$pre189$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi190$iZ2D = $$pre189$i;
       }
      } while(0);
      $674 = $$311$i | $$pre$phi190$iZ2D;
      $675 = ($674|0)!=(0);
      $676 = $675&1;
      $677 = $$114$i | 32;
      $678 = ($677|0)==(102);
      if ($678) {
       $679 = ($e$5$ph$i|0)>(0);
       $680 = $679 ? $e$5$ph$i : 0;
       $$pn$i = $680;$estr$2$i = 0;
      } else {
       $681 = ($e$5$ph$i|0)<(0);
       $682 = $681 ? $636 : $e$5$ph$i;
       $683 = ($682|0)<(0);
       $684 = $683 << 31 >> 31;
       $685 = (_fmt_u($682,$684,$7)|0);
       $686 = $685;
       $687 = (($9) - ($686))|0;
       $688 = ($687|0)<(2);
       if ($688) {
        $estr$195$i = $685;
        while(1) {
         $689 = ((($estr$195$i)) + -1|0);
         HEAP8[$689>>0] = 48;
         $690 = $689;
         $691 = (($9) - ($690))|0;
         $692 = ($691|0)<(2);
         if ($692) {
          $estr$195$i = $689;
         } else {
          $estr$1$lcssa$i = $689;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $685;
       }
       $693 = $e$5$ph$i >> 31;
       $694 = $693 & 2;
       $695 = (($694) + 43)|0;
       $696 = $695&255;
       $697 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$697>>0] = $696;
       $698 = $$114$i&255;
       $699 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$699>>0] = $698;
       $700 = $699;
       $701 = (($9) - ($700))|0;
       $$pn$i = $701;$estr$2$i = $699;
      }
      $702 = (($pl$0$i) + 1)|0;
      $703 = (($702) + ($$311$i))|0;
      $l$1$i = (($703) + ($676))|0;
      $704 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$704,$fl$1$);
      $705 = HEAP32[$f>>2]|0;
      $706 = $705 & 32;
      $707 = ($706|0)==(0);
      if ($707) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $708 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$704,$708);
      do {
       if ($678) {
        $709 = ($a$9$ph$i>>>0)>($$33$i>>>0);
        $r$0$a$9$i = $709 ? $$33$i : $a$9$ph$i;
        $d$584$i = $r$0$a$9$i;
        while(1) {
         $710 = HEAP32[$d$584$i>>2]|0;
         $711 = (_fmt_u($710,0,$14)|0);
         $712 = ($d$584$i|0)==($r$0$a$9$i|0);
         do {
          if ($712) {
           $718 = ($711|0)==($14|0);
           if (!($718)) {
            $s7$1$i = $711;
            break;
           }
           HEAP8[$16>>0] = 48;
           $s7$1$i = $16;
          } else {
           $713 = ($711>>>0)>($buf$i>>>0);
           if (!($713)) {
            $s7$1$i = $711;
            break;
           }
           $714 = $711;
           $715 = (($714) - ($5))|0;
           _memset(($buf$i|0),48,($715|0))|0;
           $s7$081$i = $711;
           while(1) {
            $716 = ((($s7$081$i)) + -1|0);
            $717 = ($716>>>0)>($buf$i>>>0);
            if ($717) {
             $s7$081$i = $716;
            } else {
             $s7$1$i = $716;
             break;
            }
           }
          }
         } while(0);
         $719 = HEAP32[$f>>2]|0;
         $720 = $719 & 32;
         $721 = ($720|0)==(0);
         if ($721) {
          $722 = $s7$1$i;
          $723 = (($15) - ($722))|0;
          (___fwritex($s7$1$i,$723,$f)|0);
         }
         $724 = ((($d$584$i)) + 4|0);
         $725 = ($724>>>0)>($$33$i>>>0);
         if ($725) {
          break;
         } else {
          $d$584$i = $724;
         }
        }
        $726 = ($674|0)==(0);
        do {
         if (!($726)) {
          $727 = HEAP32[$f>>2]|0;
          $728 = $727 & 32;
          $729 = ($728|0)==(0);
          if (!($729)) {
           break;
          }
          (___fwritex(26798,1,$f)|0);
         }
        } while(0);
        $730 = ($724>>>0)<($z$7$i>>>0);
        $731 = ($$311$i|0)>(0);
        $732 = $731 & $730;
        if ($732) {
         $$41278$i = $$311$i;$d$677$i = $724;
         while(1) {
          $733 = HEAP32[$d$677$i>>2]|0;
          $734 = (_fmt_u($733,0,$14)|0);
          $735 = ($734>>>0)>($buf$i>>>0);
          if ($735) {
           $736 = $734;
           $737 = (($736) - ($5))|0;
           _memset(($buf$i|0),48,($737|0))|0;
           $s8$072$i = $734;
           while(1) {
            $738 = ((($s8$072$i)) + -1|0);
            $739 = ($738>>>0)>($buf$i>>>0);
            if ($739) {
             $s8$072$i = $738;
            } else {
             $s8$0$lcssa$i = $738;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $734;
          }
          $740 = HEAP32[$f>>2]|0;
          $741 = $740 & 32;
          $742 = ($741|0)==(0);
          if ($742) {
           $743 = ($$41278$i|0)>(9);
           $744 = $743 ? 9 : $$41278$i;
           (___fwritex($s8$0$lcssa$i,$744,$f)|0);
          }
          $745 = ((($d$677$i)) + 4|0);
          $746 = (($$41278$i) + -9)|0;
          $747 = ($745>>>0)<($z$7$i>>>0);
          $748 = ($$41278$i|0)>(9);
          $749 = $748 & $747;
          if ($749) {
           $$41278$i = $746;$d$677$i = $745;
          } else {
           $$412$lcssa$i = $746;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $750 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$750,9,0);
       } else {
        $751 = ((($a$9$ph$i)) + 4|0);
        $z$7$$i = $$lcssa162$i ? $z$7$i : $751;
        $752 = ($$311$i|0)>(-1);
        if ($752) {
         $753 = ($$pre$phi190$iZ2D|0)==(0);
         $$589$i = $$311$i;$d$788$i = $a$9$ph$i;
         while(1) {
          $754 = HEAP32[$d$788$i>>2]|0;
          $755 = (_fmt_u($754,0,$14)|0);
          $756 = ($755|0)==($14|0);
          if ($756) {
           HEAP8[$16>>0] = 48;
           $s9$0$i = $16;
          } else {
           $s9$0$i = $755;
          }
          $757 = ($d$788$i|0)==($a$9$ph$i|0);
          do {
           if ($757) {
            $761 = ((($s9$0$i)) + 1|0);
            $762 = HEAP32[$f>>2]|0;
            $763 = $762 & 32;
            $764 = ($763|0)==(0);
            if ($764) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $765 = ($$589$i|0)<(1);
            $or$cond31$i = $753 & $765;
            if ($or$cond31$i) {
             $s9$2$i = $761;
             break;
            }
            $766 = HEAP32[$f>>2]|0;
            $767 = $766 & 32;
            $768 = ($767|0)==(0);
            if (!($768)) {
             $s9$2$i = $761;
             break;
            }
            (___fwritex(26798,1,$f)|0);
            $s9$2$i = $761;
           } else {
            $758 = ($s9$0$i>>>0)>($buf$i>>>0);
            if (!($758)) {
             $s9$2$i = $s9$0$i;
             break;
            }
            $scevgep182$i = (($s9$0$i) + ($6)|0);
            $scevgep182183$i = $scevgep182$i;
            _memset(($buf$i|0),48,($scevgep182183$i|0))|0;
            $s9$185$i = $s9$0$i;
            while(1) {
             $759 = ((($s9$185$i)) + -1|0);
             $760 = ($759>>>0)>($buf$i>>>0);
             if ($760) {
              $s9$185$i = $759;
             } else {
              $s9$2$i = $759;
              break;
             }
            }
           }
          } while(0);
          $769 = $s9$2$i;
          $770 = (($15) - ($769))|0;
          $771 = HEAP32[$f>>2]|0;
          $772 = $771 & 32;
          $773 = ($772|0)==(0);
          if ($773) {
           $774 = ($$589$i|0)>($770|0);
           $775 = $774 ? $770 : $$589$i;
           (___fwritex($s9$2$i,$775,$f)|0);
          }
          $776 = (($$589$i) - ($770))|0;
          $777 = ((($d$788$i)) + 4|0);
          $778 = ($777>>>0)<($z$7$$i>>>0);
          $779 = ($776|0)>(-1);
          $780 = $778 & $779;
          if ($780) {
           $$589$i = $776;$d$788$i = $777;
          } else {
           $$5$lcssa$i = $776;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $781 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$781,18,0);
        $782 = HEAP32[$f>>2]|0;
        $783 = $782 & 32;
        $784 = ($783|0)==(0);
        if (!($784)) {
         break;
        }
        $785 = $estr$2$i;
        $786 = (($9) - ($785))|0;
        (___fwritex($estr$2$i,$786,$f)|0);
       }
      } while(0);
      $787 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$704,$787);
      $788 = ($704|0)<($w$1|0);
      $w$32$i = $788 ? $w$1 : $704;
      $$0$i = $w$32$i;
     } else {
      $394 = $t$0 & 32;
      $395 = ($394|0)!=(0);
      $396 = $395 ? 26754 : 26758;
      $397 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $398 = $395 ? 26779 : 26762;
      $pl$1$i = $397 ? 0 : $pl$0$i;
      $s1$0$i = $397 ? $398 : $396;
      $399 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$399,$180);
      $400 = HEAP32[$f>>2]|0;
      $401 = $400 & 32;
      $402 = ($401|0)==(0);
      if ($402) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $404 = $$pre$i;
      } else {
       $404 = $400;
      }
      $403 = $404 & 32;
      $405 = ($403|0)==(0);
      if ($405) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $406 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$399,$406);
      $407 = ($399|0)<($w$1|0);
      $408 = $407 ? $w$1 : $399;
      $$0$i = $408;
     }
    } while(0);
    $cnt$0 = $cnt$1;$l$0 = $$0$i;$l10n$0 = $l10n$3;$s$0 = $151;
    continue L1;
    break;
   }
   default: {
    $a$2 = $s$0;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 24826;$z$2 = $1;
   }
   }
  } while(0);
  L327: do {
   if ((label|0) == 66) {
    label = 0;
    $211 = $arg;
    $212 = $211;
    $213 = HEAP32[$212>>2]|0;
    $214 = (($211) + 4)|0;
    $215 = $214;
    $216 = HEAP32[$215>>2]|0;
    $217 = $t$1 & 32;
    $218 = ($213|0)==(0);
    $219 = ($216|0)==(0);
    $220 = $218 & $219;
    if ($220) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 24826;
     label = 79;
    } else {
     $$012$i = $1;$222 = $213;$229 = $216;
     while(1) {
      $221 = $222 & 15;
      $223 = (24810 + ($221)|0);
      $224 = HEAP8[$223>>0]|0;
      $225 = $224&255;
      $226 = $225 | $217;
      $227 = $226&255;
      $228 = ((($$012$i)) + -1|0);
      HEAP8[$228>>0] = $227;
      $230 = (_bitshift64Lshr(($222|0),($229|0),4)|0);
      $231 = tempRet0;
      $232 = ($230|0)==(0);
      $233 = ($231|0)==(0);
      $234 = $232 & $233;
      if ($234) {
       break;
      } else {
       $$012$i = $228;$222 = $230;$229 = $231;
      }
     }
     $235 = $arg;
     $236 = $235;
     $237 = HEAP32[$236>>2]|0;
     $238 = (($235) + 4)|0;
     $239 = $238;
     $240 = HEAP32[$239>>2]|0;
     $241 = ($237|0)==(0);
     $242 = ($240|0)==(0);
     $243 = $241 & $242;
     $244 = $fl$3 & 8;
     $245 = ($244|0)==(0);
     $or$cond17 = $245 | $243;
     if ($or$cond17) {
      $a$0 = $228;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 24826;
      label = 79;
     } else {
      $246 = $t$1 >> 4;
      $247 = (24826 + ($246)|0);
      $a$0 = $228;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $247;
      label = 79;
     }
    }
   }
   else if ((label|0) == 78) {
    label = 0;
    $293 = (_fmt_u($291,$292,$1)|0);
    $a$0 = $293;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 79;
   }
   else if ((label|0) == 92) {
    label = 0;
    $340 = (_memchr($a$1,0,$p$0)|0);
    $341 = ($340|0)==(0|0);
    $342 = $340;
    $343 = $a$1;
    $344 = (($342) - ($343))|0;
    $345 = (($a$1) + ($p$0)|0);
    $z$1 = $341 ? $345 : $340;
    $p$3 = $341 ? $p$0 : $344;
    $a$2 = $a$1;$fl$6 = $180;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 24826;$z$2 = $z$1;
   }
   else if ((label|0) == 96) {
    label = 0;
    $i$0105 = 0;$l$1104 = 0;$ws$0106 = $815;
    while(1) {
     $353 = HEAP32[$ws$0106>>2]|0;
     $354 = ($353|0)==(0);
     if ($354) {
      $i$0$lcssa = $i$0105;$l$2 = $l$1104;
      break;
     }
     $355 = (_wctomb($mb,$353)|0);
     $356 = ($355|0)<(0);
     $357 = (($p$4176) - ($i$0105))|0;
     $358 = ($355>>>0)>($357>>>0);
     $or$cond20 = $356 | $358;
     if ($or$cond20) {
      $i$0$lcssa = $i$0105;$l$2 = $355;
      break;
     }
     $359 = ((($ws$0106)) + 4|0);
     $360 = (($355) + ($i$0105))|0;
     $361 = ($p$4176>>>0)>($360>>>0);
     if ($361) {
      $i$0105 = $360;$l$1104 = $355;$ws$0106 = $359;
     } else {
      $i$0$lcssa = $360;$l$2 = $355;
      break;
     }
    }
    $362 = ($l$2|0)<(0);
    if ($362) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $363 = ($i$0$lcssa|0)==(0);
    if ($363) {
     $i$0$lcssa178 = 0;
     label = 107;
    } else {
     $i$1116 = 0;$ws$1117 = $815;
     while(1) {
      $364 = HEAP32[$ws$1117>>2]|0;
      $365 = ($364|0)==(0);
      if ($365) {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 107;
       break L327;
      }
      $366 = ((($ws$1117)) + 4|0);
      $367 = (_wctomb($mb,$364)|0);
      $368 = (($367) + ($i$1116))|0;
      $369 = ($368|0)>($i$0$lcssa|0);
      if ($369) {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 107;
       break L327;
      }
      $370 = HEAP32[$f>>2]|0;
      $371 = $370 & 32;
      $372 = ($371|0)==(0);
      if ($372) {
       (___fwritex($mb,$367,$f)|0);
      }
      $373 = ($368>>>0)<($i$0$lcssa>>>0);
      if ($373) {
       $i$1116 = $368;$ws$1117 = $366;
      } else {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 107;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 107) {
   label = 0;
   $374 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa178,$374);
   $375 = ($w$1|0)>($i$0$lcssa178|0);
   $376 = $375 ? $w$1 : $i$0$lcssa178;
   $cnt$0 = $cnt$1;$l$0 = $376;$l10n$0 = $l10n$3;$s$0 = $151;
   continue;
  }
  if ((label|0) == 79) {
   label = 0;
   $294 = ($p$2|0)>(-1);
   $295 = $fl$4 & -65537;
   $$fl$4 = $294 ? $295 : $fl$4;
   $296 = $arg;
   $297 = $296;
   $298 = HEAP32[$297>>2]|0;
   $299 = (($296) + 4)|0;
   $300 = $299;
   $301 = HEAP32[$300>>2]|0;
   $302 = ($298|0)!=(0);
   $303 = ($301|0)!=(0);
   $304 = $302 | $303;
   $305 = ($p$2|0)!=(0);
   $or$cond = $305 | $304;
   if ($or$cond) {
    $306 = $a$0;
    $307 = (($2) - ($306))|0;
    $308 = $304&1;
    $309 = $308 ^ 1;
    $310 = (($309) + ($307))|0;
    $311 = ($p$2|0)>($310|0);
    $p$2$ = $311 ? $p$2 : $310;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $789 = $z$2;
  $790 = $a$2;
  $791 = (($789) - ($790))|0;
  $792 = ($p$5|0)<($791|0);
  $$p$5 = $792 ? $791 : $p$5;
  $793 = (($pl$2) + ($$p$5))|0;
  $794 = ($w$1|0)<($793|0);
  $w$2 = $794 ? $793 : $w$1;
  _pad($f,32,$w$2,$793,$fl$6);
  $795 = HEAP32[$f>>2]|0;
  $796 = $795 & 32;
  $797 = ($796|0)==(0);
  if ($797) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $798 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$793,$798);
  _pad($f,48,$$p$5,$791,0);
  $799 = HEAP32[$f>>2]|0;
  $800 = $799 & 32;
  $801 = ($800|0)==(0);
  if ($801) {
   (___fwritex($a$2,$791,$f)|0);
  }
  $802 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$793,$802);
  $cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;$s$0 = $151;
 }
 L361: do {
  if ((label|0) == 254) {
   $803 = ($f|0)==(0|0);
   if ($803) {
    $804 = ($l10n$0|0)==(0);
    if ($804) {
     $$0 = 0;
    } else {
     $i$291 = 1;
     while(1) {
      $805 = (($nl_type) + ($i$291<<2)|0);
      $806 = HEAP32[$805>>2]|0;
      $807 = ($806|0)==(0);
      if ($807) {
       $814 = 0;$i$389 = $i$291;
       break;
      }
      $808 = (($nl_arg) + ($i$291<<3)|0);
      _pop_arg($808,$806,$ap);
      $809 = (($i$291) + 1)|0;
      $810 = ($809|0)<(10);
      if ($810) {
       $i$291 = $809;
      } else {
       $$0 = 1;
       break L361;
      }
     }
     while(1) {
      $813 = ($814|0)==(0);
      $812 = (($i$389) + 1)|0;
      if (!($813)) {
       $$0 = -1;
       break L361;
      }
      $811 = ($812|0)<(10);
      if (!($811)) {
       $$0 = 1;
       break L361;
      }
      $$phi$trans$insert = (($nl_type) + ($812<<2)|0);
      $$pre47 = HEAP32[$$phi$trans$insert>>2]|0;
      $814 = $$pre47;$i$389 = $812;
     }
    }
   } else {
    $$0 = $cnt$1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$0>>2]|0;
   $9 = $$pre;
   label = 5;
  } else {
   $$0 = 0;
  }
 } else {
  $3 = $1;
  $9 = $3;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($9) - ($7))|0;
   $10 = ($8>>>0)<($l>>>0);
   $11 = $7;
   if ($10) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 127]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L10: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
       break L10;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 127]($f,$s,$i$0)|0);
     $26 = ($25>>>0)<($i$0>>>0);
     if ($26) {
      $$0 = $i$0;
      break L5;
     }
     $27 = (($s) + ($i$0)|0);
     $28 = (($l) - ($i$0))|0;
     $$pre6 = HEAP32[$6>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0;
    } else {
     $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$6>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$6>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    break;
   }
  }
  $$0$lcssa = $13;$$01$lcssa$off0 = $14;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $$pre = 0, $$pre10 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$3 = $$019;$s$2 = $s$020;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   if ($$lcssa) {
    $$pre = HEAP8[$s$0$lcssa>>0]|0;
    $$pre10 = $c&255;
    $14 = ($$pre<<24>>24)==($$pre10<<24>>24);
    if ($14) {
     $$3 = $$0$lcssa;$s$2 = $s$0$lcssa;
    } else {
     $15 = Math_imul($0, 16843009)|0;
     $16 = ($$0$lcssa>>>0)>(3);
     L10: do {
      if ($16) {
       $$110 = $$0$lcssa;$w$011 = $s$0$lcssa;
       while(1) {
        $17 = HEAP32[$w$011>>2]|0;
        $18 = $17 ^ $15;
        $19 = (($18) + -16843009)|0;
        $20 = $18 & -2139062144;
        $21 = $20 ^ -2139062144;
        $22 = $21 & $19;
        $23 = ($22|0)==(0);
        if (!($23)) {
         break;
        }
        $24 = ((($w$011)) + 4|0);
        $25 = (($$110) + -4)|0;
        $26 = ($25>>>0)>(3);
        if ($26) {
         $$110 = $25;$w$011 = $24;
        } else {
         $$1$lcssa = $25;$w$0$lcssa = $24;
         label = 11;
         break L10;
        }
       }
       $$24 = $$110;$s$15 = $w$011;
      } else {
       $$1$lcssa = $$0$lcssa;$w$0$lcssa = $s$0$lcssa;
       label = 11;
      }
     } while(0);
     if ((label|0) == 11) {
      $27 = ($$1$lcssa|0)==(0);
      if ($27) {
       $$3 = 0;$s$2 = $w$0$lcssa;
       break;
      } else {
       $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
      }
     }
     while(1) {
      $28 = HEAP8[$s$15>>0]|0;
      $29 = ($28<<24>>24)==($$pre10<<24>>24);
      if ($29) {
       $$3 = $$24;$s$2 = $s$15;
       break L6;
      }
      $30 = ((($s$15)) + 1|0);
      $31 = (($$24) + -1)|0;
      $32 = ($31|0)==(0);
      if ($32) {
       $$3 = 0;$s$2 = $30;
       break;
      } else {
       $$24 = $31;$s$15 = $30;
      }
     }
    }
   } else {
    $$3 = 0;$s$2 = $s$0$lcssa;
   }
  }
 } while(0);
 $33 = ($$3|0)!=(0);
 $34 = $33 ? $s$2 : 0;
 return ($34|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $$02 = $3;$16 = $7;$17 = $9;
    while(1) {
     if ($17) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $13 = $$pre;
     } else {
      $13 = $16;
     }
     $10 = (($$02) + -256)|0;
     $11 = ($10>>>0)>(255);
     $12 = $13 & 32;
     $14 = ($12|0)==(0);
     if ($11) {
      $$02 = $10;$16 = $13;$17 = $14;
     } else {
      break;
     }
    }
    $15 = $3 & 255;
    if ($14) {
     $$0$lcssa6 = $15;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $$0$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 0;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond$i = $11 | $13;
   if ($or$cond$i) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   }
   $45 = HEAP32[6773]|0;
   $46 = ($45|0)==(0|0);
   if ($46) {
    $$0$i$i = 27136;
   } else {
    $47 = (_pthread_self()|0);
    $48 = ((($47)) + 64|0);
    $49 = HEAP32[$48>>2]|0;
    $$0$i$i = $49;
   }
   HEAP32[$$0$i$i>>2] = 84;
   $$0 = -1;
  }
 } while(0);
 return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i2 = 0, $$cast$i = 0, $$flags$4$i = 0, $$pre$i = 0, $$pre1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $flags$0$$i = 0, $flags$0$i = 0, $flags$2$$i = 0, $flags$2$i = 0;
 var $flags$4$i = 0, $memchr = 0, $memchr$i = 0, $not$ = 0, $not$$i = 0, $not$5 = 0, $not$6 = 0, $not$7 = 0, $not$8 = 0, $tio$i = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer22 = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tio$i = sp + 76|0;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(26766,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 do {
  if ($2) {
   $3 = HEAP32[6773]|0;
   $4 = ($3|0)==(0|0);
   if ($4) {
    $$0$i = 27136;
   } else {
    $5 = (_pthread_self()|0);
    $6 = ((($5)) + 64|0);
    $7 = HEAP32[$6>>2]|0;
    $$0$i = $7;
   }
   HEAP32[$$0$i>>2] = 22;
   $$0 = 0;
  } else {
   $8 = (___strchrnul($mode,43)|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ($8|0)==(0|0);
   $not$ = ($9<<24>>24)!=(43);
   $11 = $10 | $not$;
   $not$$i = ($0<<24>>24)!=(114);
   $$$i = $not$$i&1;
   $flags$0$i = $11 ? $$$i : 2;
   $12 = (___strchrnul($mode,120)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = ($12|0)==(0|0);
   $not$5 = ($13<<24>>24)!=(120);
   $15 = $14 | $not$5;
   $16 = $flags$0$i | 128;
   $flags$0$$i = $15 ? $flags$0$i : $16;
   $17 = (___strchrnul($mode,101)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = ($17|0)==(0|0);
   $not$6 = ($18<<24>>24)!=(101);
   $20 = $19 | $not$6;
   $21 = $flags$0$$i | 524288;
   $flags$2$i = $20 ? $flags$0$$i : $21;
   $22 = ($0<<24>>24)==(114);
   $23 = $flags$2$i | 64;
   $flags$2$$i = $22 ? $flags$2$i : $23;
   $24 = ($0<<24>>24)==(119);
   $25 = $flags$2$$i | 512;
   $flags$4$i = $24 ? $25 : $flags$2$$i;
   $26 = ($0<<24>>24)==(97);
   $27 = $flags$4$i | 1024;
   $$flags$4$i = $26 ? $27 : $flags$4$i;
   $28 = $$flags$4$i | 32768;
   HEAP32[$vararg_buffer>>2] = $filename;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $28;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 438;
   $29 = (___syscall5(5,($vararg_buffer|0))|0);
   $30 = ($29>>>0)>(4294963200);
   if ($30) {
    $31 = (0 - ($29))|0;
    $32 = HEAP32[6773]|0;
    $33 = ($32|0)==(0|0);
    if ($33) {
     $$0$i$i = 27136;
    } else {
     $34 = (_pthread_self()|0);
     $35 = ((($34)) + 64|0);
     $36 = HEAP32[$35>>2]|0;
     $$0$i$i = $36;
    }
    HEAP32[$$0$i$i>>2] = $31;
    $$0 = 0;
    break;
   }
   $37 = ($29|0)<(0);
   if ($37) {
    $$0 = 0;
   } else {
    $38 = HEAP8[$mode>>0]|0;
    $39 = $38 << 24 >> 24;
    $memchr$i = (_memchr(26766,$39,4)|0);
    $40 = ($memchr$i|0)==(0|0);
    if ($40) {
     $41 = HEAP32[6773]|0;
     $42 = ($41|0)==(0|0);
     if ($42) {
      $$0$i$i2 = 27136;
     } else {
      $43 = (_pthread_self()|0);
      $44 = ((($43)) + 64|0);
      $45 = HEAP32[$44>>2]|0;
      $$0$i$i2 = $45;
     }
     HEAP32[$$0$i$i2>>2] = 22;
    } else {
     $46 = (_malloc(1144)|0);
     $47 = ($46|0)==(0|0);
     if (!($47)) {
      dest=$46; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
      $48 = (___strchrnul($mode,43)|0);
      $49 = HEAP8[$48>>0]|0;
      $50 = ($48|0)==(0|0);
      $not$7 = ($49<<24>>24)!=(43);
      $51 = $50 | $not$7;
      if ($51) {
       $52 = ($38<<24>>24)==(114);
       $53 = $52 ? 8 : 4;
       HEAP32[$46>>2] = $53;
      }
      $54 = (___strchrnul($mode,101)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = ($54|0)==(0|0);
      $not$8 = ($55<<24>>24)!=(101);
      $57 = $56 | $not$8;
      if ($57) {
       $59 = $38;
      } else {
       HEAP32[$vararg_buffer3>>2] = $29;
       $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
       HEAP32[$vararg_ptr6>>2] = 2;
       $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
       HEAP32[$vararg_ptr7>>2] = 1;
       (___syscall221(221,($vararg_buffer3|0))|0);
       $$pre$i = HEAP8[$mode>>0]|0;
       $59 = $$pre$i;
      }
      $58 = ($59<<24>>24)==(97);
      if ($58) {
       HEAP32[$vararg_buffer8>>2] = $29;
       $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
       HEAP32[$vararg_ptr11>>2] = 3;
       $60 = (___syscall221(221,($vararg_buffer8|0))|0);
       $61 = $60 & 1024;
       $62 = ($61|0)==(0);
       if ($62) {
        $63 = $60 | 1024;
        HEAP32[$vararg_buffer12>>2] = $29;
        $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
        HEAP32[$vararg_ptr15>>2] = 4;
        $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
        HEAP32[$vararg_ptr16>>2] = $63;
        (___syscall221(221,($vararg_buffer12|0))|0);
       }
       $64 = HEAP32[$46>>2]|0;
       $65 = $64 | 128;
       HEAP32[$46>>2] = $65;
       $72 = $65;
      } else {
       $$pre1$i = HEAP32[$46>>2]|0;
       $72 = $$pre1$i;
      }
      $66 = ((($46)) + 60|0);
      HEAP32[$66>>2] = $29;
      $67 = ((($46)) + 120|0);
      $68 = ((($46)) + 44|0);
      HEAP32[$68>>2] = $67;
      $69 = ((($46)) + 48|0);
      HEAP32[$69>>2] = 1024;
      $70 = ((($46)) + 75|0);
      HEAP8[$70>>0] = -1;
      $71 = $72 & 8;
      $73 = ($71|0)==(0);
      if ($73) {
       HEAP32[$vararg_buffer17>>2] = $29;
       $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
       HEAP32[$vararg_ptr20>>2] = 21505;
       $vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
       HEAP32[$vararg_ptr21>>2] = $tio$i;
       $74 = (___syscall54(54,($vararg_buffer17|0))|0);
       $75 = ($74|0)==(0);
       if ($75) {
        HEAP8[$70>>0] = 10;
       }
      }
      $76 = ((($46)) + 32|0);
      HEAP32[$76>>2] = 108;
      $77 = ((($46)) + 36|0);
      HEAP32[$77>>2] = 37;
      $78 = ((($46)) + 40|0);
      HEAP32[$78>>2] = 38;
      $79 = ((($46)) + 12|0);
      HEAP32[$79>>2] = 36;
      $80 = HEAP32[(27096)>>2]|0;
      $81 = ($80|0)==(0);
      if ($81) {
       $82 = ((($46)) + 76|0);
       HEAP32[$82>>2] = -1;
      }
      ___lock(((27120)|0));
      $83 = HEAP32[(27116)>>2]|0;
      $84 = ((($46)) + 56|0);
      HEAP32[$84>>2] = $83;
      $85 = ($83|0)==(0);
      if (!($85)) {
       $$cast$i = $83;
       $86 = ((($$cast$i)) + 52|0);
       HEAP32[$86>>2] = $46;
      }
      HEAP32[(27116)>>2] = $46;
      ___unlock(((27120)|0));
      $$0 = $46;
      break;
     }
    }
    HEAP32[$vararg_buffer22>>2] = $29;
    (___syscall6(6,($vararg_buffer22|0))|0);
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fgets($s,$n,$f) {
 $s = $s|0;
 $n = $n|0;
 $f = $f|0;
 var $$0 = 0, $$05 = 0, $$old2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $p$0 = 0, $p$1 = 0, $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n) + -1)|0;
 $1 = ($n|0)<(2);
 L1: do {
  if ($1) {
   $2 = ((($f)) + 74|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = $3 << 24 >> 24;
   $5 = (($4) + 255)|0;
   $6 = $5 | $4;
   $7 = $6&255;
   HEAP8[$2>>0] = $7;
   $8 = ($0|0)==(0);
   if ($8) {
    HEAP8[$s>>0] = 0;
    $$0 = $s;
   } else {
    $$0 = 0;
   }
  } else {
   $$old2 = ($0|0)==(0);
   L5: do {
    if ($$old2) {
     $p$1 = $s;
    } else {
     $9 = ((($f)) + 4|0);
     $10 = ((($f)) + 8|0);
     $$05 = $0;$p$0 = $s;
     while(1) {
      $11 = HEAP32[$9>>2]|0;
      $12 = HEAP32[$10>>2]|0;
      $13 = $11;
      $14 = (($12) - ($13))|0;
      $15 = (_memchr($11,10,$14)|0);
      $16 = ($15|0)==(0|0);
      $17 = $15;
      $18 = (1 - ($13))|0;
      $19 = (($18) + ($17))|0;
      $20 = $16 ? $14 : $19;
      $21 = ($20>>>0)<($$05>>>0);
      $22 = $21 ? $20 : $$05;
      _memcpy(($p$0|0),($11|0),($22|0))|0;
      $23 = HEAP32[$9>>2]|0;
      $24 = (($23) + ($22)|0);
      HEAP32[$9>>2] = $24;
      $25 = (($p$0) + ($22)|0);
      $26 = (($$05) - ($22))|0;
      $or$cond = $16 & $21;
      if (!($or$cond)) {
       $p$1 = $25;
       break L5;
      }
      $27 = HEAP32[$10>>2]|0;
      $28 = ($24>>>0)<($27>>>0);
      if ($28) {
       $29 = ((($24)) + 1|0);
       HEAP32[$9>>2] = $29;
       $30 = HEAP8[$24>>0]|0;
       $31 = $30&255;
       $40 = $31;
      } else {
       $32 = (___uflow($f)|0);
       $33 = ($32|0)<(0);
       if ($33) {
        break;
       } else {
        $40 = $32;
       }
      }
      $38 = (($26) + -1)|0;
      $39 = $40&255;
      $41 = ((($25)) + 1|0);
      HEAP8[$25>>0] = $39;
      $sext$mask = $40 & 255;
      $42 = ($sext$mask|0)!=(10);
      $43 = ($38|0)!=(0);
      $or$cond3 = $43 & $42;
      if ($or$cond3) {
       $$05 = $38;$p$0 = $41;
      } else {
       $p$1 = $41;
       break L5;
      }
     }
     $34 = ($25|0)==($s|0);
     if ($34) {
      $$0 = 0;
      break L1;
     }
     $35 = HEAP32[$f>>2]|0;
     $36 = $35 & 16;
     $37 = ($36|0)==(0);
     if ($37) {
      $$0 = 0;
      break L1;
     } else {
      $p$1 = $25;
     }
    }
   } while(0);
   $44 = ($s|0)==(0|0);
   if ($44) {
    $$0 = 0;
   } else {
    HEAP8[$p$1>>0] = 0;
    $$0 = $s;
   }
  }
 } while(0);
 return ($$0|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $$$i$i = 0, $$0$i$i$i$i = 0, $$11$i$i = 0, $$12$i$i = 0, $$13$i$i = 0, $$14$i$i = 0, $$cast = 0, $$demorgan = 0, $$demorgan1 = 0, $$lcssa40$i$i = 0, $$not$i$i = 0, $$old4$i$i = 0, $$pre = 0, $$pre$i$i = 0, $$pre$phi184$i$iZ2D = 0, $$pre173$i$i = 0, $$pre175$i$i = 0, $$pre177$i$i = 0, $$pre179$i$i = 0, $$pre180$i$i = 0;
 var $$pre181$i$i = 0, $$pre182$i$i = 0, $$pre183$i$i = 0, $$pre92 = 0, $$pre94 = 0, $$pre95 = 0, $$size$0$i$i = 0, $$width$0$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0.0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0$i$i = 0, $alloc$1$i$i = 0, $alloc$2$i$i = 0, $ap = 0, $ap2$i$i$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0$i$i = 0, $c$0102$i$i = 0, $dest$0$i$i = 0;
 var $exitcond = 0, $expanded = 0, $expanded10 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded3 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded9 = 0, $f$i = 0, $factor$i$i = 0, $factor18$i$i = 0, $i$0$i$i$i = 0, $i$0$ph$i$i = 0, $i$0$ph$i$i$phi = 0, $i$0$ph22$i$i = 0, $i$1$i$i = 0, $i$2$i$i = 0;
 var $i$2$ph$i$i = 0, $i$2$ph$i$i$phi = 0, $i$3$i$i = 0, $i$4$i$i = 0, $invert$0$i$i = 0, $isdigit$i$i = 0, $isdigit8$i$i = 0, $isdigit897$i$i = 0, $isdigittmp$i$i = 0, $isdigittmp7$i$i = 0, $isdigittmp796$i$i = 0, $k$0$ph$i$i = 0, $k$1$ph$i$i = 0, $matches$0$$i$i = 0, $matches$0107$i$i = 0, $matches$1$i$i = 0, $matches$2$i$i = 0, $matches$3$i$i = 0, $not$$i$i = 0, $or$cond$i$i = 0;
 var $or$cond$i$i$i = 0, $or$cond10$i$i = 0, $or$cond3$i$i = 0, $or$cond5$i$i = 0, $p$0110$i$i = 0, $p$1$i$i = 0, $p$10$i$i = 0, $p$11$i$i = 0, $p$2$i$i = 0, $p$3$lcssa$i$i = 0, $p$398$i$i = 0, $p$4$i$i = 0, $p$5$i$i = 0, $p$6$i$i = 0, $p$7$i$i = 0, $p$7$ph$i$i = 0, $p$8$i$i = 0, $p$9$i$i = 0, $pos$0111$i$i = 0, $pos$1$i$i = 0;
 var $pos$2$i$i = 0, $s$0105$i$i = 0, $s$1$i$i = 0, $s$2$ph$i$i = 0, $s$4$i$i = 0, $s$5$i$i = 0, $s$6$i$i = 0, $s$7$i$i = 0, $s$8$i$i = 0, $s$9$i$i = 0, $scanset$i$i = 0, $size$0$i$i = 0, $st$i$i$sroa$0$2 = 0, $vacopy_currentptr = 0, $wc$i$i$0175 = 0, $wcs$0106$i$i = 0, $wcs$1$i$i = 0, $wcs$10$i$i = 0, $wcs$3$ph$i$i = 0, $wcs$5$i$i = 0;
 var $wcs$6$i$i = 0, $wcs$7$i$i = 0, $wcs$8$i$i = 0, $wcs$9$i$i = 0, $width$0$lcssa$i$i = 0, $width$099$i$i = 0, $width$1$i$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i$i$i = sp + 128|0;
 $scanset$i$i = sp + 144|0;
 $f$i = sp + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 dest=$f$i; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f$i)) + 32|0);
 HEAP32[$0>>2] = 109;
 $1 = ((($f$i)) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ((($f$i)) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = ((($f$i)) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = HEAP8[$fmt>>0]|0;
 $5 = ($4<<24>>24)==(0);
 L1: do {
  if ($5) {
   $matches$3$i$i = 0;
  } else {
   $6 = ((($f$i)) + 4|0);
   $7 = ((($f$i)) + 100|0);
   $8 = ((($f$i)) + 108|0);
   $9 = ((($f$i)) + 8|0);
   $10 = ((($scanset$i$i)) + 10|0);
   $11 = ((($scanset$i$i)) + 33|0);
   $12 = ((($scanset$i$i)) + 46|0);
   $13 = ((($scanset$i$i)) + 94|0);
   $14 = ((($f$i)) + 104|0);
   $16 = $4;$matches$0107$i$i = 0;$p$0110$i$i = $fmt;$pos$0111$i$i = 0;$s$0105$i$i = 0;$wcs$0106$i$i = 0;
   L3: while(1) {
    $15 = $16&255;
    $17 = ($16<<24>>24)==(32);
    $18 = (($15) + -9)|0;
    $19 = ($18>>>0)<(5);
    $$demorgan = $17 | $19;
    L5: do {
     if ($$demorgan) {
      $p$1$i$i = $p$0110$i$i;
      while(1) {
       $20 = ((($p$1$i$i)) + 1|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = $21&255;
       $23 = ($21<<24>>24)==(32);
       $24 = (($22) + -9)|0;
       $25 = ($24>>>0)<(5);
       $$demorgan1 = $23 | $25;
       if ($$demorgan1) {
        $p$1$i$i = $20;
       } else {
        break;
       }
      }
      HEAP32[$14>>2] = 0;
      $26 = HEAP32[$9>>2]|0;
      $27 = HEAP32[$6>>2]|0;
      $28 = (($26) - ($27))|0;
      HEAP32[$8>>2] = $28;
      HEAP32[$7>>2] = $26;
      $29 = $27;
      $30 = $26;
      $32 = $29;$33 = $30;
      L9: while(1) {
       $31 = ($32>>>0)<($33>>>0);
       if ($31) {
        $34 = ((($32)) + 1|0);
        HEAP32[$6>>2] = $34;
        $35 = HEAP8[$32>>0]|0;
        $36 = $35&255;
        $38 = $36;
       } else {
        $37 = (___shgetc($f$i)|0);
        $38 = $37;
       }
       switch ($38|0) {
       case 9: case 10: case 11: case 12: case 13: case 32:  {
        break;
       }
       default: {
        break L9;
       }
       }
       $$pre94 = HEAP32[$6>>2]|0;
       $$pre95 = HEAP32[$7>>2]|0;
       $32 = $$pre94;$33 = $$pre95;
      }
      $39 = HEAP32[$7>>2]|0;
      $40 = ($39|0)==(0|0);
      if ($40) {
       $$pre$i$i = HEAP32[$6>>2]|0;
       $48 = $$pre$i$i;
      } else {
       $41 = HEAP32[$6>>2]|0;
       $42 = ((($41)) + -1|0);
       HEAP32[$6>>2] = $42;
       $43 = $42;
       $48 = $43;
      }
      $44 = HEAP32[$8>>2]|0;
      $45 = HEAP32[$9>>2]|0;
      $46 = (($44) + ($pos$0111$i$i))|0;
      $47 = (($46) + ($48))|0;
      $49 = (($47) - ($45))|0;
      $matches$1$i$i = $matches$0107$i$i;$p$11$i$i = $p$1$i$i;$pos$2$i$i = $49;$s$6$i$i = $s$0105$i$i;$wcs$7$i$i = $wcs$0106$i$i;
     } else {
      $50 = ($16<<24>>24)==(37);
      L22: do {
       if ($50) {
        $51 = ((($p$0110$i$i)) + 1|0);
        $52 = HEAP8[$51>>0]|0;
        L24: do {
         switch ($52<<24>>24) {
         case 37:  {
          break L22;
          break;
         }
         case 42:  {
          $75 = ((($p$0110$i$i)) + 2|0);
          $dest$0$i$i = 0;$p$2$i$i = $75;
          break;
         }
         default: {
          $76 = $52&255;
          $isdigittmp$i$i = (($76) + -48)|0;
          $isdigit$i$i = ($isdigittmp$i$i>>>0)<(10);
          if ($isdigit$i$i) {
           $77 = ((($p$0110$i$i)) + 2|0);
           $78 = HEAP8[$77>>0]|0;
           $79 = ($78<<24>>24)==(36);
           if ($79) {
            $vacopy_currentptr = HEAP32[$ap>>2]|0;
            HEAP32[$ap2$i$i$i>>2] = $vacopy_currentptr;
            $i$0$i$i$i = $isdigittmp$i$i;
            while(1) {
             $80 = ($i$0$i$i$i>>>0)>(1);
             $arglist_current = HEAP32[$ap2$i$i$i>>2]|0;
             $81 = $arglist_current;
             $82 = ((0) + 4|0);
             $expanded3 = $82;
             $expanded = (($expanded3) - 1)|0;
             $83 = (($81) + ($expanded))|0;
             $84 = ((0) + 4|0);
             $expanded7 = $84;
             $expanded6 = (($expanded7) - 1)|0;
             $expanded5 = $expanded6 ^ -1;
             $85 = $83 & $expanded5;
             $86 = $85;
             $87 = HEAP32[$86>>2]|0;
             $arglist_next = ((($86)) + 4|0);
             HEAP32[$ap2$i$i$i>>2] = $arglist_next;
             $88 = (($i$0$i$i$i) + -1)|0;
             if ($80) {
              $i$0$i$i$i = $88;
             } else {
              break;
             }
            }
            $89 = ((($p$0110$i$i)) + 3|0);
            $dest$0$i$i = $87;$p$2$i$i = $89;
            break L24;
           }
          }
          $arglist_current2 = HEAP32[$ap>>2]|0;
          $90 = $arglist_current2;
          $91 = ((0) + 4|0);
          $expanded10 = $91;
          $expanded9 = (($expanded10) - 1)|0;
          $92 = (($90) + ($expanded9))|0;
          $93 = ((0) + 4|0);
          $expanded14 = $93;
          $expanded13 = (($expanded14) - 1)|0;
          $expanded12 = $expanded13 ^ -1;
          $94 = $92 & $expanded12;
          $95 = $94;
          $96 = HEAP32[$95>>2]|0;
          $arglist_next3 = ((($95)) + 4|0);
          HEAP32[$ap>>2] = $arglist_next3;
          $dest$0$i$i = $96;$p$2$i$i = $51;
         }
         }
        } while(0);
        $97 = HEAP8[$p$2$i$i>>0]|0;
        $98 = $97&255;
        $isdigittmp796$i$i = (($98) + -48)|0;
        $isdigit897$i$i = ($isdigittmp796$i$i>>>0)<(10);
        if ($isdigit897$i$i) {
         $102 = $98;$p$398$i$i = $p$2$i$i;$width$099$i$i = 0;
         while(1) {
          $99 = ($width$099$i$i*10)|0;
          $100 = (($99) + -48)|0;
          $101 = (($100) + ($102))|0;
          $103 = ((($p$398$i$i)) + 1|0);
          $104 = HEAP8[$103>>0]|0;
          $105 = $104&255;
          $isdigittmp7$i$i = (($105) + -48)|0;
          $isdigit8$i$i = ($isdigittmp7$i$i>>>0)<(10);
          if ($isdigit8$i$i) {
           $102 = $105;$p$398$i$i = $103;$width$099$i$i = $101;
          } else {
           $$lcssa40$i$i = $104;$p$3$lcssa$i$i = $103;$width$0$lcssa$i$i = $101;
           break;
          }
         }
        } else {
         $$lcssa40$i$i = $97;$p$3$lcssa$i$i = $p$2$i$i;$width$0$lcssa$i$i = 0;
        }
        $106 = ($$lcssa40$i$i<<24>>24)==(109);
        if ($106) {
         $107 = ($dest$0$i$i|0)!=(0|0);
         $108 = $107&1;
         $109 = ((($p$3$lcssa$i$i)) + 1|0);
         $$pre173$i$i = HEAP8[$109>>0]|0;
         $112 = $$pre173$i$i;$alloc$0$i$i = $108;$p$4$i$i = $109;$s$1$i$i = 0;$wcs$1$i$i = 0;
        } else {
         $112 = $$lcssa40$i$i;$alloc$0$i$i = 0;$p$4$i$i = $p$3$lcssa$i$i;$s$1$i$i = $s$0105$i$i;$wcs$1$i$i = $wcs$0106$i$i;
        }
        $110 = ((($p$4$i$i)) + 1|0);
        $111 = $112&255;
        switch ($111|0) {
        case 104:  {
         $113 = HEAP8[$110>>0]|0;
         $114 = ($113<<24>>24)==(104);
         $115 = ((($p$4$i$i)) + 2|0);
         $$11$i$i = $114 ? $115 : $110;
         $$12$i$i = $114 ? -2 : -1;
         $p$5$i$i = $$11$i$i;$size$0$i$i = $$12$i$i;
         break;
        }
        case 108:  {
         $116 = HEAP8[$110>>0]|0;
         $117 = ($116<<24>>24)==(108);
         $118 = ((($p$4$i$i)) + 2|0);
         $$13$i$i = $117 ? $118 : $110;
         $$14$i$i = $117 ? 3 : 1;
         $p$5$i$i = $$13$i$i;$size$0$i$i = $$14$i$i;
         break;
        }
        case 106:  {
         $p$5$i$i = $110;$size$0$i$i = 3;
         break;
        }
        case 116: case 122:  {
         $p$5$i$i = $110;$size$0$i$i = 1;
         break;
        }
        case 76:  {
         $p$5$i$i = $110;$size$0$i$i = 2;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $p$5$i$i = $p$4$i$i;$size$0$i$i = 0;
         break;
        }
        default: {
         $s$7$i$i = $s$1$i$i;$wcs$8$i$i = $wcs$1$i$i;
         label = 164;
         break L3;
        }
        }
        $119 = HEAP8[$p$5$i$i>>0]|0;
        $120 = $119&255;
        $121 = $120 & 47;
        $122 = ($121|0)==(3);
        $123 = $120 | 32;
        $$$i$i = $122 ? $123 : $120;
        $$size$0$i$i = $122 ? 1 : $size$0$i$i;
        switch ($$$i$i|0) {
        case 99:  {
         $124 = ($width$0$lcssa$i$i|0)<(1);
         $$width$0$i$i = $124 ? 1 : $width$0$lcssa$i$i;
         $pos$1$i$i = $pos$0111$i$i;$width$1$i$i = $$width$0$i$i;
         break;
        }
        case 91:  {
         $pos$1$i$i = $pos$0111$i$i;$width$1$i$i = $width$0$lcssa$i$i;
         break;
        }
        case 110:  {
         $125 = ($pos$0111$i$i|0)<(0);
         $126 = $125 << 31 >> 31;
         $127 = ($dest$0$i$i|0)==(0|0);
         if ($127) {
          $matches$1$i$i = $matches$0107$i$i;$p$11$i$i = $p$5$i$i;$pos$2$i$i = $pos$0111$i$i;$s$6$i$i = $s$1$i$i;$wcs$7$i$i = $wcs$1$i$i;
          break L5;
         }
         switch ($$size$0$i$i|0) {
         case -2:  {
          $128 = $pos$0111$i$i&255;
          HEAP8[$dest$0$i$i>>0] = $128;
          $matches$1$i$i = $matches$0107$i$i;$p$11$i$i = $p$5$i$i;$pos$2$i$i = $pos$0111$i$i;$s$6$i$i = $s$1$i$i;$wcs$7$i$i = $wcs$1$i$i;
          break L5;
          break;
         }
         case -1:  {
          $129 = $pos$0111$i$i&65535;
          HEAP16[$dest$0$i$i>>1] = $129;
          $matches$1$i$i = $matches$0107$i$i;$p$11$i$i = $p$5$i$i;$pos$2$i$i = $pos$0111$i$i;$s$6$i$i = $s$1$i$i;$wcs$7$i$i = $wcs$1$i$i;
          break L5;
          break;
         }
         case 0:  {
          HEAP32[$dest$0$i$i>>2] = $pos$0111$i$i;
          $matches$1$i$i = $matches$0107$i$i;$p$11$i$i = $p$5$i$i;$pos$2$i$i = $pos$0111$i$i;$s$6$i$i = $s$1$i$i;$wcs$7$i$i = $wcs$1$i$i;
          break L5;
          break;
         }
         case 1:  {
          HEAP32[$dest$0$i$i>>2] = $pos$0111$i$i;
          $matches$1$i$i = $matches$0107$i$i;$p$11$i$i = $p$5$i$i;$pos$2$i$i = $pos$0111$i$i;$s$6$i$i = $s$1$i$i;$wcs$7$i$i = $wcs$1$i$i;
          break L5;
          break;
         }
         case 3:  {
          $130 = $dest$0$i$i;
          $131 = $130;
          HEAP32[$131>>2] = $pos$0111$i$i;
          $132 = (($130) + 4)|0;
          $133 = $132;
          HEAP32[$133>>2] = $126;
          $matches$1$i$i = $matches$0107$i$i;$p$11$i$i = $p$5$i$i;$pos$2$i$i = $pos$0111$i$i;$s$6$i$i = $s$1$i$i;$wcs$7$i$i = $wcs$1$i$i;
          break L5;
          break;
         }
         default: {
          $matches$1$i$i = $matches$0107$i$i;$p$11$i$i = $p$5$i$i;$pos$2$i$i = $pos$0111$i$i;$s$6$i$i = $s$1$i$i;$wcs$7$i$i = $wcs$1$i$i;
          break L5;
         }
         }
         break;
        }
        default: {
         HEAP32[$14>>2] = 0;
         $134 = HEAP32[$9>>2]|0;
         $135 = HEAP32[$6>>2]|0;
         $136 = (($134) - ($135))|0;
         HEAP32[$8>>2] = $136;
         HEAP32[$7>>2] = $134;
         $137 = $135;
         $138 = $134;
         $140 = $137;$141 = $138;
         L51: while(1) {
          $139 = ($140>>>0)<($141>>>0);
          if ($139) {
           $142 = ((($140)) + 1|0);
           HEAP32[$6>>2] = $142;
           $143 = HEAP8[$140>>0]|0;
           $144 = $143&255;
           $146 = $144;
          } else {
           $145 = (___shgetc($f$i)|0);
           $146 = $145;
          }
          switch ($146|0) {
          case 9: case 10: case 11: case 12: case 13: case 32:  {
           break;
          }
          default: {
           break L51;
          }
          }
          $$pre = HEAP32[$6>>2]|0;
          $$pre92 = HEAP32[$7>>2]|0;
          $140 = $$pre;$141 = $$pre92;
         }
         $147 = HEAP32[$7>>2]|0;
         $148 = ($147|0)==(0|0);
         if ($148) {
          $$pre175$i$i = HEAP32[$6>>2]|0;
          $156 = $$pre175$i$i;
         } else {
          $149 = HEAP32[$6>>2]|0;
          $150 = ((($149)) + -1|0);
          HEAP32[$6>>2] = $150;
          $151 = $150;
          $156 = $151;
         }
         $152 = HEAP32[$8>>2]|0;
         $153 = HEAP32[$9>>2]|0;
         $154 = (($152) + ($pos$0111$i$i))|0;
         $155 = (($154) + ($156))|0;
         $157 = (($155) - ($153))|0;
         $pos$1$i$i = $157;$width$1$i$i = $width$0$lcssa$i$i;
        }
        }
        HEAP32[$14>>2] = $width$1$i$i;
        $158 = HEAP32[$9>>2]|0;
        $159 = HEAP32[$6>>2]|0;
        $160 = (($158) - ($159))|0;
        HEAP32[$8>>2] = $160;
        $161 = ($width$1$i$i|0)!=(0);
        $162 = ($160|0)>($width$1$i$i|0);
        $or$cond$i$i$i = $161 & $162;
        $163 = $159;
        if ($or$cond$i$i$i) {
         $164 = (($163) + ($width$1$i$i)|0);
         HEAP32[$7>>2] = $164;
         $167 = $164;
        } else {
         HEAP32[$7>>2] = $158;
         $165 = $158;
         $167 = $165;
        }
        $166 = ($163>>>0)<($167>>>0);
        if ($166) {
         $168 = ((($163)) + 1|0);
         HEAP32[$6>>2] = $168;
         $172 = $167;
        } else {
         $169 = (___shgetc($f$i)|0);
         $170 = ($169|0)<(0);
         if ($170) {
          $s$7$i$i = $s$1$i$i;$wcs$8$i$i = $wcs$1$i$i;
          label = 164;
          break L3;
         }
         $$pre177$i$i = HEAP32[$7>>2]|0;
         $172 = $$pre177$i$i;
        }
        $171 = ($172|0)==(0|0);
        if (!($171)) {
         $173 = HEAP32[$6>>2]|0;
         $174 = ((($173)) + -1|0);
         HEAP32[$6>>2] = $174;
        }
        L85: do {
         switch ($$$i$i|0) {
         case 91: case 99: case 115:  {
          $175 = ($$$i$i|0)==(99);
          $176 = $$$i$i | 16;
          $177 = ($176|0)==(115);
          L87: do {
           if ($177) {
            $178 = ($$$i$i|0)==(115);
            _memset(($scanset$i$i|0),-1,257)|0;
            HEAP8[$scanset$i$i>>0] = 0;
            if ($178) {
             HEAP8[$11>>0] = 0;
             ;HEAP8[$10>>0]=0|0;HEAP8[$10+1>>0]=0|0;HEAP8[$10+2>>0]=0|0;HEAP8[$10+3>>0]=0|0;HEAP8[$10+4>>0]=0|0;
             $p$9$i$i = $p$5$i$i;
            } else {
             $p$9$i$i = $p$5$i$i;
            }
           } else {
            $179 = ((($p$5$i$i)) + 1|0);
            $180 = HEAP8[$179>>0]|0;
            $181 = ($180<<24>>24)==(94);
            $182 = ((($p$5$i$i)) + 2|0);
            $invert$0$i$i = $181&1;
            $p$6$i$i = $181 ? $182 : $179;
            $183 = $181&1;
            _memset(($scanset$i$i|0),($183|0),257)|0;
            HEAP8[$scanset$i$i>>0] = 0;
            $184 = HEAP8[$p$6$i$i>>0]|0;
            switch ($184<<24>>24) {
            case 45:  {
             $185 = ((($p$6$i$i)) + 1|0);
             $186 = $invert$0$i$i ^ 1;
             $187 = $186&255;
             HEAP8[$12>>0] = $187;
             $$pre$phi184$i$iZ2D = $187;$p$7$ph$i$i = $185;
             break;
            }
            case 93:  {
             $188 = ((($p$6$i$i)) + 1|0);
             $189 = $invert$0$i$i ^ 1;
             $190 = $189&255;
             HEAP8[$13>>0] = $190;
             $$pre$phi184$i$iZ2D = $190;$p$7$ph$i$i = $188;
             break;
            }
            default: {
             $$pre182$i$i = $invert$0$i$i ^ 1;
             $$pre183$i$i = $$pre182$i$i&255;
             $$pre$phi184$i$iZ2D = $$pre183$i$i;$p$7$ph$i$i = $p$6$i$i;
            }
            }
            $p$7$i$i = $p$7$ph$i$i;
            while(1) {
             $191 = HEAP8[$p$7$i$i>>0]|0;
             L98: do {
              switch ($191<<24>>24) {
              case 0:  {
               $s$7$i$i = $s$1$i$i;$wcs$8$i$i = $wcs$1$i$i;
               label = 164;
               break L3;
               break;
              }
              case 93:  {
               $p$9$i$i = $p$7$i$i;
               break L87;
               break;
              }
              case 45:  {
               $192 = ((($p$7$i$i)) + 1|0);
               $193 = HEAP8[$192>>0]|0;
               switch ($193<<24>>24) {
               case 93: case 0:  {
                $202 = 45;$p$8$i$i = $p$7$i$i;
                break L98;
                break;
               }
               default: {
               }
               }
               $194 = ((($p$7$i$i)) + -1|0);
               $195 = HEAP8[$194>>0]|0;
               $196 = ($195&255)<($193&255);
               if ($196) {
                $197 = $195&255;
                $198 = $193&255;
                $c$0102$i$i = $197;
                while(1) {
                 $199 = (($c$0102$i$i) + 1)|0;
                 $200 = (($scanset$i$i) + ($199)|0);
                 HEAP8[$200>>0] = $$pre$phi184$i$iZ2D;
                 $exitcond = ($199|0)==($198|0);
                 if ($exitcond) {
                  $202 = $193;$p$8$i$i = $192;
                  break;
                 } else {
                  $c$0102$i$i = $199;
                 }
                }
               } else {
                $202 = $193;$p$8$i$i = $192;
               }
               break;
              }
              default: {
               $202 = $191;$p$8$i$i = $p$7$i$i;
              }
              }
             } while(0);
             $201 = $202&255;
             $203 = (($201) + 1)|0;
             $204 = (($scanset$i$i) + ($203)|0);
             HEAP8[$204>>0] = $$pre$phi184$i$iZ2D;
             $205 = ((($p$8$i$i)) + 1|0);
             $p$7$i$i = $205;
            }
           }
          } while(0);
          $206 = (($width$1$i$i) + 1)|0;
          $207 = $175 ? $206 : 31;
          $208 = ($$size$0$i$i|0)==(1);
          $209 = ($alloc$0$i$i|0)!=(0);
          L106: do {
           if ($208) {
            if ($209) {
             $210 = $207 << 2;
             $211 = (_malloc($210)|0);
             $212 = ($211|0)==(0|0);
             if ($212) {
              $s$7$i$i = 0;$wcs$8$i$i = $211;
              label = 164;
              break L3;
             } else {
              $i$0$ph$i$i = 0;$k$0$ph$i$i = $207;$wcs$3$ph$i$i = $211;
             }
            } else {
             $i$0$ph$i$i = 0;$k$0$ph$i$i = $207;$wcs$3$ph$i$i = $dest$0$i$i;
            }
            L111: while(1) {
             $213 = ($wcs$3$ph$i$i|0)==(0|0);
             $i$0$ph22$i$i = $i$0$ph$i$i;
             while(1) {
              $st$i$i$sroa$0$2 = 0;
              while(1) {
               $214 = HEAP32[$6>>2]|0;
               $215 = HEAP32[$7>>2]|0;
               $216 = ($214>>>0)<($215>>>0);
               if ($216) {
                $217 = ((($214)) + 1|0);
                HEAP32[$6>>2] = $217;
                $218 = HEAP8[$214>>0]|0;
                $219 = $218&255;
                $222 = $219;
               } else {
                $220 = (___shgetc($f$i)|0);
                $222 = $220;
               }
               $221 = (($222) + 1)|0;
               $223 = (($scanset$i$i) + ($221)|0);
               $224 = HEAP8[$223>>0]|0;
               $225 = ($224<<24>>24)==(0);
               if ($225) {
                break L111;
               }
               $226 = $222&255;
               $227 = ($st$i$i$sroa$0$2|0)==(0);
               if (!($227)) {
                $234 = $222 >>> 3;
                $235 = $234 & 31;
                $236 = (($235) + -16)|0;
                $237 = $st$i$i$sroa$0$2 >> 26;
                $238 = (($235) + ($237))|0;
                $239 = $236 | $238;
                $240 = ($239>>>0)>(7);
                if ($240) {
                 label = 101;
                 break L3;
                }
                $241 = $st$i$i$sroa$0$2 << 6;
                $242 = $222 & 255;
                $243 = (($242) + -128)|0;
                $244 = $243 | $241;
                $245 = ($244|0)<(0);
                if ($245) {
                 $st$i$i$sroa$0$2 = $244;
                 continue;
                } else {
                 $wc$i$i$0175 = $244;
                 break;
                }
               }
               $228 = $222 & 255;
               $229 = ($226<<24>>24)>(-1);
               if ($229) {
                $wc$i$i$0175 = $228;
                break;
               }
               $230 = (($228) + -194)|0;
               $231 = ($230>>>0)>(50);
               if ($231) {
                label = 101;
                break L3;
               }
               $232 = (9568 + ($230<<2)|0);
               $233 = HEAP32[$232>>2]|0;
               $st$i$i$sroa$0$2 = $233;
              }
              if ($213) {
               $i$1$i$i = $i$0$ph22$i$i;
              } else {
               $251 = (($i$0$ph22$i$i) + 1)|0;
               $252 = (($wcs$3$ph$i$i) + ($i$0$ph22$i$i<<2)|0);
               HEAP32[$252>>2] = $wc$i$i$0175;
               $i$1$i$i = $251;
              }
              $253 = ($i$1$i$i|0)==($k$0$ph$i$i|0);
              $or$cond$i$i = $209 & $253;
              if ($or$cond$i$i) {
               break;
              } else {
               $i$0$ph22$i$i = $i$1$i$i;
              }
             }
             $factor$i$i = $k$0$ph$i$i << 1;
             $254 = $factor$i$i | 1;
             $255 = $254 << 2;
             $256 = (_realloc($wcs$3$ph$i$i,$255)|0);
             $257 = ($256|0)==(0|0);
             if ($257) {
              $s$7$i$i = 0;$wcs$8$i$i = $wcs$3$ph$i$i;
              label = 164;
              break L3;
             } else {
              $i$0$ph$i$i$phi = $k$0$ph$i$i;$k$0$ph$i$i = $254;$wcs$3$ph$i$i = $256;$i$0$ph$i$i = $i$0$ph$i$i$phi;
             }
            }
            $258 = ($st$i$i$sroa$0$2|0)==(0);
            if ($258) {
             $i$4$i$i = $i$0$ph22$i$i;$s$4$i$i = 0;$wcs$5$i$i = $wcs$3$ph$i$i;
            } else {
             $s$7$i$i = 0;$wcs$8$i$i = $wcs$3$ph$i$i;
             label = 164;
             break L3;
            }
           } else {
            if ($209) {
             $259 = (_malloc($207)|0);
             $260 = ($259|0)==(0|0);
             if ($260) {
              $s$7$i$i = 0;$wcs$8$i$i = 0;
              label = 164;
              break L3;
             } else {
              $i$2$ph$i$i = 0;$k$1$ph$i$i = $207;$s$2$ph$i$i = $259;
             }
             while(1) {
              $i$2$i$i = $i$2$ph$i$i;
              while(1) {
               $261 = HEAP32[$6>>2]|0;
               $262 = HEAP32[$7>>2]|0;
               $263 = ($261>>>0)<($262>>>0);
               if ($263) {
                $264 = ((($261)) + 1|0);
                HEAP32[$6>>2] = $264;
                $265 = HEAP8[$261>>0]|0;
                $266 = $265&255;
                $269 = $266;
               } else {
                $267 = (___shgetc($f$i)|0);
                $269 = $267;
               }
               $268 = (($269) + 1)|0;
               $270 = (($scanset$i$i) + ($268)|0);
               $271 = HEAP8[$270>>0]|0;
               $272 = ($271<<24>>24)==(0);
               if ($272) {
                $i$4$i$i = $i$2$i$i;$s$4$i$i = $s$2$ph$i$i;$wcs$5$i$i = 0;
                break L106;
               }
               $273 = $269&255;
               $274 = (($i$2$i$i) + 1)|0;
               $275 = (($s$2$ph$i$i) + ($i$2$i$i)|0);
               HEAP8[$275>>0] = $273;
               $276 = ($274|0)==($k$1$ph$i$i|0);
               if ($276) {
                break;
               } else {
                $i$2$i$i = $274;
               }
              }
              $factor18$i$i = $k$1$ph$i$i << 1;
              $277 = $factor18$i$i | 1;
              $278 = (_realloc($s$2$ph$i$i,$277)|0);
              $279 = ($278|0)==(0|0);
              if ($279) {
               $s$7$i$i = $s$2$ph$i$i;$wcs$8$i$i = 0;
               label = 164;
               break L3;
              } else {
               $i$2$ph$i$i$phi = $k$1$ph$i$i;$k$1$ph$i$i = $277;$s$2$ph$i$i = $278;$i$2$ph$i$i = $i$2$ph$i$i$phi;
              }
             }
            }
            $280 = ($dest$0$i$i|0)==(0|0);
            if ($280) {
             $298 = $172;
             while(1) {
              $296 = HEAP32[$6>>2]|0;
              $297 = ($296>>>0)<($298>>>0);
              if ($297) {
               $299 = ((($296)) + 1|0);
               HEAP32[$6>>2] = $299;
               $300 = HEAP8[$296>>0]|0;
               $301 = $300&255;
               $304 = $301;
              } else {
               $302 = (___shgetc($f$i)|0);
               $304 = $302;
              }
              $303 = (($304) + 1)|0;
              $305 = (($scanset$i$i) + ($303)|0);
              $306 = HEAP8[$305>>0]|0;
              $307 = ($306<<24>>24)==(0);
              if ($307) {
               $i$4$i$i = 0;$s$4$i$i = 0;$wcs$5$i$i = 0;
               break L106;
              }
              $$pre180$i$i = HEAP32[$7>>2]|0;
              $298 = $$pre180$i$i;
             }
            } else {
             $283 = $172;$i$3$i$i = 0;
             while(1) {
              $281 = HEAP32[$6>>2]|0;
              $282 = ($281>>>0)<($283>>>0);
              if ($282) {
               $284 = ((($281)) + 1|0);
               HEAP32[$6>>2] = $284;
               $285 = HEAP8[$281>>0]|0;
               $286 = $285&255;
               $289 = $286;
              } else {
               $287 = (___shgetc($f$i)|0);
               $289 = $287;
              }
              $288 = (($289) + 1)|0;
              $290 = (($scanset$i$i) + ($288)|0);
              $291 = HEAP8[$290>>0]|0;
              $292 = ($291<<24>>24)==(0);
              if ($292) {
               $i$4$i$i = $i$3$i$i;$s$4$i$i = $dest$0$i$i;$wcs$5$i$i = 0;
               break L106;
              }
              $293 = $289&255;
              $294 = (($i$3$i$i) + 1)|0;
              $295 = (($dest$0$i$i) + ($i$3$i$i)|0);
              HEAP8[$295>>0] = $293;
              $$pre179$i$i = HEAP32[$7>>2]|0;
              $283 = $$pre179$i$i;$i$3$i$i = $294;
             }
            }
           }
          } while(0);
          $308 = HEAP32[$7>>2]|0;
          $309 = ($308|0)==(0|0);
          if ($309) {
           $$pre181$i$i = HEAP32[$6>>2]|0;
           $316 = $$pre181$i$i;
          } else {
           $310 = HEAP32[$6>>2]|0;
           $311 = ((($310)) + -1|0);
           HEAP32[$6>>2] = $311;
           $312 = $311;
           $316 = $312;
          }
          $313 = HEAP32[$8>>2]|0;
          $314 = HEAP32[$9>>2]|0;
          $315 = (($316) - ($314))|0;
          $317 = (($315) + ($313))|0;
          $318 = ($317|0)==(0);
          if ($318) {
           $alloc$2$i$i = $alloc$0$i$i;$matches$2$i$i = $matches$0107$i$i;$s$9$i$i = $s$4$i$i;$wcs$10$i$i = $wcs$5$i$i;
           break L3;
          }
          $$not$i$i = $175 ^ 1;
          $319 = ($317|0)==($width$1$i$i|0);
          $or$cond10$i$i = $319 | $$not$i$i;
          if (!($or$cond10$i$i)) {
           $alloc$2$i$i = $alloc$0$i$i;$matches$2$i$i = $matches$0107$i$i;$s$9$i$i = $s$4$i$i;$wcs$10$i$i = $wcs$5$i$i;
           break L3;
          }
          do {
           if ($209) {
            if ($208) {
             HEAP32[$dest$0$i$i>>2] = $wcs$5$i$i;
             break;
            } else {
             HEAP32[$dest$0$i$i>>2] = $s$4$i$i;
             break;
            }
           }
          } while(0);
          if ($175) {
           $p$10$i$i = $p$9$i$i;$s$5$i$i = $s$4$i$i;$wcs$6$i$i = $wcs$5$i$i;
          } else {
           $320 = ($wcs$5$i$i|0)==(0|0);
           if (!($320)) {
            $321 = (($wcs$5$i$i) + ($i$4$i$i<<2)|0);
            HEAP32[$321>>2] = 0;
           }
           $322 = ($s$4$i$i|0)==(0|0);
           if ($322) {
            $p$10$i$i = $p$9$i$i;$s$5$i$i = 0;$wcs$6$i$i = $wcs$5$i$i;
            break L85;
           }
           $323 = (($s$4$i$i) + ($i$4$i$i)|0);
           HEAP8[$323>>0] = 0;
           $p$10$i$i = $p$9$i$i;$s$5$i$i = $s$4$i$i;$wcs$6$i$i = $wcs$5$i$i;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $base$0$i$i = 16;
          label = 146;
          break;
         }
         case 111:  {
          $base$0$i$i = 8;
          label = 146;
          break;
         }
         case 117: case 100:  {
          $base$0$i$i = 10;
          label = 146;
          break;
         }
         case 105:  {
          $base$0$i$i = 0;
          label = 146;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $341 = (+___floatscan($f$i,$$size$0$i$i,0));
          $342 = HEAP32[$8>>2]|0;
          $343 = HEAP32[$6>>2]|0;
          $344 = HEAP32[$9>>2]|0;
          $345 = (($344) - ($343))|0;
          $346 = ($342|0)==($345|0);
          if ($346) {
           $alloc$2$i$i = $alloc$0$i$i;$matches$2$i$i = $matches$0107$i$i;$s$9$i$i = $s$1$i$i;$wcs$10$i$i = $wcs$1$i$i;
           break L3;
          }
          $347 = ($dest$0$i$i|0)==(0|0);
          if ($347) {
           $p$10$i$i = $p$5$i$i;$s$5$i$i = $s$1$i$i;$wcs$6$i$i = $wcs$1$i$i;
          } else {
           switch ($$size$0$i$i|0) {
           case 0:  {
            $348 = $341;
            HEAPF32[$dest$0$i$i>>2] = $348;
            $p$10$i$i = $p$5$i$i;$s$5$i$i = $s$1$i$i;$wcs$6$i$i = $wcs$1$i$i;
            break L85;
            break;
           }
           case 1:  {
            HEAPF64[$dest$0$i$i>>3] = $341;
            $p$10$i$i = $p$5$i$i;$s$5$i$i = $s$1$i$i;$wcs$6$i$i = $wcs$1$i$i;
            break L85;
            break;
           }
           case 2:  {
            HEAPF64[$dest$0$i$i>>3] = $341;
            $p$10$i$i = $p$5$i$i;$s$5$i$i = $s$1$i$i;$wcs$6$i$i = $wcs$1$i$i;
            break L85;
            break;
           }
           default: {
            $p$10$i$i = $p$5$i$i;$s$5$i$i = $s$1$i$i;$wcs$6$i$i = $wcs$1$i$i;
            break L85;
           }
           }
          }
          break;
         }
         default: {
          $p$10$i$i = $p$5$i$i;$s$5$i$i = $s$1$i$i;$wcs$6$i$i = $wcs$1$i$i;
         }
         }
        } while(0);
        L191: do {
         if ((label|0) == 146) {
          label = 0;
          $324 = (___intscan($f$i,$base$0$i$i,0,-1,-1)|0);
          $325 = tempRet0;
          $326 = HEAP32[$8>>2]|0;
          $327 = HEAP32[$6>>2]|0;
          $328 = HEAP32[$9>>2]|0;
          $329 = (($328) - ($327))|0;
          $330 = ($326|0)==($329|0);
          if ($330) {
           $alloc$2$i$i = $alloc$0$i$i;$matches$2$i$i = $matches$0107$i$i;$s$9$i$i = $s$1$i$i;$wcs$10$i$i = $wcs$1$i$i;
           break L3;
          }
          $331 = ($$$i$i|0)==(112);
          $332 = ($dest$0$i$i|0)!=(0|0);
          $or$cond3$i$i = $332 & $331;
          if ($or$cond3$i$i) {
           $333 = $324;
           HEAP32[$dest$0$i$i>>2] = $333;
           $p$10$i$i = $p$5$i$i;$s$5$i$i = $s$1$i$i;$wcs$6$i$i = $wcs$1$i$i;
           break;
          }
          $334 = ($dest$0$i$i|0)==(0|0);
          if ($334) {
           $p$10$i$i = $p$5$i$i;$s$5$i$i = $s$1$i$i;$wcs$6$i$i = $wcs$1$i$i;
          } else {
           switch ($$size$0$i$i|0) {
           case -2:  {
            $335 = $324&255;
            HEAP8[$dest$0$i$i>>0] = $335;
            $p$10$i$i = $p$5$i$i;$s$5$i$i = $s$1$i$i;$wcs$6$i$i = $wcs$1$i$i;
            break L191;
            break;
           }
           case -1:  {
            $336 = $324&65535;
            HEAP16[$dest$0$i$i>>1] = $336;
            $p$10$i$i = $p$5$i$i;$s$5$i$i = $s$1$i$i;$wcs$6$i$i = $wcs$1$i$i;
            break L191;
            break;
           }
           case 0:  {
            HEAP32[$dest$0$i$i>>2] = $324;
            $p$10$i$i = $p$5$i$i;$s$5$i$i = $s$1$i$i;$wcs$6$i$i = $wcs$1$i$i;
            break L191;
            break;
           }
           case 1:  {
            HEAP32[$dest$0$i$i>>2] = $324;
            $p$10$i$i = $p$5$i$i;$s$5$i$i = $s$1$i$i;$wcs$6$i$i = $wcs$1$i$i;
            break L191;
            break;
           }
           case 3:  {
            $337 = $dest$0$i$i;
            $338 = $337;
            HEAP32[$338>>2] = $324;
            $339 = (($337) + 4)|0;
            $340 = $339;
            HEAP32[$340>>2] = $325;
            $p$10$i$i = $p$5$i$i;$s$5$i$i = $s$1$i$i;$wcs$6$i$i = $wcs$1$i$i;
            break L191;
            break;
           }
           default: {
            $p$10$i$i = $p$5$i$i;$s$5$i$i = $s$1$i$i;$wcs$6$i$i = $wcs$1$i$i;
            break L191;
           }
           }
          }
         }
        } while(0);
        $349 = HEAP32[$8>>2]|0;
        $350 = HEAP32[$6>>2]|0;
        $351 = HEAP32[$9>>2]|0;
        $352 = (($349) + ($pos$1$i$i))|0;
        $353 = (($352) + ($350))|0;
        $354 = (($353) - ($351))|0;
        $not$$i$i = ($dest$0$i$i|0)!=(0|0);
        $355 = $not$$i$i&1;
        $matches$0$$i$i = (($355) + ($matches$0107$i$i))|0;
        $matches$1$i$i = $matches$0$$i$i;$p$11$i$i = $p$10$i$i;$pos$2$i$i = $354;$s$6$i$i = $s$5$i$i;$wcs$7$i$i = $wcs$6$i$i;
        break L5;
       }
      } while(0);
      $53 = $50&1;
      $54 = (($p$0110$i$i) + ($53)|0);
      HEAP32[$14>>2] = 0;
      $55 = HEAP32[$9>>2]|0;
      $56 = HEAP32[$6>>2]|0;
      $57 = (($55) - ($56))|0;
      HEAP32[$8>>2] = $57;
      HEAP32[$7>>2] = $55;
      $58 = $56;
      $$cast = $55;
      $59 = ($58>>>0)<($$cast>>>0);
      if ($59) {
       $60 = ((($58)) + 1|0);
       HEAP32[$6>>2] = $60;
       $61 = HEAP8[$58>>0]|0;
       $62 = $61&255;
       $67 = $62;
      } else {
       $63 = (___shgetc($f$i)|0);
       $67 = $63;
      }
      $64 = HEAP8[$54>>0]|0;
      $65 = $64&255;
      $66 = ($67|0)==($65|0);
      if (!($66)) {
       label = 21;
       break L3;
      }
      $74 = (($pos$0111$i$i) + 1)|0;
      $matches$1$i$i = $matches$0107$i$i;$p$11$i$i = $54;$pos$2$i$i = $74;$s$6$i$i = $s$0105$i$i;$wcs$7$i$i = $wcs$0106$i$i;
     }
    } while(0);
    $356 = ((($p$11$i$i)) + 1|0);
    $357 = HEAP8[$356>>0]|0;
    $358 = ($357<<24>>24)==(0);
    if ($358) {
     $matches$3$i$i = $matches$1$i$i;
     break L1;
    } else {
     $16 = $357;$matches$0107$i$i = $matches$1$i$i;$p$0110$i$i = $356;$pos$0111$i$i = $pos$2$i$i;$s$0105$i$i = $s$6$i$i;$wcs$0106$i$i = $wcs$7$i$i;
    }
   }
   if ((label|0) == 21) {
    $68 = HEAP32[$7>>2]|0;
    $69 = ($68|0)==(0|0);
    if (!($69)) {
     $70 = HEAP32[$6>>2]|0;
     $71 = ((($70)) + -1|0);
     HEAP32[$6>>2] = $71;
    }
    $72 = ($67|0)>(-1);
    $73 = ($matches$0107$i$i|0)!=(0);
    $or$cond5$i$i = $73 | $72;
    if ($or$cond5$i$i) {
     $matches$3$i$i = $matches$0107$i$i;
     break;
    } else {
     $alloc$1$i$i = 0;$s$8$i$i = $s$0105$i$i;$wcs$9$i$i = $wcs$0106$i$i;
     label = 165;
    }
   }
   else if ((label|0) == 101) {
    $246 = HEAP32[6773]|0;
    $247 = ($246|0)==(0|0);
    if ($247) {
     $$0$i$i$i$i = 27136;
    } else {
     $248 = (_pthread_self()|0);
     $249 = ((($248)) + 64|0);
     $250 = HEAP32[$249>>2]|0;
     $$0$i$i$i$i = $250;
    }
    HEAP32[$$0$i$i$i$i>>2] = 84;
    $s$7$i$i = 0;$wcs$8$i$i = $wcs$3$ph$i$i;
    label = 164;
   }
   if ((label|0) == 164) {
    $$old4$i$i = ($matches$0107$i$i|0)==(0);
    if ($$old4$i$i) {
     $alloc$1$i$i = $alloc$0$i$i;$s$8$i$i = $s$7$i$i;$wcs$9$i$i = $wcs$8$i$i;
     label = 165;
    } else {
     $alloc$2$i$i = $alloc$0$i$i;$matches$2$i$i = $matches$0107$i$i;$s$9$i$i = $s$7$i$i;$wcs$10$i$i = $wcs$8$i$i;
    }
   }
   if ((label|0) == 165) {
    $alloc$2$i$i = $alloc$1$i$i;$matches$2$i$i = -1;$s$9$i$i = $s$8$i$i;$wcs$10$i$i = $wcs$9$i$i;
   }
   $359 = ($alloc$2$i$i|0)==(0);
   if ($359) {
    $matches$3$i$i = $matches$2$i$i;
   } else {
    _free($s$9$i$i);
    _free($wcs$10$i$i);
    $matches$3$i$i = $matches$2$i$i;
   }
  }
 } while(0);
 STACKTOP = sp;return ($matches$3$i$i|0);
}
function _do_read_562($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0$i = 0, $k$0$len$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 $5 = $3;
 $6 = $1;
 $7 = (($5) - ($6))|0;
 $k$0$i = $4 ? $2 : $7;
 $8 = ($k$0$i>>>0)<($len>>>0);
 $k$0$len$i = $8 ? $k$0$i : $len;
 _memcpy(($buf|0),($1|0),($k$0$len$i|0))|0;
 $9 = (($1) + ($k$0$len$i)|0);
 $10 = ((($f)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0$i)|0);
 $12 = ((($f)) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 return ($k$0$len$i|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$0$i = 0, $$0$i1 = 0, $$0$i10 = 0, $$0$i12 = 0, $$0$i14 = 0, $$0$i16 = 0, $$0$i3 = 0, $$0$i5 = 0, $$0$i7 = 0, $$010$i = 0, $$012$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$1$i = 0.0, $$111$be$i = 0, $$111$ph$i = 0, $$16$i = 0;
 var $$2$i = 0, $$24$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3112$i = 0, $$in = 0, $$k$0$i = 0, $$lnz$0$i = 0, $$neg$i = 0, $$neg40$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi43$iZ2D = 0.0, $$pre42$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0.0;
 var $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0.0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0.0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0.0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0.0, $504 = 0.0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0.0, $52 = 0, $520 = 0.0, $521 = 0.0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0.0, $536 = 0.0, $537 = 0.0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0.0;
 var $55 = 0, $550 = 0, $551 = 0.0, $552 = 0.0, $553 = 0, $554 = 0.0, $555 = 0, $556 = 0.0, $557 = 0.0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0.0, $562 = 0.0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0.0;
 var $568 = 0.0, $569 = 0.0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0.0, $574 = 0.0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0.0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0.0;
 var $694 = 0.0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0.0, $702 = 0, $703 = 0.0, $704 = 0.0, $705 = 0.0, $706 = 0.0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0.0, $718 = 0.0, $719 = 0.0, $72 = 0, $720 = 0, $721 = 0.0, $722 = 0.0, $723 = 0, $724 = 0, $725 = 0, $726 = 0.0, $727 = 0.0, $728 = 0.0, $729 = 0.0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0.0, $733 = 0, $734 = 0.0, $735 = 0.0, $736 = 0.0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0.0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0.0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0.0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0.0, $763 = 0, $764 = 0, $765 = 0.0;
 var $766 = 0.0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$093$i = 0, $a$1$i = 0, $a$2$ph46$i = 0;
 var $a$4$i = 0, $a$4$ph$i = 0, $a$4$ph167$i = 0, $a$586$i = 0, $a$6$i = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge$i28 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0;
 var $c$6 = 0, $carry$095$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry4$089$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$ph$i = 0, $e2$1$ph166$i = 0, $e2$3$i = 0, $e2$4$i = 0, $emin$0$ph = 0, $exitcond151$i = 0, $fabs$i$i = 0.0;
 var $fabs$i$i9 = 0.0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$3$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i12 = 0, $gotdig$2$i = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3108$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1109$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0;
 var $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0, $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$0111$i = 0, $j$075$i = 0, $j$076$i = 0, $j$077$i = 0, $j$2$i = 0, $j$3102$i = 0, $k$0$lcssa$i = 0, $k$0110$i = 0, $k$071$i = 0, $k$072$i = 0, $k$073$i = 0, $k$2$i = 0;
 var $k$3$i = 0, $k$494$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$5$z$2$i = 0, $k$687$i = 0, $lnz$0$lcssa$i = 0, $lnz$0107$i = 0, $lnz$065$i = 0, $lnz$066$i = 0, $lnz$067$i = 0, $lnz$2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond18$i = 0, $or$cond192$i = 0, $or$cond20$i = 0, $or$cond21$i = 0, $or$cond22$i = 0;
 var $or$cond25$i = 0, $or$cond26$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond9 = 0, $or$cond9$i = 0, $or$cond9$i27 = 0, $rp$0$lcssa162$i = 0, $rp$092$i = 0, $rp$1$i18 = 0, $rp$2$ph44$i = 0, $rp$4$ph$i = 0, $rp$4$ph42$i = 0, $rp$585$i = 0, $rp$6$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0;
 var $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0;
 var $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph45$i = 0, $z$10$1$i = 0, $z$10$i = 0, $z$2$i = 0, $z$3$i = 0, $z$4$i = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 switch ($prec|0) {
 case 0:  {
  $bits$0$ph = 24;$emin$0$ph = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 default: {
  $$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $0 = ((($f)) + 4|0);
   $1 = ((($f)) + 100|0);
   L6: while(1) {
    $2 = HEAP32[$0>>2]|0;
    $3 = HEAP32[$1>>2]|0;
    $4 = ($2>>>0)<($3>>>0);
    if ($4) {
     $5 = ((($2)) + 1|0);
     HEAP32[$0>>2] = $5;
     $6 = HEAP8[$2>>0]|0;
     $7 = $6&255;
     $9 = $7;
    } else {
     $8 = (___shgetc($f)|0);
     $9 = $8;
    }
    switch ($9|0) {
    case 9: case 10: case 11: case 12: case 13: case 32:  {
     break;
    }
    default: {
     break L6;
    }
    }
   }
   $10 = ($9|0)==(45);
   L13: do {
    switch ($9|0) {
    case 43: case 45:  {
     $11 = $10&1;
     $12 = $11 << 1;
     $13 = (1 - ($12))|0;
     $14 = HEAP32[$0>>2]|0;
     $15 = HEAP32[$1>>2]|0;
     $16 = ($14>>>0)<($15>>>0);
     if ($16) {
      $17 = ((($14)) + 1|0);
      HEAP32[$0>>2] = $17;
      $18 = HEAP8[$14>>0]|0;
      $19 = $18&255;
      $c$0 = $19;$sign$0 = $13;
      break L13;
     } else {
      $20 = (___shgetc($f)|0);
      $c$0 = $20;$sign$0 = $13;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $9;$sign$0 = 1;
    }
    }
   } while(0);
   $c$179 = $c$0;$i$078 = 0;
   while(1) {
    $21 = $c$179 | 32;
    $22 = (26770 + ($i$078)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23 << 24 >> 24;
    $25 = ($21|0)==($24|0);
    if (!($25)) {
     $c$1$lcssa = $c$179;$i$0$lcssa = $i$078;
     break;
    }
    $26 = ($i$078>>>0)<(7);
    do {
     if ($26) {
      $27 = HEAP32[$0>>2]|0;
      $28 = HEAP32[$1>>2]|0;
      $29 = ($27>>>0)<($28>>>0);
      if ($29) {
       $30 = ((($27)) + 1|0);
       HEAP32[$0>>2] = $30;
       $31 = HEAP8[$27>>0]|0;
       $32 = $31&255;
       $c$2 = $32;
       break;
      } else {
       $33 = (___shgetc($f)|0);
       $c$2 = $33;
       break;
      }
     } else {
      $c$2 = $c$179;
     }
    } while(0);
    $34 = (($i$078) + 1)|0;
    $35 = ($34>>>0)<(8);
    if ($35) {
     $c$179 = $c$2;$i$078 = $34;
    } else {
     $c$1$lcssa = $c$2;$i$0$lcssa = $34;
     break;
    }
   }
   L29: do {
    switch ($i$0$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $36 = ($i$0$lcssa>>>0)>(3);
     $37 = ($pok|0)!=(0);
     $or$cond5 = $37 & $36;
     if ($or$cond5) {
      $38 = ($i$0$lcssa|0)==(8);
      if ($38) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $51 = ($i$0$lcssa|0)==(0);
     L34: do {
      if ($51) {
       $c$377 = $c$1$lcssa;$i$276 = 0;
       while(1) {
        $52 = $c$377 | 32;
        $53 = (26779 + ($i$276)|0);
        $54 = HEAP8[$53>>0]|0;
        $55 = $54 << 24 >> 24;
        $56 = ($52|0)==($55|0);
        if (!($56)) {
         $c$5 = $c$377;$i$3 = $i$276;
         break L34;
        }
        $57 = ($i$276>>>0)<(2);
        do {
         if ($57) {
          $58 = HEAP32[$0>>2]|0;
          $59 = HEAP32[$1>>2]|0;
          $60 = ($58>>>0)<($59>>>0);
          if ($60) {
           $61 = ((($58)) + 1|0);
           HEAP32[$0>>2] = $61;
           $62 = HEAP8[$58>>0]|0;
           $63 = $62&255;
           $c$4 = $63;
           break;
          } else {
           $64 = (___shgetc($f)|0);
           $c$4 = $64;
           break;
          }
         } else {
          $c$4 = $c$377;
         }
        } while(0);
        $65 = (($i$276) + 1)|0;
        $66 = ($65>>>0)<(3);
        if ($66) {
         $c$377 = $c$4;$i$276 = $65;
        } else {
         $c$5 = $c$4;$i$3 = $65;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $67 = HEAP32[$0>>2]|0;
      $68 = HEAP32[$1>>2]|0;
      $69 = ($67>>>0)<($68>>>0);
      if ($69) {
       $70 = ((($67)) + 1|0);
       HEAP32[$0>>2] = $70;
       $71 = HEAP8[$67>>0]|0;
       $72 = $71&255;
       $75 = $72;
      } else {
       $73 = (___shgetc($f)|0);
       $75 = $73;
      }
      $74 = ($75|0)==(40);
      if ($74) {
       $i$4 = 1;
      } else {
       $76 = HEAP32[$1>>2]|0;
       $77 = ($76|0)==(0|0);
       if ($77) {
        $$0 = nan;
        break L4;
       }
       $78 = HEAP32[$0>>2]|0;
       $79 = ((($78)) + -1|0);
       HEAP32[$0>>2] = $79;
       $$0 = nan;
       break L4;
      }
      while(1) {
       $80 = HEAP32[$0>>2]|0;
       $81 = HEAP32[$1>>2]|0;
       $82 = ($80>>>0)<($81>>>0);
       if ($82) {
        $83 = ((($80)) + 1|0);
        HEAP32[$0>>2] = $83;
        $84 = HEAP8[$80>>0]|0;
        $85 = $84&255;
        $88 = $85;
       } else {
        $86 = (___shgetc($f)|0);
        $88 = $86;
       }
       $87 = (($88) + -48)|0;
       $89 = ($87>>>0)<(10);
       $90 = (($88) + -65)|0;
       $91 = ($90>>>0)<(26);
       $or$cond = $89 | $91;
       if (!($or$cond)) {
        $92 = (($88) + -97)|0;
        $93 = ($92>>>0)<(26);
        $94 = ($88|0)==(95);
        $or$cond7 = $94 | $93;
        if (!($or$cond7)) {
         break;
        }
       }
       $116 = (($i$4) + 1)|0;
       $i$4 = $116;
      }
      $95 = ($88|0)==(41);
      if ($95) {
       $$0 = nan;
       break L4;
      }
      $96 = HEAP32[$1>>2]|0;
      $97 = ($96|0)==(0|0);
      if (!($97)) {
       $98 = HEAP32[$0>>2]|0;
       $99 = ((($98)) + -1|0);
       HEAP32[$0>>2] = $99;
      }
      if (!($37)) {
       $101 = HEAP32[6773]|0;
       $102 = ($101|0)==(0|0);
       if ($102) {
        $$0$i = 27136;
       } else {
        $103 = (_pthread_self()|0);
        $104 = ((($103)) + 64|0);
        $105 = HEAP32[$104>>2]|0;
        $$0$i = $105;
       }
       HEAP32[$$0$i>>2] = 22;
       $106 = ((($f)) + 104|0);
       HEAP32[$106>>2] = 0;
       $107 = ((($f)) + 8|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = HEAP32[$0>>2]|0;
       $110 = (($108) - ($109))|0;
       $111 = ((($f)) + 108|0);
       HEAP32[$111>>2] = $110;
       HEAP32[$1>>2] = $108;
       $$0 = 0.0;
       break L4;
      }
      $100 = ($i$4|0)==(0);
      if ($100) {
       $$0 = nan;
       break L4;
      } else {
       $$in = $i$4;
      }
      while(1) {
       $112 = (($$in) + -1)|0;
       if (!($97)) {
        $113 = HEAP32[$0>>2]|0;
        $114 = ((($113)) + -1|0);
        HEAP32[$0>>2] = $114;
       }
       $115 = ($112|0)==(0);
       if ($115) {
        $$0 = nan;
        break L4;
       } else {
        $$in = $112;
       }
      }
      break;
     }
     case 0:  {
      $132 = ($c$5|0)==(48);
      do {
       if ($132) {
        $133 = HEAP32[$0>>2]|0;
        $134 = HEAP32[$1>>2]|0;
        $135 = ($133>>>0)<($134>>>0);
        if ($135) {
         $136 = ((($133)) + 1|0);
         HEAP32[$0>>2] = $136;
         $137 = HEAP8[$133>>0]|0;
         $138 = $137&255;
         $141 = $138;
        } else {
         $139 = (___shgetc($f)|0);
         $141 = $139;
        }
        $140 = $141 | 32;
        $142 = ($140|0)==(120);
        if (!($142)) {
         $372 = HEAP32[$1>>2]|0;
         $373 = ($372|0)==(0|0);
         if ($373) {
          $c$6 = 48;
          break;
         }
         $374 = HEAP32[$0>>2]|0;
         $375 = ((($374)) + -1|0);
         HEAP32[$0>>2] = $375;
         $c$6 = 48;
         break;
        }
        $143 = HEAP32[$0>>2]|0;
        $144 = HEAP32[$1>>2]|0;
        $145 = ($143>>>0)<($144>>>0);
        if ($145) {
         $146 = ((($143)) + 1|0);
         HEAP32[$0>>2] = $146;
         $147 = HEAP8[$143>>0]|0;
         $148 = $147&255;
         $c$0$i = $148;$gotdig$0$i = 0;
        } else {
         $149 = (___shgetc($f)|0);
         $c$0$i = $149;$gotdig$0$i = 0;
        }
        L100: while(1) {
         switch ($c$0$i|0) {
         case 46:  {
          label = 78;
          break L100;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $187 = 0;$189 = 0;$237 = 0;$239 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break L100;
         }
         }
         $150 = HEAP32[$0>>2]|0;
         $151 = HEAP32[$1>>2]|0;
         $152 = ($150>>>0)<($151>>>0);
         if ($152) {
          $153 = ((($150)) + 1|0);
          HEAP32[$0>>2] = $153;
          $154 = HEAP8[$150>>0]|0;
          $155 = $154&255;
          $c$0$i = $155;$gotdig$0$i = 1;
          continue;
         } else {
          $156 = (___shgetc($f)|0);
          $c$0$i = $156;$gotdig$0$i = 1;
          continue;
         }
        }
        if ((label|0) == 78) {
         $157 = HEAP32[$0>>2]|0;
         $158 = HEAP32[$1>>2]|0;
         $159 = ($157>>>0)<($158>>>0);
         if ($159) {
          $160 = ((($157)) + 1|0);
          HEAP32[$0>>2] = $160;
          $161 = HEAP8[$157>>0]|0;
          $162 = $161&255;
          $c$1$ph$i = $162;
         } else {
          $163 = (___shgetc($f)|0);
          $c$1$ph$i = $163;
         }
         $164 = ($c$1$ph$i|0)==(48);
         if ($164) {
          $172 = 0;$173 = 0;
          while(1) {
           $165 = HEAP32[$0>>2]|0;
           $166 = HEAP32[$1>>2]|0;
           $167 = ($165>>>0)<($166>>>0);
           if ($167) {
            $168 = ((($165)) + 1|0);
            HEAP32[$0>>2] = $168;
            $169 = HEAP8[$165>>0]|0;
            $170 = $169&255;
            $177 = $170;
           } else {
            $171 = (___shgetc($f)|0);
            $177 = $171;
           }
           $174 = (_i64Add(($172|0),($173|0),-1,-1)|0);
           $175 = tempRet0;
           $176 = ($177|0)==(48);
           if ($176) {
            $172 = $174;$173 = $175;
           } else {
            $187 = 0;$189 = 0;$237 = $174;$239 = $175;$c$2$i = $177;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
            break;
           }
          }
         } else {
          $187 = 0;$189 = 0;$237 = 0;$239 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         }
        }
        while(1) {
         $178 = (($c$2$i) + -48)|0;
         $179 = ($178>>>0)<(10);
         $$pre$i = $c$2$i | 32;
         if ($179) {
          label = 90;
         } else {
          $180 = (($$pre$i) + -97)|0;
          $181 = ($180>>>0)<(6);
          $182 = ($c$2$i|0)==(46);
          $or$cond6$i = $182 | $181;
          if (!($or$cond6$i)) {
           $c$2$lcssa$i = $c$2$i;
           break;
          }
          if ($182) {
           $183 = ($gotrad$0$i|0)==(0);
           if ($183) {
            $773 = $189;$774 = $187;$775 = $189;$776 = $187;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           } else {
            $c$2$lcssa$i = 46;
            break;
           }
          } else {
           label = 90;
          }
         }
         if ((label|0) == 90) {
          label = 0;
          $184 = ($c$2$i|0)>(57);
          $185 = (($$pre$i) + -87)|0;
          $d$0$i = $184 ? $185 : $178;
          $186 = ($187|0)<(0);
          $188 = ($189>>>0)<(8);
          $190 = ($187|0)==(0);
          $191 = $190 & $188;
          $192 = $186 | $191;
          do {
           if ($192) {
            $193 = $x$0$i << 4;
            $194 = (($d$0$i) + ($193))|0;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $194;$y$1$i = $y$0$i;
           } else {
            $195 = ($187|0)<(0);
            $196 = ($189>>>0)<(14);
            $197 = ($187|0)==(0);
            $198 = $197 & $196;
            $199 = $195 | $198;
            if ($199) {
             $200 = (+($d$0$i|0));
             $201 = $scale$0$i * 0.0625;
             $202 = $201 * $200;
             $203 = $y$0$i + $202;
             $gottail$1$i = $gottail$0$i;$scale$1$i = $201;$x$1$i = $x$0$i;$y$1$i = $203;
             break;
            }
            $204 = ($d$0$i|0)==(0);
            $205 = ($gottail$0$i|0)!=(0);
            $or$cond$i = $205 | $204;
            if ($or$cond$i) {
             $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
            } else {
             $206 = $scale$0$i * 0.5;
             $207 = $y$0$i + $206;
             $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $207;
            }
           }
          } while(0);
          $208 = (_i64Add(($189|0),($187|0),1,0)|0);
          $209 = tempRet0;
          $773 = $237;$774 = $239;$775 = $208;$776 = $209;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
         }
         $210 = HEAP32[$0>>2]|0;
         $211 = HEAP32[$1>>2]|0;
         $212 = ($210>>>0)<($211>>>0);
         if ($212) {
          $213 = ((($210)) + 1|0);
          HEAP32[$0>>2] = $213;
          $214 = HEAP8[$210>>0]|0;
          $215 = $214&255;
          $187 = $776;$189 = $775;$237 = $773;$239 = $774;$c$2$i = $215;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         } else {
          $216 = (___shgetc($f)|0);
          $187 = $776;$189 = $775;$237 = $773;$239 = $774;$c$2$i = $216;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         }
        }
        $217 = ($gotdig$2$i|0)==(0);
        if ($217) {
         $218 = HEAP32[$1>>2]|0;
         $219 = ($218|0)==(0|0);
         if (!($219)) {
          $220 = HEAP32[$0>>2]|0;
          $221 = ((($220)) + -1|0);
          HEAP32[$0>>2] = $221;
         }
         $222 = ($pok|0)==(0);
         if ($222) {
          $227 = ((($f)) + 104|0);
          HEAP32[$227>>2] = 0;
          $228 = ((($f)) + 8|0);
          $229 = HEAP32[$228>>2]|0;
          $230 = HEAP32[$0>>2]|0;
          $231 = (($229) - ($230))|0;
          $232 = ((($f)) + 108|0);
          HEAP32[$232>>2] = $231;
          HEAP32[$1>>2] = $229;
         } else {
          if (!($219)) {
           $223 = HEAP32[$0>>2]|0;
           $224 = ((($223)) + -1|0);
           HEAP32[$0>>2] = $224;
           $225 = ($gotrad$0$i|0)==(0);
           if (!($225)) {
            $226 = ((($223)) + -2|0);
            HEAP32[$0>>2] = $226;
           }
          }
         }
         $233 = (+($sign$0|0));
         $234 = $233 * 0.0;
         $$0 = $234;
         break L4;
        }
        $235 = ($gotrad$0$i|0)==(0);
        $236 = $235 ? $189 : $237;
        $238 = $235 ? $187 : $239;
        $240 = ($187|0)<(0);
        $241 = ($189>>>0)<(8);
        $242 = ($187|0)==(0);
        $243 = $242 & $241;
        $244 = $240 | $243;
        if ($244) {
         $246 = $189;$247 = $187;$x$324$i = $x$0$i;
         while(1) {
          $245 = $x$324$i << 4;
          $248 = (_i64Add(($246|0),($247|0),1,0)|0);
          $249 = tempRet0;
          $250 = ($249|0)<(0);
          $251 = ($248>>>0)<(8);
          $252 = ($249|0)==(0);
          $253 = $252 & $251;
          $254 = $250 | $253;
          if ($254) {
           $246 = $248;$247 = $249;$x$324$i = $245;
          } else {
           $x$3$lcssa$i = $245;
           break;
          }
         }
        } else {
         $x$3$lcssa$i = $x$0$i;
        }
        $255 = $c$2$lcssa$i | 32;
        $256 = ($255|0)==(112);
        if ($256) {
         $257 = (_scanexp($f,$pok)|0);
         $258 = tempRet0;
         $259 = ($257|0)==(0);
         $260 = ($258|0)==(-2147483648);
         $261 = $259 & $260;
         if ($261) {
          $262 = ($pok|0)==(0);
          if ($262) {
           $267 = ((($f)) + 104|0);
           HEAP32[$267>>2] = 0;
           $268 = ((($f)) + 8|0);
           $269 = HEAP32[$268>>2]|0;
           $270 = HEAP32[$0>>2]|0;
           $271 = (($269) - ($270))|0;
           $272 = ((($f)) + 108|0);
           HEAP32[$272>>2] = $271;
           HEAP32[$1>>2] = $269;
           $$0 = 0.0;
           break L4;
          }
          $263 = HEAP32[$1>>2]|0;
          $264 = ($263|0)==(0|0);
          if ($264) {
           $281 = 0;$282 = 0;
          } else {
           $265 = HEAP32[$0>>2]|0;
           $266 = ((($265)) + -1|0);
           HEAP32[$0>>2] = $266;
           $281 = 0;$282 = 0;
          }
         } else {
          $281 = $257;$282 = $258;
         }
        } else {
         $273 = HEAP32[$1>>2]|0;
         $274 = ($273|0)==(0|0);
         if ($274) {
          $281 = 0;$282 = 0;
         } else {
          $275 = HEAP32[$0>>2]|0;
          $276 = ((($275)) + -1|0);
          HEAP32[$0>>2] = $276;
          $281 = 0;$282 = 0;
         }
        }
        $277 = (_bitshift64Shl(($236|0),($238|0),2)|0);
        $278 = tempRet0;
        $279 = (_i64Add(($277|0),($278|0),-32,-1)|0);
        $280 = tempRet0;
        $283 = (_i64Add(($279|0),($280|0),($281|0),($282|0))|0);
        $284 = tempRet0;
        $285 = ($x$3$lcssa$i|0)==(0);
        if ($285) {
         $286 = (+($sign$0|0));
         $287 = $286 * 0.0;
         $$0 = $287;
         break L4;
        }
        $288 = (0 - ($emin$0$ph))|0;
        $289 = ($284|0)>(0);
        $290 = ($283>>>0)>($288>>>0);
        $291 = ($284|0)==(0);
        $292 = $291 & $290;
        $293 = $289 | $292;
        if ($293) {
         $294 = HEAP32[6773]|0;
         $295 = ($294|0)==(0|0);
         if ($295) {
          $$0$i5 = 27136;
         } else {
          $296 = (_pthread_self()|0);
          $297 = ((($296)) + 64|0);
          $298 = HEAP32[$297>>2]|0;
          $$0$i5 = $298;
         }
         HEAP32[$$0$i5>>2] = 34;
         $299 = (+($sign$0|0));
         $300 = $299 * 1.7976931348623157E+308;
         $301 = $300 * 1.7976931348623157E+308;
         $$0 = $301;
         break L4;
        }
        $302 = (($emin$0$ph) + -106)|0;
        $303 = ($302|0)<(0);
        $304 = $303 << 31 >> 31;
        $305 = ($284|0)<($304|0);
        $306 = ($283>>>0)<($302>>>0);
        $307 = ($284|0)==($304|0);
        $308 = $307 & $306;
        $309 = $305 | $308;
        if ($309) {
         $311 = HEAP32[6773]|0;
         $312 = ($311|0)==(0|0);
         if ($312) {
          $$0$i7 = 27136;
         } else {
          $313 = (_pthread_self()|0);
          $314 = ((($313)) + 64|0);
          $315 = HEAP32[$314>>2]|0;
          $$0$i7 = $315;
         }
         HEAP32[$$0$i7>>2] = 34;
         $316 = (+($sign$0|0));
         $317 = $316 * 2.2250738585072014E-308;
         $318 = $317 * 2.2250738585072014E-308;
         $$0 = $318;
         break L4;
        }
        $310 = ($x$3$lcssa$i|0)>(-1);
        if ($310) {
         $324 = $283;$325 = $284;$x$419$i = $x$3$lcssa$i;$y$320$i = $y$0$i;
         while(1) {
          $319 = !($y$320$i >= 0.5);
          $320 = $x$419$i << 1;
          $321 = $y$320$i + -1.0;
          $322 = $319&1;
          $323 = $322 | $320;
          $x$5$i = $323 ^ 1;
          $$pn$i = $319 ? $y$320$i : $321;
          $y$4$i = $y$320$i + $$pn$i;
          $326 = (_i64Add(($324|0),($325|0),-1,-1)|0);
          $327 = tempRet0;
          $328 = ($323|0)>(-1);
          if ($328) {
           $324 = $326;$325 = $327;$x$419$i = $x$5$i;$y$320$i = $y$4$i;
          } else {
           $333 = $326;$334 = $327;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
           break;
          }
         }
        } else {
         $333 = $283;$334 = $284;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
        }
        $329 = ($emin$0$ph|0)<(0);
        $330 = $329 << 31 >> 31;
        $331 = (_i64Subtract(32,0,($emin$0$ph|0),($330|0))|0);
        $332 = tempRet0;
        $335 = (_i64Add(($333|0),($334|0),($331|0),($332|0))|0);
        $336 = tempRet0;
        $337 = (0)>($336|0);
        $338 = ($bits$0$ph>>>0)>($335>>>0);
        $339 = (0)==($336|0);
        $340 = $339 & $338;
        $341 = $337 | $340;
        if ($341) {
         $342 = ($335|0)<(0);
         if ($342) {
          $$0710$i = 0;
          label = 135;
         } else {
          $$07$i = $335;
          label = 133;
         }
        } else {
         $$07$i = $bits$0$ph;
         label = 133;
        }
        if ((label|0) == 133) {
         $343 = ($$07$i|0)<(53);
         if ($343) {
          $$0710$i = $$07$i;
          label = 135;
         } else {
          $$pre42$i = (+($sign$0|0));
          $$0711$i = $$07$i;$$pre$phi43$iZ2D = $$pre42$i;$bias$0$i = 0.0;
         }
        }
        if ((label|0) == 135) {
         $344 = (84 - ($$0710$i))|0;
         $345 = (+_scalbn(1.0,$344));
         $346 = (+($sign$0|0));
         HEAPF64[tempDoublePtr>>3] = $346;$347 = HEAP32[tempDoublePtr>>2]|0;
         $348 = HEAP32[tempDoublePtr+4>>2]|0;
         $fabs$i$i = (+Math_abs((+$345)));
         HEAPF64[tempDoublePtr>>3] = $fabs$i$i;$349 = HEAP32[tempDoublePtr>>2]|0;
         $350 = HEAP32[tempDoublePtr+4>>2]|0;
         $351 = $348 & -2147483648;
         $352 = $351 | $350;
         HEAP32[tempDoublePtr>>2] = $349;HEAP32[tempDoublePtr+4>>2] = $352;$353 = +HEAPF64[tempDoublePtr>>3];
         $$0711$i = $$0710$i;$$pre$phi43$iZ2D = $346;$bias$0$i = $353;
        }
        $354 = ($$0711$i|0)<(32);
        $355 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $355 & $354;
        $356 = $x$4$lcssa$i & 1;
        $357 = ($356|0)==(0);
        $or$cond9$i = $357 & $or$cond4$i;
        $358 = $or$cond9$i&1;
        $x$6$i = (($358) + ($x$4$lcssa$i))|0;
        $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
        $359 = (+($x$6$i>>>0));
        $360 = $$pre$phi43$iZ2D * $359;
        $361 = $bias$0$i + $360;
        $362 = $$pre$phi43$iZ2D * $y$5$i;
        $363 = $362 + $361;
        $364 = $363 - $bias$0$i;
        $365 = $364 != 0.0;
        if (!($365)) {
         $366 = HEAP32[6773]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $$0$i10 = 27136;
         } else {
          $368 = (_pthread_self()|0);
          $369 = ((($368)) + 64|0);
          $370 = HEAP32[$369>>2]|0;
          $$0$i10 = $370;
         }
         HEAP32[$$0$i10>>2] = 34;
        }
        $371 = (+_scalbn($364,$333));
        $$0 = $371;
        break L4;
       } else {
        $c$6 = $c$5;
       }
      } while(0);
      $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
      $376 = (0 - ($sum$i))|0;
      $$010$i = $c$6;$gotdig$0$i12 = 0;
      L199: while(1) {
       switch ($$010$i|0) {
       case 46:  {
        label = 148;
        break L199;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$2$i = $$010$i;$777 = 0;$778 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
        break L199;
       }
       }
       $377 = HEAP32[$0>>2]|0;
       $378 = HEAP32[$1>>2]|0;
       $379 = ($377>>>0)<($378>>>0);
       if ($379) {
        $380 = ((($377)) + 1|0);
        HEAP32[$0>>2] = $380;
        $381 = HEAP8[$377>>0]|0;
        $382 = $381&255;
        $$010$i = $382;$gotdig$0$i12 = 1;
        continue;
       } else {
        $383 = (___shgetc($f)|0);
        $$010$i = $383;$gotdig$0$i12 = 1;
        continue;
       }
      }
      if ((label|0) == 148) {
       $384 = HEAP32[$0>>2]|0;
       $385 = HEAP32[$1>>2]|0;
       $386 = ($384>>>0)<($385>>>0);
       if ($386) {
        $387 = ((($384)) + 1|0);
        HEAP32[$0>>2] = $387;
        $388 = HEAP8[$384>>0]|0;
        $389 = $388&255;
        $$111$ph$i = $389;
       } else {
        $390 = (___shgetc($f)|0);
        $$111$ph$i = $390;
       }
       $391 = ($$111$ph$i|0)==(48);
       if ($391) {
        $392 = 0;$393 = 0;
        while(1) {
         $394 = (_i64Add(($392|0),($393|0),-1,-1)|0);
         $395 = tempRet0;
         $396 = HEAP32[$0>>2]|0;
         $397 = HEAP32[$1>>2]|0;
         $398 = ($396>>>0)<($397>>>0);
         if ($398) {
          $399 = ((($396)) + 1|0);
          HEAP32[$0>>2] = $399;
          $400 = HEAP8[$396>>0]|0;
          $401 = $400&255;
          $$111$be$i = $401;
         } else {
          $402 = (___shgetc($f)|0);
          $$111$be$i = $402;
         }
         $403 = ($$111$be$i|0)==(48);
         if ($403) {
          $392 = $394;$393 = $395;
         } else {
          $$2$i = $$111$be$i;$777 = $394;$778 = $395;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$111$ph$i;$777 = 0;$778 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 1;
       }
      }
      HEAP32[$x$i>>2] = 0;
      $404 = (($$2$i) + -48)|0;
      $405 = ($404>>>0)<(10);
      $406 = ($$2$i|0)==(46);
      $407 = $406 | $405;
      L218: do {
       if ($407) {
        $408 = ((($x$i)) + 496|0);
        $$3112$i = $$2$i;$411 = 0;$412 = 0;$779 = $406;$780 = $404;$781 = $777;$782 = $778;$gotdig$3108$i = $gotdig$2$i13;$gotrad$1109$i = $gotrad$0$i14;$j$0111$i = 0;$k$0110$i = 0;$lnz$0107$i = 0;
        L220: while(1) {
         do {
          if ($779) {
           $cond$i = ($gotrad$1109$i|0)==(0);
           if ($cond$i) {
            $783 = $411;$784 = $412;$785 = $411;$786 = $412;$gotdig$4$i = $gotdig$3108$i;$gotrad$2$i = 1;$j$2$i = $j$0111$i;$k$2$i = $k$0110$i;$lnz$2$i = $lnz$0107$i;
           } else {
            break L220;
           }
          } else {
           $410 = ($k$0110$i|0)<(125);
           $413 = (_i64Add(($411|0),($412|0),1,0)|0);
           $414 = tempRet0;
           $415 = ($$3112$i|0)!=(48);
           if (!($410)) {
            if (!($415)) {
             $783 = $781;$784 = $782;$785 = $413;$786 = $414;$gotdig$4$i = $gotdig$3108$i;$gotrad$2$i = $gotrad$1109$i;$j$2$i = $j$0111$i;$k$2$i = $k$0110$i;$lnz$2$i = $lnz$0107$i;
             break;
            }
            $425 = HEAP32[$408>>2]|0;
            $426 = $425 | 1;
            HEAP32[$408>>2] = $426;
            $783 = $781;$784 = $782;$785 = $413;$786 = $414;$gotdig$4$i = $gotdig$3108$i;$gotrad$2$i = $gotrad$1109$i;$j$2$i = $j$0111$i;$k$2$i = $k$0110$i;$lnz$2$i = $lnz$0107$i;
            break;
           }
           $$lnz$0$i = $415 ? $413 : $lnz$0107$i;
           $416 = ($j$0111$i|0)==(0);
           $417 = (($x$i) + ($k$0110$i<<2)|0);
           if ($416) {
            $storemerge$i = $780;
           } else {
            $418 = HEAP32[$417>>2]|0;
            $419 = ($418*10)|0;
            $420 = (($$3112$i) + -48)|0;
            $421 = (($420) + ($419))|0;
            $storemerge$i = $421;
           }
           HEAP32[$417>>2] = $storemerge$i;
           $422 = (($j$0111$i) + 1)|0;
           $423 = ($422|0)==(9);
           $424 = $423&1;
           $$k$0$i = (($424) + ($k$0110$i))|0;
           $$16$i = $423 ? 0 : $422;
           $783 = $781;$784 = $782;$785 = $413;$786 = $414;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1109$i;$j$2$i = $$16$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
          }
         } while(0);
         $427 = HEAP32[$0>>2]|0;
         $428 = HEAP32[$1>>2]|0;
         $429 = ($427>>>0)<($428>>>0);
         if ($429) {
          $430 = ((($427)) + 1|0);
          HEAP32[$0>>2] = $430;
          $431 = HEAP8[$427>>0]|0;
          $432 = $431&255;
          $$3$be$i = $432;
         } else {
          $433 = (___shgetc($f)|0);
          $$3$be$i = $433;
         }
         $434 = (($$3$be$i) + -48)|0;
         $435 = ($434>>>0)<(10);
         $436 = ($$3$be$i|0)==(46);
         $437 = $436 | $435;
         if ($437) {
          $$3112$i = $$3$be$i;$411 = $785;$412 = $786;$779 = $436;$780 = $434;$781 = $783;$782 = $784;$gotdig$3108$i = $gotdig$4$i;$gotrad$1109$i = $gotrad$2$i;$j$0111$i = $j$2$i;$k$0110$i = $k$2$i;$lnz$0107$i = $lnz$2$i;
         } else {
          $$3$lcssa$i = $$3$be$i;$440 = $785;$441 = $783;$443 = $786;$444 = $784;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
          label = 171;
          break L218;
         }
        }
        $409 = ($gotdig$3108$i|0)!=(0);
        $787 = $411;$788 = $412;$789 = $781;$790 = $782;$791 = $409;$j$077$i = $j$0111$i;$k$073$i = $k$0110$i;$lnz$067$i = $lnz$0107$i;
        label = 179;
       } else {
        $$3$lcssa$i = $$2$i;$440 = 0;$441 = $777;$443 = 0;$444 = $778;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
        label = 171;
       }
      } while(0);
      do {
       if ((label|0) == 171) {
        $438 = ($gotrad$1$lcssa$i|0)==(0);
        $439 = $438 ? $440 : $441;
        $442 = $438 ? $443 : $444;
        $445 = ($gotdig$3$lcssa$i|0)!=(0);
        $446 = $$3$lcssa$i | 32;
        $447 = ($446|0)==(101);
        $or$cond18$i = $447 & $445;
        if (!($or$cond18$i)) {
         $468 = ($$3$lcssa$i|0)>(-1);
         if ($468) {
          $787 = $440;$788 = $443;$789 = $439;$790 = $442;$791 = $445;$j$077$i = $j$0$lcssa$i;$k$073$i = $k$0$lcssa$i;$lnz$067$i = $lnz$0$lcssa$i;
          label = 179;
          break;
         } else {
          $792 = $440;$793 = $443;$794 = $445;$795 = $439;$796 = $442;$j$076$i = $j$0$lcssa$i;$k$072$i = $k$0$lcssa$i;$lnz$066$i = $lnz$0$lcssa$i;
          label = 181;
          break;
         }
        }
        $448 = (_scanexp($f,$pok)|0);
        $449 = tempRet0;
        $450 = ($448|0)==(0);
        $451 = ($449|0)==(-2147483648);
        $452 = $450 & $451;
        if ($452) {
         $453 = ($pok|0)==(0);
         if ($453) {
          $458 = ((($f)) + 104|0);
          HEAP32[$458>>2] = 0;
          $459 = ((($f)) + 8|0);
          $460 = HEAP32[$459>>2]|0;
          $461 = HEAP32[$0>>2]|0;
          $462 = (($460) - ($461))|0;
          $463 = ((($f)) + 108|0);
          HEAP32[$463>>2] = $462;
          HEAP32[$1>>2] = $460;
          $$1$i = 0.0;
          break;
         }
         $454 = HEAP32[$1>>2]|0;
         $455 = ($454|0)==(0|0);
         if ($455) {
          $464 = 0;$465 = 0;
         } else {
          $456 = HEAP32[$0>>2]|0;
          $457 = ((($456)) + -1|0);
          HEAP32[$0>>2] = $457;
          $464 = 0;$465 = 0;
         }
        } else {
         $464 = $448;$465 = $449;
        }
        $466 = (_i64Add(($464|0),($465|0),($439|0),($442|0))|0);
        $467 = tempRet0;
        $489 = $466;$490 = $440;$492 = $467;$493 = $443;$j$075$i = $j$0$lcssa$i;$k$071$i = $k$0$lcssa$i;$lnz$065$i = $lnz$0$lcssa$i;
        label = 185;
       }
      } while(0);
      if ((label|0) == 179) {
       $469 = HEAP32[$1>>2]|0;
       $470 = ($469|0)==(0|0);
       if ($470) {
        $792 = $787;$793 = $788;$794 = $791;$795 = $789;$796 = $790;$j$076$i = $j$077$i;$k$072$i = $k$073$i;$lnz$066$i = $lnz$067$i;
        label = 181;
       } else {
        $471 = HEAP32[$0>>2]|0;
        $472 = ((($471)) + -1|0);
        HEAP32[$0>>2] = $472;
        if ($791) {
         $489 = $789;$490 = $787;$492 = $790;$493 = $788;$j$075$i = $j$077$i;$k$071$i = $k$073$i;$lnz$065$i = $lnz$067$i;
         label = 185;
        } else {
         label = 182;
        }
       }
      }
      if ((label|0) == 181) {
       if ($794) {
        $489 = $795;$490 = $792;$492 = $796;$493 = $793;$j$075$i = $j$076$i;$k$071$i = $k$072$i;$lnz$065$i = $lnz$066$i;
        label = 185;
       } else {
        label = 182;
       }
      }
      do {
       if ((label|0) == 182) {
        $473 = HEAP32[6773]|0;
        $474 = ($473|0)==(0|0);
        if ($474) {
         $$0$i14 = 27136;
        } else {
         $475 = (_pthread_self()|0);
         $476 = ((($475)) + 64|0);
         $477 = HEAP32[$476>>2]|0;
         $$0$i14 = $477;
        }
        HEAP32[$$0$i14>>2] = 22;
        $478 = ((($f)) + 104|0);
        HEAP32[$478>>2] = 0;
        $479 = ((($f)) + 8|0);
        $480 = HEAP32[$479>>2]|0;
        $481 = HEAP32[$0>>2]|0;
        $482 = (($480) - ($481))|0;
        $483 = ((($f)) + 108|0);
        HEAP32[$483>>2] = $482;
        HEAP32[$1>>2] = $480;
        $$1$i = 0.0;
       }
       else if ((label|0) == 185) {
        $484 = HEAP32[$x$i>>2]|0;
        $485 = ($484|0)==(0);
        if ($485) {
         $486 = (+($sign$0|0));
         $487 = $486 * 0.0;
         $$1$i = $487;
         break;
        }
        $488 = ($489|0)==($490|0);
        $491 = ($492|0)==($493|0);
        $494 = $488 & $491;
        $495 = ($493|0)<(0);
        $496 = ($490>>>0)<(10);
        $497 = ($493|0)==(0);
        $498 = $497 & $496;
        $499 = $495 | $498;
        $or$cond$i16 = $499 & $494;
        if ($or$cond$i16) {
         $500 = ($bits$0$ph>>>0)>(30);
         $501 = $484 >>> $bits$0$ph;
         $502 = ($501|0)==(0);
         $or$cond20$i = $500 | $502;
         if ($or$cond20$i) {
          $503 = (+($sign$0|0));
          $504 = (+($484>>>0));
          $505 = $503 * $504;
          $$1$i = $505;
          break;
         }
        }
        $506 = (($emin$0$ph|0) / -2)&-1;
        $507 = ($506|0)<(0);
        $508 = $507 << 31 >> 31;
        $509 = ($492|0)>($508|0);
        $510 = ($489>>>0)>($506>>>0);
        $511 = ($492|0)==($508|0);
        $512 = $511 & $510;
        $513 = $509 | $512;
        if ($513) {
         $514 = HEAP32[6773]|0;
         $515 = ($514|0)==(0|0);
         if ($515) {
          $$0$i16 = 27136;
         } else {
          $516 = (_pthread_self()|0);
          $517 = ((($516)) + 64|0);
          $518 = HEAP32[$517>>2]|0;
          $$0$i16 = $518;
         }
         HEAP32[$$0$i16>>2] = 34;
         $519 = (+($sign$0|0));
         $520 = $519 * 1.7976931348623157E+308;
         $521 = $520 * 1.7976931348623157E+308;
         $$1$i = $521;
         break;
        }
        $522 = (($emin$0$ph) + -106)|0;
        $523 = ($522|0)<(0);
        $524 = $523 << 31 >> 31;
        $525 = ($492|0)<($524|0);
        $526 = ($489>>>0)<($522>>>0);
        $527 = ($492|0)==($524|0);
        $528 = $527 & $526;
        $529 = $525 | $528;
        if ($529) {
         $530 = HEAP32[6773]|0;
         $531 = ($530|0)==(0|0);
         if ($531) {
          $$0$i12 = 27136;
         } else {
          $532 = (_pthread_self()|0);
          $533 = ((($532)) + 64|0);
          $534 = HEAP32[$533>>2]|0;
          $$0$i12 = $534;
         }
         HEAP32[$$0$i12>>2] = 34;
         $535 = (+($sign$0|0));
         $536 = $535 * 2.2250738585072014E-308;
         $537 = $536 * 2.2250738585072014E-308;
         $$1$i = $537;
         break;
        }
        $538 = ($j$075$i|0)==(0);
        if ($538) {
         $k$3$i = $k$071$i;
        } else {
         $539 = ($j$075$i|0)<(9);
         if ($539) {
          $540 = (($x$i) + ($k$071$i<<2)|0);
          $$promoted$i = HEAP32[$540>>2]|0;
          $542 = $$promoted$i;$j$3102$i = $j$075$i;
          while(1) {
           $541 = ($542*10)|0;
           $543 = (($j$3102$i) + 1)|0;
           $exitcond151$i = ($543|0)==(9);
           if ($exitcond151$i) {
            break;
           } else {
            $542 = $541;$j$3102$i = $543;
           }
          }
          HEAP32[$540>>2] = $541;
         }
         $544 = (($k$071$i) + 1)|0;
         $k$3$i = $544;
        }
        $545 = ($lnz$065$i|0)<(9);
        if ($545) {
         $546 = ($lnz$065$i|0)<=($489|0);
         $547 = ($489|0)<(18);
         $or$cond3$i = $546 & $547;
         if ($or$cond3$i) {
          $548 = ($489|0)==(9);
          if ($548) {
           $549 = (+($sign$0|0));
           $550 = HEAP32[$x$i>>2]|0;
           $551 = (+($550>>>0));
           $552 = $549 * $551;
           $$1$i = $552;
           break;
          }
          $553 = ($489|0)<(9);
          if ($553) {
           $554 = (+($sign$0|0));
           $555 = HEAP32[$x$i>>2]|0;
           $556 = (+($555>>>0));
           $557 = $554 * $556;
           $558 = (8 - ($489))|0;
           $559 = (10112 + ($558<<2)|0);
           $560 = HEAP32[$559>>2]|0;
           $561 = (+($560|0));
           $562 = $557 / $561;
           $$1$i = $562;
           break;
          }
          $$neg$i = Math_imul($489, -3)|0;
          $$neg40$i = (($bits$0$ph) + 27)|0;
          $563 = (($$neg40$i) + ($$neg$i))|0;
          $564 = ($563|0)>(30);
          $$pre$i17 = HEAP32[$x$i>>2]|0;
          $565 = $$pre$i17 >>> $563;
          $566 = ($565|0)==(0);
          $or$cond192$i = $564 | $566;
          if ($or$cond192$i) {
           $567 = (+($sign$0|0));
           $568 = (+($$pre$i17>>>0));
           $569 = $567 * $568;
           $570 = (($489) + -10)|0;
           $571 = (10112 + ($570<<2)|0);
           $572 = HEAP32[$571>>2]|0;
           $573 = (+($572|0));
           $574 = $569 * $573;
           $$1$i = $574;
           break;
          }
         }
        }
        $575 = (($489|0) % 9)&-1;
        $576 = ($575|0)==(0);
        if ($576) {
         $a$2$ph46$i = 0;$e2$0$ph$i = 0;$rp$2$ph44$i = $489;$z$1$ph45$i = $k$3$i;
        } else {
         $577 = ($489|0)>(-1);
         $578 = (($575) + 9)|0;
         $579 = $577 ? $575 : $578;
         $580 = (8 - ($579))|0;
         $581 = (10112 + ($580<<2)|0);
         $582 = HEAP32[$581>>2]|0;
         $583 = ($k$3$i|0)==(0);
         if ($583) {
          $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $489;$z$0$i = 0;
         } else {
          $584 = (1000000000 / ($582|0))&-1;
          $a$093$i = 0;$carry$095$i = 0;$k$494$i = 0;$rp$092$i = $489;
          while(1) {
           $585 = (($x$i) + ($k$494$i<<2)|0);
           $586 = HEAP32[$585>>2]|0;
           $587 = (($586>>>0) % ($582>>>0))&-1;
           $588 = (($586>>>0) / ($582>>>0))&-1;
           $589 = (($588) + ($carry$095$i))|0;
           HEAP32[$585>>2] = $589;
           $590 = Math_imul($587, $584)|0;
           $591 = ($k$494$i|0)==($a$093$i|0);
           $592 = ($589|0)==(0);
           $or$cond21$i = $591 & $592;
           $593 = (($k$494$i) + 1)|0;
           $594 = $593 & 127;
           $595 = (($rp$092$i) + -9)|0;
           $rp$1$i18 = $or$cond21$i ? $595 : $rp$092$i;
           $a$1$i = $or$cond21$i ? $594 : $a$093$i;
           $596 = ($593|0)==($k$3$i|0);
           if ($596) {
            break;
           } else {
            $a$093$i = $a$1$i;$carry$095$i = $590;$k$494$i = $593;$rp$092$i = $rp$1$i18;
           }
          }
          $597 = ($590|0)==(0);
          if ($597) {
           $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $k$3$i;
          } else {
           $598 = (($k$3$i) + 1)|0;
           $599 = (($x$i) + ($k$3$i<<2)|0);
           HEAP32[$599>>2] = $590;
           $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $598;
          }
         }
         $600 = (9 - ($579))|0;
         $601 = (($600) + ($rp$0$lcssa162$i))|0;
         $a$2$ph46$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph44$i = $601;$z$1$ph45$i = $z$0$i;
        }
        L305: while(1) {
         $602 = ($rp$2$ph44$i|0)<(18);
         $603 = ($rp$2$ph44$i|0)==(18);
         $604 = (($x$i) + ($a$2$ph46$i<<2)|0);
         $e2$0$i19 = $e2$0$ph$i;$z$1$i = $z$1$ph45$i;
         while(1) {
          if (!($602)) {
           if (!($603)) {
            $a$4$ph$i = $a$2$ph46$i;$e2$1$ph$i = $e2$0$i19;$rp$4$ph42$i = $rp$2$ph44$i;$z$6$ph$i = $z$1$i;
            break L305;
           }
           $605 = HEAP32[$604>>2]|0;
           $606 = ($605>>>0)<(9007199);
           if (!($606)) {
            $a$4$ph$i = $a$2$ph46$i;$e2$1$ph$i = $e2$0$i19;$rp$4$ph42$i = 18;$z$6$ph$i = $z$1$i;
            break L305;
           }
          }
          $607 = (($z$1$i) + 127)|0;
          $carry1$0$i = 0;$k$5$in$i = $607;$z$2$i = $z$1$i;
          while(1) {
           $k$5$i = $k$5$in$i & 127;
           $608 = (($x$i) + ($k$5$i<<2)|0);
           $609 = HEAP32[$608>>2]|0;
           $610 = (_bitshift64Shl(($609|0),0,29)|0);
           $611 = tempRet0;
           $612 = (_i64Add(($610|0),($611|0),($carry1$0$i|0),0)|0);
           $613 = tempRet0;
           $614 = ($613>>>0)>(0);
           $615 = ($612>>>0)>(1000000000);
           $616 = ($613|0)==(0);
           $617 = $616 & $615;
           $618 = $614 | $617;
           if ($618) {
            $619 = (___udivdi3(($612|0),($613|0),1000000000,0)|0);
            $620 = tempRet0;
            $621 = (___uremdi3(($612|0),($613|0),1000000000,0)|0);
            $622 = tempRet0;
            $$sink$off0$i = $621;$carry1$1$i = $619;
           } else {
            $$sink$off0$i = $612;$carry1$1$i = 0;
           }
           HEAP32[$608>>2] = $$sink$off0$i;
           $623 = (($z$2$i) + 127)|0;
           $624 = $623 & 127;
           $625 = ($k$5$i|0)!=($624|0);
           $626 = ($k$5$i|0)==($a$2$ph46$i|0);
           $or$cond22$i = $625 | $626;
           $627 = ($$sink$off0$i|0)==(0);
           $k$5$z$2$i = $627 ? $k$5$i : $z$2$i;
           $z$3$i = $or$cond22$i ? $z$2$i : $k$5$z$2$i;
           $628 = (($k$5$i) + -1)|0;
           if ($626) {
            break;
           } else {
            $carry1$0$i = $carry1$1$i;$k$5$in$i = $628;$z$2$i = $z$3$i;
           }
          }
          $629 = (($e2$0$i19) + -29)|0;
          $630 = ($carry1$1$i|0)==(0);
          if ($630) {
           $e2$0$i19 = $629;$z$1$i = $z$3$i;
          } else {
           break;
          }
         }
         $631 = (($rp$2$ph44$i) + 9)|0;
         $632 = (($a$2$ph46$i) + 127)|0;
         $633 = $632 & 127;
         $634 = ($633|0)==($z$3$i|0);
         if ($634) {
          $635 = (($z$3$i) + 127)|0;
          $636 = $635 & 127;
          $637 = (($x$i) + ($636<<2)|0);
          $638 = HEAP32[$637>>2]|0;
          $639 = (($z$3$i) + 126)|0;
          $640 = $639 & 127;
          $641 = (($x$i) + ($640<<2)|0);
          $642 = HEAP32[$641>>2]|0;
          $643 = $642 | $638;
          HEAP32[$641>>2] = $643;
          $z$4$i = $636;
         } else {
          $z$4$i = $z$3$i;
         }
         $644 = (($x$i) + ($633<<2)|0);
         HEAP32[$644>>2] = $carry1$1$i;
         $a$2$ph46$i = $633;$e2$0$ph$i = $629;$rp$2$ph44$i = $631;$z$1$ph45$i = $z$4$i;
        }
        L323: while(1) {
         $675 = (($z$6$ph$i) + 1)|0;
         $673 = $675 & 127;
         $676 = (($z$6$ph$i) + 127)|0;
         $677 = $676 & 127;
         $678 = (($x$i) + ($677<<2)|0);
         $a$4$ph167$i = $a$4$ph$i;$e2$1$ph166$i = $e2$1$ph$i;$rp$4$ph$i = $rp$4$ph42$i;
         while(1) {
          $679 = ($rp$4$ph$i|0)==(18);
          $680 = ($rp$4$ph$i|0)>(27);
          $$24$i = $680 ? 9 : 1;
          $$not$i = $679 ^ 1;
          $a$4$i = $a$4$ph167$i;$e2$1$i = $e2$1$ph166$i;
          while(1) {
           $645 = $a$4$i & 127;
           $646 = ($645|0)==($z$6$ph$i|0);
           do {
            if ($646) {
             label = 235;
            } else {
             $647 = (($x$i) + ($645<<2)|0);
             $648 = HEAP32[$647>>2]|0;
             $649 = ($648>>>0)<(9007199);
             if ($649) {
              label = 235;
              break;
             }
             $650 = ($648>>>0)>(9007199);
             if ($650) {
              break;
             }
             $651 = (($a$4$i) + 1)|0;
             $652 = $651 & 127;
             $653 = ($652|0)==($z$6$ph$i|0);
             if ($653) {
              label = 235;
              break;
             }
             $769 = (($x$i) + ($652<<2)|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770>>>0)<(254740991);
             if ($771) {
              label = 235;
              break;
             }
             $772 = ($770>>>0)>(254740991);
             $brmerge$i28 = $772 | $$not$i;
             if (!($brmerge$i28)) {
              $686 = $645;$z$10$i = $z$6$ph$i;
              break L323;
             }
            }
           } while(0);
           if ((label|0) == 235) {
            label = 0;
            if ($679) {
             label = 236;
             break L323;
            }
           }
           $654 = (($e2$1$i) + ($$24$i))|0;
           $655 = ($a$4$i|0)==($z$6$ph$i|0);
           if ($655) {
            $a$4$i = $z$6$ph$i;$e2$1$i = $654;
           } else {
            break;
           }
          }
          $656 = 1 << $$24$i;
          $657 = (($656) + -1)|0;
          $658 = 1000000000 >>> $$24$i;
          $a$586$i = $a$4$i;$carry4$089$i = 0;$k$687$i = $a$4$i;$rp$585$i = $rp$4$ph$i;
          while(1) {
           $659 = (($x$i) + ($k$687$i<<2)|0);
           $660 = HEAP32[$659>>2]|0;
           $661 = $660 & $657;
           $662 = $660 >>> $$24$i;
           $663 = (($662) + ($carry4$089$i))|0;
           HEAP32[$659>>2] = $663;
           $664 = Math_imul($661, $658)|0;
           $665 = ($k$687$i|0)==($a$586$i|0);
           $666 = ($663|0)==(0);
           $or$cond25$i = $665 & $666;
           $667 = (($k$687$i) + 1)|0;
           $668 = $667 & 127;
           $669 = (($rp$585$i) + -9)|0;
           $rp$6$i = $or$cond25$i ? $669 : $rp$585$i;
           $a$6$i = $or$cond25$i ? $668 : $a$586$i;
           $670 = ($668|0)==($z$6$ph$i|0);
           if ($670) {
            break;
           } else {
            $a$586$i = $a$6$i;$carry4$089$i = $664;$k$687$i = $668;$rp$585$i = $rp$6$i;
           }
          }
          $671 = ($664|0)==(0);
          if ($671) {
           $a$4$ph167$i = $a$6$i;$e2$1$ph166$i = $654;$rp$4$ph$i = $rp$6$i;
           continue;
          }
          $672 = ($673|0)==($a$6$i|0);
          if (!($672)) {
           break;
          }
          $681 = HEAP32[$678>>2]|0;
          $682 = $681 | 1;
          HEAP32[$678>>2] = $682;
          $a$4$ph167$i = $a$6$i;$e2$1$ph166$i = $654;$rp$4$ph$i = $rp$6$i;
         }
         $674 = (($x$i) + ($z$6$ph$i<<2)|0);
         HEAP32[$674>>2] = $664;
         $a$4$ph$i = $a$6$i;$e2$1$ph$i = $654;$rp$4$ph42$i = $rp$6$i;$z$6$ph$i = $673;
        }
        if ((label|0) == 236) {
         if ($646) {
          $683 = (($673) + -1)|0;
          $684 = (($x$i) + ($683<<2)|0);
          HEAP32[$684>>2] = 0;
          $686 = $z$6$ph$i;$z$10$i = $673;
         } else {
          $686 = $645;$z$10$i = $z$6$ph$i;
         }
        }
        $685 = (($x$i) + ($686<<2)|0);
        $687 = HEAP32[$685>>2]|0;
        $688 = (+($687>>>0));
        $689 = (($a$4$i) + 1)|0;
        $690 = $689 & 127;
        $691 = ($690|0)==($z$10$i|0);
        if ($691) {
         $758 = (($a$4$i) + 2)|0;
         $759 = $758 & 127;
         $760 = (($759) + -1)|0;
         $761 = (($x$i) + ($760<<2)|0);
         HEAP32[$761>>2] = 0;
         $z$10$1$i = $759;
        } else {
         $z$10$1$i = $z$10$i;
        }
        $762 = $688 * 1.0E+9;
        $763 = (($x$i) + ($690<<2)|0);
        $764 = HEAP32[$763>>2]|0;
        $765 = (+($764>>>0));
        $766 = $762 + $765;
        $718 = (+($sign$0|0));
        $694 = $718 * $766;
        $738 = (($e2$1$i) + 53)|0;
        $744 = (($738) - ($emin$0$ph))|0;
        $745 = ($744|0)<($bits$0$ph|0);
        $767 = ($744|0)<(0);
        $$$i = $767 ? 0 : $744;
        $denormal$0$i = $745&1;
        $$012$i = $745 ? $$$i : $bits$0$ph;
        $768 = ($$012$i|0)<(53);
        if ($768) {
         $692 = (105 - ($$012$i))|0;
         $693 = (+_scalbn(1.0,$692));
         HEAPF64[tempDoublePtr>>3] = $694;$695 = HEAP32[tempDoublePtr>>2]|0;
         $696 = HEAP32[tempDoublePtr+4>>2]|0;
         $fabs$i$i9 = (+Math_abs((+$693)));
         HEAPF64[tempDoublePtr>>3] = $fabs$i$i9;$697 = HEAP32[tempDoublePtr>>2]|0;
         $698 = HEAP32[tempDoublePtr+4>>2]|0;
         $699 = $696 & -2147483648;
         $700 = $699 | $698;
         HEAP32[tempDoublePtr>>2] = $697;HEAP32[tempDoublePtr+4>>2] = $700;$701 = +HEAPF64[tempDoublePtr>>3];
         $702 = (53 - ($$012$i))|0;
         $703 = (+_scalbn(1.0,$702));
         $704 = (+_fmodl($694,$703));
         $705 = $694 - $704;
         $706 = $701 + $705;
         $bias$0$i25 = $701;$frac$0$i = $704;$y$1$i24 = $706;
        } else {
         $bias$0$i25 = 0.0;$frac$0$i = 0.0;$y$1$i24 = $694;
        }
        $707 = (($a$4$i) + 2)|0;
        $708 = $707 & 127;
        $709 = ($708|0)==($z$10$1$i|0);
        do {
         if ($709) {
          $frac$3$i = $frac$0$i;
         } else {
          $710 = (($x$i) + ($708<<2)|0);
          $711 = HEAP32[$710>>2]|0;
          $712 = ($711>>>0)<(500000000);
          do {
           if ($712) {
            $713 = ($711|0)==(0);
            if ($713) {
             $714 = (($a$4$i) + 3)|0;
             $715 = $714 & 127;
             $716 = ($715|0)==($z$10$1$i|0);
             if ($716) {
              $frac$1$i = $frac$0$i;
              break;
             }
            }
            $717 = $718 * 0.25;
            $719 = $717 + $frac$0$i;
            $frac$1$i = $719;
           } else {
            $720 = ($711>>>0)>(500000000);
            if ($720) {
             $721 = $718 * 0.75;
             $722 = $721 + $frac$0$i;
             $frac$1$i = $722;
             break;
            }
            $723 = (($a$4$i) + 3)|0;
            $724 = $723 & 127;
            $725 = ($724|0)==($z$10$1$i|0);
            if ($725) {
             $726 = $718 * 0.5;
             $727 = $726 + $frac$0$i;
             $frac$1$i = $727;
             break;
            } else {
             $728 = $718 * 0.75;
             $729 = $728 + $frac$0$i;
             $frac$1$i = $729;
             break;
            }
           }
          } while(0);
          $730 = (53 - ($$012$i))|0;
          $731 = ($730|0)>(1);
          if (!($731)) {
           $frac$3$i = $frac$1$i;
           break;
          }
          $732 = (+_fmodl($frac$1$i,1.0));
          $733 = $732 != 0.0;
          if ($733) {
           $frac$3$i = $frac$1$i;
           break;
          }
          $734 = $frac$1$i + 1.0;
          $frac$3$i = $734;
         }
        } while(0);
        $735 = $y$1$i24 + $frac$3$i;
        $736 = $735 - $bias$0$i25;
        $737 = $738 & 2147483647;
        $739 = (-2 - ($sum$i))|0;
        $740 = ($737|0)>($739|0);
        do {
         if ($740) {
          $741 = (+Math_abs((+$736)));
          $742 = !($741 >= 9007199254740992.0);
          if ($742) {
           $denormal$2$i = $denormal$0$i;$e2$3$i = $e2$1$i;$y$2$i26 = $736;
          } else {
           $743 = ($$012$i|0)==($744|0);
           $or$cond26$i = $745 & $743;
           $denormal$1$i = $or$cond26$i ? 0 : $denormal$0$i;
           $746 = $736 * 0.5;
           $747 = (($e2$1$i) + 1)|0;
           $denormal$2$i = $denormal$1$i;$e2$3$i = $747;$y$2$i26 = $746;
          }
          $748 = (($e2$3$i) + 50)|0;
          $749 = ($748|0)>($376|0);
          if (!($749)) {
           $750 = ($denormal$2$i|0)!=(0);
           $751 = $frac$3$i != 0.0;
           $or$cond9$i27 = $751 & $750;
           if (!($or$cond9$i27)) {
            $e2$4$i = $e2$3$i;$y$3$i = $y$2$i26;
            break;
           }
          }
          $752 = HEAP32[6773]|0;
          $753 = ($752|0)==(0|0);
          if ($753) {
           $$0$i1 = 27136;
          } else {
           $754 = (_pthread_self()|0);
           $755 = ((($754)) + 64|0);
           $756 = HEAP32[$755>>2]|0;
           $$0$i1 = $756;
          }
          HEAP32[$$0$i1>>2] = 34;
          $e2$4$i = $e2$3$i;$y$3$i = $y$2$i26;
         } else {
          $e2$4$i = $e2$1$i;$y$3$i = $736;
         }
        } while(0);
        $757 = (+_scalbn($y$3$i,$e2$4$i));
        $$1$i = $757;
       }
      } while(0);
      $$0 = $$1$i;
      break L4;
      break;
     }
     default: {
      $117 = HEAP32[$1>>2]|0;
      $118 = ($117|0)==(0|0);
      if (!($118)) {
       $119 = HEAP32[$0>>2]|0;
       $120 = ((($119)) + -1|0);
       HEAP32[$0>>2] = $120;
      }
      $121 = HEAP32[6773]|0;
      $122 = ($121|0)==(0|0);
      if ($122) {
       $$0$i3 = 27136;
      } else {
       $123 = (_pthread_self()|0);
       $124 = ((($123)) + 64|0);
       $125 = HEAP32[$124>>2]|0;
       $$0$i3 = $125;
      }
      HEAP32[$$0$i3>>2] = 22;
      $126 = ((($f)) + 104|0);
      HEAP32[$126>>2] = 0;
      $127 = ((($f)) + 8|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = HEAP32[$0>>2]|0;
      $130 = (($128) - ($129))|0;
      $131 = ((($f)) + 108|0);
      HEAP32[$131>>2] = $130;
      HEAP32[$1>>2] = $128;
      $$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $39 = HEAP32[$1>>2]|0;
    $40 = ($39|0)==(0|0);
    if (!($40)) {
     $41 = HEAP32[$0>>2]|0;
     $42 = ((($41)) + -1|0);
     HEAP32[$0>>2] = $42;
    }
    $43 = ($pok|0)!=(0);
    $44 = ($i$0$lcssa>>>0)>(3);
    $or$cond9 = $43 & $44;
    if ($or$cond9) {
     $i$1 = $i$0$lcssa;
     while(1) {
      if (!($40)) {
       $45 = HEAP32[$0>>2]|0;
       $46 = ((($45)) + -1|0);
       HEAP32[$0>>2] = $46;
      }
      $47 = (($i$1) + -1)|0;
      $$old8 = ($47>>>0)>(3);
      if ($$old8) {
       $i$1 = $47;
      } else {
       break;
      }
     }
    }
   }
   $48 = (+($sign$0|0));
   $49 = $48 * inf;
   $50 = $49;
   $$0 = $50;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $c$0 = 0, $c$1$be = 0;
 var $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 switch ($10|0) {
 case 43: case 45:  {
  $11 = $9&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($12)) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
  break;
 }
 default: {
  $c$0 = $10;$neg$0 = 0;
 }
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $96 = -2147483648;$97 = 0;
  } else {
   $31 = HEAP32[$0>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$0>>2] = $32;
   $96 = -2147483648;$97 = 0;
  }
 } else {
  $c$112 = $c$0;$x$013 = 0;
  while(1) {
   $33 = ($x$013*10)|0;
   $34 = (($c$112) + -48)|0;
   $35 = (($34) + ($33))|0;
   $36 = HEAP32[$0>>2]|0;
   $37 = HEAP32[$2>>2]|0;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $39 = ((($36)) + 1|0);
    HEAP32[$0>>2] = $39;
    $40 = HEAP8[$36>>0]|0;
    $41 = $40&255;
    $c$1$be = $41;
   } else {
    $42 = (___shgetc($f)|0);
    $c$1$be = $42;
   }
   $43 = (($c$1$be) + -48)|0;
   $44 = ($43>>>0)<(10);
   $45 = ($35|0)<(214748364);
   $46 = $44 & $45;
   if ($46) {
    $c$112 = $c$1$be;$x$013 = $35;
   } else {
    break;
   }
  }
  $47 = ($35|0)<(0);
  $48 = $47 << 31 >> 31;
  if ($44) {
   $51 = $35;$52 = $48;$c$27 = $c$1$be;
   while(1) {
    $53 = (___muldi3(($51|0),($52|0),10,0)|0);
    $54 = tempRet0;
    $55 = ($c$27|0)<(0);
    $56 = $55 << 31 >> 31;
    $57 = (_i64Add(($c$27|0),($56|0),-48,-1)|0);
    $58 = tempRet0;
    $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
    $60 = tempRet0;
    $61 = HEAP32[$0>>2]|0;
    $62 = HEAP32[$2>>2]|0;
    $63 = ($61>>>0)<($62>>>0);
    if ($63) {
     $64 = ((($61)) + 1|0);
     HEAP32[$0>>2] = $64;
     $65 = HEAP8[$61>>0]|0;
     $66 = $65&255;
     $c$2$be = $66;
    } else {
     $67 = (___shgetc($f)|0);
     $c$2$be = $67;
    }
    $68 = (($c$2$be) + -48)|0;
    $69 = ($68>>>0)<(10);
    $70 = ($60|0)<(21474836);
    $71 = ($59>>>0)<(2061584302);
    $72 = ($60|0)==(21474836);
    $73 = $72 & $71;
    $74 = $70 | $73;
    $75 = $69 & $74;
    if ($75) {
     $51 = $59;$52 = $60;$c$27 = $c$2$be;
    } else {
     $90 = $59;$91 = $60;$c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $90 = $35;$91 = $48;$c$2$lcssa = $c$1$be;
  }
  $49 = (($c$2$lcssa) + -48)|0;
  $50 = ($49>>>0)<(10);
  if ($50) {
   while(1) {
    $76 = HEAP32[$0>>2]|0;
    $77 = HEAP32[$2>>2]|0;
    $78 = ($76>>>0)<($77>>>0);
    if ($78) {
     $79 = ((($76)) + 1|0);
     HEAP32[$0>>2] = $79;
     $80 = HEAP8[$76>>0]|0;
     $81 = $80&255;
     $c$3$be = $81;
    } else {
     $82 = (___shgetc($f)|0);
     $c$3$be = $82;
    }
    $83 = (($c$3$be) + -48)|0;
    $84 = ($83>>>0)<(10);
    if (!($84)) {
     break;
    }
   }
  }
  $85 = HEAP32[$2>>2]|0;
  $86 = ($85|0)==(0|0);
  if (!($86)) {
   $87 = HEAP32[$0>>2]|0;
   $88 = ((($87)) + -1|0);
   HEAP32[$0>>2] = $88;
  }
  $89 = ($neg$0|0)!=(0);
  $92 = (_i64Subtract(0,0,($90|0),($91|0))|0);
  $93 = tempRet0;
  $94 = $89 ? $92 : $90;
  $95 = $89 ? $93 : $91;
  $96 = $95;$97 = $94;
 }
 tempRet0 = ($96);
 return ($97|0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$lcssa7$i = 0, $$x$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $ex$0$lcssa$i = 0, $ex$026$i = 0, $ex$1$i = 0, $ex$2$lcssa$i = 0, $ex$212$i = 0, $ex$3$lcssa$i = 0, $ex$39$i = 0, $ey$0$lcssa$i = 0, $ey$020$i = 0, $ey$1$ph$i = 0, $fabs$i = 0.0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 L1: do {
  if ($15) {
   label = 3;
  } else {
   $fabs$i = (+Math_abs((+$y)));
   HEAPF64[tempDoublePtr>>3] = $fabs$i;$16 = HEAP32[tempDoublePtr>>2]|0;
   $17 = HEAP32[tempDoublePtr+4>>2]|0;
   $18 = ($17>>>0)>(2146435072);
   $19 = ($16>>>0)>(0);
   $20 = ($17|0)==(2146435072);
   $21 = $20 & $19;
   $22 = $18 | $21;
   $23 = ($6|0)==(2047);
   $or$cond$i = $22 | $23;
   if ($or$cond$i) {
    label = 3;
   } else {
    $26 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $27 = tempRet0;
    $28 = ($27>>>0)>($12>>>0);
    $29 = ($26>>>0)>($11>>>0);
    $30 = ($27|0)==($12|0);
    $31 = $30 & $29;
    $32 = $28 | $31;
    if (!($32)) {
     $33 = ($26|0)==($11|0);
     $34 = ($27|0)==($12|0);
     $35 = $33 & $34;
     $36 = $x * 0.0;
     $$x$i = $35 ? $36 : $x;
     $153 = $$x$i;
     break;
    }
    $37 = ($6|0)==(0);
    if ($37) {
     $38 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $39 = tempRet0;
     $40 = ($39|0)>(-1);
     $41 = ($38>>>0)>(4294967295);
     $42 = ($39|0)==(-1);
     $43 = $42 & $41;
     $44 = $40 | $43;
     if ($44) {
      $46 = $38;$47 = $39;$ex$026$i = 0;
      while(1) {
       $45 = (($ex$026$i) + -1)|0;
       $48 = (_bitshift64Shl(($46|0),($47|0),1)|0);
       $49 = tempRet0;
       $50 = ($49|0)>(-1);
       $51 = ($48>>>0)>(4294967295);
       $52 = ($49|0)==(-1);
       $53 = $52 & $51;
       $54 = $50 | $53;
       if ($54) {
        $46 = $48;$47 = $49;$ex$026$i = $45;
       } else {
        $ex$0$lcssa$i = $45;
        break;
       }
      }
     } else {
      $ex$0$lcssa$i = 0;
     }
     $55 = (1 - ($ex$0$lcssa$i))|0;
     $56 = (_bitshift64Shl(($0|0),($1|0),($55|0))|0);
     $57 = tempRet0;
     $84 = $56;$85 = $57;$ex$1$i = $ex$0$lcssa$i;
    } else {
     $58 = $1 & 1048575;
     $59 = $58 | 1048576;
     $84 = $0;$85 = $59;$ex$1$i = $6;
    }
    $60 = ($9|0)==(0);
    if ($60) {
     $61 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $62 = tempRet0;
     $63 = ($62|0)>(-1);
     $64 = ($61>>>0)>(4294967295);
     $65 = ($62|0)==(-1);
     $66 = $65 & $64;
     $67 = $63 | $66;
     if ($67) {
      $69 = $61;$70 = $62;$ey$020$i = 0;
      while(1) {
       $68 = (($ey$020$i) + -1)|0;
       $71 = (_bitshift64Shl(($69|0),($70|0),1)|0);
       $72 = tempRet0;
       $73 = ($72|0)>(-1);
       $74 = ($71>>>0)>(4294967295);
       $75 = ($72|0)==(-1);
       $76 = $75 & $74;
       $77 = $73 | $76;
       if ($77) {
        $69 = $71;$70 = $72;$ey$020$i = $68;
       } else {
        $ey$0$lcssa$i = $68;
        break;
       }
      }
     } else {
      $ey$0$lcssa$i = 0;
     }
     $78 = (1 - ($ey$0$lcssa$i))|0;
     $79 = (_bitshift64Shl(($2|0),($3|0),($78|0))|0);
     $80 = tempRet0;
     $86 = $79;$87 = $80;$ey$1$ph$i = $ey$0$lcssa$i;
    } else {
     $81 = $3 & 1048575;
     $82 = $81 | 1048576;
     $86 = $2;$87 = $82;$ey$1$ph$i = $9;
    }
    $83 = ($ex$1$i|0)>($ey$1$ph$i|0);
    $88 = (_i64Subtract(($84|0),($85|0),($86|0),($87|0))|0);
    $89 = tempRet0;
    $90 = ($89|0)>(-1);
    $91 = ($88>>>0)>(4294967295);
    $92 = ($89|0)==(-1);
    $93 = $92 & $91;
    $94 = $90 | $93;
    L23: do {
     if ($83) {
      $154 = $94;$155 = $88;$156 = $89;$96 = $84;$98 = $85;$ex$212$i = $ex$1$i;
      while(1) {
       if ($154) {
        $95 = ($96|0)==($86|0);
        $97 = ($98|0)==($87|0);
        $99 = $95 & $97;
        if ($99) {
         break;
        } else {
         $101 = $155;$102 = $156;
        }
       } else {
        $101 = $96;$102 = $98;
       }
       $103 = (_bitshift64Shl(($101|0),($102|0),1)|0);
       $104 = tempRet0;
       $105 = (($ex$212$i) + -1)|0;
       $106 = ($105|0)>($ey$1$ph$i|0);
       $107 = (_i64Subtract(($103|0),($104|0),($86|0),($87|0))|0);
       $108 = tempRet0;
       $109 = ($108|0)>(-1);
       $110 = ($107>>>0)>(4294967295);
       $111 = ($108|0)==(-1);
       $112 = $111 & $110;
       $113 = $109 | $112;
       if ($106) {
        $154 = $113;$155 = $107;$156 = $108;$96 = $103;$98 = $104;$ex$212$i = $105;
       } else {
        $$lcssa7$i = $113;$115 = $103;$117 = $104;$157 = $107;$158 = $108;$ex$2$lcssa$i = $105;
        break L23;
       }
      }
      $100 = $x * 0.0;
      $153 = $100;
      break L1;
     } else {
      $$lcssa7$i = $94;$115 = $84;$117 = $85;$157 = $88;$158 = $89;$ex$2$lcssa$i = $ex$1$i;
     }
    } while(0);
    if ($$lcssa7$i) {
     $114 = ($115|0)==($86|0);
     $116 = ($117|0)==($87|0);
     $118 = $114 & $116;
     if ($118) {
      $126 = $x * 0.0;
      $153 = $126;
      break;
     } else {
      $120 = $158;$122 = $157;
     }
    } else {
     $120 = $117;$122 = $115;
    }
    $119 = ($120>>>0)<(1048576);
    $121 = ($122>>>0)<(0);
    $123 = ($120|0)==(1048576);
    $124 = $123 & $121;
    $125 = $119 | $124;
    if ($125) {
     $127 = $122;$128 = $120;$ex$39$i = $ex$2$lcssa$i;
     while(1) {
      $129 = (_bitshift64Shl(($127|0),($128|0),1)|0);
      $130 = tempRet0;
      $131 = (($ex$39$i) + -1)|0;
      $132 = ($130>>>0)<(1048576);
      $133 = ($129>>>0)<(0);
      $134 = ($130|0)==(1048576);
      $135 = $134 & $133;
      $136 = $132 | $135;
      if ($136) {
       $127 = $129;$128 = $130;$ex$39$i = $131;
      } else {
       $138 = $129;$139 = $130;$ex$3$lcssa$i = $131;
       break;
      }
     }
    } else {
     $138 = $122;$139 = $120;$ex$3$lcssa$i = $ex$2$lcssa$i;
    }
    $137 = ($ex$3$lcssa$i|0)>(0);
    if ($137) {
     $140 = (_i64Add(($138|0),($139|0),0,-1048576)|0);
     $141 = tempRet0;
     $142 = (_bitshift64Shl(($ex$3$lcssa$i|0),0,52)|0);
     $143 = tempRet0;
     $144 = $140 | $142;
     $145 = $141 | $143;
     $150 = $145;$151 = $144;
    } else {
     $146 = (1 - ($ex$3$lcssa$i))|0;
     $147 = (_bitshift64Lshr(($138|0),($139|0),($146|0))|0);
     $148 = tempRet0;
     $150 = $148;$151 = $147;
    }
    $149 = $150 | $10;
    HEAP32[tempDoublePtr>>2] = $151;HEAP32[tempDoublePtr+4>>2] = $149;$152 = +HEAPF64[tempDoublePtr>>3];
    $153 = $152;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $24 = $x * $y;
  $25 = $24 / $24;
  $153 = $25;
 }
 return (+$153);
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f>>2]|0;
 $1 = $0 & 1;
 $2 = ($1|0)!=(0);
 if (!($2)) {
  ___lock(((27120)|0));
  $3 = ((($f)) + 52|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  $6 = $4;
  $$pre = ((($f)) + 56|0);
  if (!($5)) {
   $7 = HEAP32[$$pre>>2]|0;
   $8 = ((($4)) + 56|0);
   HEAP32[$8>>2] = $7;
  }
  $9 = HEAP32[$$pre>>2]|0;
  $10 = ($9|0)==(0|0);
  $11 = $9;
  if (!($10)) {
   $12 = ((($9)) + 52|0);
   HEAP32[$12>>2] = $6;
  }
  $13 = HEAP32[(27116)>>2]|0;
  $14 = ($13|0)==($f|0);
  if ($14) {
   HEAP32[(27116)>>2] = $11;
  }
  ___unlock(((27120)|0));
 }
 $15 = (_fflush($f)|0);
 $16 = ((($f)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (FUNCTION_TABLE_ii[$17 & 63]($f)|0);
 $19 = $18 | $15;
 $20 = ((($f)) + 92|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  _free($21);
 }
 if (!($2)) {
  _free($f);
 }
 return ($19|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 if ($0) {
  $2 = HEAP32[2499]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   $16 = 0;
  } else {
   $4 = HEAP32[2499]|0;
   $5 = (_fflush($4)|0);
   $16 = $5;
  }
  ___lock(((27120)|0));
  $$012 = HEAP32[(27116)>>2]|0;
  $6 = ($$012|0)==(0|0);
  if ($6) {
   $r$0$lcssa = $16;
  } else {
   $$014 = $$012;$r$03 = $16;
   while(1) {
    $7 = ((($$014)) + 20|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ((($$014)) + 28|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($8>>>0)>($10>>>0);
    if ($11) {
     $12 = (___fflush_unlocked($$014)|0);
     $13 = $12 | $r$03;
     $r$1 = $13;
    } else {
     $r$1 = $r$03;
    }
    $14 = ((($$014)) + 56|0);
    $$01 = HEAP32[$14>>2]|0;
    $15 = ($$01|0)==(0|0);
    if ($15) {
     $r$0$lcssa = $r$1;
     break;
    } else {
     $$014 = $$01;$r$03 = $r$1;
    }
   }
  }
  ___unlock(((27120)|0));
  $$0 = $r$0$lcssa;
 } else {
  $1 = (___fflush_unlocked($f)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 127]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 127]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _ntohs($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n&65535;
 $1 = $0 << 8;
 $2 = $0 >>> 8;
 $3 = $1 | $2;
 $4 = $3&65535;
 return ($4|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return;
}
function _htonl($n) {
 $n = $n|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_llvm_bswap_i32(($n|0))|0);
 return ($0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$0$i = 0, $$0$i29 = 0, $$01$i5$i$ph = 0, $$02$i$i = 0, $$02$i3$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $4$phi = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $head$0$lcssa = 0, $head$033 = 0, $head$149 = 0, $i$0 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0;
 var $nTrailingZeros$03$i2$i = 0, $or$cond = 0, $or$cond38 = 0, $or$cond3848 = 0, $or$cond47 = 0, $p$sroa$0$0 = 0, $p$sroa$0$1 = 0, $p$sroa$22$0 = 0, $p$sroa$22$1 = 0, $p$sroa$22$2 = 0, $pshift$0$lcssa = 0, $pshift$034 = 0, $pshift$1 = 0, $pshift$250 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $lp = sp;
 $0 = Math_imul($width, $nel)|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = ((($lp)) + 4|0);
  HEAP32[$2>>2] = $width;
  HEAP32[$lp>>2] = $width;
  $4 = $width;$6 = $width;$i$0 = 2;
  while(1) {
   $3 = (($4) + ($width))|0;
   $5 = (($3) + ($6))|0;
   $7 = (($lp) + ($i$0<<2)|0);
   HEAP32[$7>>2] = $5;
   $8 = ($5>>>0)<($0>>>0);
   $9 = (($i$0) + 1)|0;
   if ($8) {
    $4$phi = $6;$6 = $5;$i$0 = $9;$4 = $4$phi;
   } else {
    break;
   }
  }
  $10 = (0 - ($width))|0;
  $11 = (($base) + ($0)|0);
  $12 = (($11) + ($10)|0);
  $13 = ($12>>>0)>($base>>>0);
  if ($13) {
   $14 = $12;
   $head$033 = $base;$p$sroa$0$0 = 1;$p$sroa$22$0 = 0;$pshift$034 = 1;
   while(1) {
    $15 = $p$sroa$0$0 & 3;
    $16 = ($15|0)==(3);
    do {
     if ($16) {
      _sift($head$033,$width,$cmp,$pshift$034,$lp);
      $17 = $p$sroa$0$0 >>> 2;
      $18 = $p$sroa$22$0 << 30;
      $19 = $18 | $17;
      $20 = $p$sroa$22$0 >>> 2;
      $21 = (($pshift$034) + 2)|0;
      $43 = $19;$p$sroa$22$1 = $20;$pshift$1 = $21;
     } else {
      $22 = (($pshift$034) + -1)|0;
      $23 = (($lp) + ($22<<2)|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = $head$033;
      $26 = (($14) - ($25))|0;
      $27 = ($24>>>0)<($26>>>0);
      if ($27) {
       _sift($head$033,$width,$cmp,$pshift$034,$lp);
      } else {
       _trinkle($head$033,$width,$cmp,$p$sroa$0$0,$p$sroa$22$0,$pshift$034,0,$lp);
      }
      $28 = ($pshift$034|0)==(1);
      if ($28) {
       $29 = $p$sroa$22$0 << 1;
       $30 = $p$sroa$0$0 >>> 31;
       $31 = $30 | $29;
       $32 = $p$sroa$0$0 << 1;
       $43 = $32;$p$sroa$22$1 = $31;$pshift$1 = 0;
       break;
      } else {
       $33 = ($22>>>0)>(31);
       $34 = (($pshift$034) + -33)|0;
       $35 = $33 ? 0 : $p$sroa$0$0;
       $36 = $33 ? $p$sroa$0$0 : $p$sroa$22$0;
       $$0$i = $33 ? $34 : $22;
       $37 = $36 << $$0$i;
       $38 = (32 - ($$0$i))|0;
       $39 = $35 >>> $38;
       $40 = $39 | $37;
       $41 = $35 << $$0$i;
       $43 = $41;$p$sroa$22$1 = $40;$pshift$1 = 1;
       break;
      }
     }
    } while(0);
    $42 = $43 | 1;
    $44 = (($head$033) + ($width)|0);
    $45 = ($44>>>0)<($12>>>0);
    if ($45) {
     $head$033 = $44;$p$sroa$0$0 = $42;$p$sroa$22$0 = $p$sroa$22$1;$pshift$034 = $pshift$1;
    } else {
     $head$0$lcssa = $44;$p$sroa$0$1 = $42;$p$sroa$22$2 = $p$sroa$22$1;$pshift$0$lcssa = $pshift$1;
     break;
    }
   }
  } else {
   $head$0$lcssa = $base;$p$sroa$0$1 = 1;$p$sroa$22$2 = 0;$pshift$0$lcssa = 1;
  }
  _trinkle($head$0$lcssa,$width,$cmp,$p$sroa$0$1,$p$sroa$22$2,$pshift$0$lcssa,0,$lp);
  $46 = ($pshift$0$lcssa|0)==(1);
  $47 = ($p$sroa$0$1|0)==(1);
  $or$cond47 = $46 & $47;
  $48 = ($p$sroa$22$2|0)==(0);
  $or$cond3848 = $or$cond47 & $48;
  if (!($or$cond3848)) {
   $106 = $48;$51 = $p$sroa$0$1;$60 = $p$sroa$22$2;$head$149 = $head$0$lcssa;$pshift$250 = $pshift$0$lcssa;
   while(1) {
    $49 = ($pshift$250|0)<(2);
    if (!($49)) {
     $71 = $60 << 2;
     $72 = $51 >>> 30;
     $73 = $72 | $71;
     $74 = (($pshift$250) + -2)|0;
     $75 = $51 << 1;
     $76 = $75 & 2147483646;
     $77 = $72 << 31;
     $78 = $76 | $77;
     $79 = $78 ^ 3;
     $80 = $73 >>> 1;
     $81 = (($lp) + ($74<<2)|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (0 - ($82))|0;
     $84 = (($head$149) + ($83)|0);
     $85 = (($84) + ($10)|0);
     $86 = (($pshift$250) + -1)|0;
     _trinkle($85,$width,$cmp,$79,$80,$86,1,$lp);
     $87 = $80 << 1;
     $88 = $72 & 1;
     $89 = $88 | $87;
     $90 = $79 << 1;
     $91 = $90 | 1;
     $92 = (($head$149) + ($10)|0);
     _trinkle($92,$width,$cmp,$91,$89,$74,1,$lp);
     $93 = ($89|0)==(0);
     $106 = $93;$51 = $91;$60 = $89;$head$149 = $92;$pshift$250 = $74;
     continue;
    }
    $50 = (($51) + -1)|0;
    $52 = ($50|0)==(0);
    do {
     if ($52) {
      $70 = 32;
      label = 25;
     } else {
      $53 = $50 & 1;
      $54 = ($53|0)==(0);
      if ($54) {
       $$02$i$i = $50;$nTrailingZeros$03$i$i = 0;
       while(1) {
        $55 = (($nTrailingZeros$03$i$i) + 1)|0;
        $56 = $$02$i$i >>> 1;
        $57 = $56 & 1;
        $58 = ($57|0)==(0);
        if ($58) {
         $$02$i$i = $56;$nTrailingZeros$03$i$i = $55;
        } else {
         $68 = $55;
         break;
        }
       }
      } else {
       if ($106) {
        $$01$i5$i$ph = 32;
       } else {
        $59 = $60 & 1;
        $61 = ($59|0)==(0);
        if ($61) {
         $$02$i3$i = $60;$nTrailingZeros$03$i2$i = 0;
        } else {
         $$0$i29 = 0;$102 = 0;$95 = $51;$98 = $60;
         break;
        }
        while(1) {
         $62 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $63 = $$02$i3$i >>> 1;
         $64 = $63 & 1;
         $65 = ($64|0)==(0);
         if ($65) {
          $$02$i3$i = $63;$nTrailingZeros$03$i2$i = $62;
         } else {
          $$01$i5$i$ph = $62;
          break;
         }
        }
       }
       $66 = (($$01$i5$i$ph) + 32)|0;
       $68 = $66;
      }
      $67 = ($68>>>0)>(31);
      if ($67) {
       $70 = $68;
       label = 25;
      } else {
       $$0$i29 = $68;$102 = $68;$95 = $51;$98 = $60;
      }
     }
    } while(0);
    if ((label|0) == 25) {
     label = 0;
     $69 = (($70) + -32)|0;
     $$0$i29 = $69;$102 = $70;$95 = $60;$98 = 0;
    }
    $94 = $95 >>> $$0$i29;
    $96 = (32 - ($$0$i29))|0;
    $97 = $98 << $96;
    $99 = $97 | $94;
    $100 = $98 >>> $$0$i29;
    $101 = (($102) + ($pshift$250))|0;
    $$pre = (($head$149) + ($10)|0);
    $103 = ($101|0)==(1);
    $104 = ($99|0)==(1);
    $or$cond = $103 & $104;
    $105 = ($100|0)==(0);
    $or$cond38 = $or$cond & $105;
    if ($or$cond38) {
     break;
    } else {
     $106 = $105;$51 = $99;$60 = $100;$head$149 = $$pre;$pshift$250 = $101;
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _sift($head,$width,$cmp,$pshift,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pshift = $pshift|0;
 $lp = $lp|0;
 var $$0$be = 0, $$01$be = 0, $$012 = 0, $$03 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $i$0$lcssa = 0, $i$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = ($pshift|0)>(1);
 L1: do {
  if ($0) {
   $1 = (0 - ($width))|0;
   $$012 = $pshift;$$03 = $head;$8 = $head;$i$04 = 1;
   while(1) {
    $2 = (($$03) + ($1)|0);
    $3 = (($$012) + -2)|0;
    $4 = (($lp) + ($3<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (0 - ($5))|0;
    $7 = (($2) + ($6)|0);
    $9 = (FUNCTION_TABLE_iii[$cmp & 127]($8,$7)|0);
    $10 = ($9|0)>(-1);
    if ($10) {
     $11 = (FUNCTION_TABLE_iii[$cmp & 127]($8,$2)|0);
     $12 = ($11|0)>(-1);
     if ($12) {
      $i$0$lcssa = $i$04;
      break L1;
     }
    }
    $13 = (FUNCTION_TABLE_iii[$cmp & 127]($7,$2)|0);
    $14 = ($13|0)>(-1);
    $15 = (($i$04) + 1)|0;
    $16 = (($ar) + ($i$04<<2)|0);
    if ($14) {
     HEAP32[$16>>2] = $7;
     $17 = (($$012) + -1)|0;
     $$0$be = $7;$$01$be = $17;
    } else {
     HEAP32[$16>>2] = $2;
     $$0$be = $2;$$01$be = $3;
    }
    $18 = ($$01$be|0)>(1);
    if (!($18)) {
     $i$0$lcssa = $15;
     break L1;
    }
    $$pre = HEAP32[$ar>>2]|0;
    $$012 = $$01$be;$$03 = $$0$be;$8 = $$pre;$i$04 = $15;
   }
  } else {
   $i$0$lcssa = 1;
  }
 } while(0);
 _cycle($width,$ar,$i$0$lcssa);
 STACKTOP = sp;return;
}
function _cycle($width,$ar,$n) {
 $width = $width|0;
 $ar = $ar|0;
 $n = $n|0;
 var $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0;
 var $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 $0 = ($n|0)<(2);
 L1: do {
  if (!($0)) {
   $1 = (($ar) + ($n<<2)|0);
   HEAP32[$1>>2] = $tmp;
   $2 = ($width|0)==(0);
   if (!($2)) {
    $$02 = $width;$6 = $tmp;
    while(1) {
     $3 = ($$02>>>0)>(256);
     $4 = $3 ? 256 : $$02;
     $5 = HEAP32[$ar>>2]|0;
     _memcpy(($6|0),($5|0),($4|0))|0;
     $i$01 = 0;
     while(1) {
      $7 = (($ar) + ($i$01<<2)|0);
      $8 = HEAP32[$7>>2]|0;
      $9 = (($i$01) + 1)|0;
      $10 = (($ar) + ($9<<2)|0);
      $11 = HEAP32[$10>>2]|0;
      _memcpy(($8|0),($11|0),($4|0))|0;
      $12 = HEAP32[$7>>2]|0;
      $13 = (($12) + ($4)|0);
      HEAP32[$7>>2] = $13;
      $exitcond = ($9|0)==($n|0);
      if ($exitcond) {
       break;
      } else {
       $i$01 = $9;
      }
     }
     $14 = ($$02|0)==($4|0);
     if ($14) {
      break L1;
     }
     $15 = (($$02) - ($4))|0;
     $$pre = HEAP32[$1>>2]|0;
     $$02 = $15;$6 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _trinkle($head,$width,$cmp,$pp$val,$pp$1$val,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp$val = $pp$val|0;
 $pp$1$val = $pp$1$val|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$0$i = 0, $$0$lcssa32 = 0, $$01$i5$i$ph = 0, $$01245 = 0, $$01245$phi = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$lcssa34 = 0, $$021047 = 0, $$03948 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $i$0$lcssa33 = 0, $i$01146 = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $or$cond = 0;
 var $p$sroa$0$0849 = 0, $p$sroa$8$0650 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = (0 - ($width))|0;
 $1 = ($pp$val|0)!=(1);
 $2 = ($pp$1$val|0)!=(0);
 $3 = $2 | $1;
 L1: do {
  if ($3) {
   $4 = (($lp) + ($pshift<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (0 - ($5))|0;
   $7 = (($head) + ($6)|0);
   $8 = (FUNCTION_TABLE_iii[$cmp & 127]($7,$head)|0);
   $9 = ($8|0)<(1);
   if ($9) {
    label = 18;
   } else {
    $phitmp = ($trusty|0)==(0);
    $$01245 = $head;$$021047 = $pshift;$$03948 = $phitmp;$15 = $7;$i$01146 = 1;$p$sroa$0$0849 = $pp$val;$p$sroa$8$0650 = $pp$1$val;
    while(1) {
     $10 = ($$021047|0)>(1);
     $or$cond = $$03948 & $10;
     if ($or$cond) {
      $11 = (($$01245) + ($0)|0);
      $12 = (($$021047) + -2)|0;
      $13 = (($lp) + ($12<<2)|0);
      $14 = HEAP32[$13>>2]|0;
      $16 = (FUNCTION_TABLE_iii[$cmp & 127]($11,$15)|0);
      $17 = ($16|0)>(-1);
      if ($17) {
       $$0$lcssa32 = $$01245;$$02$lcssa34 = $$021047;$i$0$lcssa33 = $i$01146;
       label = 19;
       break L1;
      }
      $18 = (0 - ($14))|0;
      $19 = (($11) + ($18)|0);
      $20 = (FUNCTION_TABLE_iii[$cmp & 127]($19,$15)|0);
      $21 = ($20|0)>(-1);
      if ($21) {
       $$0$lcssa32 = $$01245;$$02$lcssa34 = $$021047;$i$0$lcssa33 = $i$01146;
       label = 19;
       break L1;
      }
     }
     $22 = (($i$01146) + 1)|0;
     $23 = (($ar) + ($i$01146<<2)|0);
     HEAP32[$23>>2] = $15;
     $24 = (($p$sroa$0$0849) + -1)|0;
     $25 = ($24|0)==(0);
     do {
      if ($25) {
       $43 = 32;
       label = 15;
      } else {
       $26 = $24 & 1;
       $27 = ($26|0)==(0);
       if ($27) {
        $$02$i$i = $24;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $28 = (($nTrailingZeros$03$i$i) + 1)|0;
         $29 = $$02$i$i >>> 1;
         $30 = $29 & 1;
         $31 = ($30|0)==(0);
         if ($31) {
          $$02$i$i = $29;$nTrailingZeros$03$i$i = $28;
         } else {
          $41 = $28;
          break;
         }
        }
       } else {
        $32 = ($p$sroa$8$0650|0)==(0);
        if ($32) {
         $$01$i5$i$ph = 32;
        } else {
         $33 = $p$sroa$8$0650 & 1;
         $34 = ($33|0)==(0);
         if ($34) {
          $$02$i3$i = $p$sroa$8$0650;$nTrailingZeros$03$i2$i = 0;
         } else {
          $$0$i = 0;$45 = $p$sroa$0$0849;$48 = $p$sroa$8$0650;$52 = 0;
          break;
         }
         while(1) {
          $35 = (($nTrailingZeros$03$i2$i) + 1)|0;
          $36 = $$02$i3$i >>> 1;
          $37 = $36 & 1;
          $38 = ($37|0)==(0);
          if ($38) {
           $$02$i3$i = $36;$nTrailingZeros$03$i2$i = $35;
          } else {
           $$01$i5$i$ph = $35;
           break;
          }
         }
        }
        $39 = (($$01$i5$i$ph) + 32)|0;
        $41 = $39;
       }
       $40 = ($41>>>0)>(31);
       if ($40) {
        $43 = $41;
        label = 15;
       } else {
        $$0$i = $41;$45 = $p$sroa$0$0849;$48 = $p$sroa$8$0650;$52 = $41;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      label = 0;
      $42 = (($43) + -32)|0;
      $$0$i = $42;$45 = $p$sroa$8$0650;$48 = 0;$52 = $43;
     }
     $44 = $45 >>> $$0$i;
     $46 = (32 - ($$0$i))|0;
     $47 = $48 << $46;
     $49 = $47 | $44;
     $50 = $48 >>> $$0$i;
     $51 = (($52) + ($$021047))|0;
     $53 = ($49|0)!=(1);
     $54 = ($50|0)!=(0);
     $55 = $54 | $53;
     if (!($55)) {
      $$0$lcssa32 = $15;$$02$lcssa34 = $51;$i$0$lcssa33 = $22;
      label = 19;
      break L1;
     }
     $$pre = HEAP32[$ar>>2]|0;
     $56 = (($lp) + ($51<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (0 - ($57))|0;
     $59 = (($15) + ($58)|0);
     $60 = (FUNCTION_TABLE_iii[$cmp & 127]($59,$$pre)|0);
     $61 = ($60|0)<(1);
     if ($61) {
      $$0$lcssa32 = $15;$$02$lcssa34 = $51;$i$0$lcssa33 = $22;
      label = 19;
      break;
     } else {
      $$01245$phi = $15;$$021047 = $51;$$03948 = 1;$15 = $59;$i$01146 = $22;$p$sroa$0$0849 = $49;$p$sroa$8$0650 = $50;$$01245 = $$01245$phi;
     }
    }
   }
  } else {
   label = 18;
  }
 } while(0);
 if ((label|0) == 18) {
  $62 = ($trusty|0)==(0);
  if ($62) {
   $$0$lcssa32 = $head;$$02$lcssa34 = $pshift;$i$0$lcssa33 = 1;
   label = 19;
  }
 }
 if ((label|0) == 19) {
  _cycle($width,$ar,$i$0$lcssa33);
  _sift($$0$lcssa32,$width,$cmp,$$02$lcssa34,$lp);
 }
 STACKTOP = sp;return;
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i12 = 0, $$0$lcssa$i4 = 0, $$01$i = 0, $$02$i = 0, $$02$i8 = 0, $$03$i = 0, $$03$i2 = 0, $$3$i = 0, $$lcssa$i = 0, $$lcssa$i11 = 0, $$pr$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $byteset$i = 0, $div$i = 0, $div5$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i7 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa145$i = 0, $ip$0$ph78$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph$lcssa$i = 0, $ip$1$ph57$i = 0, $jp$0$ph15$ph72$i = 0, $jp$0$ph1567$i = 0, $jp$0$ph79$i = 0, $jp$1$ph11$ph51$i = 0;
 var $jp$1$ph1146$i = 0, $jp$1$ph58$i = 0, $k$061$i = 0, $k$141$i = 0, $k$2$i = 0, $k$340$i = 0, $k$4$i = 0, $l$04$i = 0, $l$082$i = 0, $mem$0$i = 0, $mem0$0$i = 0, $or$cond$i = 0, $or$cond$i2 = 0, $or$cond$i9 = 0, $or$cond6$i = 0, $p$0$ph$ph$lcssa34$i = 0, $p$0$ph$ph$lcssa34146$i = 0, $p$0$ph$ph73$i = 0, $p$1$p$0$i = 0, $p$1$ph$ph$lcssa25$i = 0;
 var $p$1$ph$ph52$i = 0, $p$3$i = 0, $r$05$i = 0, $shift$i = 0, $z$0$i = 0, $z$3$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $$0 = $h;
  } else {
   $2 = $0 << 24 >> 24;
   $3 = (___strchrnul($h,$2)|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = ($4<<24>>24)==($0<<24>>24);
   $6 = $5 ? $3 : 0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$0 = 0;
   } else {
    $8 = ((($n)) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(0);
    if ($10) {
     $$0 = $6;
    } else {
     $11 = ((($6)) + 1|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(0);
     if ($13) {
      $$0 = 0;
     } else {
      $14 = ((($n)) + 2|0);
      $15 = HEAP8[$14>>0]|0;
      $16 = ($15<<24>>24)==(0);
      if ($16) {
       $17 = $0&255;
       $18 = $17 << 8;
       $19 = $9&255;
       $20 = $19 | $18;
       $21 = HEAP8[$6>>0]|0;
       $22 = $21&255;
       $23 = $22 << 8;
       $24 = $12&255;
       $25 = $23 | $24;
       $$01$i = $11;$242 = $12;$hw$0$in2$i = $25;
       while(1) {
        $26 = $hw$0$in2$i & 65535;
        $27 = ($26|0)==($20|0);
        if ($27) {
         $$0$lcssa$i = $$01$i;$35 = $242;
         break;
        }
        $28 = $26 << 8;
        $29 = ((($$01$i)) + 1|0);
        $30 = HEAP8[$29>>0]|0;
        $31 = $30&255;
        $32 = $31 | $28;
        $33 = ($30<<24>>24)==(0);
        if ($33) {
         $$0$lcssa$i = $29;$35 = 0;
         break;
        } else {
         $$01$i = $29;$242 = $30;$hw$0$in2$i = $32;
        }
       }
       $34 = ($35<<24>>24)!=(0);
       $36 = ((($$0$lcssa$i)) + -1|0);
       $37 = $34 ? $36 : 0;
       $$0 = $37;
       break;
      }
      $38 = ((($6)) + 2|0);
      $39 = HEAP8[$38>>0]|0;
      $40 = ($39<<24>>24)==(0);
      if ($40) {
       $$0 = 0;
      } else {
       $41 = ((($n)) + 3|0);
       $42 = HEAP8[$41>>0]|0;
       $43 = ($42<<24>>24)==(0);
       if ($43) {
        $44 = $0&255;
        $45 = $44 << 24;
        $46 = $9&255;
        $47 = $46 << 16;
        $48 = $47 | $45;
        $49 = $15&255;
        $50 = $49 << 8;
        $51 = $48 | $50;
        $52 = HEAP8[$6>>0]|0;
        $53 = $52&255;
        $54 = $53 << 24;
        $55 = $12&255;
        $56 = $55 << 16;
        $57 = $39&255;
        $58 = $57 << 8;
        $59 = $58 | $56;
        $60 = $59 | $54;
        $61 = ($60|0)==($51|0);
        if ($61) {
         $$0$lcssa$i4 = $38;$$lcssa$i = $39;
        } else {
         $$02$i = $38;$hw$03$i = $60;
         while(1) {
          $62 = ((($$02$i)) + 1|0);
          $63 = HEAP8[$62>>0]|0;
          $64 = $63&255;
          $65 = $64 | $hw$03$i;
          $66 = $65 << 8;
          $67 = ($63<<24>>24)==(0);
          $68 = ($66|0)==($51|0);
          $or$cond$i2 = $67 | $68;
          if ($or$cond$i2) {
           $$0$lcssa$i4 = $62;$$lcssa$i = $63;
           break;
          } else {
           $$02$i = $62;$hw$03$i = $66;
          }
         }
        }
        $69 = ($$lcssa$i<<24>>24)!=(0);
        $70 = ((($$0$lcssa$i4)) + -2|0);
        $71 = $69 ? $70 : 0;
        $$0 = $71;
        break;
       }
       $72 = ((($6)) + 3|0);
       $73 = HEAP8[$72>>0]|0;
       $74 = ($73<<24>>24)==(0);
       if ($74) {
        $$0 = 0;
       } else {
        $75 = ((($n)) + 4|0);
        $76 = HEAP8[$75>>0]|0;
        $77 = ($76<<24>>24)==(0);
        if ($77) {
         $78 = $0&255;
         $79 = $78 << 24;
         $80 = $9&255;
         $81 = $80 << 16;
         $82 = $81 | $79;
         $83 = $15&255;
         $84 = $83 << 8;
         $85 = $82 | $84;
         $86 = $42&255;
         $87 = $85 | $86;
         $88 = HEAP8[$6>>0]|0;
         $89 = $88&255;
         $90 = $89 << 24;
         $91 = $12&255;
         $92 = $91 << 16;
         $93 = $39&255;
         $94 = $93 << 8;
         $95 = $73&255;
         $96 = $94 | $92;
         $97 = $96 | $95;
         $98 = $97 | $90;
         $99 = ($98|0)==($87|0);
         if ($99) {
          $$0$lcssa$i12 = $72;$$lcssa$i11 = $73;
         } else {
          $$02$i8 = $72;$hw$03$i7 = $98;
          while(1) {
           $100 = $hw$03$i7 << 8;
           $101 = ((($$02$i8)) + 1|0);
           $102 = HEAP8[$101>>0]|0;
           $103 = $102&255;
           $104 = $103 | $100;
           $105 = ($102<<24>>24)==(0);
           $106 = ($104|0)==($87|0);
           $or$cond$i9 = $105 | $106;
           if ($or$cond$i9) {
            $$0$lcssa$i12 = $101;$$lcssa$i11 = $102;
            break;
           } else {
            $$02$i8 = $101;$hw$03$i7 = $104;
           }
          }
         }
         $107 = ($$lcssa$i11<<24>>24)!=(0);
         $108 = ((($$0$lcssa$i12)) + -3|0);
         $109 = $107 ? $108 : 0;
         $$0 = $109;
         break;
        }
        ;HEAP32[$byteset$i>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
        $114 = $0;$l$082$i = 0;
        while(1) {
         $110 = (($6) + ($l$082$i)|0);
         $111 = HEAP8[$110>>0]|0;
         $112 = ($111<<24>>24)==(0);
         if ($112) {
          $$3$i = 0;
          break;
         }
         $113 = $114 & 31;
         $115 = $113&255;
         $116 = 1 << $115;
         $div5$i = ($114&255) >>> 5;
         $117 = $div5$i&255;
         $118 = (($byteset$i) + ($117<<2)|0);
         $119 = HEAP32[$118>>2]|0;
         $120 = $119 | $116;
         HEAP32[$118>>2] = $120;
         $121 = (($l$082$i) + 1)|0;
         $122 = $114&255;
         $123 = (($shift$i) + ($122<<2)|0);
         HEAP32[$123>>2] = $121;
         $124 = (($n) + ($121)|0);
         $125 = HEAP8[$124>>0]|0;
         $126 = ($125<<24>>24)==(0);
         if ($126) {
          label = 23;
          break;
         } else {
          $114 = $125;$l$082$i = $121;
         }
        }
        L32: do {
         if ((label|0) == 23) {
          $127 = ($121>>>0)>(1);
          L34: do {
           if ($127) {
            $243 = 1;$ip$0$ph78$i = -1;$jp$0$ph79$i = 0;
            L35: while(1) {
             $244 = $243;$jp$0$ph15$ph72$i = $jp$0$ph79$i;$p$0$ph$ph73$i = 1;
             while(1) {
              $245 = $244;$jp$0$ph1567$i = $jp$0$ph15$ph72$i;
              L39: while(1) {
               $129 = $245;$k$061$i = 1;
               while(1) {
                $134 = (($k$061$i) + ($ip$0$ph78$i))|0;
                $135 = (($n) + ($134)|0);
                $136 = HEAP8[$135>>0]|0;
                $137 = (($n) + ($129)|0);
                $138 = HEAP8[$137>>0]|0;
                $139 = ($136<<24>>24)==($138<<24>>24);
                if (!($139)) {
                 break L39;
                }
                $140 = ($k$061$i|0)==($p$0$ph$ph73$i|0);
                $132 = (($k$061$i) + 1)|0;
                if ($140) {
                 break;
                }
                $131 = (($132) + ($jp$0$ph1567$i))|0;
                $133 = ($131>>>0)<($121>>>0);
                if ($133) {
                 $129 = $131;$k$061$i = $132;
                } else {
                 $ip$0$ph$lcssa$i = $ip$0$ph78$i;$p$0$ph$ph$lcssa34$i = $p$0$ph$ph73$i;
                 break L35;
                }
               }
               $141 = (($jp$0$ph1567$i) + ($p$0$ph$ph73$i))|0;
               $142 = (($141) + 1)|0;
               $143 = ($142>>>0)<($121>>>0);
               if ($143) {
                $245 = $142;$jp$0$ph1567$i = $141;
               } else {
                $ip$0$ph$lcssa$i = $ip$0$ph78$i;$p$0$ph$ph$lcssa34$i = $p$0$ph$ph73$i;
                break L35;
               }
              }
              $144 = ($136&255)>($138&255);
              $145 = (($129) - ($ip$0$ph78$i))|0;
              if (!($144)) {
               break;
              }
              $128 = (($129) + 1)|0;
              $130 = ($128>>>0)<($121>>>0);
              if ($130) {
               $244 = $128;$jp$0$ph15$ph72$i = $129;$p$0$ph$ph73$i = $145;
              } else {
               $ip$0$ph$lcssa$i = $ip$0$ph78$i;$p$0$ph$ph$lcssa34$i = $145;
               break L35;
              }
             }
             $146 = (($jp$0$ph1567$i) + 1)|0;
             $147 = (($jp$0$ph1567$i) + 2)|0;
             $148 = ($147>>>0)<($121>>>0);
             if ($148) {
              $243 = $147;$ip$0$ph78$i = $jp$0$ph1567$i;$jp$0$ph79$i = $146;
             } else {
              $ip$0$ph$lcssa$i = $jp$0$ph1567$i;$p$0$ph$ph$lcssa34$i = 1;
              break;
             }
            }
            $246 = 1;$ip$1$ph57$i = -1;$jp$1$ph58$i = 0;
            while(1) {
             $248 = $246;$jp$1$ph11$ph51$i = $jp$1$ph58$i;$p$1$ph$ph52$i = 1;
             while(1) {
              $247 = $248;$jp$1$ph1146$i = $jp$1$ph11$ph51$i;
              L54: while(1) {
               $156 = $247;$k$141$i = 1;
               while(1) {
                $152 = (($k$141$i) + ($ip$1$ph57$i))|0;
                $153 = (($n) + ($152)|0);
                $154 = HEAP8[$153>>0]|0;
                $155 = (($n) + ($156)|0);
                $157 = HEAP8[$155>>0]|0;
                $158 = ($154<<24>>24)==($157<<24>>24);
                if (!($158)) {
                 break L54;
                }
                $159 = ($k$141$i|0)==($p$1$ph$ph52$i|0);
                $150 = (($k$141$i) + 1)|0;
                if ($159) {
                 break;
                }
                $149 = (($150) + ($jp$1$ph1146$i))|0;
                $151 = ($149>>>0)<($121>>>0);
                if ($151) {
                 $156 = $149;$k$141$i = $150;
                } else {
                 $ip$0$ph$lcssa145$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph57$i;$p$0$ph$ph$lcssa34146$i = $p$0$ph$ph$lcssa34$i;$p$1$ph$ph$lcssa25$i = $p$1$ph$ph52$i;
                 break L34;
                }
               }
               $160 = (($jp$1$ph1146$i) + ($p$1$ph$ph52$i))|0;
               $161 = (($160) + 1)|0;
               $162 = ($161>>>0)<($121>>>0);
               if ($162) {
                $247 = $161;$jp$1$ph1146$i = $160;
               } else {
                $ip$0$ph$lcssa145$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph57$i;$p$0$ph$ph$lcssa34146$i = $p$0$ph$ph$lcssa34$i;$p$1$ph$ph$lcssa25$i = $p$1$ph$ph52$i;
                break L34;
               }
              }
              $163 = ($154&255)<($157&255);
              $164 = (($156) - ($ip$1$ph57$i))|0;
              if (!($163)) {
               break;
              }
              $168 = (($156) + 1)|0;
              $169 = ($168>>>0)<($121>>>0);
              if ($169) {
               $248 = $168;$jp$1$ph11$ph51$i = $156;$p$1$ph$ph52$i = $164;
              } else {
               $ip$0$ph$lcssa145$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph57$i;$p$0$ph$ph$lcssa34146$i = $p$0$ph$ph$lcssa34$i;$p$1$ph$ph$lcssa25$i = $164;
               break L34;
              }
             }
             $165 = (($jp$1$ph1146$i) + 1)|0;
             $166 = (($jp$1$ph1146$i) + 2)|0;
             $167 = ($166>>>0)<($121>>>0);
             if ($167) {
              $246 = $166;$ip$1$ph57$i = $jp$1$ph1146$i;$jp$1$ph58$i = $165;
             } else {
              $ip$0$ph$lcssa145$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $jp$1$ph1146$i;$p$0$ph$ph$lcssa34146$i = $p$0$ph$ph$lcssa34$i;$p$1$ph$ph$lcssa25$i = 1;
              break;
             }
            }
           } else {
            $ip$0$ph$lcssa145$i = -1;$ip$1$ph$lcssa$i = -1;$p$0$ph$ph$lcssa34146$i = 1;$p$1$ph$ph$lcssa25$i = 1;
           }
          } while(0);
          $170 = (($ip$1$ph$lcssa$i) + 1)|0;
          $171 = (($ip$0$ph$lcssa145$i) + 1)|0;
          $172 = ($170>>>0)>($171>>>0);
          $p$1$p$0$i = $172 ? $p$1$ph$ph$lcssa25$i : $p$0$ph$ph$lcssa34146$i;
          $ip$1$ip$0$i = $172 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa145$i;
          $173 = (($ip$1$ip$0$i) + 1)|0;
          $174 = ($173|0)==(0);
          L65: do {
           if ($174) {
            label = 51;
           } else {
            $175 = (($n) + ($p$1$p$0$i)|0);
            $$03$i2 = $173;$178 = $0;$l$04$i = $n;$r$05$i = $175;
            while(1) {
             $176 = HEAP8[$r$05$i>>0]|0;
             $177 = ($178<<24>>24)==($176<<24>>24);
             if (!($177)) {
              break;
             }
             $179 = (($$03$i2) + -1)|0;
             $180 = ((($l$04$i)) + 1|0);
             $181 = ($179|0)==(0);
             if ($181) {
              label = 51;
              break L65;
             }
             $182 = ((($r$05$i)) + 1|0);
             $$pre = HEAP8[$180>>0]|0;
             $$03$i2 = $179;$178 = $$pre;$l$04$i = $180;$r$05$i = $182;
            }
            $183 = (($121) - ($ip$1$ip$0$i))|0;
            $184 = (($183) + -1)|0;
            $185 = ($ip$1$ip$0$i>>>0)>($184>>>0);
            $ip$1$ip$0$$i = $185 ? $ip$1$ip$0$i : $184;
            $186 = (($ip$1$ip$0$$i) + 1)|0;
            $mem0$0$i = 0;$p$3$i = $186;
           }
          } while(0);
          if ((label|0) == 51) {
           $187 = (($121) - ($p$1$p$0$i))|0;
           $mem0$0$i = $187;$p$3$i = $p$1$p$0$i;
          }
          $188 = $121 | 63;
          $189 = ($mem0$0$i|0)!=(0);
          $190 = (($121) - ($p$3$i))|0;
          $$03$i = $6;$mem$0$i = 0;$z$0$i = $6;
          L75: while(1) {
           $191 = $z$0$i;
           $192 = $$03$i;
           $193 = (($191) - ($192))|0;
           $194 = ($193>>>0)<($121>>>0);
           do {
            if ($194) {
             $195 = (_memchr($z$0$i,0,$188)|0);
             $196 = ($195|0)==(0|0);
             if ($196) {
              $200 = (($z$0$i) + ($188)|0);
              $z$3$i = $200;
              break;
             } else {
              $197 = $195;
              $198 = (($197) - ($192))|0;
              $199 = ($198>>>0)<($121>>>0);
              if ($199) {
               $$3$i = 0;
               break L32;
              } else {
               $z$3$i = $195;
               break;
              }
             }
            } else {
             $z$3$i = $z$0$i;
            }
           } while(0);
           $201 = (($$03$i) + ($l$082$i)|0);
           $202 = HEAP8[$201>>0]|0;
           $div$i = ($202&255) >>> 5;
           $203 = $div$i&255;
           $204 = (($byteset$i) + ($203<<2)|0);
           $205 = HEAP32[$204>>2]|0;
           $206 = $202 & 31;
           $207 = $206&255;
           $208 = 1 << $207;
           $209 = $208 & $205;
           $210 = ($209|0)==(0);
           if ($210) {
            $219 = (($$03$i) + ($121)|0);
            $$03$i = $219;$mem$0$i = 0;$z$0$i = $z$3$i;
            continue;
           }
           $211 = $202&255;
           $212 = (($shift$i) + ($211<<2)|0);
           $213 = HEAP32[$212>>2]|0;
           $214 = (($121) - ($213))|0;
           $215 = ($121|0)==($213|0);
           if (!($215)) {
            $216 = ($mem$0$i|0)!=(0);
            $or$cond$i = $189 & $216;
            $217 = ($214>>>0)<($p$3$i>>>0);
            $or$cond6$i = $or$cond$i & $217;
            $k$2$i = $or$cond6$i ? $190 : $214;
            $218 = (($$03$i) + ($k$2$i)|0);
            $$03$i = $218;$mem$0$i = 0;$z$0$i = $z$3$i;
            continue;
           }
           $220 = ($173>>>0)>($mem$0$i>>>0);
           $221 = $220 ? $173 : $mem$0$i;
           $222 = (($n) + ($221)|0);
           $223 = HEAP8[$222>>0]|0;
           $224 = ($223<<24>>24)==(0);
           L89: do {
            if ($224) {
             $k$4$i = $173;
            } else {
             $$pr$i = $223;$k$340$i = $221;
             while(1) {
              $225 = (($$03$i) + ($k$340$i)|0);
              $226 = HEAP8[$225>>0]|0;
              $227 = ($$pr$i<<24>>24)==($226<<24>>24);
              if (!($227)) {
               break;
              }
              $228 = (($k$340$i) + 1)|0;
              $229 = (($n) + ($228)|0);
              $230 = HEAP8[$229>>0]|0;
              $231 = ($230<<24>>24)==(0);
              if ($231) {
               $k$4$i = $173;
               break L89;
              } else {
               $$pr$i = $230;$k$340$i = $228;
              }
             }
             $232 = (($k$340$i) - ($ip$1$ip$0$i))|0;
             $233 = (($$03$i) + ($232)|0);
             $$03$i = $233;$mem$0$i = 0;$z$0$i = $z$3$i;
             continue L75;
            }
           } while(0);
           while(1) {
            $234 = ($k$4$i>>>0)>($mem$0$i>>>0);
            if (!($234)) {
             $$3$i = $$03$i;
             break L32;
            }
            $235 = (($k$4$i) + -1)|0;
            $236 = (($n) + ($235)|0);
            $237 = HEAP8[$236>>0]|0;
            $238 = (($$03$i) + ($235)|0);
            $239 = HEAP8[$238>>0]|0;
            $240 = ($237<<24>>24)==($239<<24>>24);
            if ($240) {
             $k$4$i = $235;
            } else {
             break;
            }
           }
           $241 = (($$03$i) + ($p$3$i)|0);
           $$03$i = $241;$mem$0$i = $mem0$0$i;$z$0$i = $z$3$i;
          }
         }
        } while(0);
        $$0 = $$3$i;
       }
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fputc($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(9848)>>2]|0;
 $1 = ($0|0)<(0);
 $2 = HEAP8[(9847)>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)==($c|0);
 do {
  if ($1) {
   if (!($4)) {
    $5 = HEAP32[(9792)>>2]|0;
    $6 = HEAP32[(9788)>>2]|0;
    $7 = ($5>>>0)<($6>>>0);
    if ($7) {
     $8 = $c&255;
     $9 = ((($5)) + 1|0);
     HEAP32[(9792)>>2] = $9;
     HEAP8[$5>>0] = $8;
     break;
    }
   }
   (___overflow(9772,$c)|0);
  } else {
   if (!($4)) {
    $10 = HEAP32[(9792)>>2]|0;
    $11 = HEAP32[(9788)>>2]|0;
    $12 = ($10>>>0)<($11>>>0);
    if ($12) {
     $13 = $c&255;
     $14 = ((($10)) + 1|0);
     HEAP32[(9792)>>2] = $14;
     HEAP8[$10>>0] = $13;
     break;
    }
   }
   (___overflow(9772,$c)|0);
  }
 } while(0);
 return;
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 127]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dest$0$ph = 0, $dest$02 = 0, $l$0$ph = 0, $l$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($f)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($f)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) - ($10))|0;
 $12 = ($11|0)>(0);
 $13 = $10;
 if ($12) {
  $14 = ($11>>>0)<($0>>>0);
  $$ = $14 ? $11 : $0;
  _memcpy(($destv|0),($13|0),($$|0))|0;
  $15 = (($13) + ($$)|0);
  HEAP32[$9>>2] = $15;
  $16 = (($destv) + ($$)|0);
  $17 = (($0) - ($$))|0;
  $dest$0$ph = $16;$l$0$ph = $17;
 } else {
  $dest$0$ph = $destv;$l$0$ph = $0;
 }
 $18 = ($l$0$ph|0)==(0);
 L4: do {
  if ($18) {
   $$0 = $nmemb;
  } else {
   $19 = ((($f)) + 32|0);
   $dest$02 = $dest$0$ph;$l$03 = $l$0$ph;
   while(1) {
    $20 = (___toread($f)|0);
    $21 = ($20|0)==(0);
    if (!($21)) {
     break;
    }
    $22 = HEAP32[$19>>2]|0;
    $23 = (FUNCTION_TABLE_iiii[$22 & 127]($f,$dest$02,$l$03)|0);
    $24 = (($23) + 1)|0;
    $25 = ($24>>>0)<(2);
    if ($25) {
     break;
    }
    $28 = (($l$03) - ($23))|0;
    $29 = (($dest$02) + ($23)|0);
    $30 = ($l$03|0)==($23|0);
    if ($30) {
     $$0 = $nmemb;
     break L4;
    } else {
     $dest$02 = $29;$l$03 = $28;
    }
   }
   $26 = (($0) - ($l$03))|0;
   $27 = (($26>>>0) / ($size>>>0))&-1;
   $$0 = $27;
  }
 } while(0);
 return ($$0|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = (___fwritex($src,$0,$f)|0);
 $2 = ($1|0)==($0|0);
 if ($2) {
  $4 = $nmemb;
 } else {
  $3 = (($1>>>0) / ($size>>>0))&-1;
  $4 = $3;
 }
 return ($4|0);
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 (_vfprintf(9884,$fmt,$ap)|0);
 STACKTOP = sp;return;
}
function _perror($msg) {
 $msg = $msg|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03$i = 0, $i$12$i = 0, $s$0$lcssa$i = 0, $s$01$i = 0, $s$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6773]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0$i = 27136;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0$i = $4;
 }
 $5 = HEAP32[$$0$i>>2]|0;
 $i$03$i = 0;
 while(1) {
  $7 = (24836 + ($i$03$i)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = ($9|0)==($5|0);
  if ($10) {
   label = 4;
   break;
  }
  $11 = (($i$03$i) + 1)|0;
  $12 = ($11|0)==(87);
  if ($12) {
   $i$12$i = 87;$s$01$i = 24924;
   label = 7;
   break;
  } else {
   $i$03$i = $11;
  }
 }
 if ((label|0) == 4) {
  $6 = ($i$03$i|0)==(0);
  if ($6) {
   $s$0$lcssa$i = 24924;
  } else {
   $i$12$i = $i$03$i;$s$01$i = 24924;
   label = 7;
  }
 }
 if ((label|0) == 7) {
  while(1) {
   label = 0;
   $s$1$i = $s$01$i;
   while(1) {
    $13 = HEAP8[$s$1$i>>0]|0;
    $14 = ($13<<24>>24)==(0);
    $15 = ((($s$1$i)) + 1|0);
    if ($14) {
     break;
    } else {
     $s$1$i = $15;
    }
   }
   $16 = (($i$12$i) + -1)|0;
   $17 = ($16|0)==(0);
   if ($17) {
    $s$0$lcssa$i = $15;
    break;
   } else {
    $i$12$i = $16;$s$01$i = $15;
    label = 7;
   }
  }
 }
 $18 = ($msg|0)==(0|0);
 if (!($18)) {
  $19 = HEAP8[$msg>>0]|0;
  $20 = ($19<<24>>24)==(0);
  if (!($20)) {
   $21 = (_strlen($msg)|0);
   (_fwrite($msg,$21,1,9772)|0);
   _fputc(58);
   _fputc(32);
  }
 }
 $22 = (_strlen($s$0$lcssa$i)|0);
 (_fwrite($s$0$lcssa$i,$22,1,9772)|0);
 _fputc(10);
 return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$0 = 0, $$0$i = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i13 = 0, $$pre$i16$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i14Z2D = 0, $$pre$phi$i17$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre71 = 0, $$pre9$i$i = 0, $$rsize$0$i = 0, $$rsize$4$i = 0, $$v$0$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0;
 var $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0;
 var $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0;
 var $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0, $R$1$i$i = 0;
 var $R$1$i9 = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i11 = 0, $RP$1$i = 0, $RP$1$i$i = 0, $RP$1$i8 = 0, $T$0$i = 0, $T$0$i$i = 0, $T$0$i18$i = 0, $br$2$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i12 = 0, $exitcond$i$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $nb$0 = 0, $not$$i$i = 0, $not$$i20$i = 0;
 var $not$7$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i17 = 0, $or$cond1$i = 0, $or$cond1$i16 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond48$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i5 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0;
 var $rsize$412$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$068$i = 0, $sp$167$i = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$746$i = 0, $tsize$745$i = 0;
 var $v$0$i = 0, $v$0$i6 = 0, $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[6786]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (27184 + ($13<<2)|0);
    $15 = ((($14)) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[6786] = $22;
     } else {
      $23 = HEAP32[(27160)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $31 = (($16) + ($28)|0);
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 | 1;
    HEAP32[$32>>2] = $34;
    $$0 = $17;
    return ($$0|0);
   }
   $35 = HEAP32[(27152)>>2]|0;
   $36 = ($4>>>0)>($35>>>0);
   if ($36) {
    $37 = ($7|0)==(0);
    if (!($37)) {
     $38 = $7 << $5;
     $39 = 2 << $5;
     $40 = (0 - ($39))|0;
     $41 = $39 | $40;
     $42 = $38 & $41;
     $43 = (0 - ($42))|0;
     $44 = $42 & $43;
     $45 = (($44) + -1)|0;
     $46 = $45 >>> 12;
     $47 = $46 & 16;
     $48 = $45 >>> $47;
     $49 = $48 >>> 5;
     $50 = $49 & 8;
     $51 = $50 | $47;
     $52 = $48 >>> $50;
     $53 = $52 >>> 2;
     $54 = $53 & 4;
     $55 = $51 | $54;
     $56 = $52 >>> $54;
     $57 = $56 >>> 1;
     $58 = $57 & 2;
     $59 = $55 | $58;
     $60 = $56 >>> $58;
     $61 = $60 >>> 1;
     $62 = $61 & 1;
     $63 = $59 | $62;
     $64 = $60 >>> $62;
     $65 = (($63) + ($64))|0;
     $66 = $65 << 1;
     $67 = (27184 + ($66<<2)|0);
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($67|0)==($71|0);
     do {
      if ($72) {
       $73 = 1 << $65;
       $74 = $73 ^ -1;
       $75 = $6 & $74;
       HEAP32[6786] = $75;
       $90 = $35;
      } else {
       $76 = HEAP32[(27160)>>2]|0;
       $77 = ($71>>>0)<($76>>>0);
       if ($77) {
        _abort();
        // unreachable;
       }
       $78 = ((($71)) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ($79|0)==($69|0);
       if ($80) {
        HEAP32[$78>>2] = $67;
        HEAP32[$68>>2] = $71;
        $$pre = HEAP32[(27152)>>2]|0;
        $90 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $81 = $65 << 3;
     $82 = (($81) - ($4))|0;
     $83 = $4 | 3;
     $84 = ((($69)) + 4|0);
     HEAP32[$84>>2] = $83;
     $85 = (($69) + ($4)|0);
     $86 = $82 | 1;
     $87 = ((($85)) + 4|0);
     HEAP32[$87>>2] = $86;
     $88 = (($85) + ($82)|0);
     HEAP32[$88>>2] = $82;
     $89 = ($90|0)==(0);
     if (!($89)) {
      $91 = HEAP32[(27164)>>2]|0;
      $92 = $90 >>> 3;
      $93 = $92 << 1;
      $94 = (27184 + ($93<<2)|0);
      $95 = HEAP32[6786]|0;
      $96 = 1 << $92;
      $97 = $95 & $96;
      $98 = ($97|0)==(0);
      if ($98) {
       $99 = $95 | $96;
       HEAP32[6786] = $99;
       $$pre71 = ((($94)) + 8|0);
       $$pre$phiZ2D = $$pre71;$F4$0 = $94;
      } else {
       $100 = ((($94)) + 8|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = HEAP32[(27160)>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $100;$F4$0 = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $91;
      $104 = ((($F4$0)) + 12|0);
      HEAP32[$104>>2] = $91;
      $105 = ((($91)) + 8|0);
      HEAP32[$105>>2] = $F4$0;
      $106 = ((($91)) + 12|0);
      HEAP32[$106>>2] = $94;
     }
     HEAP32[(27152)>>2] = $82;
     HEAP32[(27164)>>2] = $85;
     $$0 = $70;
     return ($$0|0);
    }
    $107 = HEAP32[(27148)>>2]|0;
    $108 = ($107|0)==(0);
    if ($108) {
     $nb$0 = $4;
    } else {
     $109 = (0 - ($107))|0;
     $110 = $107 & $109;
     $111 = (($110) + -1)|0;
     $112 = $111 >>> 12;
     $113 = $112 & 16;
     $114 = $111 >>> $113;
     $115 = $114 >>> 5;
     $116 = $115 & 8;
     $117 = $116 | $113;
     $118 = $114 >>> $116;
     $119 = $118 >>> 2;
     $120 = $119 & 4;
     $121 = $117 | $120;
     $122 = $118 >>> $120;
     $123 = $122 >>> 1;
     $124 = $123 & 2;
     $125 = $121 | $124;
     $126 = $122 >>> $124;
     $127 = $126 >>> 1;
     $128 = $127 & 1;
     $129 = $125 | $128;
     $130 = $126 >>> $128;
     $131 = (($129) + ($130))|0;
     $132 = (27448 + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ((($133)) + 4|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $135 & -8;
     $137 = (($136) - ($4))|0;
     $rsize$0$i = $137;$t$0$i = $133;$v$0$i = $133;
     while(1) {
      $138 = ((($t$0$i)) + 16|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0|0);
      if ($140) {
       $141 = ((($t$0$i)) + 20|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        break;
       } else {
        $145 = $142;
       }
      } else {
       $145 = $139;
      }
      $144 = ((($145)) + 4|0);
      $146 = HEAP32[$144>>2]|0;
      $147 = $146 & -8;
      $148 = (($147) - ($4))|0;
      $149 = ($148>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $149 ? $148 : $rsize$0$i;
      $$v$0$i = $149 ? $145 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $145;$v$0$i = $$v$0$i;
     }
     $150 = HEAP32[(27160)>>2]|0;
     $151 = ($v$0$i>>>0)<($150>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = (($v$0$i) + ($4)|0);
     $153 = ($v$0$i>>>0)<($152>>>0);
     if (!($153)) {
      _abort();
      // unreachable;
     }
     $154 = ((($v$0$i)) + 24|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ((($v$0$i)) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($v$0$i|0);
     do {
      if ($158) {
       $168 = ((($v$0$i)) + 20|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = ($169|0)==(0|0);
       if ($170) {
        $171 = ((($v$0$i)) + 16|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($172|0)==(0|0);
        if ($173) {
         $R$3$i = 0;
         break;
        } else {
         $R$1$i = $172;$RP$1$i = $171;
        }
       } else {
        $R$1$i = $169;$RP$1$i = $168;
       }
       while(1) {
        $174 = ((($R$1$i)) + 20|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = ($175|0)==(0|0);
        if (!($176)) {
         $R$1$i = $175;$RP$1$i = $174;
         continue;
        }
        $177 = ((($R$1$i)) + 16|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = ($178|0)==(0|0);
        if ($179) {
         break;
        } else {
         $R$1$i = $178;$RP$1$i = $177;
        }
       }
       $180 = ($RP$1$i>>>0)<($150>>>0);
       if ($180) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$1$i>>2] = 0;
        $R$3$i = $R$1$i;
        break;
       }
      } else {
       $159 = ((($v$0$i)) + 8|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = ($160>>>0)<($150>>>0);
       if ($161) {
        _abort();
        // unreachable;
       }
       $162 = ((($160)) + 12|0);
       $163 = HEAP32[$162>>2]|0;
       $164 = ($163|0)==($v$0$i|0);
       if (!($164)) {
        _abort();
        // unreachable;
       }
       $165 = ((($157)) + 8|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($166|0)==($v$0$i|0);
       if ($167) {
        HEAP32[$162>>2] = $157;
        HEAP32[$165>>2] = $160;
        $R$3$i = $157;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $181 = ($155|0)==(0|0);
     do {
      if (!($181)) {
       $182 = ((($v$0$i)) + 28|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = (27448 + ($183<<2)|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($v$0$i|0)==($185|0);
       if ($186) {
        HEAP32[$184>>2] = $R$3$i;
        $cond$i = ($R$3$i|0)==(0|0);
        if ($cond$i) {
         $187 = 1 << $183;
         $188 = $187 ^ -1;
         $189 = HEAP32[(27148)>>2]|0;
         $190 = $189 & $188;
         HEAP32[(27148)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(27160)>>2]|0;
        $192 = ($155>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($v$0$i|0);
        if ($195) {
         HEAP32[$193>>2] = $R$3$i;
        } else {
         $196 = ((($155)) + 20|0);
         HEAP32[$196>>2] = $R$3$i;
        }
        $197 = ($R$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(27160)>>2]|0;
       $199 = ($R$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($R$3$i)) + 24|0);
       HEAP32[$200>>2] = $155;
       $201 = ((($v$0$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($R$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $R$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($v$0$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(27160)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($R$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $R$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($4))|0;
      $216 = $215 | 3;
      $217 = ((($v$0$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($v$0$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $4 | 3;
      $223 = ((($v$0$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $rsize$0$i | 1;
      $225 = ((($152)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($152) + ($rsize$0$i)|0);
      HEAP32[$226>>2] = $rsize$0$i;
      $227 = HEAP32[(27152)>>2]|0;
      $228 = ($227|0)==(0);
      if (!($228)) {
       $229 = HEAP32[(27164)>>2]|0;
       $230 = $227 >>> 3;
       $231 = $230 << 1;
       $232 = (27184 + ($231<<2)|0);
       $233 = HEAP32[6786]|0;
       $234 = 1 << $230;
       $235 = $233 & $234;
       $236 = ($235|0)==(0);
       if ($236) {
        $237 = $233 | $234;
        HEAP32[6786] = $237;
        $$pre$i = ((($232)) + 8|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $232;
       } else {
        $238 = ((($232)) + 8|0);
        $239 = HEAP32[$238>>2]|0;
        $240 = HEAP32[(27160)>>2]|0;
        $241 = ($239>>>0)<($240>>>0);
        if ($241) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $238;$F1$0$i = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $229;
       $242 = ((($F1$0$i)) + 12|0);
       HEAP32[$242>>2] = $229;
       $243 = ((($229)) + 8|0);
       HEAP32[$243>>2] = $F1$0$i;
       $244 = ((($229)) + 12|0);
       HEAP32[$244>>2] = $232;
      }
      HEAP32[(27152)>>2] = $rsize$0$i;
      HEAP32[(27164)>>2] = $152;
     }
     $245 = ((($v$0$i)) + 8|0);
     $$0 = $245;
     return ($$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $246 = ($bytes>>>0)>(4294967231);
   if ($246) {
    $nb$0 = -1;
   } else {
    $247 = (($bytes) + 11)|0;
    $248 = $247 & -8;
    $249 = HEAP32[(27148)>>2]|0;
    $250 = ($249|0)==(0);
    if ($250) {
     $nb$0 = $248;
    } else {
     $251 = (0 - ($248))|0;
     $252 = $247 >>> 8;
     $253 = ($252|0)==(0);
     if ($253) {
      $idx$0$i = 0;
     } else {
      $254 = ($248>>>0)>(16777215);
      if ($254) {
       $idx$0$i = 31;
      } else {
       $255 = (($252) + 1048320)|0;
       $256 = $255 >>> 16;
       $257 = $256 & 8;
       $258 = $252 << $257;
       $259 = (($258) + 520192)|0;
       $260 = $259 >>> 16;
       $261 = $260 & 4;
       $262 = $261 | $257;
       $263 = $258 << $261;
       $264 = (($263) + 245760)|0;
       $265 = $264 >>> 16;
       $266 = $265 & 2;
       $267 = $262 | $266;
       $268 = (14 - ($267))|0;
       $269 = $263 << $266;
       $270 = $269 >>> 15;
       $271 = (($268) + ($270))|0;
       $272 = $271 << 1;
       $273 = (($271) + 7)|0;
       $274 = $248 >>> $273;
       $275 = $274 & 1;
       $276 = $275 | $272;
       $idx$0$i = $276;
      }
     }
     $277 = (27448 + ($idx$0$i<<2)|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = ($278|0)==(0|0);
     L123: do {
      if ($279) {
       $rsize$3$i = $251;$t$2$i = 0;$v$3$i = 0;
       label = 86;
      } else {
       $280 = ($idx$0$i|0)==(31);
       $281 = $idx$0$i >>> 1;
       $282 = (25 - ($281))|0;
       $283 = $280 ? 0 : $282;
       $284 = $248 << $283;
       $rsize$0$i5 = $251;$rst$0$i = 0;$sizebits$0$i = $284;$t$0$i4 = $278;$v$0$i6 = 0;
       while(1) {
        $285 = ((($t$0$i4)) + 4|0);
        $286 = HEAP32[$285>>2]|0;
        $287 = $286 & -8;
        $288 = (($287) - ($248))|0;
        $289 = ($288>>>0)<($rsize$0$i5>>>0);
        if ($289) {
         $290 = ($287|0)==($248|0);
         if ($290) {
          $rsize$412$i = $288;$t$411$i = $t$0$i4;$v$413$i = $t$0$i4;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $288;$v$1$i = $t$0$i4;
         }
        } else {
         $rsize$1$i = $rsize$0$i5;$v$1$i = $v$0$i6;
        }
        $291 = ((($t$0$i4)) + 20|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = $sizebits$0$i >>> 31;
        $294 = (((($t$0$i4)) + 16|0) + ($293<<2)|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = ($292|0)==(0|0);
        $297 = ($292|0)==($295|0);
        $or$cond1$i = $296 | $297;
        $rst$1$i = $or$cond1$i ? $rst$0$i : $292;
        $298 = ($295|0)==(0|0);
        $299 = $298&1;
        $300 = $299 ^ 1;
        $sizebits$0$$i = $sizebits$0$i << $300;
        if ($298) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i5 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $sizebits$0$$i;$t$0$i4 = $295;$v$0$i6 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $301 = ($t$2$i|0)==(0|0);
      $302 = ($v$3$i|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $idx$0$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $249 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $nb$0 = $248;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (27448 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $t$4$ph$i = $332;
      } else {
       $t$4$ph$i = $t$2$i;
      }
      $333 = ($t$4$ph$i|0)==(0|0);
      if ($333) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i;
      } else {
       $rsize$412$i = $rsize$3$i;$t$411$i = $t$4$ph$i;$v$413$i = $v$3$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $334 = ((($t$411$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($248))|0;
       $338 = ($337>>>0)<($rsize$412$i>>>0);
       $$rsize$4$i = $338 ? $337 : $rsize$412$i;
       $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
       $339 = ((($t$411$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if (!($341)) {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $340;$v$413$i = $t$4$v$4$i;
        label = 90;
        continue;
       }
       $342 = ((($t$411$i)) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = ($343|0)==(0|0);
       if ($344) {
        $rsize$4$lcssa$i = $$rsize$4$i;$v$4$lcssa$i = $t$4$v$4$i;
        break;
       } else {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $343;$v$413$i = $t$4$v$4$i;
        label = 90;
       }
      }
     }
     $345 = ($v$4$lcssa$i|0)==(0|0);
     if ($345) {
      $nb$0 = $248;
     } else {
      $346 = HEAP32[(27152)>>2]|0;
      $347 = (($346) - ($248))|0;
      $348 = ($rsize$4$lcssa$i>>>0)<($347>>>0);
      if ($348) {
       $349 = HEAP32[(27160)>>2]|0;
       $350 = ($v$4$lcssa$i>>>0)<($349>>>0);
       if ($350) {
        _abort();
        // unreachable;
       }
       $351 = (($v$4$lcssa$i) + ($248)|0);
       $352 = ($v$4$lcssa$i>>>0)<($351>>>0);
       if (!($352)) {
        _abort();
        // unreachable;
       }
       $353 = ((($v$4$lcssa$i)) + 24|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ((($v$4$lcssa$i)) + 12|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = ($356|0)==($v$4$lcssa$i|0);
       do {
        if ($357) {
         $367 = ((($v$4$lcssa$i)) + 20|0);
         $368 = HEAP32[$367>>2]|0;
         $369 = ($368|0)==(0|0);
         if ($369) {
          $370 = ((($v$4$lcssa$i)) + 16|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $R$3$i11 = 0;
           break;
          } else {
           $R$1$i9 = $371;$RP$1$i8 = $370;
          }
         } else {
          $R$1$i9 = $368;$RP$1$i8 = $367;
         }
         while(1) {
          $373 = ((($R$1$i9)) + 20|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if (!($375)) {
           $R$1$i9 = $374;$RP$1$i8 = $373;
           continue;
          }
          $376 = ((($R$1$i9)) + 16|0);
          $377 = HEAP32[$376>>2]|0;
          $378 = ($377|0)==(0|0);
          if ($378) {
           break;
          } else {
           $R$1$i9 = $377;$RP$1$i8 = $376;
          }
         }
         $379 = ($RP$1$i8>>>0)<($349>>>0);
         if ($379) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$1$i8>>2] = 0;
          $R$3$i11 = $R$1$i9;
          break;
         }
        } else {
         $358 = ((($v$4$lcssa$i)) + 8|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359>>>0)<($349>>>0);
         if ($360) {
          _abort();
          // unreachable;
         }
         $361 = ((($359)) + 12|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$4$lcssa$i|0);
         if (!($363)) {
          _abort();
          // unreachable;
         }
         $364 = ((($356)) + 8|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==($v$4$lcssa$i|0);
         if ($366) {
          HEAP32[$361>>2] = $356;
          HEAP32[$364>>2] = $359;
          $R$3$i11 = $356;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $380 = ($354|0)==(0|0);
       do {
        if (!($380)) {
         $381 = ((($v$4$lcssa$i)) + 28|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = (27448 + ($382<<2)|0);
         $384 = HEAP32[$383>>2]|0;
         $385 = ($v$4$lcssa$i|0)==($384|0);
         if ($385) {
          HEAP32[$383>>2] = $R$3$i11;
          $cond$i12 = ($R$3$i11|0)==(0|0);
          if ($cond$i12) {
           $386 = 1 << $382;
           $387 = $386 ^ -1;
           $388 = HEAP32[(27148)>>2]|0;
           $389 = $388 & $387;
           HEAP32[(27148)>>2] = $389;
           break;
          }
         } else {
          $390 = HEAP32[(27160)>>2]|0;
          $391 = ($354>>>0)<($390>>>0);
          if ($391) {
           _abort();
           // unreachable;
          }
          $392 = ((($354)) + 16|0);
          $393 = HEAP32[$392>>2]|0;
          $394 = ($393|0)==($v$4$lcssa$i|0);
          if ($394) {
           HEAP32[$392>>2] = $R$3$i11;
          } else {
           $395 = ((($354)) + 20|0);
           HEAP32[$395>>2] = $R$3$i11;
          }
          $396 = ($R$3$i11|0)==(0|0);
          if ($396) {
           break;
          }
         }
         $397 = HEAP32[(27160)>>2]|0;
         $398 = ($R$3$i11>>>0)<($397>>>0);
         if ($398) {
          _abort();
          // unreachable;
         }
         $399 = ((($R$3$i11)) + 24|0);
         HEAP32[$399>>2] = $354;
         $400 = ((($v$4$lcssa$i)) + 16|0);
         $401 = HEAP32[$400>>2]|0;
         $402 = ($401|0)==(0|0);
         do {
          if (!($402)) {
           $403 = ($401>>>0)<($397>>>0);
           if ($403) {
            _abort();
            // unreachable;
           } else {
            $404 = ((($R$3$i11)) + 16|0);
            HEAP32[$404>>2] = $401;
            $405 = ((($401)) + 24|0);
            HEAP32[$405>>2] = $R$3$i11;
            break;
           }
          }
         } while(0);
         $406 = ((($v$4$lcssa$i)) + 20|0);
         $407 = HEAP32[$406>>2]|0;
         $408 = ($407|0)==(0|0);
         if (!($408)) {
          $409 = HEAP32[(27160)>>2]|0;
          $410 = ($407>>>0)<($409>>>0);
          if ($410) {
           _abort();
           // unreachable;
          } else {
           $411 = ((($R$3$i11)) + 20|0);
           HEAP32[$411>>2] = $407;
           $412 = ((($407)) + 24|0);
           HEAP32[$412>>2] = $R$3$i11;
           break;
          }
         }
        }
       } while(0);
       $413 = ($rsize$4$lcssa$i>>>0)<(16);
       do {
        if ($413) {
         $414 = (($rsize$4$lcssa$i) + ($248))|0;
         $415 = $414 | 3;
         $416 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$416>>2] = $415;
         $417 = (($v$4$lcssa$i) + ($414)|0);
         $418 = ((($417)) + 4|0);
         $419 = HEAP32[$418>>2]|0;
         $420 = $419 | 1;
         HEAP32[$418>>2] = $420;
        } else {
         $421 = $248 | 3;
         $422 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$422>>2] = $421;
         $423 = $rsize$4$lcssa$i | 1;
         $424 = ((($351)) + 4|0);
         HEAP32[$424>>2] = $423;
         $425 = (($351) + ($rsize$4$lcssa$i)|0);
         HEAP32[$425>>2] = $rsize$4$lcssa$i;
         $426 = $rsize$4$lcssa$i >>> 3;
         $427 = ($rsize$4$lcssa$i>>>0)<(256);
         if ($427) {
          $428 = $426 << 1;
          $429 = (27184 + ($428<<2)|0);
          $430 = HEAP32[6786]|0;
          $431 = 1 << $426;
          $432 = $430 & $431;
          $433 = ($432|0)==(0);
          if ($433) {
           $434 = $430 | $431;
           HEAP32[6786] = $434;
           $$pre$i13 = ((($429)) + 8|0);
           $$pre$phi$i14Z2D = $$pre$i13;$F5$0$i = $429;
          } else {
           $435 = ((($429)) + 8|0);
           $436 = HEAP32[$435>>2]|0;
           $437 = HEAP32[(27160)>>2]|0;
           $438 = ($436>>>0)<($437>>>0);
           if ($438) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i14Z2D = $435;$F5$0$i = $436;
           }
          }
          HEAP32[$$pre$phi$i14Z2D>>2] = $351;
          $439 = ((($F5$0$i)) + 12|0);
          HEAP32[$439>>2] = $351;
          $440 = ((($351)) + 8|0);
          HEAP32[$440>>2] = $F5$0$i;
          $441 = ((($351)) + 12|0);
          HEAP32[$441>>2] = $429;
          break;
         }
         $442 = $rsize$4$lcssa$i >>> 8;
         $443 = ($442|0)==(0);
         if ($443) {
          $I7$0$i = 0;
         } else {
          $444 = ($rsize$4$lcssa$i>>>0)>(16777215);
          if ($444) {
           $I7$0$i = 31;
          } else {
           $445 = (($442) + 1048320)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 8;
           $448 = $442 << $447;
           $449 = (($448) + 520192)|0;
           $450 = $449 >>> 16;
           $451 = $450 & 4;
           $452 = $451 | $447;
           $453 = $448 << $451;
           $454 = (($453) + 245760)|0;
           $455 = $454 >>> 16;
           $456 = $455 & 2;
           $457 = $452 | $456;
           $458 = (14 - ($457))|0;
           $459 = $453 << $456;
           $460 = $459 >>> 15;
           $461 = (($458) + ($460))|0;
           $462 = $461 << 1;
           $463 = (($461) + 7)|0;
           $464 = $rsize$4$lcssa$i >>> $463;
           $465 = $464 & 1;
           $466 = $465 | $462;
           $I7$0$i = $466;
          }
         }
         $467 = (27448 + ($I7$0$i<<2)|0);
         $468 = ((($351)) + 28|0);
         HEAP32[$468>>2] = $I7$0$i;
         $469 = ((($351)) + 16|0);
         $470 = ((($469)) + 4|0);
         HEAP32[$470>>2] = 0;
         HEAP32[$469>>2] = 0;
         $471 = HEAP32[(27148)>>2]|0;
         $472 = 1 << $I7$0$i;
         $473 = $471 & $472;
         $474 = ($473|0)==(0);
         if ($474) {
          $475 = $471 | $472;
          HEAP32[(27148)>>2] = $475;
          HEAP32[$467>>2] = $351;
          $476 = ((($351)) + 24|0);
          HEAP32[$476>>2] = $467;
          $477 = ((($351)) + 12|0);
          HEAP32[$477>>2] = $351;
          $478 = ((($351)) + 8|0);
          HEAP32[$478>>2] = $351;
          break;
         }
         $479 = HEAP32[$467>>2]|0;
         $480 = ($I7$0$i|0)==(31);
         $481 = $I7$0$i >>> 1;
         $482 = (25 - ($481))|0;
         $483 = $480 ? 0 : $482;
         $484 = $rsize$4$lcssa$i << $483;
         $K12$0$i = $484;$T$0$i = $479;
         while(1) {
          $485 = ((($T$0$i)) + 4|0);
          $486 = HEAP32[$485>>2]|0;
          $487 = $486 & -8;
          $488 = ($487|0)==($rsize$4$lcssa$i|0);
          if ($488) {
           label = 148;
           break;
          }
          $489 = $K12$0$i >>> 31;
          $490 = (((($T$0$i)) + 16|0) + ($489<<2)|0);
          $491 = $K12$0$i << 1;
          $492 = HEAP32[$490>>2]|0;
          $493 = ($492|0)==(0|0);
          if ($493) {
           label = 145;
           break;
          } else {
           $K12$0$i = $491;$T$0$i = $492;
          }
         }
         if ((label|0) == 145) {
          $494 = HEAP32[(27160)>>2]|0;
          $495 = ($490>>>0)<($494>>>0);
          if ($495) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$490>>2] = $351;
           $496 = ((($351)) + 24|0);
           HEAP32[$496>>2] = $T$0$i;
           $497 = ((($351)) + 12|0);
           HEAP32[$497>>2] = $351;
           $498 = ((($351)) + 8|0);
           HEAP32[$498>>2] = $351;
           break;
          }
         }
         else if ((label|0) == 148) {
          $499 = ((($T$0$i)) + 8|0);
          $500 = HEAP32[$499>>2]|0;
          $501 = HEAP32[(27160)>>2]|0;
          $502 = ($500>>>0)>=($501>>>0);
          $not$7$i = ($T$0$i>>>0)>=($501>>>0);
          $503 = $502 & $not$7$i;
          if ($503) {
           $504 = ((($500)) + 12|0);
           HEAP32[$504>>2] = $351;
           HEAP32[$499>>2] = $351;
           $505 = ((($351)) + 8|0);
           HEAP32[$505>>2] = $500;
           $506 = ((($351)) + 12|0);
           HEAP32[$506>>2] = $T$0$i;
           $507 = ((($351)) + 24|0);
           HEAP32[$507>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $508 = ((($v$4$lcssa$i)) + 8|0);
       $$0 = $508;
       return ($$0|0);
      } else {
       $nb$0 = $248;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(27152)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(27164)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(27164)>>2] = $514;
   HEAP32[(27152)>>2] = $511;
   $515 = $511 | 1;
   $516 = ((($514)) + 4|0);
   HEAP32[$516>>2] = $515;
   $517 = (($514) + ($511)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(27152)>>2] = 0;
   HEAP32[(27164)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $522 = (($512) + ($509)|0);
   $523 = ((($522)) + 4|0);
   $524 = HEAP32[$523>>2]|0;
   $525 = $524 | 1;
   HEAP32[$523>>2] = $525;
  }
  $526 = ((($512)) + 8|0);
  $$0 = $526;
  return ($$0|0);
 }
 $527 = HEAP32[(27156)>>2]|0;
 $528 = ($527>>>0)>($nb$0>>>0);
 if ($528) {
  $529 = (($527) - ($nb$0))|0;
  HEAP32[(27156)>>2] = $529;
  $530 = HEAP32[(27168)>>2]|0;
  $531 = (($530) + ($nb$0)|0);
  HEAP32[(27168)>>2] = $531;
  $532 = $529 | 1;
  $533 = ((($531)) + 4|0);
  HEAP32[$533>>2] = $532;
  $534 = $nb$0 | 3;
  $535 = ((($530)) + 4|0);
  HEAP32[$535>>2] = $534;
  $536 = ((($530)) + 8|0);
  $$0 = $536;
  return ($$0|0);
 }
 $537 = HEAP32[6904]|0;
 $538 = ($537|0)==(0);
 do {
  if ($538) {
   $539 = (_sysconf(30)|0);
   $540 = (($539) + -1)|0;
   $541 = $540 & $539;
   $542 = ($541|0)==(0);
   if ($542) {
    HEAP32[(27624)>>2] = $539;
    HEAP32[(27620)>>2] = $539;
    HEAP32[(27628)>>2] = -1;
    HEAP32[(27632)>>2] = -1;
    HEAP32[(27636)>>2] = 0;
    HEAP32[(27588)>>2] = 0;
    $543 = (_time((0|0))|0);
    $544 = $543 & -16;
    $545 = $544 ^ 1431655768;
    HEAP32[6904] = $545;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $546 = (($nb$0) + 48)|0;
 $547 = HEAP32[(27624)>>2]|0;
 $548 = (($nb$0) + 47)|0;
 $549 = (($547) + ($548))|0;
 $550 = (0 - ($547))|0;
 $551 = $549 & $550;
 $552 = ($551>>>0)>($nb$0>>>0);
 if (!($552)) {
  $$0 = 0;
  return ($$0|0);
 }
 $553 = HEAP32[(27584)>>2]|0;
 $554 = ($553|0)==(0);
 if (!($554)) {
  $555 = HEAP32[(27576)>>2]|0;
  $556 = (($555) + ($551))|0;
  $557 = ($556>>>0)<=($555>>>0);
  $558 = ($556>>>0)>($553>>>0);
  $or$cond1$i16 = $557 | $558;
  if ($or$cond1$i16) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $559 = HEAP32[(27588)>>2]|0;
 $560 = $559 & 4;
 $561 = ($560|0)==(0);
 L257: do {
  if ($561) {
   $562 = HEAP32[(27168)>>2]|0;
   $563 = ($562|0)==(0|0);
   L259: do {
    if ($563) {
     label = 173;
    } else {
     $sp$0$i$i = (27592);
     while(1) {
      $564 = HEAP32[$sp$0$i$i>>2]|0;
      $565 = ($564>>>0)>($562>>>0);
      if (!($565)) {
       $566 = ((($sp$0$i$i)) + 4|0);
       $567 = HEAP32[$566>>2]|0;
       $568 = (($564) + ($567)|0);
       $569 = ($568>>>0)>($562>>>0);
       if ($569) {
        break;
       }
      }
      $570 = ((($sp$0$i$i)) + 8|0);
      $571 = HEAP32[$570>>2]|0;
      $572 = ($571|0)==(0|0);
      if ($572) {
       label = 173;
       break L259;
      } else {
       $sp$0$i$i = $571;
      }
     }
     $595 = HEAP32[(27156)>>2]|0;
     $596 = (($549) - ($595))|0;
     $597 = $596 & $550;
     $598 = ($597>>>0)<(2147483647);
     if ($598) {
      $599 = (_sbrk(($597|0))|0);
      $600 = HEAP32[$sp$0$i$i>>2]|0;
      $601 = HEAP32[$566>>2]|0;
      $602 = (($600) + ($601)|0);
      $603 = ($599|0)==($602|0);
      if ($603) {
       $604 = ($599|0)==((-1)|0);
       if (!($604)) {
        $tbase$746$i = $599;$tsize$745$i = $597;
        label = 193;
        break L257;
       }
      } else {
       $br$2$ph$i = $599;$ssize$2$ph$i = $597;
       label = 183;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 173) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if (!($574)) {
      $575 = $573;
      $576 = HEAP32[(27620)>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $551;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($551) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[(27576)>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i17 = $587 & $588;
      if ($or$cond$i17) {
       $589 = HEAP32[(27584)>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $tbase$746$i = $573;$tsize$745$i = $ssize$0$i;
        label = 193;
        break L257;
       } else {
        $br$2$ph$i = $593;$ssize$2$ph$i = $ssize$0$i;
        label = 183;
       }
      }
     }
    }
   } while(0);
   L279: do {
    if ((label|0) == 183) {
     $605 = (0 - ($ssize$2$ph$i))|0;
     $606 = ($br$2$ph$i|0)!=((-1)|0);
     $607 = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond7$i = $607 & $606;
     $608 = ($546>>>0)>($ssize$2$ph$i>>>0);
     $or$cond8$i = $608 & $or$cond7$i;
     do {
      if ($or$cond8$i) {
       $609 = HEAP32[(27624)>>2]|0;
       $610 = (($548) - ($ssize$2$ph$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         break L279;
        } else {
         $617 = (($613) + ($ssize$2$ph$i))|0;
         $ssize$5$i = $617;
         break;
        }
       } else {
        $ssize$5$i = $ssize$2$ph$i;
       }
      } else {
       $ssize$5$i = $ssize$2$ph$i;
      }
     } while(0);
     $618 = ($br$2$ph$i|0)==((-1)|0);
     if (!($618)) {
      $tbase$746$i = $br$2$ph$i;$tsize$745$i = $ssize$5$i;
      label = 193;
      break L257;
     }
    }
   } while(0);
   $619 = HEAP32[(27588)>>2]|0;
   $620 = $619 | 4;
   HEAP32[(27588)>>2] = $620;
   label = 190;
  } else {
   label = 190;
  }
 } while(0);
 if ((label|0) == 190) {
  $621 = ($551>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($551|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond5$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond10$i = $626 & $or$cond5$i;
   if ($or$cond10$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $$not$i = ($629>>>0)>($630>>>0);
    if ($$not$i) {
     $tbase$746$i = $622;$tsize$745$i = $629;
     label = 193;
    }
   }
  }
 }
 if ((label|0) == 193) {
  $631 = HEAP32[(27576)>>2]|0;
  $632 = (($631) + ($tsize$745$i))|0;
  HEAP32[(27576)>>2] = $632;
  $633 = HEAP32[(27580)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(27580)>>2] = $632;
  }
  $635 = HEAP32[(27168)>>2]|0;
  $636 = ($635|0)==(0|0);
  do {
   if ($636) {
    $637 = HEAP32[(27160)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$746$i>>>0)<($637>>>0);
    $or$cond11$i = $638 | $639;
    if ($or$cond11$i) {
     HEAP32[(27160)>>2] = $tbase$746$i;
    }
    HEAP32[(27592)>>2] = $tbase$746$i;
    HEAP32[(27596)>>2] = $tsize$745$i;
    HEAP32[(27604)>>2] = 0;
    $640 = HEAP32[6904]|0;
    HEAP32[(27180)>>2] = $640;
    HEAP32[(27176)>>2] = -1;
    $i$01$i$i = 0;
    while(1) {
     $641 = $i$01$i$i << 1;
     $642 = (27184 + ($641<<2)|0);
     $643 = ((($642)) + 12|0);
     HEAP32[$643>>2] = $642;
     $644 = ((($642)) + 8|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$01$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$01$i$i = $645;
     }
    }
    $646 = (($tsize$745$i) + -40)|0;
    $647 = ((($tbase$746$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$746$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(27168)>>2] = $654;
    HEAP32[(27156)>>2] = $655;
    $656 = $655 | 1;
    $657 = ((($654)) + 4|0);
    HEAP32[$657>>2] = $656;
    $658 = (($654) + ($655)|0);
    $659 = ((($658)) + 4|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[(27632)>>2]|0;
    HEAP32[(27172)>>2] = $660;
   } else {
    $sp$068$i = (27592);
    while(1) {
     $661 = HEAP32[$sp$068$i>>2]|0;
     $662 = ((($sp$068$i)) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$746$i|0)==($664|0);
     if ($665) {
      label = 203;
      break;
     }
     $666 = ((($sp$068$i)) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$068$i = $667;
     }
    }
    if ((label|0) == 203) {
     $669 = ((($sp$068$i)) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($635>>>0)>=($661>>>0);
      $674 = ($635>>>0)<($tbase$746$i>>>0);
      $or$cond48$i = $674 & $673;
      if ($or$cond48$i) {
       $675 = (($663) + ($tsize$745$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[(27156)>>2]|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($tsize$745$i) - ($683))|0;
       $686 = (($685) + ($676))|0;
       HEAP32[(27168)>>2] = $684;
       HEAP32[(27156)>>2] = $686;
       $687 = $686 | 1;
       $688 = ((($684)) + 4|0);
       HEAP32[$688>>2] = $687;
       $689 = (($684) + ($686)|0);
       $690 = ((($689)) + 4|0);
       HEAP32[$690>>2] = 40;
       $691 = HEAP32[(27632)>>2]|0;
       HEAP32[(27172)>>2] = $691;
       break;
      }
     }
    }
    $692 = HEAP32[(27160)>>2]|0;
    $693 = ($tbase$746$i>>>0)<($692>>>0);
    if ($693) {
     HEAP32[(27160)>>2] = $tbase$746$i;
     $757 = $tbase$746$i;
    } else {
     $757 = $692;
    }
    $694 = (($tbase$746$i) + ($tsize$745$i)|0);
    $sp$167$i = (27592);
    while(1) {
     $695 = HEAP32[$sp$167$i>>2]|0;
     $696 = ($695|0)==($694|0);
     if ($696) {
      label = 211;
      break;
     }
     $697 = ((($sp$167$i)) + 8|0);
     $698 = HEAP32[$697>>2]|0;
     $699 = ($698|0)==(0|0);
     if ($699) {
      $sp$0$i$i$i = (27592);
      break;
     } else {
      $sp$167$i = $698;
     }
    }
    if ((label|0) == 211) {
     $700 = ((($sp$167$i)) + 12|0);
     $701 = HEAP32[$700>>2]|0;
     $702 = $701 & 8;
     $703 = ($702|0)==(0);
     if ($703) {
      HEAP32[$sp$167$i>>2] = $tbase$746$i;
      $704 = ((($sp$167$i)) + 4|0);
      $705 = HEAP32[$704>>2]|0;
      $706 = (($705) + ($tsize$745$i))|0;
      HEAP32[$704>>2] = $706;
      $707 = ((($tbase$746$i)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($tbase$746$i) + ($713)|0);
      $715 = ((($694)) + 8|0);
      $716 = $715;
      $717 = $716 & 7;
      $718 = ($717|0)==(0);
      $719 = (0 - ($716))|0;
      $720 = $719 & 7;
      $721 = $718 ? 0 : $720;
      $722 = (($694) + ($721)|0);
      $723 = $722;
      $724 = $714;
      $725 = (($723) - ($724))|0;
      $726 = (($714) + ($nb$0)|0);
      $727 = (($725) - ($nb$0))|0;
      $728 = $nb$0 | 3;
      $729 = ((($714)) + 4|0);
      HEAP32[$729>>2] = $728;
      $730 = ($722|0)==($635|0);
      do {
       if ($730) {
        $731 = HEAP32[(27156)>>2]|0;
        $732 = (($731) + ($727))|0;
        HEAP32[(27156)>>2] = $732;
        HEAP32[(27168)>>2] = $726;
        $733 = $732 | 1;
        $734 = ((($726)) + 4|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[(27164)>>2]|0;
        $736 = ($722|0)==($735|0);
        if ($736) {
         $737 = HEAP32[(27152)>>2]|0;
         $738 = (($737) + ($727))|0;
         HEAP32[(27152)>>2] = $738;
         HEAP32[(27164)>>2] = $726;
         $739 = $738 | 1;
         $740 = ((($726)) + 4|0);
         HEAP32[$740>>2] = $739;
         $741 = (($726) + ($738)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $742 = ((($722)) + 4|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L331: do {
          if ($748) {
           $749 = ((($722)) + 8|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = ((($722)) + 12|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = (27184 + ($753<<2)|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = ($750>>>0)<($757>>>0);
             if ($756) {
              _abort();
              // unreachable;
             }
             $758 = ((($750)) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($722|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[6786]|0;
            $765 = $764 & $763;
            HEAP32[6786] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre9$i$i = ((($752)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $767 = ($752>>>0)<($757>>>0);
             if ($767) {
              _abort();
              // unreachable;
             }
             $768 = ((($752)) + 8|0);
             $769 = HEAP32[$768>>2]|0;
             $770 = ($769|0)==($722|0);
             if ($770) {
              $$pre$phi10$i$iZ2D = $768;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $771 = ((($750)) + 12|0);
           HEAP32[$771>>2] = $752;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $750;
          } else {
           $772 = ((($722)) + 24|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ((($722)) + 12|0);
           $775 = HEAP32[$774>>2]|0;
           $776 = ($775|0)==($722|0);
           do {
            if ($776) {
             $786 = ((($722)) + 16|0);
             $787 = ((($786)) + 4|0);
             $788 = HEAP32[$787>>2]|0;
             $789 = ($788|0)==(0|0);
             if ($789) {
              $790 = HEAP32[$786>>2]|0;
              $791 = ($790|0)==(0|0);
              if ($791) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i = $790;$RP$1$i$i = $786;
              }
             } else {
              $R$1$i$i = $788;$RP$1$i$i = $787;
             }
             while(1) {
              $792 = ((($R$1$i$i)) + 20|0);
              $793 = HEAP32[$792>>2]|0;
              $794 = ($793|0)==(0|0);
              if (!($794)) {
               $R$1$i$i = $793;$RP$1$i$i = $792;
               continue;
              }
              $795 = ((($R$1$i$i)) + 16|0);
              $796 = HEAP32[$795>>2]|0;
              $797 = ($796|0)==(0|0);
              if ($797) {
               break;
              } else {
               $R$1$i$i = $796;$RP$1$i$i = $795;
              }
             }
             $798 = ($RP$1$i$i>>>0)<($757>>>0);
             if ($798) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$1$i$i>>2] = 0;
              $R$3$i$i = $R$1$i$i;
              break;
             }
            } else {
             $777 = ((($722)) + 8|0);
             $778 = HEAP32[$777>>2]|0;
             $779 = ($778>>>0)<($757>>>0);
             if ($779) {
              _abort();
              // unreachable;
             }
             $780 = ((($778)) + 12|0);
             $781 = HEAP32[$780>>2]|0;
             $782 = ($781|0)==($722|0);
             if (!($782)) {
              _abort();
              // unreachable;
             }
             $783 = ((($775)) + 8|0);
             $784 = HEAP32[$783>>2]|0;
             $785 = ($784|0)==($722|0);
             if ($785) {
              HEAP32[$780>>2] = $775;
              HEAP32[$783>>2] = $778;
              $R$3$i$i = $775;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $799 = ($773|0)==(0|0);
           if ($799) {
            break;
           }
           $800 = ((($722)) + 28|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = (27448 + ($801<<2)|0);
           $803 = HEAP32[$802>>2]|0;
           $804 = ($722|0)==($803|0);
           do {
            if ($804) {
             HEAP32[$802>>2] = $R$3$i$i;
             $cond$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $805 = 1 << $801;
             $806 = $805 ^ -1;
             $807 = HEAP32[(27148)>>2]|0;
             $808 = $807 & $806;
             HEAP32[(27148)>>2] = $808;
             break L331;
            } else {
             $809 = HEAP32[(27160)>>2]|0;
             $810 = ($773>>>0)<($809>>>0);
             if ($810) {
              _abort();
              // unreachable;
             }
             $811 = ((($773)) + 16|0);
             $812 = HEAP32[$811>>2]|0;
             $813 = ($812|0)==($722|0);
             if ($813) {
              HEAP32[$811>>2] = $R$3$i$i;
             } else {
              $814 = ((($773)) + 20|0);
              HEAP32[$814>>2] = $R$3$i$i;
             }
             $815 = ($R$3$i$i|0)==(0|0);
             if ($815) {
              break L331;
             }
            }
           } while(0);
           $816 = HEAP32[(27160)>>2]|0;
           $817 = ($R$3$i$i>>>0)<($816>>>0);
           if ($817) {
            _abort();
            // unreachable;
           }
           $818 = ((($R$3$i$i)) + 24|0);
           HEAP32[$818>>2] = $773;
           $819 = ((($722)) + 16|0);
           $820 = HEAP32[$819>>2]|0;
           $821 = ($820|0)==(0|0);
           do {
            if (!($821)) {
             $822 = ($820>>>0)<($816>>>0);
             if ($822) {
              _abort();
              // unreachable;
             } else {
              $823 = ((($R$3$i$i)) + 16|0);
              HEAP32[$823>>2] = $820;
              $824 = ((($820)) + 24|0);
              HEAP32[$824>>2] = $R$3$i$i;
              break;
             }
            }
           } while(0);
           $825 = ((($819)) + 4|0);
           $826 = HEAP32[$825>>2]|0;
           $827 = ($826|0)==(0|0);
           if ($827) {
            break;
           }
           $828 = HEAP32[(27160)>>2]|0;
           $829 = ($826>>>0)<($828>>>0);
           if ($829) {
            _abort();
            // unreachable;
           } else {
            $830 = ((($R$3$i$i)) + 20|0);
            HEAP32[$830>>2] = $826;
            $831 = ((($826)) + 24|0);
            HEAP32[$831>>2] = $R$3$i$i;
            break;
           }
          }
         } while(0);
         $832 = (($722) + ($746)|0);
         $833 = (($746) + ($727))|0;
         $oldfirst$0$i$i = $832;$qsize$0$i$i = $833;
        } else {
         $oldfirst$0$i$i = $722;$qsize$0$i$i = $727;
        }
        $834 = ((($oldfirst$0$i$i)) + 4|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = $835 & -2;
        HEAP32[$834>>2] = $836;
        $837 = $qsize$0$i$i | 1;
        $838 = ((($726)) + 4|0);
        HEAP32[$838>>2] = $837;
        $839 = (($726) + ($qsize$0$i$i)|0);
        HEAP32[$839>>2] = $qsize$0$i$i;
        $840 = $qsize$0$i$i >>> 3;
        $841 = ($qsize$0$i$i>>>0)<(256);
        if ($841) {
         $842 = $840 << 1;
         $843 = (27184 + ($842<<2)|0);
         $844 = HEAP32[6786]|0;
         $845 = 1 << $840;
         $846 = $844 & $845;
         $847 = ($846|0)==(0);
         do {
          if ($847) {
           $848 = $844 | $845;
           HEAP32[6786] = $848;
           $$pre$i16$i = ((($843)) + 8|0);
           $$pre$phi$i17$iZ2D = $$pre$i16$i;$F4$0$i$i = $843;
          } else {
           $849 = ((($843)) + 8|0);
           $850 = HEAP32[$849>>2]|0;
           $851 = HEAP32[(27160)>>2]|0;
           $852 = ($850>>>0)<($851>>>0);
           if (!($852)) {
            $$pre$phi$i17$iZ2D = $849;$F4$0$i$i = $850;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $726;
         $853 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$853>>2] = $726;
         $854 = ((($726)) + 8|0);
         HEAP32[$854>>2] = $F4$0$i$i;
         $855 = ((($726)) + 12|0);
         HEAP32[$855>>2] = $843;
         break;
        }
        $856 = $qsize$0$i$i >>> 8;
        $857 = ($856|0)==(0);
        do {
         if ($857) {
          $I7$0$i$i = 0;
         } else {
          $858 = ($qsize$0$i$i>>>0)>(16777215);
          if ($858) {
           $I7$0$i$i = 31;
           break;
          }
          $859 = (($856) + 1048320)|0;
          $860 = $859 >>> 16;
          $861 = $860 & 8;
          $862 = $856 << $861;
          $863 = (($862) + 520192)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 4;
          $866 = $865 | $861;
          $867 = $862 << $865;
          $868 = (($867) + 245760)|0;
          $869 = $868 >>> 16;
          $870 = $869 & 2;
          $871 = $866 | $870;
          $872 = (14 - ($871))|0;
          $873 = $867 << $870;
          $874 = $873 >>> 15;
          $875 = (($872) + ($874))|0;
          $876 = $875 << 1;
          $877 = (($875) + 7)|0;
          $878 = $qsize$0$i$i >>> $877;
          $879 = $878 & 1;
          $880 = $879 | $876;
          $I7$0$i$i = $880;
         }
        } while(0);
        $881 = (27448 + ($I7$0$i$i<<2)|0);
        $882 = ((($726)) + 28|0);
        HEAP32[$882>>2] = $I7$0$i$i;
        $883 = ((($726)) + 16|0);
        $884 = ((($883)) + 4|0);
        HEAP32[$884>>2] = 0;
        HEAP32[$883>>2] = 0;
        $885 = HEAP32[(27148)>>2]|0;
        $886 = 1 << $I7$0$i$i;
        $887 = $885 & $886;
        $888 = ($887|0)==(0);
        if ($888) {
         $889 = $885 | $886;
         HEAP32[(27148)>>2] = $889;
         HEAP32[$881>>2] = $726;
         $890 = ((($726)) + 24|0);
         HEAP32[$890>>2] = $881;
         $891 = ((($726)) + 12|0);
         HEAP32[$891>>2] = $726;
         $892 = ((($726)) + 8|0);
         HEAP32[$892>>2] = $726;
         break;
        }
        $893 = HEAP32[$881>>2]|0;
        $894 = ($I7$0$i$i|0)==(31);
        $895 = $I7$0$i$i >>> 1;
        $896 = (25 - ($895))|0;
        $897 = $894 ? 0 : $896;
        $898 = $qsize$0$i$i << $897;
        $K8$0$i$i = $898;$T$0$i18$i = $893;
        while(1) {
         $899 = ((($T$0$i18$i)) + 4|0);
         $900 = HEAP32[$899>>2]|0;
         $901 = $900 & -8;
         $902 = ($901|0)==($qsize$0$i$i|0);
         if ($902) {
          label = 281;
          break;
         }
         $903 = $K8$0$i$i >>> 31;
         $904 = (((($T$0$i18$i)) + 16|0) + ($903<<2)|0);
         $905 = $K8$0$i$i << 1;
         $906 = HEAP32[$904>>2]|0;
         $907 = ($906|0)==(0|0);
         if ($907) {
          label = 278;
          break;
         } else {
          $K8$0$i$i = $905;$T$0$i18$i = $906;
         }
        }
        if ((label|0) == 278) {
         $908 = HEAP32[(27160)>>2]|0;
         $909 = ($904>>>0)<($908>>>0);
         if ($909) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$904>>2] = $726;
          $910 = ((($726)) + 24|0);
          HEAP32[$910>>2] = $T$0$i18$i;
          $911 = ((($726)) + 12|0);
          HEAP32[$911>>2] = $726;
          $912 = ((($726)) + 8|0);
          HEAP32[$912>>2] = $726;
          break;
         }
        }
        else if ((label|0) == 281) {
         $913 = ((($T$0$i18$i)) + 8|0);
         $914 = HEAP32[$913>>2]|0;
         $915 = HEAP32[(27160)>>2]|0;
         $916 = ($914>>>0)>=($915>>>0);
         $not$$i20$i = ($T$0$i18$i>>>0)>=($915>>>0);
         $917 = $916 & $not$$i20$i;
         if ($917) {
          $918 = ((($914)) + 12|0);
          HEAP32[$918>>2] = $726;
          HEAP32[$913>>2] = $726;
          $919 = ((($726)) + 8|0);
          HEAP32[$919>>2] = $914;
          $920 = ((($726)) + 12|0);
          HEAP32[$920>>2] = $T$0$i18$i;
          $921 = ((($726)) + 24|0);
          HEAP32[$921>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1052 = ((($714)) + 8|0);
      $$0 = $1052;
      return ($$0|0);
     } else {
      $sp$0$i$i$i = (27592);
     }
    }
    while(1) {
     $922 = HEAP32[$sp$0$i$i$i>>2]|0;
     $923 = ($922>>>0)>($635>>>0);
     if (!($923)) {
      $924 = ((($sp$0$i$i$i)) + 4|0);
      $925 = HEAP32[$924>>2]|0;
      $926 = (($922) + ($925)|0);
      $927 = ($926>>>0)>($635>>>0);
      if ($927) {
       break;
      }
     }
     $928 = ((($sp$0$i$i$i)) + 8|0);
     $929 = HEAP32[$928>>2]|0;
     $sp$0$i$i$i = $929;
    }
    $930 = ((($926)) + -47|0);
    $931 = ((($930)) + 8|0);
    $932 = $931;
    $933 = $932 & 7;
    $934 = ($933|0)==(0);
    $935 = (0 - ($932))|0;
    $936 = $935 & 7;
    $937 = $934 ? 0 : $936;
    $938 = (($930) + ($937)|0);
    $939 = ((($635)) + 16|0);
    $940 = ($938>>>0)<($939>>>0);
    $941 = $940 ? $635 : $938;
    $942 = ((($941)) + 8|0);
    $943 = ((($941)) + 24|0);
    $944 = (($tsize$745$i) + -40)|0;
    $945 = ((($tbase$746$i)) + 8|0);
    $946 = $945;
    $947 = $946 & 7;
    $948 = ($947|0)==(0);
    $949 = (0 - ($946))|0;
    $950 = $949 & 7;
    $951 = $948 ? 0 : $950;
    $952 = (($tbase$746$i) + ($951)|0);
    $953 = (($944) - ($951))|0;
    HEAP32[(27168)>>2] = $952;
    HEAP32[(27156)>>2] = $953;
    $954 = $953 | 1;
    $955 = ((($952)) + 4|0);
    HEAP32[$955>>2] = $954;
    $956 = (($952) + ($953)|0);
    $957 = ((($956)) + 4|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(27632)>>2]|0;
    HEAP32[(27172)>>2] = $958;
    $959 = ((($941)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$942>>2]=HEAP32[(27592)>>2]|0;HEAP32[$942+4>>2]=HEAP32[(27592)+4>>2]|0;HEAP32[$942+8>>2]=HEAP32[(27592)+8>>2]|0;HEAP32[$942+12>>2]=HEAP32[(27592)+12>>2]|0;
    HEAP32[(27592)>>2] = $tbase$746$i;
    HEAP32[(27596)>>2] = $tsize$745$i;
    HEAP32[(27604)>>2] = 0;
    HEAP32[(27600)>>2] = $942;
    $p$0$i$i = $943;
    while(1) {
     $960 = ((($p$0$i$i)) + 4|0);
     HEAP32[$960>>2] = 7;
     $961 = ((($960)) + 4|0);
     $962 = ($961>>>0)<($926>>>0);
     if ($962) {
      $p$0$i$i = $960;
     } else {
      break;
     }
    }
    $963 = ($941|0)==($635|0);
    if (!($963)) {
     $964 = $941;
     $965 = $635;
     $966 = (($964) - ($965))|0;
     $967 = HEAP32[$959>>2]|0;
     $968 = $967 & -2;
     HEAP32[$959>>2] = $968;
     $969 = $966 | 1;
     $970 = ((($635)) + 4|0);
     HEAP32[$970>>2] = $969;
     HEAP32[$941>>2] = $966;
     $971 = $966 >>> 3;
     $972 = ($966>>>0)<(256);
     if ($972) {
      $973 = $971 << 1;
      $974 = (27184 + ($973<<2)|0);
      $975 = HEAP32[6786]|0;
      $976 = 1 << $971;
      $977 = $975 & $976;
      $978 = ($977|0)==(0);
      if ($978) {
       $979 = $975 | $976;
       HEAP32[6786] = $979;
       $$pre$i$i = ((($974)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $974;
      } else {
       $980 = ((($974)) + 8|0);
       $981 = HEAP32[$980>>2]|0;
       $982 = HEAP32[(27160)>>2]|0;
       $983 = ($981>>>0)<($982>>>0);
       if ($983) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $980;$F$0$i$i = $981;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $984 = ((($F$0$i$i)) + 12|0);
      HEAP32[$984>>2] = $635;
      $985 = ((($635)) + 8|0);
      HEAP32[$985>>2] = $F$0$i$i;
      $986 = ((($635)) + 12|0);
      HEAP32[$986>>2] = $974;
      break;
     }
     $987 = $966 >>> 8;
     $988 = ($987|0)==(0);
     if ($988) {
      $I1$0$i$i = 0;
     } else {
      $989 = ($966>>>0)>(16777215);
      if ($989) {
       $I1$0$i$i = 31;
      } else {
       $990 = (($987) + 1048320)|0;
       $991 = $990 >>> 16;
       $992 = $991 & 8;
       $993 = $987 << $992;
       $994 = (($993) + 520192)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 4;
       $997 = $996 | $992;
       $998 = $993 << $996;
       $999 = (($998) + 245760)|0;
       $1000 = $999 >>> 16;
       $1001 = $1000 & 2;
       $1002 = $997 | $1001;
       $1003 = (14 - ($1002))|0;
       $1004 = $998 << $1001;
       $1005 = $1004 >>> 15;
       $1006 = (($1003) + ($1005))|0;
       $1007 = $1006 << 1;
       $1008 = (($1006) + 7)|0;
       $1009 = $966 >>> $1008;
       $1010 = $1009 & 1;
       $1011 = $1010 | $1007;
       $I1$0$i$i = $1011;
      }
     }
     $1012 = (27448 + ($I1$0$i$i<<2)|0);
     $1013 = ((($635)) + 28|0);
     HEAP32[$1013>>2] = $I1$0$i$i;
     $1014 = ((($635)) + 20|0);
     HEAP32[$1014>>2] = 0;
     HEAP32[$939>>2] = 0;
     $1015 = HEAP32[(27148)>>2]|0;
     $1016 = 1 << $I1$0$i$i;
     $1017 = $1015 & $1016;
     $1018 = ($1017|0)==(0);
     if ($1018) {
      $1019 = $1015 | $1016;
      HEAP32[(27148)>>2] = $1019;
      HEAP32[$1012>>2] = $635;
      $1020 = ((($635)) + 24|0);
      HEAP32[$1020>>2] = $1012;
      $1021 = ((($635)) + 12|0);
      HEAP32[$1021>>2] = $635;
      $1022 = ((($635)) + 8|0);
      HEAP32[$1022>>2] = $635;
      break;
     }
     $1023 = HEAP32[$1012>>2]|0;
     $1024 = ($I1$0$i$i|0)==(31);
     $1025 = $I1$0$i$i >>> 1;
     $1026 = (25 - ($1025))|0;
     $1027 = $1024 ? 0 : $1026;
     $1028 = $966 << $1027;
     $K2$0$i$i = $1028;$T$0$i$i = $1023;
     while(1) {
      $1029 = ((($T$0$i$i)) + 4|0);
      $1030 = HEAP32[$1029>>2]|0;
      $1031 = $1030 & -8;
      $1032 = ($1031|0)==($966|0);
      if ($1032) {
       label = 307;
       break;
      }
      $1033 = $K2$0$i$i >>> 31;
      $1034 = (((($T$0$i$i)) + 16|0) + ($1033<<2)|0);
      $1035 = $K2$0$i$i << 1;
      $1036 = HEAP32[$1034>>2]|0;
      $1037 = ($1036|0)==(0|0);
      if ($1037) {
       label = 304;
       break;
      } else {
       $K2$0$i$i = $1035;$T$0$i$i = $1036;
      }
     }
     if ((label|0) == 304) {
      $1038 = HEAP32[(27160)>>2]|0;
      $1039 = ($1034>>>0)<($1038>>>0);
      if ($1039) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1034>>2] = $635;
       $1040 = ((($635)) + 24|0);
       HEAP32[$1040>>2] = $T$0$i$i;
       $1041 = ((($635)) + 12|0);
       HEAP32[$1041>>2] = $635;
       $1042 = ((($635)) + 8|0);
       HEAP32[$1042>>2] = $635;
       break;
      }
     }
     else if ((label|0) == 307) {
      $1043 = ((($T$0$i$i)) + 8|0);
      $1044 = HEAP32[$1043>>2]|0;
      $1045 = HEAP32[(27160)>>2]|0;
      $1046 = ($1044>>>0)>=($1045>>>0);
      $not$$i$i = ($T$0$i$i>>>0)>=($1045>>>0);
      $1047 = $1046 & $not$$i$i;
      if ($1047) {
       $1048 = ((($1044)) + 12|0);
       HEAP32[$1048>>2] = $635;
       HEAP32[$1043>>2] = $635;
       $1049 = ((($635)) + 8|0);
       HEAP32[$1049>>2] = $1044;
       $1050 = ((($635)) + 12|0);
       HEAP32[$1050>>2] = $T$0$i$i;
       $1051 = ((($635)) + 24|0);
       HEAP32[$1051>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1053 = HEAP32[(27156)>>2]|0;
  $1054 = ($1053>>>0)>($nb$0>>>0);
  if ($1054) {
   $1055 = (($1053) - ($nb$0))|0;
   HEAP32[(27156)>>2] = $1055;
   $1056 = HEAP32[(27168)>>2]|0;
   $1057 = (($1056) + ($nb$0)|0);
   HEAP32[(27168)>>2] = $1057;
   $1058 = $1055 | 1;
   $1059 = ((($1057)) + 4|0);
   HEAP32[$1059>>2] = $1058;
   $1060 = $nb$0 | 3;
   $1061 = ((($1056)) + 4|0);
   HEAP32[$1061>>2] = $1060;
   $1062 = ((($1056)) + 8|0);
   $$0 = $1062;
   return ($$0|0);
  }
 }
 $1063 = HEAP32[6773]|0;
 $1064 = ($1063|0)==(0|0);
 if ($1064) {
  $$0$i = 27136;
 } else {
  $1065 = (_pthread_self()|0);
  $1066 = ((($1065)) + 64|0);
  $1067 = HEAP32[$1066>>2]|0;
  $$0$i = $1067;
 }
 HEAP32[$$0$i>>2] = 12;
 $$0 = 0;
 return ($$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre$phiZ2D = 0, $$pre40 = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$3 = 0, $R8$1 = 0, $R8$3 = 0, $RP$1 = 0, $RP10$1 = 0, $T$0 = 0, $cond20 = 0, $cond21 = 0, $not$ = 0, $p$1 = 0;
 var $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(27160)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $9 = (($1) + ($8)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $14 = (0 - ($12))|0;
   $15 = (($1) + ($14)|0);
   $16 = (($12) + ($8))|0;
   $17 = ($15>>>0)<($2>>>0);
   if ($17) {
    _abort();
    // unreachable;
   }
   $18 = HEAP32[(27164)>>2]|0;
   $19 = ($15|0)==($18|0);
   if ($19) {
    $104 = ((($9)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    HEAP32[(27152)>>2] = $16;
    $108 = $105 & -2;
    HEAP32[$104>>2] = $108;
    $109 = $16 | 1;
    $110 = ((($15)) + 4|0);
    HEAP32[$110>>2] = $109;
    $111 = (($15) + ($16)|0);
    HEAP32[$111>>2] = $16;
    return;
   }
   $20 = $12 >>> 3;
   $21 = ($12>>>0)<(256);
   if ($21) {
    $22 = ((($15)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($15)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $20 << 1;
    $27 = (27184 + ($26<<2)|0);
    $28 = ($23|0)==($27|0);
    if (!($28)) {
     $29 = ($23>>>0)<($2>>>0);
     if ($29) {
      _abort();
      // unreachable;
     }
     $30 = ((($23)) + 12|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==($15|0);
     if (!($32)) {
      _abort();
      // unreachable;
     }
    }
    $33 = ($25|0)==($23|0);
    if ($33) {
     $34 = 1 << $20;
     $35 = $34 ^ -1;
     $36 = HEAP32[6786]|0;
     $37 = $36 & $35;
     HEAP32[6786] = $37;
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    $38 = ($25|0)==($27|0);
    if ($38) {
     $$pre42 = ((($25)) + 8|0);
     $$pre$phi43Z2D = $$pre42;
    } else {
     $39 = ($25>>>0)<($2>>>0);
     if ($39) {
      _abort();
      // unreachable;
     }
     $40 = ((($25)) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==($15|0);
     if ($42) {
      $$pre$phi43Z2D = $40;
     } else {
      _abort();
      // unreachable;
     }
    }
    $43 = ((($23)) + 12|0);
    HEAP32[$43>>2] = $25;
    HEAP32[$$pre$phi43Z2D>>2] = $23;
    $p$1 = $15;$psize$1 = $16;
    break;
   }
   $44 = ((($15)) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($15)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==($15|0);
   do {
    if ($48) {
     $58 = ((($15)) + 16|0);
     $59 = ((($58)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(0|0);
     if ($61) {
      $62 = HEAP32[$58>>2]|0;
      $63 = ($62|0)==(0|0);
      if ($63) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $62;$RP$1 = $58;
      }
     } else {
      $R$1 = $60;$RP$1 = $59;
     }
     while(1) {
      $64 = ((($R$1)) + 20|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if (!($66)) {
       $R$1 = $65;$RP$1 = $64;
       continue;
      }
      $67 = ((($R$1)) + 16|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)==(0|0);
      if ($69) {
       break;
      } else {
       $R$1 = $68;$RP$1 = $67;
      }
     }
     $70 = ($RP$1>>>0)<($2>>>0);
     if ($70) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1>>2] = 0;
      $R$3 = $R$1;
      break;
     }
    } else {
     $49 = ((($15)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50>>>0)<($2>>>0);
     if ($51) {
      _abort();
      // unreachable;
     }
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($15|0);
     if (!($54)) {
      _abort();
      // unreachable;
     }
     $55 = ((($47)) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==($15|0);
     if ($57) {
      HEAP32[$52>>2] = $47;
      HEAP32[$55>>2] = $50;
      $R$3 = $47;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $71 = ($45|0)==(0|0);
   if ($71) {
    $p$1 = $15;$psize$1 = $16;
   } else {
    $72 = ((($15)) + 28|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (27448 + ($73<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($15|0)==($75|0);
    if ($76) {
     HEAP32[$74>>2] = $R$3;
     $cond20 = ($R$3|0)==(0|0);
     if ($cond20) {
      $77 = 1 << $73;
      $78 = $77 ^ -1;
      $79 = HEAP32[(27148)>>2]|0;
      $80 = $79 & $78;
      HEAP32[(27148)>>2] = $80;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    } else {
     $81 = HEAP32[(27160)>>2]|0;
     $82 = ($45>>>0)<($81>>>0);
     if ($82) {
      _abort();
      // unreachable;
     }
     $83 = ((($45)) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==($15|0);
     if ($85) {
      HEAP32[$83>>2] = $R$3;
     } else {
      $86 = ((($45)) + 20|0);
      HEAP32[$86>>2] = $R$3;
     }
     $87 = ($R$3|0)==(0|0);
     if ($87) {
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
    $88 = HEAP32[(27160)>>2]|0;
    $89 = ($R$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($R$3)) + 24|0);
    HEAP32[$90>>2] = $45;
    $91 = ((($15)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($R$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$1 = $15;$psize$1 = $16;
    } else {
     $100 = HEAP32[(27160)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($R$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $R$3;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
   }
  } else {
   $p$1 = $1;$psize$1 = $8;
  }
 } while(0);
 $112 = ($p$1>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $113 = ((($9)) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[(27168)>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[(27156)>>2]|0;
   $122 = (($121) + ($psize$1))|0;
   HEAP32[(27156)>>2] = $122;
   HEAP32[(27168)>>2] = $p$1;
   $123 = $122 | 1;
   $124 = ((($p$1)) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[(27164)>>2]|0;
   $126 = ($p$1|0)==($125|0);
   if (!($126)) {
    return;
   }
   HEAP32[(27164)>>2] = 0;
   HEAP32[(27152)>>2] = 0;
   return;
  }
  $127 = HEAP32[(27164)>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[(27152)>>2]|0;
   $130 = (($129) + ($psize$1))|0;
   HEAP32[(27152)>>2] = $130;
   HEAP32[(27164)>>2] = $p$1;
   $131 = $130 | 1;
   $132 = ((($p$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$1) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$1))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = ((($9)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($9)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (27184 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(27160)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[6786]|0;
     $154 = $153 & $152;
     HEAP32[6786] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre40 = ((($141)) + 8|0);
     $$pre$phi41Z2D = $$pre40;
    } else {
     $156 = HEAP32[(27160)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi41Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi41Z2D>>2] = $139;
   } else {
    $162 = ((($9)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($9)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $177 = ((($9)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R8$3 = 0;
        break;
       } else {
        $R8$1 = $181;$RP10$1 = $177;
       }
      } else {
       $R8$1 = $179;$RP10$1 = $178;
      }
      while(1) {
       $183 = ((($R8$1)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R8$1 = $184;$RP10$1 = $183;
        continue;
       }
       $186 = ((($R8$1)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R8$1 = $187;$RP10$1 = $186;
       }
      }
      $189 = HEAP32[(27160)>>2]|0;
      $190 = ($RP10$1>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP10$1>>2] = 0;
       $R8$3 = $R8$1;
       break;
      }
     } else {
      $167 = ((($9)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(27160)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R8$3 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($9)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (27448 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R8$3;
      $cond21 = ($R8$3|0)==(0|0);
      if ($cond21) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[(27148)>>2]|0;
       $200 = $199 & $198;
       HEAP32[(27148)>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[(27160)>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = ((($163)) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R8$3;
      } else {
       $206 = ((($163)) + 20|0);
       HEAP32[$206>>2] = $R8$3;
      }
      $207 = ($R8$3|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[(27160)>>2]|0;
     $209 = ($R8$3>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = ((($R8$3)) + 24|0);
     HEAP32[$210>>2] = $163;
     $211 = ((($9)) + 16|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = ($212>>>0)<($208>>>0);
       if ($214) {
        _abort();
        // unreachable;
       } else {
        $215 = ((($R8$3)) + 16|0);
        HEAP32[$215>>2] = $212;
        $216 = ((($212)) + 24|0);
        HEAP32[$216>>2] = $R8$3;
        break;
       }
      }
     } while(0);
     $217 = ((($211)) + 4|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = ($218|0)==(0|0);
     if (!($219)) {
      $220 = HEAP32[(27160)>>2]|0;
      $221 = ($218>>>0)<($220>>>0);
      if ($221) {
       _abort();
       // unreachable;
      } else {
       $222 = ((($R8$3)) + 20|0);
       HEAP32[$222>>2] = $218;
       $223 = ((($218)) + 24|0);
       HEAP32[$223>>2] = $R8$3;
       break;
      }
     }
    }
   }
  } while(0);
  $224 = $135 | 1;
  $225 = ((($p$1)) + 4|0);
  HEAP32[$225>>2] = $224;
  $226 = (($p$1) + ($135)|0);
  HEAP32[$226>>2] = $135;
  $227 = HEAP32[(27164)>>2]|0;
  $228 = ($p$1|0)==($227|0);
  if ($228) {
   HEAP32[(27152)>>2] = $135;
   return;
  } else {
   $psize$2 = $135;
  }
 } else {
  $229 = $114 & -2;
  HEAP32[$113>>2] = $229;
  $230 = $psize$1 | 1;
  $231 = ((($p$1)) + 4|0);
  HEAP32[$231>>2] = $230;
  $232 = (($p$1) + ($psize$1)|0);
  HEAP32[$232>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $233 = $psize$2 >>> 3;
 $234 = ($psize$2>>>0)<(256);
 if ($234) {
  $235 = $233 << 1;
  $236 = (27184 + ($235<<2)|0);
  $237 = HEAP32[6786]|0;
  $238 = 1 << $233;
  $239 = $237 & $238;
  $240 = ($239|0)==(0);
  if ($240) {
   $241 = $237 | $238;
   HEAP32[6786] = $241;
   $$pre = ((($236)) + 8|0);
   $$pre$phiZ2D = $$pre;$F18$0 = $236;
  } else {
   $242 = ((($236)) + 8|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = HEAP32[(27160)>>2]|0;
   $245 = ($243>>>0)<($244>>>0);
   if ($245) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $242;$F18$0 = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $246 = ((($F18$0)) + 12|0);
  HEAP32[$246>>2] = $p$1;
  $247 = ((($p$1)) + 8|0);
  HEAP32[$247>>2] = $F18$0;
  $248 = ((($p$1)) + 12|0);
  HEAP32[$248>>2] = $236;
  return;
 }
 $249 = $psize$2 >>> 8;
 $250 = ($249|0)==(0);
 if ($250) {
  $I20$0 = 0;
 } else {
  $251 = ($psize$2>>>0)>(16777215);
  if ($251) {
   $I20$0 = 31;
  } else {
   $252 = (($249) + 1048320)|0;
   $253 = $252 >>> 16;
   $254 = $253 & 8;
   $255 = $249 << $254;
   $256 = (($255) + 520192)|0;
   $257 = $256 >>> 16;
   $258 = $257 & 4;
   $259 = $258 | $254;
   $260 = $255 << $258;
   $261 = (($260) + 245760)|0;
   $262 = $261 >>> 16;
   $263 = $262 & 2;
   $264 = $259 | $263;
   $265 = (14 - ($264))|0;
   $266 = $260 << $263;
   $267 = $266 >>> 15;
   $268 = (($265) + ($267))|0;
   $269 = $268 << 1;
   $270 = (($268) + 7)|0;
   $271 = $psize$2 >>> $270;
   $272 = $271 & 1;
   $273 = $272 | $269;
   $I20$0 = $273;
  }
 }
 $274 = (27448 + ($I20$0<<2)|0);
 $275 = ((($p$1)) + 28|0);
 HEAP32[$275>>2] = $I20$0;
 $276 = ((($p$1)) + 16|0);
 $277 = ((($p$1)) + 20|0);
 HEAP32[$277>>2] = 0;
 HEAP32[$276>>2] = 0;
 $278 = HEAP32[(27148)>>2]|0;
 $279 = 1 << $I20$0;
 $280 = $278 & $279;
 $281 = ($280|0)==(0);
 do {
  if ($281) {
   $282 = $278 | $279;
   HEAP32[(27148)>>2] = $282;
   HEAP32[$274>>2] = $p$1;
   $283 = ((($p$1)) + 24|0);
   HEAP32[$283>>2] = $274;
   $284 = ((($p$1)) + 12|0);
   HEAP32[$284>>2] = $p$1;
   $285 = ((($p$1)) + 8|0);
   HEAP32[$285>>2] = $p$1;
  } else {
   $286 = HEAP32[$274>>2]|0;
   $287 = ($I20$0|0)==(31);
   $288 = $I20$0 >>> 1;
   $289 = (25 - ($288))|0;
   $290 = $287 ? 0 : $289;
   $291 = $psize$2 << $290;
   $K21$0 = $291;$T$0 = $286;
   while(1) {
    $292 = ((($T$0)) + 4|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = $293 & -8;
    $295 = ($294|0)==($psize$2|0);
    if ($295) {
     label = 130;
     break;
    }
    $296 = $K21$0 >>> 31;
    $297 = (((($T$0)) + 16|0) + ($296<<2)|0);
    $298 = $K21$0 << 1;
    $299 = HEAP32[$297>>2]|0;
    $300 = ($299|0)==(0|0);
    if ($300) {
     label = 127;
     break;
    } else {
     $K21$0 = $298;$T$0 = $299;
    }
   }
   if ((label|0) == 127) {
    $301 = HEAP32[(27160)>>2]|0;
    $302 = ($297>>>0)<($301>>>0);
    if ($302) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$297>>2] = $p$1;
     $303 = ((($p$1)) + 24|0);
     HEAP32[$303>>2] = $T$0;
     $304 = ((($p$1)) + 12|0);
     HEAP32[$304>>2] = $p$1;
     $305 = ((($p$1)) + 8|0);
     HEAP32[$305>>2] = $p$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $306 = ((($T$0)) + 8|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = HEAP32[(27160)>>2]|0;
    $309 = ($307>>>0)>=($308>>>0);
    $not$ = ($T$0>>>0)>=($308>>>0);
    $310 = $309 & $not$;
    if ($310) {
     $311 = ((($307)) + 12|0);
     HEAP32[$311>>2] = $p$1;
     HEAP32[$306>>2] = $p$1;
     $312 = ((($p$1)) + 8|0);
     HEAP32[$312>>2] = $307;
     $313 = ((($p$1)) + 12|0);
     HEAP32[$313>>2] = $T$0;
     $314 = ((($p$1)) + 24|0);
     HEAP32[$314>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $315 = HEAP32[(27176)>>2]|0;
 $316 = (($315) + -1)|0;
 HEAP32[(27176)>>2] = $316;
 $317 = ($316|0)==(0);
 if ($317) {
  $sp$0$in$i = (27600);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $318 = ($sp$0$i|0)==(0|0);
  $319 = ((($sp$0$i)) + 8|0);
  if ($318) {
   break;
  } else {
   $sp$0$in$i = $319;
  }
 }
 HEAP32[(27176)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $$0$i = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $R$1$i = 0, $R$3$i = 0, $RP$1$i = 0, $cond$i = 0, $mem$1 = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$not$i = 0, $or$cond3$i = 0, $storemerge$i = 0, $storemerge1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$1 = $1;
  return ($mem$1|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = HEAP32[6773]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0$i = 27136;
  } else {
   $5 = (_pthread_self()|0);
   $6 = ((($5)) + 64|0);
   $7 = HEAP32[$6>>2]|0;
   $$0$i = $7;
  }
  HEAP32[$$0$i>>2] = 12;
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $8 = ($bytes>>>0)<(11);
 $9 = (($bytes) + 11)|0;
 $10 = $9 & -8;
 $11 = $8 ? 16 : $10;
 $12 = ((($oldmem)) + -8|0);
 $13 = ((($oldmem)) + -4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & -8;
 $16 = (($12) + ($15)|0);
 $17 = HEAP32[(27160)>>2]|0;
 $18 = $14 & 3;
 $notlhs$i = ($12>>>0)>=($17>>>0);
 $notrhs$i = ($18|0)!=(1);
 $or$cond$not$i = $notrhs$i & $notlhs$i;
 $19 = ($15|0)>(0);
 $or$cond3$i = $or$cond$not$i & $19;
 if (!($or$cond3$i)) {
  _abort();
  // unreachable;
 }
 $20 = ((($16)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 & 1;
 $23 = ($22|0)==(0);
 if ($23) {
  _abort();
  // unreachable;
 }
 $24 = ($18|0)==(0);
 do {
  if ($24) {
   $25 = ($11>>>0)<(256);
   $26 = $11 | 4;
   $27 = ($15>>>0)<($26>>>0);
   $or$cond = $25 | $27;
   if (!($or$cond)) {
    $28 = (($15) - ($11))|0;
    $29 = HEAP32[(27624)>>2]|0;
    $30 = $29 << 1;
    $31 = ($28>>>0)>($30>>>0);
    if (!($31)) {
     $mem$1 = $oldmem;
     return ($mem$1|0);
    }
   }
  } else {
   $32 = ($15>>>0)<($11>>>0);
   if (!($32)) {
    $33 = (($15) - ($11))|0;
    $34 = ($33>>>0)>(15);
    if (!($34)) {
     $mem$1 = $oldmem;
     return ($mem$1|0);
    }
    $35 = (($12) + ($11)|0);
    $36 = $14 & 1;
    $37 = $36 | $11;
    $38 = $37 | 2;
    HEAP32[$13>>2] = $38;
    $39 = ((($35)) + 4|0);
    $40 = $33 | 3;
    HEAP32[$39>>2] = $40;
    $41 = (($35) + ($33)|0);
    $42 = ((($41)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = $43 | 1;
    HEAP32[$42>>2] = $44;
    _dispose_chunk($35,$33);
    $mem$1 = $oldmem;
    return ($mem$1|0);
   }
   $45 = HEAP32[(27168)>>2]|0;
   $46 = ($16|0)==($45|0);
   if ($46) {
    $47 = HEAP32[(27156)>>2]|0;
    $48 = (($47) + ($15))|0;
    $49 = ($48>>>0)>($11>>>0);
    if (!($49)) {
     break;
    }
    $50 = (($48) - ($11))|0;
    $51 = (($12) + ($11)|0);
    $52 = $14 & 1;
    $53 = $52 | $11;
    $54 = $53 | 2;
    HEAP32[$13>>2] = $54;
    $55 = ((($51)) + 4|0);
    $56 = $50 | 1;
    HEAP32[$55>>2] = $56;
    HEAP32[(27168)>>2] = $51;
    HEAP32[(27156)>>2] = $50;
    $mem$1 = $oldmem;
    return ($mem$1|0);
   }
   $57 = HEAP32[(27164)>>2]|0;
   $58 = ($16|0)==($57|0);
   if ($58) {
    $59 = HEAP32[(27152)>>2]|0;
    $60 = (($59) + ($15))|0;
    $61 = ($60>>>0)<($11>>>0);
    if ($61) {
     break;
    }
    $62 = (($60) - ($11))|0;
    $63 = ($62>>>0)>(15);
    if ($63) {
     $64 = (($12) + ($11)|0);
     $65 = (($64) + ($62)|0);
     $66 = $14 & 1;
     $67 = $66 | $11;
     $68 = $67 | 2;
     HEAP32[$13>>2] = $68;
     $69 = ((($64)) + 4|0);
     $70 = $62 | 1;
     HEAP32[$69>>2] = $70;
     HEAP32[$65>>2] = $62;
     $71 = ((($65)) + 4|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = $72 & -2;
     HEAP32[$71>>2] = $73;
     $storemerge$i = $64;$storemerge1$i = $62;
    } else {
     $74 = $14 & 1;
     $75 = $74 | $60;
     $76 = $75 | 2;
     HEAP32[$13>>2] = $76;
     $77 = (($12) + ($60)|0);
     $78 = ((($77)) + 4|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = $79 | 1;
     HEAP32[$78>>2] = $80;
     $storemerge$i = 0;$storemerge1$i = 0;
    }
    HEAP32[(27152)>>2] = $storemerge1$i;
    HEAP32[(27164)>>2] = $storemerge$i;
    $mem$1 = $oldmem;
    return ($mem$1|0);
   }
   $81 = $21 & 2;
   $82 = ($81|0)==(0);
   if ($82) {
    $83 = $21 & -8;
    $84 = (($83) + ($15))|0;
    $85 = ($84>>>0)<($11>>>0);
    if (!($85)) {
     $86 = (($84) - ($11))|0;
     $87 = $21 >>> 3;
     $88 = ($21>>>0)<(256);
     do {
      if ($88) {
       $89 = ((($16)) + 8|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = ((($16)) + 12|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = $87 << 1;
       $94 = (27184 + ($93<<2)|0);
       $95 = ($90|0)==($94|0);
       if (!($95)) {
        $96 = ($90>>>0)<($17>>>0);
        if ($96) {
         _abort();
         // unreachable;
        }
        $97 = ((($90)) + 12|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = ($98|0)==($16|0);
        if (!($99)) {
         _abort();
         // unreachable;
        }
       }
       $100 = ($92|0)==($90|0);
       if ($100) {
        $101 = 1 << $87;
        $102 = $101 ^ -1;
        $103 = HEAP32[6786]|0;
        $104 = $103 & $102;
        HEAP32[6786] = $104;
        break;
       }
       $105 = ($92|0)==($94|0);
       if ($105) {
        $$pre$i = ((($92)) + 8|0);
        $$pre$phi$iZ2D = $$pre$i;
       } else {
        $106 = ($92>>>0)<($17>>>0);
        if ($106) {
         _abort();
         // unreachable;
        }
        $107 = ((($92)) + 8|0);
        $108 = HEAP32[$107>>2]|0;
        $109 = ($108|0)==($16|0);
        if ($109) {
         $$pre$phi$iZ2D = $107;
        } else {
         _abort();
         // unreachable;
        }
       }
       $110 = ((($90)) + 12|0);
       HEAP32[$110>>2] = $92;
       HEAP32[$$pre$phi$iZ2D>>2] = $90;
      } else {
       $111 = ((($16)) + 24|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = ((($16)) + 12|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = ($114|0)==($16|0);
       do {
        if ($115) {
         $125 = ((($16)) + 16|0);
         $126 = ((($125)) + 4|0);
         $127 = HEAP32[$126>>2]|0;
         $128 = ($127|0)==(0|0);
         if ($128) {
          $129 = HEAP32[$125>>2]|0;
          $130 = ($129|0)==(0|0);
          if ($130) {
           $R$3$i = 0;
           break;
          } else {
           $R$1$i = $129;$RP$1$i = $125;
          }
         } else {
          $R$1$i = $127;$RP$1$i = $126;
         }
         while(1) {
          $131 = ((($R$1$i)) + 20|0);
          $132 = HEAP32[$131>>2]|0;
          $133 = ($132|0)==(0|0);
          if (!($133)) {
           $R$1$i = $132;$RP$1$i = $131;
           continue;
          }
          $134 = ((($R$1$i)) + 16|0);
          $135 = HEAP32[$134>>2]|0;
          $136 = ($135|0)==(0|0);
          if ($136) {
           break;
          } else {
           $R$1$i = $135;$RP$1$i = $134;
          }
         }
         $137 = ($RP$1$i>>>0)<($17>>>0);
         if ($137) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$1$i>>2] = 0;
          $R$3$i = $R$1$i;
          break;
         }
        } else {
         $116 = ((($16)) + 8|0);
         $117 = HEAP32[$116>>2]|0;
         $118 = ($117>>>0)<($17>>>0);
         if ($118) {
          _abort();
          // unreachable;
         }
         $119 = ((($117)) + 12|0);
         $120 = HEAP32[$119>>2]|0;
         $121 = ($120|0)==($16|0);
         if (!($121)) {
          _abort();
          // unreachable;
         }
         $122 = ((($114)) + 8|0);
         $123 = HEAP32[$122>>2]|0;
         $124 = ($123|0)==($16|0);
         if ($124) {
          HEAP32[$119>>2] = $114;
          HEAP32[$122>>2] = $117;
          $R$3$i = $114;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $138 = ($112|0)==(0|0);
       if (!($138)) {
        $139 = ((($16)) + 28|0);
        $140 = HEAP32[$139>>2]|0;
        $141 = (27448 + ($140<<2)|0);
        $142 = HEAP32[$141>>2]|0;
        $143 = ($16|0)==($142|0);
        if ($143) {
         HEAP32[$141>>2] = $R$3$i;
         $cond$i = ($R$3$i|0)==(0|0);
         if ($cond$i) {
          $144 = 1 << $140;
          $145 = $144 ^ -1;
          $146 = HEAP32[(27148)>>2]|0;
          $147 = $146 & $145;
          HEAP32[(27148)>>2] = $147;
          break;
         }
        } else {
         $148 = HEAP32[(27160)>>2]|0;
         $149 = ($112>>>0)<($148>>>0);
         if ($149) {
          _abort();
          // unreachable;
         }
         $150 = ((($112)) + 16|0);
         $151 = HEAP32[$150>>2]|0;
         $152 = ($151|0)==($16|0);
         if ($152) {
          HEAP32[$150>>2] = $R$3$i;
         } else {
          $153 = ((($112)) + 20|0);
          HEAP32[$153>>2] = $R$3$i;
         }
         $154 = ($R$3$i|0)==(0|0);
         if ($154) {
          break;
         }
        }
        $155 = HEAP32[(27160)>>2]|0;
        $156 = ($R$3$i>>>0)<($155>>>0);
        if ($156) {
         _abort();
         // unreachable;
        }
        $157 = ((($R$3$i)) + 24|0);
        HEAP32[$157>>2] = $112;
        $158 = ((($16)) + 16|0);
        $159 = HEAP32[$158>>2]|0;
        $160 = ($159|0)==(0|0);
        do {
         if (!($160)) {
          $161 = ($159>>>0)<($155>>>0);
          if ($161) {
           _abort();
           // unreachable;
          } else {
           $162 = ((($R$3$i)) + 16|0);
           HEAP32[$162>>2] = $159;
           $163 = ((($159)) + 24|0);
           HEAP32[$163>>2] = $R$3$i;
           break;
          }
         }
        } while(0);
        $164 = ((($158)) + 4|0);
        $165 = HEAP32[$164>>2]|0;
        $166 = ($165|0)==(0|0);
        if (!($166)) {
         $167 = HEAP32[(27160)>>2]|0;
         $168 = ($165>>>0)<($167>>>0);
         if ($168) {
          _abort();
          // unreachable;
         } else {
          $169 = ((($R$3$i)) + 20|0);
          HEAP32[$169>>2] = $165;
          $170 = ((($165)) + 24|0);
          HEAP32[$170>>2] = $R$3$i;
          break;
         }
        }
       }
      }
     } while(0);
     $171 = ($86>>>0)<(16);
     if ($171) {
      $172 = $14 & 1;
      $173 = $84 | $172;
      $174 = $173 | 2;
      HEAP32[$13>>2] = $174;
      $175 = (($12) + ($84)|0);
      $176 = ((($175)) + 4|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = $177 | 1;
      HEAP32[$176>>2] = $178;
      $mem$1 = $oldmem;
      return ($mem$1|0);
     } else {
      $179 = (($12) + ($11)|0);
      $180 = $14 & 1;
      $181 = $180 | $11;
      $182 = $181 | 2;
      HEAP32[$13>>2] = $182;
      $183 = ((($179)) + 4|0);
      $184 = $86 | 3;
      HEAP32[$183>>2] = $184;
      $185 = (($179) + ($86)|0);
      $186 = ((($185)) + 4|0);
      $187 = HEAP32[$186>>2]|0;
      $188 = $187 | 1;
      HEAP32[$186>>2] = $188;
      _dispose_chunk($179,$86);
      $mem$1 = $oldmem;
      return ($mem$1|0);
     }
    }
   }
  }
 } while(0);
 $189 = (_malloc($bytes)|0);
 $190 = ($189|0)==(0|0);
 if ($190) {
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $191 = HEAP32[$13>>2]|0;
 $192 = $191 & -8;
 $193 = $191 & 3;
 $194 = ($193|0)==(0);
 $195 = $194 ? 8 : 4;
 $196 = (($192) - ($195))|0;
 $197 = ($196>>>0)<($bytes>>>0);
 $198 = $197 ? $196 : $bytes;
 _memcpy(($189|0),($oldmem|0),($198|0))|0;
 _free($oldmem);
 $mem$1 = $189;
 return ($mem$1|0);
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$1 = 0, $$14 = 0, $$2 = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F17$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$3 = 0, $R7$1 = 0;
 var $R7$3 = 0, $RP$1 = 0, $RP9$1 = 0, $T$0 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(27160)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(27164)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $99 = ((($0)) + 4|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$1 = $9;$$14 = $10;
     break;
    }
    HEAP32[(27152)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $105 = ((($9)) + 4|0);
    HEAP32[$105>>2] = $104;
    $106 = (($9) + ($10)|0);
    HEAP32[$106>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $17 = ((($9)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($9)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (27184 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[6786]|0;
     $32 = $31 & $30;
     HEAP32[6786] = $32;
     $$1 = $9;$$14 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre23 = ((($20)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi24Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi24Z2D>>2] = $18;
    $$1 = $9;$$14 = $10;
    break;
   }
   $39 = ((($9)) + 24|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($9)) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $53 = ((($9)) + 16|0);
     $54 = ((($53)) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(0|0);
     if ($56) {
      $57 = HEAP32[$53>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $57;$RP$1 = $53;
      }
     } else {
      $R$1 = $55;$RP$1 = $54;
     }
     while(1) {
      $59 = ((($R$1)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$1 = $60;$RP$1 = $59;
       continue;
      }
      $62 = ((($R$1)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$1 = $63;$RP$1 = $62;
      }
     }
     $65 = ($RP$1>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1>>2] = 0;
      $R$3 = $R$1;
      break;
     }
    } else {
     $44 = ((($9)) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$3 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$1 = $9;$$14 = $10;
   } else {
    $67 = ((($9)) + 28|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (27448 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(27148)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(27148)>>2] = $75;
      $$1 = $9;$$14 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(27160)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$3;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$3;
     }
     $82 = ($R$3|0)==(0|0);
     if ($82) {
      $$1 = $9;$$14 = $10;
      break;
     }
    }
    $83 = HEAP32[(27160)>>2]|0;
    $84 = ($R$3>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$3)) + 24|0);
    HEAP32[$85>>2] = $40;
    $86 = ((($9)) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$3)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $92 = ((($86)) + 4|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$1 = $9;$$14 = $10;
    } else {
     $95 = HEAP32[(27160)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$3)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$3;
      $$1 = $9;$$14 = $10;
      break;
     }
    }
   }
  } else {
   $$1 = $p;$$14 = $psize;
  }
 } while(0);
 $107 = HEAP32[(27160)>>2]|0;
 $108 = ($0>>>0)<($107>>>0);
 if ($108) {
  _abort();
  // unreachable;
 }
 $109 = ((($0)) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & 2;
 $112 = ($111|0)==(0);
 if ($112) {
  $113 = HEAP32[(27168)>>2]|0;
  $114 = ($0|0)==($113|0);
  if ($114) {
   $115 = HEAP32[(27156)>>2]|0;
   $116 = (($115) + ($$14))|0;
   HEAP32[(27156)>>2] = $116;
   HEAP32[(27168)>>2] = $$1;
   $117 = $116 | 1;
   $118 = ((($$1)) + 4|0);
   HEAP32[$118>>2] = $117;
   $119 = HEAP32[(27164)>>2]|0;
   $120 = ($$1|0)==($119|0);
   if (!($120)) {
    return;
   }
   HEAP32[(27164)>>2] = 0;
   HEAP32[(27152)>>2] = 0;
   return;
  }
  $121 = HEAP32[(27164)>>2]|0;
  $122 = ($0|0)==($121|0);
  if ($122) {
   $123 = HEAP32[(27152)>>2]|0;
   $124 = (($123) + ($$14))|0;
   HEAP32[(27152)>>2] = $124;
   HEAP32[(27164)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = (($$1) + ($124)|0);
   HEAP32[$127>>2] = $124;
   return;
  }
  $128 = $110 & -8;
  $129 = (($128) + ($$14))|0;
  $130 = $110 >>> 3;
  $131 = ($110>>>0)<(256);
  do {
   if ($131) {
    $132 = ((($0)) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($0)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $130 << 1;
    $137 = (27184 + ($136<<2)|0);
    $138 = ($133|0)==($137|0);
    if (!($138)) {
     $139 = ($133>>>0)<($107>>>0);
     if ($139) {
      _abort();
      // unreachable;
     }
     $140 = ((($133)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($0|0);
     if (!($142)) {
      _abort();
      // unreachable;
     }
    }
    $143 = ($135|0)==($133|0);
    if ($143) {
     $144 = 1 << $130;
     $145 = $144 ^ -1;
     $146 = HEAP32[6786]|0;
     $147 = $146 & $145;
     HEAP32[6786] = $147;
     break;
    }
    $148 = ($135|0)==($137|0);
    if ($148) {
     $$pre21 = ((($135)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $149 = ($135>>>0)<($107>>>0);
     if ($149) {
      _abort();
      // unreachable;
     }
     $150 = ((($135)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==($0|0);
     if ($152) {
      $$pre$phi22Z2D = $150;
     } else {
      _abort();
      // unreachable;
     }
    }
    $153 = ((($133)) + 12|0);
    HEAP32[$153>>2] = $135;
    HEAP32[$$pre$phi22Z2D>>2] = $133;
   } else {
    $154 = ((($0)) + 24|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($0)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==($0|0);
    do {
     if ($158) {
      $168 = ((($0)) + 16|0);
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $172 = HEAP32[$168>>2]|0;
       $173 = ($172|0)==(0|0);
       if ($173) {
        $R7$3 = 0;
        break;
       } else {
        $R7$1 = $172;$RP9$1 = $168;
       }
      } else {
       $R7$1 = $170;$RP9$1 = $169;
      }
      while(1) {
       $174 = ((($R7$1)) + 20|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(0|0);
       if (!($176)) {
        $R7$1 = $175;$RP9$1 = $174;
        continue;
       }
       $177 = ((($R7$1)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if ($179) {
        break;
       } else {
        $R7$1 = $178;$RP9$1 = $177;
       }
      }
      $180 = ($RP9$1>>>0)<($107>>>0);
      if ($180) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$1>>2] = 0;
       $R7$3 = $R7$1;
       break;
      }
     } else {
      $159 = ((($0)) + 8|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160>>>0)<($107>>>0);
      if ($161) {
       _abort();
       // unreachable;
      }
      $162 = ((($160)) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==($0|0);
      if (!($164)) {
       _abort();
       // unreachable;
      }
      $165 = ((($157)) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166|0)==($0|0);
      if ($167) {
       HEAP32[$162>>2] = $157;
       HEAP32[$165>>2] = $160;
       $R7$3 = $157;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $181 = ($155|0)==(0|0);
    if (!($181)) {
     $182 = ((($0)) + 28|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (27448 + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($0|0)==($185|0);
     if ($186) {
      HEAP32[$184>>2] = $R7$3;
      $cond16 = ($R7$3|0)==(0|0);
      if ($cond16) {
       $187 = 1 << $183;
       $188 = $187 ^ -1;
       $189 = HEAP32[(27148)>>2]|0;
       $190 = $189 & $188;
       HEAP32[(27148)>>2] = $190;
       break;
      }
     } else {
      $191 = HEAP32[(27160)>>2]|0;
      $192 = ($155>>>0)<($191>>>0);
      if ($192) {
       _abort();
       // unreachable;
      }
      $193 = ((($155)) + 16|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ($194|0)==($0|0);
      if ($195) {
       HEAP32[$193>>2] = $R7$3;
      } else {
       $196 = ((($155)) + 20|0);
       HEAP32[$196>>2] = $R7$3;
      }
      $197 = ($R7$3|0)==(0|0);
      if ($197) {
       break;
      }
     }
     $198 = HEAP32[(27160)>>2]|0;
     $199 = ($R7$3>>>0)<($198>>>0);
     if ($199) {
      _abort();
      // unreachable;
     }
     $200 = ((($R7$3)) + 24|0);
     HEAP32[$200>>2] = $155;
     $201 = ((($0)) + 16|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ($202|0)==(0|0);
     do {
      if (!($203)) {
       $204 = ($202>>>0)<($198>>>0);
       if ($204) {
        _abort();
        // unreachable;
       } else {
        $205 = ((($R7$3)) + 16|0);
        HEAP32[$205>>2] = $202;
        $206 = ((($202)) + 24|0);
        HEAP32[$206>>2] = $R7$3;
        break;
       }
      }
     } while(0);
     $207 = ((($201)) + 4|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)==(0|0);
     if (!($209)) {
      $210 = HEAP32[(27160)>>2]|0;
      $211 = ($208>>>0)<($210>>>0);
      if ($211) {
       _abort();
       // unreachable;
      } else {
       $212 = ((($R7$3)) + 20|0);
       HEAP32[$212>>2] = $208;
       $213 = ((($208)) + 24|0);
       HEAP32[$213>>2] = $R7$3;
       break;
      }
     }
    }
   }
  } while(0);
  $214 = $129 | 1;
  $215 = ((($$1)) + 4|0);
  HEAP32[$215>>2] = $214;
  $216 = (($$1) + ($129)|0);
  HEAP32[$216>>2] = $129;
  $217 = HEAP32[(27164)>>2]|0;
  $218 = ($$1|0)==($217|0);
  if ($218) {
   HEAP32[(27152)>>2] = $129;
   return;
  } else {
   $$2 = $129;
  }
 } else {
  $219 = $110 & -2;
  HEAP32[$109>>2] = $219;
  $220 = $$14 | 1;
  $221 = ((($$1)) + 4|0);
  HEAP32[$221>>2] = $220;
  $222 = (($$1) + ($$14)|0);
  HEAP32[$222>>2] = $$14;
  $$2 = $$14;
 }
 $223 = $$2 >>> 3;
 $224 = ($$2>>>0)<(256);
 if ($224) {
  $225 = $223 << 1;
  $226 = (27184 + ($225<<2)|0);
  $227 = HEAP32[6786]|0;
  $228 = 1 << $223;
  $229 = $227 & $228;
  $230 = ($229|0)==(0);
  if ($230) {
   $231 = $227 | $228;
   HEAP32[6786] = $231;
   $$pre = ((($226)) + 8|0);
   $$pre$phiZ2D = $$pre;$F17$0 = $226;
  } else {
   $232 = ((($226)) + 8|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = HEAP32[(27160)>>2]|0;
   $235 = ($233>>>0)<($234>>>0);
   if ($235) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $232;$F17$0 = $233;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $236 = ((($F17$0)) + 12|0);
  HEAP32[$236>>2] = $$1;
  $237 = ((($$1)) + 8|0);
  HEAP32[$237>>2] = $F17$0;
  $238 = ((($$1)) + 12|0);
  HEAP32[$238>>2] = $226;
  return;
 }
 $239 = $$2 >>> 8;
 $240 = ($239|0)==(0);
 if ($240) {
  $I20$0 = 0;
 } else {
  $241 = ($$2>>>0)>(16777215);
  if ($241) {
   $I20$0 = 31;
  } else {
   $242 = (($239) + 1048320)|0;
   $243 = $242 >>> 16;
   $244 = $243 & 8;
   $245 = $239 << $244;
   $246 = (($245) + 520192)|0;
   $247 = $246 >>> 16;
   $248 = $247 & 4;
   $249 = $248 | $244;
   $250 = $245 << $248;
   $251 = (($250) + 245760)|0;
   $252 = $251 >>> 16;
   $253 = $252 & 2;
   $254 = $249 | $253;
   $255 = (14 - ($254))|0;
   $256 = $250 << $253;
   $257 = $256 >>> 15;
   $258 = (($255) + ($257))|0;
   $259 = $258 << 1;
   $260 = (($258) + 7)|0;
   $261 = $$2 >>> $260;
   $262 = $261 & 1;
   $263 = $262 | $259;
   $I20$0 = $263;
  }
 }
 $264 = (27448 + ($I20$0<<2)|0);
 $265 = ((($$1)) + 28|0);
 HEAP32[$265>>2] = $I20$0;
 $266 = ((($$1)) + 16|0);
 $267 = ((($$1)) + 20|0);
 HEAP32[$267>>2] = 0;
 HEAP32[$266>>2] = 0;
 $268 = HEAP32[(27148)>>2]|0;
 $269 = 1 << $I20$0;
 $270 = $268 & $269;
 $271 = ($270|0)==(0);
 if ($271) {
  $272 = $268 | $269;
  HEAP32[(27148)>>2] = $272;
  HEAP32[$264>>2] = $$1;
  $273 = ((($$1)) + 24|0);
  HEAP32[$273>>2] = $264;
  $274 = ((($$1)) + 12|0);
  HEAP32[$274>>2] = $$1;
  $275 = ((($$1)) + 8|0);
  HEAP32[$275>>2] = $$1;
  return;
 }
 $276 = HEAP32[$264>>2]|0;
 $277 = ($I20$0|0)==(31);
 $278 = $I20$0 >>> 1;
 $279 = (25 - ($278))|0;
 $280 = $277 ? 0 : $279;
 $281 = $$2 << $280;
 $K21$0 = $281;$T$0 = $276;
 while(1) {
  $282 = ((($T$0)) + 4|0);
  $283 = HEAP32[$282>>2]|0;
  $284 = $283 & -8;
  $285 = ($284|0)==($$2|0);
  if ($285) {
   label = 127;
   break;
  }
  $286 = $K21$0 >>> 31;
  $287 = (((($T$0)) + 16|0) + ($286<<2)|0);
  $288 = $K21$0 << 1;
  $289 = HEAP32[$287>>2]|0;
  $290 = ($289|0)==(0|0);
  if ($290) {
   label = 124;
   break;
  } else {
   $K21$0 = $288;$T$0 = $289;
  }
 }
 if ((label|0) == 124) {
  $291 = HEAP32[(27160)>>2]|0;
  $292 = ($287>>>0)<($291>>>0);
  if ($292) {
   _abort();
   // unreachable;
  }
  HEAP32[$287>>2] = $$1;
  $293 = ((($$1)) + 24|0);
  HEAP32[$293>>2] = $T$0;
  $294 = ((($$1)) + 12|0);
  HEAP32[$294>>2] = $$1;
  $295 = ((($$1)) + 8|0);
  HEAP32[$295>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $296 = ((($T$0)) + 8|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = HEAP32[(27160)>>2]|0;
  $299 = ($297>>>0)>=($298>>>0);
  $not$ = ($T$0>>>0)>=($298>>>0);
  $300 = $299 & $not$;
  if (!($300)) {
   _abort();
   // unreachable;
  }
  $301 = ((($297)) + 12|0);
  HEAP32[$301>>2] = $$1;
  HEAP32[$296>>2] = $$1;
  $302 = ((($$1)) + 8|0);
  HEAP32[$302>>2] = $297;
  $303 = ((($$1)) + 12|0);
  HEAP32[$303>>2] = $T$0;
  $304 = ((($$1)) + 24|0);
  HEAP32[$304>>2] = 0;
  return;
 }
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$2 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$2 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,16)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$2 = 0;
   } else {
    dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = ((($info)) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = ((($info)) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = ((($info)) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = ((($7)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 63]($2,$info,$10,1);
    $11 = ((($info)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = ((($info)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function ___dynamic_cast($static_ptr,$dst_type) {
 $static_ptr = $static_ptr|0;
 $dst_type = $dst_type|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = ((($0)) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($static_ptr) + ($2)|0);
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $6 = ((($info)) + 4|0);
 HEAP32[$6>>2] = $static_ptr;
 $7 = ((($info)) + 8|0);
 HEAP32[$7>>2] = 48;
 $8 = ((($info)) + 12|0);
 $9 = ((($info)) + 16|0);
 $10 = ((($info)) + 20|0);
 $11 = ((($info)) + 24|0);
 $12 = ((($info)) + 28|0);
 $13 = ((($info)) + 32|0);
 $14 = ((($info)) + 40|0);
 $15 = ($5|0)==($dst_type|0);
 dest=$8; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$8+40>>1]=0|0;HEAP8[$8+42>>0]=0|0;
 L1: do {
  if ($15) {
   $16 = ((($info)) + 48|0);
   HEAP32[$16>>2] = 1;
   $17 = HEAP32[$dst_type>>2]|0;
   $18 = ((($17)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_viiiiii[$19 & 63]($dst_type,$info,$3,$3,1,0);
   $20 = HEAP32[$11>>2]|0;
   $21 = ($20|0)==(1);
   $$ = $21 ? $3 : 0;
   $dst_ptr$0 = $$;
  } else {
   $22 = ((($info)) + 36|0);
   $23 = HEAP32[$5>>2]|0;
   $24 = ((($23)) + 24|0);
   $25 = HEAP32[$24>>2]|0;
   FUNCTION_TABLE_viiiii[$25 & 63]($5,$info,$3,1,0);
   $26 = HEAP32[$22>>2]|0;
   switch ($26|0) {
   case 0:  {
    $27 = HEAP32[$14>>2]|0;
    $28 = ($27|0)==(1);
    $29 = HEAP32[$12>>2]|0;
    $30 = ($29|0)==(1);
    $or$cond = $28 & $30;
    $31 = HEAP32[$13>>2]|0;
    $32 = ($31|0)==(1);
    $or$cond3 = $or$cond & $32;
    $33 = HEAP32[$10>>2]|0;
    $$8 = $or$cond3 ? $33 : 0;
    $dst_ptr$0 = $$8;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $34 = HEAP32[$11>>2]|0;
   $35 = ($34|0)==(1);
   if (!($35)) {
    $36 = HEAP32[$14>>2]|0;
    $37 = ($36|0)==(0);
    $38 = HEAP32[$12>>2]|0;
    $39 = ($38|0)==(1);
    $or$cond5 = $37 & $39;
    $40 = HEAP32[$13>>2]|0;
    $41 = ($40|0)==(1);
    $or$cond7 = $or$cond5 & $41;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $42 = HEAP32[$9>>2]|0;
   $dst_ptr$0 = $42;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 63]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info,$dst_ptr,$current_ptr,$path_below) {
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($info)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = ((($info)) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = ((($info)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = ((($info)) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = ((($info)) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = ((($info)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = ((($info)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = ((($info)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = ((($info)) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = ((($info)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $23 = $path_below;
   } else {
    $23 = $17;
   }
   $19 = ((($info)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $22 = ($23|0)==(1);
   $or$cond1 = $21 & $22;
   if ($or$cond1) {
    $24 = ((($info)) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off02 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $44 = ((($this)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 24|0);
    $48 = HEAP32[$47>>2]|0;
    FUNCTION_TABLE_viiiii[$48 & 63]($45,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($info)) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($info)) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 63]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off02 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off02 = 1;
       label = 13;
      } else {
       label = 17;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = ((($info)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($info)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($info)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($info)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off02) {
          label = 17;
          break;
         } else {
          $43 = 4;
          break;
         }
        }
       }
       if ($is_dst_type_derived_from_static_type$0$off02) {
        label = 17;
       } else {
        $43 = 4;
       }
      }
     } while(0);
     if ((label|0) == 17) {
      $43 = 3;
     }
     HEAP32[$20>>2] = $43;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 16|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if ($5) {
    HEAP32[$3>>2] = $adjustedPtr;
    $6 = ((($info)) + 24|0);
    HEAP32[$6>>2] = $path_below;
    $7 = ((($info)) + 36|0);
    HEAP32[$7>>2] = 1;
    break;
   }
   $8 = ($4|0)==($adjustedPtr|0);
   if (!($8)) {
    $12 = ((($info)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (($13) + 1)|0;
    HEAP32[$12>>2] = $14;
    $15 = ((($info)) + 24|0);
    HEAP32[$15>>2] = 2;
    $16 = ((($info)) + 54|0);
    HEAP8[$16>>0] = 1;
    break;
   }
   $9 = ((($info)) + 24|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(2);
   if ($11) {
    HEAP32[$9>>2] = $path_below;
   }
  } else {
   $17 = ((($this)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   FUNCTION_TABLE_viiii[$21 & 63]($18,$info,$adjustedPtr,$path_below);
  }
 } while(0);
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = ((($info)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = ((($info)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = ((($info)) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = ((($info)) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = ((($info)) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = ((($info)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = ((($info)) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = ((($info)) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = ((($info)) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 16|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if ($5) {
    HEAP32[$3>>2] = $adjustedPtr;
    $6 = ((($info)) + 24|0);
    HEAP32[$6>>2] = $path_below;
    $7 = ((($info)) + 36|0);
    HEAP32[$7>>2] = 1;
    break;
   }
   $8 = ($4|0)==($adjustedPtr|0);
   if (!($8)) {
    $12 = ((($info)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (($13) + 1)|0;
    HEAP32[$12>>2] = $14;
    $15 = ((($info)) + 24|0);
    HEAP32[$15>>2] = 2;
    $16 = ((($info)) + 54|0);
    HEAP8[$16>>0] = 1;
    break;
   }
   $9 = ((($info)) + 24|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(2);
   if ($11) {
    HEAP32[$9>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26943|0);
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 127]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,104)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0 | 0, tempRet0 ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0 | 0, HEAP32[$rem + 4 >> 2] ^ $1$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&127](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&127](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&127](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&63](a1|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&63]();
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&127](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&127](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&63](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function b2(p0) {
 p0 = p0|0; nullFunc_vi(2);
}
function b3(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(3);
}
function b4(p0) {
 p0 = p0|0; nullFunc_ii(4);return 0;
}
function b5() {
 ; nullFunc_v(5);
}
function b6(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(6);return 0;
}
function b7(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(7);
}
function b8(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(8);return 0;
}
function b9(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(9);return 0;
}
function b10(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(10);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,__ZL7js_readP5hFILEPvj,__ZL7js_seekP5hFILEii,b0,_fd_read,_fd_write,_fd_seek,b0,b0,b0,b0,_mem_read,_mem_seek,b0,b0,b0,_net_read,_net_seek,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,___stdio_write,___stdio_seek,___stdout_write,_sn_write,b0,b0,b0,b0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_zcalloc,b0,b0,b0,___stdio_read,_do_read_562,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vi = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b2,b2,b2,b2,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b2,b2,b2,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b2,b2,__ZNSt3__13mapIiP7htsFileNS_4lessIiEENS_9allocatorINS_4pairIKiS2_EEEEED2Ev,b2
,b2,b2,_cram_beta_encode_free,b2,b2,_cram_byte_array_len_encode_free,b2,b2,_cram_byte_array_stop_encode_free,b2,b2,_cram_external_encode_free,b2,b2,b2,b2,b2,_cram_external_decode_free,b2,b2,b2,_cram_beta_decode_free,b2,b2,_cram_subexp_decode_free,b2,_cram_gamma_decode_free,_cram_huffman_decode_free,b2,b2
,b2,b2,b2,b2,_cram_huffman_encode_free,b2,b2,b2,b2,b2,b2,_cram_byte_array_len_decode_free,b2,b2,_cram_byte_array_stop_decode_free,b2,b2,_cleanup_607,_cleanup_604,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_zcfree,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_ii = [b4,b4,b4,__ZL8js_closeP5hFILE,b4,b4,b4,_fd_flush,_fd_close,b4,_hfile_always_local,b4,b4,_mem_close,b4,b4,b4,b4,_net_close,b4,_hfile_always_remote,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,___stdio_close,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt9bad_alloc4whatEv,_cram_flush_thread,b4,_bgzf_encode_func
,b4,_cram_decode_slice_thread,b4,b4,b4];
var FUNCTION_TABLE_v = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,_hfile_exit,b5,b5,b5,b5];
var FUNCTION_TABLE_iiiii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_cram_external_decode_init,_cram_huffman_decode_init,_cram_byte_array_len_decode_init,_cram_byte_array_stop_decode_init,_cram_beta_decode_init,_cram_subexp_decode_init,_cram_gamma_decode_init,_cram_external_encode_init
,_cram_huffman_encode_init,_cram_byte_array_len_encode_init,_cram_byte_array_stop_encode_init,_cram_beta_encode_init,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,_cram_beta_encode_int,_cram_beta_encode_store,b6,_cram_byte_array_len_encode,_cram_byte_array_len_encode_store,b6,_cram_byte_array_stop_encode,_cram_byte_array_stop_encode_store,b6,_cram_external_encode_char,_cram_external_encode_store,b6,b6,b6,b6,_cram_external_encode_int,b6,b6,b6,_cram_beta_encode_char,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,_cram_huffman_encode_char0,_cram_huffman_encode_char,_cram_huffman_encode_int0,_cram_huffman_encode_int,_cram_huffman_encode_store,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_viiiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b7,b7,b7,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_iii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,_hopen_mem,b8,b8,b8,b8,_hopen_fd_fileuri,_hopen_unknown_scheme,b8,b8,b8,_hopen_net,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,_deflate_stored,_deflate_fast,_deflate_slow,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_code_sort
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_cram_external_decode_int,_cram_external_decode_char,_cram_external_decode_block,b9,b9,_cram_beta_decode_int,_cram_beta_decode_char,b9,b9,_cram_subexp_decode,b9,_cram_gamma_decode,b9,b9,_cram_huffman_decode_null,b9
,_cram_huffman_decode_char0,_cram_huffman_decode_char,_cram_huffman_decode_int0,_cram_huffman_decode_int,b9,b9,b9,b9,b9,b9,_cram_byte_array_len_decode,b9,_cram_byte_array_stop_decode_block,_cram_byte_array_stop_decode_char,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b10,b10,b10,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10];

  return { _bgzf_open_js: _bgzf_open_js, ___cxa_can_catch: ___cxa_can_catch, _free: _free, _bgzf_close_js: _bgzf_close_js, _htonl: _htonl, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _test: _test, _bitshift64Ashr: _bitshift64Ashr, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _htons: _htons, _bitshift64Shl: _bitshift64Shl, _llvm_bswap_i32: _llvm_bswap_i32, _ntohs: _ntohs, __GLOBAL__sub_I_interface_cpp: __GLOBAL__sub_I_interface_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__bgzf_open_js = asm["_bgzf_open_js"]; asm["_bgzf_open_js"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bgzf_open_js.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__bgzf_close_js = asm["_bgzf_close_js"]; asm["_bgzf_close_js"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bgzf_close_js.apply(null, arguments);
};

var real__htonl = asm["_htonl"]; asm["_htonl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__htonl.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__test = asm["_test"]; asm["_test"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__test.apply(null, arguments);
};

var real__bitshift64Ashr = asm["_bitshift64Ashr"]; asm["_bitshift64Ashr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Ashr.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__ntohs = asm["_ntohs"]; asm["_ntohs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ntohs.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__htons = asm["_htons"]; asm["_htons"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__htons.apply(null, arguments);
};

var real___GLOBAL__sub_I_interface_cpp = asm["__GLOBAL__sub_I_interface_cpp"]; asm["__GLOBAL__sub_I_interface_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_interface_cpp.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var _bgzf_open_js = Module["_bgzf_open_js"] = asm["_bgzf_open_js"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var _bgzf_close_js = Module["_bgzf_close_js"] = asm["_bgzf_close_js"];
var _htonl = Module["_htonl"] = asm["_htonl"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _test = Module["_test"] = asm["_test"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _ntohs = Module["_ntohs"] = asm["_ntohs"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _htons = Module["_htons"] = asm["_htons"];
var __GLOBAL__sub_I_interface_cpp = Module["__GLOBAL__sub_I_interface_cpp"] = asm["__GLOBAL__sub_I_interface_cpp"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===




function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}


var workerResponded = false, workerCallbackId = -1;

(function() {
  var messageBuffer = null, buffer = 0, bufferSize = 0;

  function flushMessages() {
    if (!messageBuffer) return;
    if (runtimeInitialized) {
      var temp = messageBuffer;
      messageBuffer = null;
      temp.forEach(function(message) {
        onmessage(message);
      });
    }
  }

  function messageResender() {
    flushMessages();
    if (messageBuffer) {
      setTimeout(messageResender, 100); // still more to do
    }
  }

  onmessage = function onmessage(msg) {
    // if main has not yet been called (mem init file, other async things), buffer messages
    if (!runtimeInitialized) {
      if (!messageBuffer) {
        messageBuffer = [];
        setTimeout(messageResender, 100);
      }
      messageBuffer.push(msg);
      return;
    }
    flushMessages();

    var func = Module['_' + msg.data['funcName']];
    if (!func) throw 'invalid worker function to call: ' + msg.data['funcName'];
    var data = msg.data['data'];
    if (data) {
      if (!data.byteLength) data = new Uint8Array(data);
      if (!buffer || bufferSize < data.length) {
        if (buffer) _free(buffer);
        bufferSize = data.length;
        buffer = _malloc(data.length);
      }
      HEAPU8.set(data, buffer);
    }

    workerResponded = false;
    workerCallbackId = msg.data['callbackId'];
    if (data) {
      func(buffer, data.length);
    } else {
      func(0, 0);
    }
  }
})();






// {{MODULE_ADDITIONS}}



var htsfiles = {};

function Htsfile(fileobj) {
    this.reader = new FileReaderSync();
    this.offset = 0;
    this.cursor = -1;
    this.bufsize = 4194304; // 4 MiB
    this.buf = undefined;
    this.fileobj = fileobj;
    this.eof = 0;
}

Htsfile.prototype._getchunk = function () {
    if (this.fileobj.size > this.offset+this.bufsize) {
        blob = this.fileobj.slice(this.offset, this.offset+this.bufsize);
    } else {
        blob = this.fileobj.slice(this.offset, this.fileobj.size);
        this.eof = 1;
    }
    this.offset += this.bufsize;
    this.buf = this.reader.readAsArrayBuffer(blob);
    this.cursor = 0;
}

Htsfile.prototype.seek = function (offset, whence) {
    if (this.offset != offset) {
        if (this.offset < offset && offset < this.offset+this.bufsize) {
            this.cursor = offset - this.offset;
        } else {
            this.offset = offset;
            this.cursor = -1;
        }
    }
    return this.offset + this.cursor;
}

Htsfile.prototype.read = function (ptr, nbytes) {
    var buf, heap, over, nbytesread;

    if (this.cursor === -1)
        this._getchunk();

    heap = new Int8Array(Module.HEAP8.buffer, ptr, nbytes);
    if (this.bufsize > this.cursor+nbytes) {
        buf = this.buf.slice(this.cursor, this.cursor+nbytes);
        heap.set(new Int8Array(buf));
        nbytesread = nbytes;

        this.cursor += nbytes;
    } else {
        if (this.eof) return 0;

        over = this.cursor + nbytes - this.bufsize + 1;

        buf = this.buf.slice(this.cursor, this.bufsize);
        heap.set(new Int8Array(buf));

        nbytesread = this.bufsize - this.cursor;

        this._getchunk();
        if (this.eof) {
            if (this.buf.byteLength > over) {
                buf = this.buf.slice(0, over);
                heap.set(new Int8Array(buf, nbytes-over));
                nbytesread += over;
            } else if (this.buf.byteLength > 0) {
                heap.set(new Int8Array(buf));
                nbytesread += buf.byteLength;
            }
        } else {
            buf = this.buf.slice(0, over);
            heap.set(new Int8Array(buf, nbytes-over));
            nbytesread += over;
        }

        this.cursor += over;
    }
    return nbytesread;
}

Htsfile.prototype.close = function () {
}

function js_close(fd) {
    htsfiles[fd].close();
    delete htsfiles[fd];
}

function js_seek(fd, offset, whence) {
    return htsfiles[fd].seek(offset, whence);
}

function js_read(fd, ptr, nbytes) {
    return htsfiles[fd].read(ptr, nbytes);
}

function hts_open(fileobj) {
    var f = new Htsfile(fileobj);
    for (var fd=1;;fd++) {
        if (htsfiles[fd] === undefined)
            break;
    }
    htsfiles[fd] = f;

    if (Module._bgzf_open_js(fd) == 0)
        return fd;
    else
        throw "Something wrong happened while opening file.";
        return 0;
}

function hts_close(fd) {
    Module._bgzf_close_js(fd);
}

function sam_hdr_read(fd) {
    return Module._sam_hdr_read_js(fd);
}

function sam_read1(fd) {
    return Module._sam_read1_js(fd); 
}

function test(fd) {
    Module._test(fd);
}

